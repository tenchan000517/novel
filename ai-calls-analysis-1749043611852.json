{
  "metadata": {
    "version": "2.0.0",
    "timestamp": "2025-06-04T13:26:51.851Z",
    "projectPath": "C:\\novel-automation-system\\src",
    "totalFiles": 258,
    "processedFiles": 258,
    "scanDuration": "2.12s",
    "toolInfo": {
      "name": "Enhanced AI Calls Analyzer",
      "description": "小説生成システム特化AI呼び出し分析ツール",
      "features": [
        "重複検出",
        "プロンプト分析",
        "出力パターン分析",
        "小説特有要素検出",
        "セマンティック分析",
        "最適化推奨"
      ]
    }
  },
  "summary": {
    "statistics": {
      "overview": {
        "totalCalls": 255,
        "fileCount": 38,
        "averageCallsPerFile": "6.71",
        "scanTimestamp": "2025-06-04T13:26:51.839Z"
      },
      "methodDistribution": {
        "detailed": {
          "generateChapter": 4,
          "generateText": 187,
          "generateContent": 16,
          "analyzeCharacter": 10,
          "analyzeStyle": 4,
          "buildAnalysisPrompt": 2,
          "validateApiKey": 4,
          "setModelMap": 3,
          "getModelInfo": 3,
          "generateStory": 1,
          "executeGeminiRequest": 3,
          "generateSummary": 5,
          "executeAIAnalysis": 4,
          "prompt": 1,
          "performAICoherenceAnalysis": 2,
          "performAIObjectiveAnalysis": 2,
          "performAIEmotionalAnalysis": 2,
          "performAIImprovementAnalysis": 2
        },
        "categorized": {
          "uncategorized": 26,
          "generation": 215,
          "analysis": 14,
          "novel": 15,
          "utility": 0
        },
        "topMethods": [
          [
            "generateText",
            187
          ],
          [
            "generateContent",
            16
          ],
          [
            "analyzeCharacter",
            10
          ],
          [
            "generateSummary",
            5
          ],
          [
            "generateChapter",
            4
          ],
          [
            "analyzeStyle",
            4
          ],
          [
            "validateApiKey",
            4
          ],
          [
            "executeAIAnalysis",
            4
          ],
          [
            "setModelMap",
            3
          ],
          [
            "getModelInfo",
            3
          ]
        ]
      },
      "promptAnalysis": {
        "totalPrompts": 594,
        "promptTypes": {
          "pattern_match": 405,
          "template_literal": 59,
          "method_based": 120,
          "variable_assignment": 10
        },
        "lengthDistribution": {
          "short": 83,
          "medium": 302,
          "long": 89,
          "veryLong": 0
        },
        "languageDistribution": {
          "english": 405
        },
        "complexityDistribution": {
          "low": 394,
          "medium": 11
        },
        "keywordFrequency": {
          "章": 75,
          "生成": 166,
          "chapter": 88,
          "generate": 267,
          "Chapter": 19,
          "シーン": 16,
          "分析": 71,
          "作成": 3,
          "create": 8,
          "character": 61,
          "analyze": 30,
          "Character": 12,
          "scene": 8,
          "キャラクター": 55,
          "物語": 13,
          "Scene": 7,
          "小説": 16,
          "Generate": 4,
          "story": 34,
          "ストーリー": 45,
          "description": 6,
          "設定": 9,
          "Novel": 1,
          "Story": 5,
          "Plot": 6
        },
        "averageLength": 240,
        "novelElementsFrequency": {
          "perspective:third_person": 405,
          "tense:present": 405
        }
      },
      "outputAnalysis": {
        "totalOutputs": 450,
        "outputTypes": {
          "type_annotation": 88,
          "novel_structure": 282,
          "json_expected": 50,
          "response_structure": 29,
          "interface_definition": 1
        },
        "interfaceCount": 1,
        "jsonResponseCount": 50,
        "novelStructureCount": 282,
        "topInterfaces": {
          "ICharacterAnalysisService": 1
        },
        "complexityDistribution": {}
      },
      "parametersAnalysis": {
        "totalParameterSets": 168,
        "parameterFrequency": {
          "contentLength": 1,
          "promptLength": 3,
          "temperature": 158,
          "prompt": 1,
          "model": 5,
          "frequencyPenalty": 8,
          "presencePenalty": 8,
          "topP": 3,
          "content": 5,
          "contents": 2,
          "defaultModel": 1,
          "modelMap": 1,
          "message": 1
        },
        "valueDistribution": {
          "contentLength:chapter.content.length": 1,
          "promptLength:finalPrompt.length": 2,
          "temperature:options?.temperature": 2,
          "prompt:string": 1,
          "temperature:0.3": 52,
          "temperature:0.4": 19,
          "temperature:0.7": 23,
          "temperature:0.2": 19,
          "temperature:0.1": 26,
          "temperature:0.6": 2,
          "temperature:0.1 // 分析タスクは低温で": 4,
          "temperature:params.generation.temperature": 3,
          "model:enhancementOptions.overrides.model": 3,
          "temperature:0.5": 6,
          "frequencyPenalty:0.5": 6,
          "presencePenalty:0.2": 6,
          "topP:0.9\r\n     *": 3,
          "content:'gemini-2.0-flash'\r\n *": 2,
          "temperature:0.8": 2,
          "frequencyPenalty:0.6": 2,
          "presencePenalty:0.3": 2,
          "content:'gemini-2.0-flash'": 3,
          "contents:[{ role: 'user'": 2,
          "model:this.defaultModel": 2,
          "defaultModel:this.defaultModel": 1,
          "modelMap:{ ...this.modelMap": 1,
          "message:String(error);\r\n\r\n                logger.error(`Gemini API error (attempt ${attemptCount": 1,
          "promptLength:prompt.length": 1
        },
        "configurationPatterns": {
          "contentLength": 1,
          "promptLength|temperature": 2,
          "prompt": 1,
          "temperature": 143,
          "model|temperature": 3,
          "frequencyPenalty|presencePenalty|temperature": 3,
          "frequencyPenalty|presencePenalty|temperature|topP": 3,
          "content|temperature": 2,
          "content|frequencyPenalty|presencePenalty|temperature": 2,
          "contents": 2,
          "model": 2,
          "content": 1,
          "defaultModel|modelMap": 1,
          "message": 1,
          "promptLength": 1
        },
        "averageParametersPerCall": "1.17"
      },
      "novelSpecificAnalysis": {
        "novelRelatedCalls": 253,
        "genreDistribution": {
          "SF": 211,
          "ファンタジー": 40,
          "ミステリー": 28,
          "ロマンス": 18,
          "ホラー": 4,
          "アクション": 17,
          "fantasy": 17,
          "mystery": 17,
          "romance": 7,
          "horror": 4
        },
        "storyElementDistribution": {
          "プロット": 69,
          "設定": 184,
          "plot": 113,
          "setting": 73,
          "シーン": 80,
          "scene": 118,
          "世界観": 41,
          "背景": 31
        },
        "characterElementDistribution": {
          "character": 195,
          "キャラクター": 209,
          "主人公": 41,
          "登場人物": 56,
          "character development": 7
        },
        "narrativeStyleDistribution": {
          "first_person": 13
        },
        "totalNovelKeywords": 0,
        "novelCallsPercentage": "99.2"
      },
      "complexityAnalysis": {
        "semanticComplexity": {
          "high": 0,
          "medium": 6,
          "low": 249
        },
        "promptComplexity": {
          "high": 0,
          "medium": 11,
          "low": 394
        },
        "averageComplexity": "medium"
      },
      "fileDistribution": {
        "byFile": [
          [
            "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            22
          ],
          [
            "src\\lib\\generation\\gemini-client.ts",
            22
          ],
          [
            "src\\lib\\plot\\section\\section-designer.ts",
            21
          ],
          [
            "src\\lib\\plot\\section\\section-analyzer.ts",
            20
          ],
          [
            "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
            15
          ],
          [
            "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
            11
          ],
          [
            "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
            11
          ],
          [
            "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            10
          ],
          [
            "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
            10
          ],
          [
            "src\\lib\\characters\\generators\\character-generator.ts",
            9
          ],
          [
            "src\\lib\\generation\\engine.ts",
            9
          ],
          [
            "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
            7
          ],
          [
            "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
            7
          ],
          [
            "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
            6
          ],
          [
            "src\\lib\\characters\\analyzers\\character-analyzer.ts",
            6
          ],
          [
            "src\\lib\\foreshadowing\\engine.ts",
            6
          ],
          [
            "src\\lib\\foreshadowing\\resolution-advisor.ts",
            5
          ],
          [
            "src\\lib\\learning-journey\\context-manager.ts",
            5
          ],
          [
            "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
            4
          ],
          [
            "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
            4
          ]
        ],
        "byExtension": {
          ".ts": 255
        },
        "byDirectory": [
          [
            "src\\lib\\plot\\section",
            44
          ],
          [
            "src\\lib\\generation",
            31
          ],
          [
            "src\\lib\\analysis\\services\\theme",
            22
          ],
          [
            "src\\lib\\learning-journey",
            19
          ],
          [
            "src\\lib\\foreshadowing",
            17
          ],
          [
            "src\\lib\\analysis\\enhancement\\character",
            15
          ],
          [
            "src\\lib\\analysis\\services\\character",
            12
          ],
          [
            "src\\lib\\analysis\\enhancement\\style",
            11
          ],
          [
            "src\\lib\\analysis\\enhancement\\theme",
            10
          ],
          [
            "src\\lib\\analysis\\services\\chapter",
            10
          ]
        ]
      },
      "duplicateStatistics": {
        "duplicateCallsCount": 78,
        "duplicatePercentage": "30.6",
        "uniqueCallsCount": 177
      }
    },
    "keyFindings": [
      {
        "type": "critical",
        "title": "完全重複コードの存在",
        "description": "44個の完全重複AI呼び出しが検出されました",
        "impact": "high"
      },
      {
        "type": "insight",
        "title": "高度に特化した小説生成システム",
        "description": "AI呼び出しの99.2%が小説生成に特化されています",
        "impact": "medium"
      }
    ],
    "riskAssessment": [
      {
        "category": "maintainability",
        "level": "high",
        "description": "重複コードによる保守性の低下",
        "mitigation": "共通関数の作成とリファクタリング"
      },
      {
        "category": "consistency",
        "level": "low",
        "description": "多様なジャンルによる出力の一貫性への影響",
        "mitigation": "ジャンル別テンプレートの整理"
      }
    ]
  },
  "data": {
    "aiCalls": [
      {
        "id": "call_6bca0ae0",
        "filePath": "src\\app\\api\\generation\\chapter\\route.ts",
        "fileName": "route.ts",
        "lineNumber": 233,
        "lineContent": "const chapter = await generationEngine.generateChapter(chapterNumber, requestData);",
        "matchedPattern": "(\\w+\\.)?generateChapter\\s*\\(",
        "callMethod": "generateChapter",
        "fullMatch": "generationEngine.generateChapter(",
        "context": {
          "before": [
            {
              "lineNumber": 228,
              "content": "// === 章生成処理の開始 ===",
              "indent": 4
            },
            {
              "lineNumber": 229,
              "content": "const generationStartTime = Date.now();",
              "indent": 4
            },
            {
              "lineNumber": 230,
              "content": "logger.info(`[ServiceContainer統合API] Starting chapter ${chapterNumber} generation with ServiceContainer`);",
              "indent": 4
            },
            {
              "lineNumber": 231,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 232,
              "content": "// ServiceContainer経由で取得したgenerationEngineによる章生成",
              "indent": 4
            }
          ],
          "current": {
            "lineNumber": 233,
            "content": "const chapter = await generationEngine.generateChapter(chapterNumber, requestData);",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 234,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 235,
              "content": "logger.info(`[ServiceContainer統合API] Chapter ${chapterNumber} generated successfully`, {",
              "indent": 4
            },
            {
              "lineNumber": 236,
              "content": "contentLength: chapter.content.length,",
              "indent": 6
            },
            {
              "lineNumber": 237,
              "content": "generationTime: Date.now() - generationStartTime",
              "indent": 6
            },
            {
              "lineNumber": 238,
              "content": "});",
              "indent": 4
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 222,
            "distance": 11
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ");\n\n    // ServiceContainer経由で取得したgenerationEngineによる章生成\n    const chapter = await generationEngine.generateChapter(chapterNumber, requestData);\n\n    logger.info(",
            "fullLength": 162,
            "truncatedContent": ");\n\n    // ServiceContainer経由で取得したgenerationEngineによる章生成\n    const chapter = await generationEngine.generateChapter(chapterNumber, requestData);\n\n    logger.info(",
            "hash": "a9a1f3eae4e16a93d56d34f8764f874a",
            "keywords": [
              "章",
              "生成",
              "chapter",
              "generate",
              "Chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", {\n      contentLength: chapter.content.length,\n      generationTime: Date.now() - generationStartTime\n    });\n\n    // === 統合記憶階層システムによる章処理（最重要） ===\n    logger.info(",
            "fullLength": 166,
            "truncatedContent": ", {\n      contentLength: chapter.content.length,\n      generationTime: Date.now() - generationStartTime\n    });\n\n    // === 統合記憶階層システムによる章処理（最重要） ===\n    logger.info(",
            "hash": "63f385cb2ccdb145ce205ed52789f6dd",
            "keywords": [
              "章",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ");\n\n    // ServiceContainer経由で取得したgenerationEngineによる章生成\n    const chapter = await generationEngine.generateChapter(chapterNumber, requestData);\n\n    logger.info(",
            "fullLength": 162,
            "truncatedContent": ");\n\n    // ServiceContainer経由で取得したgenerationEngineによる章生成\n    const chapter = await generationEngine.generateChapter(chapterNumber, requestData);\n\n    logger.info(",
            "hash": "a9a1f3eae4e16a93d56d34f8764f874a",
            "keywords": [
              "章",
              "生成",
              "chapter",
              "generate",
              "Chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ");\n\n    // ServiceContainer経由で取得したgenerationEngineによる章生成\n    const chapter = await generationEngine.generateChapter(chapterNumber, requestData);\n\n    logger.info(",
            "fullLength": 162,
            "truncatedContent": ");\n\n    // ServiceContainer経由で取得したgenerationEngineによる章生成\n    const chapter = await generationEngine.generateChapter(chapterNumber, requestData);\n\n    logger.info(",
            "hash": "a9a1f3eae4e16a93d56d34f8764f874a",
            "keywords": [
              "章",
              "生成",
              "chapter",
              "generate",
              "Chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ");\n\n    // ServiceContainer経由で取得したgenerationEngineによる章生成\n    const chapter = await generationEngine.generateChapter(chapterNumber, requestData);\n\n    logger.info(",
            "fullLength": 162,
            "truncatedContent": ");\n\n    // ServiceContainer経由で取得したgenerationEngineによる章生成\n    const chapter = await generationEngine.generateChapter(chapterNumber, requestData);\n\n    logger.info(",
            "hash": "a9a1f3eae4e16a93d56d34f8764f874a",
            "hasVariables": false,
            "variableCount": 0
          },
          {
            "type": "template_literal",
            "content": ", {\n      contentLength: chapter.content.length,\n      generationTime: Date.now() - generationStartTime\n    });\n\n    // === 統合記憶階層システムによる章処理（最重要） ===\n    logger.info(",
            "fullLength": 166,
            "truncatedContent": ", {\n      contentLength: chapter.content.length,\n      generationTime: Date.now() - generationStartTime\n    });\n\n    // === 統合記憶階層システムによる章処理（最重要） ===\n    logger.info(",
            "hash": "63f385cb2ccdb145ce205ed52789f6dd",
            "hasVariables": false,
            "variableCount": 0
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": SystemOperationResult"
            ],
            "extractedTypes": [
              "SystemOperationResult"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "contentLength": {
            "value": "chapter.content.length",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "SYSTEM_CRITICAL",
            "else",
            "preDiagnostics",
            "systemHealth",
            "SystemHealth",
            "DEGRADED",
            "logger",
            "warn",
            "ServiceContainer",
            "API"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "676e46f6bfbc2666987b90a3b6da9c31"
      },
      {
        "id": "call_769936d4",
        "filePath": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
        "fileName": "gemini-adapter.ts",
        "lineNumber": 51,
        "lineContent": "async generateText(",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 46,
              "content": "* @param {string} [options.responseFormat] - 希望する応答形式（json/text）",
              "indent": 3
            },
            {
              "lineNumber": 47,
              "content": "* @param {boolean} [options.useCache] - キャッシュを使用するか（デフォルト: true）",
              "indent": 3
            },
            {
              "lineNumber": 48,
              "content": "* @returns {Promise<string>} 生成されたテキスト",
              "indent": 3
            },
            {
              "lineNumber": 49,
              "content": "* @throws {GenerationError} 生成エラー発生時",
              "indent": 3
            },
            {
              "lineNumber": 50,
              "content": "*/",
              "indent": 3
            }
          ],
          "current": {
            "lineNumber": 51,
            "content": "async generateText(",
            "indent": 2
          },
          "after": [
            {
              "lineNumber": 52,
              "content": "prompt: string,",
              "indent": 4
            },
            {
              "lineNumber": 53,
              "content": "options?: {",
              "indent": 4
            },
            {
              "lineNumber": 54,
              "content": "temperature?: number;",
              "indent": 6
            },
            {
              "lineNumber": 55,
              "content": "targetLength?: number;",
              "indent": 6
            },
            {
              "lineNumber": 56,
              "content": "purpose?: string;",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "constructor",
            "startLine": 31,
            "distance": 20
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<string>"
            ],
            "extractedTypes": [
              "string>"
            ]
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [
            "シーン",
            "設定",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "first_person"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "create"
          ],
          "complexity": "low",
          "dependencies": [
            "string",
            "prompt",
            "param",
            "object",
            "options",
            "number",
            "temperature",
            "targetLength",
            "purpose",
            "analysis"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "debbd84ed44cc143f69777eed9fa27bb"
      },
      {
        "id": "call_13353cc3",
        "filePath": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
        "fileName": "gemini-adapter.ts",
        "lineNumber": 104,
        "lineContent": "this.client.generateText(finalPrompt, apiOptions)",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "client.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 99,
              "content": "temperature: options?.temperature",
              "indent": 8
            },
            {
              "lineNumber": 100,
              "content": "});",
              "indent": 6
            },
            {
              "lineNumber": 101,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 102,
              "content": "// スロットリング付きでAPIリクエスト",
              "indent": 6
            },
            {
              "lineNumber": 103,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 104,
            "content": "this.client.generateText(finalPrompt, apiOptions)",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 105,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 106,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 107,
              "content": "// レスポース後処理（必要に応じて）",
              "indent": 6
            },
            {
              "lineNumber": 108,
              "content": "const processedResponse = this.postProcessResponse(",
              "indent": 6
            },
            {
              "lineNumber": 109,
              "content": "response,",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 83,
            "distance": 21
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "finalPrompt",
            "relatedMethods": [
              "finalPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "promptLength": {
            "value": "finalPrompt.length",
            "source": "object_literal",
            "confidence": "medium"
          },
          "temperature": {
            "value": "options?.temperature",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [
            "シーン",
            "設定",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "first_person"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "temperature",
            "options",
            "targetLength",
            "purpose",
            "overrides",
            "try",
            "logger",
            "debug",
            "Sending",
            "request"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "c4df9004d72d6ad463e7408a306a7221"
      },
      {
        "id": "call_cced1d04",
        "filePath": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
        "fileName": "gemini-adapter.ts",
        "lineNumber": 166,
        "lineContent": "return this.generateText(prompt, options);",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "this.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 161,
              "content": "useCache?: boolean;",
              "indent": 6
            },
            {
              "lineNumber": 162,
              "content": "overrides?: any;",
              "indent": 6
            },
            {
              "lineNumber": 163,
              "content": "}",
              "indent": 4
            },
            {
              "lineNumber": 164,
              "content": "): Promise<string> {",
              "indent": 2
            },
            {
              "lineNumber": 165,
              "content": "// 基本的にはgenerateTextと同じだが、将来的に拡張可能にする",
              "indent": 4
            }
          ],
          "current": {
            "lineNumber": 166,
            "content": "return this.generateText(prompt, options);",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 167,
              "content": "}",
              "indent": 2
            },
            {
              "lineNumber": 168,
              "content": "",
              "indent": 3
            },
            {
              "lineNumber": 169,
              "content": "/**",
              "indent": 2
            },
            {
              "lineNumber": 170,
              "content": "* 分析プロンプトの生成",
              "indent": 3
            },
            {
              "lineNumber": 171,
              "content": "*",
              "indent": 3
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 134,
            "distance": 32
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "generateAnalysisPrompt",
            "relatedMethods": [
              "generateAnalysisPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<string>"
            ],
            "extractedTypes": [
              "string>"
            ]
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [
            "シーン",
            "設定",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "first_person"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "param",
            "string",
            "prompt",
            "object",
            "options",
            "generateText",
            "returns",
            "Promise",
            "async",
            "generateContent"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "bf2618dd3b54ad88273f5dd9bbf7a828"
      },
      {
        "id": "call_12be75a9",
        "filePath": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
        "fileName": "gemini-adapter.ts",
        "lineNumber": 154,
        "lineContent": "async generateContent(",
        "matchedPattern": "(\\w+\\.)?generateContent\\s*\\(",
        "callMethod": "generateContent",
        "fullMatch": "generateContent(",
        "context": {
          "before": [
            {
              "lineNumber": 149,
              "content": "*",
              "indent": 3
            },
            {
              "lineNumber": 150,
              "content": "* @param {string} prompt - 生成プロンプト",
              "indent": 3
            },
            {
              "lineNumber": 151,
              "content": "* @param {object} [options] - 生成オプション（generateTextと同様）",
              "indent": 3
            },
            {
              "lineNumber": 152,
              "content": "* @returns {Promise<string>} 生成されたコンテンツ",
              "indent": 3
            },
            {
              "lineNumber": 153,
              "content": "*/",
              "indent": 3
            }
          ],
          "current": {
            "lineNumber": 154,
            "content": "async generateContent(",
            "indent": 2
          },
          "after": [
            {
              "lineNumber": 155,
              "content": "prompt: string,",
              "indent": 4
            },
            {
              "lineNumber": 156,
              "content": "options?: {",
              "indent": 4
            },
            {
              "lineNumber": 157,
              "content": "temperature?: number;",
              "indent": 6
            },
            {
              "lineNumber": 158,
              "content": "targetLength?: number;",
              "indent": 6
            },
            {
              "lineNumber": 159,
              "content": "purpose?: string;",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 134,
            "distance": 20
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "Failed to generate text",
            "fullLength": 23,
            "truncatedContent": "Failed to generate text",
            "hash": "8e7a6c223df1f41be9c7ad4f64287688",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<string>"
            ],
            "extractedTypes": [
              "string>"
            ]
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [
            "シーン",
            "設定",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "first_person"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "分析",
            "generate"
          ],
          "complexity": "medium",
          "dependencies": [
            "enerationError",
            "error",
            "instanceof",
            "ExternalServiceError",
            "throw",
            "new",
            "GenerationError",
            "Failed",
            "generate",
            "text"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "8efdd1fe3af42239260fbf35ebfbdfbe"
      },
      {
        "id": "call_8205a11d",
        "filePath": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
        "fileName": "gemini-adapter.ts",
        "lineNumber": 104,
        "lineContent": "this.client.generateText(finalPrompt, apiOptions)",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 99,
              "content": "temperature: options?.temperature",
              "indent": 8
            },
            {
              "lineNumber": 100,
              "content": "});",
              "indent": 6
            },
            {
              "lineNumber": 101,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 102,
              "content": "// スロットリング付きでAPIリクエスト",
              "indent": 6
            },
            {
              "lineNumber": 103,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 104,
            "content": "this.client.generateText(finalPrompt, apiOptions)",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 105,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 106,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 107,
              "content": "// レスポース後処理（必要に応じて）",
              "indent": 6
            },
            {
              "lineNumber": 108,
              "content": "const processedResponse = this.postProcessResponse(",
              "indent": 6
            },
            {
              "lineNumber": 109,
              "content": "response,",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 83,
            "distance": 21
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "finalPrompt",
            "relatedMethods": [
              "finalPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "promptLength": {
            "value": "finalPrompt.length",
            "source": "object_literal",
            "confidence": "medium"
          },
          "temperature": {
            "value": "options?.temperature",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [
            "シーン",
            "設定",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "first_person"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "temperature",
            "options",
            "targetLength",
            "purpose",
            "overrides",
            "try",
            "logger",
            "debug",
            "Sending",
            "request"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "1b0346299d2e712b24c59cb41fb7f75c"
      },
      {
        "id": "call_815968e8",
        "filePath": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
        "fileName": "gemini-adapter.ts",
        "lineNumber": 166,
        "lineContent": "return this.generateText(prompt, options);",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 161,
              "content": "useCache?: boolean;",
              "indent": 6
            },
            {
              "lineNumber": 162,
              "content": "overrides?: any;",
              "indent": 6
            },
            {
              "lineNumber": 163,
              "content": "}",
              "indent": 4
            },
            {
              "lineNumber": 164,
              "content": "): Promise<string> {",
              "indent": 2
            },
            {
              "lineNumber": 165,
              "content": "// 基本的にはgenerateTextと同じだが、将来的に拡張可能にする",
              "indent": 4
            }
          ],
          "current": {
            "lineNumber": 166,
            "content": "return this.generateText(prompt, options);",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 167,
              "content": "}",
              "indent": 2
            },
            {
              "lineNumber": 168,
              "content": "",
              "indent": 3
            },
            {
              "lineNumber": 169,
              "content": "/**",
              "indent": 2
            },
            {
              "lineNumber": 170,
              "content": "* 分析プロンプトの生成",
              "indent": 3
            },
            {
              "lineNumber": 171,
              "content": "*",
              "indent": 3
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 134,
            "distance": 32
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "generateAnalysisPrompt",
            "relatedMethods": [
              "generateAnalysisPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<string>"
            ],
            "extractedTypes": [
              "string>"
            ]
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [
            "シーン",
            "設定",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "first_person"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "param",
            "string",
            "prompt",
            "object",
            "options",
            "generateText",
            "returns",
            "Promise",
            "async",
            "generateContent"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "78b0a73ba3fe99f79601e6be32a37ac8"
      },
      {
        "id": "call_9c35b55d",
        "filePath": "src\\lib\\analysis\\adapters\\interfaces.ts",
        "fileName": "interfaces.ts",
        "lineNumber": 21,
        "lineContent": "generateText(",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 16,
              "content": "*",
              "indent": 5
            },
            {
              "lineNumber": 17,
              "content": "* @param prompt 生成プロンプト",
              "indent": 5
            },
            {
              "lineNumber": 18,
              "content": "* @param options 生成オプション",
              "indent": 5
            },
            {
              "lineNumber": 19,
              "content": "* @returns 生成されたテキスト",
              "indent": 5
            },
            {
              "lineNumber": 20,
              "content": "*/",
              "indent": 5
            }
          ],
          "current": {
            "lineNumber": 21,
            "content": "generateText(",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 22,
              "content": "prompt: string,",
              "indent": 6
            },
            {
              "lineNumber": 23,
              "content": "options?: {",
              "indent": 6
            },
            {
              "lineNumber": 24,
              "content": "temperature?: number;",
              "indent": 8
            },
            {
              "lineNumber": 25,
              "content": "targetLength?: number;",
              "indent": 8
            },
            {
              "lineNumber": 26,
              "content": "purpose?: string;",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "unknown",
            "startLine": 21,
            "distance": 0
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<string>"
            ],
            "extractedTypes": [
              "string>"
            ]
          }
        ],
        "parameters": {
          "prompt": {
            "value": "string",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": false,
          "detectedGenres": [],
          "storyElements": [
            "設定",
            "setting"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "fileoverview",
            "Gemini",
            "description",
            "API",
            "GeminiAdapter",
            "export",
            "interface",
            "IGeminiAdapter",
            "param",
            "prompt"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": false,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "25a1c014a06b56e61aae1ba3fc5e4b7b"
      },
      {
        "id": "call_e8daeaad",
        "filePath": "src\\lib\\analysis\\adapters\\interfaces.ts",
        "fileName": "interfaces.ts",
        "lineNumber": 40,
        "lineContent": "generateContent(",
        "matchedPattern": "(\\w+\\.)?generateContent\\s*\\(",
        "callMethod": "generateContent",
        "fullMatch": "generateContent(",
        "context": {
          "before": [
            {
              "lineNumber": 35,
              "content": "*",
              "indent": 5
            },
            {
              "lineNumber": 36,
              "content": "* @param prompt 生成プロンプト",
              "indent": 5
            },
            {
              "lineNumber": 37,
              "content": "* @param options 生成オプション",
              "indent": 5
            },
            {
              "lineNumber": 38,
              "content": "* @returns 生成されたコンテンツ",
              "indent": 5
            },
            {
              "lineNumber": 39,
              "content": "*/",
              "indent": 5
            }
          ],
          "current": {
            "lineNumber": 40,
            "content": "generateContent(",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 41,
              "content": "prompt: string,",
              "indent": 6
            },
            {
              "lineNumber": 42,
              "content": "options?: {",
              "indent": 6
            },
            {
              "lineNumber": 43,
              "content": "temperature?: number;",
              "indent": 8
            },
            {
              "lineNumber": 44,
              "content": "targetLength?: number;",
              "indent": 8
            },
            {
              "lineNumber": 45,
              "content": "purpose?: string;",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "unknown",
            "startLine": 40,
            "distance": 0
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<string>",
              ": Promise<string>"
            ],
            "extractedTypes": [
              "string>",
              "string>"
            ]
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": false,
          "detectedGenres": [],
          "storyElements": [
            "設定",
            "setting"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "param",
            "options",
            "returns",
            "generateText",
            "prompt",
            "string",
            "temperature",
            "number",
            "targetLength",
            "purpose"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": false,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "e30487bc7dadd606217a3cbf9f4f6803"
      },
      {
        "id": "call_5eb04109",
        "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
        "fileName": "analysis-coordinator.ts",
        "lineNumber": 468,
        "lineContent": "const characterAnalysis = await this.characterAnalysisService.analyzeCharacter(content, chapterNumber, context);",
        "matchedPattern": "(\\w+\\.)?analyzeCharacter\\s*\\(",
        "callMethod": "analyzeCharacter",
        "fullMatch": "characterAnalysisService.analyzeCharacter(",
        "context": {
          "before": [
            {
              "lineNumber": 463,
              "content": "content: string,",
              "indent": 8
            },
            {
              "lineNumber": 464,
              "content": "chapterNumber: number,",
              "indent": 8
            },
            {
              "lineNumber": 465,
              "content": "context: GenerationContext",
              "indent": 8
            },
            {
              "lineNumber": 466,
              "content": "): Promise<ChapterAnalysis> {",
              "indent": 4
            },
            {
              "lineNumber": 467,
              "content": "try {",
              "indent": 8
            }
          ],
          "current": {
            "lineNumber": 468,
            "content": "const characterAnalysis = await this.characterAnalysisService.analyzeCharacter(content, chapterNumber, context);",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 469,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 470,
              "content": "const wordCount = content.length;",
              "indent": 12
            },
            {
              "lineNumber": 471,
              "content": "const sentenceCount = (content.match(/[。！？]/g) || []).length;",
              "indent": 12
            },
            {
              "lineNumber": 472,
              "content": "const paragraphCount = content.split('\\n\\n').length;",
              "indent": 12
            },
            {
              "lineNumber": 473,
              "content": "",
              "indent": 0
            }
          ],
          "functionContext": {
            "functionName": "clearCache",
            "startLine": 455,
            "distance": 13
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "第${chapterNumber}章の主要シーン",
            "fullLength": 24,
            "truncatedContent": "第${chapterNumber}章の主要シーン",
            "hash": "ff0e149d82bda2fdaa6de97ec6e4bdce",
            "keywords": [
              "章",
              "シーン",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ")\n        };\n    }\n\n    /**\n     * 基本的な章分析の作成\n     */\n    private async createBasicChapterAnalysis(\n        content: string,\n        chapterNumber: number,\n        context: GenerationContext\n    ): Promise<ChapterAnalysis> {\n        try {\n            const characterAnalysis = await this.characterAnalysisService.analyzeCharacter(content, chapterNumber, context);\n\n            const wordCount = content.length;\n            const sentenceCount = (content.match(/[。！？]/g) || []).length;\n            const paragraphCount = content.split(",
            "fullLength": 534,
            "truncatedContent": ")\n        };\n    }\n\n    /**\n     * 基本的な章分析の作成\n     */\n    private async createBasicChapterAnalysis(\n        content: string,\n        chapterNumber: number,\n        context: GenerationContext\n    ): Promise<ChapterAnalysis> {\n        try {\n            const characterAnalysis = await this.characterAnalysisService.analyzeCharacter(content, chapterNumber, context);\n\n            const wordCount = content.length;\n            const sentenceCount = (content.match(/[。！？]/g) || []).length;\n            const paragraphCount = content.split(",
            "hash": "300fc325f3312af882f7bab48b1652dd",
            "keywords": [
              "章",
              "分析",
              "作成",
              "create",
              "Chapter",
              "chapter",
              "character",
              "analyze",
              "Character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ")\n        };\n    }\n\n    /**\n     * 基本的な章分析の作成\n     */\n    private async createBasicChapterAnalysis(\n        content: string,\n        chapterNumber: number,\n        context: GenerationContext\n    ): Promise<ChapterAnalysis> {\n        try {\n            const characterAnalysis = await this.characterAnalysisService.analyzeCharacter(content, chapterNumber, context);\n\n            const wordCount = content.length;\n            const sentenceCount = (content.match(/[。！？]/g) || []).length;\n            const paragraphCount = content.split(",
            "fullLength": 534,
            "truncatedContent": ")\n        };\n    }\n\n    /**\n     * 基本的な章分析の作成\n     */\n    private async createBasicChapterAnalysis(\n        content: string,\n        chapterNumber: number,\n        context: GenerationContext\n    ): Promise<ChapterAnalysis> {\n        try {\n            const characterAnalysis = await this.characterAnalysisService.analyzeCharacter(content, chapterNumber, context);\n\n            const wordCount = content.length;\n            const sentenceCount = (content.match(/[。！？]/g) || []).length;\n            const paragraphCount = content.split(",
            "hash": "300fc325f3312af882f7bab48b1652dd",
            "keywords": [
              "章",
              "分析",
              "作成",
              "create",
              "Chapter",
              "chapter",
              "character",
              "analyze",
              "Character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ")\n        };\n    }\n\n    /**\n     * 基本的な章分析の作成\n     */\n    private async createBasicChapterAnalysis(\n        content: string,\n        chapterNumber: number,\n        context: GenerationContext\n    ): Promise<ChapterAnalysis> {\n        try {\n            const characterAnalysis = await this.characterAnalysisService.analyzeCharacter(content, chapterNumber, context);\n\n            const wordCount = content.length;\n            const sentenceCount = (content.match(/[。！？]/g) || []).length;\n            const paragraphCount = content.split(",
            "fullLength": 534,
            "truncatedContent": ")\n        };\n    }\n\n    /**\n     * 基本的な章分析の作成\n     */\n    private async createBasicChapterAnalysis(\n        content: string,\n        chapterNumber: number,\n        context: GenerationContext\n    ): Promise<ChapterAnalysis> {\n        try {\n            const characterAnalysis = await this.characterAnalysisService.analyzeCharacter(content, chapterNumber, context);\n\n            const wordCount = content.length;\n            const sentenceCount = (content.match(/[。！？]/g) || []).length;\n            const paragraphCount = content.split(",
            "hash": "300fc325f3312af882f7bab48b1652dd",
            "keywords": [
              "章",
              "分析",
              "作成",
              "create",
              "Chapter",
              "chapter",
              "character",
              "analyze",
              "Character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ").length;\n\n            return {\n                characterAppearances: characterAnalysis.characterAppearances,\n                themeOccurrences: [],\n                foreshadowingElements: [],\n                qualityMetrics: this.createFallbackQualityMetrics(),\n                detectedIssues: [],\n                scenes: [{\n                    id: `scene-${chapterNumber}-1`,\n                    type: ",
            "fullLength": 401,
            "truncatedContent": ").length;\n\n            return {\n                characterAppearances: characterAnalysis.characterAppearances,\n                themeOccurrences: [],\n                foreshadowingElements: [],\n                qualityMetrics: this.createFallbackQualityMetrics(),\n                detectedIssues: [],\n                scenes: [{\n                    id: `scene-${chapterNumber}-1`,\n                    type: ",
            "hash": "1d364d36dbcfdcf1ad2582ae459c11f8",
            "keywords": [
              "character",
              "create",
              "scene",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "ChapterAnalysis",
            "relatedMethods": [
              "ChapterAnalysis",
              "createBasicChapterAnalysis",
              "characterAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<ChapterAnalysis>"
            ],
            "extractedTypes": [
              "ChapterAnalysis>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "scene",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "plot",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "作成",
            "分析",
            "generate",
            "create",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "generateImprovementSuggestions",
            "this",
            "createFallbackImprovementSuggestions",
            "bind",
            "clearCache",
            "logger",
            "info",
            "Fallback",
            "ChapterAnalysisService",
            "cache"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "b30637ad2ff9cae3194df7006b3d1a1a"
      },
      {
        "id": "call_462fa399",
        "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
        "fileName": "analysis-coordinator.ts",
        "lineNumber": 708,
        "lineContent": "() => this.characterAnalysisService.analyzeCharacter(content, chapterNumber, context)",
        "matchedPattern": "(\\w+\\.)?analyzeCharacter\\s*\\(",
        "callMethod": "analyzeCharacter",
        "fullMatch": "characterAnalysisService.analyzeCharacter(",
        "context": {
          "before": [
            {
              "lineNumber": 703,
              "content": "),",
              "indent": 12
            },
            {
              "lineNumber": 704,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 705,
              "content": "// キャラクター分析",
              "indent": 12
            },
            {
              "lineNumber": 706,
              "content": "this.safelyExecuteAnalysis(",
              "indent": 12
            },
            {
              "lineNumber": 707,
              "content": "'CharacterAnalysis',",
              "indent": 16
            }
          ],
          "current": {
            "lineNumber": 708,
            "content": "() => this.characterAnalysisService.analyzeCharacter(content, chapterNumber, context)",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 709,
              "content": "),",
              "indent": 12
            },
            {
              "lineNumber": 710,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 711,
              "content": "// メモリ統合物語構造分析",
              "indent": 12
            },
            {
              "lineNumber": 712,
              "content": "this.safelyExecuteAnalysis(",
              "indent": 12
            },
            {
              "lineNumber": 713,
              "content": "'NarrativeAnalysisWithMemory',",
              "indent": 16
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 658,
            "distance": 50
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ",\n                () => this.executeStyleAnalysis(content)\n            ),\n\n            // キャラクター分析\n            this.safelyExecuteAnalysis(\n                ",
            "fullLength": 155,
            "truncatedContent": ",\n                () => this.executeStyleAnalysis(content)\n            ),\n\n            // キャラクター分析\n            this.safelyExecuteAnalysis(\n                ",
            "hash": "ffd209a1b61bdc731cfa06a0d4f7d6d3",
            "keywords": [
              "キャラクター",
              "分析"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ",\n                () => this.characterAnalysisService.analyzeCharacter(content, chapterNumber, context)\n            ),\n\n            // メモリ統合物語構造分析\n            this.safelyExecuteAnalysis(\n                ",
            "fullLength": 203,
            "truncatedContent": ",\n                () => this.characterAnalysisService.analyzeCharacter(content, chapterNumber, context)\n            ),\n\n            // メモリ統合物語構造分析\n            this.safelyExecuteAnalysis(\n                ",
            "hash": "83dc398d95182367b4826994499a6224",
            "keywords": [
              "物語",
              "分析",
              "character",
              "analyze",
              "Character",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ",\n                () => this.executeThemeAnalysisWithMemoryIntegration(content, chapterNumber, context)\n            ),\n\n            // 文体分析\n            this.safelyExecuteAnalysis(\n                ",
            "fullLength": 196,
            "truncatedContent": ",\n                () => this.executeThemeAnalysisWithMemoryIntegration(content, chapterNumber, context)\n            ),\n\n            // 文体分析\n            this.safelyExecuteAnalysis(\n                ",
            "hash": "bbab8f24e249125f81e1f9e0d93729bc",
            "keywords": [
              "分析",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ",\n                () => this.executeStyleAnalysis(content)\n            ),\n\n            // キャラクター分析\n            this.safelyExecuteAnalysis(\n                ",
            "fullLength": 155,
            "truncatedContent": ",\n                () => this.executeStyleAnalysis(content)\n            ),\n\n            // キャラクター分析\n            this.safelyExecuteAnalysis(\n                ",
            "hash": "ffd209a1b61bdc731cfa06a0d4f7d6d3",
            "keywords": [
              "キャラクター",
              "分析"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ",\n                () => this.characterAnalysisService.analyzeCharacter(content, chapterNumber, context)\n            ),\n\n            // メモリ統合物語構造分析\n            this.safelyExecuteAnalysis(\n                ",
            "fullLength": 203,
            "truncatedContent": ",\n                () => this.characterAnalysisService.analyzeCharacter(content, chapterNumber, context)\n            ),\n\n            // メモリ統合物語構造分析\n            this.safelyExecuteAnalysis(\n                ",
            "hash": "83dc398d95182367b4826994499a6224",
            "keywords": [
              "物語",
              "分析",
              "character",
              "analyze",
              "Character",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ",\n                () => this.executeNarrativeAnalysisWithMemoryIntegration(chapterNumber, context)\n            ),\n\n            // メモリ統合読者体験分析\n            this.safelyExecuteAnalysis(\n                ",
            "fullLength": 198,
            "truncatedContent": ",\n                () => this.executeNarrativeAnalysisWithMemoryIntegration(chapterNumber, context)\n            ),\n\n            // メモリ統合読者体験分析\n            this.safelyExecuteAnalysis(\n                ",
            "hash": "b9ef6125e931f2a4f7c7d9f97d8e3f32",
            "keywords": [
              "分析",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ",\n                () => this.characterAnalysisService.analyzeCharacter(content, chapterNumber, context)\n            ),\n\n            // メモリ統合物語構造分析\n            this.safelyExecuteAnalysis(\n                ",
            "fullLength": 203,
            "truncatedContent": ",\n                () => this.characterAnalysisService.analyzeCharacter(content, chapterNumber, context)\n            ),\n\n            // メモリ統合物語構造分析\n            this.safelyExecuteAnalysis(\n                ",
            "hash": "83dc398d95182367b4826994499a6224",
            "keywords": [
              "物語",
              "分析",
              "character",
              "analyze",
              "Character",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "safelyExecuteAnalysis",
            "relatedMethods": [
              "safelyExecuteAnalysis",
              "ThemeAnalysis",
              "executeThemeAnalysis",
              "StyleAnalysis",
              "executeStyleAnalysis",
              "CharacterAnalysis",
              "characterAnalysis",
              "NarrativeAnalysis",
              "executeNarrativeAnalysis",
              "executeReaderExperienceAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "plot",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "this",
            "safelyExecuteAnalysis",
            "ThemeAnalysisWithMemory",
            "executeThemeAnalysisWithMemoryIntegration",
            "content",
            "chapterNumber",
            "context",
            "StyleAnalysis",
            "executeStyleAnalysis",
            "CharacterAnalysis"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "a9fe89afb1a0ac45b9e816484c82f7a0"
      },
      {
        "id": "call_e3f53090",
        "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
        "fileName": "analysis-coordinator.ts",
        "lineNumber": 762,
        "lineContent": "() => this.characterAnalysisService.analyzeCharacter(content, chapterNumber, context)",
        "matchedPattern": "(\\w+\\.)?analyzeCharacter\\s*\\(",
        "callMethod": "analyzeCharacter",
        "fullMatch": "characterAnalysisService.analyzeCharacter(",
        "context": {
          "before": [
            {
              "lineNumber": 757,
              "content": "() => this.executeStyleAnalysis(content)",
              "indent": 12
            },
            {
              "lineNumber": 758,
              "content": ");",
              "indent": 8
            },
            {
              "lineNumber": 759,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 760,
              "content": "results.characterAnalysis = await this.safelyExecuteAnalysis(",
              "indent": 8
            },
            {
              "lineNumber": 761,
              "content": "'CharacterAnalysis',",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 762,
            "content": "() => this.characterAnalysisService.analyzeCharacter(content, chapterNumber, context)",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 763,
              "content": ");",
              "indent": 8
            },
            {
              "lineNumber": 764,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 765,
              "content": "results.narrativeAnalysis = await this.safelyExecuteAnalysis(",
              "indent": 8
            },
            {
              "lineNumber": 766,
              "content": "'NarrativeAnalysisWithMemory',",
              "indent": 12
            },
            {
              "lineNumber": 767,
              "content": "() => this.executeNarrativeAnalysisWithMemoryIntegration(chapterNumber, context)",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 658,
            "distance": 104
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ",\n            () => this.characterAnalysisService.analyzeCharacter(content, chapterNumber, context)\n        );\n\n        results.narrativeAnalysis = await this.safelyExecuteAnalysis(\n            ",
            "fullLength": 194,
            "truncatedContent": ",\n            () => this.characterAnalysisService.analyzeCharacter(content, chapterNumber, context)\n        );\n\n        results.narrativeAnalysis = await this.safelyExecuteAnalysis(\n            ",
            "hash": "e9bc72ea2d49e8795a42efc0378aec6a",
            "keywords": [
              "character",
              "analyze",
              "Character",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "chapterAnalysis",
            "relatedMethods": [
              "chapterAnalysis",
              "themeAnalysis",
              "safelyExecuteAnalysis",
              "ThemeAnalysis",
              "executeThemeAnalysis",
              "styleAnalysis",
              "StyleAnalysis",
              "executeStyleAnalysis",
              "characterAnalysis",
              "CharacterAnalysis",
              "narrativeAnalysis",
              "NarrativeAnalysis",
              "executeNarrativeAnalysis",
              "executeReaderExperienceAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "plot",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "results",
            "themeAnalysis",
            "await",
            "this",
            "safelyExecuteAnalysis",
            "ThemeAnalysisWithMemory",
            "executeThemeAnalysisWithMemoryIntegration",
            "content",
            "chapterNumber",
            "context"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "bfb16f0d6e2786ea8ef826513dfe3fae"
      },
      {
        "id": "call_e72a01ca",
        "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
        "fileName": "analysis-coordinator.ts",
        "lineNumber": 820,
        "lineContent": "this.styleAnalysisService.analyzeStyle(content),",
        "matchedPattern": "(\\w+\\.)?analyzeStyle\\s*\\(",
        "callMethod": "analyzeStyle",
        "fullMatch": "styleAnalysisService.analyzeStyle(",
        "context": {
          "before": [
            {
              "lineNumber": 815,
              "content": "*/",
              "indent": 5
            },
            {
              "lineNumber": 816,
              "content": "private async executeStyleAnalysis(content: string): Promise<any> {",
              "indent": 4
            },
            {
              "lineNumber": 817,
              "content": "await this.styleAnalysisService.initialize();",
              "indent": 8
            },
            {
              "lineNumber": 818,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 819,
              "content": "const [styleAnalysis, expressionPatterns] = await Promise.all([",
              "indent": 8
            }
          ],
          "current": {
            "lineNumber": 820,
            "content": "this.styleAnalysisService.analyzeStyle(content),",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 821,
              "content": "this.styleAnalysisService.analyzeExpressionPatterns(content)",
              "indent": 12
            },
            {
              "lineNumber": 822,
              "content": "]);",
              "indent": 8
            },
            {
              "lineNumber": 823,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 824,
              "content": "return {",
              "indent": 8
            },
            {
              "lineNumber": 825,
              "content": "styleAnalysis,",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 658,
            "distance": 162
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "executeStyleAnalysis",
            "relatedMethods": [
              "executeStyleAnalysis",
              "styleAnalysis",
              "executeNarrativeAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<any>"
            ],
            "extractedTypes": [
              "any>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "plot",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "nst",
            "themeResonance",
            "await",
            "this",
            "themeAnalysisService",
            "analyzeThemeResonance",
            "content",
            "themes",
            "return",
            "foreshadowingProcessing"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "c46eb56d53b9913ba2b9781c5c31b70b"
      },
      {
        "id": "call_1948d757",
        "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "fileName": "character-depth-service.ts",
        "lineNumber": 390,
        "lineContent": "this.geminiClient.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 385,
              "content": "// ジャンル適合性分析プロンプトを構築",
              "indent": 12
            },
            {
              "lineNumber": 386,
              "content": "const prompt = this.buildGenreAnalysisPrompt(character, genre);",
              "indent": 12
            },
            {
              "lineNumber": 387,
              "content": "",
              "indent": 13
            },
            {
              "lineNumber": 388,
              "content": "// AI分析を実行",
              "indent": 12
            },
            {
              "lineNumber": 389,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 390,
            "content": "this.geminiClient.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 391,
              "content": "temperature: 0.3,",
              "indent": 20
            },
            {
              "lineNumber": 392,
              "content": "targetLength: 800,",
              "indent": 20
            },
            {
              "lineNumber": 393,
              "content": "purpose: 'analysis',",
              "indent": 20
            },
            {
              "lineNumber": 394,
              "content": "responseFormat: 'json'",
              "indent": 20
            },
            {
              "lineNumber": 395,
              "content": "})",
              "indent": 16
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 364,
            "distance": 26
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
            "fullLength": 761,
            "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
            "hash": "3231e0c6916fe75790dc783a2e1b8b35",
            "keywords": [
              "分析",
              "生成",
              "character",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: ",
            "fullLength": 267,
            "truncatedContent": "\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: ",
            "hash": "1fb0292de1d0158a628ab39a27644d03",
            "keywords": [
              "生成"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
            "fullLength": 761,
            "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
            "hash": "3231e0c6916fe75790dc783a2e1b8b35",
            "keywords": [
              "分析",
              "生成",
              "character",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
            "fullLength": 761,
            "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
            "hash": "3231e0c6916fe75790dc783a2e1b8b35",
            "hasVariables": false,
            "variableCount": 0
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildGenreAnalysisPrompt",
            "relatedMethods": [
              "buildGenreAnalysisPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<DepthRecommendation[]>"
            ],
            "extractedTypes": [
              "DepthRecommendation[]>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "分析",
            "構築",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "urns",
            "async",
            "suggestGenreBasedTraits",
            "character",
            "Character",
            "genre",
            "string",
            "Promise",
            "DepthRecommendation",
            "try"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "002f1430c4a1c8bbb9e1ca504a580ed2"
      },
      {
        "id": "call_1c9a2ed2",
        "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "fileName": "character-depth-service.ts",
        "lineNumber": 689,
        "lineContent": "this.geminiClient.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 684,
              "content": "): Promise<CharacterArcRecommendation[]> {",
              "indent": 4
            },
            {
              "lineNumber": 685,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 686,
              "content": "const prompt = this.buildArcOptimizationPrompt(character, analysisResult, chapterNumber);",
              "indent": 12
            },
            {
              "lineNumber": 687,
              "content": "",
              "indent": 13
            },
            {
              "lineNumber": 688,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 689,
            "content": "this.geminiClient.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 690,
              "content": "temperature: 0.3,",
              "indent": 20
            },
            {
              "lineNumber": 691,
              "content": "targetLength: 800,",
              "indent": 20
            },
            {
              "lineNumber": 692,
              "content": "purpose: 'creation',",
              "indent": 20
            },
            {
              "lineNumber": 693,
              "content": "responseFormat: 'json'",
              "indent": 20
            },
            {
              "lineNumber": 694,
              "content": "})",
              "indent": 16
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 670,
            "distance": 19
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "アーク推奨生成エラー: ${character.name}",
            "fullLength": 29,
            "truncatedContent": "アーク推奨生成エラー: ${character.name}",
            "hash": "576e7d84ea2592c66dbf82ee784f8a60",
            "keywords": [
              "生成",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "CharacterAnalysis",
            "relatedMethods": [
              "CharacterAnalysis",
              "buildArcOptimizationPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": CharacterAnalysisResult",
              ": Promise<CharacterArcRecommendation[]>"
            ],
            "extractedTypes": [
              "CharacterAnalysisResult",
              "CharacterArcRecommendation[]>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "private",
            "async",
            "generateArcOptimizationRecommendations",
            "character",
            "Character",
            "analysisResult",
            "CharacterAnalysisResult",
            "chapterNumber",
            "number",
            "Promise"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "6656550b65c6ecd65464c7016e689e65"
      },
      {
        "id": "call_3ab7176e",
        "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "fileName": "character-depth-service.ts",
        "lineNumber": 716,
        "lineContent": "this.geminiClient.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 711,
              "content": "): Promise<MotivationEnhancement[]> {",
              "indent": 4
            },
            {
              "lineNumber": 712,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 713,
              "content": "const prompt = this.buildMotivationEnhancementPrompt(character, psychology);",
              "indent": 12
            },
            {
              "lineNumber": 714,
              "content": "",
              "indent": 13
            },
            {
              "lineNumber": 715,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 716,
            "content": "this.geminiClient.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 717,
              "content": "temperature: 0.3,",
              "indent": 20
            },
            {
              "lineNumber": 718,
              "content": "targetLength: 800,",
              "indent": 20
            },
            {
              "lineNumber": 719,
              "content": "purpose: 'creation',",
              "indent": 20
            },
            {
              "lineNumber": 720,
              "content": "responseFormat: 'json'",
              "indent": 20
            },
            {
              "lineNumber": 721,
              "content": "})",
              "indent": 16
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 698,
            "distance": 18
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "動機強化推奨生成エラー: ${character.name}",
            "fullLength": 30,
            "truncatedContent": "動機強化推奨生成エラー: ${character.name}",
            "hash": "ed094c0116a864caf1639c6fd61d9a1c",
            "keywords": [
              "生成",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildMotivationEnhancementPrompt",
            "relatedMethods": [
              "buildMotivationEnhancementPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<MotivationEnhancement[]>"
            ],
            "extractedTypes": [
              "MotivationEnhancement[]>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "rateFallbackArcRecommendations",
            "character",
            "private",
            "async",
            "generateMotivationEnhancements",
            "Character",
            "psychology",
            "CharacterPsychology",
            "Promise",
            "MotivationEnhancement"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "6656550b65c6ecd65464c7016e689e65"
      },
      {
        "id": "call_18183c83",
        "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "fileName": "character-depth-service.ts",
        "lineNumber": 750,
        "lineContent": "this.geminiClient.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 745,
              "content": "}",
              "indent": 12
            },
            {
              "lineNumber": 746,
              "content": "",
              "indent": 13
            },
            {
              "lineNumber": 747,
              "content": "const prompt = this.buildContrastRecommendationsPrompt(character, sameTypeCharacters);",
              "indent": 12
            },
            {
              "lineNumber": 748,
              "content": "",
              "indent": 13
            },
            {
              "lineNumber": 749,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 750,
            "content": "this.geminiClient.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 751,
              "content": "temperature: 0.4,",
              "indent": 20
            },
            {
              "lineNumber": 752,
              "content": "targetLength: 800,",
              "indent": 20
            },
            {
              "lineNumber": 753,
              "content": "purpose: 'creation',",
              "indent": 20
            },
            {
              "lineNumber": 754,
              "content": "responseFormat: 'json'",
              "indent": 20
            },
            {
              "lineNumber": 755,
              "content": "})",
              "indent": 16
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 743,
            "distance": 7
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "コントラスト推奨生成エラー: ${character.name}",
            "fullLength": 32,
            "truncatedContent": "コントラスト推奨生成エラー: ${character.name}",
            "hash": "4cbbecf723eae2c9ef64c0e39f398284",
            "keywords": [
              "生成",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildContrastRecommendationsPrompt",
            "relatedMethods": [
              "buildContrastRecommendationsPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<ContrastRecommendation[]>"
            ],
            "extractedTypes": [
              "ContrastRecommendation[]>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.4",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "getCharactersByType",
            "const",
            "sameTypeCharacters",
            "await",
            "this",
            "characterManager",
            "character",
            "type",
            "length",
            "return"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "70df527efb8f1ea6c86160329072acc5"
      },
      {
        "id": "call_0459ffc7",
        "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "fileName": "character-depth-service.ts",
        "lineNumber": 535,
        "lineContent": "// ファサードパターン対応：characterManager.analyzeCharacter()を使用",
        "matchedPattern": "(\\w+\\.)?analyzeCharacter\\s*\\(",
        "callMethod": "analyzeCharacter",
        "fullMatch": "characterManager.analyzeCharacter(",
        "context": {
          "before": [
            {
              "lineNumber": 530,
              "content": "private async performBasicAnalysisWithFacade(",
              "indent": 4
            },
            {
              "lineNumber": 531,
              "content": "character: Character,",
              "indent": 8
            },
            {
              "lineNumber": 532,
              "content": "chapterNumber: number",
              "indent": 8
            },
            {
              "lineNumber": 533,
              "content": "): Promise<CharacterAnalysisResult> {",
              "indent": 4
            },
            {
              "lineNumber": 534,
              "content": "try {",
              "indent": 8
            }
          ],
          "current": {
            "lineNumber": 535,
            "content": "// ファサードパターン対応：characterManager.analyzeCharacter()を使用",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 536,
              "content": "const characterAnalysis = await this.characterManager.analyzeCharacter(character.id);",
              "indent": 12
            },
            {
              "lineNumber": 537,
              "content": "",
              "indent": 13
            },
            {
              "lineNumber": 538,
              "content": "// ファサードパターン対応：getRelationshipAnalysis()を使用",
              "indent": 12
            },
            {
              "lineNumber": 539,
              "content": "const relationshipAnalysis = await this.characterManager.getRelationshipAnalysis();",
              "indent": 12
            },
            {
              "lineNumber": 540,
              "content": "",
              "indent": 13
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 517,
            "distance": 18
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "performBasicAnalysis",
            "relatedMethods": [
              "performBasicAnalysis",
              "CharacterAnalysis",
              "characterAnalysis",
              "getRelationshipAnalysis",
              "relationshipAnalysis",
              "RelationshipAnalysis",
              "extractRelationshipDynamicsFromAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<CharacterAnalysisResult>"
            ],
            "extractedTypes": [
              "CharacterAnalysisResult>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "catch",
            "error",
            "this",
            "logger",
            "chapterNumber",
            "return",
            "CharacterManager",
            "private",
            "async",
            "performBasicAnalysisWithFacade"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "a92dd6ffb36810d3342dc8279a50969c"
      },
      {
        "id": "call_4bc217e9",
        "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "fileName": "character-depth-service.ts",
        "lineNumber": 536,
        "lineContent": "const characterAnalysis = await this.characterManager.analyzeCharacter(character.id);",
        "matchedPattern": "(\\w+\\.)?analyzeCharacter\\s*\\(",
        "callMethod": "analyzeCharacter",
        "fullMatch": "characterManager.analyzeCharacter(",
        "context": {
          "before": [
            {
              "lineNumber": 531,
              "content": "character: Character,",
              "indent": 8
            },
            {
              "lineNumber": 532,
              "content": "chapterNumber: number",
              "indent": 8
            },
            {
              "lineNumber": 533,
              "content": "): Promise<CharacterAnalysisResult> {",
              "indent": 4
            },
            {
              "lineNumber": 534,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 535,
              "content": "// ファサードパターン対応：characterManager.analyzeCharacter()を使用",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 536,
            "content": "const characterAnalysis = await this.characterManager.analyzeCharacter(character.id);",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 537,
              "content": "",
              "indent": 13
            },
            {
              "lineNumber": 538,
              "content": "// ファサードパターン対応：getRelationshipAnalysis()を使用",
              "indent": 12
            },
            {
              "lineNumber": 539,
              "content": "const relationshipAnalysis = await this.characterManager.getRelationshipAnalysis();",
              "indent": 12
            },
            {
              "lineNumber": 540,
              "content": "",
              "indent": 13
            },
            {
              "lineNumber": 541,
              "content": "// RelationshipAnalysis型に適したプロパティアクセス",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 517,
            "distance": 19
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "performBasicAnalysis",
            "relatedMethods": [
              "performBasicAnalysis",
              "CharacterAnalysis",
              "characterAnalysis",
              "getRelationshipAnalysis",
              "relationshipAnalysis",
              "RelationshipAnalysis",
              "extractRelationshipDynamicsFromAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<CharacterAnalysisResult>"
            ],
            "extractedTypes": [
              "CharacterAnalysisResult>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "mber",
            "return",
            "CharacterManager",
            "private",
            "async",
            "performBasicAnalysisWithFacade",
            "character",
            "Character",
            "chapterNumber",
            "number"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "a48f9849c7111f6eb4c424267f7898b9"
      },
      {
        "id": "call_7479181a",
        "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "fileName": "character-depth-service.ts",
        "lineNumber": 606,
        "lineContent": "const analysisResult = await this.characterManager.analyzeCharacter(characterId);",
        "matchedPattern": "(\\w+\\.)?analyzeCharacter\\s*\\(",
        "callMethod": "analyzeCharacter",
        "fullMatch": "characterManager.analyzeCharacter(",
        "context": {
          "before": [
            {
              "lineNumber": 601,
              "content": "}",
              "indent": 12
            },
            {
              "lineNumber": 602,
              "content": "",
              "indent": 13
            },
            {
              "lineNumber": 603,
              "content": "// 心理情報が見つからない場合、キャラクター分析から推定",
              "indent": 12
            },
            {
              "lineNumber": 604,
              "content": "const character = await this.characterManager.getCharacter(characterId);",
              "indent": 12
            },
            {
              "lineNumber": 605,
              "content": "if (character) {",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 606,
            "content": "const analysisResult = await this.characterManager.analyzeCharacter(characterId);",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 607,
              "content": "return this.extractPsychologyFromAnalysis(analysisResult);",
              "indent": 16
            },
            {
              "lineNumber": 608,
              "content": "}",
              "indent": 12
            },
            {
              "lineNumber": 609,
              "content": "",
              "indent": 13
            },
            {
              "lineNumber": 610,
              "content": "return null;",
              "indent": 12
            },
            {
              "lineNumber": 611,
              "content": "",
              "indent": 13
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 605,
            "distance": 1
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "extractPsychologyFromAnalysis",
            "relatedMethods": [
              "extractPsychologyFromAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "分析",
            "generate",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "const",
            "psychologyData",
            "this",
            "extractPsychologyFromSearchResult",
            "searchResult",
            "results",
            "return",
            "character",
            "await",
            "characterManager"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "703e46ea762ac0969775e9e5554f4751"
      },
      {
        "id": "call_1948d757",
        "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "fileName": "character-depth-service.ts",
        "lineNumber": 390,
        "lineContent": "this.geminiClient.generateText(prompt, {",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 385,
              "content": "// ジャンル適合性分析プロンプトを構築",
              "indent": 12
            },
            {
              "lineNumber": 386,
              "content": "const prompt = this.buildGenreAnalysisPrompt(character, genre);",
              "indent": 12
            },
            {
              "lineNumber": 387,
              "content": "",
              "indent": 13
            },
            {
              "lineNumber": 388,
              "content": "// AI分析を実行",
              "indent": 12
            },
            {
              "lineNumber": 389,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 390,
            "content": "this.geminiClient.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 391,
              "content": "temperature: 0.3,",
              "indent": 20
            },
            {
              "lineNumber": 392,
              "content": "targetLength: 800,",
              "indent": 20
            },
            {
              "lineNumber": 393,
              "content": "purpose: 'analysis',",
              "indent": 20
            },
            {
              "lineNumber": 394,
              "content": "responseFormat: 'json'",
              "indent": 20
            },
            {
              "lineNumber": 395,
              "content": "})",
              "indent": 16
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 364,
            "distance": 26
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
            "fullLength": 761,
            "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
            "hash": "3231e0c6916fe75790dc783a2e1b8b35",
            "keywords": [
              "分析",
              "生成",
              "character",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: ",
            "fullLength": 267,
            "truncatedContent": "\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: ",
            "hash": "1fb0292de1d0158a628ab39a27644d03",
            "keywords": [
              "生成"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
            "fullLength": 761,
            "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
            "hash": "3231e0c6916fe75790dc783a2e1b8b35",
            "keywords": [
              "分析",
              "生成",
              "character",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
            "fullLength": 761,
            "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
            "hash": "3231e0c6916fe75790dc783a2e1b8b35",
            "hasVariables": false,
            "variableCount": 0
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildGenreAnalysisPrompt",
            "relatedMethods": [
              "buildGenreAnalysisPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<DepthRecommendation[]>"
            ],
            "extractedTypes": [
              "DepthRecommendation[]>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "分析",
            "構築",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "urns",
            "async",
            "suggestGenreBasedTraits",
            "character",
            "Character",
            "genre",
            "string",
            "Promise",
            "DepthRecommendation",
            "try"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "002f1430c4a1c8bbb9e1ca504a580ed2"
      },
      {
        "id": "call_1c9a2ed2",
        "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "fileName": "character-depth-service.ts",
        "lineNumber": 689,
        "lineContent": "this.geminiClient.generateText(prompt, {",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 684,
              "content": "): Promise<CharacterArcRecommendation[]> {",
              "indent": 4
            },
            {
              "lineNumber": 685,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 686,
              "content": "const prompt = this.buildArcOptimizationPrompt(character, analysisResult, chapterNumber);",
              "indent": 12
            },
            {
              "lineNumber": 687,
              "content": "",
              "indent": 13
            },
            {
              "lineNumber": 688,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 689,
            "content": "this.geminiClient.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 690,
              "content": "temperature: 0.3,",
              "indent": 20
            },
            {
              "lineNumber": 691,
              "content": "targetLength: 800,",
              "indent": 20
            },
            {
              "lineNumber": 692,
              "content": "purpose: 'creation',",
              "indent": 20
            },
            {
              "lineNumber": 693,
              "content": "responseFormat: 'json'",
              "indent": 20
            },
            {
              "lineNumber": 694,
              "content": "})",
              "indent": 16
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 670,
            "distance": 19
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "アーク推奨生成エラー: ${character.name}",
            "fullLength": 29,
            "truncatedContent": "アーク推奨生成エラー: ${character.name}",
            "hash": "576e7d84ea2592c66dbf82ee784f8a60",
            "keywords": [
              "生成",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "CharacterAnalysis",
            "relatedMethods": [
              "CharacterAnalysis",
              "buildArcOptimizationPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": CharacterAnalysisResult",
              ": Promise<CharacterArcRecommendation[]>"
            ],
            "extractedTypes": [
              "CharacterAnalysisResult",
              "CharacterArcRecommendation[]>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "private",
            "async",
            "generateArcOptimizationRecommendations",
            "character",
            "Character",
            "analysisResult",
            "CharacterAnalysisResult",
            "chapterNumber",
            "number",
            "Promise"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "6656550b65c6ecd65464c7016e689e65"
      },
      {
        "id": "call_3ab7176e",
        "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "fileName": "character-depth-service.ts",
        "lineNumber": 716,
        "lineContent": "this.geminiClient.generateText(prompt, {",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 711,
              "content": "): Promise<MotivationEnhancement[]> {",
              "indent": 4
            },
            {
              "lineNumber": 712,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 713,
              "content": "const prompt = this.buildMotivationEnhancementPrompt(character, psychology);",
              "indent": 12
            },
            {
              "lineNumber": 714,
              "content": "",
              "indent": 13
            },
            {
              "lineNumber": 715,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 716,
            "content": "this.geminiClient.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 717,
              "content": "temperature: 0.3,",
              "indent": 20
            },
            {
              "lineNumber": 718,
              "content": "targetLength: 800,",
              "indent": 20
            },
            {
              "lineNumber": 719,
              "content": "purpose: 'creation',",
              "indent": 20
            },
            {
              "lineNumber": 720,
              "content": "responseFormat: 'json'",
              "indent": 20
            },
            {
              "lineNumber": 721,
              "content": "})",
              "indent": 16
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 698,
            "distance": 18
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "動機強化推奨生成エラー: ${character.name}",
            "fullLength": 30,
            "truncatedContent": "動機強化推奨生成エラー: ${character.name}",
            "hash": "ed094c0116a864caf1639c6fd61d9a1c",
            "keywords": [
              "生成",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildMotivationEnhancementPrompt",
            "relatedMethods": [
              "buildMotivationEnhancementPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<MotivationEnhancement[]>"
            ],
            "extractedTypes": [
              "MotivationEnhancement[]>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "rateFallbackArcRecommendations",
            "character",
            "private",
            "async",
            "generateMotivationEnhancements",
            "Character",
            "psychology",
            "CharacterPsychology",
            "Promise",
            "MotivationEnhancement"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "6656550b65c6ecd65464c7016e689e65"
      },
      {
        "id": "call_18183c83",
        "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "fileName": "character-depth-service.ts",
        "lineNumber": 750,
        "lineContent": "this.geminiClient.generateText(prompt, {",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 745,
              "content": "}",
              "indent": 12
            },
            {
              "lineNumber": 746,
              "content": "",
              "indent": 13
            },
            {
              "lineNumber": 747,
              "content": "const prompt = this.buildContrastRecommendationsPrompt(character, sameTypeCharacters);",
              "indent": 12
            },
            {
              "lineNumber": 748,
              "content": "",
              "indent": 13
            },
            {
              "lineNumber": 749,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 750,
            "content": "this.geminiClient.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 751,
              "content": "temperature: 0.4,",
              "indent": 20
            },
            {
              "lineNumber": 752,
              "content": "targetLength: 800,",
              "indent": 20
            },
            {
              "lineNumber": 753,
              "content": "purpose: 'creation',",
              "indent": 20
            },
            {
              "lineNumber": 754,
              "content": "responseFormat: 'json'",
              "indent": 20
            },
            {
              "lineNumber": 755,
              "content": "})",
              "indent": 16
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 743,
            "distance": 7
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "コントラスト推奨生成エラー: ${character.name}",
            "fullLength": 32,
            "truncatedContent": "コントラスト推奨生成エラー: ${character.name}",
            "hash": "4cbbecf723eae2c9ef64c0e39f398284",
            "keywords": [
              "生成",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildContrastRecommendationsPrompt",
            "relatedMethods": [
              "buildContrastRecommendationsPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<ContrastRecommendation[]>"
            ],
            "extractedTypes": [
              "ContrastRecommendation[]>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.4",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "getCharactersByType",
            "const",
            "sameTypeCharacters",
            "await",
            "this",
            "characterManager",
            "character",
            "type",
            "length",
            "return"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "70df527efb8f1ea6c86160329072acc5"
      },
      {
        "id": "call_580712e8",
        "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "fileName": "character-depth-service.ts",
        "lineNumber": 390,
        "lineContent": "this.geminiClient.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 385,
              "content": "// ジャンル適合性分析プロンプトを構築",
              "indent": 12
            },
            {
              "lineNumber": 386,
              "content": "const prompt = this.buildGenreAnalysisPrompt(character, genre);",
              "indent": 12
            },
            {
              "lineNumber": 387,
              "content": "",
              "indent": 13
            },
            {
              "lineNumber": 388,
              "content": "// AI分析を実行",
              "indent": 12
            },
            {
              "lineNumber": 389,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 390,
            "content": "this.geminiClient.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 391,
              "content": "temperature: 0.3,",
              "indent": 20
            },
            {
              "lineNumber": 392,
              "content": "targetLength: 800,",
              "indent": 20
            },
            {
              "lineNumber": 393,
              "content": "purpose: 'analysis',",
              "indent": 20
            },
            {
              "lineNumber": 394,
              "content": "responseFormat: 'json'",
              "indent": 20
            },
            {
              "lineNumber": 395,
              "content": "})",
              "indent": 16
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 364,
            "distance": 26
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
            "fullLength": 761,
            "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
            "hash": "3231e0c6916fe75790dc783a2e1b8b35",
            "keywords": [
              "分析",
              "生成",
              "character",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: ",
            "fullLength": 267,
            "truncatedContent": "\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: ",
            "hash": "1fb0292de1d0158a628ab39a27644d03",
            "keywords": [
              "生成"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
            "fullLength": 761,
            "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
            "hash": "3231e0c6916fe75790dc783a2e1b8b35",
            "keywords": [
              "分析",
              "生成",
              "character",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
            "fullLength": 761,
            "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
            "hash": "3231e0c6916fe75790dc783a2e1b8b35",
            "hasVariables": false,
            "variableCount": 0
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildGenreAnalysisPrompt",
            "relatedMethods": [
              "buildGenreAnalysisPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<DepthRecommendation[]>"
            ],
            "extractedTypes": [
              "DepthRecommendation[]>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "分析",
            "構築",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "async",
            "suggestGenreBasedTraits",
            "character",
            "Character",
            "genre",
            "string",
            "Promise",
            "DepthRecommendation",
            "try",
            "this"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "2e24e5b1b9624d6abea305d59c71d90c"
      },
      {
        "id": "call_874c5434",
        "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "fileName": "character-depth-service.ts",
        "lineNumber": 689,
        "lineContent": "this.geminiClient.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 684,
              "content": "): Promise<CharacterArcRecommendation[]> {",
              "indent": 4
            },
            {
              "lineNumber": 685,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 686,
              "content": "const prompt = this.buildArcOptimizationPrompt(character, analysisResult, chapterNumber);",
              "indent": 12
            },
            {
              "lineNumber": 687,
              "content": "",
              "indent": 13
            },
            {
              "lineNumber": 688,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 689,
            "content": "this.geminiClient.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 690,
              "content": "temperature: 0.3,",
              "indent": 20
            },
            {
              "lineNumber": 691,
              "content": "targetLength: 800,",
              "indent": 20
            },
            {
              "lineNumber": 692,
              "content": "purpose: 'creation',",
              "indent": 20
            },
            {
              "lineNumber": 693,
              "content": "responseFormat: 'json'",
              "indent": 20
            },
            {
              "lineNumber": 694,
              "content": "})",
              "indent": 16
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 670,
            "distance": 19
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "アーク推奨生成エラー: ${character.name}",
            "fullLength": 29,
            "truncatedContent": "アーク推奨生成エラー: ${character.name}",
            "hash": "576e7d84ea2592c66dbf82ee784f8a60",
            "keywords": [
              "生成",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "CharacterAnalysis",
            "relatedMethods": [
              "CharacterAnalysis",
              "buildArcOptimizationPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": CharacterAnalysisResult",
              ": Promise<CharacterArcRecommendation[]>"
            ],
            "extractedTypes": [
              "CharacterAnalysisResult",
              "CharacterArcRecommendation[]>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "private",
            "async",
            "generateArcOptimizationRecommendations",
            "character",
            "Character",
            "analysisResult",
            "CharacterAnalysisResult",
            "chapterNumber",
            "number",
            "Promise"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "2e24e5b1b9624d6abea305d59c71d90c"
      },
      {
        "id": "call_5ef55a3b",
        "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "fileName": "character-depth-service.ts",
        "lineNumber": 716,
        "lineContent": "this.geminiClient.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 711,
              "content": "): Promise<MotivationEnhancement[]> {",
              "indent": 4
            },
            {
              "lineNumber": 712,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 713,
              "content": "const prompt = this.buildMotivationEnhancementPrompt(character, psychology);",
              "indent": 12
            },
            {
              "lineNumber": 714,
              "content": "",
              "indent": 13
            },
            {
              "lineNumber": 715,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 716,
            "content": "this.geminiClient.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 717,
              "content": "temperature: 0.3,",
              "indent": 20
            },
            {
              "lineNumber": 718,
              "content": "targetLength: 800,",
              "indent": 20
            },
            {
              "lineNumber": 719,
              "content": "purpose: 'creation',",
              "indent": 20
            },
            {
              "lineNumber": 720,
              "content": "responseFormat: 'json'",
              "indent": 20
            },
            {
              "lineNumber": 721,
              "content": "})",
              "indent": 16
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 698,
            "distance": 18
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "動機強化推奨生成エラー: ${character.name}",
            "fullLength": 30,
            "truncatedContent": "動機強化推奨生成エラー: ${character.name}",
            "hash": "ed094c0116a864caf1639c6fd61d9a1c",
            "keywords": [
              "生成",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildMotivationEnhancementPrompt",
            "relatedMethods": [
              "buildMotivationEnhancementPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<MotivationEnhancement[]>"
            ],
            "extractedTypes": [
              "MotivationEnhancement[]>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "ArcRecommendations",
            "character",
            "private",
            "async",
            "generateMotivationEnhancements",
            "Character",
            "psychology",
            "CharacterPsychology",
            "Promise",
            "MotivationEnhancement"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "2e24e5b1b9624d6abea305d59c71d90c"
      },
      {
        "id": "call_1ba6677b",
        "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "fileName": "character-depth-service.ts",
        "lineNumber": 750,
        "lineContent": "this.geminiClient.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 745,
              "content": "}",
              "indent": 12
            },
            {
              "lineNumber": 746,
              "content": "",
              "indent": 13
            },
            {
              "lineNumber": 747,
              "content": "const prompt = this.buildContrastRecommendationsPrompt(character, sameTypeCharacters);",
              "indent": 12
            },
            {
              "lineNumber": 748,
              "content": "",
              "indent": 13
            },
            {
              "lineNumber": 749,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 750,
            "content": "this.geminiClient.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 751,
              "content": "temperature: 0.4,",
              "indent": 20
            },
            {
              "lineNumber": 752,
              "content": "targetLength: 800,",
              "indent": 20
            },
            {
              "lineNumber": 753,
              "content": "purpose: 'creation',",
              "indent": 20
            },
            {
              "lineNumber": 754,
              "content": "responseFormat: 'json'",
              "indent": 20
            },
            {
              "lineNumber": 755,
              "content": "})",
              "indent": 16
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 743,
            "distance": 7
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "コントラスト推奨生成エラー: ${character.name}",
            "fullLength": 32,
            "truncatedContent": "コントラスト推奨生成エラー: ${character.name}",
            "hash": "4cbbecf723eae2c9ef64c0e39f398284",
            "keywords": [
              "生成",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildContrastRecommendationsPrompt",
            "relatedMethods": [
              "buildContrastRecommendationsPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<ContrastRecommendation[]>"
            ],
            "extractedTypes": [
              "ContrastRecommendation[]>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.4",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "getCharactersByType",
            "const",
            "sameTypeCharacters",
            "await",
            "this",
            "characterManager",
            "character",
            "type",
            "length",
            "return"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "85b65e80158c8ec9b4bf86a9e046b421"
      },
      {
        "id": "call_fe4ee694",
        "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
        "fileName": "style-optimization-service.ts",
        "lineNumber": 259,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 254,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 255,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 256,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 257,
              "content": "// APIスロットリングを使用してAIガイダンスを生成",
              "indent": 6
            },
            {
              "lineNumber": 258,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 259,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 260,
              "content": "temperature: 0.3,",
              "indent": 10
            },
            {
              "lineNumber": 261,
              "content": "purpose: 'guidance',",
              "indent": 10
            },
            {
              "lineNumber": 262,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 263,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 264,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 210,
            "distance": 49
          }
        },
        "prompts": [],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "ロマンス"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "世界観",
            "背景"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "作成",
            "分析",
            "generate",
            "create"
          ],
          "complexity": "low",
          "dependencies": [
            "JSON",
            "general",
            "sentenceStructure",
            "vocabulary",
            "rhythm",
            "API",
            "const",
            "response",
            "await",
            "apiThrottler"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "1d24f11424e0e708245491dda32ff5c6"
      },
      {
        "id": "call_77847414",
        "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
        "fileName": "style-optimization-service.ts",
        "lineNumber": 529,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 524,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 525,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 526,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 527,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 528,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 529,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 530,
              "content": "temperature: 0.4,",
              "indent": 10
            },
            {
              "lineNumber": 531,
              "content": "purpose: 'suggestion',",
              "indent": 10
            },
            {
              "lineNumber": 532,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 533,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 534,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 448,
            "distance": 81
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "AIによる代替表現生成中にエラーが発生しました",
            "fullLength": 23,
            "truncatedContent": "AIによる代替表現生成中にエラーが発生しました",
            "hash": "09891be9e88f0f4c1f5aef50b686bf0d",
            "keywords": [
              "生成"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.4",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "ロマンス"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "世界観",
            "背景"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "dialogueAlternatives",
            "conjunctionAlternatives",
            "structureAlternatives",
            "API",
            "const",
            "response",
            "await",
            "apiThrottler",
            "throttledRequest",
            "this"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "1502eb2fbdffef35b195f62bf6fba15c"
      },
      {
        "id": "call_c02c53f9",
        "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
        "fileName": "style-optimization-service.ts",
        "lineNumber": 719,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 714,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 715,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 716,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 717,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 718,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 719,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 720,
              "content": "temperature: 0.3,",
              "indent": 10
            },
            {
              "lineNumber": 721,
              "content": "purpose: 'suggestion',",
              "indent": 10
            },
            {
              "lineNumber": 722,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 723,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 724,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 669,
            "distance": 50
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ", ...]\r\n}\r\n`;\r\n\r\n      // APIスロットリングを使用してAI生成を実行\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: 'suggestion',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // デフォルト値を準備\r\n      const defaultOptimization: SubjectPatternOptimization = {\r\n        score: subjectPatterns.subjectDiversityScore,\r\n        problems: [],\r\n        suggestions: [\r\n          ",
            "fullLength": 485,
            "truncatedContent": ", ...]\r\n}\r\n`;\r\n\r\n      // APIスロットリングを使用してAI生成を実行\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: 'suggestion',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // デフォルト値を準備\r\n      const defaultOptimization: SubjectPatternOptimization = {\r\n        score: subjectPatterns.subjectDiversityScore,\r\n        problems: [],\r\n        suggestions: [\r\n          ",
            "hash": "9c856847a97833ecaa73ea416401d96e",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", ...]\r\n}\r\n`;\r\n\r\n      // APIスロットリングを使用してAI生成を実行\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: 'suggestion',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // デフォルト値を準備\r\n      const defaultOptimization: SubjectPatternOptimization = {\r\n        score: subjectPatterns.subjectDiversityScore,\r\n        problems: [],\r\n        suggestions: [\r\n          ",
            "fullLength": 485,
            "truncatedContent": ", ...]\r\n}\r\n`;\r\n\r\n      // APIスロットリングを使用してAI生成を実行\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: 'suggestion',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // デフォルト値を準備\r\n      const defaultOptimization: SubjectPatternOptimization = {\r\n        score: subjectPatterns.subjectDiversityScore,\r\n        problems: [],\r\n        suggestions: [\r\n          ",
            "hash": "9c856847a97833ecaa73ea416401d96e",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "ロマンス"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "世界観",
            "背景"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "bjects",
            "map",
            "subject",
            "count",
            "join",
            "context",
            "genre",
            "theme",
            "JSON",
            "score"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "e2c34ca4e6171e2d60149565e268b20c"
      },
      {
        "id": "call_87abbd70",
        "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
        "fileName": "style-optimization-service.ts",
        "lineNumber": 901,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 896,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 897,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 898,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 899,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 900,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 901,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 902,
              "content": "temperature: 0.4,",
              "indent": 10
            },
            {
              "lineNumber": 903,
              "content": "purpose: 'suggestion',",
              "indent": 10
            },
            {
              "lineNumber": 904,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 905,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 906,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 828,
            "distance": 73
          }
        },
        "prompts": [],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.4",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "ロマンス"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "世界観",
            "背景"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "create"
          ],
          "complexity": "low",
          "dependencies": [
            "tension",
            "JSON",
            "type",
            "issue",
            "suggestion",
            "example",
            "before",
            "after",
            "API",
            "const"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "1502eb2fbdffef35b195f62bf6fba15c"
      },
      {
        "id": "call_f9f6e71f",
        "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
        "fileName": "style-optimization-service.ts",
        "lineNumber": 1148,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 1143,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 1144,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 1145,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 1146,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 1147,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 1148,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 1149,
              "content": "temperature: 0.4,",
              "indent": 10
            },
            {
              "lineNumber": 1150,
              "content": "purpose: 'suggestion',",
              "indent": 10
            },
            {
              "lineNumber": 1151,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 1152,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 1153,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 1087,
            "distance": 61
          }
        },
        "prompts": [],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.4",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "ロマンス"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "世界観",
            "背景"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "create"
          ],
          "complexity": "low",
          "dependencies": [
            "limitedRepetitions",
            "map",
            "rep",
            "idx",
            "join",
            "JSON",
            "original",
            "alternatives",
            "context",
            "API"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "1502eb2fbdffef35b195f62bf6fba15c"
      },
      {
        "id": "call_e3499eaa",
        "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
        "fileName": "style-optimization-service.ts",
        "lineNumber": 145,
        "lineContent": "const styleAnalysis = await this.styleAnalysisService.analyzeStyle(prevChapterContent);",
        "matchedPattern": "(\\w+\\.)?analyzeStyle\\s*\\(",
        "callMethod": "analyzeStyle",
        "fullMatch": "styleAnalysisService.analyzeStyle(",
        "context": {
          "before": [
            {
              "lineNumber": 140,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 141,
              "content": "let guidance: StyleGuidance;",
              "indent": 6
            },
            {
              "lineNumber": 142,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 143,
              "content": "if (prevChapterContent && prevChapterContent.length > 100) {",
              "indent": 6
            },
            {
              "lineNumber": 144,
              "content": "// 高品質な分析サービスに委譲",
              "indent": 8
            }
          ],
          "current": {
            "lineNumber": 145,
            "content": "const styleAnalysis = await this.styleAnalysisService.analyzeStyle(prevChapterContent);",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 146,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 147,
              "content": "// 正しい引数で AI ガイダンスを生成",
              "indent": 8
            },
            {
              "lineNumber": 148,
              "content": "guidance = await apiThrottler.throttledRequest(() =>",
              "indent": 8
            },
            {
              "lineNumber": 149,
              "content": "this.generateStyleGuidanceWithAI(styleAnalysis, context, chapterNumber)",
              "indent": 10
            },
            {
              "lineNumber": 150,
              "content": ");",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 143,
            "distance": 2
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "StyleOptimizationService: キャッシュから章${chapterNumber}の文体ガイダンスを取得",
            "fullLength": 61,
            "truncatedContent": "StyleOptimizationService: キャッシュから章${chapterNumber}の文体ガイダンスを取得",
            "hash": "f736f9ae834084e476af72bc3b82aa29",
            "keywords": [
              "章",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "StyleOptimizationService: 章${chapterNumber}の文体ガイダンスを生成",
            "fullLength": 54,
            "truncatedContent": "StyleOptimizationService: 章${chapterNumber}の文体ガイダンスを生成",
            "hash": "d514105e915bea901c4adcab8e730324",
            "keywords": [
              "章",
              "生成",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "StyleOptimizationService: 章${chapterNumber}の文体ガイダンスを生成",
            "fullLength": 54,
            "truncatedContent": "StyleOptimizationService: 章${chapterNumber}の文体ガイダンスを生成",
            "hash": "d514105e915bea901c4adcab8e730324",
            "keywords": [
              "章",
              "生成",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "styleAnalysis",
            "relatedMethods": [
              "styleAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "ロマンス"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "世界観",
            "背景"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "分析",
            "generate",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "logger",
            "debug",
            "StyleOptimizationService",
            "chapterNumber",
            "return",
            "cachedGuidance",
            "info",
            "const",
            "prevChapterContent",
            "await"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "c1fc7411f3a19df4bf6ce7439af8140c"
      },
      {
        "id": "call_7d6446c9",
        "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
        "fileName": "style-optimization-service.ts",
        "lineNumber": 259,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 254,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 255,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 256,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 257,
              "content": "// APIスロットリングを使用してAIガイダンスを生成",
              "indent": 6
            },
            {
              "lineNumber": 258,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 259,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 260,
              "content": "temperature: 0.3,",
              "indent": 10
            },
            {
              "lineNumber": 261,
              "content": "purpose: 'guidance',",
              "indent": 10
            },
            {
              "lineNumber": 262,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 263,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 264,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 210,
            "distance": 49
          }
        },
        "prompts": [],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "ロマンス"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "世界観",
            "背景"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "分析",
            "generate",
            "create"
          ],
          "complexity": "low",
          "dependencies": [
            "JSON",
            "general",
            "sentenceStructure",
            "vocabulary",
            "rhythm",
            "API",
            "const",
            "response",
            "await",
            "apiThrottler"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "da5d9cb1ea85dd6b82dd3c8b19cda2aa"
      },
      {
        "id": "call_7ab19737",
        "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
        "fileName": "style-optimization-service.ts",
        "lineNumber": 529,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 524,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 525,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 526,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 527,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 528,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 529,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 530,
              "content": "temperature: 0.4,",
              "indent": 10
            },
            {
              "lineNumber": 531,
              "content": "purpose: 'suggestion',",
              "indent": 10
            },
            {
              "lineNumber": 532,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 533,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 534,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 448,
            "distance": 81
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "AIによる代替表現生成中にエラーが発生しました",
            "fullLength": 23,
            "truncatedContent": "AIによる代替表現生成中にエラーが発生しました",
            "hash": "09891be9e88f0f4c1f5aef50b686bf0d",
            "keywords": [
              "生成"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.4",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "ロマンス"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "世界観",
            "背景"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "dialogueAlternatives",
            "conjunctionAlternatives",
            "structureAlternatives",
            "API",
            "const",
            "response",
            "await",
            "apiThrottler",
            "throttledRequest",
            "this"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "53f9c919e94033b84e90fe8e4a208688"
      },
      {
        "id": "call_7376c0dd",
        "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
        "fileName": "style-optimization-service.ts",
        "lineNumber": 719,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 714,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 715,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 716,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 717,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 718,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 719,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 720,
              "content": "temperature: 0.3,",
              "indent": 10
            },
            {
              "lineNumber": 721,
              "content": "purpose: 'suggestion',",
              "indent": 10
            },
            {
              "lineNumber": 722,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 723,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 724,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 669,
            "distance": 50
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ", ...]\r\n}\r\n`;\r\n\r\n      // APIスロットリングを使用してAI生成を実行\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: 'suggestion',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // デフォルト値を準備\r\n      const defaultOptimization: SubjectPatternOptimization = {\r\n        score: subjectPatterns.subjectDiversityScore,\r\n        problems: [],\r\n        suggestions: [\r\n          ",
            "fullLength": 485,
            "truncatedContent": ", ...]\r\n}\r\n`;\r\n\r\n      // APIスロットリングを使用してAI生成を実行\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: 'suggestion',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // デフォルト値を準備\r\n      const defaultOptimization: SubjectPatternOptimization = {\r\n        score: subjectPatterns.subjectDiversityScore,\r\n        problems: [],\r\n        suggestions: [\r\n          ",
            "hash": "9c856847a97833ecaa73ea416401d96e",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", ...]\r\n}\r\n`;\r\n\r\n      // APIスロットリングを使用してAI生成を実行\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: 'suggestion',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // デフォルト値を準備\r\n      const defaultOptimization: SubjectPatternOptimization = {\r\n        score: subjectPatterns.subjectDiversityScore,\r\n        problems: [],\r\n        suggestions: [\r\n          ",
            "fullLength": 485,
            "truncatedContent": ", ...]\r\n}\r\n`;\r\n\r\n      // APIスロットリングを使用してAI生成を実行\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: 'suggestion',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // デフォルト値を準備\r\n      const defaultOptimization: SubjectPatternOptimization = {\r\n        score: subjectPatterns.subjectDiversityScore,\r\n        problems: [],\r\n        suggestions: [\r\n          ",
            "hash": "9c856847a97833ecaa73ea416401d96e",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "ロマンス"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "世界観",
            "背景"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "subject",
            "count",
            "join",
            "context",
            "genre",
            "theme",
            "JSON",
            "score",
            "problems",
            "suggestions"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "6f4ca77e200882cc8341a60491a7fc41"
      },
      {
        "id": "call_3c5880f8",
        "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
        "fileName": "style-optimization-service.ts",
        "lineNumber": 901,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 896,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 897,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 898,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 899,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 900,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 901,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 902,
              "content": "temperature: 0.4,",
              "indent": 10
            },
            {
              "lineNumber": 903,
              "content": "purpose: 'suggestion',",
              "indent": 10
            },
            {
              "lineNumber": 904,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 905,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 906,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 828,
            "distance": 73
          }
        },
        "prompts": [],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.4",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "ロマンス"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "世界観",
            "背景"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "create"
          ],
          "complexity": "low",
          "dependencies": [
            "JSON",
            "type",
            "issue",
            "suggestion",
            "example",
            "before",
            "after",
            "API",
            "const",
            "response"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "53f9c919e94033b84e90fe8e4a208688"
      },
      {
        "id": "call_90bbb4b4",
        "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
        "fileName": "style-optimization-service.ts",
        "lineNumber": 1148,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 1143,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 1144,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 1145,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 1146,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 1147,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 1148,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 1149,
              "content": "temperature: 0.4,",
              "indent": 10
            },
            {
              "lineNumber": 1150,
              "content": "purpose: 'suggestion',",
              "indent": 10
            },
            {
              "lineNumber": 1151,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 1152,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 1153,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 1087,
            "distance": 61
          }
        },
        "prompts": [],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.4",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "ロマンス"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "世界観",
            "背景"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "create"
          ],
          "complexity": "low",
          "dependencies": [
            "itions",
            "map",
            "rep",
            "idx",
            "join",
            "JSON",
            "original",
            "alternatives",
            "context",
            "API"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "53f9c919e94033b84e90fe8e4a208688"
      },
      {
        "id": "call_206fafae",
        "filePath": "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
        "fileName": "tension-optimization-service.ts",
        "lineNumber": 1186,
        "lineContent": "this.geminiAdapter.generateContent(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateContent\\s*\\(",
        "callMethod": "generateContent",
        "fullMatch": "geminiAdapter.generateContent(",
        "context": {
          "before": [
            {
              "lineNumber": 1181,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 1182,
              "content": "注意: 番号と「」などの記号は含めず、提案のテキストのみを返してください。",
              "indent": 0
            },
            {
              "lineNumber": 1183,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 1184,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 1185,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 1186,
            "content": "this.geminiAdapter.generateContent(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 1187,
              "content": "temperature: 0.7,",
              "indent": 10
            },
            {
              "lineNumber": 1188,
              "content": "purpose: 'analysis'",
              "indent": 10
            },
            {
              "lineNumber": 1189,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 1190,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 1191,
              "content": "",
              "indent": 7
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 1102,
            "distance": 84
          }
        },
        "prompts": [],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.7",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "ロマンス",
            "ホラー",
            "アクション",
            "fantasy",
            "mystery",
            "romance",
            "horror"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "世界観",
            "背景"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "ction",
            "recommendation",
            "pacing",
            "recommendedPacing",
            "description",
            "direction",
            "increase",
            "decrease",
            "const",
            "response"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "788b6ac8674b72733554a772dfc5d5ca"
      },
      {
        "id": "call_0573e5a0",
        "filePath": "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
        "fileName": "tension-optimization-service.ts",
        "lineNumber": 1580,
        "lineContent": "this.geminiAdapter.generateContent(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateContent\\s*\\(",
        "callMethod": "generateContent",
        "fullMatch": "geminiAdapter.generateContent(",
        "context": {
          "before": [
            {
              "lineNumber": 1575,
              "content": "\"direction\": \"increase/decrease/maintain\"",
              "indent": 2
            },
            {
              "lineNumber": 1576,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 1577,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 1578,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 1579,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 1580,
            "content": "this.geminiAdapter.generateContent(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 1581,
              "content": "temperature: 0.2,",
              "indent": 10
            },
            {
              "lineNumber": 1582,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 1583,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 1584,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 1585,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 1530,
            "distance": 50
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "response_structure",
            "fields": [
              "adjustment",
              "reason"
            ],
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.2",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "ロマンス",
            "ホラー",
            "アクション",
            "fantasy",
            "mystery",
            "romance",
            "horror"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "世界観",
            "背景"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "設計",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "chapterNumber",
            "genre",
            "baseTension",
            "increase",
            "decrease",
            "maintain",
            "JSON",
            "adjustment",
            "reason",
            "direction"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "fa98844c228a4044e1de51723c1d2944"
      },
      {
        "id": "call_b536e5f0",
        "filePath": "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
        "fileName": "tension-optimization-service.ts",
        "lineNumber": 1186,
        "lineContent": "this.geminiAdapter.generateContent(prompt, {",
        "matchedPattern": "\\.generateContent\\s*\\(",
        "callMethod": "generateContent",
        "fullMatch": ".generateContent(",
        "context": {
          "before": [
            {
              "lineNumber": 1181,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 1182,
              "content": "注意: 番号と「」などの記号は含めず、提案のテキストのみを返してください。",
              "indent": 0
            },
            {
              "lineNumber": 1183,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 1184,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 1185,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 1186,
            "content": "this.geminiAdapter.generateContent(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 1187,
              "content": "temperature: 0.7,",
              "indent": 10
            },
            {
              "lineNumber": 1188,
              "content": "purpose: 'analysis'",
              "indent": 10
            },
            {
              "lineNumber": 1189,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 1190,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 1191,
              "content": "",
              "indent": 7
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 1102,
            "distance": 84
          }
        },
        "prompts": [],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.7",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "ロマンス",
            "ホラー",
            "アクション",
            "fantasy",
            "mystery",
            "romance",
            "horror"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "世界観",
            "背景"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "recommendation",
            "pacing",
            "recommendedPacing",
            "description",
            "direction",
            "increase",
            "decrease",
            "const",
            "response",
            "await"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "b7f8b245f3956b1caa7612fdcae30b12"
      },
      {
        "id": "call_f7dee58e",
        "filePath": "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
        "fileName": "tension-optimization-service.ts",
        "lineNumber": 1580,
        "lineContent": "this.geminiAdapter.generateContent(prompt, {",
        "matchedPattern": "\\.generateContent\\s*\\(",
        "callMethod": "generateContent",
        "fullMatch": ".generateContent(",
        "context": {
          "before": [
            {
              "lineNumber": 1575,
              "content": "\"direction\": \"increase/decrease/maintain\"",
              "indent": 2
            },
            {
              "lineNumber": 1576,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 1577,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 1578,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 1579,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 1580,
            "content": "this.geminiAdapter.generateContent(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 1581,
              "content": "temperature: 0.2,",
              "indent": 10
            },
            {
              "lineNumber": 1582,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 1583,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 1584,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 1585,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 1530,
            "distance": 50
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "response_structure",
            "fields": [
              "adjustment",
              "reason"
            ],
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.2",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "ロマンス",
            "ホラー",
            "アクション",
            "fantasy",
            "mystery",
            "romance",
            "horror"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "世界観",
            "背景"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "設計",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "chapterNumber",
            "genre",
            "baseTension",
            "increase",
            "decrease",
            "maintain",
            "JSON",
            "adjustment",
            "reason",
            "direction"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "7f70fb067f6cae758eed4346d965a97e"
      },
      {
        "id": "call_1035d952",
        "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
        "fileName": "theme-enhancement-service.ts",
        "lineNumber": 450,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 445,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 446,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 447,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 448,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 449,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 450,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 451,
              "content": "temperature: 0.3,",
              "indent": 10
            },
            {
              "lineNumber": 452,
              "content": "purpose: 'suggestion',",
              "indent": 10
            },
            {
              "lineNumber": 453,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 454,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 455,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 389,
            "distance": 61
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "fantasy",
            "mystery"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "世界観",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "create"
          ],
          "complexity": "low",
          "dependencies": [
            "phaseStrategy",
            "genreStrategy",
            "JSON",
            "theme",
            "currentStrength",
            "suggestion",
            "approach",
            "example",
            "impact",
            "API"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "e2c34ca4e6171e2d60149565e268b20c"
      },
      {
        "id": "call_b3a40c33",
        "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
        "fileName": "theme-enhancement-service.ts",
        "lineNumber": 551,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 546,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 547,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 548,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 549,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 550,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 551,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 552,
              "content": "temperature: 0.4,",
              "indent": 10
            },
            {
              "lineNumber": 553,
              "content": "purpose: 'suggestion',",
              "indent": 10
            },
            {
              "lineNumber": 554,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 555,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 556,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 470,
            "distance": 81
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.4",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "fantasy",
            "mystery"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "世界観",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "create"
          ],
          "complexity": "low",
          "dependencies": [
            "phaseStrategy",
            "genreStrategy",
            "JSON",
            "plotTechniques",
            "technique",
            "description",
            "example",
            "reference",
            "characterTechniques",
            "atmosphereTechniques"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "1502eb2fbdffef35b195f62bf6fba15c"
      },
      {
        "id": "call_587109fc",
        "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
        "fileName": "theme-enhancement-service.ts",
        "lineNumber": 633,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 628,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 629,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 630,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 631,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 632,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 633,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 634,
              "content": "temperature: 0.4,",
              "indent": 10
            },
            {
              "lineNumber": 635,
              "content": "purpose: 'suggestion',",
              "indent": 10
            },
            {
              "lineNumber": 636,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 637,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 638,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 569,
            "distance": 64
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.4",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "fantasy",
            "mystery"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "世界観",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "create"
          ],
          "complexity": "low",
          "dependencies": [
            "general",
            "genreStrategy",
            "JSON",
            "theme",
            "symbolName",
            "description",
            "usage",
            "effect",
            "caution",
            "API"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "1502eb2fbdffef35b195f62bf6fba15c"
      },
      {
        "id": "call_65dcaee2",
        "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
        "fileName": "theme-enhancement-service.ts",
        "lineNumber": 717,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 712,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 713,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 714,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 715,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 716,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 717,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 718,
              "content": "temperature: 0.3,",
              "indent": 10
            },
            {
              "lineNumber": 719,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 720,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 721,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 722,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 653,
            "distance": 64
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "resolution",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "fantasy",
            "mystery"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "世界観",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "JSON",
            "element",
            "textPosition",
            "possibleDevelopments",
            "suggestedResolutionChapter",
            "relatedTheme",
            "importance",
            "API",
            "const",
            "response"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "dc17ecbb6ddb2c6b368bcb35ed67f1e2"
      },
      {
        "id": "call_64534711",
        "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
        "fileName": "theme-enhancement-service.ts",
        "lineNumber": 801,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 796,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 797,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 798,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 799,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 800,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 801,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 802,
              "content": "temperature: 0.4,",
              "indent": 10
            },
            {
              "lineNumber": 803,
              "content": "purpose: 'suggestion',",
              "indent": 10
            },
            {
              "lineNumber": 804,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 805,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 806,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 737,
            "distance": 64
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.4",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "fantasy",
            "mystery"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "世界観",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "genreStrategy",
            "JSON",
            "techniqueName",
            "description",
            "example",
            "effect",
            "suitableGenres",
            "themeRelevance",
            "API",
            "const"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "1502eb2fbdffef35b195f62bf6fba15c"
      },
      {
        "id": "call_b943c4c9",
        "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
        "fileName": "theme-enhancement-service.ts",
        "lineNumber": 450,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 445,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 446,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 447,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 448,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 449,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 450,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 451,
              "content": "temperature: 0.3,",
              "indent": 10
            },
            {
              "lineNumber": 452,
              "content": "purpose: 'suggestion',",
              "indent": 10
            },
            {
              "lineNumber": 453,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 454,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 455,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 389,
            "distance": 61
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "fantasy",
            "mystery"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "世界観",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "create"
          ],
          "complexity": "low",
          "dependencies": [
            "phaseStrategy",
            "genreStrategy",
            "JSON",
            "theme",
            "currentStrength",
            "suggestion",
            "approach",
            "example",
            "impact",
            "API"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "6f4ca77e200882cc8341a60491a7fc41"
      },
      {
        "id": "call_0ae55a83",
        "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
        "fileName": "theme-enhancement-service.ts",
        "lineNumber": 551,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 546,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 547,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 548,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 549,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 550,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 551,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 552,
              "content": "temperature: 0.4,",
              "indent": 10
            },
            {
              "lineNumber": 553,
              "content": "purpose: 'suggestion',",
              "indent": 10
            },
            {
              "lineNumber": 554,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 555,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 556,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 470,
            "distance": 81
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.4",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "fantasy",
            "mystery"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "世界観",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "create"
          ],
          "complexity": "low",
          "dependencies": [
            "ategy",
            "genreStrategy",
            "JSON",
            "plotTechniques",
            "technique",
            "description",
            "example",
            "reference",
            "characterTechniques",
            "atmosphereTechniques"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "53f9c919e94033b84e90fe8e4a208688"
      },
      {
        "id": "call_40b206b4",
        "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
        "fileName": "theme-enhancement-service.ts",
        "lineNumber": 633,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 628,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 629,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 630,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 631,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 632,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 633,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 634,
              "content": "temperature: 0.4,",
              "indent": 10
            },
            {
              "lineNumber": 635,
              "content": "purpose: 'suggestion',",
              "indent": 10
            },
            {
              "lineNumber": 636,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 637,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 638,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 569,
            "distance": 64
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.4",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "fantasy",
            "mystery"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "世界観",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "create"
          ],
          "complexity": "low",
          "dependencies": [
            "genreStrategy",
            "JSON",
            "theme",
            "symbolName",
            "description",
            "usage",
            "effect",
            "caution",
            "API",
            "const"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "53f9c919e94033b84e90fe8e4a208688"
      },
      {
        "id": "call_d1dbf14b",
        "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
        "fileName": "theme-enhancement-service.ts",
        "lineNumber": 717,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 712,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 713,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 714,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 715,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 716,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 717,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 718,
              "content": "temperature: 0.3,",
              "indent": 10
            },
            {
              "lineNumber": 719,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 720,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 721,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 722,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 653,
            "distance": 64
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "resolution",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "fantasy",
            "mystery"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "世界観",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "JSON",
            "element",
            "textPosition",
            "possibleDevelopments",
            "suggestedResolutionChapter",
            "relatedTheme",
            "importance",
            "API",
            "const",
            "response"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "e8295ef4d33af5c37f08cab0d4a41c37"
      },
      {
        "id": "call_a2a64800",
        "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
        "fileName": "theme-enhancement-service.ts",
        "lineNumber": 801,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 796,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 797,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 798,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 799,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 800,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 801,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 802,
              "content": "temperature: 0.4,",
              "indent": 10
            },
            {
              "lineNumber": 803,
              "content": "purpose: 'suggestion',",
              "indent": 10
            },
            {
              "lineNumber": 804,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 805,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 806,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 737,
            "distance": 64
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.4",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF",
            "ミステリー",
            "fantasy",
            "mystery"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "世界観",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "genreStrategy",
            "JSON",
            "techniqueName",
            "description",
            "example",
            "effect",
            "suitableGenres",
            "themeRelevance",
            "API",
            "const"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "53f9c919e94033b84e90fe8e4a208688"
      },
      {
        "id": "call_69171be2",
        "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
        "fileName": "chapter-analysis-service.ts",
        "lineNumber": 182,
        "lineContent": "this.geminiAdapter.generateText(qualityPrompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 177,
              "content": "try {",
              "indent": 4
            },
            {
              "lineNumber": 178,
              "content": "logger.info(`Analyzing quality metrics for chapter ${chapterNumber}`);",
              "indent": 6
            },
            {
              "lineNumber": 179,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 180,
              "content": "// APIスロットリングを使用して品質分析を実行",
              "indent": 6
            },
            {
              "lineNumber": 181,
              "content": "const qualityResponse = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 182,
            "content": "this.geminiAdapter.generateText(qualityPrompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 183,
              "content": "temperature: 0.1,",
              "indent": 10
            },
            {
              "lineNumber": 184,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 185,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 186,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 187,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 144,
            "distance": 38
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "qualityPrompt",
            "relatedMethods": [
              "qualityPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "create"
          ],
          "complexity": "low",
          "dependencies": [
            "coherence",
            "characterConsistency",
            "JSON",
            "readability",
            "consistency",
            "engagement",
            "characterDepiction",
            "originality",
            "overall",
            "try"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "aaa0384582294fb44f3cec648bd42e49"
      },
      {
        "id": "call_0696c96c",
        "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
        "fileName": "chapter-analysis-service.ts",
        "lineNumber": 290,
        "lineContent": "this.geminiAdapter.generateText(characterPrompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 285,
              "content": "try {",
              "indent": 4
            },
            {
              "lineNumber": 286,
              "content": "logger.info(`Analyzing character appearances for chapter ${chapterNumber}`);",
              "indent": 6
            },
            {
              "lineNumber": 287,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 288,
              "content": "// APIスロットリングを使用してキャラクター分析を実行",
              "indent": 6
            },
            {
              "lineNumber": 289,
              "content": "const characterResponse = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 290,
            "content": "this.geminiAdapter.generateText(characterPrompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 291,
              "content": "temperature: 0.2,",
              "indent": 10
            },
            {
              "lineNumber": 292,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 293,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 294,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 295,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 255,
            "distance": 35
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "characterPrompt",
            "relatedMethods": [
              "characterPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "dialogue",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.2",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "ueCount",
            "significance",
            "actions",
            "emotions",
            "JSON",
            "characterName",
            "dialogueCount",
            "try",
            "logger",
            "info"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "349e3ada3cd5f10a3db7313ae34e49c5"
      },
      {
        "id": "call_93e91667",
        "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
        "fileName": "chapter-analysis-service.ts",
        "lineNumber": 354,
        "lineContent": "this.geminiAdapter.generateText(keywordPrompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 349,
              "content": "try {",
              "indent": 4
            },
            {
              "lineNumber": 350,
              "content": "logger.info(`Extracting keywords from content`);",
              "indent": 6
            },
            {
              "lineNumber": 351,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 352,
              "content": "// APIスロットリングを使用してキーワード抽出を実行",
              "indent": 6
            },
            {
              "lineNumber": 353,
              "content": "const keywordResponse = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 354,
            "content": "this.geminiAdapter.generateText(keywordPrompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 355,
              "content": "temperature: 0.2,",
              "indent": 10
            },
            {
              "lineNumber": 356,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 357,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 358,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 359,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 311,
            "distance": 43
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "keywordPrompt",
            "relatedMethods": [
              "keywordPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.2",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "JSON",
            "characters",
            "locations",
            "objects",
            "concepts",
            "events",
            "try",
            "logger",
            "info",
            "Extracting"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "1fad2a3fb112aaf874e9ffa915452ddf"
      },
      {
        "id": "call_edfc52ac",
        "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
        "fileName": "chapter-analysis-service.ts",
        "lineNumber": 791,
        "lineContent": "this.geminiAdapter.generateText(analysisPrompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 786,
              "content": "// 分析プロンプトの構築",
              "indent": 6
            },
            {
              "lineNumber": 787,
              "content": "const analysisPrompt = this.createBaseAnalysisPrompt(content);",
              "indent": 6
            },
            {
              "lineNumber": 788,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 789,
              "content": "// APIスロットリングを使用して分析を実行",
              "indent": 6
            },
            {
              "lineNumber": 790,
              "content": "const analysisResponse = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 791,
            "content": "this.geminiAdapter.generateText(analysisPrompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 792,
              "content": "temperature: 0.1, // 分析タスクのため低温に設定",
              "indent": 10
            },
            {
              "lineNumber": 793,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 794,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 795,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 796,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 731,
            "distance": 60
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "ChapterAnalysis",
            "relatedMethods": [
              "ChapterAnalysis",
              "performBaseAnalysis",
              "analysisPrompt",
              "createBaseAnalysisPrompt",
              "parsedAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<ChapterAnalysis>"
            ],
            "extractedTypes": [
              "ChapterAnalysis>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "分析",
            "構築",
            "generate",
            "create"
          ],
          "complexity": "low",
          "dependencies": [
            "chapterNumber",
            "param",
            "GenerationContext",
            "context",
            "returns",
            "Promise",
            "ChapterAnalysis",
            "private",
            "async",
            "performBaseAnalysis"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "63e0d1b00f2f9e40aa93dce6432007a2"
      },
      {
        "id": "call_1f3e5a77",
        "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
        "fileName": "chapter-analysis-service.ts",
        "lineNumber": 881,
        "lineContent": "this.geminiAdapter.generateText(scenePrompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 876,
              "content": "summary: '章全体'",
              "indent": 8
            },
            {
              "lineNumber": 877,
              "content": "}];",
              "indent": 6
            },
            {
              "lineNumber": 878,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 879,
              "content": "// APIスロットリングを使用してシーン抽出を実行",
              "indent": 6
            },
            {
              "lineNumber": 880,
              "content": "const sceneResponse = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 881,
            "content": "this.geminiAdapter.generateText(scenePrompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 882,
              "content": "temperature: 0.2,",
              "indent": 10
            },
            {
              "lineNumber": 883,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 884,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 885,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 886,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 831,
            "distance": 50
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ",\r\n        type: 'DEVELOPMENT',\r\n        title: '章の内容',\r\n        startPosition: 0,\r\n        endPosition: content.length,\r\n        characters: [],\r\n        location: '',\r\n        summary: '章全体'\r\n      }];\r\n\r\n      // APIスロットリングを使用してシーン抽出を実行\r\n      const sceneResponse = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(scenePrompt, {\r\n          temperature: 0.2,\r\n          purpose: 'analysis',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // JsonParserを使用してレスポンスを解析\r\n      const parsedScenes = JsonParser.parseFromAIResponse<any[]>(sceneResponse, []);\r\n\r\n      // 配列かどうか検証\r\n      if (!Array.isArray(parsedScenes) || parsedScenes.length === 0) {\r\n        logger.warn(",
            "fullLength": 720,
            "truncatedContent": ",\r\n        type: 'DEVELOPMENT',\r\n        title: '章の内容',\r\n        startPosition: 0,\r\n        endPosition: content.length,\r\n        characters: [],\r\n        location: '',\r\n        summary: '章全体'\r\n      }];\r\n\r\n      // APIスロットリングを使用してシーン抽出を実行\r\n      const sceneResponse = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(scenePrompt, {\r\n          temperature: 0.2,\r\n          purpose: 'analysis',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // JsonParserを使用してレスポンスを解析\r\n      const parsedScenes = JsonParser.parseFromAIResponse<any[]>(sceneResponse, []);\r\n\r\n      // 配列かどうか検証\r\n      if (!Array.isArray(parsedScenes) || parsedScenes.length === 0) {\r\n        logger.warn(",
            "hash": "21db59c7003619a326b9f42bf8560435",
            "keywords": [
              "章",
              "シーン",
              "character",
              "scene",
              "generate",
              "Scene"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ",\r\n        type: 'DEVELOPMENT',\r\n        title: '章の内容',\r\n        startPosition: 0,\r\n        endPosition: content.length,\r\n        characters: [],\r\n        location: '',\r\n        summary: '章全体'\r\n      }];\r\n\r\n      // APIスロットリングを使用してシーン抽出を実行\r\n      const sceneResponse = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(scenePrompt, {\r\n          temperature: 0.2,\r\n          purpose: 'analysis',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // JsonParserを使用してレスポンスを解析\r\n      const parsedScenes = JsonParser.parseFromAIResponse<any[]>(sceneResponse, []);\r\n\r\n      // 配列かどうか検証\r\n      if (!Array.isArray(parsedScenes) || parsedScenes.length === 0) {\r\n        logger.warn(",
            "fullLength": 720,
            "truncatedContent": ",\r\n        type: 'DEVELOPMENT',\r\n        title: '章の内容',\r\n        startPosition: 0,\r\n        endPosition: content.length,\r\n        characters: [],\r\n        location: '',\r\n        summary: '章全体'\r\n      }];\r\n\r\n      // APIスロットリングを使用してシーン抽出を実行\r\n      const sceneResponse = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(scenePrompt, {\r\n          temperature: 0.2,\r\n          purpose: 'analysis',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // JsonParserを使用してレスポンスを解析\r\n      const parsedScenes = JsonParser.parseFromAIResponse<any[]>(sceneResponse, []);\r\n\r\n      // 配列かどうか検証\r\n      if (!Array.isArray(parsedScenes) || parsedScenes.length === 0) {\r\n        logger.warn(",
            "hash": "21db59c7003619a326b9f42bf8560435",
            "keywords": [
              "章",
              "シーン",
              "character",
              "scene",
              "generate",
              "Scene"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n      }];\r\n\r\n      // APIスロットリングを使用してシーン抽出を実行\r\n      const sceneResponse = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(scenePrompt, {\r\n          temperature: 0.2,\r\n          purpose: ",
            "fullLength": 224,
            "truncatedContent": "\r\n      }];\r\n\r\n      // APIスロットリングを使用してシーン抽出を実行\r\n      const sceneResponse = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(scenePrompt, {\r\n          temperature: 0.2,\r\n          purpose: ",
            "hash": "dd804c933880feb272e0698b858f21f4",
            "keywords": [
              "シーン",
              "scene",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ",\r\n        type: 'DEVELOPMENT',\r\n        title: '章の内容',\r\n        startPosition: 0,\r\n        endPosition: content.length,\r\n        characters: [],\r\n        location: '',\r\n        summary: '章全体'\r\n      }];\r\n\r\n      // APIスロットリングを使用してシーン抽出を実行\r\n      const sceneResponse = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(scenePrompt, {\r\n          temperature: 0.2,\r\n          purpose: 'analysis',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // JsonParserを使用してレスポンスを解析\r\n      const parsedScenes = JsonParser.parseFromAIResponse<any[]>(sceneResponse, []);\r\n\r\n      // 配列かどうか検証\r\n      if (!Array.isArray(parsedScenes) || parsedScenes.length === 0) {\r\n        logger.warn(",
            "fullLength": 720,
            "truncatedContent": ",\r\n        type: 'DEVELOPMENT',\r\n        title: '章の内容',\r\n        startPosition: 0,\r\n        endPosition: content.length,\r\n        characters: [],\r\n        location: '',\r\n        summary: '章全体'\r\n      }];\r\n\r\n      // APIスロットリングを使用してシーン抽出を実行\r\n      const sceneResponse = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(scenePrompt, {\r\n          temperature: 0.2,\r\n          purpose: 'analysis',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // JsonParserを使用してレスポンスを解析\r\n      const parsedScenes = JsonParser.parseFromAIResponse<any[]>(sceneResponse, []);\r\n\r\n      // 配列かどうか検証\r\n      if (!Array.isArray(parsedScenes) || parsedScenes.length === 0) {\r\n        logger.warn(",
            "hash": "21db59c7003619a326b9f42bf8560435",
            "hasVariables": false,
            "variableCount": 0
          },
          {
            "type": "method_based",
            "suggestedPurpose": "scenePrompt",
            "relatedMethods": [
              "scenePrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "scene",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.2",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate",
            "create"
          ],
          "complexity": "low",
          "dependencies": [
            "enePrompt",
            "this",
            "createSceneExtractionPrompt",
            "content",
            "const",
            "fallbackScene",
            "Scene",
            "scene",
            "chapterNumber",
            "type"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "661a4b12c47a94afc7650b4c3188d0df"
      },
      {
        "id": "call_ce99d105",
        "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
        "fileName": "chapter-analysis-service.ts",
        "lineNumber": 182,
        "lineContent": "this.geminiAdapter.generateText(qualityPrompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 177,
              "content": "try {",
              "indent": 4
            },
            {
              "lineNumber": 178,
              "content": "logger.info(`Analyzing quality metrics for chapter ${chapterNumber}`);",
              "indent": 6
            },
            {
              "lineNumber": 179,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 180,
              "content": "// APIスロットリングを使用して品質分析を実行",
              "indent": 6
            },
            {
              "lineNumber": 181,
              "content": "const qualityResponse = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 182,
            "content": "this.geminiAdapter.generateText(qualityPrompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 183,
              "content": "temperature: 0.1,",
              "indent": 10
            },
            {
              "lineNumber": 184,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 185,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 186,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 187,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 144,
            "distance": 38
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "qualityPrompt",
            "relatedMethods": [
              "qualityPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "create"
          ],
          "complexity": "low",
          "dependencies": [
            "coherence",
            "characterConsistency",
            "JSON",
            "readability",
            "consistency",
            "engagement",
            "characterDepiction",
            "originality",
            "overall",
            "try"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "b815552d6746390dffdb5a4535bdf50b"
      },
      {
        "id": "call_ed6830f7",
        "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
        "fileName": "chapter-analysis-service.ts",
        "lineNumber": 290,
        "lineContent": "this.geminiAdapter.generateText(characterPrompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 285,
              "content": "try {",
              "indent": 4
            },
            {
              "lineNumber": 286,
              "content": "logger.info(`Analyzing character appearances for chapter ${chapterNumber}`);",
              "indent": 6
            },
            {
              "lineNumber": 287,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 288,
              "content": "// APIスロットリングを使用してキャラクター分析を実行",
              "indent": 6
            },
            {
              "lineNumber": 289,
              "content": "const characterResponse = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 290,
            "content": "this.geminiAdapter.generateText(characterPrompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 291,
              "content": "temperature: 0.2,",
              "indent": 10
            },
            {
              "lineNumber": 292,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 293,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 294,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 295,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 255,
            "distance": 35
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "characterPrompt",
            "relatedMethods": [
              "characterPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "dialogue",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.2",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "significance",
            "actions",
            "emotions",
            "JSON",
            "characterName",
            "dialogueCount",
            "try",
            "logger",
            "info",
            "Analyzing"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "3aa75228a4ef34bda4741003684447d3"
      },
      {
        "id": "call_e5010d96",
        "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
        "fileName": "chapter-analysis-service.ts",
        "lineNumber": 354,
        "lineContent": "this.geminiAdapter.generateText(keywordPrompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 349,
              "content": "try {",
              "indent": 4
            },
            {
              "lineNumber": 350,
              "content": "logger.info(`Extracting keywords from content`);",
              "indent": 6
            },
            {
              "lineNumber": 351,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 352,
              "content": "// APIスロットリングを使用してキーワード抽出を実行",
              "indent": 6
            },
            {
              "lineNumber": 353,
              "content": "const keywordResponse = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 354,
            "content": "this.geminiAdapter.generateText(keywordPrompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 355,
              "content": "temperature: 0.2,",
              "indent": 10
            },
            {
              "lineNumber": 356,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 357,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 358,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 359,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 311,
            "distance": 43
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "keywordPrompt",
            "relatedMethods": [
              "keywordPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.2",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "characters",
            "locations",
            "objects",
            "concepts",
            "events",
            "JSON",
            "try",
            "logger",
            "info",
            "Extracting"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "109a69c31669658f264c3dd1cb7c1481"
      },
      {
        "id": "call_61ed4d09",
        "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
        "fileName": "chapter-analysis-service.ts",
        "lineNumber": 791,
        "lineContent": "this.geminiAdapter.generateText(analysisPrompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 786,
              "content": "// 分析プロンプトの構築",
              "indent": 6
            },
            {
              "lineNumber": 787,
              "content": "const analysisPrompt = this.createBaseAnalysisPrompt(content);",
              "indent": 6
            },
            {
              "lineNumber": 788,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 789,
              "content": "// APIスロットリングを使用して分析を実行",
              "indent": 6
            },
            {
              "lineNumber": 790,
              "content": "const analysisResponse = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 791,
            "content": "this.geminiAdapter.generateText(analysisPrompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 792,
              "content": "temperature: 0.1, // 分析タスクのため低温に設定",
              "indent": 10
            },
            {
              "lineNumber": 793,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 794,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 795,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 796,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 731,
            "distance": 60
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "ChapterAnalysis",
            "relatedMethods": [
              "ChapterAnalysis",
              "performBaseAnalysis",
              "analysisPrompt",
              "createBaseAnalysisPrompt",
              "parsedAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<ChapterAnalysis>"
            ],
            "extractedTypes": [
              "ChapterAnalysis>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "分析",
            "構築",
            "generate",
            "create"
          ],
          "complexity": "low",
          "dependencies": [
            "param",
            "GenerationContext",
            "context",
            "returns",
            "Promise",
            "ChapterAnalysis",
            "private",
            "async",
            "performBaseAnalysis",
            "content"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "9ebad46181c27f6106836143a7a4684b"
      },
      {
        "id": "call_3e476d9e",
        "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
        "fileName": "chapter-analysis-service.ts",
        "lineNumber": 881,
        "lineContent": "this.geminiAdapter.generateText(scenePrompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 876,
              "content": "summary: '章全体'",
              "indent": 8
            },
            {
              "lineNumber": 877,
              "content": "}];",
              "indent": 6
            },
            {
              "lineNumber": 878,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 879,
              "content": "// APIスロットリングを使用してシーン抽出を実行",
              "indent": 6
            },
            {
              "lineNumber": 880,
              "content": "const sceneResponse = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 881,
            "content": "this.geminiAdapter.generateText(scenePrompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 882,
              "content": "temperature: 0.2,",
              "indent": 10
            },
            {
              "lineNumber": 883,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 884,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 885,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 886,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 831,
            "distance": 50
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ",\r\n        type: 'DEVELOPMENT',\r\n        title: '章の内容',\r\n        startPosition: 0,\r\n        endPosition: content.length,\r\n        characters: [],\r\n        location: '',\r\n        summary: '章全体'\r\n      }];\r\n\r\n      // APIスロットリングを使用してシーン抽出を実行\r\n      const sceneResponse = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(scenePrompt, {\r\n          temperature: 0.2,\r\n          purpose: 'analysis',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // JsonParserを使用してレスポンスを解析\r\n      const parsedScenes = JsonParser.parseFromAIResponse<any[]>(sceneResponse, []);\r\n\r\n      // 配列かどうか検証\r\n      if (!Array.isArray(parsedScenes) || parsedScenes.length === 0) {\r\n        logger.warn(",
            "fullLength": 720,
            "truncatedContent": ",\r\n        type: 'DEVELOPMENT',\r\n        title: '章の内容',\r\n        startPosition: 0,\r\n        endPosition: content.length,\r\n        characters: [],\r\n        location: '',\r\n        summary: '章全体'\r\n      }];\r\n\r\n      // APIスロットリングを使用してシーン抽出を実行\r\n      const sceneResponse = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(scenePrompt, {\r\n          temperature: 0.2,\r\n          purpose: 'analysis',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // JsonParserを使用してレスポンスを解析\r\n      const parsedScenes = JsonParser.parseFromAIResponse<any[]>(sceneResponse, []);\r\n\r\n      // 配列かどうか検証\r\n      if (!Array.isArray(parsedScenes) || parsedScenes.length === 0) {\r\n        logger.warn(",
            "hash": "21db59c7003619a326b9f42bf8560435",
            "keywords": [
              "章",
              "シーン",
              "character",
              "scene",
              "generate",
              "Scene"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ",\r\n        type: 'DEVELOPMENT',\r\n        title: '章の内容',\r\n        startPosition: 0,\r\n        endPosition: content.length,\r\n        characters: [],\r\n        location: '',\r\n        summary: '章全体'\r\n      }];\r\n\r\n      // APIスロットリングを使用してシーン抽出を実行\r\n      const sceneResponse = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(scenePrompt, {\r\n          temperature: 0.2,\r\n          purpose: 'analysis',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // JsonParserを使用してレスポンスを解析\r\n      const parsedScenes = JsonParser.parseFromAIResponse<any[]>(sceneResponse, []);\r\n\r\n      // 配列かどうか検証\r\n      if (!Array.isArray(parsedScenes) || parsedScenes.length === 0) {\r\n        logger.warn(",
            "fullLength": 720,
            "truncatedContent": ",\r\n        type: 'DEVELOPMENT',\r\n        title: '章の内容',\r\n        startPosition: 0,\r\n        endPosition: content.length,\r\n        characters: [],\r\n        location: '',\r\n        summary: '章全体'\r\n      }];\r\n\r\n      // APIスロットリングを使用してシーン抽出を実行\r\n      const sceneResponse = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(scenePrompt, {\r\n          temperature: 0.2,\r\n          purpose: 'analysis',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // JsonParserを使用してレスポンスを解析\r\n      const parsedScenes = JsonParser.parseFromAIResponse<any[]>(sceneResponse, []);\r\n\r\n      // 配列かどうか検証\r\n      if (!Array.isArray(parsedScenes) || parsedScenes.length === 0) {\r\n        logger.warn(",
            "hash": "21db59c7003619a326b9f42bf8560435",
            "keywords": [
              "章",
              "シーン",
              "character",
              "scene",
              "generate",
              "Scene"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n      }];\r\n\r\n      // APIスロットリングを使用してシーン抽出を実行\r\n      const sceneResponse = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(scenePrompt, {\r\n          temperature: 0.2,\r\n          purpose: ",
            "fullLength": 224,
            "truncatedContent": "\r\n      }];\r\n\r\n      // APIスロットリングを使用してシーン抽出を実行\r\n      const sceneResponse = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(scenePrompt, {\r\n          temperature: 0.2,\r\n          purpose: ",
            "hash": "dd804c933880feb272e0698b858f21f4",
            "keywords": [
              "シーン",
              "scene",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ",\r\n        type: 'DEVELOPMENT',\r\n        title: '章の内容',\r\n        startPosition: 0,\r\n        endPosition: content.length,\r\n        characters: [],\r\n        location: '',\r\n        summary: '章全体'\r\n      }];\r\n\r\n      // APIスロットリングを使用してシーン抽出を実行\r\n      const sceneResponse = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(scenePrompt, {\r\n          temperature: 0.2,\r\n          purpose: 'analysis',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // JsonParserを使用してレスポンスを解析\r\n      const parsedScenes = JsonParser.parseFromAIResponse<any[]>(sceneResponse, []);\r\n\r\n      // 配列かどうか検証\r\n      if (!Array.isArray(parsedScenes) || parsedScenes.length === 0) {\r\n        logger.warn(",
            "fullLength": 720,
            "truncatedContent": ",\r\n        type: 'DEVELOPMENT',\r\n        title: '章の内容',\r\n        startPosition: 0,\r\n        endPosition: content.length,\r\n        characters: [],\r\n        location: '',\r\n        summary: '章全体'\r\n      }];\r\n\r\n      // APIスロットリングを使用してシーン抽出を実行\r\n      const sceneResponse = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(scenePrompt, {\r\n          temperature: 0.2,\r\n          purpose: 'analysis',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // JsonParserを使用してレスポンスを解析\r\n      const parsedScenes = JsonParser.parseFromAIResponse<any[]>(sceneResponse, []);\r\n\r\n      // 配列かどうか検証\r\n      if (!Array.isArray(parsedScenes) || parsedScenes.length === 0) {\r\n        logger.warn(",
            "hash": "21db59c7003619a326b9f42bf8560435",
            "hasVariables": false,
            "variableCount": 0
          },
          {
            "type": "method_based",
            "suggestedPurpose": "scenePrompt",
            "relatedMethods": [
              "scenePrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "scene",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.2",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate",
            "create"
          ],
          "complexity": "low",
          "dependencies": [
            "his",
            "createSceneExtractionPrompt",
            "content",
            "const",
            "fallbackScene",
            "Scene",
            "scene",
            "chapterNumber",
            "type",
            "DEVELOPMENT"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "d5b34200efaf3805d738c775fe885baa"
      },
      {
        "id": "call_9d90ac6a",
        "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
        "fileName": "character-analysis-service.ts",
        "lineNumber": 264,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 259,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 260,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 261,
              "content": "成長が見られないキャラクターは配列に含めないでください。`;",
              "indent": 0
            },
            {
              "lineNumber": 262,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 263,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 264,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 265,
              "content": "temperature: 0.3,",
              "indent": 20
            },
            {
              "lineNumber": 266,
              "content": "purpose: 'analysis',",
              "indent": 20
            },
            {
              "lineNumber": 267,
              "content": "responseFormat: 'json'",
              "indent": 20
            },
            {
              "lineNumber": 268,
              "content": "})",
              "indent": 16
            },
            {
              "lineNumber": 269,
              "content": ");",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 223,
            "distance": 41
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\r\n                })\r\n            );\r\n\r\n            const parsedGrowth = JsonParser.parseFromAIResponse<any[]>(response, []);\r\n\r\n            // 成長が実際にあるキャラクターのみをフィルタリング\r\n            const updatedCharacters = parsedGrowth.filter(char =>\r\n                (char.parameterChanges && char.parameterChanges.length > 0) ||\r\n                (char.skillAcquisitions && char.skillAcquisitions.length > 0) ||\r\n                (char.growthPhase && char.growthPhase !== ",
            "fullLength": 457,
            "truncatedContent": "\r\n                })\r\n            );\r\n\r\n            const parsedGrowth = JsonParser.parseFromAIResponse<any[]>(response, []);\r\n\r\n            // 成長が実際にあるキャラクターのみをフィルタリング\r\n            const updatedCharacters = parsedGrowth.filter(char =>\r\n                (char.parameterChanges && char.parameterChanges.length > 0) ||\r\n                (char.skillAcquisitions && char.skillAcquisitions.length > 0) ||\r\n                (char.growthPhase && char.growthPhase !== ",
            "hash": "fda6797ca4ee2b1b1e32581a022a178d",
            "keywords": [
              "キャラクター",
              "Character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [
            "シーン",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "JSON",
            "character",
            "name",
            "growthPhase",
            "parameterChanges",
            "change",
            "skillAcquisitions",
            "growthDescription",
            "const",
            "response"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "83b76058a44b6526de4714d8bf98d3b9"
      },
      {
        "id": "call_f85b10f3",
        "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
        "fileName": "character-analysis-service.ts",
        "lineNumber": 342,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 337,
              "content": "\"scenes\": [\"シーン1\", \"シーン2\"]",
              "indent": 4
            },
            {
              "lineNumber": 338,
              "content": "}",
              "indent": 2
            },
            {
              "lineNumber": 339,
              "content": "]`;",
              "indent": 0
            },
            {
              "lineNumber": 340,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 341,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 342,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 343,
              "content": "temperature: 0.2,",
              "indent": 20
            },
            {
              "lineNumber": 344,
              "content": "purpose: 'analysis',",
              "indent": 20
            },
            {
              "lineNumber": 345,
              "content": "responseFormat: 'json'",
              "indent": 20
            },
            {
              "lineNumber": 346,
              "content": "})",
              "indent": 16
            },
            {
              "lineNumber": 347,
              "content": ");",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 291,
            "distance": 51
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "Failed to analyze character appearances",
            "fullLength": 39,
            "truncatedContent": "Failed to analyze character appearances",
            "hash": "fab657ba7d641c9ae422fa6998465b8f",
            "keywords": [
              "analyze",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "scene",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "dialogue",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.2",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [
            "シーン",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "JSON",
            "characterName",
            "dialogueCount",
            "significance",
            "actions",
            "emotions",
            "scenes",
            "const",
            "response",
            "await"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "54e38612037403030ec4454f3d8509f9"
      },
      {
        "id": "call_47799132",
        "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
        "fileName": "character-analysis-service.ts",
        "lineNumber": 401,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 396,
              "content": "\"psychologicalProfile\": \"心理プロファイルの説明\"",
              "indent": 4
            },
            {
              "lineNumber": 397,
              "content": "}",
              "indent": 2
            },
            {
              "lineNumber": 398,
              "content": "]`;",
              "indent": 0
            },
            {
              "lineNumber": 399,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 400,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 401,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 402,
              "content": "temperature: 0.3,",
              "indent": 20
            },
            {
              "lineNumber": 403,
              "content": "purpose: 'analysis',",
              "indent": 20
            },
            {
              "lineNumber": 404,
              "content": "responseFormat: 'json'",
              "indent": 20
            },
            {
              "lineNumber": 405,
              "content": "})",
              "indent": 16
            },
            {
              "lineNumber": 406,
              "content": ");",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 352,
            "distance": 49
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "Failed to analyze character psychologies",
            "fullLength": 40,
            "truncatedContent": "Failed to analyze character psychologies",
            "hash": "c576709f7b4c4141bbb970b83dc56a5f",
            "keywords": [
              "analyze",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "conflict",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [
            "シーン",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "emotionalState",
            "motivations",
            "conflicts",
            "growthPoints",
            "psychologicalProfile",
            "JSON",
            "characterName",
            "const",
            "response",
            "await"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "a2c48ffe909f25492d0fc894bda96199"
      },
      {
        "id": "call_222993c5",
        "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
        "fileName": "character-analysis-service.ts",
        "lineNumber": 464,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 459,
              "content": "\"development\": \"関係の発展についての説明\"",
              "indent": 4
            },
            {
              "lineNumber": 460,
              "content": "}",
              "indent": 2
            },
            {
              "lineNumber": 461,
              "content": "]`;",
              "indent": 0
            },
            {
              "lineNumber": 462,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 463,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 464,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 465,
              "content": "temperature: 0.3,",
              "indent": 20
            },
            {
              "lineNumber": 466,
              "content": "purpose: 'analysis',",
              "indent": 20
            },
            {
              "lineNumber": 467,
              "content": "responseFormat: 'json'",
              "indent": 20
            },
            {
              "lineNumber": 468,
              "content": "})",
              "indent": 16
            },
            {
              "lineNumber": 469,
              "content": ");",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 411,
            "distance": 53
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "Failed to analyze relationship dynamics",
            "fullLength": 39,
            "truncatedContent": "Failed to analyze relationship dynamics",
            "hash": "573a5da98ca232f0ca2caf45e97a9ebb",
            "keywords": [
              "analyze"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [
            "シーン",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "content",
            "substring",
            "JSON",
            "character1",
            "character2",
            "relationshipType",
            "strength",
            "development",
            "const",
            "response"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "a2c48ffe909f25492d0fc894bda96199"
      },
      {
        "id": "call_73ca6c9a",
        "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
        "fileName": "character-analysis-service.ts",
        "lineNumber": 511,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 506,
              "content": "重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：",
              "indent": 0
            },
            {
              "lineNumber": 507,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 508,
              "content": "[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]`;",
              "indent": 0
            },
            {
              "lineNumber": 509,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 510,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 511,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 512,
              "content": "temperature: 0.2,",
              "indent": 20
            },
            {
              "lineNumber": 513,
              "content": "purpose: 'analysis',",
              "indent": 20
            },
            {
              "lineNumber": 514,
              "content": "responseFormat: 'json'",
              "indent": 20
            },
            {
              "lineNumber": 515,
              "content": "})",
              "indent": 16
            },
            {
              "lineNumber": 516,
              "content": ");",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 495,
            "distance": 16
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[",
            "fullLength": 150,
            "truncatedContent": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[",
            "hash": "6e7fdf93795824a03f557aca129aeaa6",
            "keywords": [
              "小説",
              "章",
              "キャラクター",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]",
            "fullLength": 182,
            "truncatedContent": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]",
            "hash": "aafe42113775e5b5cfb322f4b02038ae",
            "keywords": [
              "小説",
              "章",
              "キャラクター",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ");\r\n\r\n            const prompt = `\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]`;\r\n\r\n            const response = await apiThrottler.throttledRequest(() =>\r\n                this.geminiAdapter.generateText(prompt, {\r\n                    temperature: 0.2,\r\n                    purpose: ",
            "fullLength": 421,
            "truncatedContent": ");\r\n\r\n            const prompt = `\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]`;\r\n\r\n            const response = await apiThrottler.throttledRequest(() =>\r\n                this.geminiAdapter.generateText(prompt, {\r\n                    temperature: 0.2,\r\n                    purpose: ",
            "hash": "75ef48161f3b26651494cb75e153ebf9",
            "keywords": [
              "小説",
              "章",
              "キャラクター",
              "character",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ");\r\n\r\n            const prompt = `\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]`;\r\n\r\n            const response = await apiThrottler.throttledRequest(() =>\r\n                this.geminiAdapter.generateText(prompt, {\r\n                    temperature: 0.2,\r\n                    purpose: ",
            "fullLength": 421,
            "truncatedContent": ");\r\n\r\n            const prompt = `\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]`;\r\n\r\n            const response = await apiThrottler.throttledRequest(() =>\r\n                this.geminiAdapter.generateText(prompt, {\r\n                    temperature: 0.2,\r\n                    purpose: ",
            "hash": "75ef48161f3b26651494cb75e153ebf9",
            "keywords": [
              "小説",
              "章",
              "キャラクター",
              "character",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "variable_assignment",
            "variableName": "prompt",
            "content": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[",
            "fullLength": 150,
            "truncatedContent": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[",
            "hash": "6e7fdf93795824a03f557aca129aeaa6"
          },
          {
            "type": "template_literal",
            "content": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]",
            "fullLength": 182,
            "truncatedContent": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]",
            "hash": "aafe42113775e5b5cfb322f4b02038ae",
            "hasVariables": true,
            "variableCount": 2
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.2",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [
            "シーン",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "updatedCharacters",
            "length",
            "return",
            "const",
            "characterNames",
            "map",
            "char",
            "name",
            "join",
            "prompt"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "54e38612037403030ec4454f3d8509f9"
      },
      {
        "id": "call_129ddf5b",
        "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
        "fileName": "character-analysis-service.ts",
        "lineNumber": 89,
        "lineContent": "async analyzeCharacter(",
        "matchedPattern": "(\\w+\\.)?analyzeCharacter\\s*\\(",
        "callMethod": "analyzeCharacter",
        "fullMatch": "analyzeCharacter(",
        "context": {
          "before": [
            {
              "lineNumber": 84,
              "content": "* @param {string} content 章の内容",
              "indent": 5
            },
            {
              "lineNumber": 85,
              "content": "* @param {number} chapterNumber 章番号",
              "indent": 5
            },
            {
              "lineNumber": 86,
              "content": "* @param {GenerationContext} context 生成コンテキスト",
              "indent": 5
            },
            {
              "lineNumber": 87,
              "content": "* @returns {Promise<CharacterAnalysisResult>} キャラクター分析結果",
              "indent": 5
            },
            {
              "lineNumber": 88,
              "content": "*/",
              "indent": 5
            }
          ],
          "current": {
            "lineNumber": 89,
            "content": "async analyzeCharacter(",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 90,
              "content": "content: string,",
              "indent": 8
            },
            {
              "lineNumber": 91,
              "content": "chapterNumber: number,",
              "indent": 8
            },
            {
              "lineNumber": 92,
              "content": "context: GenerationContext",
              "indent": 8
            },
            {
              "lineNumber": 93,
              "content": "): Promise<CharacterAnalysisResult> {",
              "indent": 4
            },
            {
              "lineNumber": 94,
              "content": "const cacheKey = `character-analysis-${chapterNumber}-${content.length}`;",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "constructor",
            "startLine": 75,
            "distance": 14
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "CharacterAnalysis",
            "relatedMethods": [
              "CharacterAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<CharacterAnalysisResult>"
            ],
            "extractedTypes": [
              "CharacterAnalysisResult>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [
            "シーン",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "分析",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "eminiAdapter",
            "geminiAdapter",
            "constructor",
            "private",
            "GeminiAdapter",
            "logger",
            "info",
            "CharacterAnalysisService",
            "initialized",
            "with"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "e72f42b4dcc114758541783b48b7643c"
      },
      {
        "id": "call_9b3d30c4",
        "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
        "fileName": "character-analysis-service.ts",
        "lineNumber": 264,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 259,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 260,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 261,
              "content": "成長が見られないキャラクターは配列に含めないでください。`;",
              "indent": 0
            },
            {
              "lineNumber": 262,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 263,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 264,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 265,
              "content": "temperature: 0.3,",
              "indent": 20
            },
            {
              "lineNumber": 266,
              "content": "purpose: 'analysis',",
              "indent": 20
            },
            {
              "lineNumber": 267,
              "content": "responseFormat: 'json'",
              "indent": 20
            },
            {
              "lineNumber": 268,
              "content": "})",
              "indent": 16
            },
            {
              "lineNumber": 269,
              "content": ");",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 223,
            "distance": 41
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\r\n                })\r\n            );\r\n\r\n            const parsedGrowth = JsonParser.parseFromAIResponse<any[]>(response, []);\r\n\r\n            // 成長が実際にあるキャラクターのみをフィルタリング\r\n            const updatedCharacters = parsedGrowth.filter(char =>\r\n                (char.parameterChanges && char.parameterChanges.length > 0) ||\r\n                (char.skillAcquisitions && char.skillAcquisitions.length > 0) ||\r\n                (char.growthPhase && char.growthPhase !== ",
            "fullLength": 457,
            "truncatedContent": "\r\n                })\r\n            );\r\n\r\n            const parsedGrowth = JsonParser.parseFromAIResponse<any[]>(response, []);\r\n\r\n            // 成長が実際にあるキャラクターのみをフィルタリング\r\n            const updatedCharacters = parsedGrowth.filter(char =>\r\n                (char.parameterChanges && char.parameterChanges.length > 0) ||\r\n                (char.skillAcquisitions && char.skillAcquisitions.length > 0) ||\r\n                (char.growthPhase && char.growthPhase !== ",
            "hash": "fda6797ca4ee2b1b1e32581a022a178d",
            "keywords": [
              "キャラクター",
              "Character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [
            "シーン",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "JSON",
            "character",
            "name",
            "growthPhase",
            "parameterChanges",
            "change",
            "skillAcquisitions",
            "growthDescription",
            "const",
            "response"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "dd21b42f0aa469cf4c28f7566d50eb85"
      },
      {
        "id": "call_ef390022",
        "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
        "fileName": "character-analysis-service.ts",
        "lineNumber": 342,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 337,
              "content": "\"scenes\": [\"シーン1\", \"シーン2\"]",
              "indent": 4
            },
            {
              "lineNumber": 338,
              "content": "}",
              "indent": 2
            },
            {
              "lineNumber": 339,
              "content": "]`;",
              "indent": 0
            },
            {
              "lineNumber": 340,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 341,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 342,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 343,
              "content": "temperature: 0.2,",
              "indent": 20
            },
            {
              "lineNumber": 344,
              "content": "purpose: 'analysis',",
              "indent": 20
            },
            {
              "lineNumber": 345,
              "content": "responseFormat: 'json'",
              "indent": 20
            },
            {
              "lineNumber": 346,
              "content": "})",
              "indent": 16
            },
            {
              "lineNumber": 347,
              "content": ");",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 291,
            "distance": 51
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "Failed to analyze character appearances",
            "fullLength": 39,
            "truncatedContent": "Failed to analyze character appearances",
            "hash": "fab657ba7d641c9ae422fa6998465b8f",
            "keywords": [
              "analyze",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "scene",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "dialogue",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.2",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [
            "シーン",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "JSON",
            "characterName",
            "dialogueCount",
            "significance",
            "actions",
            "emotions",
            "scenes",
            "const",
            "response",
            "await"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "18354624934fded1fd609337b81e65a4"
      },
      {
        "id": "call_8c4a1ae8",
        "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
        "fileName": "character-analysis-service.ts",
        "lineNumber": 401,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 396,
              "content": "\"psychologicalProfile\": \"心理プロファイルの説明\"",
              "indent": 4
            },
            {
              "lineNumber": 397,
              "content": "}",
              "indent": 2
            },
            {
              "lineNumber": 398,
              "content": "]`;",
              "indent": 0
            },
            {
              "lineNumber": 399,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 400,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 401,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 402,
              "content": "temperature: 0.3,",
              "indent": 20
            },
            {
              "lineNumber": 403,
              "content": "purpose: 'analysis',",
              "indent": 20
            },
            {
              "lineNumber": 404,
              "content": "responseFormat: 'json'",
              "indent": 20
            },
            {
              "lineNumber": 405,
              "content": "})",
              "indent": 16
            },
            {
              "lineNumber": 406,
              "content": ");",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 352,
            "distance": 49
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "Failed to analyze character psychologies",
            "fullLength": 40,
            "truncatedContent": "Failed to analyze character psychologies",
            "hash": "c576709f7b4c4141bbb970b83dc56a5f",
            "keywords": [
              "analyze",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "conflict",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [
            "シーン",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "emotionalState",
            "motivations",
            "conflicts",
            "growthPoints",
            "psychologicalProfile",
            "JSON",
            "characterName",
            "const",
            "response",
            "await"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "dd21b42f0aa469cf4c28f7566d50eb85"
      },
      {
        "id": "call_e73439f8",
        "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
        "fileName": "character-analysis-service.ts",
        "lineNumber": 464,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 459,
              "content": "\"development\": \"関係の発展についての説明\"",
              "indent": 4
            },
            {
              "lineNumber": 460,
              "content": "}",
              "indent": 2
            },
            {
              "lineNumber": 461,
              "content": "]`;",
              "indent": 0
            },
            {
              "lineNumber": 462,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 463,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 464,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 465,
              "content": "temperature: 0.3,",
              "indent": 20
            },
            {
              "lineNumber": 466,
              "content": "purpose: 'analysis',",
              "indent": 20
            },
            {
              "lineNumber": 467,
              "content": "responseFormat: 'json'",
              "indent": 20
            },
            {
              "lineNumber": 468,
              "content": "})",
              "indent": 16
            },
            {
              "lineNumber": 469,
              "content": ");",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 411,
            "distance": 53
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "Failed to analyze relationship dynamics",
            "fullLength": 39,
            "truncatedContent": "Failed to analyze relationship dynamics",
            "hash": "573a5da98ca232f0ca2caf45e97a9ebb",
            "keywords": [
              "analyze"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [
            "シーン",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "ent",
            "substring",
            "JSON",
            "character1",
            "character2",
            "relationshipType",
            "strength",
            "development",
            "const",
            "response"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "dd21b42f0aa469cf4c28f7566d50eb85"
      },
      {
        "id": "call_cb07f524",
        "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
        "fileName": "character-analysis-service.ts",
        "lineNumber": 511,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 506,
              "content": "重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：",
              "indent": 0
            },
            {
              "lineNumber": 507,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 508,
              "content": "[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]`;",
              "indent": 0
            },
            {
              "lineNumber": 509,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 510,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 511,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 512,
              "content": "temperature: 0.2,",
              "indent": 20
            },
            {
              "lineNumber": 513,
              "content": "purpose: 'analysis',",
              "indent": 20
            },
            {
              "lineNumber": 514,
              "content": "responseFormat: 'json'",
              "indent": 20
            },
            {
              "lineNumber": 515,
              "content": "})",
              "indent": 16
            },
            {
              "lineNumber": 516,
              "content": ");",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 495,
            "distance": 16
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[",
            "fullLength": 150,
            "truncatedContent": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[",
            "hash": "6e7fdf93795824a03f557aca129aeaa6",
            "keywords": [
              "小説",
              "章",
              "キャラクター",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]",
            "fullLength": 182,
            "truncatedContent": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]",
            "hash": "aafe42113775e5b5cfb322f4b02038ae",
            "keywords": [
              "小説",
              "章",
              "キャラクター",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ");\r\n\r\n            const prompt = `\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]`;\r\n\r\n            const response = await apiThrottler.throttledRequest(() =>\r\n                this.geminiAdapter.generateText(prompt, {\r\n                    temperature: 0.2,\r\n                    purpose: ",
            "fullLength": 421,
            "truncatedContent": ");\r\n\r\n            const prompt = `\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]`;\r\n\r\n            const response = await apiThrottler.throttledRequest(() =>\r\n                this.geminiAdapter.generateText(prompt, {\r\n                    temperature: 0.2,\r\n                    purpose: ",
            "hash": "75ef48161f3b26651494cb75e153ebf9",
            "keywords": [
              "小説",
              "章",
              "キャラクター",
              "character",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ");\r\n\r\n            const prompt = `\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]`;\r\n\r\n            const response = await apiThrottler.throttledRequest(() =>\r\n                this.geminiAdapter.generateText(prompt, {\r\n                    temperature: 0.2,\r\n                    purpose: ",
            "fullLength": 421,
            "truncatedContent": ");\r\n\r\n            const prompt = `\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]`;\r\n\r\n            const response = await apiThrottler.throttledRequest(() =>\r\n                this.geminiAdapter.generateText(prompt, {\r\n                    temperature: 0.2,\r\n                    purpose: ",
            "hash": "75ef48161f3b26651494cb75e153ebf9",
            "keywords": [
              "小説",
              "章",
              "キャラクター",
              "character",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "variable_assignment",
            "variableName": "prompt",
            "content": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[",
            "fullLength": 150,
            "truncatedContent": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[",
            "hash": "6e7fdf93795824a03f557aca129aeaa6"
          },
          {
            "type": "template_literal",
            "content": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]",
            "fullLength": 182,
            "truncatedContent": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]",
            "hash": "aafe42113775e5b5cfb322f4b02038ae",
            "hasVariables": true,
            "variableCount": 2
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.2",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [
            "シーン",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "updatedCharacters",
            "length",
            "return",
            "const",
            "characterNames",
            "map",
            "char",
            "name",
            "join",
            "prompt"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "18354624934fded1fd609337b81e65a4"
      },
      {
        "id": "call_818d1a06",
        "filePath": "src\\lib\\analysis\\services\\character\\interfaces.ts",
        "fileName": "interfaces.ts",
        "lineNumber": 24,
        "lineContent": "analyzeCharacter(characterId: string): Promise<any>;",
        "matchedPattern": "(\\w+\\.)?analyzeCharacter\\s*\\(",
        "callMethod": "analyzeCharacter",
        "fullMatch": "analyzeCharacter(",
        "context": {
          "before": [
            {
              "lineNumber": 19,
              "content": "* キャラクターの現在の状態、変化、関係性を分析します",
              "indent": 3
            },
            {
              "lineNumber": 20,
              "content": "*",
              "indent": 3
            },
            {
              "lineNumber": 21,
              "content": "* @param {string} characterId キャラクターID",
              "indent": 3
            },
            {
              "lineNumber": 22,
              "content": "* @returns {Promise<any>} 分析結果",
              "indent": 3
            },
            {
              "lineNumber": 23,
              "content": "*/",
              "indent": 3
            }
          ],
          "current": {
            "lineNumber": 24,
            "content": "analyzeCharacter(characterId: string): Promise<any>;",
            "indent": 2
          },
          "after": [
            {
              "lineNumber": 25,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 26,
              "content": "/**",
              "indent": 2
            },
            {
              "lineNumber": 27,
              "content": "* キャラクターの心理分析",
              "indent": 3
            },
            {
              "lineNumber": 28,
              "content": "*",
              "indent": 3
            },
            {
              "lineNumber": 29,
              "content": "* @param {string} characterId キャラクターID",
              "indent": 3
            }
          ],
          "functionContext": {
            "functionName": "unknown",
            "startLine": 24,
            "distance": 0
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "ICharacterAnalysis",
            "relatedMethods": [
              "ICharacterAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "interface_definition",
            "name": "ICharacterAnalysisService",
            "content": "interface ICharacterAnalysisService {\r\n  /**\r\n   * キャラクターの総合分析\r\n   * キャラクターの現在の状態、変化、関係性を分析します\r\n   * \r\n   * @param {string}",
            "fullContent": "interface ICharacterAnalysisService {\r\n  /**\r\n   * キャラクターの総合分析\r\n   * キャラクターの現在の状態、変化、関係性を分析します\r\n   * \r\n   * @param {string}",
            "fields": [],
            "novelSpecific": true
          },
          {
            "type": "type_annotation",
            "types": [
              ": Promise<any>",
              ": Promise<CharacterPsychology | null>"
            ],
            "extractedTypes": [
              "any>",
              "CharacterPsychology | null>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [
            "設定"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "Character",
            "CharacterPsychology",
            "ValidationResult",
            "RelationshipResponse",
            "RelationshipAnalysis",
            "from",
            "lib",
            "characters",
            "core",
            "types"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": false,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "5a6067733a627b6e184ca2631103807d"
      },
      {
        "id": "call_4ad1c568",
        "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
        "fileName": "literary-comparison-system.ts",
        "lineNumber": 218,
        "lineContent": "this.geminiClient.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 213,
              "content": ": `章番号: ${chapterNumber}`;",
              "indent": 8
            },
            {
              "lineNumber": 214,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 215,
              "content": "const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);",
              "indent": 6
            },
            {
              "lineNumber": 216,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 217,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 218,
            "content": "this.geminiClient.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 219,
              "content": "temperature: 0.3,",
              "indent": 10
            },
            {
              "lineNumber": 220,
              "content": "purpose: 'selection',",
              "indent": 10
            },
            {
              "lineNumber": 221,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 222,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 223,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 196,
            "distance": 22
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "章番号: ${chapterNumber}",
            "fullLength": 21,
            "truncatedContent": "章番号: ${chapterNumber}",
            "hash": "a0bc1771193a38f54fc3a20d79cf63f7",
            "keywords": [
              "章",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ")\r\n        : `章番号: ${chapterNumber}`;\r\n\r\n      const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);\r\n\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiClient.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: ",
            "fullLength": 290,
            "truncatedContent": ")\r\n        : `章番号: ${chapterNumber}`;\r\n\r\n      const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);\r\n\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiClient.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: ",
            "hash": "930f774d0f29d9500d67bcea6c3f198c",
            "keywords": [
              "章",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ")\r\n        : `章番号: ${chapterNumber}`;\r\n\r\n      const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);\r\n\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiClient.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: ",
            "fullLength": 290,
            "truncatedContent": ")\r\n        : `章番号: ${chapterNumber}`;\r\n\r\n      const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);\r\n\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiClient.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: ",
            "hash": "930f774d0f29d9500d67bcea6c3f198c",
            "keywords": [
              "章",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildSelectionPrompt",
            "relatedMethods": [
              "buildSelectionPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<LiteraryGuideline[]>"
            ],
            "extractedTypes": [
              "LiteraryGuideline[]>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [
            "シーン",
            "設定",
            "plot",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "ivate",
            "async",
            "selectGuidelinesWithAI",
            "availableGuidelines",
            "LiteraryGuideline",
            "contexts",
            "CollectedContext",
            "chapterNumber",
            "number",
            "Promise"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "99e23080571769f0e9f13364b53473e9"
      },
      {
        "id": "call_4ad1c568",
        "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
        "fileName": "literary-comparison-system.ts",
        "lineNumber": 218,
        "lineContent": "this.geminiClient.generateText(prompt, {",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 213,
              "content": ": `章番号: ${chapterNumber}`;",
              "indent": 8
            },
            {
              "lineNumber": 214,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 215,
              "content": "const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);",
              "indent": 6
            },
            {
              "lineNumber": 216,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 217,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 218,
            "content": "this.geminiClient.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 219,
              "content": "temperature: 0.3,",
              "indent": 10
            },
            {
              "lineNumber": 220,
              "content": "purpose: 'selection',",
              "indent": 10
            },
            {
              "lineNumber": 221,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 222,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 223,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 196,
            "distance": 22
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "章番号: ${chapterNumber}",
            "fullLength": 21,
            "truncatedContent": "章番号: ${chapterNumber}",
            "hash": "a0bc1771193a38f54fc3a20d79cf63f7",
            "keywords": [
              "章",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ")\r\n        : `章番号: ${chapterNumber}`;\r\n\r\n      const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);\r\n\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiClient.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: ",
            "fullLength": 290,
            "truncatedContent": ")\r\n        : `章番号: ${chapterNumber}`;\r\n\r\n      const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);\r\n\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiClient.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: ",
            "hash": "930f774d0f29d9500d67bcea6c3f198c",
            "keywords": [
              "章",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ")\r\n        : `章番号: ${chapterNumber}`;\r\n\r\n      const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);\r\n\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiClient.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: ",
            "fullLength": 290,
            "truncatedContent": ")\r\n        : `章番号: ${chapterNumber}`;\r\n\r\n      const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);\r\n\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiClient.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: ",
            "hash": "930f774d0f29d9500d67bcea6c3f198c",
            "keywords": [
              "章",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildSelectionPrompt",
            "relatedMethods": [
              "buildSelectionPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<LiteraryGuideline[]>"
            ],
            "extractedTypes": [
              "LiteraryGuideline[]>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [
            "シーン",
            "設定",
            "plot",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "ivate",
            "async",
            "selectGuidelinesWithAI",
            "availableGuidelines",
            "LiteraryGuideline",
            "contexts",
            "CollectedContext",
            "chapterNumber",
            "number",
            "Promise"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "99e23080571769f0e9f13364b53473e9"
      },
      {
        "id": "call_fbfd72f9",
        "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
        "fileName": "literary-comparison-system.ts",
        "lineNumber": 218,
        "lineContent": "this.geminiClient.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 213,
              "content": ": `章番号: ${chapterNumber}`;",
              "indent": 8
            },
            {
              "lineNumber": 214,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 215,
              "content": "const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);",
              "indent": 6
            },
            {
              "lineNumber": 216,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 217,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 218,
            "content": "this.geminiClient.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 219,
              "content": "temperature: 0.3,",
              "indent": 10
            },
            {
              "lineNumber": 220,
              "content": "purpose: 'selection',",
              "indent": 10
            },
            {
              "lineNumber": 221,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 222,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 223,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 196,
            "distance": 22
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "章番号: ${chapterNumber}",
            "fullLength": 21,
            "truncatedContent": "章番号: ${chapterNumber}",
            "hash": "a0bc1771193a38f54fc3a20d79cf63f7",
            "keywords": [
              "章",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ")\r\n        : `章番号: ${chapterNumber}`;\r\n\r\n      const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);\r\n\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiClient.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: ",
            "fullLength": 290,
            "truncatedContent": ")\r\n        : `章番号: ${chapterNumber}`;\r\n\r\n      const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);\r\n\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiClient.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: ",
            "hash": "930f774d0f29d9500d67bcea6c3f198c",
            "keywords": [
              "章",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ")\r\n        : `章番号: ${chapterNumber}`;\r\n\r\n      const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);\r\n\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiClient.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: ",
            "fullLength": 290,
            "truncatedContent": ")\r\n        : `章番号: ${chapterNumber}`;\r\n\r\n      const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);\r\n\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiClient.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: ",
            "hash": "930f774d0f29d9500d67bcea6c3f198c",
            "keywords": [
              "章",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildSelectionPrompt",
            "relatedMethods": [
              "buildSelectionPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<LiteraryGuideline[]>"
            ],
            "extractedTypes": [
              "LiteraryGuideline[]>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [
            "シーン",
            "設定",
            "plot",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "selectGuidelinesWithAI",
            "availableGuidelines",
            "LiteraryGuideline",
            "contexts",
            "CollectedContext",
            "chapterNumber",
            "number",
            "Promise",
            "try",
            "const"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "cbc70554f9d9d9a77d2c89a5a91f470d"
      },
      {
        "id": "call_1ed727cf",
        "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
        "fileName": "scene-structure-optimizer.ts",
        "lineNumber": 452,
        "lineContent": "const response = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 447,
              "content": "// システムパラメータから適切な長さを取得",
              "indent": 6
            },
            {
              "lineNumber": 448,
              "content": "const parameters = parameterManager.getParameters();",
              "indent": 6
            },
            {
              "lineNumber": 449,
              "content": "const targetLength = 800; // デフォルト値",
              "indent": 6
            },
            {
              "lineNumber": 450,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 451,
              "content": "// AIクライアントでシーン構成の推奨を生成",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 452,
            "content": "const response = await this.geminiClient.generateText(prompt, {",
            "indent": 6
          },
          "after": [
            {
              "lineNumber": 453,
              "content": "temperature: 0.7,",
              "indent": 8
            },
            {
              "lineNumber": 454,
              "content": "targetLength: targetLength",
              "indent": 8
            },
            {
              "lineNumber": 455,
              "content": "});",
              "indent": 6
            },
            {
              "lineNumber": 456,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 457,
              "content": "// レスポンスを整形",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "actualRatio",
            "startLine": 378,
            "distance": 74
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
            "fullLength": 602,
            "truncatedContent": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
            "hash": "e5308eae8a37807f36a1ec49e852dc69",
            "keywords": [
              "シーン",
              "生成",
              "generate",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
            "fullLength": 602,
            "truncatedContent": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
            "hash": "e5308eae8a37807f36a1ec49e852dc69",
            "keywords": [
              "シーン",
              "生成",
              "generate",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
            "fullLength": 602,
            "truncatedContent": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
            "hash": "e5308eae8a37807f36a1ec49e852dc69",
            "keywords": [
              "シーン",
              "生成",
              "generate",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
            "fullLength": 602,
            "truncatedContent": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
            "hash": "e5308eae8a37807f36a1ec49e852dc69",
            "hasVariables": false,
            "variableCount": 0
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.7",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF",
            "アクション"
          ],
          "storyElements": [
            "シーン",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "lengthDistribution",
            "max",
            "analysis",
            "avg",
            "toFixed",
            "stdDev",
            "paceVariation",
            "const",
            "parameters",
            "parameterManager"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "52cfec5e66d9cfcc28609c004a9d1b99"
      },
      {
        "id": "call_1ed727cf",
        "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
        "fileName": "scene-structure-optimizer.ts",
        "lineNumber": 452,
        "lineContent": "const response = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 447,
              "content": "// システムパラメータから適切な長さを取得",
              "indent": 6
            },
            {
              "lineNumber": 448,
              "content": "const parameters = parameterManager.getParameters();",
              "indent": 6
            },
            {
              "lineNumber": 449,
              "content": "const targetLength = 800; // デフォルト値",
              "indent": 6
            },
            {
              "lineNumber": 450,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 451,
              "content": "// AIクライアントでシーン構成の推奨を生成",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 452,
            "content": "const response = await this.geminiClient.generateText(prompt, {",
            "indent": 6
          },
          "after": [
            {
              "lineNumber": 453,
              "content": "temperature: 0.7,",
              "indent": 8
            },
            {
              "lineNumber": 454,
              "content": "targetLength: targetLength",
              "indent": 8
            },
            {
              "lineNumber": 455,
              "content": "});",
              "indent": 6
            },
            {
              "lineNumber": 456,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 457,
              "content": "// レスポンスを整形",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "actualRatio",
            "startLine": 378,
            "distance": 74
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
            "fullLength": 602,
            "truncatedContent": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
            "hash": "e5308eae8a37807f36a1ec49e852dc69",
            "keywords": [
              "シーン",
              "生成",
              "generate",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
            "fullLength": 602,
            "truncatedContent": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
            "hash": "e5308eae8a37807f36a1ec49e852dc69",
            "keywords": [
              "シーン",
              "生成",
              "generate",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
            "fullLength": 602,
            "truncatedContent": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
            "hash": "e5308eae8a37807f36a1ec49e852dc69",
            "keywords": [
              "シーン",
              "生成",
              "generate",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
            "fullLength": 602,
            "truncatedContent": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
            "hash": "e5308eae8a37807f36a1ec49e852dc69",
            "hasVariables": false,
            "variableCount": 0
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.7",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF",
            "アクション"
          ],
          "storyElements": [
            "シーン",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "lengthDistribution",
            "max",
            "analysis",
            "avg",
            "toFixed",
            "stdDev",
            "paceVariation",
            "const",
            "parameters",
            "parameterManager"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "52cfec5e66d9cfcc28609c004a9d1b99"
      },
      {
        "id": "call_3cd296f3",
        "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
        "fileName": "scene-structure-optimizer.ts",
        "lineNumber": 452,
        "lineContent": "const response = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 447,
              "content": "// システムパラメータから適切な長さを取得",
              "indent": 6
            },
            {
              "lineNumber": 448,
              "content": "const parameters = parameterManager.getParameters();",
              "indent": 6
            },
            {
              "lineNumber": 449,
              "content": "const targetLength = 800; // デフォルト値",
              "indent": 6
            },
            {
              "lineNumber": 450,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 451,
              "content": "// AIクライアントでシーン構成の推奨を生成",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 452,
            "content": "const response = await this.geminiClient.generateText(prompt, {",
            "indent": 6
          },
          "after": [
            {
              "lineNumber": 453,
              "content": "temperature: 0.7,",
              "indent": 8
            },
            {
              "lineNumber": 454,
              "content": "targetLength: targetLength",
              "indent": 8
            },
            {
              "lineNumber": 455,
              "content": "});",
              "indent": 6
            },
            {
              "lineNumber": 456,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 457,
              "content": "// レスポンスを整形",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "actualRatio",
            "startLine": 378,
            "distance": 74
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
            "fullLength": 602,
            "truncatedContent": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
            "hash": "e5308eae8a37807f36a1ec49e852dc69",
            "keywords": [
              "シーン",
              "生成",
              "generate",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
            "fullLength": 602,
            "truncatedContent": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
            "hash": "e5308eae8a37807f36a1ec49e852dc69",
            "keywords": [
              "シーン",
              "生成",
              "generate",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
            "fullLength": 602,
            "truncatedContent": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
            "hash": "e5308eae8a37807f36a1ec49e852dc69",
            "keywords": [
              "シーン",
              "生成",
              "generate",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
            "fullLength": 602,
            "truncatedContent": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
            "hash": "e5308eae8a37807f36a1ec49e852dc69",
            "hasVariables": false,
            "variableCount": 0
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.7",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF",
            "アクション"
          ],
          "storyElements": [
            "シーン",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "ribution",
            "max",
            "analysis",
            "lengthDistribution",
            "avg",
            "toFixed",
            "stdDev",
            "paceVariation",
            "const",
            "parameters"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "76e2539f1dc3d1bd63e2353eb3bf5bdf"
      },
      {
        "id": "call_a757ae0b",
        "filePath": "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts",
        "fileName": "reader-experience-analysis-service.ts",
        "lineNumber": 111,
        "lineContent": "this.geminiClient.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 106,
              "content": "\"strengths\": [\"強み1\", \"強み2\"]",
              "indent": 2
            },
            {
              "lineNumber": 107,
              "content": "}`;",
              "indent": 0
            },
            {
              "lineNumber": 108,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 109,
              "content": "// API呼び出し（スロットリング対応）",
              "indent": 6
            },
            {
              "lineNumber": 110,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 111,
            "content": "this.geminiClient.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 112,
              "content": "temperature: 0.3,",
              "indent": 10
            },
            {
              "lineNumber": 113,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 114,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 115,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 116,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "constructor",
            "startLine": 54,
            "distance": 57
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "defaultAnalysis",
            "relatedMethods": [
              "defaultAnalysis",
              "ReaderExperienceAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": ReaderExperienceAnalysis"
            ],
            "extractedTypes": [
              "ReaderExperienceAnalysis"
            ]
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "ミステリー",
            "ロマンス",
            "アクション",
            "fantasy",
            "mystery",
            "romance"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "世界観",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "JSON",
            "interestRetention",
            "empathy",
            "clarity",
            "unexpectedness",
            "anticipation",
            "overallScore",
            "weakPoints",
            "point",
            "suggestion"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "30bc41cfd969a617572057474600c1e1"
      },
      {
        "id": "call_a757ae0b",
        "filePath": "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts",
        "fileName": "reader-experience-analysis-service.ts",
        "lineNumber": 111,
        "lineContent": "this.geminiClient.generateText(prompt, {",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 106,
              "content": "\"strengths\": [\"強み1\", \"強み2\"]",
              "indent": 2
            },
            {
              "lineNumber": 107,
              "content": "}`;",
              "indent": 0
            },
            {
              "lineNumber": 108,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 109,
              "content": "// API呼び出し（スロットリング対応）",
              "indent": 6
            },
            {
              "lineNumber": 110,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 111,
            "content": "this.geminiClient.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 112,
              "content": "temperature: 0.3,",
              "indent": 10
            },
            {
              "lineNumber": 113,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 114,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 115,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 116,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "constructor",
            "startLine": 54,
            "distance": 57
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "defaultAnalysis",
            "relatedMethods": [
              "defaultAnalysis",
              "ReaderExperienceAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": ReaderExperienceAnalysis"
            ],
            "extractedTypes": [
              "ReaderExperienceAnalysis"
            ]
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "ミステリー",
            "ロマンス",
            "アクション",
            "fantasy",
            "mystery",
            "romance"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "世界観",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "JSON",
            "interestRetention",
            "empathy",
            "clarity",
            "unexpectedness",
            "anticipation",
            "overallScore",
            "weakPoints",
            "point",
            "suggestion"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "30bc41cfd969a617572057474600c1e1"
      },
      {
        "id": "call_821ffddd",
        "filePath": "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts",
        "fileName": "reader-experience-analysis-service.ts",
        "lineNumber": 111,
        "lineContent": "this.geminiClient.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 106,
              "content": "\"strengths\": [\"強み1\", \"強み2\"]",
              "indent": 2
            },
            {
              "lineNumber": 107,
              "content": "}`;",
              "indent": 0
            },
            {
              "lineNumber": 108,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 109,
              "content": "// API呼び出し（スロットリング対応）",
              "indent": 6
            },
            {
              "lineNumber": 110,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 111,
            "content": "this.geminiClient.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 112,
              "content": "temperature: 0.3,",
              "indent": 10
            },
            {
              "lineNumber": 113,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 114,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 115,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 116,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "constructor",
            "startLine": 54,
            "distance": 57
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "defaultAnalysis",
            "relatedMethods": [
              "defaultAnalysis",
              "ReaderExperienceAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": ReaderExperienceAnalysis"
            ],
            "extractedTypes": [
              "ReaderExperienceAnalysis"
            ]
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "ミステリー",
            "ロマンス",
            "アクション",
            "fantasy",
            "mystery",
            "romance"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "世界観",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "JSON",
            "interestRetention",
            "empathy",
            "clarity",
            "unexpectedness",
            "anticipation",
            "overallScore",
            "weakPoints",
            "point",
            "suggestion"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "f05431290640c74783dbd444cc5fd9f4"
      },
      {
        "id": "call_0225a6e2",
        "filePath": "src\\lib\\analysis\\services\\style\\interfaces.ts",
        "fileName": "interfaces.ts",
        "lineNumber": 53,
        "lineContent": "analyzeStyle(content: string): Promise<StyleAnalysis>;",
        "matchedPattern": "(\\w+\\.)?analyzeStyle\\s*\\(",
        "callMethod": "analyzeStyle",
        "fullMatch": "analyzeStyle(",
        "context": {
          "before": [
            {
              "lineNumber": 48,
              "content": "* テキストの文体特性を分析します",
              "indent": 3
            },
            {
              "lineNumber": 49,
              "content": "*",
              "indent": 3
            },
            {
              "lineNumber": 50,
              "content": "* @param content テキスト内容",
              "indent": 3
            },
            {
              "lineNumber": 51,
              "content": "* @returns 文体分析結果",
              "indent": 3
            },
            {
              "lineNumber": 52,
              "content": "*/",
              "indent": 3
            }
          ],
          "current": {
            "lineNumber": 53,
            "content": "analyzeStyle(content: string): Promise<StyleAnalysis>;",
            "indent": 2
          },
          "after": [
            {
              "lineNumber": 54,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 55,
              "content": "/**",
              "indent": 2
            },
            {
              "lineNumber": 56,
              "content": "* 表現パターン分析",
              "indent": 3
            },
            {
              "lineNumber": 57,
              "content": "* テキストの表現パターンを分析します",
              "indent": 3
            },
            {
              "lineNumber": 58,
              "content": "*",
              "indent": 3
            }
          ],
          "functionContext": {
            "functionName": "unknown",
            "startLine": 53,
            "distance": 0
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "IStyleAnalysis",
            "relatedMethods": [
              "IStyleAnalysis",
              "StyleAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<void>",
              ": Promise<StyleAnalysis>",
              ": Promise<ExpressionPatterns>"
            ],
            "extractedTypes": [
              "void>",
              "StyleAnalysis>",
              "ExpressionPatterns>"
            ]
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "ons",
            "string",
            "export",
            "interface",
            "RepeatedSubjectPattern",
            "subject",
            "count",
            "number",
            "startIndex",
            "endIndex"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": false,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "5ce61f5a7edab1019f4e38b691efa343"
      },
      {
        "id": "call_7535f0a1",
        "filePath": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
        "fileName": "style-analysis-service.ts",
        "lineNumber": 539,
        "lineContent": "this.geminiAdapter.generateContent(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateContent\\s*\\(",
        "callMethod": "generateContent",
        "fullMatch": "geminiAdapter.generateContent(",
        "context": {
          "before": [
            {
              "lineNumber": 534,
              "content": "[\"表現1\", \"表現2\", \"表現3\", ...]",
              "indent": 0
            },
            {
              "lineNumber": 535,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 536,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 537,
              "content": "// APIスロットリングを使用して制御されたリクエストを実行",
              "indent": 6
            },
            {
              "lineNumber": 538,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 539,
            "content": "this.geminiAdapter.generateContent(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 540,
              "content": "temperature: 0.1,",
              "indent": 10
            },
            {
              "lineNumber": 541,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 542,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 543,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 544,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 498,
            "distance": 41
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "StyleAnalysis",
            "relatedMethods": [
              "StyleAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "response_structure",
            "fields": [
              "substring"
            ],
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [],
          "characterElements": [
            "キャラクター"
          ],
          "narrativeStyle": "first_person"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "content",
            "const",
            "prompt",
            "truncatedContent",
            "JSON",
            "API",
            "response",
            "await",
            "apiThrottler",
            "throttledRequest"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "6cc07822e1f14b86fe7b0910a035f117"
      },
      {
        "id": "call_79363298",
        "filePath": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
        "fileName": "style-analysis-service.ts",
        "lineNumber": 787,
        "lineContent": "this.geminiAdapter.generateContent(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateContent\\s*\\(",
        "callMethod": "generateContent",
        "fullMatch": "geminiAdapter.generateContent(",
        "context": {
          "before": [
            {
              "lineNumber": 782,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 783,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 784,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 785,
              "content": "// APIスロットリングを使用してAI分析を実行",
              "indent": 6
            },
            {
              "lineNumber": 786,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 787,
            "content": "this.geminiAdapter.generateContent(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 788,
              "content": "temperature: 0.1,",
              "indent": 10
            },
            {
              "lineNumber": 789,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 790,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 791,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 792,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 735,
            "distance": 52
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "StyleAnalysis",
            "relatedMethods": [
              "StyleAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [],
          "characterElements": [
            "キャラクター"
          ],
          "narrativeStyle": "first_person"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "truncatedContent",
            "JSON",
            "avgSentenceLength",
            "sentenceVariety",
            "vocabularyRichness",
            "narrativeVoice",
            "tenseConsistency",
            "sentimentBalance",
            "API",
            "const"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "8ac893f9e18fb1c5b1ea506708def46b"
      },
      {
        "id": "call_d213a88b",
        "filePath": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
        "fileName": "style-analysis-service.ts",
        "lineNumber": 863,
        "lineContent": "this.geminiAdapter.generateContent(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateContent\\s*\\(",
        "callMethod": "generateContent",
        "fullMatch": "geminiAdapter.generateContent(",
        "context": {
          "before": [
            {
              "lineNumber": 858,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 859,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 860,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 861,
              "content": "// APIスロットリングを使用してAI分析を実行",
              "indent": 6
            },
            {
              "lineNumber": 862,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 863,
            "content": "this.geminiAdapter.generateContent(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 864,
              "content": "temperature: 0.1,",
              "indent": 10
            },
            {
              "lineNumber": 865,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 866,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 867,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 868,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 802,
            "distance": 61
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "dialogue",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [],
          "characterElements": [
            "キャラクター"
          ],
          "narrativeStyle": "first_person"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "xpression",
            "frequency",
            "adjectivalExpressions",
            "expression",
            "dialoguePatterns",
            "conjunctions",
            "sentenceStructures",
            "API",
            "const",
            "response"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "8ac893f9e18fb1c5b1ea506708def46b"
      },
      {
        "id": "call_21d614e0",
        "filePath": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
        "fileName": "style-analysis-service.ts",
        "lineNumber": 103,
        "lineContent": "async analyzeStyle(content: string): Promise<StyleAnalysis> {",
        "matchedPattern": "(\\w+\\.)?analyzeStyle\\s*\\(",
        "callMethod": "analyzeStyle",
        "fullMatch": "analyzeStyle(",
        "context": {
          "before": [
            {
              "lineNumber": 98,
              "content": "* テキストの文体特性を分析します",
              "indent": 3
            },
            {
              "lineNumber": 99,
              "content": "*",
              "indent": 3
            },
            {
              "lineNumber": 100,
              "content": "* @param content テキスト内容",
              "indent": 3
            },
            {
              "lineNumber": 101,
              "content": "* @returns 文体分析結果",
              "indent": 3
            },
            {
              "lineNumber": 102,
              "content": "*/",
              "indent": 3
            }
          ],
          "current": {
            "lineNumber": 103,
            "content": "async analyzeStyle(content: string): Promise<StyleAnalysis> {",
            "indent": 2
          },
          "after": [
            {
              "lineNumber": 104,
              "content": "await this.ensureInitialized();",
              "indent": 4
            },
            {
              "lineNumber": 105,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 106,
              "content": "try {",
              "indent": 4
            },
            {
              "lineNumber": 107,
              "content": "// キャッシュキーの生成（テキスト内容のハッシュ）",
              "indent": 6
            },
            {
              "lineNumber": 108,
              "content": "const cacheKey = `style_analysis_${this.hashContent(content)}`;",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 87,
            "distance": 16
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ", {\r\n        error: error instanceof Error ? error.message : String(error)\r\n      });\r\n      // 初期化エラーでも続行可能に\r\n      this.initialized = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 文体分析\r\n   * テキストの文体特性を分析します\r\n   * \r\n   * @param content テキスト内容\r\n   * @returns 文体分析結果\r\n   */\r\n  async analyzeStyle(content: string): Promise<StyleAnalysis> {\r\n    await this.ensureInitialized();\r\n\r\n    try {\r\n      // キャッシュキーの生成（テキスト内容のハッシュ）\r\n      const cacheKey = `style_analysis_${this.hashContent(content)}`;\r\n\r\n      // 統一キャッシュから取得\r\n      const cachedResult = this.cache.get<StyleAnalysis>(cacheKey);\r\n      if (cachedResult) {\r\n        logger.debug(",
            "fullLength": 622,
            "truncatedContent": ", {\r\n        error: error instanceof Error ? error.message : String(error)\r\n      });\r\n      // 初期化エラーでも続行可能に\r\n      this.initialized = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 文体分析\r\n   * テキストの文体特性を分析します\r\n   * \r\n   * @param content テキスト内容\r\n   * @returns 文体分析結果\r\n   */\r\n  async analyzeStyle(content: string): Promise<StyleAnalysis> {\r\n    await this.ensureInitialized();\r\n\r\n    try {\r\n      // キャッシュキーの生成（テキスト内容のハッシュ）\r\n      const cacheKey = `style_analysis_${this.hashContent(content)}`;\r\n\r\n      // 統一キャッシュから取得\r\n      const cachedResult = this.cache.get<StyleAnalysis>(cacheKey);\r\n      if (cachedResult) {\r\n        logger.debug(",
            "hash": "b394f40a5a372fa8e323aa1b93117160",
            "keywords": [
              "分析",
              "生成",
              "analyze"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "StyleAnalysisService: 文体分析を実行",
            "fullLength": 29,
            "truncatedContent": "StyleAnalysisService: 文体分析を実行",
            "hash": "1592b381dcb56bed38822f84ea0391cb",
            "keywords": [
              "分析"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", {\r\n        error: error instanceof Error ? error.message : String(error)\r\n      });\r\n      // 初期化エラーでも続行可能に\r\n      this.initialized = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 文体分析\r\n   * テキストの文体特性を分析します\r\n   * \r\n   * @param content テキスト内容\r\n   * @returns 文体分析結果\r\n   */\r\n  async analyzeStyle(content: string): Promise<StyleAnalysis> {\r\n    await this.ensureInitialized();\r\n\r\n    try {\r\n      // キャッシュキーの生成（テキスト内容のハッシュ）\r\n      const cacheKey = `style_analysis_${this.hashContent(content)}`;\r\n\r\n      // 統一キャッシュから取得\r\n      const cachedResult = this.cache.get<StyleAnalysis>(cacheKey);\r\n      if (cachedResult) {\r\n        logger.debug(",
            "fullLength": 622,
            "truncatedContent": ", {\r\n        error: error instanceof Error ? error.message : String(error)\r\n      });\r\n      // 初期化エラーでも続行可能に\r\n      this.initialized = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 文体分析\r\n   * テキストの文体特性を分析します\r\n   * \r\n   * @param content テキスト内容\r\n   * @returns 文体分析結果\r\n   */\r\n  async analyzeStyle(content: string): Promise<StyleAnalysis> {\r\n    await this.ensureInitialized();\r\n\r\n    try {\r\n      // キャッシュキーの生成（テキスト内容のハッシュ）\r\n      const cacheKey = `style_analysis_${this.hashContent(content)}`;\r\n\r\n      // 統一キャッシュから取得\r\n      const cachedResult = this.cache.get<StyleAnalysis>(cacheKey);\r\n      if (cachedResult) {\r\n        logger.debug(",
            "hash": "b394f40a5a372fa8e323aa1b93117160",
            "keywords": [
              "分析",
              "生成",
              "analyze"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "StyleAnalysis",
            "relatedMethods": [
              "StyleAnalysis",
              "style_analysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<StyleAnalysis>"
            ],
            "extractedTypes": [
              "StyleAnalysis>"
            ]
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [],
          "characterElements": [
            "キャラクター"
          ],
          "narrativeStyle": "first_person"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "分析",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "try",
            "logger",
            "info",
            "StyleAnalysisService",
            "this",
            "initialized",
            "true",
            "catch",
            "error",
            "instanceof"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "c80d31ec22c1f0a8280bb14e6caafe50"
      },
      {
        "id": "call_5af47d39",
        "filePath": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
        "fileName": "style-analysis-service.ts",
        "lineNumber": 539,
        "lineContent": "this.geminiAdapter.generateContent(prompt, {",
        "matchedPattern": "\\.generateContent\\s*\\(",
        "callMethod": "generateContent",
        "fullMatch": ".generateContent(",
        "context": {
          "before": [
            {
              "lineNumber": 534,
              "content": "[\"表現1\", \"表現2\", \"表現3\", ...]",
              "indent": 0
            },
            {
              "lineNumber": 535,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 536,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 537,
              "content": "// APIスロットリングを使用して制御されたリクエストを実行",
              "indent": 6
            },
            {
              "lineNumber": 538,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 539,
            "content": "this.geminiAdapter.generateContent(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 540,
              "content": "temperature: 0.1,",
              "indent": 10
            },
            {
              "lineNumber": 541,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 542,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 543,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 544,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 498,
            "distance": 41
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "StyleAnalysis",
            "relatedMethods": [
              "StyleAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "response_structure",
            "fields": [
              "substring"
            ],
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [],
          "characterElements": [
            "キャラクター"
          ],
          "narrativeStyle": "first_person"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "content",
            "const",
            "prompt",
            "truncatedContent",
            "JSON",
            "API",
            "response",
            "await",
            "apiThrottler",
            "throttledRequest"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "6c94f6f7b6dc8f1cf09e39d26275b8ec"
      },
      {
        "id": "call_f89b139e",
        "filePath": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
        "fileName": "style-analysis-service.ts",
        "lineNumber": 787,
        "lineContent": "this.geminiAdapter.generateContent(prompt, {",
        "matchedPattern": "\\.generateContent\\s*\\(",
        "callMethod": "generateContent",
        "fullMatch": ".generateContent(",
        "context": {
          "before": [
            {
              "lineNumber": 782,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 783,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 784,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 785,
              "content": "// APIスロットリングを使用してAI分析を実行",
              "indent": 6
            },
            {
              "lineNumber": 786,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 787,
            "content": "this.geminiAdapter.generateContent(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 788,
              "content": "temperature: 0.1,",
              "indent": 10
            },
            {
              "lineNumber": 789,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 790,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 791,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 792,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 735,
            "distance": 52
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "StyleAnalysis",
            "relatedMethods": [
              "StyleAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [],
          "characterElements": [
            "キャラクター"
          ],
          "narrativeStyle": "first_person"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "truncatedContent",
            "JSON",
            "avgSentenceLength",
            "sentenceVariety",
            "vocabularyRichness",
            "narrativeVoice",
            "tenseConsistency",
            "sentimentBalance",
            "API",
            "const"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "dfa02393263e8c436a4ce9f332412a04"
      },
      {
        "id": "call_ab66f212",
        "filePath": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
        "fileName": "style-analysis-service.ts",
        "lineNumber": 863,
        "lineContent": "this.geminiAdapter.generateContent(prompt, {",
        "matchedPattern": "\\.generateContent\\s*\\(",
        "callMethod": "generateContent",
        "fullMatch": ".generateContent(",
        "context": {
          "before": [
            {
              "lineNumber": 858,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 859,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 860,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 861,
              "content": "// APIスロットリングを使用してAI分析を実行",
              "indent": 6
            },
            {
              "lineNumber": 862,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 863,
            "content": "this.geminiAdapter.generateContent(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 864,
              "content": "temperature: 0.1,",
              "indent": 10
            },
            {
              "lineNumber": 865,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 866,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 867,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 868,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 802,
            "distance": 61
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "dialogue",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [],
          "characterElements": [
            "キャラクター"
          ],
          "narrativeStyle": "first_person"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "frequency",
            "adjectivalExpressions",
            "expression",
            "dialoguePatterns",
            "conjunctions",
            "sentenceStructures",
            "API",
            "const",
            "response",
            "await"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "dfa02393263e8c436a4ce9f332412a04"
      },
      {
        "id": "call_d3d90909",
        "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "fileName": "theme-analysis-service.ts",
        "lineNumber": 167,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 162,
              "content": "// 分析用プロンプトを構築（記憶システムからの情報を活用）",
              "indent": 6
            },
            {
              "lineNumber": 163,
              "content": "const prompt = this.buildThemeAnalysisPrompt(content, effectiveThemes, memoryContext.data);",
              "indent": 6
            },
            {
              "lineNumber": 164,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 165,
              "content": "// APIスロットリングを利用してリクエスト",
              "indent": 6
            },
            {
              "lineNumber": 166,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 167,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 168,
              "content": "temperature: 0.3,",
              "indent": 10
            },
            {
              "lineNumber": 169,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 170,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 171,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 172,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 146,
            "distance": 21
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "テーマ分析 ${effectiveThemes.join(' ')}",
            "fullLength": 34,
            "truncatedContent": "テーマ分析 ${effectiveThemes.join(' ')}",
            "hash": "e27823414367e0be89ef5c93a35732c0",
            "keywords": [
              "分析"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "];\n\n      // 統合記憶システムから関連情報を取得\n      const memoryContext = await this.safeMemoryOperation(\n        () => this.performUnifiedMemorySearch(`テーマ分析 ${effectiveThemes.join(",
            "fullLength": 167,
            "truncatedContent": "];\n\n      // 統合記憶システムから関連情報を取得\n      const memoryContext = await this.safeMemoryOperation(\n        () => this.performUnifiedMemorySearch(`テーマ分析 ${effectiveThemes.join(",
            "hash": "554a7647bf34167b4903891809a8a825",
            "keywords": [
              "分析"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n      );\n\n      // 分析用プロンプトを構築（記憶システムからの情報を活用）\n      const prompt = this.buildThemeAnalysisPrompt(content, effectiveThemes, memoryContext.data);\n\n      // APIスロットリングを利用してリクエスト\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: ",
            "fullLength": 339,
            "truncatedContent": "\n      );\n\n      // 分析用プロンプトを構築（記憶システムからの情報を活用）\n      const prompt = this.buildThemeAnalysisPrompt(content, effectiveThemes, memoryContext.data);\n\n      // APIスロットリングを利用してリクエスト\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: ",
            "hash": "c5236be0e3ae42c31728fbd1ed9016d6",
            "keywords": [
              "分析",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n      );\n\n      // 分析用プロンプトを構築（記憶システムからの情報を活用）\n      const prompt = this.buildThemeAnalysisPrompt(content, effectiveThemes, memoryContext.data);\n\n      // APIスロットリングを利用してリクエスト\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: ",
            "fullLength": 339,
            "truncatedContent": "\n      );\n\n      // 分析用プロンプトを構築（記憶システムからの情報を活用）\n      const prompt = this.buildThemeAnalysisPrompt(content, effectiveThemes, memoryContext.data);\n\n      // APIスロットリングを利用してリクエスト\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: ",
            "hash": "c5236be0e3ae42c31728fbd1ed9016d6",
            "keywords": [
              "分析",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "getThemeAnalysis",
            "relatedMethods": [
              "getThemeAnalysis",
              "buildThemeAnalysisPrompt",
              "defaultAnalysis",
              "createFallbackAnalysis",
              "ThemeResonanceAnalysis",
              "validatedAnalysis",
              "validateAndEnhanceAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "構築",
            "generate",
            "create",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "const",
            "memoryContext",
            "await",
            "this",
            "safeMemoryOperation",
            "performUnifiedMemorySearch",
            "effectiveThemes",
            "join",
            "themes",
            "patterns"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "414bfd4ba904fb4b4289a0b685b67270"
      },
      {
        "id": "call_2d6b1ee3",
        "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "fileName": "theme-analysis-service.ts",
        "lineNumber": 395,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 390,
              "content": "// 伏線解決分析プロンプト",
              "indent": 6
            },
            {
              "lineNumber": 391,
              "content": "const prompt = this.buildForeshadowingResolutionPrompt(content, unresolvedForeshadowing, chapterNumber);",
              "indent": 6
            },
            {
              "lineNumber": 392,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 393,
              "content": "// APIスロットリングを使用して分析を実行",
              "indent": 6
            },
            {
              "lineNumber": 394,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 395,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 396,
              "content": "temperature: 0.2,",
              "indent": 10
            },
            {
              "lineNumber": 397,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 398,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 399,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 400,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 385,
            "distance": 10
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ");\n        return [];\n      }\n\n      // 伏線解決分析プロンプト\n      const prompt = this.buildForeshadowingResolutionPrompt(content, unresolvedForeshadowing, chapterNumber);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.2,\n          purpose: ",
            "fullLength": 356,
            "truncatedContent": ");\n        return [];\n      }\n\n      // 伏線解決分析プロンプト\n      const prompt = this.buildForeshadowingResolutionPrompt(content, unresolvedForeshadowing, chapterNumber);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.2,\n          purpose: ",
            "hash": "43a02fe6456194b1ca8a988066390ec8",
            "keywords": [
              "分析",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ");\n        return [];\n      }\n\n      // 伏線解決分析プロンプト\n      const prompt = this.buildForeshadowingResolutionPrompt(content, unresolvedForeshadowing, chapterNumber);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.2,\n          purpose: ",
            "fullLength": 356,
            "truncatedContent": ");\n        return [];\n      }\n\n      // 伏線解決分析プロンプト\n      const prompt = this.buildForeshadowingResolutionPrompt(content, unresolvedForeshadowing, chapterNumber);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.2,\n          purpose: ",
            "hash": "43a02fe6456194b1ca8a988066390ec8",
            "keywords": [
              "分析",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildForeshadowingResolutionPrompt",
            "relatedMethods": [
              "buildForeshadowingResolutionPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "resolution",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.2",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "wing",
            "getUnresolvedForeshadowing",
            "unresolvedForeshadowing",
            "memoryResult",
            "data",
            "foreshadowing",
            "length",
            "logger",
            "info",
            "return"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "7ef4fe52f4db1613d9c1c5611fb2263f"
      },
      {
        "id": "call_5a61e7e9",
        "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "fileName": "theme-analysis-service.ts",
        "lineNumber": 461,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 456,
              "content": "existingContext.data.activeForeshadowing || []",
              "indent": 8
            },
            {
              "lineNumber": 457,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 458,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 459,
              "content": "// APIスロットリングを使用して生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 460,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 461,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 462,
              "content": "temperature: 0.6,",
              "indent": 10
            },
            {
              "lineNumber": 463,
              "content": "purpose: 'generation',",
              "indent": 10
            },
            {
              "lineNumber": 464,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 465,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 466,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 414,
            "distance": 47
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "),\n        { activeForeshadowing: [] },\n        'getActiveForeshadowing'\n      );\n\n      // 伏線生成プロンプト\n      const prompt = this.buildForeshadowingGenerationPrompt(\n        content, \n        chapterNumber, \n        narrativeContext.data, \n        existingContext.data.activeForeshadowing || []\n      );\n\n      // APIスロットリングを使用して生成を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.6,\n          purpose: 'generation',\n          responseFormat: 'json'\n        })\n      );\n\n      // レスポンスを解析\n      const newForeshadowing = JsonParser.parseFromAIResponse<any[]>(response, []);\n\n      // 結果を検証し、有効な伏線のみを返す\n      const validForeshadowing = this.validateGeneratedForeshadowing(newForeshadowing);\n\n      logger.info(",
            "fullLength": 800,
            "truncatedContent": "),\n        { activeForeshadowing: [] },\n        'getActiveForeshadowing'\n      );\n\n      // 伏線生成プロンプト\n      const prompt = this.buildForeshadowingGenerationPrompt(\n        content, \n        chapterNumber, \n        narrativeContext.data, \n        existingContext.data.activeForeshadowing || []\n      );\n\n      // APIスロットリングを使用して生成を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.6,\n          purpose: 'generation',\n          responseFormat: 'json'\n        })\n      );\n\n      // レスポンスを解析\n      const newForeshadowing = JsonParser.parseFromAIResponse<any[]>(response, []);\n\n      // 結果を検証し、有効な伏線のみを返す\n      const validForeshadowing = this.validateGeneratedForeshadowing(newForeshadowing);\n\n      logger.info(",
            "hash": "ef22b68a1f51ab155d2f99657097a80f",
            "keywords": [
              "生成",
              "chapter",
              "generate",
              "Generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n      );\n\n      // 伏線生成プロンプト\n      const prompt = this.buildForeshadowingGenerationPrompt(\n        content, \n        chapterNumber, \n        narrativeContext.data, \n        existingContext.data.activeForeshadowing || []\n      );\n\n      // APIスロットリングを使用して生成を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.6,\n          purpose: ",
            "fullLength": 423,
            "truncatedContent": "\n      );\n\n      // 伏線生成プロンプト\n      const prompt = this.buildForeshadowingGenerationPrompt(\n        content, \n        chapterNumber, \n        narrativeContext.data, \n        existingContext.data.activeForeshadowing || []\n      );\n\n      // APIスロットリングを使用して生成を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.6,\n          purpose: ",
            "hash": "6f3ccd1c16eebc632740157240b19317",
            "keywords": [
              "生成",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "),\n        { activeForeshadowing: [] },\n        'getActiveForeshadowing'\n      );\n\n      // 伏線生成プロンプト\n      const prompt = this.buildForeshadowingGenerationPrompt(\n        content, \n        chapterNumber, \n        narrativeContext.data, \n        existingContext.data.activeForeshadowing || []\n      );\n\n      // APIスロットリングを使用して生成を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.6,\n          purpose: 'generation',\n          responseFormat: 'json'\n        })\n      );\n\n      // レスポンスを解析\n      const newForeshadowing = JsonParser.parseFromAIResponse<any[]>(response, []);\n\n      // 結果を検証し、有効な伏線のみを返す\n      const validForeshadowing = this.validateGeneratedForeshadowing(newForeshadowing);\n\n      logger.info(",
            "fullLength": 800,
            "truncatedContent": "),\n        { activeForeshadowing: [] },\n        'getActiveForeshadowing'\n      );\n\n      // 伏線生成プロンプト\n      const prompt = this.buildForeshadowingGenerationPrompt(\n        content, \n        chapterNumber, \n        narrativeContext.data, \n        existingContext.data.activeForeshadowing || []\n      );\n\n      // APIスロットリングを使用して生成を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.6,\n          purpose: 'generation',\n          responseFormat: 'json'\n        })\n      );\n\n      // レスポンスを解析\n      const newForeshadowing = JsonParser.parseFromAIResponse<any[]>(response, []);\n\n      // 結果を検証し、有効な伏線のみを返す\n      const validForeshadowing = this.validateGeneratedForeshadowing(newForeshadowing);\n\n      logger.info(",
            "hash": "ef22b68a1f51ab155d2f99657097a80f",
            "keywords": [
              "生成",
              "chapter",
              "generate",
              "Generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n      );\n\n      // 伏線生成プロンプト\n      const prompt = this.buildForeshadowingGenerationPrompt(\n        content, \n        chapterNumber, \n        narrativeContext.data, \n        existingContext.data.activeForeshadowing || []\n      );\n\n      // APIスロットリングを使用して生成を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.6,\n          purpose: ",
            "fullLength": 423,
            "truncatedContent": "\n      );\n\n      // 伏線生成プロンプト\n      const prompt = this.buildForeshadowingGenerationPrompt(\n        content, \n        chapterNumber, \n        narrativeContext.data, \n        existingContext.data.activeForeshadowing || []\n      );\n\n      // APIスロットリングを使用して生成を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.6,\n          purpose: ",
            "hash": "6f3ccd1c16eebc632740157240b19317",
            "keywords": [
              "生成",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": "),\n        { activeForeshadowing: [] },\n        'getActiveForeshadowing'\n      );\n\n      // 伏線生成プロンプト\n      const prompt = this.buildForeshadowingGenerationPrompt(\n        content, \n        chapterNumber, \n        narrativeContext.data, \n        existingContext.data.activeForeshadowing || []\n      );\n\n      // APIスロットリングを使用して生成を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.6,\n          purpose: 'generation',\n          responseFormat: 'json'\n        })\n      );\n\n      // レスポンスを解析\n      const newForeshadowing = JsonParser.parseFromAIResponse<any[]>(response, []);\n\n      // 結果を検証し、有効な伏線のみを返す\n      const validForeshadowing = this.validateGeneratedForeshadowing(newForeshadowing);\n\n      logger.info(",
            "fullLength": 800,
            "truncatedContent": "),\n        { activeForeshadowing: [] },\n        'getActiveForeshadowing'\n      );\n\n      // 伏線生成プロンプト\n      const prompt = this.buildForeshadowingGenerationPrompt(\n        content, \n        chapterNumber, \n        narrativeContext.data, \n        existingContext.data.activeForeshadowing || []\n      );\n\n      // APIスロットリングを使用して生成を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.6,\n          purpose: 'generation',\n          responseFormat: 'json'\n        })\n      );\n\n      // レスポンスを解析\n      const newForeshadowing = JsonParser.parseFromAIResponse<any[]>(response, []);\n\n      // 結果を検証し、有効な伏線のみを返す\n      const validForeshadowing = this.validateGeneratedForeshadowing(newForeshadowing);\n\n      logger.info(",
            "hash": "ef22b68a1f51ab155d2f99657097a80f",
            "hasVariables": false,
            "variableCount": 0
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildForeshadowingGenerationPrompt",
            "relatedMethods": [
              "buildForeshadowingGenerationPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.6",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "ait",
            "this",
            "safeMemoryOperation",
            "performUnifiedMemorySearch",
            "activeForeshadowing",
            "getActiveForeshadowing",
            "const",
            "prompt",
            "buildForeshadowingGenerationPrompt",
            "content"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "325fb2c1dd5e26ebabbce235302baa48"
      },
      {
        "id": "call_acc16f7d",
        "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "fileName": "theme-analysis-service.ts",
        "lineNumber": 602,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 597,
              "content": "// 分析プロンプト（記憶システムからの情報を活用）",
              "indent": 6
            },
            {
              "lineNumber": 598,
              "content": "const prompt = this.buildSymbolismAnalysisPrompt(content, symbolismContext.data);",
              "indent": 6
            },
            {
              "lineNumber": 599,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 600,
              "content": "// APIスロットリングを使用して分析を実行",
              "indent": 6
            },
            {
              "lineNumber": 601,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 602,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 603,
              "content": "temperature: 0.3,",
              "indent": 10
            },
            {
              "lineNumber": 604,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 605,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 606,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 607,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 585,
            "distance": 17
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\n      );\n\n      // 分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildSymbolismAnalysisPrompt(content, symbolismContext.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: ",
            "fullLength": 325,
            "truncatedContent": "\n      );\n\n      // 分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildSymbolismAnalysisPrompt(content, symbolismContext.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: ",
            "hash": "2727056cf7d5382743614bae02580053",
            "keywords": [
              "分析",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n      );\n\n      // 分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildSymbolismAnalysisPrompt(content, symbolismContext.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: ",
            "fullLength": 325,
            "truncatedContent": "\n      );\n\n      // 分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildSymbolismAnalysisPrompt(content, symbolismContext.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: ",
            "hash": "2727056cf7d5382743614bae02580053",
            "keywords": [
              "分析",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "cachedAnalysis",
            "relatedMethods": [
              "cachedAnalysis",
              "buildSymbolismAnalysisPrompt",
              "defaultAnalysis",
              "SymbolismAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": SymbolismAnalysis"
            ],
            "extractedTypes": [
              "SymbolismAnalysis"
            ]
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "const",
            "symbolismContext",
            "await",
            "this",
            "safeMemoryOperation",
            "performUnifiedMemorySearch",
            "existingSymbols",
            "commonMotifs",
            "literaryDevices",
            "getSymbolismContext"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "87af42a9ca181a3cd1b95bdea60d9214"
      },
      {
        "id": "call_cd18ed56",
        "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "fileName": "theme-analysis-service.ts",
        "lineNumber": 688,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 683,
              "content": "const summaryPromises = contents.map(async (content, index) => {",
              "indent": 6
            },
            {
              "lineNumber": 684,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 685,
              "content": "const prompt = this.buildChapterSummaryPrompt(content, index + 1, theme);",
              "indent": 10
            },
            {
              "lineNumber": 686,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 687,
              "content": "const summary = await apiThrottler.throttledRequest(() =>",
              "indent": 10
            }
          ],
          "current": {
            "lineNumber": 688,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 689,
              "content": "temperature: 0.1,",
              "indent": 14
            },
            {
              "lineNumber": 690,
              "content": "targetLength: 150",
              "indent": 14
            },
            {
              "lineNumber": 691,
              "content": "})",
              "indent": 12
            },
            {
              "lineNumber": 692,
              "content": ");",
              "indent": 10
            },
            {
              "lineNumber": 693,
              "content": "",
              "indent": 0
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 671,
            "distance": 17
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "),\n        { historicalData: [], patterns: [], trends: [] },\n        'getThemeHistoryContext'\n      );\n\n      // 各章の要約を生成（並列処理で効率化）\n      const summaryPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildChapterSummaryPrompt(content, index + 1, theme);\n\n          const summary = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.1,\n              targetLength: 150\n            })\n          );\n\n          return { chapterIndex: index, summary };\n        } catch (error) {\n          logger.warn(",
            "fullLength": 616,
            "truncatedContent": "),\n        { historicalData: [], patterns: [], trends: [] },\n        'getThemeHistoryContext'\n      );\n\n      // 各章の要約を生成（並列処理で効率化）\n      const summaryPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildChapterSummaryPrompt(content, index + 1, theme);\n\n          const summary = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.1,\n              targetLength: 150\n            })\n          );\n\n          return { chapterIndex: index, summary };\n        } catch (error) {\n          logger.warn(",
            "hash": "75dd7695a92333e45262edde4ac99fdc",
            "keywords": [
              "章",
              "生成",
              "story",
              "Chapter",
              "generate",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "章 ${index + 1} の要約（生成失敗）",
            "fullLength": 24,
            "truncatedContent": "章 ${index + 1} の要約（生成失敗）",
            "hash": "deb5472f1a9d7405a2c0c73e0d545f91",
            "keywords": [
              "章",
              "生成"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "),\n        { historicalData: [], patterns: [], trends: [] },\n        'getThemeHistoryContext'\n      );\n\n      // 各章の要約を生成（並列処理で効率化）\n      const summaryPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildChapterSummaryPrompt(content, index + 1, theme);\n\n          const summary = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.1,\n              targetLength: 150\n            })\n          );\n\n          return { chapterIndex: index, summary };\n        } catch (error) {\n          logger.warn(",
            "fullLength": 616,
            "truncatedContent": "),\n        { historicalData: [], patterns: [], trends: [] },\n        'getThemeHistoryContext'\n      );\n\n      // 各章の要約を生成（並列処理で効率化）\n      const summaryPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildChapterSummaryPrompt(content, index + 1, theme);\n\n          const summary = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.1,\n              targetLength: 150\n            })\n          );\n\n          return { chapterIndex: index, summary };\n        } catch (error) {\n          logger.warn(",
            "hash": "75dd7695a92333e45262edde4ac99fdc",
            "keywords": [
              "章",
              "生成",
              "story",
              "Chapter",
              "generate",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "章 ${index + 1} の要約（生成失敗）",
            "fullLength": 24,
            "truncatedContent": "章 ${index + 1} の要約（生成失敗）",
            "hash": "deb5472f1a9d7405a2c0c73e0d545f91",
            "keywords": [
              "章",
              "生成"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "),\n        { historicalData: [], patterns: [], trends: [] },\n        'getThemeHistoryContext'\n      );\n\n      // 各章の要約を生成（並列処理で効率化）\n      const summaryPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildChapterSummaryPrompt(content, index + 1, theme);\n\n          const summary = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.1,\n              targetLength: 150\n            })\n          );\n\n          return { chapterIndex: index, summary };\n        } catch (error) {\n          logger.warn(",
            "fullLength": 616,
            "truncatedContent": "),\n        { historicalData: [], patterns: [], trends: [] },\n        'getThemeHistoryContext'\n      );\n\n      // 各章の要約を生成（並列処理で効率化）\n      const summaryPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildChapterSummaryPrompt(content, index + 1, theme);\n\n          const summary = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.1,\n              targetLength: 150\n            })\n          );\n\n          return { chapterIndex: index, summary };\n        } catch (error) {\n          logger.warn(",
            "hash": "75dd7695a92333e45262edde4ac99fdc",
            "keywords": [
              "章",
              "生成",
              "story",
              "Chapter",
              "generate",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": "),\n        { historicalData: [], patterns: [], trends: [] },\n        'getThemeHistoryContext'\n      );\n\n      // 各章の要約を生成（並列処理で効率化）\n      const summaryPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildChapterSummaryPrompt(content, index + 1, theme);\n\n          const summary = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.1,\n              targetLength: 150\n            })\n          );\n\n          return { chapterIndex: index, summary };\n        } catch (error) {\n          logger.warn(",
            "fullLength": 616,
            "truncatedContent": "),\n        { historicalData: [], patterns: [], trends: [] },\n        'getThemeHistoryContext'\n      );\n\n      // 各章の要約を生成（並列処理で効率化）\n      const summaryPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildChapterSummaryPrompt(content, index + 1, theme);\n\n          const summary = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.1,\n              targetLength: 150\n            })\n          );\n\n          return { chapterIndex: index, summary };\n        } catch (error) {\n          logger.warn(",
            "hash": "75dd7695a92333e45262edde4ac99fdc",
            "hasVariables": false,
            "variableCount": 0
          },
          {
            "type": "template_literal",
            "content": ", {\n            error: error instanceof Error ? error.message : String(error)\n          });\n          return { chapterIndex: index, summary: ",
            "fullLength": 141,
            "truncatedContent": ", {\n            error: error instanceof Error ? error.message : String(error)\n          });\n          return { chapterIndex: index, summary: ",
            "hash": "72b5cd502e3f79595c8575c2d3cd8219",
            "hasVariables": false,
            "variableCount": 0
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildChapterSummaryPrompt",
            "relatedMethods": [
              "buildChapterSummaryPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "emeHistory",
            "await",
            "this",
            "safeMemoryOperation",
            "performUnifiedMemorySearch",
            "theme",
            "historicalData",
            "patterns",
            "trends",
            "getThemeHistoryContext"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "54d3d7c5deb6b65ae2689907c136a832"
      },
      {
        "id": "call_306575ca",
        "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "fileName": "theme-analysis-service.ts",
        "lineNumber": 710,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 705,
              "content": "// 一貫性分析プロンプト（記憶システムからの情報を活用）",
              "indent": 6
            },
            {
              "lineNumber": 706,
              "content": "const prompt = this.buildConsistencyAnalysisPrompt(summaries, theme, themeHistory.data);",
              "indent": 6
            },
            {
              "lineNumber": 707,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 708,
              "content": "// APIスロットリングを使用して分析を実行",
              "indent": 6
            },
            {
              "lineNumber": 709,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 710,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 711,
              "content": "temperature: 0.3,",
              "indent": 10
            },
            {
              "lineNumber": 712,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 713,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 714,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 715,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 695,
            "distance": 15
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "章 ${index + 1} の要約生成に失敗しました",
            "fullLength": 27,
            "truncatedContent": "章 ${index + 1} の要約生成に失敗しました",
            "hash": "26937f9076a0051a8e17e8c940611146",
            "keywords": [
              "章",
              "生成"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "章 ${index + 1} の要約（生成失敗）",
            "fullLength": 24,
            "truncatedContent": "章 ${index + 1} の要約（生成失敗）",
            "hash": "deb5472f1a9d7405a2c0c73e0d545f91",
            "keywords": [
              "章",
              "生成"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "章 ${index + 1} の要約生成に失敗しました",
            "fullLength": 27,
            "truncatedContent": "章 ${index + 1} の要約生成に失敗しました",
            "hash": "26937f9076a0051a8e17e8c940611146",
            "keywords": [
              "章",
              "生成"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "章 ${index + 1} の要約（生成失敗）",
            "fullLength": 24,
            "truncatedContent": "章 ${index + 1} の要約（生成失敗）",
            "hash": "deb5472f1a9d7405a2c0c73e0d545f91",
            "keywords": [
              "章",
              "生成"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": " };\n        }\n      });\n\n      const summaries = await Promise.all(summaryPromises);\n\n      // 一貫性分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildConsistencyAnalysisPrompt(summaries, theme, themeHistory.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      // デフォルト値\n      const defaultAnalysis: ThemeConsistencyAnalysis = {\n        consistencyScore: 7,\n        strengthByChapter: contents.map(() => 5),\n        developmentPattern: \"テーマの発展が適度に続いています\",\n        weakPoints: [],\n        improvementSuggestions: [\n          ",
            "fullLength": 745,
            "truncatedContent": " };\n        }\n      });\n\n      const summaries = await Promise.all(summaryPromises);\n\n      // 一貫性分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildConsistencyAnalysisPrompt(summaries, theme, themeHistory.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      // デフォルト値\n      const defaultAnalysis: ThemeConsistencyAnalysis = {\n        consistencyScore: 7,\n        strengthByChapter: contents.map(() => 5),\n        developmentPattern: \"テーマの発展が適度に続いています\",\n        weakPoints: [],\n        improvementSuggestions: [\n          ",
            "hash": "42edc094e90efc52b3a177e12866c3c6",
            "keywords": [
              "分析",
              "story",
              "generate",
              "Chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ", {\n            error: error instanceof Error ? error.message : String(error)\n          });\n          return { chapterIndex: index, summary: ",
            "fullLength": 141,
            "truncatedContent": ", {\n            error: error instanceof Error ? error.message : String(error)\n          });\n          return { chapterIndex: index, summary: ",
            "hash": "72b5cd502e3f79595c8575c2d3cd8219",
            "hasVariables": false,
            "variableCount": 0
          },
          {
            "type": "template_literal",
            "content": " };\n        }\n      });\n\n      const summaries = await Promise.all(summaryPromises);\n\n      // 一貫性分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildConsistencyAnalysisPrompt(summaries, theme, themeHistory.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      // デフォルト値\n      const defaultAnalysis: ThemeConsistencyAnalysis = {\n        consistencyScore: 7,\n        strengthByChapter: contents.map(() => 5),\n        developmentPattern: \"テーマの発展が適度に続いています\",\n        weakPoints: [],\n        improvementSuggestions: [\n          ",
            "fullLength": 745,
            "truncatedContent": " };\n        }\n      });\n\n      const summaries = await Promise.all(summaryPromises);\n\n      // 一貫性分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildConsistencyAnalysisPrompt(summaries, theme, themeHistory.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      // デフォルト値\n      const defaultAnalysis: ThemeConsistencyAnalysis = {\n        consistencyScore: 7,\n        strengthByChapter: contents.map(() => 5),\n        developmentPattern: \"テーマの発展が適度に続いています\",\n        weakPoints: [],\n        improvementSuggestions: [\n          ",
            "hash": "42edc094e90efc52b3a177e12866c3c6",
            "hasVariables": false,
            "variableCount": 0
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildConsistencyAnalysisPrompt",
            "relatedMethods": [
              "buildConsistencyAnalysisPrompt",
              "defaultAnalysis",
              "ThemeConsistencyAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": ThemeConsistencyAnalysis"
            ],
            "extractedTypes": [
              "ThemeConsistencyAnalysis"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "分析",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "error",
            "instanceof",
            "Error",
            "message",
            "String",
            "return",
            "chapterIndex",
            "index",
            "summary",
            "const"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "87af42a9ca181a3cd1b95bdea60d9214"
      },
      {
        "id": "call_5b244c9b",
        "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "fileName": "theme-analysis-service.ts",
        "lineNumber": 1811,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 1806,
              "content": "- significance: 重要度（0.0～1.0）",
              "indent": 0
            },
            {
              "lineNumber": 1807,
              "content": "- consequence: イベントの結果や影響（ある場合）",
              "indent": 0
            },
            {
              "lineNumber": 1808,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 1809,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1810,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 1811,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 1812,
              "content": "temperature: 0.3,",
              "indent": 10
            },
            {
              "lineNumber": 1813,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 1814,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 1815,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 1816,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 1777,
            "distance": 34
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      try {\n        const jsonMatch = response.match(/",
            "fullLength": 285,
            "truncatedContent": ";\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      try {\n        const jsonMatch = response.match(/",
            "hash": "81bee7338a6e5e923a87060bd8da3967",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ";\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      try {\n        const jsonMatch = response.match(/",
            "fullLength": 285,
            "truncatedContent": ";\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      try {\n        const jsonMatch = response.match(/",
            "hash": "81bee7338a6e5e923a87060bd8da3967",
            "hasVariables": false,
            "variableCount": 0
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "response_structure",
            "fields": [
              "match"
            ],
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "conflict",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "content",
            "substring",
            "JSON",
            "description",
            "involvedCharacters",
            "location",
            "type",
            "WARNING",
            "CONFLICT",
            "PROMISE"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "cb10f81ecc581c1417357b465e022ef5"
      },
      {
        "id": "call_071f4b24",
        "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "fileName": "theme-analysis-service.ts",
        "lineNumber": 1897,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 1892,
              "content": "\"suggestions\": [\"提案1\", \"提案2\", \"提案3\"],",
              "indent": 2
            },
            {
              "lineNumber": 1893,
              "content": "\"symbolicPotential\": \"象徴的な意味や可能性の説明\"",
              "indent": 2
            },
            {
              "lineNumber": 1894,
              "content": "}`;",
              "indent": 0
            },
            {
              "lineNumber": 1895,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1896,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 1897,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 1898,
              "content": "temperature: 0.4,",
              "indent": 10
            },
            {
              "lineNumber": 1899,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 1900,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 1901,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 1902,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 1863,
            "distance": 34
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.4,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      const defaultResult: ThemeElementResonance = {\n        relevance: 5,\n        suggestions: [\n          ",
            "fullLength": 339,
            "truncatedContent": ";\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.4,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      const defaultResult: ThemeElementResonance = {\n        relevance: 5,\n        suggestions: [\n          ",
            "hash": "4c479f26b700baffa5dbb20d8eece1cc",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ";\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.4,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      const defaultResult: ThemeElementResonance = {\n        relevance: 5,\n        suggestions: [\n          ",
            "fullLength": 339,
            "truncatedContent": ";\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.4,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      const defaultResult: ThemeElementResonance = {\n        relevance: 5,\n        suggestions: [\n          ",
            "hash": "4c479f26b700baffa5dbb20d8eece1cc",
            "hasVariables": false,
            "variableCount": 0
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.4",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "try",
            "logger",
            "info",
            "theme",
            "elementType",
            "const",
            "prompt",
            "context",
            "JSON",
            "relevance"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "537523f641e24640220149cae14bcbea"
      },
      {
        "id": "call_626a1c0b",
        "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "fileName": "theme-analysis-service.ts",
        "lineNumber": 2064,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 2059,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 2060,
              "content": "提案を配列形式で出力してください:",
              "indent": 0
            },
            {
              "lineNumber": 2061,
              "content": "[\"提案1\", \"提案2\", \"提案3\"]`;",
              "indent": 0
            },
            {
              "lineNumber": 2062,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 2063,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 10
            }
          ],
          "current": {
            "lineNumber": 2064,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 2065,
              "content": "temperature: 0.4,",
              "indent": 14
            },
            {
              "lineNumber": 2066,
              "content": "purpose: 'suggestion',",
              "indent": 14
            },
            {
              "lineNumber": 2067,
              "content": "responseFormat: 'json'",
              "indent": 14
            },
            {
              "lineNumber": 2068,
              "content": "})",
              "indent": 12
            },
            {
              "lineNumber": 2069,
              "content": ");",
              "indent": 10
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 2046,
            "distance": 18
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[",
            "fullLength": 188,
            "truncatedContent": "\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[",
            "hash": "b67330adc59c5fcff7a760c2389c2846",
            "keywords": [
              "小説"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[\"提案1\", \"提案2\", \"提案3\"]",
            "fullLength": 208,
            "truncatedContent": "\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[\"提案1\", \"提案2\", \"提案3\"]",
            "hash": "7b36d498cdd2e99417364ed49e25928a",
            "keywords": [
              "小説"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ");\n\n          const prompt = `\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[\"提案1\", \"提案2\", \"提案3\"]`;\n\n          const response = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.4,\n              purpose: ",
            "fullLength": 420,
            "truncatedContent": ");\n\n          const prompt = `\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[\"提案1\", \"提案2\", \"提案3\"]`;\n\n          const response = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.4,\n              purpose: ",
            "hash": "97c042a0b0902e0cab4586eedb427157",
            "keywords": [
              "小説",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "象徴・モチーフの開発提案生成に失敗しました",
            "fullLength": 21,
            "truncatedContent": "象徴・モチーフの開発提案生成に失敗しました",
            "hash": "a19bf41d782f7114f41c427f466c74d4",
            "keywords": [
              "生成"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ");\n\n          const prompt = `\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[\"提案1\", \"提案2\", \"提案3\"]`;\n\n          const response = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.4,\n              purpose: ",
            "fullLength": 420,
            "truncatedContent": ");\n\n          const prompt = `\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[\"提案1\", \"提案2\", \"提案3\"]`;\n\n          const response = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.4,\n              purpose: ",
            "hash": "97c042a0b0902e0cab4586eedb427157",
            "keywords": [
              "小説",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "variable_assignment",
            "variableName": "prompt",
            "content": "\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[",
            "fullLength": 188,
            "truncatedContent": "\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[",
            "hash": "b67330adc59c5fcff7a760c2389c2846"
          },
          {
            "type": "template_literal",
            "content": "\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[\"提案1\", \"提案2\", \"提案3\"]",
            "fullLength": 208,
            "truncatedContent": "\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[\"提案1\", \"提案2\", \"提案3\"]",
            "hash": "7b36d498cdd2e99417364ed49e25928a",
            "hasVariables": true,
            "variableCount": 2
          }
        ],
        "expectedOutputs": [
          {
            "type": "response_structure",
            "fields": [
              "recurringMotifs",
              "developmentSuggestions"
            ],
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.4",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "bols",
            "result",
            "dominantSymbols",
            "slice",
            "map",
            "any",
            "name",
            "join",
            "const",
            "topMotifs"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "ebd37a9a95fcb4373b4f8ed88f453c0b"
      },
      {
        "id": "call_7e6621ef",
        "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "fileName": "theme-analysis-service.ts",
        "lineNumber": 2139,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 2134,
              "content": "const chapterAnalysisPromises = contents.map(async (content, index) => {",
              "indent": 6
            },
            {
              "lineNumber": 2135,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 2136,
              "content": "const prompt = this.buildMotifAnalysisPrompt(content, index + 1, motif, motifContext.data);",
              "indent": 10
            },
            {
              "lineNumber": 2137,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 2138,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 10
            }
          ],
          "current": {
            "lineNumber": 2139,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 2140,
              "content": "temperature: 0.2,",
              "indent": 14
            },
            {
              "lineNumber": 2141,
              "content": "purpose: 'analysis',",
              "indent": 14
            },
            {
              "lineNumber": 2142,
              "content": "responseFormat: 'json'",
              "indent": 14
            },
            {
              "lineNumber": 2143,
              "content": "})",
              "indent": 12
            },
            {
              "lineNumber": 2144,
              "content": ");",
              "indent": 10
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 2122,
            "distance": 17
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\n      );\n\n      // 各章でのモチーフ出現を分析（並列処理で効率化）\n      const chapterAnalysisPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildMotifAnalysisPrompt(content, index + 1, motif, motifContext.data);\n\n          const response = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.2,\n              purpose: ",
            "fullLength": 418,
            "truncatedContent": "\n      );\n\n      // 各章でのモチーフ出現を分析（並列処理で効率化）\n      const chapterAnalysisPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildMotifAnalysisPrompt(content, index + 1, motif, motifContext.data);\n\n          const response = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.2,\n              purpose: ",
            "hash": "8191ddf8818eca5295c5f8ddad5824b3",
            "keywords": [
              "章",
              "分析",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n      );\n\n      // 各章でのモチーフ出現を分析（並列処理で効率化）\n      const chapterAnalysisPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildMotifAnalysisPrompt(content, index + 1, motif, motifContext.data);\n\n          const response = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.2,\n              purpose: ",
            "fullLength": 418,
            "truncatedContent": "\n      );\n\n      // 各章でのモチーフ出現を分析（並列処理で効率化）\n      const chapterAnalysisPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildMotifAnalysisPrompt(content, index + 1, motif, motifContext.data);\n\n          const response = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.2,\n              purpose: ",
            "hash": "8191ddf8818eca5295c5f8ddad5824b3",
            "keywords": [
              "章",
              "分析",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n      );\n\n      // 各章でのモチーフ出現を分析（並列処理で効率化）\n      const chapterAnalysisPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildMotifAnalysisPrompt(content, index + 1, motif, motifContext.data);\n\n          const response = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.2,\n              purpose: ",
            "fullLength": 418,
            "truncatedContent": "\n      );\n\n      // 各章でのモチーフ出現を分析（並列処理で効率化）\n      const chapterAnalysisPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildMotifAnalysisPrompt(content, index + 1, motif, motifContext.data);\n\n          const response = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.2,\n              purpose: ",
            "hash": "8191ddf8818eca5295c5f8ddad5824b3",
            "keywords": [
              "章",
              "分析",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "chapterAnalysis",
            "relatedMethods": [
              "chapterAnalysis",
              "buildMotifAnalysisPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.2",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "this",
            "performUnifiedMemorySearch",
            "motif",
            "patterns",
            "previousOccurrences",
            "relatedElements",
            "getMotifContext",
            "const",
            "chapterAnalysisPromises",
            "contents"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "64dd55908c75538db5c7326c821215d3"
      },
      {
        "id": "call_cdcdc465",
        "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "fileName": "theme-analysis-service.ts",
        "lineNumber": 2336,
        "lineContent": "this.geminiAdapter.generateText(developmentPrompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiAdapter.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 2331,
              "content": "\"effectiveUses\": [\"効果的な使用例1\", \"効果的な使用例2\"],",
              "indent": 2
            },
            {
              "lineNumber": 2332,
              "content": "\"suggestions\": [\"提案1\", \"提案2\", \"提案3\"]",
              "indent": 2
            },
            {
              "lineNumber": 2333,
              "content": "}`;",
              "indent": 0
            },
            {
              "lineNumber": 2334,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 2335,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 2336,
            "content": "this.geminiAdapter.generateText(developmentPrompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 2337,
              "content": "temperature: 0.3,",
              "indent": 10
            },
            {
              "lineNumber": 2338,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 2339,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 2340,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 2341,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 2223,
            "distance": 113
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(developmentPrompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      const defaultDevelopment = {\n        developmentPattern: \"明確なパターンが検出されませんでした\",\n        thematicConnection: \"テーマとの明確な関連性は検出されませんでした\",\n        effectiveUses: [],\n        suggestions: [\n          ",
            "fullLength": 441,
            "truncatedContent": ";\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(developmentPrompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      const defaultDevelopment = {\n        developmentPattern: \"明確なパターンが検出されませんでした\",\n        thematicConnection: \"テーマとの明確な関連性は検出されませんでした\",\n        effectiveUses: [],\n        suggestions: [\n          ",
            "hash": "44ec635cb5448df680605a977024e911",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "]\n}`;\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(developmentPrompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      const defaultDevelopment = {\n        developmentPattern: ",
            "fullLength": 309,
            "truncatedContent": "]\n}`;\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(developmentPrompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      const defaultDevelopment = {\n        developmentPattern: ",
            "hash": "d1d7988625bba11513ebc0033cbac362",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ";\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(developmentPrompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      const defaultDevelopment = {\n        developmentPattern: \"明確なパターンが検出されませんでした\",\n        thematicConnection: \"テーマとの明確な関連性は検出されませんでした\",\n        effectiveUses: [],\n        suggestions: [\n          ",
            "fullLength": 441,
            "truncatedContent": ";\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(developmentPrompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      const defaultDevelopment = {\n        developmentPattern: \"明確なパターンが検出されませんでした\",\n        thematicConnection: \"テーマとの明確な関連性は検出されませんでした\",\n        effectiveUses: [],\n        suggestions: [\n          ",
            "hash": "44ec635cb5448df680605a977024e911",
            "hasVariables": false,
            "variableCount": 0
          },
          {
            "type": "method_based",
            "suggestedPurpose": "developmentPrompt",
            "relatedMethods": [
              "developmentPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "const",
            "developmentPrompt",
            "motif",
            "occurrencesText",
            "contextInfo",
            "JSON",
            "developmentPattern",
            "thematicConnection",
            "effectiveUses",
            "suggestions"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "e081d5d1d3f578a9c1478d531b9b9bf7"
      },
      {
        "id": "call_b39b77f9",
        "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "fileName": "theme-analysis-service.ts",
        "lineNumber": 167,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 162,
              "content": "// 分析用プロンプトを構築（記憶システムからの情報を活用）",
              "indent": 6
            },
            {
              "lineNumber": 163,
              "content": "const prompt = this.buildThemeAnalysisPrompt(content, effectiveThemes, memoryContext.data);",
              "indent": 6
            },
            {
              "lineNumber": 164,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 165,
              "content": "// APIスロットリングを利用してリクエスト",
              "indent": 6
            },
            {
              "lineNumber": 166,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 167,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 168,
              "content": "temperature: 0.3,",
              "indent": 10
            },
            {
              "lineNumber": 169,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 170,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 171,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 172,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 146,
            "distance": 21
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "テーマ分析 ${effectiveThemes.join(' ')}",
            "fullLength": 34,
            "truncatedContent": "テーマ分析 ${effectiveThemes.join(' ')}",
            "hash": "e27823414367e0be89ef5c93a35732c0",
            "keywords": [
              "分析"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "];\n\n      // 統合記憶システムから関連情報を取得\n      const memoryContext = await this.safeMemoryOperation(\n        () => this.performUnifiedMemorySearch(`テーマ分析 ${effectiveThemes.join(",
            "fullLength": 167,
            "truncatedContent": "];\n\n      // 統合記憶システムから関連情報を取得\n      const memoryContext = await this.safeMemoryOperation(\n        () => this.performUnifiedMemorySearch(`テーマ分析 ${effectiveThemes.join(",
            "hash": "554a7647bf34167b4903891809a8a825",
            "keywords": [
              "分析"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n      );\n\n      // 分析用プロンプトを構築（記憶システムからの情報を活用）\n      const prompt = this.buildThemeAnalysisPrompt(content, effectiveThemes, memoryContext.data);\n\n      // APIスロットリングを利用してリクエスト\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: ",
            "fullLength": 339,
            "truncatedContent": "\n      );\n\n      // 分析用プロンプトを構築（記憶システムからの情報を活用）\n      const prompt = this.buildThemeAnalysisPrompt(content, effectiveThemes, memoryContext.data);\n\n      // APIスロットリングを利用してリクエスト\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: ",
            "hash": "c5236be0e3ae42c31728fbd1ed9016d6",
            "keywords": [
              "分析",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n      );\n\n      // 分析用プロンプトを構築（記憶システムからの情報を活用）\n      const prompt = this.buildThemeAnalysisPrompt(content, effectiveThemes, memoryContext.data);\n\n      // APIスロットリングを利用してリクエスト\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: ",
            "fullLength": 339,
            "truncatedContent": "\n      );\n\n      // 分析用プロンプトを構築（記憶システムからの情報を活用）\n      const prompt = this.buildThemeAnalysisPrompt(content, effectiveThemes, memoryContext.data);\n\n      // APIスロットリングを利用してリクエスト\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: ",
            "hash": "c5236be0e3ae42c31728fbd1ed9016d6",
            "keywords": [
              "分析",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "getThemeAnalysis",
            "relatedMethods": [
              "getThemeAnalysis",
              "buildThemeAnalysisPrompt",
              "defaultAnalysis",
              "createFallbackAnalysis",
              "ThemeResonanceAnalysis",
              "validatedAnalysis",
              "validateAndEnhanceAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "構築",
            "generate",
            "create",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "const",
            "memoryContext",
            "await",
            "this",
            "safeMemoryOperation",
            "performUnifiedMemorySearch",
            "effectiveThemes",
            "join",
            "themes",
            "patterns"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "3351a2cf5c1e7491fe63787307f8a37e"
      },
      {
        "id": "call_c3189908",
        "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "fileName": "theme-analysis-service.ts",
        "lineNumber": 395,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 390,
              "content": "// 伏線解決分析プロンプト",
              "indent": 6
            },
            {
              "lineNumber": 391,
              "content": "const prompt = this.buildForeshadowingResolutionPrompt(content, unresolvedForeshadowing, chapterNumber);",
              "indent": 6
            },
            {
              "lineNumber": 392,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 393,
              "content": "// APIスロットリングを使用して分析を実行",
              "indent": 6
            },
            {
              "lineNumber": 394,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 395,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 396,
              "content": "temperature: 0.2,",
              "indent": 10
            },
            {
              "lineNumber": 397,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 398,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 399,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 400,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 385,
            "distance": 10
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ");\n        return [];\n      }\n\n      // 伏線解決分析プロンプト\n      const prompt = this.buildForeshadowingResolutionPrompt(content, unresolvedForeshadowing, chapterNumber);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.2,\n          purpose: ",
            "fullLength": 356,
            "truncatedContent": ");\n        return [];\n      }\n\n      // 伏線解決分析プロンプト\n      const prompt = this.buildForeshadowingResolutionPrompt(content, unresolvedForeshadowing, chapterNumber);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.2,\n          purpose: ",
            "hash": "43a02fe6456194b1ca8a988066390ec8",
            "keywords": [
              "分析",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ");\n        return [];\n      }\n\n      // 伏線解決分析プロンプト\n      const prompt = this.buildForeshadowingResolutionPrompt(content, unresolvedForeshadowing, chapterNumber);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.2,\n          purpose: ",
            "fullLength": 356,
            "truncatedContent": ");\n        return [];\n      }\n\n      // 伏線解決分析プロンプト\n      const prompt = this.buildForeshadowingResolutionPrompt(content, unresolvedForeshadowing, chapterNumber);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.2,\n          purpose: ",
            "hash": "43a02fe6456194b1ca8a988066390ec8",
            "keywords": [
              "分析",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildForeshadowingResolutionPrompt",
            "relatedMethods": [
              "buildForeshadowingResolutionPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "resolution",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.2",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "getUnresolvedForeshadowing",
            "unresolvedForeshadowing",
            "memoryResult",
            "data",
            "foreshadowing",
            "length",
            "logger",
            "info",
            "return",
            "const"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "82593a41ca19bea5e3915389ef3a5cf7"
      },
      {
        "id": "call_42f50d23",
        "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "fileName": "theme-analysis-service.ts",
        "lineNumber": 461,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 456,
              "content": "existingContext.data.activeForeshadowing || []",
              "indent": 8
            },
            {
              "lineNumber": 457,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 458,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 459,
              "content": "// APIスロットリングを使用して生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 460,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 461,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 462,
              "content": "temperature: 0.6,",
              "indent": 10
            },
            {
              "lineNumber": 463,
              "content": "purpose: 'generation',",
              "indent": 10
            },
            {
              "lineNumber": 464,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 465,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 466,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 414,
            "distance": 47
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "),\n        { activeForeshadowing: [] },\n        'getActiveForeshadowing'\n      );\n\n      // 伏線生成プロンプト\n      const prompt = this.buildForeshadowingGenerationPrompt(\n        content, \n        chapterNumber, \n        narrativeContext.data, \n        existingContext.data.activeForeshadowing || []\n      );\n\n      // APIスロットリングを使用して生成を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.6,\n          purpose: 'generation',\n          responseFormat: 'json'\n        })\n      );\n\n      // レスポンスを解析\n      const newForeshadowing = JsonParser.parseFromAIResponse<any[]>(response, []);\n\n      // 結果を検証し、有効な伏線のみを返す\n      const validForeshadowing = this.validateGeneratedForeshadowing(newForeshadowing);\n\n      logger.info(",
            "fullLength": 800,
            "truncatedContent": "),\n        { activeForeshadowing: [] },\n        'getActiveForeshadowing'\n      );\n\n      // 伏線生成プロンプト\n      const prompt = this.buildForeshadowingGenerationPrompt(\n        content, \n        chapterNumber, \n        narrativeContext.data, \n        existingContext.data.activeForeshadowing || []\n      );\n\n      // APIスロットリングを使用して生成を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.6,\n          purpose: 'generation',\n          responseFormat: 'json'\n        })\n      );\n\n      // レスポンスを解析\n      const newForeshadowing = JsonParser.parseFromAIResponse<any[]>(response, []);\n\n      // 結果を検証し、有効な伏線のみを返す\n      const validForeshadowing = this.validateGeneratedForeshadowing(newForeshadowing);\n\n      logger.info(",
            "hash": "ef22b68a1f51ab155d2f99657097a80f",
            "keywords": [
              "生成",
              "chapter",
              "generate",
              "Generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n      );\n\n      // 伏線生成プロンプト\n      const prompt = this.buildForeshadowingGenerationPrompt(\n        content, \n        chapterNumber, \n        narrativeContext.data, \n        existingContext.data.activeForeshadowing || []\n      );\n\n      // APIスロットリングを使用して生成を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.6,\n          purpose: ",
            "fullLength": 423,
            "truncatedContent": "\n      );\n\n      // 伏線生成プロンプト\n      const prompt = this.buildForeshadowingGenerationPrompt(\n        content, \n        chapterNumber, \n        narrativeContext.data, \n        existingContext.data.activeForeshadowing || []\n      );\n\n      // APIスロットリングを使用して生成を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.6,\n          purpose: ",
            "hash": "6f3ccd1c16eebc632740157240b19317",
            "keywords": [
              "生成",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "),\n        { activeForeshadowing: [] },\n        'getActiveForeshadowing'\n      );\n\n      // 伏線生成プロンプト\n      const prompt = this.buildForeshadowingGenerationPrompt(\n        content, \n        chapterNumber, \n        narrativeContext.data, \n        existingContext.data.activeForeshadowing || []\n      );\n\n      // APIスロットリングを使用して生成を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.6,\n          purpose: 'generation',\n          responseFormat: 'json'\n        })\n      );\n\n      // レスポンスを解析\n      const newForeshadowing = JsonParser.parseFromAIResponse<any[]>(response, []);\n\n      // 結果を検証し、有効な伏線のみを返す\n      const validForeshadowing = this.validateGeneratedForeshadowing(newForeshadowing);\n\n      logger.info(",
            "fullLength": 800,
            "truncatedContent": "),\n        { activeForeshadowing: [] },\n        'getActiveForeshadowing'\n      );\n\n      // 伏線生成プロンプト\n      const prompt = this.buildForeshadowingGenerationPrompt(\n        content, \n        chapterNumber, \n        narrativeContext.data, \n        existingContext.data.activeForeshadowing || []\n      );\n\n      // APIスロットリングを使用して生成を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.6,\n          purpose: 'generation',\n          responseFormat: 'json'\n        })\n      );\n\n      // レスポンスを解析\n      const newForeshadowing = JsonParser.parseFromAIResponse<any[]>(response, []);\n\n      // 結果を検証し、有効な伏線のみを返す\n      const validForeshadowing = this.validateGeneratedForeshadowing(newForeshadowing);\n\n      logger.info(",
            "hash": "ef22b68a1f51ab155d2f99657097a80f",
            "keywords": [
              "生成",
              "chapter",
              "generate",
              "Generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n      );\n\n      // 伏線生成プロンプト\n      const prompt = this.buildForeshadowingGenerationPrompt(\n        content, \n        chapterNumber, \n        narrativeContext.data, \n        existingContext.data.activeForeshadowing || []\n      );\n\n      // APIスロットリングを使用して生成を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.6,\n          purpose: ",
            "fullLength": 423,
            "truncatedContent": "\n      );\n\n      // 伏線生成プロンプト\n      const prompt = this.buildForeshadowingGenerationPrompt(\n        content, \n        chapterNumber, \n        narrativeContext.data, \n        existingContext.data.activeForeshadowing || []\n      );\n\n      // APIスロットリングを使用して生成を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.6,\n          purpose: ",
            "hash": "6f3ccd1c16eebc632740157240b19317",
            "keywords": [
              "生成",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": "),\n        { activeForeshadowing: [] },\n        'getActiveForeshadowing'\n      );\n\n      // 伏線生成プロンプト\n      const prompt = this.buildForeshadowingGenerationPrompt(\n        content, \n        chapterNumber, \n        narrativeContext.data, \n        existingContext.data.activeForeshadowing || []\n      );\n\n      // APIスロットリングを使用して生成を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.6,\n          purpose: 'generation',\n          responseFormat: 'json'\n        })\n      );\n\n      // レスポンスを解析\n      const newForeshadowing = JsonParser.parseFromAIResponse<any[]>(response, []);\n\n      // 結果を検証し、有効な伏線のみを返す\n      const validForeshadowing = this.validateGeneratedForeshadowing(newForeshadowing);\n\n      logger.info(",
            "fullLength": 800,
            "truncatedContent": "),\n        { activeForeshadowing: [] },\n        'getActiveForeshadowing'\n      );\n\n      // 伏線生成プロンプト\n      const prompt = this.buildForeshadowingGenerationPrompt(\n        content, \n        chapterNumber, \n        narrativeContext.data, \n        existingContext.data.activeForeshadowing || []\n      );\n\n      // APIスロットリングを使用して生成を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.6,\n          purpose: 'generation',\n          responseFormat: 'json'\n        })\n      );\n\n      // レスポンスを解析\n      const newForeshadowing = JsonParser.parseFromAIResponse<any[]>(response, []);\n\n      // 結果を検証し、有効な伏線のみを返す\n      const validForeshadowing = this.validateGeneratedForeshadowing(newForeshadowing);\n\n      logger.info(",
            "hash": "ef22b68a1f51ab155d2f99657097a80f",
            "hasVariables": false,
            "variableCount": 0
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildForeshadowingGenerationPrompt",
            "relatedMethods": [
              "buildForeshadowingGenerationPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.6",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "MemoryOperation",
            "this",
            "performUnifiedMemorySearch",
            "activeForeshadowing",
            "getActiveForeshadowing",
            "const",
            "prompt",
            "buildForeshadowingGenerationPrompt",
            "content",
            "chapterNumber"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "149220606849dbd6a4aaca602d5bd750"
      },
      {
        "id": "call_7a25db3c",
        "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "fileName": "theme-analysis-service.ts",
        "lineNumber": 602,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 597,
              "content": "// 分析プロンプト（記憶システムからの情報を活用）",
              "indent": 6
            },
            {
              "lineNumber": 598,
              "content": "const prompt = this.buildSymbolismAnalysisPrompt(content, symbolismContext.data);",
              "indent": 6
            },
            {
              "lineNumber": 599,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 600,
              "content": "// APIスロットリングを使用して分析を実行",
              "indent": 6
            },
            {
              "lineNumber": 601,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 602,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 603,
              "content": "temperature: 0.3,",
              "indent": 10
            },
            {
              "lineNumber": 604,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 605,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 606,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 607,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 585,
            "distance": 17
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\n      );\n\n      // 分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildSymbolismAnalysisPrompt(content, symbolismContext.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: ",
            "fullLength": 325,
            "truncatedContent": "\n      );\n\n      // 分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildSymbolismAnalysisPrompt(content, symbolismContext.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: ",
            "hash": "2727056cf7d5382743614bae02580053",
            "keywords": [
              "分析",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n      );\n\n      // 分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildSymbolismAnalysisPrompt(content, symbolismContext.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: ",
            "fullLength": 325,
            "truncatedContent": "\n      );\n\n      // 分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildSymbolismAnalysisPrompt(content, symbolismContext.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: ",
            "hash": "2727056cf7d5382743614bae02580053",
            "keywords": [
              "分析",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "cachedAnalysis",
            "relatedMethods": [
              "cachedAnalysis",
              "buildSymbolismAnalysisPrompt",
              "defaultAnalysis",
              "SymbolismAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": SymbolismAnalysis"
            ],
            "extractedTypes": [
              "SymbolismAnalysis"
            ]
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "const",
            "symbolismContext",
            "await",
            "this",
            "safeMemoryOperation",
            "performUnifiedMemorySearch",
            "existingSymbols",
            "commonMotifs",
            "literaryDevices",
            "getSymbolismContext"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "5c4c8e9ba52be9199b2c92bc121ed144"
      },
      {
        "id": "call_afc20166",
        "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "fileName": "theme-analysis-service.ts",
        "lineNumber": 688,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 683,
              "content": "const summaryPromises = contents.map(async (content, index) => {",
              "indent": 6
            },
            {
              "lineNumber": 684,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 685,
              "content": "const prompt = this.buildChapterSummaryPrompt(content, index + 1, theme);",
              "indent": 10
            },
            {
              "lineNumber": 686,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 687,
              "content": "const summary = await apiThrottler.throttledRequest(() =>",
              "indent": 10
            }
          ],
          "current": {
            "lineNumber": 688,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 689,
              "content": "temperature: 0.1,",
              "indent": 14
            },
            {
              "lineNumber": 690,
              "content": "targetLength: 150",
              "indent": 14
            },
            {
              "lineNumber": 691,
              "content": "})",
              "indent": 12
            },
            {
              "lineNumber": 692,
              "content": ");",
              "indent": 10
            },
            {
              "lineNumber": 693,
              "content": "",
              "indent": 0
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 671,
            "distance": 17
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "),\n        { historicalData: [], patterns: [], trends: [] },\n        'getThemeHistoryContext'\n      );\n\n      // 各章の要約を生成（並列処理で効率化）\n      const summaryPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildChapterSummaryPrompt(content, index + 1, theme);\n\n          const summary = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.1,\n              targetLength: 150\n            })\n          );\n\n          return { chapterIndex: index, summary };\n        } catch (error) {\n          logger.warn(",
            "fullLength": 616,
            "truncatedContent": "),\n        { historicalData: [], patterns: [], trends: [] },\n        'getThemeHistoryContext'\n      );\n\n      // 各章の要約を生成（並列処理で効率化）\n      const summaryPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildChapterSummaryPrompt(content, index + 1, theme);\n\n          const summary = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.1,\n              targetLength: 150\n            })\n          );\n\n          return { chapterIndex: index, summary };\n        } catch (error) {\n          logger.warn(",
            "hash": "75dd7695a92333e45262edde4ac99fdc",
            "keywords": [
              "章",
              "生成",
              "story",
              "Chapter",
              "generate",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "章 ${index + 1} の要約（生成失敗）",
            "fullLength": 24,
            "truncatedContent": "章 ${index + 1} の要約（生成失敗）",
            "hash": "deb5472f1a9d7405a2c0c73e0d545f91",
            "keywords": [
              "章",
              "生成"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "),\n        { historicalData: [], patterns: [], trends: [] },\n        'getThemeHistoryContext'\n      );\n\n      // 各章の要約を生成（並列処理で効率化）\n      const summaryPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildChapterSummaryPrompt(content, index + 1, theme);\n\n          const summary = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.1,\n              targetLength: 150\n            })\n          );\n\n          return { chapterIndex: index, summary };\n        } catch (error) {\n          logger.warn(",
            "fullLength": 616,
            "truncatedContent": "),\n        { historicalData: [], patterns: [], trends: [] },\n        'getThemeHistoryContext'\n      );\n\n      // 各章の要約を生成（並列処理で効率化）\n      const summaryPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildChapterSummaryPrompt(content, index + 1, theme);\n\n          const summary = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.1,\n              targetLength: 150\n            })\n          );\n\n          return { chapterIndex: index, summary };\n        } catch (error) {\n          logger.warn(",
            "hash": "75dd7695a92333e45262edde4ac99fdc",
            "keywords": [
              "章",
              "生成",
              "story",
              "Chapter",
              "generate",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "章 ${index + 1} の要約（生成失敗）",
            "fullLength": 24,
            "truncatedContent": "章 ${index + 1} の要約（生成失敗）",
            "hash": "deb5472f1a9d7405a2c0c73e0d545f91",
            "keywords": [
              "章",
              "生成"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "),\n        { historicalData: [], patterns: [], trends: [] },\n        'getThemeHistoryContext'\n      );\n\n      // 各章の要約を生成（並列処理で効率化）\n      const summaryPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildChapterSummaryPrompt(content, index + 1, theme);\n\n          const summary = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.1,\n              targetLength: 150\n            })\n          );\n\n          return { chapterIndex: index, summary };\n        } catch (error) {\n          logger.warn(",
            "fullLength": 616,
            "truncatedContent": "),\n        { historicalData: [], patterns: [], trends: [] },\n        'getThemeHistoryContext'\n      );\n\n      // 各章の要約を生成（並列処理で効率化）\n      const summaryPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildChapterSummaryPrompt(content, index + 1, theme);\n\n          const summary = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.1,\n              targetLength: 150\n            })\n          );\n\n          return { chapterIndex: index, summary };\n        } catch (error) {\n          logger.warn(",
            "hash": "75dd7695a92333e45262edde4ac99fdc",
            "keywords": [
              "章",
              "生成",
              "story",
              "Chapter",
              "generate",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": "),\n        { historicalData: [], patterns: [], trends: [] },\n        'getThemeHistoryContext'\n      );\n\n      // 各章の要約を生成（並列処理で効率化）\n      const summaryPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildChapterSummaryPrompt(content, index + 1, theme);\n\n          const summary = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.1,\n              targetLength: 150\n            })\n          );\n\n          return { chapterIndex: index, summary };\n        } catch (error) {\n          logger.warn(",
            "fullLength": 616,
            "truncatedContent": "),\n        { historicalData: [], patterns: [], trends: [] },\n        'getThemeHistoryContext'\n      );\n\n      // 各章の要約を生成（並列処理で効率化）\n      const summaryPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildChapterSummaryPrompt(content, index + 1, theme);\n\n          const summary = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.1,\n              targetLength: 150\n            })\n          );\n\n          return { chapterIndex: index, summary };\n        } catch (error) {\n          logger.warn(",
            "hash": "75dd7695a92333e45262edde4ac99fdc",
            "hasVariables": false,
            "variableCount": 0
          },
          {
            "type": "template_literal",
            "content": ", {\n            error: error instanceof Error ? error.message : String(error)\n          });\n          return { chapterIndex: index, summary: ",
            "fullLength": 141,
            "truncatedContent": ", {\n            error: error instanceof Error ? error.message : String(error)\n          });\n          return { chapterIndex: index, summary: ",
            "hash": "72b5cd502e3f79595c8575c2d3cd8219",
            "hasVariables": false,
            "variableCount": 0
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildChapterSummaryPrompt",
            "relatedMethods": [
              "buildChapterSummaryPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "await",
            "this",
            "safeMemoryOperation",
            "performUnifiedMemorySearch",
            "theme",
            "historicalData",
            "patterns",
            "trends",
            "getThemeHistoryContext",
            "const"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "7147eb8e8287d18ce4f40eb083e5c367"
      },
      {
        "id": "call_55a9819f",
        "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "fileName": "theme-analysis-service.ts",
        "lineNumber": 710,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 705,
              "content": "// 一貫性分析プロンプト（記憶システムからの情報を活用）",
              "indent": 6
            },
            {
              "lineNumber": 706,
              "content": "const prompt = this.buildConsistencyAnalysisPrompt(summaries, theme, themeHistory.data);",
              "indent": 6
            },
            {
              "lineNumber": 707,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 708,
              "content": "// APIスロットリングを使用して分析を実行",
              "indent": 6
            },
            {
              "lineNumber": 709,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 710,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 711,
              "content": "temperature: 0.3,",
              "indent": 10
            },
            {
              "lineNumber": 712,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 713,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 714,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 715,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 695,
            "distance": 15
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "章 ${index + 1} の要約生成に失敗しました",
            "fullLength": 27,
            "truncatedContent": "章 ${index + 1} の要約生成に失敗しました",
            "hash": "26937f9076a0051a8e17e8c940611146",
            "keywords": [
              "章",
              "生成"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "章 ${index + 1} の要約（生成失敗）",
            "fullLength": 24,
            "truncatedContent": "章 ${index + 1} の要約（生成失敗）",
            "hash": "deb5472f1a9d7405a2c0c73e0d545f91",
            "keywords": [
              "章",
              "生成"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "章 ${index + 1} の要約生成に失敗しました",
            "fullLength": 27,
            "truncatedContent": "章 ${index + 1} の要約生成に失敗しました",
            "hash": "26937f9076a0051a8e17e8c940611146",
            "keywords": [
              "章",
              "生成"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "章 ${index + 1} の要約（生成失敗）",
            "fullLength": 24,
            "truncatedContent": "章 ${index + 1} の要約（生成失敗）",
            "hash": "deb5472f1a9d7405a2c0c73e0d545f91",
            "keywords": [
              "章",
              "生成"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": " };\n        }\n      });\n\n      const summaries = await Promise.all(summaryPromises);\n\n      // 一貫性分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildConsistencyAnalysisPrompt(summaries, theme, themeHistory.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      // デフォルト値\n      const defaultAnalysis: ThemeConsistencyAnalysis = {\n        consistencyScore: 7,\n        strengthByChapter: contents.map(() => 5),\n        developmentPattern: \"テーマの発展が適度に続いています\",\n        weakPoints: [],\n        improvementSuggestions: [\n          ",
            "fullLength": 745,
            "truncatedContent": " };\n        }\n      });\n\n      const summaries = await Promise.all(summaryPromises);\n\n      // 一貫性分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildConsistencyAnalysisPrompt(summaries, theme, themeHistory.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      // デフォルト値\n      const defaultAnalysis: ThemeConsistencyAnalysis = {\n        consistencyScore: 7,\n        strengthByChapter: contents.map(() => 5),\n        developmentPattern: \"テーマの発展が適度に続いています\",\n        weakPoints: [],\n        improvementSuggestions: [\n          ",
            "hash": "42edc094e90efc52b3a177e12866c3c6",
            "keywords": [
              "分析",
              "story",
              "generate",
              "Chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ", {\n            error: error instanceof Error ? error.message : String(error)\n          });\n          return { chapterIndex: index, summary: ",
            "fullLength": 141,
            "truncatedContent": ", {\n            error: error instanceof Error ? error.message : String(error)\n          });\n          return { chapterIndex: index, summary: ",
            "hash": "72b5cd502e3f79595c8575c2d3cd8219",
            "hasVariables": false,
            "variableCount": 0
          },
          {
            "type": "template_literal",
            "content": " };\n        }\n      });\n\n      const summaries = await Promise.all(summaryPromises);\n\n      // 一貫性分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildConsistencyAnalysisPrompt(summaries, theme, themeHistory.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      // デフォルト値\n      const defaultAnalysis: ThemeConsistencyAnalysis = {\n        consistencyScore: 7,\n        strengthByChapter: contents.map(() => 5),\n        developmentPattern: \"テーマの発展が適度に続いています\",\n        weakPoints: [],\n        improvementSuggestions: [\n          ",
            "fullLength": 745,
            "truncatedContent": " };\n        }\n      });\n\n      const summaries = await Promise.all(summaryPromises);\n\n      // 一貫性分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildConsistencyAnalysisPrompt(summaries, theme, themeHistory.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      // デフォルト値\n      const defaultAnalysis: ThemeConsistencyAnalysis = {\n        consistencyScore: 7,\n        strengthByChapter: contents.map(() => 5),\n        developmentPattern: \"テーマの発展が適度に続いています\",\n        weakPoints: [],\n        improvementSuggestions: [\n          ",
            "hash": "42edc094e90efc52b3a177e12866c3c6",
            "hasVariables": false,
            "variableCount": 0
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildConsistencyAnalysisPrompt",
            "relatedMethods": [
              "buildConsistencyAnalysisPrompt",
              "defaultAnalysis",
              "ThemeConsistencyAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": ThemeConsistencyAnalysis"
            ],
            "extractedTypes": [
              "ThemeConsistencyAnalysis"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "分析",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "error",
            "instanceof",
            "Error",
            "message",
            "String",
            "return",
            "chapterIndex",
            "index",
            "summary",
            "const"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "5c4c8e9ba52be9199b2c92bc121ed144"
      },
      {
        "id": "call_40f41ebd",
        "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "fileName": "theme-analysis-service.ts",
        "lineNumber": 1811,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 1806,
              "content": "- significance: 重要度（0.0～1.0）",
              "indent": 0
            },
            {
              "lineNumber": 1807,
              "content": "- consequence: イベントの結果や影響（ある場合）",
              "indent": 0
            },
            {
              "lineNumber": 1808,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 1809,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1810,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 1811,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 1812,
              "content": "temperature: 0.3,",
              "indent": 10
            },
            {
              "lineNumber": 1813,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 1814,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 1815,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 1816,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 1777,
            "distance": 34
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      try {\n        const jsonMatch = response.match(/",
            "fullLength": 285,
            "truncatedContent": ";\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      try {\n        const jsonMatch = response.match(/",
            "hash": "81bee7338a6e5e923a87060bd8da3967",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ";\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      try {\n        const jsonMatch = response.match(/",
            "fullLength": 285,
            "truncatedContent": ";\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      try {\n        const jsonMatch = response.match(/",
            "hash": "81bee7338a6e5e923a87060bd8da3967",
            "hasVariables": false,
            "variableCount": 0
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "response_structure",
            "fields": [
              "match"
            ],
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "conflict",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "content",
            "substring",
            "JSON",
            "description",
            "involvedCharacters",
            "location",
            "type",
            "WARNING",
            "CONFLICT",
            "PROMISE"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "afd8216d5ef1494de105babde400bac3"
      },
      {
        "id": "call_3e4b2368",
        "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "fileName": "theme-analysis-service.ts",
        "lineNumber": 1897,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 1892,
              "content": "\"suggestions\": [\"提案1\", \"提案2\", \"提案3\"],",
              "indent": 2
            },
            {
              "lineNumber": 1893,
              "content": "\"symbolicPotential\": \"象徴的な意味や可能性の説明\"",
              "indent": 2
            },
            {
              "lineNumber": 1894,
              "content": "}`;",
              "indent": 0
            },
            {
              "lineNumber": 1895,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1896,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 1897,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 1898,
              "content": "temperature: 0.4,",
              "indent": 10
            },
            {
              "lineNumber": 1899,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 1900,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 1901,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 1902,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 1863,
            "distance": 34
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.4,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      const defaultResult: ThemeElementResonance = {\n        relevance: 5,\n        suggestions: [\n          ",
            "fullLength": 339,
            "truncatedContent": ";\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.4,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      const defaultResult: ThemeElementResonance = {\n        relevance: 5,\n        suggestions: [\n          ",
            "hash": "4c479f26b700baffa5dbb20d8eece1cc",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ";\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.4,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      const defaultResult: ThemeElementResonance = {\n        relevance: 5,\n        suggestions: [\n          ",
            "fullLength": 339,
            "truncatedContent": ";\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.4,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      const defaultResult: ThemeElementResonance = {\n        relevance: 5,\n        suggestions: [\n          ",
            "hash": "4c479f26b700baffa5dbb20d8eece1cc",
            "hasVariables": false,
            "variableCount": 0
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.4",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "logger",
            "info",
            "theme",
            "elementType",
            "const",
            "prompt",
            "context",
            "JSON",
            "relevance",
            "suggestions"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "16ad742e20afa0f8411c3cd242de7dc6"
      },
      {
        "id": "call_ad65bc8f",
        "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "fileName": "theme-analysis-service.ts",
        "lineNumber": 2064,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 2059,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 2060,
              "content": "提案を配列形式で出力してください:",
              "indent": 0
            },
            {
              "lineNumber": 2061,
              "content": "[\"提案1\", \"提案2\", \"提案3\"]`;",
              "indent": 0
            },
            {
              "lineNumber": 2062,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 2063,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 10
            }
          ],
          "current": {
            "lineNumber": 2064,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 2065,
              "content": "temperature: 0.4,",
              "indent": 14
            },
            {
              "lineNumber": 2066,
              "content": "purpose: 'suggestion',",
              "indent": 14
            },
            {
              "lineNumber": 2067,
              "content": "responseFormat: 'json'",
              "indent": 14
            },
            {
              "lineNumber": 2068,
              "content": "})",
              "indent": 12
            },
            {
              "lineNumber": 2069,
              "content": ");",
              "indent": 10
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 2046,
            "distance": 18
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[",
            "fullLength": 188,
            "truncatedContent": "\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[",
            "hash": "b67330adc59c5fcff7a760c2389c2846",
            "keywords": [
              "小説"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[\"提案1\", \"提案2\", \"提案3\"]",
            "fullLength": 208,
            "truncatedContent": "\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[\"提案1\", \"提案2\", \"提案3\"]",
            "hash": "7b36d498cdd2e99417364ed49e25928a",
            "keywords": [
              "小説"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ");\n\n          const prompt = `\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[\"提案1\", \"提案2\", \"提案3\"]`;\n\n          const response = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.4,\n              purpose: ",
            "fullLength": 420,
            "truncatedContent": ");\n\n          const prompt = `\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[\"提案1\", \"提案2\", \"提案3\"]`;\n\n          const response = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.4,\n              purpose: ",
            "hash": "97c042a0b0902e0cab4586eedb427157",
            "keywords": [
              "小説",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "象徴・モチーフの開発提案生成に失敗しました",
            "fullLength": 21,
            "truncatedContent": "象徴・モチーフの開発提案生成に失敗しました",
            "hash": "a19bf41d782f7114f41c427f466c74d4",
            "keywords": [
              "生成"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ");\n\n          const prompt = `\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[\"提案1\", \"提案2\", \"提案3\"]`;\n\n          const response = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.4,\n              purpose: ",
            "fullLength": 420,
            "truncatedContent": ");\n\n          const prompt = `\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[\"提案1\", \"提案2\", \"提案3\"]`;\n\n          const response = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.4,\n              purpose: ",
            "hash": "97c042a0b0902e0cab4586eedb427157",
            "keywords": [
              "小説",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "variable_assignment",
            "variableName": "prompt",
            "content": "\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[",
            "fullLength": 188,
            "truncatedContent": "\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[",
            "hash": "b67330adc59c5fcff7a760c2389c2846"
          },
          {
            "type": "template_literal",
            "content": "\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[\"提案1\", \"提案2\", \"提案3\"]",
            "fullLength": 208,
            "truncatedContent": "\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[\"提案1\", \"提案2\", \"提案3\"]",
            "hash": "7b36d498cdd2e99417364ed49e25928a",
            "hasVariables": true,
            "variableCount": 2
          }
        ],
        "expectedOutputs": [
          {
            "type": "response_structure",
            "fields": [
              "recurringMotifs",
              "developmentSuggestions"
            ],
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.4",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "dominantSymbols",
            "slice",
            "map",
            "any",
            "name",
            "join",
            "const",
            "topMotifs",
            "result",
            "recurringMotifs"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "b5d78bc4519f6de68a34dfb255909d69"
      },
      {
        "id": "call_360a38f7",
        "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "fileName": "theme-analysis-service.ts",
        "lineNumber": 2139,
        "lineContent": "this.geminiAdapter.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 2134,
              "content": "const chapterAnalysisPromises = contents.map(async (content, index) => {",
              "indent": 6
            },
            {
              "lineNumber": 2135,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 2136,
              "content": "const prompt = this.buildMotifAnalysisPrompt(content, index + 1, motif, motifContext.data);",
              "indent": 10
            },
            {
              "lineNumber": 2137,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 2138,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 10
            }
          ],
          "current": {
            "lineNumber": 2139,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 2140,
              "content": "temperature: 0.2,",
              "indent": 14
            },
            {
              "lineNumber": 2141,
              "content": "purpose: 'analysis',",
              "indent": 14
            },
            {
              "lineNumber": 2142,
              "content": "responseFormat: 'json'",
              "indent": 14
            },
            {
              "lineNumber": 2143,
              "content": "})",
              "indent": 12
            },
            {
              "lineNumber": 2144,
              "content": ");",
              "indent": 10
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 2122,
            "distance": 17
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\n      );\n\n      // 各章でのモチーフ出現を分析（並列処理で効率化）\n      const chapterAnalysisPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildMotifAnalysisPrompt(content, index + 1, motif, motifContext.data);\n\n          const response = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.2,\n              purpose: ",
            "fullLength": 418,
            "truncatedContent": "\n      );\n\n      // 各章でのモチーフ出現を分析（並列処理で効率化）\n      const chapterAnalysisPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildMotifAnalysisPrompt(content, index + 1, motif, motifContext.data);\n\n          const response = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.2,\n              purpose: ",
            "hash": "8191ddf8818eca5295c5f8ddad5824b3",
            "keywords": [
              "章",
              "分析",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n      );\n\n      // 各章でのモチーフ出現を分析（並列処理で効率化）\n      const chapterAnalysisPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildMotifAnalysisPrompt(content, index + 1, motif, motifContext.data);\n\n          const response = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.2,\n              purpose: ",
            "fullLength": 418,
            "truncatedContent": "\n      );\n\n      // 各章でのモチーフ出現を分析（並列処理で効率化）\n      const chapterAnalysisPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildMotifAnalysisPrompt(content, index + 1, motif, motifContext.data);\n\n          const response = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.2,\n              purpose: ",
            "hash": "8191ddf8818eca5295c5f8ddad5824b3",
            "keywords": [
              "章",
              "分析",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n      );\n\n      // 各章でのモチーフ出現を分析（並列処理で効率化）\n      const chapterAnalysisPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildMotifAnalysisPrompt(content, index + 1, motif, motifContext.data);\n\n          const response = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.2,\n              purpose: ",
            "fullLength": 418,
            "truncatedContent": "\n      );\n\n      // 各章でのモチーフ出現を分析（並列処理で効率化）\n      const chapterAnalysisPromises = contents.map(async (content, index) => {\n        try {\n          const prompt = this.buildMotifAnalysisPrompt(content, index + 1, motif, motifContext.data);\n\n          const response = await apiThrottler.throttledRequest(() =>\n            this.geminiAdapter.generateText(prompt, {\n              temperature: 0.2,\n              purpose: ",
            "hash": "8191ddf8818eca5295c5f8ddad5824b3",
            "keywords": [
              "章",
              "分析",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "chapterAnalysis",
            "relatedMethods": [
              "chapterAnalysis",
              "buildMotifAnalysisPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.2",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "this",
            "performUnifiedMemorySearch",
            "motif",
            "patterns",
            "previousOccurrences",
            "relatedElements",
            "getMotifContext",
            "const",
            "chapterAnalysisPromises",
            "contents"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "332383bd7655db30221380c8ef120b85"
      },
      {
        "id": "call_8f565bb1",
        "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "fileName": "theme-analysis-service.ts",
        "lineNumber": 2336,
        "lineContent": "this.geminiAdapter.generateText(developmentPrompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 2331,
              "content": "\"effectiveUses\": [\"効果的な使用例1\", \"効果的な使用例2\"],",
              "indent": 2
            },
            {
              "lineNumber": 2332,
              "content": "\"suggestions\": [\"提案1\", \"提案2\", \"提案3\"]",
              "indent": 2
            },
            {
              "lineNumber": 2333,
              "content": "}`;",
              "indent": 0
            },
            {
              "lineNumber": 2334,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 2335,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 2336,
            "content": "this.geminiAdapter.generateText(developmentPrompt, {",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 2337,
              "content": "temperature: 0.3,",
              "indent": 10
            },
            {
              "lineNumber": 2338,
              "content": "purpose: 'analysis',",
              "indent": 10
            },
            {
              "lineNumber": 2339,
              "content": "responseFormat: 'json'",
              "indent": 10
            },
            {
              "lineNumber": 2340,
              "content": "})",
              "indent": 8
            },
            {
              "lineNumber": 2341,
              "content": ");",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 2223,
            "distance": 113
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(developmentPrompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      const defaultDevelopment = {\n        developmentPattern: \"明確なパターンが検出されませんでした\",\n        thematicConnection: \"テーマとの明確な関連性は検出されませんでした\",\n        effectiveUses: [],\n        suggestions: [\n          ",
            "fullLength": 441,
            "truncatedContent": ";\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(developmentPrompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      const defaultDevelopment = {\n        developmentPattern: \"明確なパターンが検出されませんでした\",\n        thematicConnection: \"テーマとの明確な関連性は検出されませんでした\",\n        effectiveUses: [],\n        suggestions: [\n          ",
            "hash": "44ec635cb5448df680605a977024e911",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "]\n}`;\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(developmentPrompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      const defaultDevelopment = {\n        developmentPattern: ",
            "fullLength": 309,
            "truncatedContent": "]\n}`;\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(developmentPrompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      const defaultDevelopment = {\n        developmentPattern: ",
            "hash": "d1d7988625bba11513ebc0033cbac362",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ";\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(developmentPrompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      const defaultDevelopment = {\n        developmentPattern: \"明確なパターンが検出されませんでした\",\n        thematicConnection: \"テーマとの明確な関連性は検出されませんでした\",\n        effectiveUses: [],\n        suggestions: [\n          ",
            "fullLength": 441,
            "truncatedContent": ";\n\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(developmentPrompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      const defaultDevelopment = {\n        developmentPattern: \"明確なパターンが検出されませんでした\",\n        thematicConnection: \"テーマとの明確な関連性は検出されませんでした\",\n        effectiveUses: [],\n        suggestions: [\n          ",
            "hash": "44ec635cb5448df680605a977024e911",
            "hasVariables": false,
            "variableCount": 0
          },
          {
            "type": "method_based",
            "suggestedPurpose": "developmentPrompt",
            "relatedMethods": [
              "developmentPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "const",
            "developmentPrompt",
            "motif",
            "occurrencesText",
            "contextInfo",
            "JSON",
            "developmentPattern",
            "thematicConnection",
            "effectiveUses",
            "suggestions"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "bbd8d28cc16006706ec3eff599e753f9"
      },
      {
        "id": "call_2f85bbc6",
        "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
        "fileName": "character-analyzer.ts",
        "lineNumber": 234,
        "lineContent": "const result = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 229,
              "content": "\"suggestedAlternatives\": [\"代替行動1\", \"代替行動2\"] // 一貫性がない場合のみ",
              "indent": 2
            },
            {
              "lineNumber": 230,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 231,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 232,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 233,
              "content": "// AIによる一貫性検証",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 234,
            "content": "const result = await this.geminiClient.generateText(prompt, {",
            "indent": 6
          },
          "after": [
            {
              "lineNumber": 235,
              "content": "temperature: 0.3",
              "indent": 8
            },
            {
              "lineNumber": 236,
              "content": "});",
              "indent": 6
            },
            {
              "lineNumber": 237,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 238,
              "content": "// JSONを解析",
              "indent": 6
            },
            {
              "lineNumber": 239,
              "content": "const jsonMatch = result.match(/\\{[\\s\\S]*\\}/);",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 160,
            "distance": 74
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": ValidationResult"
            ],
            "extractedTypes": [
              "ValidationResult"
            ]
          },
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "response_structure",
            "fields": [
              "match"
            ],
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "rawValue": "temperature: 0.3",
            "confidence": "high"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "アクション"
          ],
          "storyElements": [
            "プロット",
            "plot"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "評価",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "this",
            "formatCharacterHistory",
            "character",
            "context",
            "proposedAction",
            "JSON",
            "consistent",
            "true",
            "false",
            "confidence"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "9690e16e0c38a36d072534939c89f69a"
      },
      {
        "id": "call_1f7dcda5",
        "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
        "fileName": "character-analyzer.ts",
        "lineNumber": 316,
        "lineContent": "const result = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 311,
              "content": "1は完全に一貫しており自然な行動、0は完全に矛盾している行動を意味します。",
              "indent": 0
            },
            {
              "lineNumber": 312,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 313,
              "content": "数値のみを出力してください。",
              "indent": 0
            },
            {
              "lineNumber": 314,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 315,
              "content": "",
              "indent": 7
            }
          ],
          "current": {
            "lineNumber": 316,
            "content": "const result = await this.geminiClient.generateText(prompt, {",
            "indent": 6
          },
          "after": [
            {
              "lineNumber": 317,
              "content": "temperature: 0.1,",
              "indent": 8
            },
            {
              "lineNumber": 318,
              "content": "targetLength: 10",
              "indent": 8
            },
            {
              "lineNumber": 319,
              "content": "});",
              "indent": 6
            },
            {
              "lineNumber": 320,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 321,
              "content": "// 数値を抽出",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 289,
            "distance": 27
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "キャラクター「${character.name}」の履歴比較に失敗しました",
            "fullLength": 37,
            "truncatedContent": "キャラクター「${character.name}」の履歴比較に失敗しました",
            "hash": "345a3584e94692d8689acfaf5e7a3cb3",
            "keywords": [
              "キャラクター",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\r\n      \r\n      const result = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.1,\r\n        targetLength: 10\r\n      });\r\n      \r\n      // 数値を抽出\r\n      const scoreMatch = result.match(/0\\.\\d+|1\\.0|1/);\r\n      if (scoreMatch) {\r\n        return parseFloat(scoreMatch[0]);\r\n      }\r\n      \r\n      // 数値が見つからない場合は中程度のスコア\r\n      return 0.7;\r\n    } catch (error) {\r\n      logger.error(",
            "fullLength": 401,
            "truncatedContent": ";\r\n      \r\n      const result = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.1,\r\n        targetLength: 10\r\n      });\r\n      \r\n      // 数値を抽出\r\n      const scoreMatch = result.match(/0\\.\\d+|1\\.0|1/);\r\n      if (scoreMatch) {\r\n        return parseFloat(scoreMatch[0]);\r\n      }\r\n      \r\n      // 数値が見つからない場合は中程度のスコア\r\n      return 0.7;\r\n    } catch (error) {\r\n      logger.error(",
            "hash": "9a754dbb57e1a81d0780117331ddd019",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ";\r\n      \r\n      const result = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.1,\r\n        targetLength: 10\r\n      });\r\n      \r\n      // 数値を抽出\r\n      const scoreMatch = result.match(/0\\.\\d+|1\\.0|1/);\r\n      if (scoreMatch) {\r\n        return parseFloat(scoreMatch[0]);\r\n      }\r\n      \r\n      // 数値が見つからない場合は中程度のスコア\r\n      return 0.7;\r\n    } catch (error) {\r\n      logger.error(",
            "fullLength": 401,
            "truncatedContent": ";\r\n      \r\n      const result = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.1,\r\n        targetLength: 10\r\n      });\r\n      \r\n      // 数値を抽出\r\n      const scoreMatch = result.match(/0\\.\\d+|1\\.0|1/);\r\n      if (scoreMatch) {\r\n        return parseFloat(scoreMatch[0]);\r\n      }\r\n      \r\n      // 数値が見つからない場合は中程度のスコア\r\n      return 0.7;\r\n    } catch (error) {\r\n      logger.error(",
            "hash": "9a754dbb57e1a81d0780117331ddd019",
            "hasVariables": false,
            "variableCount": 0
          }
        ],
        "expectedOutputs": [
          {
            "type": "response_structure",
            "fields": [
              "match"
            ],
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "アクション"
          ],
          "storyElements": [
            "プロット",
            "plot"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "作成",
            "分析",
            "評価",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "return",
            "const",
            "prompt",
            "character",
            "name",
            "type",
            "description",
            "this",
            "formatCharacterHistory",
            "proposedAction"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "1b5aa787157119b34f9b55546e225e87"
      },
      {
        "id": "call_2f85bbc6",
        "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
        "fileName": "character-analyzer.ts",
        "lineNumber": 234,
        "lineContent": "const result = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 229,
              "content": "\"suggestedAlternatives\": [\"代替行動1\", \"代替行動2\"] // 一貫性がない場合のみ",
              "indent": 2
            },
            {
              "lineNumber": 230,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 231,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 232,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 233,
              "content": "// AIによる一貫性検証",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 234,
            "content": "const result = await this.geminiClient.generateText(prompt, {",
            "indent": 6
          },
          "after": [
            {
              "lineNumber": 235,
              "content": "temperature: 0.3",
              "indent": 8
            },
            {
              "lineNumber": 236,
              "content": "});",
              "indent": 6
            },
            {
              "lineNumber": 237,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 238,
              "content": "// JSONを解析",
              "indent": 6
            },
            {
              "lineNumber": 239,
              "content": "const jsonMatch = result.match(/\\{[\\s\\S]*\\}/);",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 160,
            "distance": 74
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": ValidationResult"
            ],
            "extractedTypes": [
              "ValidationResult"
            ]
          },
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "response_structure",
            "fields": [
              "match"
            ],
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "rawValue": "temperature: 0.3",
            "confidence": "high"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "アクション"
          ],
          "storyElements": [
            "プロット",
            "plot"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "評価",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "this",
            "formatCharacterHistory",
            "character",
            "context",
            "proposedAction",
            "JSON",
            "consistent",
            "true",
            "false",
            "confidence"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "9690e16e0c38a36d072534939c89f69a"
      },
      {
        "id": "call_1f7dcda5",
        "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
        "fileName": "character-analyzer.ts",
        "lineNumber": 316,
        "lineContent": "const result = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 311,
              "content": "1は完全に一貫しており自然な行動、0は完全に矛盾している行動を意味します。",
              "indent": 0
            },
            {
              "lineNumber": 312,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 313,
              "content": "数値のみを出力してください。",
              "indent": 0
            },
            {
              "lineNumber": 314,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 315,
              "content": "",
              "indent": 7
            }
          ],
          "current": {
            "lineNumber": 316,
            "content": "const result = await this.geminiClient.generateText(prompt, {",
            "indent": 6
          },
          "after": [
            {
              "lineNumber": 317,
              "content": "temperature: 0.1,",
              "indent": 8
            },
            {
              "lineNumber": 318,
              "content": "targetLength: 10",
              "indent": 8
            },
            {
              "lineNumber": 319,
              "content": "});",
              "indent": 6
            },
            {
              "lineNumber": 320,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 321,
              "content": "// 数値を抽出",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 289,
            "distance": 27
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "キャラクター「${character.name}」の履歴比較に失敗しました",
            "fullLength": 37,
            "truncatedContent": "キャラクター「${character.name}」の履歴比較に失敗しました",
            "hash": "345a3584e94692d8689acfaf5e7a3cb3",
            "keywords": [
              "キャラクター",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\r\n      \r\n      const result = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.1,\r\n        targetLength: 10\r\n      });\r\n      \r\n      // 数値を抽出\r\n      const scoreMatch = result.match(/0\\.\\d+|1\\.0|1/);\r\n      if (scoreMatch) {\r\n        return parseFloat(scoreMatch[0]);\r\n      }\r\n      \r\n      // 数値が見つからない場合は中程度のスコア\r\n      return 0.7;\r\n    } catch (error) {\r\n      logger.error(",
            "fullLength": 401,
            "truncatedContent": ";\r\n      \r\n      const result = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.1,\r\n        targetLength: 10\r\n      });\r\n      \r\n      // 数値を抽出\r\n      const scoreMatch = result.match(/0\\.\\d+|1\\.0|1/);\r\n      if (scoreMatch) {\r\n        return parseFloat(scoreMatch[0]);\r\n      }\r\n      \r\n      // 数値が見つからない場合は中程度のスコア\r\n      return 0.7;\r\n    } catch (error) {\r\n      logger.error(",
            "hash": "9a754dbb57e1a81d0780117331ddd019",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ";\r\n      \r\n      const result = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.1,\r\n        targetLength: 10\r\n      });\r\n      \r\n      // 数値を抽出\r\n      const scoreMatch = result.match(/0\\.\\d+|1\\.0|1/);\r\n      if (scoreMatch) {\r\n        return parseFloat(scoreMatch[0]);\r\n      }\r\n      \r\n      // 数値が見つからない場合は中程度のスコア\r\n      return 0.7;\r\n    } catch (error) {\r\n      logger.error(",
            "fullLength": 401,
            "truncatedContent": ";\r\n      \r\n      const result = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.1,\r\n        targetLength: 10\r\n      });\r\n      \r\n      // 数値を抽出\r\n      const scoreMatch = result.match(/0\\.\\d+|1\\.0|1/);\r\n      if (scoreMatch) {\r\n        return parseFloat(scoreMatch[0]);\r\n      }\r\n      \r\n      // 数値が見つからない場合は中程度のスコア\r\n      return 0.7;\r\n    } catch (error) {\r\n      logger.error(",
            "hash": "9a754dbb57e1a81d0780117331ddd019",
            "hasVariables": false,
            "variableCount": 0
          }
        ],
        "expectedOutputs": [
          {
            "type": "response_structure",
            "fields": [
              "match"
            ],
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "アクション"
          ],
          "storyElements": [
            "プロット",
            "plot"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "作成",
            "分析",
            "評価",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "return",
            "const",
            "prompt",
            "character",
            "name",
            "type",
            "description",
            "this",
            "formatCharacterHistory",
            "proposedAction"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "1b5aa787157119b34f9b55546e225e87"
      },
      {
        "id": "call_af323c00",
        "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
        "fileName": "character-analyzer.ts",
        "lineNumber": 234,
        "lineContent": "const result = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 229,
              "content": "\"suggestedAlternatives\": [\"代替行動1\", \"代替行動2\"] // 一貫性がない場合のみ",
              "indent": 2
            },
            {
              "lineNumber": 230,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 231,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 232,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 233,
              "content": "// AIによる一貫性検証",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 234,
            "content": "const result = await this.geminiClient.generateText(prompt, {",
            "indent": 6
          },
          "after": [
            {
              "lineNumber": 235,
              "content": "temperature: 0.3",
              "indent": 8
            },
            {
              "lineNumber": 236,
              "content": "});",
              "indent": 6
            },
            {
              "lineNumber": 237,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 238,
              "content": "// JSONを解析",
              "indent": 6
            },
            {
              "lineNumber": 239,
              "content": "const jsonMatch = result.match(/\\{[\\s\\S]*\\}/);",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 160,
            "distance": 74
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": ValidationResult"
            ],
            "extractedTypes": [
              "ValidationResult"
            ]
          },
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "response_structure",
            "fields": [
              "match"
            ],
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "rawValue": "temperature: 0.3",
            "confidence": "high"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "アクション"
          ],
          "storyElements": [
            "プロット",
            "plot"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "評価",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "this",
            "formatCharacterHistory",
            "character",
            "context",
            "proposedAction",
            "JSON",
            "consistent",
            "true",
            "false",
            "confidence"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "8ee360e68f36fe2b3f14768a434800d4"
      },
      {
        "id": "call_d8b4231a",
        "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
        "fileName": "character-analyzer.ts",
        "lineNumber": 316,
        "lineContent": "const result = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 311,
              "content": "1は完全に一貫しており自然な行動、0は完全に矛盾している行動を意味します。",
              "indent": 0
            },
            {
              "lineNumber": 312,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 313,
              "content": "数値のみを出力してください。",
              "indent": 0
            },
            {
              "lineNumber": 314,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 315,
              "content": "",
              "indent": 7
            }
          ],
          "current": {
            "lineNumber": 316,
            "content": "const result = await this.geminiClient.generateText(prompt, {",
            "indent": 6
          },
          "after": [
            {
              "lineNumber": 317,
              "content": "temperature: 0.1,",
              "indent": 8
            },
            {
              "lineNumber": 318,
              "content": "targetLength: 10",
              "indent": 8
            },
            {
              "lineNumber": 319,
              "content": "});",
              "indent": 6
            },
            {
              "lineNumber": 320,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 321,
              "content": "// 数値を抽出",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 289,
            "distance": 27
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "キャラクター「${character.name}」の履歴比較に失敗しました",
            "fullLength": 37,
            "truncatedContent": "キャラクター「${character.name}」の履歴比較に失敗しました",
            "hash": "345a3584e94692d8689acfaf5e7a3cb3",
            "keywords": [
              "キャラクター",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\r\n      \r\n      const result = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.1,\r\n        targetLength: 10\r\n      });\r\n      \r\n      // 数値を抽出\r\n      const scoreMatch = result.match(/0\\.\\d+|1\\.0|1/);\r\n      if (scoreMatch) {\r\n        return parseFloat(scoreMatch[0]);\r\n      }\r\n      \r\n      // 数値が見つからない場合は中程度のスコア\r\n      return 0.7;\r\n    } catch (error) {\r\n      logger.error(",
            "fullLength": 401,
            "truncatedContent": ";\r\n      \r\n      const result = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.1,\r\n        targetLength: 10\r\n      });\r\n      \r\n      // 数値を抽出\r\n      const scoreMatch = result.match(/0\\.\\d+|1\\.0|1/);\r\n      if (scoreMatch) {\r\n        return parseFloat(scoreMatch[0]);\r\n      }\r\n      \r\n      // 数値が見つからない場合は中程度のスコア\r\n      return 0.7;\r\n    } catch (error) {\r\n      logger.error(",
            "hash": "9a754dbb57e1a81d0780117331ddd019",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ";\r\n      \r\n      const result = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.1,\r\n        targetLength: 10\r\n      });\r\n      \r\n      // 数値を抽出\r\n      const scoreMatch = result.match(/0\\.\\d+|1\\.0|1/);\r\n      if (scoreMatch) {\r\n        return parseFloat(scoreMatch[0]);\r\n      }\r\n      \r\n      // 数値が見つからない場合は中程度のスコア\r\n      return 0.7;\r\n    } catch (error) {\r\n      logger.error(",
            "fullLength": 401,
            "truncatedContent": ";\r\n      \r\n      const result = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.1,\r\n        targetLength: 10\r\n      });\r\n      \r\n      // 数値を抽出\r\n      const scoreMatch = result.match(/0\\.\\d+|1\\.0|1/);\r\n      if (scoreMatch) {\r\n        return parseFloat(scoreMatch[0]);\r\n      }\r\n      \r\n      // 数値が見つからない場合は中程度のスコア\r\n      return 0.7;\r\n    } catch (error) {\r\n      logger.error(",
            "hash": "9a754dbb57e1a81d0780117331ddd019",
            "hasVariables": false,
            "variableCount": 0
          }
        ],
        "expectedOutputs": [
          {
            "type": "response_structure",
            "fields": [
              "match"
            ],
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "アクション"
          ],
          "storyElements": [
            "プロット",
            "plot"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "作成",
            "分析",
            "評価",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "const",
            "prompt",
            "character",
            "name",
            "type",
            "description",
            "this",
            "formatCharacterHistory",
            "proposedAction",
            "result"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "a41463b5df3d2b8b8f5c475e5db05228"
      },
      {
        "id": "call_0dc98618",
        "filePath": "src\\lib\\characters\\core\\interfaces.ts",
        "fileName": "interfaces.ts",
        "lineNumber": 847,
        "lineContent": "// analyzeCharacter(id: string): Promise<any>;",
        "matchedPattern": "(\\w+\\.)?analyzeCharacter\\s*\\(",
        "callMethod": "analyzeCharacter",
        "fullMatch": "analyzeCharacter(",
        "context": {
          "before": [
            {
              "lineNumber": 842,
              "content": "// /**",
              "indent": 4
            },
            {
              "lineNumber": 843,
              "content": "//  * キャラクター分析",
              "indent": 4
            },
            {
              "lineNumber": 844,
              "content": "//  * @param id キャラクターID",
              "indent": 4
            },
            {
              "lineNumber": 845,
              "content": "//  * @returns 分析結果",
              "indent": 4
            },
            {
              "lineNumber": 846,
              "content": "//  */",
              "indent": 4
            }
          ],
          "current": {
            "lineNumber": 847,
            "content": "// analyzeCharacter(id: string): Promise<any>;",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 848,
              "content": "}",
              "indent": 2
            }
          ],
          "functionContext": {
            "functionName": "callback",
            "startLine": 776,
            "distance": 71
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<void>",
              ": Promise<any>"
            ],
            "extractedTypes": [
              "void>",
              "any>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "アクション"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "世界観",
            "plot"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "turns",
            "processCharacterDevelopment",
            "string",
            "events",
            "ChapterEvent",
            "Promise",
            "Character",
            "param",
            "char1Id",
            "char2Id"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": false,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "0a1b937d2d91a3bb4a71b49b737c8ad4"
      },
      {
        "id": "call_64726330",
        "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
        "fileName": "character-generator.ts",
        "lineNumber": 292,
        "lineContent": "() => this.geminiClient.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 287,
              "content": "[バックストーリー本文]",
              "indent": 0
            },
            {
              "lineNumber": 288,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 289,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 290,
              "content": "// リトライロジックを使用してAI生成",
              "indent": 12
            },
            {
              "lineNumber": 291,
              "content": "const backstory = await this.retryGenerationRequest(",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 292,
            "content": "() => this.geminiClient.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 293,
              "content": "temperature: 0.7,",
              "indent": 20
            },
            {
              "lineNumber": 294,
              "content": "targetLength: 1500",
              "indent": 20
            },
            {
              "lineNumber": 295,
              "content": "}),",
              "indent": 16
            },
            {
              "lineNumber": 296,
              "content": "'バックストーリー生成'",
              "indent": 16
            },
            {
              "lineNumber": 297,
              "content": ");",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 251,
            "distance": 41
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ").join('\\n') || '- (重要な出来事は特になし)'}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || '?'}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n",
            "fullLength": 127,
            "truncatedContent": ").join('\\n') || '- (重要な出来事は特になし)'}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || '?'}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n",
            "hash": "b63754088aa27046ac7fe81819d0a02d",
            "keywords": [
              "物語",
              "ストーリー",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "キャラクター「${character.name}」のバックストーリーを生成しました (${backstory.length}文字)",
            "fullLength": 65,
            "truncatedContent": "キャラクター「${character.name}」のバックストーリーを生成しました (${backstory.length}文字)",
            "hash": "6ce0e953f2314c1e57fda79296ec5c0a",
            "keywords": [
              "キャラクター",
              "ストーリー",
              "生成",
              "character",
              "story"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "キャラクター「${character.name}」のバックストーリー生成に失敗しました",
            "fullLength": 43,
            "truncatedContent": "キャラクター「${character.name}」のバックストーリー生成に失敗しました",
            "hash": "1db2ec83855afc276d100a57e5656189",
            "keywords": [
              "キャラクター",
              "ストーリー",
              "生成",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || ",
            "fullLength": 61,
            "truncatedContent": "}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || ",
            "hash": "6fb6f1dee79b23241996a3b9ee204c6d",
            "keywords": [
              "物語",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
            "fullLength": 308,
            "truncatedContent": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
            "hash": "6f6d9f42f5fa64a446d4a3c4ce8a2ae1",
            "keywords": [
              "ストーリー",
              "生成",
              "story",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                'バックストーリー生成'\n            );\n\n            logger.info(",
            "fullLength": 330,
            "truncatedContent": ";\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                'バックストーリー生成'\n            );\n\n            logger.info(",
            "hash": "90e13dbbe207daa122a29f6343cd8e6c",
            "keywords": [
              "生成",
              "ストーリー",
              "story",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "キャラクター「${character.name}」のバックストーリー生成に失敗しました",
            "fullLength": 43,
            "truncatedContent": "キャラクター「${character.name}」のバックストーリー生成に失敗しました",
            "hash": "1db2ec83855afc276d100a57e5656189",
            "keywords": [
              "キャラクター",
              "ストーリー",
              "生成",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
            "fullLength": 308,
            "truncatedContent": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
            "hash": "6f6d9f42f5fa64a446d4a3c4ce8a2ae1",
            "keywords": [
              "ストーリー",
              "生成",
              "story",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                'バックストーリー生成'\n            );\n\n            logger.info(",
            "fullLength": 330,
            "truncatedContent": ";\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                'バックストーリー生成'\n            );\n\n            logger.info(",
            "hash": "90e13dbbe207daa122a29f6343cd8e6c",
            "keywords": [
              "生成",
              "ストーリー",
              "story",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
            "fullLength": 308,
            "truncatedContent": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
            "hash": "6f6d9f42f5fa64a446d4a3c4ce8a2ae1",
            "keywords": [
              "ストーリー",
              "生成",
              "story",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ").join('\\n') || '- (重要な出来事は特になし)'}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || '?'}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n",
            "fullLength": 127,
            "truncatedContent": ").join('\\n') || '- (重要な出来事は特になし)'}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || '?'}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n",
            "hash": "b63754088aa27046ac7fe81819d0a02d",
            "hasVariables": true,
            "variableCount": 1
          },
          {
            "type": "method_based",
            "suggestedPurpose": "retryGeneration",
            "relatedMethods": [
              "retryGeneration"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.7",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF"
          ],
          "storyElements": [
            "設定",
            "世界観",
            "背景",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "character",
            "personality",
            "values",
            "join",
            "quirks",
            "backstory",
            "origin",
            "significantEvents",
            "map",
            "event"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "905cd400dde066bf416323c1eff6ee38"
      },
      {
        "id": "call_3cf732e2",
        "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
        "fileName": "character-generator.ts",
        "lineNumber": 445,
        "lineContent": "const result = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 440,
              "content": "${template.personality?.traits?.join(', ') || ''}",
              "indent": 0
            },
            {
              "lineNumber": 441,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 442,
              "content": "名前だけを出力してください。",
              "indent": 0
            },
            {
              "lineNumber": 443,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 444,
              "content": "",
              "indent": 0
            }
          ],
          "current": {
            "lineNumber": 445,
            "content": "const result = await this.geminiClient.generateText(prompt, {",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 446,
              "content": "temperature: 0.7,",
              "indent": 16
            },
            {
              "lineNumber": 447,
              "content": "targetLength: 50",
              "indent": 16
            },
            {
              "lineNumber": 448,
              "content": "});",
              "indent": 12
            },
            {
              "lineNumber": 449,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 450,
              "content": "// 余分な記号やスペースを削除",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 423,
            "distance": 22
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
            "fullLength": 432,
            "truncatedContent": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
            "hash": "54d2bd2eafec3617eade2e3e3f976f7f",
            "keywords": [
              "キャラクター",
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
            "fullLength": 432,
            "truncatedContent": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
            "hash": "54d2bd2eafec3617eade2e3e3f976f7f",
            "keywords": [
              "キャラクター",
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
            "fullLength": 432,
            "truncatedContent": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
            "hash": "54d2bd2eafec3617eade2e3e3f976f7f",
            "keywords": [
              "キャラクター",
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "}\n\n名前だけを出力してください。\n`;\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, ",
            "fullLength": 260,
            "truncatedContent": "}\n\n名前だけを出力してください。\n`;\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, ",
            "hash": "0fbc4586b86a373e88cf3b8b1e7d3ef7",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
            "fullLength": 432,
            "truncatedContent": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
            "hash": "54d2bd2eafec3617eade2e3e3f976f7f",
            "hasVariables": false,
            "variableCount": 0
          }
        ],
        "expectedOutputs": [
          {
            "type": "response_structure",
            "fields": [
              "trim"
            ],
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.7",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF"
          ],
          "storyElements": [
            "設定",
            "世界観",
            "背景",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "作成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "data",
            "worldData",
            "typeof",
            "object",
            "description",
            "worldDescription",
            "const",
            "prompt",
            "template",
            "name"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "9e135a97103d2a88168af9fea8fc3b9c"
      },
      {
        "id": "call_60439f63",
        "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
        "fileName": "character-generator.ts",
        "lineNumber": 626,
        "lineContent": "const result = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 621,
              "content": "\"strength\": 0から1の数値（関係の強さ）,",
              "indent": 2
            },
            {
              "lineNumber": 622,
              "content": "\"description\": \"関係の簡潔な説明\"",
              "indent": 2
            },
            {
              "lineNumber": 623,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 624,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 625,
              "content": "",
              "indent": 0
            }
          ],
          "current": {
            "lineNumber": 626,
            "content": "const result = await this.geminiClient.generateText(prompt, {",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 627,
              "content": "temperature: 0.7,",
              "indent": 16
            },
            {
              "lineNumber": 628,
              "content": "targetLength: 200",
              "indent": 16
            },
            {
              "lineNumber": 629,
              "content": "});",
              "indent": 12
            },
            {
              "lineNumber": 630,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 631,
              "content": "// JSONを解析",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 576,
            "distance": 50
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "}\n\n次の関係タイプから最も適切なものを選んでください:\nFRIEND, ENEMY, RIVAL, MENTOR, STUDENT, PARENT, CHILD, LOVER, PROTECTOR, PROTECTED, COLLEAGUE, NEUTRAL\n\nJSONフォーマットで回答してください:\n{\n  \"type\": \"関係タイプ\",\n  \"strength\": 0から1の数値（関係の強さ）,\n  \"description\": \"関係の簡潔な説明\"\n}\n`;\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 200\n            });\n\n            // JSONを解析\n            const jsonMatch = result.match(/\\{[\\s\\S]*\\}/);\n            if (!jsonMatch) {\n                throw new Error(",
            "fullLength": 541,
            "truncatedContent": "}\n\n次の関係タイプから最も適切なものを選んでください:\nFRIEND, ENEMY, RIVAL, MENTOR, STUDENT, PARENT, CHILD, LOVER, PROTECTOR, PROTECTED, COLLEAGUE, NEUTRAL\n\nJSONフォーマットで回答してください:\n{\n  \"type\": \"関係タイプ\",\n  \"strength\": 0から1の数値（関係の強さ）,\n  \"description\": \"関係の簡潔な説明\"\n}\n`;\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 200\n            });\n\n            // JSONを解析\n            const jsonMatch = result.match(/\\{[\\s\\S]*\\}/);\n            if (!jsonMatch) {\n                throw new Error(",
            "hash": "c4152b1ab5abef6d566d2f29f6f57b31",
            "keywords": [
              "description",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "response_structure",
            "fields": [
              "match"
            ],
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.7",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF"
          ],
          "storyElements": [
            "設定",
            "世界観",
            "背景",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "構築",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "character",
            "personality",
            "traits",
            "join",
            "targetCharacter",
            "name",
            "type",
            "description",
            "FRIEND",
            "ENEMY"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "5a0877d24f989f441c0047695890a57b"
      },
      {
        "id": "call_64726330",
        "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
        "fileName": "character-generator.ts",
        "lineNumber": 292,
        "lineContent": "() => this.geminiClient.generateText(prompt, {",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 287,
              "content": "[バックストーリー本文]",
              "indent": 0
            },
            {
              "lineNumber": 288,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 289,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 290,
              "content": "// リトライロジックを使用してAI生成",
              "indent": 12
            },
            {
              "lineNumber": 291,
              "content": "const backstory = await this.retryGenerationRequest(",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 292,
            "content": "() => this.geminiClient.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 293,
              "content": "temperature: 0.7,",
              "indent": 20
            },
            {
              "lineNumber": 294,
              "content": "targetLength: 1500",
              "indent": 20
            },
            {
              "lineNumber": 295,
              "content": "}),",
              "indent": 16
            },
            {
              "lineNumber": 296,
              "content": "'バックストーリー生成'",
              "indent": 16
            },
            {
              "lineNumber": 297,
              "content": ");",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 251,
            "distance": 41
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ").join('\\n') || '- (重要な出来事は特になし)'}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || '?'}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n",
            "fullLength": 127,
            "truncatedContent": ").join('\\n') || '- (重要な出来事は特になし)'}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || '?'}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n",
            "hash": "b63754088aa27046ac7fe81819d0a02d",
            "keywords": [
              "物語",
              "ストーリー",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "キャラクター「${character.name}」のバックストーリーを生成しました (${backstory.length}文字)",
            "fullLength": 65,
            "truncatedContent": "キャラクター「${character.name}」のバックストーリーを生成しました (${backstory.length}文字)",
            "hash": "6ce0e953f2314c1e57fda79296ec5c0a",
            "keywords": [
              "キャラクター",
              "ストーリー",
              "生成",
              "character",
              "story"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "キャラクター「${character.name}」のバックストーリー生成に失敗しました",
            "fullLength": 43,
            "truncatedContent": "キャラクター「${character.name}」のバックストーリー生成に失敗しました",
            "hash": "1db2ec83855afc276d100a57e5656189",
            "keywords": [
              "キャラクター",
              "ストーリー",
              "生成",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || ",
            "fullLength": 61,
            "truncatedContent": "}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || ",
            "hash": "6fb6f1dee79b23241996a3b9ee204c6d",
            "keywords": [
              "物語",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
            "fullLength": 308,
            "truncatedContent": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
            "hash": "6f6d9f42f5fa64a446d4a3c4ce8a2ae1",
            "keywords": [
              "ストーリー",
              "生成",
              "story",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                'バックストーリー生成'\n            );\n\n            logger.info(",
            "fullLength": 330,
            "truncatedContent": ";\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                'バックストーリー生成'\n            );\n\n            logger.info(",
            "hash": "90e13dbbe207daa122a29f6343cd8e6c",
            "keywords": [
              "生成",
              "ストーリー",
              "story",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "キャラクター「${character.name}」のバックストーリー生成に失敗しました",
            "fullLength": 43,
            "truncatedContent": "キャラクター「${character.name}」のバックストーリー生成に失敗しました",
            "hash": "1db2ec83855afc276d100a57e5656189",
            "keywords": [
              "キャラクター",
              "ストーリー",
              "生成",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
            "fullLength": 308,
            "truncatedContent": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
            "hash": "6f6d9f42f5fa64a446d4a3c4ce8a2ae1",
            "keywords": [
              "ストーリー",
              "生成",
              "story",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                'バックストーリー生成'\n            );\n\n            logger.info(",
            "fullLength": 330,
            "truncatedContent": ";\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                'バックストーリー生成'\n            );\n\n            logger.info(",
            "hash": "90e13dbbe207daa122a29f6343cd8e6c",
            "keywords": [
              "生成",
              "ストーリー",
              "story",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
            "fullLength": 308,
            "truncatedContent": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
            "hash": "6f6d9f42f5fa64a446d4a3c4ce8a2ae1",
            "keywords": [
              "ストーリー",
              "生成",
              "story",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ").join('\\n') || '- (重要な出来事は特になし)'}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || '?'}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n",
            "fullLength": 127,
            "truncatedContent": ").join('\\n') || '- (重要な出来事は特になし)'}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || '?'}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n",
            "hash": "b63754088aa27046ac7fe81819d0a02d",
            "hasVariables": true,
            "variableCount": 1
          },
          {
            "type": "method_based",
            "suggestedPurpose": "retryGeneration",
            "relatedMethods": [
              "retryGeneration"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.7",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF"
          ],
          "storyElements": [
            "設定",
            "世界観",
            "背景",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "character",
            "personality",
            "values",
            "join",
            "quirks",
            "backstory",
            "origin",
            "significantEvents",
            "map",
            "event"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "905cd400dde066bf416323c1eff6ee38"
      },
      {
        "id": "call_3cf732e2",
        "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
        "fileName": "character-generator.ts",
        "lineNumber": 445,
        "lineContent": "const result = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 440,
              "content": "${template.personality?.traits?.join(', ') || ''}",
              "indent": 0
            },
            {
              "lineNumber": 441,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 442,
              "content": "名前だけを出力してください。",
              "indent": 0
            },
            {
              "lineNumber": 443,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 444,
              "content": "",
              "indent": 0
            }
          ],
          "current": {
            "lineNumber": 445,
            "content": "const result = await this.geminiClient.generateText(prompt, {",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 446,
              "content": "temperature: 0.7,",
              "indent": 16
            },
            {
              "lineNumber": 447,
              "content": "targetLength: 50",
              "indent": 16
            },
            {
              "lineNumber": 448,
              "content": "});",
              "indent": 12
            },
            {
              "lineNumber": 449,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 450,
              "content": "// 余分な記号やスペースを削除",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 423,
            "distance": 22
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
            "fullLength": 432,
            "truncatedContent": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
            "hash": "54d2bd2eafec3617eade2e3e3f976f7f",
            "keywords": [
              "キャラクター",
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
            "fullLength": 432,
            "truncatedContent": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
            "hash": "54d2bd2eafec3617eade2e3e3f976f7f",
            "keywords": [
              "キャラクター",
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
            "fullLength": 432,
            "truncatedContent": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
            "hash": "54d2bd2eafec3617eade2e3e3f976f7f",
            "keywords": [
              "キャラクター",
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "}\n\n名前だけを出力してください。\n`;\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, ",
            "fullLength": 260,
            "truncatedContent": "}\n\n名前だけを出力してください。\n`;\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, ",
            "hash": "0fbc4586b86a373e88cf3b8b1e7d3ef7",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
            "fullLength": 432,
            "truncatedContent": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
            "hash": "54d2bd2eafec3617eade2e3e3f976f7f",
            "hasVariables": false,
            "variableCount": 0
          }
        ],
        "expectedOutputs": [
          {
            "type": "response_structure",
            "fields": [
              "trim"
            ],
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.7",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF"
          ],
          "storyElements": [
            "設定",
            "世界観",
            "背景",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "作成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "data",
            "worldData",
            "typeof",
            "object",
            "description",
            "worldDescription",
            "const",
            "prompt",
            "template",
            "name"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "9e135a97103d2a88168af9fea8fc3b9c"
      },
      {
        "id": "call_60439f63",
        "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
        "fileName": "character-generator.ts",
        "lineNumber": 626,
        "lineContent": "const result = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 621,
              "content": "\"strength\": 0から1の数値（関係の強さ）,",
              "indent": 2
            },
            {
              "lineNumber": 622,
              "content": "\"description\": \"関係の簡潔な説明\"",
              "indent": 2
            },
            {
              "lineNumber": 623,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 624,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 625,
              "content": "",
              "indent": 0
            }
          ],
          "current": {
            "lineNumber": 626,
            "content": "const result = await this.geminiClient.generateText(prompt, {",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 627,
              "content": "temperature: 0.7,",
              "indent": 16
            },
            {
              "lineNumber": 628,
              "content": "targetLength: 200",
              "indent": 16
            },
            {
              "lineNumber": 629,
              "content": "});",
              "indent": 12
            },
            {
              "lineNumber": 630,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 631,
              "content": "// JSONを解析",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 576,
            "distance": 50
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "}\n\n次の関係タイプから最も適切なものを選んでください:\nFRIEND, ENEMY, RIVAL, MENTOR, STUDENT, PARENT, CHILD, LOVER, PROTECTOR, PROTECTED, COLLEAGUE, NEUTRAL\n\nJSONフォーマットで回答してください:\n{\n  \"type\": \"関係タイプ\",\n  \"strength\": 0から1の数値（関係の強さ）,\n  \"description\": \"関係の簡潔な説明\"\n}\n`;\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 200\n            });\n\n            // JSONを解析\n            const jsonMatch = result.match(/\\{[\\s\\S]*\\}/);\n            if (!jsonMatch) {\n                throw new Error(",
            "fullLength": 541,
            "truncatedContent": "}\n\n次の関係タイプから最も適切なものを選んでください:\nFRIEND, ENEMY, RIVAL, MENTOR, STUDENT, PARENT, CHILD, LOVER, PROTECTOR, PROTECTED, COLLEAGUE, NEUTRAL\n\nJSONフォーマットで回答してください:\n{\n  \"type\": \"関係タイプ\",\n  \"strength\": 0から1の数値（関係の強さ）,\n  \"description\": \"関係の簡潔な説明\"\n}\n`;\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 200\n            });\n\n            // JSONを解析\n            const jsonMatch = result.match(/\\{[\\s\\S]*\\}/);\n            if (!jsonMatch) {\n                throw new Error(",
            "hash": "c4152b1ab5abef6d566d2f29f6f57b31",
            "keywords": [
              "description",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "response_structure",
            "fields": [
              "match"
            ],
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.7",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF"
          ],
          "storyElements": [
            "設定",
            "世界観",
            "背景",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "構築",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "character",
            "personality",
            "traits",
            "join",
            "targetCharacter",
            "name",
            "type",
            "description",
            "FRIEND",
            "ENEMY"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "5a0877d24f989f441c0047695890a57b"
      },
      {
        "id": "call_2101b18c",
        "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
        "fileName": "character-generator.ts",
        "lineNumber": 292,
        "lineContent": "() => this.geminiClient.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 287,
              "content": "[バックストーリー本文]",
              "indent": 0
            },
            {
              "lineNumber": 288,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 289,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 290,
              "content": "// リトライロジックを使用してAI生成",
              "indent": 12
            },
            {
              "lineNumber": 291,
              "content": "const backstory = await this.retryGenerationRequest(",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 292,
            "content": "() => this.geminiClient.generateText(prompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 293,
              "content": "temperature: 0.7,",
              "indent": 20
            },
            {
              "lineNumber": 294,
              "content": "targetLength: 1500",
              "indent": 20
            },
            {
              "lineNumber": 295,
              "content": "}),",
              "indent": 16
            },
            {
              "lineNumber": 296,
              "content": "'バックストーリー生成'",
              "indent": 16
            },
            {
              "lineNumber": 297,
              "content": ");",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 251,
            "distance": 41
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ").join('\\n') || '- (重要な出来事は特になし)'}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || '?'}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n",
            "fullLength": 127,
            "truncatedContent": ").join('\\n') || '- (重要な出来事は特になし)'}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || '?'}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n",
            "hash": "b63754088aa27046ac7fe81819d0a02d",
            "keywords": [
              "物語",
              "ストーリー",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "キャラクター「${character.name}」のバックストーリーを生成しました (${backstory.length}文字)",
            "fullLength": 65,
            "truncatedContent": "キャラクター「${character.name}」のバックストーリーを生成しました (${backstory.length}文字)",
            "hash": "6ce0e953f2314c1e57fda79296ec5c0a",
            "keywords": [
              "キャラクター",
              "ストーリー",
              "生成",
              "character",
              "story"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "キャラクター「${character.name}」のバックストーリー生成に失敗しました",
            "fullLength": 43,
            "truncatedContent": "キャラクター「${character.name}」のバックストーリー生成に失敗しました",
            "hash": "1db2ec83855afc276d100a57e5656189",
            "keywords": [
              "キャラクター",
              "ストーリー",
              "生成",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || ",
            "fullLength": 61,
            "truncatedContent": "}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || ",
            "hash": "6fb6f1dee79b23241996a3b9ee204c6d",
            "keywords": [
              "物語",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
            "fullLength": 308,
            "truncatedContent": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
            "hash": "6f6d9f42f5fa64a446d4a3c4ce8a2ae1",
            "keywords": [
              "ストーリー",
              "生成",
              "story",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                'バックストーリー生成'\n            );\n\n            logger.info(",
            "fullLength": 330,
            "truncatedContent": ";\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                'バックストーリー生成'\n            );\n\n            logger.info(",
            "hash": "90e13dbbe207daa122a29f6343cd8e6c",
            "keywords": [
              "生成",
              "ストーリー",
              "story",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "キャラクター「${character.name}」のバックストーリー生成に失敗しました",
            "fullLength": 43,
            "truncatedContent": "キャラクター「${character.name}」のバックストーリー生成に失敗しました",
            "hash": "1db2ec83855afc276d100a57e5656189",
            "keywords": [
              "キャラクター",
              "ストーリー",
              "生成",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
            "fullLength": 308,
            "truncatedContent": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
            "hash": "6f6d9f42f5fa64a446d4a3c4ce8a2ae1",
            "keywords": [
              "ストーリー",
              "生成",
              "story",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                'バックストーリー生成'\n            );\n\n            logger.info(",
            "fullLength": 330,
            "truncatedContent": ";\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                'バックストーリー生成'\n            );\n\n            logger.info(",
            "hash": "90e13dbbe207daa122a29f6343cd8e6c",
            "keywords": [
              "生成",
              "ストーリー",
              "story",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
            "fullLength": 308,
            "truncatedContent": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
            "hash": "6f6d9f42f5fa64a446d4a3c4ce8a2ae1",
            "keywords": [
              "ストーリー",
              "生成",
              "story",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ").join('\\n') || '- (重要な出来事は特になし)'}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || '?'}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n",
            "fullLength": 127,
            "truncatedContent": ").join('\\n') || '- (重要な出来事は特になし)'}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || '?'}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n",
            "hash": "b63754088aa27046ac7fe81819d0a02d",
            "hasVariables": true,
            "variableCount": 1
          },
          {
            "type": "method_based",
            "suggestedPurpose": "retryGeneration",
            "relatedMethods": [
              "retryGeneration"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.7",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF"
          ],
          "storyElements": [
            "設定",
            "世界観",
            "背景",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "character",
            "personality",
            "values",
            "join",
            "quirks",
            "backstory",
            "origin",
            "significantEvents",
            "map",
            "event"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "3a481f6ac22fea1948db938e4449afa1"
      },
      {
        "id": "call_47a728bd",
        "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
        "fileName": "character-generator.ts",
        "lineNumber": 445,
        "lineContent": "const result = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 440,
              "content": "${template.personality?.traits?.join(', ') || ''}",
              "indent": 0
            },
            {
              "lineNumber": 441,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 442,
              "content": "名前だけを出力してください。",
              "indent": 0
            },
            {
              "lineNumber": 443,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 444,
              "content": "",
              "indent": 0
            }
          ],
          "current": {
            "lineNumber": 445,
            "content": "const result = await this.geminiClient.generateText(prompt, {",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 446,
              "content": "temperature: 0.7,",
              "indent": 16
            },
            {
              "lineNumber": 447,
              "content": "targetLength: 50",
              "indent": 16
            },
            {
              "lineNumber": 448,
              "content": "});",
              "indent": 12
            },
            {
              "lineNumber": 449,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 450,
              "content": "// 余分な記号やスペースを削除",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 423,
            "distance": 22
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
            "fullLength": 432,
            "truncatedContent": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
            "hash": "54d2bd2eafec3617eade2e3e3f976f7f",
            "keywords": [
              "キャラクター",
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
            "fullLength": 432,
            "truncatedContent": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
            "hash": "54d2bd2eafec3617eade2e3e3f976f7f",
            "keywords": [
              "キャラクター",
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
            "fullLength": 432,
            "truncatedContent": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
            "hash": "54d2bd2eafec3617eade2e3e3f976f7f",
            "keywords": [
              "キャラクター",
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "}\n\n名前だけを出力してください。\n`;\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, ",
            "fullLength": 260,
            "truncatedContent": "}\n\n名前だけを出力してください。\n`;\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, ",
            "hash": "0fbc4586b86a373e88cf3b8b1e7d3ef7",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
            "fullLength": 432,
            "truncatedContent": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
            "hash": "54d2bd2eafec3617eade2e3e3f976f7f",
            "hasVariables": false,
            "variableCount": 0
          }
        ],
        "expectedOutputs": [
          {
            "type": "response_structure",
            "fields": [
              "trim"
            ],
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.7",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF"
          ],
          "storyElements": [
            "設定",
            "世界観",
            "背景",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "作成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "worldData",
            "typeof",
            "object",
            "description",
            "worldDescription",
            "const",
            "prompt",
            "template",
            "name",
            "personality"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "ba4234df44a354a4ee971a14bacbb4d7"
      },
      {
        "id": "call_fd3f8227",
        "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
        "fileName": "character-generator.ts",
        "lineNumber": 626,
        "lineContent": "const result = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 621,
              "content": "\"strength\": 0から1の数値（関係の強さ）,",
              "indent": 2
            },
            {
              "lineNumber": 622,
              "content": "\"description\": \"関係の簡潔な説明\"",
              "indent": 2
            },
            {
              "lineNumber": 623,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 624,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 625,
              "content": "",
              "indent": 0
            }
          ],
          "current": {
            "lineNumber": 626,
            "content": "const result = await this.geminiClient.generateText(prompt, {",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 627,
              "content": "temperature: 0.7,",
              "indent": 16
            },
            {
              "lineNumber": 628,
              "content": "targetLength: 200",
              "indent": 16
            },
            {
              "lineNumber": 629,
              "content": "});",
              "indent": 12
            },
            {
              "lineNumber": 630,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 631,
              "content": "// JSONを解析",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 576,
            "distance": 50
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "}\n\n次の関係タイプから最も適切なものを選んでください:\nFRIEND, ENEMY, RIVAL, MENTOR, STUDENT, PARENT, CHILD, LOVER, PROTECTOR, PROTECTED, COLLEAGUE, NEUTRAL\n\nJSONフォーマットで回答してください:\n{\n  \"type\": \"関係タイプ\",\n  \"strength\": 0から1の数値（関係の強さ）,\n  \"description\": \"関係の簡潔な説明\"\n}\n`;\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 200\n            });\n\n            // JSONを解析\n            const jsonMatch = result.match(/\\{[\\s\\S]*\\}/);\n            if (!jsonMatch) {\n                throw new Error(",
            "fullLength": 541,
            "truncatedContent": "}\n\n次の関係タイプから最も適切なものを選んでください:\nFRIEND, ENEMY, RIVAL, MENTOR, STUDENT, PARENT, CHILD, LOVER, PROTECTOR, PROTECTED, COLLEAGUE, NEUTRAL\n\nJSONフォーマットで回答してください:\n{\n  \"type\": \"関係タイプ\",\n  \"strength\": 0から1の数値（関係の強さ）,\n  \"description\": \"関係の簡潔な説明\"\n}\n`;\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 200\n            });\n\n            // JSONを解析\n            const jsonMatch = result.match(/\\{[\\s\\S]*\\}/);\n            if (!jsonMatch) {\n                throw new Error(",
            "hash": "c4152b1ab5abef6d566d2f29f6f57b31",
            "keywords": [
              "description",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "response_structure",
            "fields": [
              "match"
            ],
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.7",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF"
          ],
          "storyElements": [
            "設定",
            "世界観",
            "背景",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "構築",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "racter",
            "personality",
            "traits",
            "join",
            "targetCharacter",
            "name",
            "type",
            "description",
            "FRIEND",
            "ENEMY"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "a05721daaf168a883dc0ea01b0894d12"
      },
      {
        "id": "call_239288c0",
        "filePath": "src\\lib\\characters\\manager.ts",
        "fileName": "manager.ts",
        "lineNumber": 463,
        "lineContent": "async analyzeCharacter(characterId: string): Promise<any> {",
        "matchedPattern": "(\\w+\\.)?analyzeCharacter\\s*\\(",
        "callMethod": "analyzeCharacter",
        "fullMatch": "analyzeCharacter(",
        "context": {
          "before": [
            {
              "lineNumber": 458,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 459,
              "content": "/**",
              "indent": 4
            },
            {
              "lineNumber": 460,
              "content": "* キャラクター分析",
              "indent": 5
            },
            {
              "lineNumber": 461,
              "content": "* 複数サービスからの分析結果を統合",
              "indent": 5
            },
            {
              "lineNumber": 462,
              "content": "*/",
              "indent": 5
            }
          ],
          "current": {
            "lineNumber": 463,
            "content": "async analyzeCharacter(characterId: string): Promise<any> {",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 464,
              "content": "return this.executeOperation(",
              "indent": 8
            },
            {
              "lineNumber": 465,
              "content": "'analyzeCharacter',",
              "indent": 12
            },
            {
              "lineNumber": 466,
              "content": "async () => {",
              "indent": 12
            },
            {
              "lineNumber": 467,
              "content": "const character = await this.characterService.getCharacter(characterId);",
              "indent": 16
            },
            {
              "lineNumber": 468,
              "content": "if (!character) {",
              "indent": 16
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 433,
            "distance": 30
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ",\r\n            () => this.relationshipService!.analyzeRelationshipDynamics()\r\n        );\r\n    }\r\n\r\n    // ============================================================================\r\n    // 分析機能（複数サービス統合）\r\n    // ============================================================================\r\n\r\n    /**\r\n     * キャラクター分析\r\n     * 複数サービスからの分析結果を統合\r\n     */\r\n    async analyzeCharacter(characterId: string): Promise<any> {\r\n        return this.executeOperation(\r\n            ",
            "fullLength": 470,
            "truncatedContent": ",\r\n            () => this.relationshipService!.analyzeRelationshipDynamics()\r\n        );\r\n    }\r\n\r\n    // ============================================================================\r\n    // 分析機能（複数サービス統合）\r\n    // ============================================================================\r\n\r\n    /**\r\n     * キャラクター分析\r\n     * 複数サービスからの分析結果を統合\r\n     */\r\n    async analyzeCharacter(characterId: string): Promise<any> {\r\n        return this.executeOperation(\r\n            ",
            "hash": "1f993291c1f9fbb1f7930b0a9ba84734",
            "keywords": [
              "分析",
              "キャラクター",
              "analyze",
              "Character",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ",\r\n            () => this.relationshipService!.analyzeRelationshipDynamics()\r\n        );\r\n    }\r\n\r\n    // ============================================================================\r\n    // 分析機能（複数サービス統合）\r\n    // ============================================================================\r\n\r\n    /**\r\n     * キャラクター分析\r\n     * 複数サービスからの分析結果を統合\r\n     */\r\n    async analyzeCharacter(characterId: string): Promise<any> {\r\n        return this.executeOperation(\r\n            ",
            "fullLength": 470,
            "truncatedContent": ",\r\n            () => this.relationshipService!.analyzeRelationshipDynamics()\r\n        );\r\n    }\r\n\r\n    // ============================================================================\r\n    // 分析機能（複数サービス統合）\r\n    // ============================================================================\r\n\r\n    /**\r\n     * キャラクター分析\r\n     * 複数サービスからの分析結果を統合\r\n     */\r\n    async analyzeCharacter(characterId: string): Promise<any> {\r\n        return this.executeOperation(\r\n            ",
            "hash": "1f993291c1f9fbb1f7930b0a9ba84734",
            "keywords": [
              "分析",
              "キャラクター",
              "analyze",
              "Character",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ",\r\n            () => this.relationshipService!.analyzeRelationshipDynamics()\r\n        );\r\n    }\r\n\r\n    // ============================================================================\r\n    // 分析機能（複数サービス統合）\r\n    // ============================================================================\r\n\r\n    /**\r\n     * キャラクター分析\r\n     * 複数サービスからの分析結果を統合\r\n     */\r\n    async analyzeCharacter(characterId: string): Promise<any> {\r\n        return this.executeOperation(\r\n            ",
            "fullLength": 470,
            "truncatedContent": ",\r\n            () => this.relationshipService!.analyzeRelationshipDynamics()\r\n        );\r\n    }\r\n\r\n    // ============================================================================\r\n    // 分析機能（複数サービス統合）\r\n    // ============================================================================\r\n\r\n    /**\r\n     * キャラクター分析\r\n     * 複数サービスからの分析結果を統合\r\n     */\r\n    async analyzeCharacter(characterId: string): Promise<any> {\r\n        return this.executeOperation(\r\n            ",
            "hash": "1f993291c1f9fbb1f7930b0a9ba84734",
            "keywords": [
              "分析",
              "キャラクター",
              "analyze",
              "Character",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "getRelationshipAnalysis",
            "relatedMethods": [
              "getRelationshipAnalysis",
              "RelationshipAnalysis",
              "psychologyAnalysis",
              "relationshipAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<RelationshipAnalysis>",
              ": Promise<any>"
            ],
            "extractedTypes": [
              "RelationshipAnalysis>",
              "any>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [],
          "characterElements": [
            "キャラクター",
            "character",
            "character development"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "getRelationshipAnalysis",
            "Promise",
            "RelationshipAnalysis",
            "return",
            "this",
            "executeOperation",
            "relationshipService",
            "analyzeRelationshipDynamics",
            "async"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "d038238b6a97bb0b08ea951755716afb"
      },
      {
        "id": "call_3b4a4711",
        "filePath": "src\\lib\\characters\\utils\\character-utils.ts",
        "fileName": "character-utils.ts",
        "lineNumber": 159,
        "lineContent": "const result = await geminiClient.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 154,
              "content": "- 特性3",
              "indent": 0
            },
            {
              "lineNumber": 155,
              "content": "- 特性4",
              "indent": 0
            },
            {
              "lineNumber": 156,
              "content": "- 特性5",
              "indent": 0
            },
            {
              "lineNumber": 157,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 158,
              "content": "",
              "indent": 1
            }
          ],
          "current": {
            "lineNumber": 159,
            "content": "const result = await geminiClient.generateText(prompt, {",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 160,
              "content": "temperature: 0.3,",
              "indent": 6
            },
            {
              "lineNumber": 161,
              "content": "targetLength: 200",
              "indent": 6
            },
            {
              "lineNumber": 162,
              "content": "});",
              "indent": 4
            },
            {
              "lineNumber": 163,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 164,
              "content": "// 抽出された特性をリストに変換",
              "indent": 4
            }
          ],
          "functionContext": {
            "functionName": "extractTraitsFromBackstory",
            "startLine": 139,
            "distance": 20
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
            "fullLength": 158,
            "truncatedContent": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
            "hash": "e24c81817910e0cdf8b1481a16febc8a",
            "keywords": [
              "キャラクター",
              "ストーリー",
              "story"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
            "fullLength": 158,
            "truncatedContent": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
            "hash": "e24c81817910e0cdf8b1481a16febc8a",
            "keywords": [
              "キャラクター",
              "ストーリー",
              "story"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "variable_assignment",
            "variableName": "prompt",
            "content": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
            "fullLength": 158,
            "truncatedContent": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
            "hash": "e24c81817910e0cdf8b1481a16febc8a"
          },
          {
            "type": "template_literal",
            "content": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
            "fullLength": 158,
            "truncatedContent": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
            "hash": "e24c81817910e0cdf8b1481a16febc8a",
            "hasVariables": true,
            "variableCount": 1
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "背景"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "作成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "return",
            "result",
            "param",
            "backstory",
            "returns",
            "Promise",
            "export",
            "async",
            "function",
            "extractTraitsFromBackstory"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "49c06b2e36f9a52f9df39e2d1948f159"
      },
      {
        "id": "call_3b4a4711",
        "filePath": "src\\lib\\characters\\utils\\character-utils.ts",
        "fileName": "character-utils.ts",
        "lineNumber": 159,
        "lineContent": "const result = await geminiClient.generateText(prompt, {",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 154,
              "content": "- 特性3",
              "indent": 0
            },
            {
              "lineNumber": 155,
              "content": "- 特性4",
              "indent": 0
            },
            {
              "lineNumber": 156,
              "content": "- 特性5",
              "indent": 0
            },
            {
              "lineNumber": 157,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 158,
              "content": "",
              "indent": 1
            }
          ],
          "current": {
            "lineNumber": 159,
            "content": "const result = await geminiClient.generateText(prompt, {",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 160,
              "content": "temperature: 0.3,",
              "indent": 6
            },
            {
              "lineNumber": 161,
              "content": "targetLength: 200",
              "indent": 6
            },
            {
              "lineNumber": 162,
              "content": "});",
              "indent": 4
            },
            {
              "lineNumber": 163,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 164,
              "content": "// 抽出された特性をリストに変換",
              "indent": 4
            }
          ],
          "functionContext": {
            "functionName": "extractTraitsFromBackstory",
            "startLine": 139,
            "distance": 20
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
            "fullLength": 158,
            "truncatedContent": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
            "hash": "e24c81817910e0cdf8b1481a16febc8a",
            "keywords": [
              "キャラクター",
              "ストーリー",
              "story"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
            "fullLength": 158,
            "truncatedContent": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
            "hash": "e24c81817910e0cdf8b1481a16febc8a",
            "keywords": [
              "キャラクター",
              "ストーリー",
              "story"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "variable_assignment",
            "variableName": "prompt",
            "content": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
            "fullLength": 158,
            "truncatedContent": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
            "hash": "e24c81817910e0cdf8b1481a16febc8a"
          },
          {
            "type": "template_literal",
            "content": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
            "fullLength": 158,
            "truncatedContent": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
            "hash": "e24c81817910e0cdf8b1481a16febc8a",
            "hasVariables": true,
            "variableCount": 1
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "背景"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "作成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "return",
            "result",
            "param",
            "backstory",
            "returns",
            "Promise",
            "export",
            "async",
            "function",
            "extractTraitsFromBackstory"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "49c06b2e36f9a52f9df39e2d1948f159"
      },
      {
        "id": "call_0c1dd664",
        "filePath": "src\\lib\\characters\\utils\\character-utils.ts",
        "fileName": "character-utils.ts",
        "lineNumber": 159,
        "lineContent": "const result = await geminiClient.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 154,
              "content": "- 特性3",
              "indent": 0
            },
            {
              "lineNumber": 155,
              "content": "- 特性4",
              "indent": 0
            },
            {
              "lineNumber": 156,
              "content": "- 特性5",
              "indent": 0
            },
            {
              "lineNumber": 157,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 158,
              "content": "",
              "indent": 1
            }
          ],
          "current": {
            "lineNumber": 159,
            "content": "const result = await geminiClient.generateText(prompt, {",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 160,
              "content": "temperature: 0.3,",
              "indent": 6
            },
            {
              "lineNumber": 161,
              "content": "targetLength: 200",
              "indent": 6
            },
            {
              "lineNumber": 162,
              "content": "});",
              "indent": 4
            },
            {
              "lineNumber": 163,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 164,
              "content": "// 抽出された特性をリストに変換",
              "indent": 4
            }
          ],
          "functionContext": {
            "functionName": "extractTraitsFromBackstory",
            "startLine": 139,
            "distance": 20
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
            "fullLength": 158,
            "truncatedContent": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
            "hash": "e24c81817910e0cdf8b1481a16febc8a",
            "keywords": [
              "キャラクター",
              "ストーリー",
              "story"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
            "fullLength": 158,
            "truncatedContent": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
            "hash": "e24c81817910e0cdf8b1481a16febc8a",
            "keywords": [
              "キャラクター",
              "ストーリー",
              "story"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "variable_assignment",
            "variableName": "prompt",
            "content": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
            "fullLength": 158,
            "truncatedContent": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
            "hash": "e24c81817910e0cdf8b1481a16febc8a"
          },
          {
            "type": "template_literal",
            "content": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
            "fullLength": 158,
            "truncatedContent": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
            "hash": "e24c81817910e0cdf8b1481a16febc8a",
            "hasVariables": true,
            "variableCount": 1
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "背景"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "作成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "sult",
            "param",
            "backstory",
            "returns",
            "Promise",
            "export",
            "async",
            "function",
            "extractTraitsFromBackstory",
            "string"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "4b830e0d1a9e220b0b8f85a915b6d61c"
      },
      {
        "id": "call_b27aa071",
        "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
        "fileName": "auto-generator.ts",
        "lineNumber": 183,
        "lineContent": "() => this.geminiClient.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 178,
              "content": "enrichedContext.characterInfo",
              "indent": 20
            },
            {
              "lineNumber": 179,
              "content": ");",
              "indent": 16
            },
            {
              "lineNumber": 180,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 181,
              "content": "// リトライロジック付きAI生成",
              "indent": 16
            },
            {
              "lineNumber": 182,
              "content": "const response = await this.retryGenerationRequest(",
              "indent": 16
            }
          ],
          "current": {
            "lineNumber": 183,
            "content": "() => this.geminiClient.generateText(prompt, {",
            "indent": 20
          },
          "after": [
            {
              "lineNumber": 184,
              "content": "temperature: 0.7,",
              "indent": 24
            },
            {
              "lineNumber": 185,
              "content": "targetLength: 2000",
              "indent": 24
            },
            {
              "lineNumber": 186,
              "content": "}),",
              "indent": 20
            },
            {
              "lineNumber": 187,
              "content": "'伏線生成'",
              "indent": 20
            },
            {
              "lineNumber": 188,
              "content": ");",
              "indent": 16
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 108,
            "distance": 75
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\n                );\n\n                // 応答解析と検証\n                const generatedForeshadowing = this.parseAndValidateResponse(response, currentChapter);\n\n                logger.info(",
            "fullLength": 181,
            "truncatedContent": "\n                );\n\n                // 応答解析と検証\n                const generatedForeshadowing = this.parseAndValidateResponse(response, currentChapter);\n\n                logger.info(",
            "hash": "9e9326d25764b198ce6204dc1b3f5802",
            "keywords": [
              "generate",
              "Chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "createAdvancedGenerationPrompt",
            "relatedMethods": [
              "createAdvancedGenerationPrompt",
              "retryGeneration"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "setting",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.7",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF"
          ],
          "storyElements": [
            "設定",
            "世界観",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "作成",
            "generate",
            "create"
          ],
          "complexity": "medium",
          "dependencies": [
            "context",
            "currentChapter",
            "const",
            "prompt",
            "this",
            "createAdvancedGenerationPrompt",
            "enrichedContext",
            "finalContext",
            "count",
            "worldSettings"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "7453ba71b6a00dcb0c9ec412ffabbb99"
      },
      {
        "id": "call_b27aa071",
        "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
        "fileName": "auto-generator.ts",
        "lineNumber": 183,
        "lineContent": "() => this.geminiClient.generateText(prompt, {",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 178,
              "content": "enrichedContext.characterInfo",
              "indent": 20
            },
            {
              "lineNumber": 179,
              "content": ");",
              "indent": 16
            },
            {
              "lineNumber": 180,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 181,
              "content": "// リトライロジック付きAI生成",
              "indent": 16
            },
            {
              "lineNumber": 182,
              "content": "const response = await this.retryGenerationRequest(",
              "indent": 16
            }
          ],
          "current": {
            "lineNumber": 183,
            "content": "() => this.geminiClient.generateText(prompt, {",
            "indent": 20
          },
          "after": [
            {
              "lineNumber": 184,
              "content": "temperature: 0.7,",
              "indent": 24
            },
            {
              "lineNumber": 185,
              "content": "targetLength: 2000",
              "indent": 24
            },
            {
              "lineNumber": 186,
              "content": "}),",
              "indent": 20
            },
            {
              "lineNumber": 187,
              "content": "'伏線生成'",
              "indent": 20
            },
            {
              "lineNumber": 188,
              "content": ");",
              "indent": 16
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 108,
            "distance": 75
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\n                );\n\n                // 応答解析と検証\n                const generatedForeshadowing = this.parseAndValidateResponse(response, currentChapter);\n\n                logger.info(",
            "fullLength": 181,
            "truncatedContent": "\n                );\n\n                // 応答解析と検証\n                const generatedForeshadowing = this.parseAndValidateResponse(response, currentChapter);\n\n                logger.info(",
            "hash": "9e9326d25764b198ce6204dc1b3f5802",
            "keywords": [
              "generate",
              "Chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "createAdvancedGenerationPrompt",
            "relatedMethods": [
              "createAdvancedGenerationPrompt",
              "retryGeneration"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "setting",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.7",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF"
          ],
          "storyElements": [
            "設定",
            "世界観",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "作成",
            "generate",
            "create"
          ],
          "complexity": "medium",
          "dependencies": [
            "context",
            "currentChapter",
            "const",
            "prompt",
            "this",
            "createAdvancedGenerationPrompt",
            "enrichedContext",
            "finalContext",
            "count",
            "worldSettings"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "7453ba71b6a00dcb0c9ec412ffabbb99"
      },
      {
        "id": "call_bf02a47e",
        "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
        "fileName": "auto-generator.ts",
        "lineNumber": 183,
        "lineContent": "() => this.geminiClient.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 178,
              "content": "enrichedContext.characterInfo",
              "indent": 20
            },
            {
              "lineNumber": 179,
              "content": ");",
              "indent": 16
            },
            {
              "lineNumber": 180,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 181,
              "content": "// リトライロジック付きAI生成",
              "indent": 16
            },
            {
              "lineNumber": 182,
              "content": "const response = await this.retryGenerationRequest(",
              "indent": 16
            }
          ],
          "current": {
            "lineNumber": 183,
            "content": "() => this.geminiClient.generateText(prompt, {",
            "indent": 20
          },
          "after": [
            {
              "lineNumber": 184,
              "content": "temperature: 0.7,",
              "indent": 24
            },
            {
              "lineNumber": 185,
              "content": "targetLength: 2000",
              "indent": 24
            },
            {
              "lineNumber": 186,
              "content": "}),",
              "indent": 20
            },
            {
              "lineNumber": 187,
              "content": "'伏線生成'",
              "indent": 20
            },
            {
              "lineNumber": 188,
              "content": ");",
              "indent": 16
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 108,
            "distance": 75
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\n                );\n\n                // 応答解析と検証\n                const generatedForeshadowing = this.parseAndValidateResponse(response, currentChapter);\n\n                logger.info(",
            "fullLength": 181,
            "truncatedContent": "\n                );\n\n                // 応答解析と検証\n                const generatedForeshadowing = this.parseAndValidateResponse(response, currentChapter);\n\n                logger.info(",
            "hash": "9e9326d25764b198ce6204dc1b3f5802",
            "keywords": [
              "generate",
              "Chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "createAdvancedGenerationPrompt",
            "relatedMethods": [
              "createAdvancedGenerationPrompt",
              "retryGeneration"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "setting",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.7",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "ファンタジー",
            "SF"
          ],
          "storyElements": [
            "設定",
            "世界観",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "作成",
            "generate",
            "create"
          ],
          "complexity": "medium",
          "dependencies": [
            "rrentChapter",
            "const",
            "prompt",
            "this",
            "createAdvancedGenerationPrompt",
            "enrichedContext",
            "finalContext",
            "currentChapter",
            "count",
            "worldSettings"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "e251a18e56024b8a92d58611a14a8151"
      },
      {
        "id": "call_0e0ffa92",
        "filePath": "src\\lib\\foreshadowing\\engine.ts",
        "fileName": "engine.ts",
        "lineNumber": 379,
        "lineContent": "const response = await this.geminiClient.generateText(contextualPrompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 374,
              "content": "count,",
              "indent": 8
            },
            {
              "lineNumber": 375,
              "content": "memoryContext",
              "indent": 8
            },
            {
              "lineNumber": 376,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 377,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 378,
              "content": "// Gemini APIによる生成",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 379,
            "content": "const response = await this.geminiClient.generateText(contextualPrompt, {",
            "indent": 6
          },
          "after": [
            {
              "lineNumber": 380,
              "content": "temperature: 0.7",
              "indent": 8
            },
            {
              "lineNumber": 381,
              "content": "});",
              "indent": 6
            },
            {
              "lineNumber": 382,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 383,
              "content": "// レスポンスの解析と構造化",
              "indent": 6
            },
            {
              "lineNumber": 384,
              "content": "const parsedForeshadowings = this.parseForeshadowingResponse(response, chapterNumber);",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 351,
            "distance": 28
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "AI generated ${parsedForeshadowings.length} foreshadowings",
            "fullLength": 58,
            "truncatedContent": "AI generated ${parsedForeshadowings.length} foreshadowings",
            "hash": "2a0c82bb81e19d3194f56e9a34c29bb9",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "contextualPrompt",
            "relatedMethods": [
              "contextualPrompt",
              "buildContextualPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<Foreshadowing[]>"
            ],
            "extractedTypes": [
              "Foreshadowing[]>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.7",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character",
            "character development"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "作成",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "private",
            "async",
            "generateAIForeshadowings",
            "chapterContent",
            "string",
            "chapterNumber",
            "number",
            "count",
            "memoryContext",
            "ConsolidatedContext"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "b4c07500cfaab5ab7cd1d7c0761adda7"
      },
      {
        "id": "call_6adb174a",
        "filePath": "src\\lib\\foreshadowing\\engine.ts",
        "fileName": "engine.ts",
        "lineNumber": 1006,
        "lineContent": "const response = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 1001,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1002,
              "content": "複数選択する場合は、それぞれについて上記形式で記述してください。",
              "indent": 0
            },
            {
              "lineNumber": 1003,
              "content": "適切な候補がない場合は「適切な候補なし」と回答してください。",
              "indent": 0
            },
            {
              "lineNumber": 1004,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 1005,
              "content": "",
              "indent": 0
            }
          ],
          "current": {
            "lineNumber": 1006,
            "content": "const response = await this.geminiClient.generateText(prompt, {",
            "indent": 6
          },
          "after": [
            {
              "lineNumber": 1007,
              "content": "temperature: 0.3",
              "indent": 8
            },
            {
              "lineNumber": 1008,
              "content": "});",
              "indent": 6
            },
            {
              "lineNumber": 1009,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1010,
              "content": "return this.parseResolutionAnalysis(response, candidates);",
              "indent": 6
            },
            {
              "lineNumber": 1011,
              "content": "",
              "indent": 0
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 956,
            "distance": 50
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "parseResolutionAnalysis",
            "relatedMethods": [
              "parseResolutionAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "resolution",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "rawValue": "temperature: 0.3",
            "confidence": "high"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character",
            "character development"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "評価",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "lannedResolution",
            "join",
            "const",
            "prompt",
            "maxCount",
            "candidateInfo",
            "chapterContent",
            "substring",
            "response",
            "await"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "fa09d995e4731ede117f4d94a9f940b1"
      },
      {
        "id": "call_0e0ffa92",
        "filePath": "src\\lib\\foreshadowing\\engine.ts",
        "fileName": "engine.ts",
        "lineNumber": 379,
        "lineContent": "const response = await this.geminiClient.generateText(contextualPrompt, {",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 374,
              "content": "count,",
              "indent": 8
            },
            {
              "lineNumber": 375,
              "content": "memoryContext",
              "indent": 8
            },
            {
              "lineNumber": 376,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 377,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 378,
              "content": "// Gemini APIによる生成",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 379,
            "content": "const response = await this.geminiClient.generateText(contextualPrompt, {",
            "indent": 6
          },
          "after": [
            {
              "lineNumber": 380,
              "content": "temperature: 0.7",
              "indent": 8
            },
            {
              "lineNumber": 381,
              "content": "});",
              "indent": 6
            },
            {
              "lineNumber": 382,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 383,
              "content": "// レスポンスの解析と構造化",
              "indent": 6
            },
            {
              "lineNumber": 384,
              "content": "const parsedForeshadowings = this.parseForeshadowingResponse(response, chapterNumber);",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 351,
            "distance": 28
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "AI generated ${parsedForeshadowings.length} foreshadowings",
            "fullLength": 58,
            "truncatedContent": "AI generated ${parsedForeshadowings.length} foreshadowings",
            "hash": "2a0c82bb81e19d3194f56e9a34c29bb9",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "contextualPrompt",
            "relatedMethods": [
              "contextualPrompt",
              "buildContextualPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<Foreshadowing[]>"
            ],
            "extractedTypes": [
              "Foreshadowing[]>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.7",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character",
            "character development"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "作成",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "private",
            "async",
            "generateAIForeshadowings",
            "chapterContent",
            "string",
            "chapterNumber",
            "number",
            "count",
            "memoryContext",
            "ConsolidatedContext"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "b4c07500cfaab5ab7cd1d7c0761adda7"
      },
      {
        "id": "call_6adb174a",
        "filePath": "src\\lib\\foreshadowing\\engine.ts",
        "fileName": "engine.ts",
        "lineNumber": 1006,
        "lineContent": "const response = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 1001,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1002,
              "content": "複数選択する場合は、それぞれについて上記形式で記述してください。",
              "indent": 0
            },
            {
              "lineNumber": 1003,
              "content": "適切な候補がない場合は「適切な候補なし」と回答してください。",
              "indent": 0
            },
            {
              "lineNumber": 1004,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 1005,
              "content": "",
              "indent": 0
            }
          ],
          "current": {
            "lineNumber": 1006,
            "content": "const response = await this.geminiClient.generateText(prompt, {",
            "indent": 6
          },
          "after": [
            {
              "lineNumber": 1007,
              "content": "temperature: 0.3",
              "indent": 8
            },
            {
              "lineNumber": 1008,
              "content": "});",
              "indent": 6
            },
            {
              "lineNumber": 1009,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1010,
              "content": "return this.parseResolutionAnalysis(response, candidates);",
              "indent": 6
            },
            {
              "lineNumber": 1011,
              "content": "",
              "indent": 0
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 956,
            "distance": 50
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "parseResolutionAnalysis",
            "relatedMethods": [
              "parseResolutionAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "resolution",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "rawValue": "temperature: 0.3",
            "confidence": "high"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character",
            "character development"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "評価",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "lannedResolution",
            "join",
            "const",
            "prompt",
            "maxCount",
            "candidateInfo",
            "chapterContent",
            "substring",
            "response",
            "await"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "fa09d995e4731ede117f4d94a9f940b1"
      },
      {
        "id": "call_6d2bdcd3",
        "filePath": "src\\lib\\foreshadowing\\engine.ts",
        "fileName": "engine.ts",
        "lineNumber": 379,
        "lineContent": "const response = await this.geminiClient.generateText(contextualPrompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 374,
              "content": "count,",
              "indent": 8
            },
            {
              "lineNumber": 375,
              "content": "memoryContext",
              "indent": 8
            },
            {
              "lineNumber": 376,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 377,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 378,
              "content": "// Gemini APIによる生成",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 379,
            "content": "const response = await this.geminiClient.generateText(contextualPrompt, {",
            "indent": 6
          },
          "after": [
            {
              "lineNumber": 380,
              "content": "temperature: 0.7",
              "indent": 8
            },
            {
              "lineNumber": 381,
              "content": "});",
              "indent": 6
            },
            {
              "lineNumber": 382,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 383,
              "content": "// レスポンスの解析と構造化",
              "indent": 6
            },
            {
              "lineNumber": 384,
              "content": "const parsedForeshadowings = this.parseForeshadowingResponse(response, chapterNumber);",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 351,
            "distance": 28
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "AI generated ${parsedForeshadowings.length} foreshadowings",
            "fullLength": 58,
            "truncatedContent": "AI generated ${parsedForeshadowings.length} foreshadowings",
            "hash": "2a0c82bb81e19d3194f56e9a34c29bb9",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "contextualPrompt",
            "relatedMethods": [
              "contextualPrompt",
              "buildContextualPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<Foreshadowing[]>"
            ],
            "extractedTypes": [
              "Foreshadowing[]>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.7",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character",
            "character development"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "private",
            "async",
            "generateAIForeshadowings",
            "chapterContent",
            "string",
            "chapterNumber",
            "number",
            "count",
            "memoryContext",
            "ConsolidatedContext"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "ec6af4bf32a397b86f06fa9833164df7"
      },
      {
        "id": "call_14ab93e8",
        "filePath": "src\\lib\\foreshadowing\\engine.ts",
        "fileName": "engine.ts",
        "lineNumber": 1006,
        "lineContent": "const response = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 1001,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1002,
              "content": "複数選択する場合は、それぞれについて上記形式で記述してください。",
              "indent": 0
            },
            {
              "lineNumber": 1003,
              "content": "適切な候補がない場合は「適切な候補なし」と回答してください。",
              "indent": 0
            },
            {
              "lineNumber": 1004,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 1005,
              "content": "",
              "indent": 0
            }
          ],
          "current": {
            "lineNumber": 1006,
            "content": "const response = await this.geminiClient.generateText(prompt, {",
            "indent": 6
          },
          "after": [
            {
              "lineNumber": 1007,
              "content": "temperature: 0.3",
              "indent": 8
            },
            {
              "lineNumber": 1008,
              "content": "});",
              "indent": 6
            },
            {
              "lineNumber": 1009,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1010,
              "content": "return this.parseResolutionAnalysis(response, candidates);",
              "indent": 6
            },
            {
              "lineNumber": 1011,
              "content": "",
              "indent": 0
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 956,
            "distance": 50
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "parseResolutionAnalysis",
            "relatedMethods": [
              "parseResolutionAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "resolution",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "rawValue": "temperature: 0.3",
            "confidence": "high"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character",
            "character development"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "評価",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "tion",
            "join",
            "const",
            "prompt",
            "maxCount",
            "candidateInfo",
            "chapterContent",
            "substring",
            "response",
            "await"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "83225818ecab44074e8695d371f44b5c"
      },
      {
        "id": "call_18fd8fd2",
        "filePath": "src\\lib\\foreshadowing\\manager.ts",
        "fileName": "manager.ts",
        "lineNumber": 435,
        "lineContent": "const response = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 430,
              "content": "\"resolutionMethod\": \"string\",",
              "indent": 2
            },
            {
              "lineNumber": 431,
              "content": "\"isHint\": boolean",
              "indent": 2
            },
            {
              "lineNumber": 432,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 433,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 434,
              "content": "",
              "indent": 0
            }
          ],
          "current": {
            "lineNumber": 435,
            "content": "const response = await this.geminiClient.generateText(prompt, {",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 436,
              "content": "temperature: 0.1",
              "indent": 16
            },
            {
              "lineNumber": 437,
              "content": "});",
              "indent": 12
            },
            {
              "lineNumber": 438,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 439,
              "content": "const evaluation = this.parseEvaluationResponse(response);",
              "indent": 12
            },
            {
              "lineNumber": 440,
              "content": "",
              "indent": 0
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 374,
            "distance": 61
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "resolution",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "rawValue": "temperature: 0.1",
            "confidence": "high"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "scene"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "評価",
            "判断",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "otential_resolution",
            "foreshadowing",
            "plannedResolution",
            "chapterNumber",
            "chapterContent",
            "substring",
            "JSON",
            "isPossible",
            "boolean",
            "confidence"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "a7aebb40a563f7f66caa22c0191ffaa2"
      },
      {
        "id": "call_18fd8fd2",
        "filePath": "src\\lib\\foreshadowing\\manager.ts",
        "fileName": "manager.ts",
        "lineNumber": 435,
        "lineContent": "const response = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 430,
              "content": "\"resolutionMethod\": \"string\",",
              "indent": 2
            },
            {
              "lineNumber": 431,
              "content": "\"isHint\": boolean",
              "indent": 2
            },
            {
              "lineNumber": 432,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 433,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 434,
              "content": "",
              "indent": 0
            }
          ],
          "current": {
            "lineNumber": 435,
            "content": "const response = await this.geminiClient.generateText(prompt, {",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 436,
              "content": "temperature: 0.1",
              "indent": 16
            },
            {
              "lineNumber": 437,
              "content": "});",
              "indent": 12
            },
            {
              "lineNumber": 438,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 439,
              "content": "const evaluation = this.parseEvaluationResponse(response);",
              "indent": 12
            },
            {
              "lineNumber": 440,
              "content": "",
              "indent": 0
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 374,
            "distance": 61
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "resolution",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "rawValue": "temperature: 0.1",
            "confidence": "high"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "scene"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "評価",
            "判断",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "otential_resolution",
            "foreshadowing",
            "plannedResolution",
            "chapterNumber",
            "chapterContent",
            "substring",
            "JSON",
            "isPossible",
            "boolean",
            "confidence"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "a7aebb40a563f7f66caa22c0191ffaa2"
      },
      {
        "id": "call_b224c7e0",
        "filePath": "src\\lib\\foreshadowing\\manager.ts",
        "fileName": "manager.ts",
        "lineNumber": 435,
        "lineContent": "const response = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 430,
              "content": "\"resolutionMethod\": \"string\",",
              "indent": 2
            },
            {
              "lineNumber": 431,
              "content": "\"isHint\": boolean",
              "indent": 2
            },
            {
              "lineNumber": 432,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 433,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 434,
              "content": "",
              "indent": 0
            }
          ],
          "current": {
            "lineNumber": 435,
            "content": "const response = await this.geminiClient.generateText(prompt, {",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 436,
              "content": "temperature: 0.1",
              "indent": 16
            },
            {
              "lineNumber": 437,
              "content": "});",
              "indent": 12
            },
            {
              "lineNumber": 438,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 439,
              "content": "const evaluation = this.parseEvaluationResponse(response);",
              "indent": 12
            },
            {
              "lineNumber": 440,
              "content": "",
              "indent": 0
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 374,
            "distance": 61
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "resolution",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "rawValue": "temperature: 0.1",
            "confidence": "high"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "scene"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "評価",
            "判断",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "olution",
            "foreshadowing",
            "plannedResolution",
            "chapterNumber",
            "chapterContent",
            "substring",
            "JSON",
            "isPossible",
            "boolean",
            "confidence"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "2886fe3b1fd192703dcc77b772131870"
      },
      {
        "id": "call_aea0563d",
        "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
        "fileName": "resolution-advisor.ts",
        "lineNumber": 408,
        "lineContent": "const aiResponse = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 403,
              "content": "chapterNumber,",
              "indent": 12
            },
            {
              "lineNumber": 404,
              "content": "qualityMetrics",
              "indent": 12
            },
            {
              "lineNumber": 405,
              "content": ");",
              "indent": 8
            },
            {
              "lineNumber": 406,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 407,
              "content": "try {",
              "indent": 8
            }
          ],
          "current": {
            "lineNumber": 408,
            "content": "const aiResponse = await this.geminiClient.generateText(prompt, {",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 409,
              "content": "temperature: 0.1 // 分析タスクは低温で",
              "indent": 16
            },
            {
              "lineNumber": 410,
              "content": "});",
              "indent": 12
            },
            {
              "lineNumber": 411,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 412,
              "content": "// レスポンスの安全な解析",
              "indent": 12
            },
            {
              "lineNumber": 413,
              "content": "const aiAnalysis = this.parseAIResponse(aiResponse);",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 373,
            "distance": 35
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "]\n    ): Promise<ResolutionEvaluationResult> {\n        // タイミング信頼度の計算\n        const timingScore = this.calculateTimingConfidence(foreshadowing, chapterNumber);\n\n        // AIプロンプトの構築（統合記憶コンテキスト含む）\n        const prompt = this.buildAnalysisPrompt(\n            foreshadowing, \n            chapterContent, \n            chapterNumber, \n            qualityMetrics\n        );\n\n        try {\n            const aiResponse = await this.geminiClient.generateText(prompt, {\n                temperature: 0.1 // 分析タスクは低温で\n            });\n\n            // レスポンスの安全な解析\n            const aiAnalysis = this.parseAIResponse(aiResponse);\n            const aiScore = aiAnalysis.confidence;\n\n            // 最終的な信頼度計算（タイミング + AI分析 + システム品質）\n            const finalScore = this.calculateFinalConfidence(timingScore, aiScore, qualityMetrics);\n\n            return {\n                isPossible: aiAnalysis.isPossible && finalScore >= 0.6,\n                confidence: finalScore,\n                reason: aiAnalysis.reason || ",
            "fullLength": 996,
            "truncatedContent": "]\n    ): Promise<ResolutionEvaluationResult> {\n        // タイミング信頼度の計算\n        const timingScore = this.calculateTimingConfidence(foreshadowing, chapterNumber);\n\n        // AIプロンプトの構築（統合記憶コンテキスト含む）\n        const prompt = this.buildAnalysisPrompt(\n            foreshadowing, \n            chapterContent, \n            chapterNumber, \n            qualityMetrics\n        );\n\n        try {\n            const aiResponse = await this.geminiClient.generateText(prompt, {\n                temperature: 0.1 // 分析タスクは低温で\n            });\n\n            // レスポンスの安全な解析\n            const aiAnalysis = this.parseAIResponse(aiResponse);\n            const aiScore = aiAnalysis.confidence;\n\n            // 最終的な信頼度計算（タイミング + AI分析 + システム品質）\n            const finalScore = this.calculateFinalConfidence(timingScore, aiScore, qualityMetrics);\n\n            return {\n                isPossible: aiAnalysis.isPossible && finalScore >= 0.6,\n                confidence: finalScore,\n                reason: aiAnalysis.reason || ",
            "hash": "2d4b2a57bab23204abc2498362f720bb",
            "keywords": [
              "分析",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "]\n    ): Promise<ResolutionEvaluationResult> {\n        // タイミング信頼度の計算\n        const timingScore = this.calculateTimingConfidence(foreshadowing, chapterNumber);\n\n        // AIプロンプトの構築（統合記憶コンテキスト含む）\n        const prompt = this.buildAnalysisPrompt(\n            foreshadowing, \n            chapterContent, \n            chapterNumber, \n            qualityMetrics\n        );\n\n        try {\n            const aiResponse = await this.geminiClient.generateText(prompt, {\n                temperature: 0.1 // 分析タスクは低温で\n            });\n\n            // レスポンスの安全な解析\n            const aiAnalysis = this.parseAIResponse(aiResponse);\n            const aiScore = aiAnalysis.confidence;\n\n            // 最終的な信頼度計算（タイミング + AI分析 + システム品質）\n            const finalScore = this.calculateFinalConfidence(timingScore, aiScore, qualityMetrics);\n\n            return {\n                isPossible: aiAnalysis.isPossible && finalScore >= 0.6,\n                confidence: finalScore,\n                reason: aiAnalysis.reason || ",
            "fullLength": 996,
            "truncatedContent": "]\n    ): Promise<ResolutionEvaluationResult> {\n        // タイミング信頼度の計算\n        const timingScore = this.calculateTimingConfidence(foreshadowing, chapterNumber);\n\n        // AIプロンプトの構築（統合記憶コンテキスト含む）\n        const prompt = this.buildAnalysisPrompt(\n            foreshadowing, \n            chapterContent, \n            chapterNumber, \n            qualityMetrics\n        );\n\n        try {\n            const aiResponse = await this.geminiClient.generateText(prompt, {\n                temperature: 0.1 // 分析タスクは低温で\n            });\n\n            // レスポンスの安全な解析\n            const aiAnalysis = this.parseAIResponse(aiResponse);\n            const aiScore = aiAnalysis.confidence;\n\n            // 最終的な信頼度計算（タイミング + AI分析 + システム品質）\n            const finalScore = this.calculateFinalConfidence(timingScore, aiScore, qualityMetrics);\n\n            return {\n                isPossible: aiAnalysis.isPossible && finalScore >= 0.6,\n                confidence: finalScore,\n                reason: aiAnalysis.reason || ",
            "hash": "2d4b2a57bab23204abc2498362f720bb",
            "keywords": [
              "分析",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildAnalysisPrompt",
            "relatedMethods": [
              "buildAnalysisPrompt",
              "aiAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<ResolutionEvaluationResult>"
            ],
            "extractedTypes": [
              "ResolutionEvaluationResult>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "resolution",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1 // 分析タスクは低温で",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "構築",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "number",
            "qualityMetrics",
            "UnifiedForeshadowingData",
            "Promise",
            "ResolutionEvaluationResult",
            "const",
            "timingScore",
            "this",
            "calculateTimingConfidence",
            "foreshadowing"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "88bad847670f4df4a24201c80e1d2620"
      },
      {
        "id": "call_aea0563d",
        "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
        "fileName": "resolution-advisor.ts",
        "lineNumber": 408,
        "lineContent": "const aiResponse = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 403,
              "content": "chapterNumber,",
              "indent": 12
            },
            {
              "lineNumber": 404,
              "content": "qualityMetrics",
              "indent": 12
            },
            {
              "lineNumber": 405,
              "content": ");",
              "indent": 8
            },
            {
              "lineNumber": 406,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 407,
              "content": "try {",
              "indent": 8
            }
          ],
          "current": {
            "lineNumber": 408,
            "content": "const aiResponse = await this.geminiClient.generateText(prompt, {",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 409,
              "content": "temperature: 0.1 // 分析タスクは低温で",
              "indent": 16
            },
            {
              "lineNumber": 410,
              "content": "});",
              "indent": 12
            },
            {
              "lineNumber": 411,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 412,
              "content": "// レスポンスの安全な解析",
              "indent": 12
            },
            {
              "lineNumber": 413,
              "content": "const aiAnalysis = this.parseAIResponse(aiResponse);",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 373,
            "distance": 35
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "]\n    ): Promise<ResolutionEvaluationResult> {\n        // タイミング信頼度の計算\n        const timingScore = this.calculateTimingConfidence(foreshadowing, chapterNumber);\n\n        // AIプロンプトの構築（統合記憶コンテキスト含む）\n        const prompt = this.buildAnalysisPrompt(\n            foreshadowing, \n            chapterContent, \n            chapterNumber, \n            qualityMetrics\n        );\n\n        try {\n            const aiResponse = await this.geminiClient.generateText(prompt, {\n                temperature: 0.1 // 分析タスクは低温で\n            });\n\n            // レスポンスの安全な解析\n            const aiAnalysis = this.parseAIResponse(aiResponse);\n            const aiScore = aiAnalysis.confidence;\n\n            // 最終的な信頼度計算（タイミング + AI分析 + システム品質）\n            const finalScore = this.calculateFinalConfidence(timingScore, aiScore, qualityMetrics);\n\n            return {\n                isPossible: aiAnalysis.isPossible && finalScore >= 0.6,\n                confidence: finalScore,\n                reason: aiAnalysis.reason || ",
            "fullLength": 996,
            "truncatedContent": "]\n    ): Promise<ResolutionEvaluationResult> {\n        // タイミング信頼度の計算\n        const timingScore = this.calculateTimingConfidence(foreshadowing, chapterNumber);\n\n        // AIプロンプトの構築（統合記憶コンテキスト含む）\n        const prompt = this.buildAnalysisPrompt(\n            foreshadowing, \n            chapterContent, \n            chapterNumber, \n            qualityMetrics\n        );\n\n        try {\n            const aiResponse = await this.geminiClient.generateText(prompt, {\n                temperature: 0.1 // 分析タスクは低温で\n            });\n\n            // レスポンスの安全な解析\n            const aiAnalysis = this.parseAIResponse(aiResponse);\n            const aiScore = aiAnalysis.confidence;\n\n            // 最終的な信頼度計算（タイミング + AI分析 + システム品質）\n            const finalScore = this.calculateFinalConfidence(timingScore, aiScore, qualityMetrics);\n\n            return {\n                isPossible: aiAnalysis.isPossible && finalScore >= 0.6,\n                confidence: finalScore,\n                reason: aiAnalysis.reason || ",
            "hash": "2d4b2a57bab23204abc2498362f720bb",
            "keywords": [
              "分析",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "]\n    ): Promise<ResolutionEvaluationResult> {\n        // タイミング信頼度の計算\n        const timingScore = this.calculateTimingConfidence(foreshadowing, chapterNumber);\n\n        // AIプロンプトの構築（統合記憶コンテキスト含む）\n        const prompt = this.buildAnalysisPrompt(\n            foreshadowing, \n            chapterContent, \n            chapterNumber, \n            qualityMetrics\n        );\n\n        try {\n            const aiResponse = await this.geminiClient.generateText(prompt, {\n                temperature: 0.1 // 分析タスクは低温で\n            });\n\n            // レスポンスの安全な解析\n            const aiAnalysis = this.parseAIResponse(aiResponse);\n            const aiScore = aiAnalysis.confidence;\n\n            // 最終的な信頼度計算（タイミング + AI分析 + システム品質）\n            const finalScore = this.calculateFinalConfidence(timingScore, aiScore, qualityMetrics);\n\n            return {\n                isPossible: aiAnalysis.isPossible && finalScore >= 0.6,\n                confidence: finalScore,\n                reason: aiAnalysis.reason || ",
            "fullLength": 996,
            "truncatedContent": "]\n    ): Promise<ResolutionEvaluationResult> {\n        // タイミング信頼度の計算\n        const timingScore = this.calculateTimingConfidence(foreshadowing, chapterNumber);\n\n        // AIプロンプトの構築（統合記憶コンテキスト含む）\n        const prompt = this.buildAnalysisPrompt(\n            foreshadowing, \n            chapterContent, \n            chapterNumber, \n            qualityMetrics\n        );\n\n        try {\n            const aiResponse = await this.geminiClient.generateText(prompt, {\n                temperature: 0.1 // 分析タスクは低温で\n            });\n\n            // レスポンスの安全な解析\n            const aiAnalysis = this.parseAIResponse(aiResponse);\n            const aiScore = aiAnalysis.confidence;\n\n            // 最終的な信頼度計算（タイミング + AI分析 + システム品質）\n            const finalScore = this.calculateFinalConfidence(timingScore, aiScore, qualityMetrics);\n\n            return {\n                isPossible: aiAnalysis.isPossible && finalScore >= 0.6,\n                confidence: finalScore,\n                reason: aiAnalysis.reason || ",
            "hash": "2d4b2a57bab23204abc2498362f720bb",
            "keywords": [
              "分析",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildAnalysisPrompt",
            "relatedMethods": [
              "buildAnalysisPrompt",
              "aiAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<ResolutionEvaluationResult>"
            ],
            "extractedTypes": [
              "ResolutionEvaluationResult>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "resolution",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1 // 分析タスクは低温で",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "構築",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "number",
            "qualityMetrics",
            "UnifiedForeshadowingData",
            "Promise",
            "ResolutionEvaluationResult",
            "const",
            "timingScore",
            "this",
            "calculateTimingConfidence",
            "foreshadowing"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "88bad847670f4df4a24201c80e1d2620"
      },
      {
        "id": "call_9ebc9a83",
        "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
        "fileName": "resolution-advisor.ts",
        "lineNumber": 400,
        "lineContent": "const prompt = this.buildAnalysisPrompt(",
        "matchedPattern": "buildAnalysisPrompt\\s*\\(",
        "callMethod": "buildAnalysisPrompt",
        "fullMatch": "buildAnalysisPrompt(",
        "context": {
          "before": [
            {
              "lineNumber": 395,
              "content": "): Promise<ResolutionEvaluationResult> {",
              "indent": 4
            },
            {
              "lineNumber": 396,
              "content": "// タイミング信頼度の計算",
              "indent": 8
            },
            {
              "lineNumber": 397,
              "content": "const timingScore = this.calculateTimingConfidence(foreshadowing, chapterNumber);",
              "indent": 8
            },
            {
              "lineNumber": 398,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 399,
              "content": "// AIプロンプトの構築（統合記憶コンテキスト含む）",
              "indent": 8
            }
          ],
          "current": {
            "lineNumber": 400,
            "content": "const prompt = this.buildAnalysisPrompt(",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 401,
              "content": "foreshadowing,",
              "indent": 12
            },
            {
              "lineNumber": 402,
              "content": "chapterContent,",
              "indent": 12
            },
            {
              "lineNumber": 403,
              "content": "chapterNumber,",
              "indent": 12
            },
            {
              "lineNumber": 404,
              "content": "qualityMetrics",
              "indent": 12
            },
            {
              "lineNumber": 405,
              "content": ");",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 373,
            "distance": 27
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "buildAnalysisPrompt",
            "relatedMethods": [
              "buildAnalysisPrompt",
              "aiAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<ResolutionEvaluationResult>"
            ],
            "extractedTypes": [
              "ResolutionEvaluationResult>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "resolution",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1 // 分析タスクは低温で",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "評価",
            "構築",
            "generate",
            "evaluate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "private",
            "async",
            "evaluateResolutionPossibility",
            "foreshadowing",
            "Foreshadowing",
            "chapterContent",
            "string",
            "chapterNumber",
            "number",
            "qualityMetrics"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "4f8eb0ea69af4e3bbfa14db2365c567e"
      },
      {
        "id": "call_8c27c221",
        "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
        "fileName": "resolution-advisor.ts",
        "lineNumber": 635,
        "lineContent": "private buildAnalysisPrompt(",
        "matchedPattern": "buildAnalysisPrompt\\s*\\(",
        "callMethod": "buildAnalysisPrompt",
        "fullMatch": "buildAnalysisPrompt(",
        "context": {
          "before": [
            {
              "lineNumber": 630,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 631,
              "content": "/**",
              "indent": 4
            },
            {
              "lineNumber": 632,
              "content": "* AIプロンプトの構築",
              "indent": 5
            },
            {
              "lineNumber": 633,
              "content": "* @private",
              "indent": 5
            },
            {
              "lineNumber": 634,
              "content": "*/",
              "indent": 5
            }
          ],
          "current": {
            "lineNumber": 635,
            "content": "private buildAnalysisPrompt(",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 636,
              "content": "foreshadowing: Foreshadowing,",
              "indent": 8
            },
            {
              "lineNumber": 637,
              "content": "chapterContent: string,",
              "indent": 8
            },
            {
              "lineNumber": 638,
              "content": "chapterNumber: number,",
              "indent": 8
            },
            {
              "lineNumber": 639,
              "content": "qualityMetrics: UnifiedForeshadowingData['qualityMetrics']",
              "indent": 8
            },
            {
              "lineNumber": 640,
              "content": "): string {",
              "indent": 4
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 624,
            "distance": 11
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "buildAnalysisPrompt",
            "relatedMethods": [
              "buildAnalysisPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "構築",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "const",
            "chapterDifference",
            "Math",
            "abs",
            "plannedChapter",
            "chapterNumber",
            "return",
            "else",
            "private"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "25c8c586f9757651078f35e15b903e6e"
      },
      {
        "id": "call_7b8b64d8",
        "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
        "fileName": "resolution-advisor.ts",
        "lineNumber": 408,
        "lineContent": "const aiResponse = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 403,
              "content": "chapterNumber,",
              "indent": 12
            },
            {
              "lineNumber": 404,
              "content": "qualityMetrics",
              "indent": 12
            },
            {
              "lineNumber": 405,
              "content": ");",
              "indent": 8
            },
            {
              "lineNumber": 406,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 407,
              "content": "try {",
              "indent": 8
            }
          ],
          "current": {
            "lineNumber": 408,
            "content": "const aiResponse = await this.geminiClient.generateText(prompt, {",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 409,
              "content": "temperature: 0.1 // 分析タスクは低温で",
              "indent": 16
            },
            {
              "lineNumber": 410,
              "content": "});",
              "indent": 12
            },
            {
              "lineNumber": 411,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 412,
              "content": "// レスポンスの安全な解析",
              "indent": 12
            },
            {
              "lineNumber": 413,
              "content": "const aiAnalysis = this.parseAIResponse(aiResponse);",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 373,
            "distance": 35
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "]\n    ): Promise<ResolutionEvaluationResult> {\n        // タイミング信頼度の計算\n        const timingScore = this.calculateTimingConfidence(foreshadowing, chapterNumber);\n\n        // AIプロンプトの構築（統合記憶コンテキスト含む）\n        const prompt = this.buildAnalysisPrompt(\n            foreshadowing, \n            chapterContent, \n            chapterNumber, \n            qualityMetrics\n        );\n\n        try {\n            const aiResponse = await this.geminiClient.generateText(prompt, {\n                temperature: 0.1 // 分析タスクは低温で\n            });\n\n            // レスポンスの安全な解析\n            const aiAnalysis = this.parseAIResponse(aiResponse);\n            const aiScore = aiAnalysis.confidence;\n\n            // 最終的な信頼度計算（タイミング + AI分析 + システム品質）\n            const finalScore = this.calculateFinalConfidence(timingScore, aiScore, qualityMetrics);\n\n            return {\n                isPossible: aiAnalysis.isPossible && finalScore >= 0.6,\n                confidence: finalScore,\n                reason: aiAnalysis.reason || ",
            "fullLength": 996,
            "truncatedContent": "]\n    ): Promise<ResolutionEvaluationResult> {\n        // タイミング信頼度の計算\n        const timingScore = this.calculateTimingConfidence(foreshadowing, chapterNumber);\n\n        // AIプロンプトの構築（統合記憶コンテキスト含む）\n        const prompt = this.buildAnalysisPrompt(\n            foreshadowing, \n            chapterContent, \n            chapterNumber, \n            qualityMetrics\n        );\n\n        try {\n            const aiResponse = await this.geminiClient.generateText(prompt, {\n                temperature: 0.1 // 分析タスクは低温で\n            });\n\n            // レスポンスの安全な解析\n            const aiAnalysis = this.parseAIResponse(aiResponse);\n            const aiScore = aiAnalysis.confidence;\n\n            // 最終的な信頼度計算（タイミング + AI分析 + システム品質）\n            const finalScore = this.calculateFinalConfidence(timingScore, aiScore, qualityMetrics);\n\n            return {\n                isPossible: aiAnalysis.isPossible && finalScore >= 0.6,\n                confidence: finalScore,\n                reason: aiAnalysis.reason || ",
            "hash": "2d4b2a57bab23204abc2498362f720bb",
            "keywords": [
              "分析",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "]\n    ): Promise<ResolutionEvaluationResult> {\n        // タイミング信頼度の計算\n        const timingScore = this.calculateTimingConfidence(foreshadowing, chapterNumber);\n\n        // AIプロンプトの構築（統合記憶コンテキスト含む）\n        const prompt = this.buildAnalysisPrompt(\n            foreshadowing, \n            chapterContent, \n            chapterNumber, \n            qualityMetrics\n        );\n\n        try {\n            const aiResponse = await this.geminiClient.generateText(prompt, {\n                temperature: 0.1 // 分析タスクは低温で\n            });\n\n            // レスポンスの安全な解析\n            const aiAnalysis = this.parseAIResponse(aiResponse);\n            const aiScore = aiAnalysis.confidence;\n\n            // 最終的な信頼度計算（タイミング + AI分析 + システム品質）\n            const finalScore = this.calculateFinalConfidence(timingScore, aiScore, qualityMetrics);\n\n            return {\n                isPossible: aiAnalysis.isPossible && finalScore >= 0.6,\n                confidence: finalScore,\n                reason: aiAnalysis.reason || ",
            "fullLength": 996,
            "truncatedContent": "]\n    ): Promise<ResolutionEvaluationResult> {\n        // タイミング信頼度の計算\n        const timingScore = this.calculateTimingConfidence(foreshadowing, chapterNumber);\n\n        // AIプロンプトの構築（統合記憶コンテキスト含む）\n        const prompt = this.buildAnalysisPrompt(\n            foreshadowing, \n            chapterContent, \n            chapterNumber, \n            qualityMetrics\n        );\n\n        try {\n            const aiResponse = await this.geminiClient.generateText(prompt, {\n                temperature: 0.1 // 分析タスクは低温で\n            });\n\n            // レスポンスの安全な解析\n            const aiAnalysis = this.parseAIResponse(aiResponse);\n            const aiScore = aiAnalysis.confidence;\n\n            // 最終的な信頼度計算（タイミング + AI分析 + システム品質）\n            const finalScore = this.calculateFinalConfidence(timingScore, aiScore, qualityMetrics);\n\n            return {\n                isPossible: aiAnalysis.isPossible && finalScore >= 0.6,\n                confidence: finalScore,\n                reason: aiAnalysis.reason || ",
            "hash": "2d4b2a57bab23204abc2498362f720bb",
            "keywords": [
              "分析",
              "chapter",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildAnalysisPrompt",
            "relatedMethods": [
              "buildAnalysisPrompt",
              "aiAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<ResolutionEvaluationResult>"
            ],
            "extractedTypes": [
              "ResolutionEvaluationResult>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "resolution",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1 // 分析タスクは低温で",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "構築",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "qualityMetrics",
            "UnifiedForeshadowingData",
            "Promise",
            "ResolutionEvaluationResult",
            "const",
            "timingScore",
            "this",
            "calculateTimingConfidence",
            "foreshadowing",
            "chapterNumber"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "0b87572e5689e44f086ec5a5d6affc4d"
      },
      {
        "id": "call_869cbbc6",
        "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
        "fileName": "chapter-generator.ts",
        "lineNumber": 357,
        "lineContent": "this.geminiClient.generateText(enhancedPrompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 352,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 353,
              "content": "// テキスト生成",
              "indent": 12
            },
            {
              "lineNumber": 354,
              "content": "logger.info(`Calling Gemini API for chapter ${chapterNumber}`);",
              "indent": 12
            },
            {
              "lineNumber": 355,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 356,
              "content": "const generatedText = await withTimeout(",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 357,
            "content": "this.geminiClient.generateText(enhancedPrompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 358,
              "content": "targetLength: enhancementOptions?.targetLength || params.generation.targetLength,",
              "indent": 20
            },
            {
              "lineNumber": 359,
              "content": "temperature: params.generation.temperature,",
              "indent": 20
            },
            {
              "lineNumber": 360,
              "content": "frequencyPenalty: params.generation.frequencyPenalty,",
              "indent": 20
            },
            {
              "lineNumber": 361,
              "content": "presencePenalty: params.generation.presencePenalty,",
              "indent": 20
            },
            {
              "lineNumber": 362,
              "content": "...(enhancementOptions?.overrides?.model ? { model: enhancementOptions.overrides.model } : {}),",
              "indent": 20
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 346,
            "distance": 11
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ", {\n                    error: promptSaveError instanceof Error ? promptSaveError.message : String(promptSaveError)\n                });\n                // プロンプト保存失敗は生成処理を停止させない\n            }\n\n            // テキスト生成\n            logger.info(",
            "fullLength": 238,
            "truncatedContent": ", {\n                    error: promptSaveError instanceof Error ? promptSaveError.message : String(promptSaveError)\n                });\n                // プロンプト保存失敗は生成処理を停止させない\n            }\n\n            // テキスト生成\n            logger.info(",
            "hash": "1a1c874b4efe1d178ab108d0376de6c7",
            "keywords": [
              "生成"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ", {\n                    error: promptSaveError instanceof Error ? promptSaveError.message : String(promptSaveError)\n                });\n                // プロンプト保存失敗は生成処理を停止させない\n            }\n\n            // テキスト生成\n            logger.info(",
            "fullLength": 238,
            "truncatedContent": ", {\n                    error: promptSaveError instanceof Error ? promptSaveError.message : String(promptSaveError)\n                });\n                // プロンプト保存失敗は生成処理を停止させない\n            }\n\n            // テキスト生成\n            logger.info(",
            "hash": "1a1c874b4efe1d178ab108d0376de6c7",
            "hasVariables": false,
            "variableCount": 0
          },
          {
            "type": "method_based",
            "suggestedPurpose": "savedPrompt",
            "relatedMethods": [
              "savedPrompt",
              "enhancedPrompt",
              "AI_GENERATION"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "params.generation.temperature",
            "source": "object_literal",
            "confidence": "medium"
          },
          "model": {
            "value": "enhancementOptions.overrides.model",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "背景",
            "plot",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "catch",
            "promptSaveError",
            "logger",
            "warn",
            "Failed",
            "save",
            "prompt",
            "for",
            "chapter",
            "chapterNumber"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "abcd09bbf657661a476210500145c0e9"
      },
      {
        "id": "call_869cbbc6",
        "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
        "fileName": "chapter-generator.ts",
        "lineNumber": 357,
        "lineContent": "this.geminiClient.generateText(enhancedPrompt, {",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 352,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 353,
              "content": "// テキスト生成",
              "indent": 12
            },
            {
              "lineNumber": 354,
              "content": "logger.info(`Calling Gemini API for chapter ${chapterNumber}`);",
              "indent": 12
            },
            {
              "lineNumber": 355,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 356,
              "content": "const generatedText = await withTimeout(",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 357,
            "content": "this.geminiClient.generateText(enhancedPrompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 358,
              "content": "targetLength: enhancementOptions?.targetLength || params.generation.targetLength,",
              "indent": 20
            },
            {
              "lineNumber": 359,
              "content": "temperature: params.generation.temperature,",
              "indent": 20
            },
            {
              "lineNumber": 360,
              "content": "frequencyPenalty: params.generation.frequencyPenalty,",
              "indent": 20
            },
            {
              "lineNumber": 361,
              "content": "presencePenalty: params.generation.presencePenalty,",
              "indent": 20
            },
            {
              "lineNumber": 362,
              "content": "...(enhancementOptions?.overrides?.model ? { model: enhancementOptions.overrides.model } : {}),",
              "indent": 20
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 346,
            "distance": 11
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ", {\n                    error: promptSaveError instanceof Error ? promptSaveError.message : String(promptSaveError)\n                });\n                // プロンプト保存失敗は生成処理を停止させない\n            }\n\n            // テキスト生成\n            logger.info(",
            "fullLength": 238,
            "truncatedContent": ", {\n                    error: promptSaveError instanceof Error ? promptSaveError.message : String(promptSaveError)\n                });\n                // プロンプト保存失敗は生成処理を停止させない\n            }\n\n            // テキスト生成\n            logger.info(",
            "hash": "1a1c874b4efe1d178ab108d0376de6c7",
            "keywords": [
              "生成"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ", {\n                    error: promptSaveError instanceof Error ? promptSaveError.message : String(promptSaveError)\n                });\n                // プロンプト保存失敗は生成処理を停止させない\n            }\n\n            // テキスト生成\n            logger.info(",
            "fullLength": 238,
            "truncatedContent": ", {\n                    error: promptSaveError instanceof Error ? promptSaveError.message : String(promptSaveError)\n                });\n                // プロンプト保存失敗は生成処理を停止させない\n            }\n\n            // テキスト生成\n            logger.info(",
            "hash": "1a1c874b4efe1d178ab108d0376de6c7",
            "hasVariables": false,
            "variableCount": 0
          },
          {
            "type": "method_based",
            "suggestedPurpose": "savedPrompt",
            "relatedMethods": [
              "savedPrompt",
              "enhancedPrompt",
              "AI_GENERATION"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "params.generation.temperature",
            "source": "object_literal",
            "confidence": "medium"
          },
          "model": {
            "value": "enhancementOptions.overrides.model",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "背景",
            "plot",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "catch",
            "promptSaveError",
            "logger",
            "warn",
            "Failed",
            "save",
            "prompt",
            "for",
            "chapter",
            "chapterNumber"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "abcd09bbf657661a476210500145c0e9"
      },
      {
        "id": "call_e7f7a802",
        "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
        "fileName": "chapter-generator.ts",
        "lineNumber": 914,
        "lineContent": "const apiKeyValid = await this.geminiClient.validateApiKey();",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "validateApiKey",
        "fullMatch": "geminiClient.validateApiKey(",
        "context": {
          "before": [
            {
              "lineNumber": 909,
              "content": "initialized: false,",
              "indent": 20
            },
            {
              "lineNumber": 910,
              "content": "reason: 'システムパラメータが正しく初期化されていません'",
              "indent": 20
            },
            {
              "lineNumber": 911,
              "content": "};",
              "indent": 16
            },
            {
              "lineNumber": 912,
              "content": "}",
              "indent": 12
            },
            {
              "lineNumber": 913,
              "content": "",
              "indent": 0
            }
          ],
          "current": {
            "lineNumber": 914,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 915,
              "content": "if (!apiKeyValid) {",
              "indent": 12
            },
            {
              "lineNumber": 916,
              "content": "return {",
              "indent": 16
            },
            {
              "lineNumber": 917,
              "content": "initialized: false,",
              "indent": 20
            },
            {
              "lineNumber": 918,
              "content": "reason: 'GeminiのAPIキーが無効です'",
              "indent": 20
            },
            {
              "lineNumber": 919,
              "content": "};",
              "indent": 16
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 907,
            "distance": 7
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "メインキャラクターが設定されていません: ${characterCheckResult.message}",
            "fullLength": 52,
            "truncatedContent": "メインキャラクターが設定されていません: ${characterCheckResult.message}",
            "hash": "6eed92158fdc207bddaeccc3e0353d0e",
            "keywords": [
              "キャラクター",
              "設定",
              "character"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "背景",
            "plot",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [],
          "complexity": "low",
          "dependencies": [
            "return",
            "initialized",
            "false",
            "reason",
            "characterCheckResult",
            "message",
            "const",
            "params",
            "parameterManager",
            "getParameters"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "3b27cd641a438081b1461645efa2ee66"
      },
      {
        "id": "call_ca2cf1b3",
        "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
        "fileName": "chapter-generator.ts",
        "lineNumber": 357,
        "lineContent": "this.geminiClient.generateText(enhancedPrompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 352,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 353,
              "content": "// テキスト生成",
              "indent": 12
            },
            {
              "lineNumber": 354,
              "content": "logger.info(`Calling Gemini API for chapter ${chapterNumber}`);",
              "indent": 12
            },
            {
              "lineNumber": 355,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 356,
              "content": "const generatedText = await withTimeout(",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 357,
            "content": "this.geminiClient.generateText(enhancedPrompt, {",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 358,
              "content": "targetLength: enhancementOptions?.targetLength || params.generation.targetLength,",
              "indent": 20
            },
            {
              "lineNumber": 359,
              "content": "temperature: params.generation.temperature,",
              "indent": 20
            },
            {
              "lineNumber": 360,
              "content": "frequencyPenalty: params.generation.frequencyPenalty,",
              "indent": 20
            },
            {
              "lineNumber": 361,
              "content": "presencePenalty: params.generation.presencePenalty,",
              "indent": 20
            },
            {
              "lineNumber": 362,
              "content": "...(enhancementOptions?.overrides?.model ? { model: enhancementOptions.overrides.model } : {}),",
              "indent": 20
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 346,
            "distance": 11
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ", {\n                    error: promptSaveError instanceof Error ? promptSaveError.message : String(promptSaveError)\n                });\n                // プロンプト保存失敗は生成処理を停止させない\n            }\n\n            // テキスト生成\n            logger.info(",
            "fullLength": 238,
            "truncatedContent": ", {\n                    error: promptSaveError instanceof Error ? promptSaveError.message : String(promptSaveError)\n                });\n                // プロンプト保存失敗は生成処理を停止させない\n            }\n\n            // テキスト生成\n            logger.info(",
            "hash": "1a1c874b4efe1d178ab108d0376de6c7",
            "keywords": [
              "生成"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ", {\n                    error: promptSaveError instanceof Error ? promptSaveError.message : String(promptSaveError)\n                });\n                // プロンプト保存失敗は生成処理を停止させない\n            }\n\n            // テキスト生成\n            logger.info(",
            "fullLength": 238,
            "truncatedContent": ", {\n                    error: promptSaveError instanceof Error ? promptSaveError.message : String(promptSaveError)\n                });\n                // プロンプト保存失敗は生成処理を停止させない\n            }\n\n            // テキスト生成\n            logger.info(",
            "hash": "1a1c874b4efe1d178ab108d0376de6c7",
            "hasVariables": false,
            "variableCount": 0
          },
          {
            "type": "method_based",
            "suggestedPurpose": "savedPrompt",
            "relatedMethods": [
              "savedPrompt",
              "enhancedPrompt",
              "AI_GENERATION"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "params.generation.temperature",
            "source": "object_literal",
            "confidence": "medium"
          },
          "model": {
            "value": "enhancementOptions.overrides.model",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "背景",
            "plot",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "catch",
            "promptSaveError",
            "logger",
            "warn",
            "Failed",
            "save",
            "prompt",
            "for",
            "chapter",
            "chapterNumber"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "874d5f62e18e3311107493008b27b4fd"
      },
      {
        "id": "call_9819843c",
        "filePath": "src\\lib\\generation\\engine.ts",
        "fileName": "engine.ts",
        "lineNumber": 184,
        "lineContent": "async generateChapter(",
        "matchedPattern": "(\\w+\\.)?generateChapter\\s*\\(",
        "callMethod": "generateChapter",
        "fullMatch": "generateChapter(",
        "context": {
          "before": [
            {
              "lineNumber": 179,
              "content": "}",
              "indent": 2
            },
            {
              "lineNumber": 180,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 181,
              "content": "/**",
              "indent": 2
            },
            {
              "lineNumber": 182,
              "content": "* チャプターの生成",
              "indent": 3
            },
            {
              "lineNumber": 183,
              "content": "*/",
              "indent": 3
            }
          ],
          "current": {
            "lineNumber": 184,
            "content": "async generateChapter(",
            "indent": 2
          },
          "after": [
            {
              "lineNumber": 185,
              "content": "chapterNumber: number,",
              "indent": 4
            },
            {
              "lineNumber": 186,
              "content": "options?: GenerateChapterRequest",
              "indent": 4
            },
            {
              "lineNumber": 187,
              "content": "): Promise<Chapter> {",
              "indent": 2
            },
            {
              "lineNumber": 188,
              "content": "try {",
              "indent": 4
            },
            {
              "lineNumber": 189,
              "content": "return await this.chapterGenerator.generate(chapterNumber, options);",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 167,
            "distance": 17
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "Failed to generate chapter ${chapterNumber} in NovelGenerationEngine",
            "fullLength": 68,
            "truncatedContent": "Failed to generate chapter ${chapterNumber} in NovelGenerationEngine",
            "hash": "06f3ce74be45ab6abbb600a70a14b9a5",
            "keywords": [
              "generate",
              "chapter",
              "Novel"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "NovelGeneration",
            "relatedMethods": [
              "NovelGeneration",
              "CHAPTER_GENERATION"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": GenerateChapter",
              ": Promise<Chapter>"
            ],
            "extractedTypes": [
              "GenerateChapter",
              "Chapter>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "plot",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "rStatus",
            "const",
            "plotManagerReady",
            "plotStatus",
            "isInitialized",
            "recommendations",
            "push",
            "PlotManager",
            "requires",
            "initialization"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "54dda5fdbc50f09b6cf6b8f277e6fe40"
      },
      {
        "id": "call_c66a8107",
        "filePath": "src\\lib\\generation\\engine.ts",
        "fileName": "engine.ts",
        "lineNumber": 261,
        "lineContent": "async generateChapter(chapterNumber: number, options?: GenerateChapterRequest): Promise<Chapter> {",
        "matchedPattern": "(\\w+\\.)?generateChapter\\s*\\(",
        "callMethod": "generateChapter",
        "fullMatch": "generateChapter(",
        "context": {
          "before": [
            {
              "lineNumber": 256,
              "content": "*/",
              "indent": 1
            },
            {
              "lineNumber": 257,
              "content": "export const generationEngine = {",
              "indent": 0
            },
            {
              "lineNumber": 258,
              "content": "/**",
              "indent": 2
            },
            {
              "lineNumber": 259,
              "content": "* チャプター生成（ServiceContainer経由）",
              "indent": 3
            },
            {
              "lineNumber": 260,
              "content": "*/",
              "indent": 3
            }
          ],
          "current": {
            "lineNumber": 261,
            "content": "async generateChapter(chapterNumber: number, options?: GenerateChapterRequest): Promise<Chapter> {",
            "indent": 2
          },
          "after": [
            {
              "lineNumber": 262,
              "content": "const engine = await getGenerationEngineInstance();",
              "indent": 4
            },
            {
              "lineNumber": 263,
              "content": "return engine.generateChapter(chapterNumber, options);",
              "indent": 4
            },
            {
              "lineNumber": 264,
              "content": "},",
              "indent": 2
            },
            {
              "lineNumber": 265,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 266,
              "content": "/**",
              "indent": 2
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 242,
            "distance": 19
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "NovelGeneration",
            "relatedMethods": [
              "NovelGeneration",
              "getGeneration"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": GenerateChapter",
              ": Promise<Chapter>",
              ": Promise<{\n    apiKeyValid: boolean;\n    modelInfo: any;\n    parameters: SystemParameters;\n  }>"
            ],
            "extractedTypes": [
              "GenerateChapter",
              "Chapter>",
              "{\n    apiKeyValid: boolean;\n    modelInfo: any;\n    parameters: SystemParameters;\n  }>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "enerationEngine",
            "successfully",
            "initialized",
            "through",
            "ServiceContainer",
            "catch",
            "error",
            "logger",
            "Failed",
            "initialize"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "6339718b3b4241879fd68eb3934757bd"
      },
      {
        "id": "call_bfc638e7",
        "filePath": "src\\lib\\generation\\engine.ts",
        "fileName": "engine.ts",
        "lineNumber": 263,
        "lineContent": "return engine.generateChapter(chapterNumber, options);",
        "matchedPattern": "(\\w+\\.)?generateChapter\\s*\\(",
        "callMethod": "generateChapter",
        "fullMatch": "engine.generateChapter(",
        "context": {
          "before": [
            {
              "lineNumber": 258,
              "content": "/**",
              "indent": 2
            },
            {
              "lineNumber": 259,
              "content": "* チャプター生成（ServiceContainer経由）",
              "indent": 3
            },
            {
              "lineNumber": 260,
              "content": "*/",
              "indent": 3
            },
            {
              "lineNumber": 261,
              "content": "async generateChapter(chapterNumber: number, options?: GenerateChapterRequest): Promise<Chapter> {",
              "indent": 2
            },
            {
              "lineNumber": 262,
              "content": "const engine = await getGenerationEngineInstance();",
              "indent": 4
            }
          ],
          "current": {
            "lineNumber": 263,
            "content": "return engine.generateChapter(chapterNumber, options);",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 264,
              "content": "},",
              "indent": 2
            },
            {
              "lineNumber": 265,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 266,
              "content": "/**",
              "indent": 2
            },
            {
              "lineNumber": 267,
              "content": "* システム状態確認（ServiceContainer経由）",
              "indent": 3
            },
            {
              "lineNumber": 268,
              "content": "*/",
              "indent": 3
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 242,
            "distance": 21
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "NovelGeneration",
            "relatedMethods": [
              "NovelGeneration",
              "getGeneration"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": GenerateChapter",
              ": Promise<Chapter>",
              ": Promise<{\n    apiKeyValid: boolean;\n    modelInfo: any;\n    parameters: SystemParameters;\n  }>"
            ],
            "extractedTypes": [
              "GenerateChapter",
              "Chapter>",
              "{\n    apiKeyValid: boolean;\n    modelInfo: any;\n    parameters: SystemParameters;\n  }>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "ServiceContainer",
            "error",
            "instanceof",
            "Error",
            "message",
            "String",
            "throw",
            "return",
            "generationEngineInstance",
            "NovelGenerationEngine"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "c2b30cc1f7807247252c4e407b8224a9"
      },
      {
        "id": "call_95cf4bd3",
        "filePath": "src\\lib\\generation\\engine.ts",
        "fileName": "engine.ts",
        "lineNumber": 72,
        "lineContent": "this.geminiClient.setModelMap(params.generation.models);",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "setModelMap",
        "fullMatch": "geminiClient.setModelMap(",
        "context": {
          "before": [
            {
              "lineNumber": 67,
              "content": "try {",
              "indent": 4
            },
            {
              "lineNumber": 68,
              "content": "parameterManager.onParameterChanged(this.handleParameterChange.bind(this));",
              "indent": 6
            },
            {
              "lineNumber": 69,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 70,
              "content": "const params = parameterManager.getParameters();",
              "indent": 6
            },
            {
              "lineNumber": 71,
              "content": "if (params.generation.models) {",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 72,
            "content": "this.geminiClient.setModelMap(params.generation.models);",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 73,
              "content": "logger.info('Model map initialized from parameters');",
              "indent": 8
            },
            {
              "lineNumber": 74,
              "content": "}",
              "indent": 6
            },
            {
              "lineNumber": 75,
              "content": "} catch (error) {",
              "indent": 4
            },
            {
              "lineNumber": 76,
              "content": "logger.warn('Parameter change listener setup failed', {",
              "indent": 6
            },
            {
              "lineNumber": 77,
              "content": "error: error instanceof Error ? error.message : String(error)",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 71,
            "distance": 1
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ", {\n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  }\n\n  /**\n   * パラメータ変更リスナーの設定\n   */\n  private setupParameterChangeListener(): void {\n    try {\n      parameterManager.onParameterChanged(this.handleParameterChange.bind(this));\n\n      const params = parameterManager.getParameters();\n      if (params.generation.models) {\n        this.geminiClient.setModelMap(params.generation.models);\n        logger.info(",
            "fullLength": 447,
            "truncatedContent": ", {\n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  }\n\n  /**\n   * パラメータ変更リスナーの設定\n   */\n  private setupParameterChangeListener(): void {\n    try {\n      parameterManager.onParameterChanged(this.handleParameterChange.bind(this));\n\n      const params = parameterManager.getParameters();\n      if (params.generation.models) {\n        this.geminiClient.setModelMap(params.generation.models);\n        logger.info(",
            "hash": "f7e2da2e1070eef001bff57ab3abddb7",
            "keywords": [
              "設定"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "plot",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [],
          "complexity": "low",
          "dependencies": [
            "ager",
            "integration",
            "completed",
            "catch",
            "error",
            "logger",
            "warn",
            "PlotManager",
            "failed",
            "continuing"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "55afd41881a56a3fd40d10117159afef"
      },
      {
        "id": "call_cc81755d",
        "filePath": "src\\lib\\generation\\engine.ts",
        "fileName": "engine.ts",
        "lineNumber": 92,
        "lineContent": "this.geminiClient.setModelMap(params.generation.models);",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "setModelMap",
        "fullMatch": "geminiClient.setModelMap(",
        "context": {
          "before": [
            {
              "lineNumber": 87,
              "content": "logger.info(`Generation parameter changed: ${path}`);",
              "indent": 6
            },
            {
              "lineNumber": 88,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 89,
              "content": "if (path === 'generation.models' || path === 'all') {",
              "indent": 6
            },
            {
              "lineNumber": 90,
              "content": "const params = parameterManager.getParameters();",
              "indent": 8
            },
            {
              "lineNumber": 91,
              "content": "if (params.generation.models) {",
              "indent": 8
            }
          ],
          "current": {
            "lineNumber": 92,
            "content": "this.geminiClient.setModelMap(params.generation.models);",
            "indent": 10
          },
          "after": [
            {
              "lineNumber": 93,
              "content": "logger.info('Updated model map in GeminiClient');",
              "indent": 10
            },
            {
              "lineNumber": 94,
              "content": "}",
              "indent": 8
            },
            {
              "lineNumber": 95,
              "content": "}",
              "indent": 6
            },
            {
              "lineNumber": 96,
              "content": "}",
              "indent": 4
            },
            {
              "lineNumber": 97,
              "content": "}",
              "indent": 2
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 91,
            "distance": 1
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<{\n    apiKeyValid: boolean;\n    modelInfo: any;\n    parameters: SystemParameters;\n  }>"
            ],
            "extractedTypes": [
              "{\n    apiKeyValid: boolean;\n    modelInfo: any;\n    parameters: SystemParameters;\n  }>"
            ]
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [],
          "complexity": "low",
          "dependencies": [
            "ner",
            "setup",
            "failed",
            "error",
            "instanceof",
            "Error",
            "message",
            "String",
            "private",
            "handleParameterChange"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "496a12e7b084e1193d9f0eac696eba43"
      },
      {
        "id": "call_be8a9ee2",
        "filePath": "src\\lib\\generation\\engine.ts",
        "fileName": "engine.ts",
        "lineNumber": 107,
        "lineContent": "const apiKeyValid = await this.geminiClient.validateApiKey();",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "validateApiKey",
        "fullMatch": "geminiClient.validateApiKey(",
        "context": {
          "before": [
            {
              "lineNumber": 102,
              "content": "async checkStatus(): Promise<{",
              "indent": 2
            },
            {
              "lineNumber": 103,
              "content": "apiKeyValid: boolean;",
              "indent": 4
            },
            {
              "lineNumber": 104,
              "content": "modelInfo: any;",
              "indent": 4
            },
            {
              "lineNumber": 105,
              "content": "parameters: SystemParameters;",
              "indent": 4
            },
            {
              "lineNumber": 106,
              "content": "}> {",
              "indent": 2
            }
          ],
          "current": {
            "lineNumber": 107,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 108,
              "content": "const modelInfo = this.geminiClient.getModelInfo();",
              "indent": 4
            },
            {
              "lineNumber": 109,
              "content": "const parameters = parameterManager.getParameters();",
              "indent": 4
            },
            {
              "lineNumber": 110,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 111,
              "content": "return {",
              "indent": 4
            },
            {
              "lineNumber": 112,
              "content": "apiKeyValid,",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 91,
            "distance": 16
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<{\n    apiKeyValid: boolean;\n    modelInfo: any;\n    parameters: SystemParameters;\n  }>"
            ],
            "extractedTypes": [
              "{\n    apiKeyValid: boolean;\n    modelInfo: any;\n    parameters: SystemParameters;\n  }>"
            ]
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [],
          "complexity": "low",
          "dependencies": [
            "path",
            "generation",
            "models",
            "all",
            "const",
            "params",
            "parameterManager",
            "getParameters",
            "this",
            "geminiClient"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "603dc64045eb76d0f1210b6447153bee"
      },
      {
        "id": "call_fccffdbd",
        "filePath": "src\\lib\\generation\\engine.ts",
        "fileName": "engine.ts",
        "lineNumber": 108,
        "lineContent": "const modelInfo = this.geminiClient.getModelInfo();",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "getModelInfo",
        "fullMatch": "geminiClient.getModelInfo(",
        "context": {
          "before": [
            {
              "lineNumber": 103,
              "content": "apiKeyValid: boolean;",
              "indent": 4
            },
            {
              "lineNumber": 104,
              "content": "modelInfo: any;",
              "indent": 4
            },
            {
              "lineNumber": 105,
              "content": "parameters: SystemParameters;",
              "indent": 4
            },
            {
              "lineNumber": 106,
              "content": "}> {",
              "indent": 2
            },
            {
              "lineNumber": 107,
              "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
              "indent": 4
            }
          ],
          "current": {
            "lineNumber": 108,
            "content": "const modelInfo = this.geminiClient.getModelInfo();",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 109,
              "content": "const parameters = parameterManager.getParameters();",
              "indent": 4
            },
            {
              "lineNumber": 110,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 111,
              "content": "return {",
              "indent": 4
            },
            {
              "lineNumber": 112,
              "content": "apiKeyValid,",
              "indent": 6
            },
            {
              "lineNumber": 113,
              "content": "modelInfo,",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 91,
            "distance": 17
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<{\n    apiKeyValid: boolean;\n    modelInfo: any;\n    parameters: SystemParameters;\n  }>"
            ],
            "extractedTypes": [
              "{\n    apiKeyValid: boolean;\n    modelInfo: any;\n    parameters: SystemParameters;\n  }>"
            ]
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [],
          "complexity": "low",
          "dependencies": [
            "const",
            "params",
            "parameterManager",
            "getParameters",
            "generation",
            "models",
            "this",
            "geminiClient",
            "setModelMap",
            "logger"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "d9db19f8826875df6b4ef52eb1a69bb4"
      },
      {
        "id": "call_c6c4f0b6",
        "filePath": "src\\lib\\generation\\engine.ts",
        "fileName": "engine.ts",
        "lineNumber": 127,
        "lineContent": "const apiKeyValid = await this.geminiClient.validateApiKey();",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "validateApiKey",
        "fullMatch": "geminiClient.validateApiKey(",
        "context": {
          "before": [
            {
              "lineNumber": 122,
              "content": "apiKeyValid: boolean;",
              "indent": 4
            },
            {
              "lineNumber": 123,
              "content": "modelInfo: any;",
              "indent": 4
            },
            {
              "lineNumber": 124,
              "content": "parameters: SystemParameters;",
              "indent": 4
            },
            {
              "lineNumber": 125,
              "content": "plotManagerStatus?: any;",
              "indent": 4
            },
            {
              "lineNumber": 126,
              "content": "}> {",
              "indent": 2
            }
          ],
          "current": {
            "lineNumber": 127,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 128,
              "content": "const modelInfo = this.geminiClient.getModelInfo();",
              "indent": 4
            },
            {
              "lineNumber": 129,
              "content": "const parameters = parameterManager.getParameters();",
              "indent": 4
            },
            {
              "lineNumber": 130,
              "content": "const plotManagerStatus = getPlotManagerStatus();",
              "indent": 4
            },
            {
              "lineNumber": 131,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 132,
              "content": "return {",
              "indent": 4
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 91,
            "distance": 36
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<{\n    apiKeyValid: boolean;\n    modelInfo: any;\n    parameters: SystemParameters;\n    plotManagerStatus?: any;\n  }>"
            ],
            "extractedTypes": [
              "{\n    apiKeyValid: boolean;\n    modelInfo: any;\n    parameters: SystemParameters;\n    plotManagerStatus?: any;\n  }>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "plot",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [],
          "complexity": "medium",
          "dependencies": [
            "emParameters",
            "const",
            "apiKeyValid",
            "await",
            "this",
            "geminiClient",
            "validateApiKey",
            "modelInfo",
            "getModelInfo",
            "parameters"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "39cc25a66338b212f82667d0854964e4"
      },
      {
        "id": "call_f46a5856",
        "filePath": "src\\lib\\generation\\engine.ts",
        "fileName": "engine.ts",
        "lineNumber": 128,
        "lineContent": "const modelInfo = this.geminiClient.getModelInfo();",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "getModelInfo",
        "fullMatch": "geminiClient.getModelInfo(",
        "context": {
          "before": [
            {
              "lineNumber": 123,
              "content": "modelInfo: any;",
              "indent": 4
            },
            {
              "lineNumber": 124,
              "content": "parameters: SystemParameters;",
              "indent": 4
            },
            {
              "lineNumber": 125,
              "content": "plotManagerStatus?: any;",
              "indent": 4
            },
            {
              "lineNumber": 126,
              "content": "}> {",
              "indent": 2
            },
            {
              "lineNumber": 127,
              "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
              "indent": 4
            }
          ],
          "current": {
            "lineNumber": 128,
            "content": "const modelInfo = this.geminiClient.getModelInfo();",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 129,
              "content": "const parameters = parameterManager.getParameters();",
              "indent": 4
            },
            {
              "lineNumber": 130,
              "content": "const plotManagerStatus = getPlotManagerStatus();",
              "indent": 4
            },
            {
              "lineNumber": 131,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 132,
              "content": "return {",
              "indent": 4
            },
            {
              "lineNumber": 133,
              "content": "apiKeyValid,",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 91,
            "distance": 37
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<{\n    apiKeyValid: boolean;\n    modelInfo: any;\n    parameters: SystemParameters;\n    plotManagerStatus?: any;\n  }>"
            ],
            "extractedTypes": [
              "{\n    apiKeyValid: boolean;\n    modelInfo: any;\n    parameters: SystemParameters;\n    plotManagerStatus?: any;\n  }>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "plot",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "plot"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [],
          "complexity": "medium",
          "dependencies": [
            "miniClient",
            "validateApiKey",
            "const",
            "modelInfo",
            "this",
            "geminiClient",
            "getModelInfo",
            "parameters",
            "parameterManager",
            "getParameters"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "5171836c0800b62b683a3a2c21b692aa"
      },
      {
        "id": "call_f992fda8",
        "filePath": "src\\lib\\generation\\gemini-client.ts",
        "fileName": "gemini-client.ts",
        "lineNumber": 195,
        "lineContent": "* const text = await geminiClient.generateText(\"こんにちは、世界について教えてください\");",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 190,
              "content": "* @throws {GenerationError} 空のプロンプトが提供された場合、またはAPIが空の応答を返した場合",
              "indent": 5
            },
            {
              "lineNumber": 191,
              "content": "* @throws {ExternalServiceError} すべての再試行が失敗した場合",
              "indent": 5
            },
            {
              "lineNumber": 192,
              "content": "*",
              "indent": 5
            },
            {
              "lineNumber": 193,
              "content": "* @usage",
              "indent": 5
            },
            {
              "lineNumber": 194,
              "content": "* // 基本的な使用方法",
              "indent": 5
            }
          ],
          "current": {
            "lineNumber": 195,
            "content": "* const text = await geminiClient.generateText(\"こんにちは、世界について教えてください\");",
            "indent": 5
          },
          "after": [
            {
              "lineNumber": 196,
              "content": "*",
              "indent": 5
            },
            {
              "lineNumber": 197,
              "content": "* // オプション付きの使用方法",
              "indent": 5
            },
            {
              "lineNumber": 198,
              "content": "* const text = await geminiClient.generateText(\"詳細な分析をしてください\", {",
              "indent": 5
            },
            {
              "lineNumber": 199,
              "content": "*   temperature: 0.5,",
              "indent": 5
            },
            {
              "lineNumber": 200,
              "content": "*   targetLength: 5000,",
              "indent": 5
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 115,
            "distance": 80
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ");\r\n     * \r\n     * // オプション付きの使用方法\r\n     * const text = await geminiClient.generateText(",
            "fullLength": 89,
            "truncatedContent": ");\r\n     * \r\n     * // オプション付きの使用方法\r\n     * const text = await geminiClient.generateText(",
            "hash": "417dd5e58d9696d9511a72c5f49cbb36",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.5",
            "rawValue": "temperature: 0.5",
            "confidence": "high"
          },
          "frequencyPenalty": {
            "value": "0.5",
            "rawValue": "frequencyPenalty: 0.5",
            "confidence": "high"
          },
          "presencePenalty": {
            "value": "0.2",
            "rawValue": "presencePenalty: 0.2",
            "confidence": "high"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "Gemini",
            "API",
            "async",
            "param",
            "string",
            "prompt",
            "GenerationOptions",
            "purpose",
            "options",
            "returns"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "e903081b2c235442c25df28c40679d8b"
      },
      {
        "id": "call_443277df",
        "filePath": "src\\lib\\generation\\gemini-client.ts",
        "fileName": "gemini-client.ts",
        "lineNumber": 198,
        "lineContent": "* const text = await geminiClient.generateText(\"詳細な分析をしてください\", {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 193,
              "content": "* @usage",
              "indent": 5
            },
            {
              "lineNumber": 194,
              "content": "* // 基本的な使用方法",
              "indent": 5
            },
            {
              "lineNumber": 195,
              "content": "* const text = await geminiClient.generateText(\"こんにちは、世界について教えてください\");",
              "indent": 5
            },
            {
              "lineNumber": 196,
              "content": "*",
              "indent": 5
            },
            {
              "lineNumber": 197,
              "content": "* // オプション付きの使用方法",
              "indent": 5
            }
          ],
          "current": {
            "lineNumber": 198,
            "content": "* const text = await geminiClient.generateText(\"詳細な分析をしてください\", {",
            "indent": 5
          },
          "after": [
            {
              "lineNumber": 199,
              "content": "*   temperature: 0.5,",
              "indent": 5
            },
            {
              "lineNumber": 200,
              "content": "*   targetLength: 5000,",
              "indent": 5
            },
            {
              "lineNumber": 201,
              "content": "*   frequencyPenalty: 0.5,",
              "indent": 5
            },
            {
              "lineNumber": 202,
              "content": "*   presencePenalty: 0.2,",
              "indent": 5
            },
            {
              "lineNumber": 203,
              "content": "*   purpose: \"analysis\",",
              "indent": 5
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 115,
            "distance": 83
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ");\r\n     * \r\n     * // オプション付きの使用方法\r\n     * const text = await geminiClient.generateText(",
            "fullLength": 89,
            "truncatedContent": ");\r\n     * \r\n     * // オプション付きの使用方法\r\n     * const text = await geminiClient.generateText(",
            "hash": "417dd5e58d9696d9511a72c5f49cbb36",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.5",
            "source": "object_literal",
            "confidence": "medium"
          },
          "topP": {
            "value": "0.9\r\n     *",
            "source": "object_literal",
            "confidence": "medium"
          },
          "frequencyPenalty": {
            "value": "0.5",
            "rawValue": "frequencyPenalty: 0.5",
            "confidence": "high"
          },
          "presencePenalty": {
            "value": "0.2",
            "rawValue": "presencePenalty: 0.2",
            "confidence": "high"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "async",
            "param",
            "string",
            "prompt",
            "GenerationOptions",
            "purpose",
            "options",
            "returns",
            "Promise",
            "throws"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "f4a8a56c6676daaecaa114e505a606c0"
      },
      {
        "id": "call_4da878fb",
        "filePath": "src\\lib\\generation\\gemini-client.ts",
        "fileName": "gemini-client.ts",
        "lineNumber": 248,
        "lineContent": "async generateText(prompt: string, options?: GenerationOptions & { purpose?: string }): Promise<string> {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 243,
              "content": "*",
              "indent": 5
            },
            {
              "lineNumber": 244,
              "content": "* @monitoring",
              "indent": 5
            },
            {
              "lineNumber": 245,
              "content": "* - ログレベル: INFO/DEBUG/ERROR",
              "indent": 5
            },
            {
              "lineNumber": 246,
              "content": "* - メトリクス: プロンプトトークン数、レスポンストークン数、生成時間、試行回数",
              "indent": 5
            },
            {
              "lineNumber": 247,
              "content": "*/",
              "indent": 5
            }
          ],
          "current": {
            "lineNumber": 248,
            "content": "async generateText(prompt: string, options?: GenerationOptions & { purpose?: string }): Promise<string> {",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 249,
              "content": "if (!prompt || prompt.trim() === '') {",
              "indent": 8
            },
            {
              "lineNumber": 250,
              "content": "throw new GenerationError('Empty prompt provided', 'EMPTY_PROMPT');",
              "indent": 12
            },
            {
              "lineNumber": 251,
              "content": "}",
              "indent": 8
            },
            {
              "lineNumber": 252,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 253,
              "content": "logger.debug('Received generation options', {",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 115,
            "distance": 133
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "EMPTY_PROMPT",
            "relatedMethods": [
              "EMPTY_PROMPT"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<string>"
            ],
            "extractedTypes": [
              "string>"
            ]
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "設計",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "sleep",
            "error",
            "handling",
            "GenerationError",
            "API",
            "maxRetries",
            "ExternalServiceError",
            "performance",
            "considerations",
            "monitoring"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "b2257256670d4159a9f4e5784f77fe92"
      },
      {
        "id": "call_3ec4ba81",
        "filePath": "src\\lib\\generation\\gemini-client.ts",
        "fileName": "gemini-client.ts",
        "lineNumber": 716,
        "lineContent": "* const generatedText = await client.generateText(\"プロンプト\", {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "client.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 711,
              "content": "*   summary: 'gemini-2.0-pro',",
              "indent": 1
            },
            {
              "lineNumber": 712,
              "content": "*   content: 'gemini-2.0-flash'",
              "indent": 1
            },
            {
              "lineNumber": 713,
              "content": "* });",
              "indent": 1
            },
            {
              "lineNumber": 714,
              "content": "*",
              "indent": 1
            },
            {
              "lineNumber": 715,
              "content": "* // 用途を指定してテキスト生成",
              "indent": 1
            }
          ],
          "current": {
            "lineNumber": 716,
            "content": "* const generatedText = await client.generateText(\"プロンプト\", {",
            "indent": 1
          },
          "after": [
            {
              "lineNumber": 717,
              "content": "*   temperature: 0.7,",
              "indent": 1
            },
            {
              "lineNumber": 718,
              "content": "*   targetLength: 5000,",
              "indent": 1
            },
            {
              "lineNumber": 719,
              "content": "*   purpose: \"content\" // 用途を指定",
              "indent": 1
            },
            {
              "lineNumber": 720,
              "content": "* });",
              "indent": 1
            },
            {
              "lineNumber": 721,
              "content": "*",
              "indent": 1
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 496,
            "distance": 220
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\r\n * \r\n * const client = new GeminiClient();\r\n * \r\n * // 用途別モデルマップの設定\r\n * client.setModelMap({\r\n *   default: ",
            "fullLength": 111,
            "truncatedContent": ";\r\n * \r\n * const client = new GeminiClient();\r\n * \r\n * // 用途別モデルマップの設定\r\n * client.setModelMap({\r\n *   default: ",
            "hash": "2407410c182cce36c54fe1e61b6e5316",
            "keywords": [
              "設定"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n * });\r\n * \r\n * // 用途を指定してテキスト生成\r\n * const generatedText = await client.generateText(\"プロンプト\", {\r\n *   temperature: 0.7,\r\n *   targetLength: 5000,\r\n *   purpose: \"content\" // 用途を指定\r\n * });\r\n * \r\n * @example\r\n * // 基本的な使用例\r\n * import { GeminiClient } from ",
            "fullLength": 256,
            "truncatedContent": "\r\n * });\r\n * \r\n * // 用途を指定してテキスト生成\r\n * const generatedText = await client.generateText(\"プロンプト\", {\r\n *   temperature: 0.7,\r\n *   targetLength: 5000,\r\n *   purpose: \"content\" // 用途を指定\r\n * });\r\n * \r\n * @example\r\n * // 基本的な使用例\r\n * import { GeminiClient } from ",
            "hash": "d9ad9e8d96aa13df85cea2bfecf42608",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "medium",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": " // 用途を指定\r\n * });\r\n * \r\n * @example\r\n * // 基本的な使用例\r\n * import { GeminiClient } from '@/lib/generation/gemini-client';\r\n * \r\n * async function generateStory() {\r\n *   const client = new GeminiClient();\r\n *   const isValid = await client.validateApiKey();\r\n *   \r\n *   if (!isValid) {\r\n *     console.error(",
            "fullLength": 305,
            "truncatedContent": " // 用途を指定\r\n * });\r\n * \r\n * @example\r\n * // 基本的な使用例\r\n * import { GeminiClient } from '@/lib/generation/gemini-client';\r\n * \r\n * async function generateStory() {\r\n *   const client = new GeminiClient();\r\n *   const isValid = await client.validateApiKey();\r\n *   \r\n *   if (!isValid) {\r\n *     console.error(",
            "hash": "46937153a92ae7eac53283b670579b91",
            "keywords": [
              "generate",
              "Story"
            ],
            "sentiment": "neutral",
            "complexity": "medium",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n * });\r\n * \r\n * // 用途を指定してテキスト生成\r\n * const generatedText = await client.generateText(\"プロンプト\", {\r\n *   temperature: 0.7,\r\n *   targetLength: 5000,\r\n *   purpose: \"content\" // 用途を指定\r\n * });\r\n * \r\n * @example\r\n * // 基本的な使用例\r\n * import { GeminiClient } from ",
            "fullLength": 256,
            "truncatedContent": "\r\n * });\r\n * \r\n * // 用途を指定してテキスト生成\r\n * const generatedText = await client.generateText(\"プロンプト\", {\r\n *   temperature: 0.7,\r\n *   targetLength: 5000,\r\n *   purpose: \"content\" // 用途を指定\r\n * });\r\n * \r\n * @example\r\n * // 基本的な使用例\r\n * import { GeminiClient } from ",
            "hash": "d9ad9e8d96aa13df85cea2bfecf42608",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "medium",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.7",
            "source": "object_literal",
            "confidence": "medium"
          },
          "content": {
            "value": "'gemini-2.0-flash'\r\n *",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "type",
            "Class",
            "initialization",
            "API",
            "usage",
            "import",
            "GeminiClient",
            "from",
            "lib",
            "generation"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "4a0907ce5e9c34c59f46abb544e144da"
      },
      {
        "id": "call_0e05a2a9",
        "filePath": "src\\lib\\generation\\gemini-client.ts",
        "fileName": "gemini-client.ts",
        "lineNumber": 746,
        "lineContent": "*     const story = await client.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "client.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 741,
              "content": "*   });",
              "indent": 1
            },
            {
              "lineNumber": 742,
              "content": "*",
              "indent": 1
            },
            {
              "lineNumber": 743,
              "content": "*   const prompt = \"短い物語を書いてください。テーマは「友情」です。\";",
              "indent": 1
            },
            {
              "lineNumber": 744,
              "content": "*   try {",
              "indent": 1
            },
            {
              "lineNumber": 745,
              "content": "*     // コンテンツ生成用途を指定",
              "indent": 1
            }
          ],
          "current": {
            "lineNumber": 746,
            "content": "*     const story = await client.generateText(prompt, {",
            "indent": 1
          },
          "after": [
            {
              "lineNumber": 747,
              "content": "*       temperature: 0.8,",
              "indent": 1
            },
            {
              "lineNumber": 748,
              "content": "*       targetLength: 3000,",
              "indent": 1
            },
            {
              "lineNumber": 749,
              "content": "*       purpose: \"content\",",
              "indent": 1
            },
            {
              "lineNumber": 750,
              "content": "*       frequencyPenalty: 0.6,",
              "indent": 1
            },
            {
              "lineNumber": 751,
              "content": "*       presencePenalty: 0.3",
              "indent": 1
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 730,
            "distance": 16
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "短い物語を書いてください。テーマは「友情」です。",
            "fullLength": 24,
            "truncatedContent": "短い物語を書いてください。テーマは「友情」です。",
            "hash": "7bd27ef9fb21e483c18cc21a8f9b5dfc",
            "keywords": [
              "物語"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ");\r\n *     return;\r\n *   }\r\n *   \r\n *   // 用途別モデルの設定\r\n *   client.setModelMap({\r\n *     default: 'gemini-2.0-flash-lite',\r\n *     summary: 'gemini-2.0-pro',\r\n *     content: 'gemini-2.0-flash',\r\n *     analysis: 'gemini-2.0-pro'\r\n *   });\r\n *   \r\n *   const prompt = ",
            "fullLength": 267,
            "truncatedContent": ");\r\n *     return;\r\n *   }\r\n *   \r\n *   // 用途別モデルの設定\r\n *   client.setModelMap({\r\n *     default: 'gemini-2.0-flash-lite',\r\n *     summary: 'gemini-2.0-pro',\r\n *     content: 'gemini-2.0-flash',\r\n *     analysis: 'gemini-2.0-pro'\r\n *   });\r\n *   \r\n *   const prompt = ",
            "hash": "9ccc9b36e878603f041ff3d70140458a",
            "keywords": [
              "設定"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "短い物語を書いてください。テーマは「友情」です。",
            "fullLength": 24,
            "truncatedContent": "短い物語を書いてください。テーマは「友情」です。",
            "hash": "7bd27ef9fb21e483c18cc21a8f9b5dfc",
            "keywords": [
              "物語"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\r\n *   try {\r\n *     // コンテンツ生成用途を指定\r\n *     const story = await client.generateText(prompt, {\r\n *       temperature: 0.8,\r\n *       targetLength: 3000,\r\n *       purpose: ",
            "fullLength": 173,
            "truncatedContent": ";\r\n *   try {\r\n *     // コンテンツ生成用途を指定\r\n *     const story = await client.generateText(prompt, {\r\n *       temperature: 0.8,\r\n *       targetLength: 3000,\r\n *       purpose: ",
            "hash": "b53b5bbab07b13dfb05f16d375526bd4",
            "keywords": [
              "生成",
              "story",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.8",
            "source": "object_literal",
            "confidence": "medium"
          },
          "frequencyPenalty": {
            "value": "0.6",
            "rawValue": "frequencyPenalty: 0.6",
            "confidence": "high"
          },
          "presencePenalty": {
            "value": "0.3",
            "rawValue": "presencePenalty: 0.3",
            "confidence": "high"
          },
          "content": {
            "value": "'gemini-2.0-flash'",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "new",
            "GeminiClient",
            "const",
            "isValid",
            "await",
            "client",
            "validateApiKey",
            "console",
            "error",
            "API"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "22aa91745b171567bbd2aa2a6864beab"
      },
      {
        "id": "call_96b72f47",
        "filePath": "src\\lib\\generation\\gemini-client.ts",
        "fileName": "gemini-client.ts",
        "lineNumber": 407,
        "lineContent": "const result = await model.generateContent({",
        "matchedPattern": "(\\w+\\.)?generateContent\\s*\\(",
        "callMethod": "generateContent",
        "fullMatch": "model.generateContent(",
        "context": {
          "before": [
            {
              "lineNumber": 402,
              "content": "logger.info(`Sending request to Gemini API`, {",
              "indent": 8
            },
            {
              "lineNumber": 403,
              "content": "timestamp: new Date().toISOString(),",
              "indent": 12
            },
            {
              "lineNumber": 404,
              "content": "callStartTime: new Date().toISOString()",
              "indent": 12
            },
            {
              "lineNumber": 405,
              "content": "});",
              "indent": 8
            },
            {
              "lineNumber": 406,
              "content": "",
              "indent": 1
            }
          ],
          "current": {
            "lineNumber": 407,
            "content": "const result = await model.generateContent({",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 408,
              "content": "contents: [{ role: 'user', parts: [{ text: prompt }] }],",
              "indent": 12
            },
            {
              "lineNumber": 409,
              "content": "});",
              "indent": 8
            },
            {
              "lineNumber": 410,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 411,
              "content": "logger.info(`Received initial response from Gemini API`, {",
              "indent": 8
            },
            {
              "lineNumber": 412,
              "content": "timestamp: new Date().toISOString(),",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 349,
            "distance": 58
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ", parts: [{ text: prompt }] }],\r\n        });\r\n\r\n        logger.info(`Received initial response from Gemini API`, {\r\n            timestamp: new Date().toISOString(),\r\n            processingTime: Date.now() - startTime\r\n        });\r\n\r\n        const response = await result.response;\r\n        const responseText = response.text();\r\n\r\n        // 生成時間の記録\r\n        const generationTime = Date.now() - startTime;\r\n        logger.info(",
            "fullLength": 427,
            "truncatedContent": ", parts: [{ text: prompt }] }],\r\n        });\r\n\r\n        logger.info(`Received initial response from Gemini API`, {\r\n            timestamp: new Date().toISOString(),\r\n            processingTime: Date.now() - startTime\r\n        });\r\n\r\n        const response = await result.response;\r\n        const responseText = response.text();\r\n\r\n        // 生成時間の記録\r\n        const generationTime = Date.now() - startTime;\r\n        logger.info(",
            "hash": "ed9bbbf3c1c015303c5c92509110ece0",
            "keywords": [
              "生成"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", {\r\n            timestamp: new Date().toISOString(),\r\n            callStartTime: new Date().toISOString()\r\n        });\r\n\r\n        const result = await model.generateContent({\r\n            contents: [{ role: 'user', parts: [{ text: prompt }] }],\r\n        });\r\n\r\n        logger.info(",
            "fullLength": 282,
            "truncatedContent": ", {\r\n            timestamp: new Date().toISOString(),\r\n            callStartTime: new Date().toISOString()\r\n        });\r\n\r\n        const result = await model.generateContent({\r\n            contents: [{ role: 'user', parts: [{ text: prompt }] }],\r\n        });\r\n\r\n        logger.info(",
            "hash": "f0cd485865f5084265f6df960eef4a36",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ", {\r\n            timestamp: new Date().toISOString(),\r\n            callStartTime: new Date().toISOString()\r\n        });\r\n\r\n        const result = await model.generateContent({\r\n            contents: [{ role: 'user', parts: [{ text: prompt }] }],\r\n        });\r\n\r\n        logger.info(",
            "fullLength": 282,
            "truncatedContent": ", {\r\n            timestamp: new Date().toISOString(),\r\n            callStartTime: new Date().toISOString()\r\n        });\r\n\r\n        const result = await model.generateContent({\r\n            contents: [{ role: 'user', parts: [{ text: prompt }] }],\r\n        });\r\n\r\n        logger.info(",
            "hash": "f0cd485865f5084265f6df960eef4a36",
            "hasVariables": false,
            "variableCount": 0
          }
        ],
        "expectedOutputs": [
          {
            "type": "response_structure",
            "fields": [
              "response",
              "text"
            ],
            "confidence": "medium"
          }
        ],
        "parameters": {
          "contents": {
            "value": "[{ role: 'user'",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "rativeModel",
            "model",
            "modelName",
            "generationConfig",
            "genOptions",
            "logger",
            "info",
            "Model",
            "initialized",
            "preparing"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "a87dc336faf186383f9b2068855b7578"
      },
      {
        "id": "call_1d0290a3",
        "filePath": "src\\lib\\generation\\gemini-client.ts",
        "fileName": "gemini-client.ts",
        "lineNumber": 493,
        "lineContent": "const result = await model.generateContent('test');",
        "matchedPattern": "(\\w+\\.)?generateContent\\s*\\(",
        "callMethod": "generateContent",
        "fullMatch": "model.generateContent(",
        "context": {
          "before": [
            {
              "lineNumber": 488,
              "content": "async validateApiKey(): Promise<boolean> {",
              "indent": 4
            },
            {
              "lineNumber": 489,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 490,
              "content": "logger.debug('Validating Gemini API key');",
              "indent": 12
            },
            {
              "lineNumber": 491,
              "content": "// デフォルトモデルを使用",
              "indent": 12
            },
            {
              "lineNumber": 492,
              "content": "const model = this.client.getGenerativeModel({ model: this.defaultModel });",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 493,
            "content": "const result = await model.generateContent('test');",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 494,
              "content": "logger.info('API key validation successful');",
              "indent": 12
            },
            {
              "lineNumber": 495,
              "content": "return true;",
              "indent": 12
            },
            {
              "lineNumber": 496,
              "content": "} catch (error) {",
              "indent": 8
            },
            {
              "lineNumber": 497,
              "content": "logger.warn('API key validation failed', {",
              "indent": 12
            },
            {
              "lineNumber": 498,
              "content": "error: error instanceof Error ? error.message : String(error)",
              "indent": 16
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 468,
            "distance": 25
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ");\r\n            // デフォルトモデルを使用\r\n            const model = this.client.getGenerativeModel({ model: this.defaultModel });\r\n            const result = await model.generateContent(",
            "fullLength": 176,
            "truncatedContent": ");\r\n            // デフォルトモデルを使用\r\n            const model = this.client.getGenerativeModel({ model: this.defaultModel });\r\n            const result = await model.generateContent(",
            "hash": "2c80ccbe645231d815d8ce367ee8fd94",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<boolean>"
            ],
            "extractedTypes": [
              "boolean>"
            ]
          }
        ],
        "parameters": {
          "model": {
            "value": "this.defaultModel",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "false",
            "error",
            "handling",
            "monitoring",
            "DEBUG",
            "INFO",
            "WARN",
            "async",
            "validateApiKey",
            "Promise"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "36dd14a7311e0ecc8f271a6b5a4bb182"
      },
      {
        "id": "call_d45808e8",
        "filePath": "src\\lib\\generation\\gemini-client.ts",
        "fileName": "gemini-client.ts",
        "lineNumber": 726,
        "lineContent": "* async function generateStory() {",
        "matchedPattern": "(\\w+\\.)?generateStory\\s*\\(",
        "callMethod": "generateStory",
        "fullMatch": "generateStory(",
        "context": {
          "before": [
            {
              "lineNumber": 721,
              "content": "*",
              "indent": 1
            },
            {
              "lineNumber": 722,
              "content": "* @example",
              "indent": 1
            },
            {
              "lineNumber": 723,
              "content": "* // 基本的な使用例",
              "indent": 1
            },
            {
              "lineNumber": 724,
              "content": "* import { GeminiClient } from '@/lib/generation/gemini-client';",
              "indent": 1
            },
            {
              "lineNumber": 725,
              "content": "*",
              "indent": 1
            }
          ],
          "current": {
            "lineNumber": 726,
            "content": "* async function generateStory() {",
            "indent": 1
          },
          "after": [
            {
              "lineNumber": 727,
              "content": "*   const client = new GeminiClient();",
              "indent": 1
            },
            {
              "lineNumber": 728,
              "content": "*   const isValid = await client.validateApiKey();",
              "indent": 1
            },
            {
              "lineNumber": 729,
              "content": "*",
              "indent": 1
            },
            {
              "lineNumber": 730,
              "content": "*   if (!isValid) {",
              "indent": 1
            },
            {
              "lineNumber": 731,
              "content": "*     console.error(\"APIキーが無効です\");",
              "indent": 1
            }
          ],
          "functionContext": {
            "functionName": "generateStory",
            "startLine": 726,
            "distance": 0
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\r\n * \r\n * async function generateStory() {\r\n *   const client = new GeminiClient();\r\n *   const isValid = await client.validateApiKey();\r\n *   \r\n *   if (!isValid) {\r\n *     console.error(\"APIキーが無効です\");\r\n *     return;\r\n *   }\r\n *   \r\n *   // 用途別モデルの設定\r\n *   client.setModelMap({\r\n *     default: ",
            "fullLength": 298,
            "truncatedContent": ";\r\n * \r\n * async function generateStory() {\r\n *   const client = new GeminiClient();\r\n *   const isValid = await client.validateApiKey();\r\n *   \r\n *   if (!isValid) {\r\n *     console.error(\"APIキーが無効です\");\r\n *     return;\r\n *   }\r\n *   \r\n *   // 用途別モデルの設定\r\n *   client.setModelMap({\r\n *     default: ",
            "hash": "0d8f8db19630926c92814c641827a449",
            "keywords": [
              "設定",
              "generate",
              "Story"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n * });\r\n * \r\n * // 用途を指定してテキスト生成\r\n * const generatedText = await client.generateText(\"プロンプト\", {\r\n *   temperature: 0.7,\r\n *   targetLength: 5000,\r\n *   purpose: \"content\" // 用途を指定\r\n * });\r\n * \r\n * @example\r\n * // 基本的な使用例\r\n * import { GeminiClient } from ",
            "fullLength": 256,
            "truncatedContent": "\r\n * });\r\n * \r\n * // 用途を指定してテキスト生成\r\n * const generatedText = await client.generateText(\"プロンプト\", {\r\n *   temperature: 0.7,\r\n *   targetLength: 5000,\r\n *   purpose: \"content\" // 用途を指定\r\n * });\r\n * \r\n * @example\r\n * // 基本的な使用例\r\n * import { GeminiClient } from ",
            "hash": "d9ad9e8d96aa13df85cea2bfecf42608",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "medium",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": " // 用途を指定\r\n * });\r\n * \r\n * @example\r\n * // 基本的な使用例\r\n * import { GeminiClient } from '@/lib/generation/gemini-client';\r\n * \r\n * async function generateStory() {\r\n *   const client = new GeminiClient();\r\n *   const isValid = await client.validateApiKey();\r\n *   \r\n *   if (!isValid) {\r\n *     console.error(",
            "fullLength": 305,
            "truncatedContent": " // 用途を指定\r\n * });\r\n * \r\n * @example\r\n * // 基本的な使用例\r\n * import { GeminiClient } from '@/lib/generation/gemini-client';\r\n * \r\n * async function generateStory() {\r\n *   const client = new GeminiClient();\r\n *   const isValid = await client.validateApiKey();\r\n *   \r\n *   if (!isValid) {\r\n *     console.error(",
            "hash": "46937153a92ae7eac53283b670579b91",
            "keywords": [
              "generate",
              "Story"
            ],
            "sentiment": "neutral",
            "complexity": "medium",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n * });\r\n * \r\n * // 用途を指定してテキスト生成\r\n * const generatedText = await client.generateText(\"プロンプト\", {\r\n *   temperature: 0.7,\r\n *   targetLength: 5000,\r\n *   purpose: \"content\" // 用途を指定\r\n * });\r\n * \r\n * @example\r\n * // 基本的な使用例\r\n * import { GeminiClient } from ",
            "fullLength": 256,
            "truncatedContent": "\r\n * });\r\n * \r\n * // 用途を指定してテキスト生成\r\n * const generatedText = await client.generateText(\"プロンプト\", {\r\n *   temperature: 0.7,\r\n *   targetLength: 5000,\r\n *   purpose: \"content\" // 用途を指定\r\n * });\r\n * \r\n * @example\r\n * // 基本的な使用例\r\n * import { GeminiClient } from ",
            "hash": "d9ad9e8d96aa13df85cea2bfecf42608",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "medium",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\r\n * \r\n * async function generateStory() {\r\n *   const client = new GeminiClient();\r\n *   const isValid = await client.validateApiKey();\r\n *   \r\n *   if (!isValid) {\r\n *     console.error(\"APIキーが無効です\");\r\n *     return;\r\n *   }\r\n *   \r\n *   // 用途別モデルの設定\r\n *   client.setModelMap({\r\n *     default: ",
            "fullLength": 298,
            "truncatedContent": ";\r\n * \r\n * async function generateStory() {\r\n *   const client = new GeminiClient();\r\n *   const isValid = await client.validateApiKey();\r\n *   \r\n *   if (!isValid) {\r\n *     console.error(\"APIキーが無効です\");\r\n *     return;\r\n *   }\r\n *   \r\n *   // 用途別モデルの設定\r\n *   client.setModelMap({\r\n *     default: ",
            "hash": "0d8f8db19630926c92814c641827a449",
            "keywords": [
              "設定",
              "generate",
              "Story"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.7",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "client",
            "new",
            "GeminiClient",
            "setModelMap",
            "default",
            "gemini",
            "flash",
            "lite",
            "summary",
            "pro"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "0e3b3312ee02c02081b64ff113ac949e"
      },
      {
        "id": "call_85f76054",
        "filePath": "src\\lib\\generation\\gemini-client.ts",
        "fileName": "gemini-client.ts",
        "lineNumber": 140,
        "lineContent": "* geminiClient.setModelMap({",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "setModelMap",
        "fullMatch": "geminiClient.setModelMap(",
        "context": {
          "before": [
            {
              "lineNumber": 135,
              "content": "*",
              "indent": 5
            },
            {
              "lineNumber": 136,
              "content": "* @param {Record<string, string>} modelMap 用途とモデル名のマッピング",
              "indent": 5
            },
            {
              "lineNumber": 137,
              "content": "*",
              "indent": 5
            },
            {
              "lineNumber": 138,
              "content": "* @usage",
              "indent": 5
            },
            {
              "lineNumber": 139,
              "content": "* // 用途別モデルの設定",
              "indent": 5
            }
          ],
          "current": {
            "lineNumber": 140,
            "content": "* geminiClient.setModelMap({",
            "indent": 5
          },
          "after": [
            {
              "lineNumber": 141,
              "content": "*   default: 'gemini-2.0-flash-lite',",
              "indent": 5
            },
            {
              "lineNumber": 142,
              "content": "*   summary: 'gemini-2.0-pro',",
              "indent": 5
            },
            {
              "lineNumber": 143,
              "content": "*   content: 'gemini-2.0-flash',",
              "indent": 5
            },
            {
              "lineNumber": 144,
              "content": "*   analysis: 'gemini-2.0-pro'",
              "indent": 5
            },
            {
              "lineNumber": 145,
              "content": "* });",
              "indent": 5
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 115,
            "distance": 25
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ", {\r\n            defaultModel: this.defaultModel,\r\n            maxRetries: this.maxRetries\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 用途別モデルマップを設定します\r\n     * \r\n     * 用途（purpose）に応じた適切なモデルを選択するためのマッピングを設定します。\r\n     * \r\n     * @param {Record<string, string>} modelMap 用途とモデル名のマッピング\r\n     * \r\n     * @usage\r\n     * // 用途別モデルの設定\r\n     * geminiClient.setModelMap({\r\n     *   default: ",
            "fullLength": 376,
            "truncatedContent": ", {\r\n            defaultModel: this.defaultModel,\r\n            maxRetries: this.maxRetries\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 用途別モデルマップを設定します\r\n     * \r\n     * 用途（purpose）に応じた適切なモデルを選択するためのマッピングを設定します。\r\n     * \r\n     * @param {Record<string, string>} modelMap 用途とモデル名のマッピング\r\n     * \r\n     * @usage\r\n     * // 用途別モデルの設定\r\n     * geminiClient.setModelMap({\r\n     *   default: ",
            "hash": "4196a72dcc7015ef6cd9174254f924b5",
            "keywords": [
              "設定"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "content": {
            "value": "'gemini-2.0-flash'",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [],
          "complexity": "low",
          "dependencies": [
            "generativelanguage",
            "googleapis",
            "com",
            "this",
            "maxRetries",
            "parseInt",
            "process",
            "env",
            "GEMINI_MAX_RETRIES",
            "logger"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "bf0e9885676dd4cfa7454f2ff0e14c48"
      },
      {
        "id": "call_f992fda8",
        "filePath": "src\\lib\\generation\\gemini-client.ts",
        "fileName": "gemini-client.ts",
        "lineNumber": 195,
        "lineContent": "* const text = await geminiClient.generateText(\"こんにちは、世界について教えてください\");",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 190,
              "content": "* @throws {GenerationError} 空のプロンプトが提供された場合、またはAPIが空の応答を返した場合",
              "indent": 5
            },
            {
              "lineNumber": 191,
              "content": "* @throws {ExternalServiceError} すべての再試行が失敗した場合",
              "indent": 5
            },
            {
              "lineNumber": 192,
              "content": "*",
              "indent": 5
            },
            {
              "lineNumber": 193,
              "content": "* @usage",
              "indent": 5
            },
            {
              "lineNumber": 194,
              "content": "* // 基本的な使用方法",
              "indent": 5
            }
          ],
          "current": {
            "lineNumber": 195,
            "content": "* const text = await geminiClient.generateText(\"こんにちは、世界について教えてください\");",
            "indent": 5
          },
          "after": [
            {
              "lineNumber": 196,
              "content": "*",
              "indent": 5
            },
            {
              "lineNumber": 197,
              "content": "* // オプション付きの使用方法",
              "indent": 5
            },
            {
              "lineNumber": 198,
              "content": "* const text = await geminiClient.generateText(\"詳細な分析をしてください\", {",
              "indent": 5
            },
            {
              "lineNumber": 199,
              "content": "*   temperature: 0.5,",
              "indent": 5
            },
            {
              "lineNumber": 200,
              "content": "*   targetLength: 5000,",
              "indent": 5
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 115,
            "distance": 80
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ");\r\n     * \r\n     * // オプション付きの使用方法\r\n     * const text = await geminiClient.generateText(",
            "fullLength": 89,
            "truncatedContent": ");\r\n     * \r\n     * // オプション付きの使用方法\r\n     * const text = await geminiClient.generateText(",
            "hash": "417dd5e58d9696d9511a72c5f49cbb36",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.5",
            "rawValue": "temperature: 0.5",
            "confidence": "high"
          },
          "frequencyPenalty": {
            "value": "0.5",
            "rawValue": "frequencyPenalty: 0.5",
            "confidence": "high"
          },
          "presencePenalty": {
            "value": "0.2",
            "rawValue": "presencePenalty: 0.2",
            "confidence": "high"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "Gemini",
            "API",
            "async",
            "param",
            "string",
            "prompt",
            "GenerationOptions",
            "purpose",
            "options",
            "returns"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "e903081b2c235442c25df28c40679d8b"
      },
      {
        "id": "call_443277df",
        "filePath": "src\\lib\\generation\\gemini-client.ts",
        "fileName": "gemini-client.ts",
        "lineNumber": 198,
        "lineContent": "* const text = await geminiClient.generateText(\"詳細な分析をしてください\", {",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 193,
              "content": "* @usage",
              "indent": 5
            },
            {
              "lineNumber": 194,
              "content": "* // 基本的な使用方法",
              "indent": 5
            },
            {
              "lineNumber": 195,
              "content": "* const text = await geminiClient.generateText(\"こんにちは、世界について教えてください\");",
              "indent": 5
            },
            {
              "lineNumber": 196,
              "content": "*",
              "indent": 5
            },
            {
              "lineNumber": 197,
              "content": "* // オプション付きの使用方法",
              "indent": 5
            }
          ],
          "current": {
            "lineNumber": 198,
            "content": "* const text = await geminiClient.generateText(\"詳細な分析をしてください\", {",
            "indent": 5
          },
          "after": [
            {
              "lineNumber": 199,
              "content": "*   temperature: 0.5,",
              "indent": 5
            },
            {
              "lineNumber": 200,
              "content": "*   targetLength: 5000,",
              "indent": 5
            },
            {
              "lineNumber": 201,
              "content": "*   frequencyPenalty: 0.5,",
              "indent": 5
            },
            {
              "lineNumber": 202,
              "content": "*   presencePenalty: 0.2,",
              "indent": 5
            },
            {
              "lineNumber": 203,
              "content": "*   purpose: \"analysis\",",
              "indent": 5
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 115,
            "distance": 83
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ");\r\n     * \r\n     * // オプション付きの使用方法\r\n     * const text = await geminiClient.generateText(",
            "fullLength": 89,
            "truncatedContent": ");\r\n     * \r\n     * // オプション付きの使用方法\r\n     * const text = await geminiClient.generateText(",
            "hash": "417dd5e58d9696d9511a72c5f49cbb36",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.5",
            "source": "object_literal",
            "confidence": "medium"
          },
          "topP": {
            "value": "0.9\r\n     *",
            "source": "object_literal",
            "confidence": "medium"
          },
          "frequencyPenalty": {
            "value": "0.5",
            "rawValue": "frequencyPenalty: 0.5",
            "confidence": "high"
          },
          "presencePenalty": {
            "value": "0.2",
            "rawValue": "presencePenalty: 0.2",
            "confidence": "high"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "async",
            "param",
            "string",
            "prompt",
            "GenerationOptions",
            "purpose",
            "options",
            "returns",
            "Promise",
            "throws"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "f4a8a56c6676daaecaa114e505a606c0"
      },
      {
        "id": "call_52ad3c81",
        "filePath": "src\\lib\\generation\\gemini-client.ts",
        "fileName": "gemini-client.ts",
        "lineNumber": 467,
        "lineContent": "* const isValid = await geminiClient.validateApiKey();",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "validateApiKey",
        "fullMatch": "geminiClient.validateApiKey(",
        "context": {
          "before": [
            {
              "lineNumber": 462,
              "content": "* @async",
              "indent": 5
            },
            {
              "lineNumber": 463,
              "content": "* @returns {Promise<boolean>} APIキーが有効な場合はtrue、無効な場合はfalse",
              "indent": 5
            },
            {
              "lineNumber": 464,
              "content": "*",
              "indent": 5
            },
            {
              "lineNumber": 465,
              "content": "* @usage",
              "indent": 5
            },
            {
              "lineNumber": 466,
              "content": "* // APIキーの検証",
              "indent": 5
            }
          ],
          "current": {
            "lineNumber": 467,
            "content": "* const isValid = await geminiClient.validateApiKey();",
            "indent": 5
          },
          "after": [
            {
              "lineNumber": 468,
              "content": "* if (isValid) {",
              "indent": 5
            },
            {
              "lineNumber": 469,
              "content": "*   console.log(\"APIキーは有効です\");",
              "indent": 5
            },
            {
              "lineNumber": 470,
              "content": "* } else {",
              "indent": 5
            },
            {
              "lineNumber": 471,
              "content": "*   console.log(\"APIキーは無効です\");",
              "indent": 5
            },
            {
              "lineNumber": 472,
              "content": "* }",
              "indent": 5
            }
          ],
          "functionContext": {
            "functionName": "switch",
            "startLine": 444,
            "distance": 23
          }
        },
        "prompts": [],
        "expectedOutputs": [],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "分析"
          ],
          "complexity": "low",
          "dependencies": [
            "case",
            "analysis",
            "recommendation",
            "return",
            "RequestPriority",
            "MEDIUM",
            "summary",
            "default",
            "LOW",
            "API"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": true,
            "isReturned": false
          }
        },
        "duplicateHash": "08682d6eb6abd26f11d7cf21ccc83845"
      },
      {
        "id": "call_a6f11a8e",
        "filePath": "src\\lib\\generation\\gemini-client.ts",
        "fileName": "gemini-client.ts",
        "lineNumber": 517,
        "lineContent": "* const info = geminiClient.getModelInfo();",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "getModelInfo",
        "fullMatch": "geminiClient.getModelInfo(",
        "context": {
          "before": [
            {
              "lineNumber": 512,
              "content": "* @returns {string} apiUrl - API URL",
              "indent": 5
            },
            {
              "lineNumber": 513,
              "content": "* @returns {number} maxRetries - 最大再試行回数",
              "indent": 5
            },
            {
              "lineNumber": 514,
              "content": "*",
              "indent": 5
            },
            {
              "lineNumber": 515,
              "content": "* @usage",
              "indent": 5
            },
            {
              "lineNumber": 516,
              "content": "* // モデル情報の取得",
              "indent": 5
            }
          ],
          "current": {
            "lineNumber": 517,
            "content": "* const info = geminiClient.getModelInfo();",
            "indent": 5
          },
          "after": [
            {
              "lineNumber": 518,
              "content": "* console.log(`デフォルトモデル: ${info.defaultModel}`);",
              "indent": 5
            },
            {
              "lineNumber": 519,
              "content": "* console.log(`最大再試行回数: ${info.maxRetries}`);",
              "indent": 5
            },
            {
              "lineNumber": 520,
              "content": "*",
              "indent": 5
            },
            {
              "lineNumber": 521,
              "content": "* @call-flow",
              "indent": 5
            },
            {
              "lineNumber": 522,
              "content": "* インスタンス変数を単純にオブジェクトとして返します。",
              "indent": 5
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 496,
            "distance": 21
          }
        },
        "prompts": [],
        "expectedOutputs": [],
        "parameters": {
          "defaultModel": {
            "value": "this.defaultModel",
            "source": "object_literal",
            "confidence": "medium"
          },
          "modelMap": {
            "value": "{ ...this.modelMap",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [],
          "complexity": "low",
          "dependencies": [
            "error",
            "instanceof",
            "Error",
            "message",
            "String",
            "return",
            "false",
            "API",
            "URL",
            "returns"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": true,
            "isReturned": true
          }
        },
        "duplicateHash": "35da4fdc4642515a2355d0c2f801f937"
      },
      {
        "id": "call_2464bf38",
        "filePath": "src\\lib\\generation\\gemini-client.ts",
        "fileName": "gemini-client.ts",
        "lineNumber": 319,
        "lineContent": "() => this.executeGeminiRequest(selectedModel, prompt, genOptions),",
        "matchedPattern": "executeGeminiRequest\\s*\\(",
        "callMethod": "executeGeminiRequest",
        "fullMatch": "executeGeminiRequest(",
        "context": {
          "before": [
            {
              "lineNumber": 314,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 315,
              "content": "// リクエストをキューに入れる（高優先度の場合はキューをスキップ）",
              "indent": 16
            },
            {
              "lineNumber": 316,
              "content": "if (priority === RequestPriority.HIGH) {",
              "indent": 16
            },
            {
              "lineNumber": 317,
              "content": "// 本文生成など重要なリクエストは直接実行",
              "indent": 20
            },
            {
              "lineNumber": 318,
              "content": "return await apiThrottler.throttledRequest(",
              "indent": 20
            }
          ],
          "current": {
            "lineNumber": 319,
            "content": "() => this.executeGeminiRequest(selectedModel, prompt, genOptions),",
            "indent": 24
          },
          "after": [
            {
              "lineNumber": 320,
              "content": "priority",
              "indent": 24
            },
            {
              "lineNumber": 321,
              "content": ");",
              "indent": 20
            },
            {
              "lineNumber": 322,
              "content": "} else {",
              "indent": 16
            },
            {
              "lineNumber": 323,
              "content": "// それ以外はキューを使用",
              "indent": 20
            },
            {
              "lineNumber": 324,
              "content": "return await requestQueue.enqueue(",
              "indent": 20
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 316,
            "distance": 3
          }
        },
        "prompts": [],
        "expectedOutputs": [],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成"
          ],
          "complexity": "low",
          "dependencies": [
            "ength",
            "prompt",
            "length",
            "options",
            "genOptions",
            "purpose",
            "while",
            "attemptCount",
            "maxAttempts",
            "try"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "d193fc0a16f1f156f0b2590208f48422"
      },
      {
        "id": "call_340b44dd",
        "filePath": "src\\lib\\generation\\gemini-client.ts",
        "fileName": "gemini-client.ts",
        "lineNumber": 326,
        "lineContent": "() => this.executeGeminiRequest(selectedModel, prompt, genOptions),",
        "matchedPattern": "executeGeminiRequest\\s*\\(",
        "callMethod": "executeGeminiRequest",
        "fullMatch": "executeGeminiRequest(",
        "context": {
          "before": [
            {
              "lineNumber": 321,
              "content": ");",
              "indent": 20
            },
            {
              "lineNumber": 322,
              "content": "} else {",
              "indent": 16
            },
            {
              "lineNumber": 323,
              "content": "// それ以外はキューを使用",
              "indent": 20
            },
            {
              "lineNumber": 324,
              "content": "return await requestQueue.enqueue(",
              "indent": 20
            },
            {
              "lineNumber": 325,
              "content": "() => apiThrottler.throttledRequest(",
              "indent": 24
            }
          ],
          "current": {
            "lineNumber": 326,
            "content": "() => this.executeGeminiRequest(selectedModel, prompt, genOptions),",
            "indent": 28
          },
          "after": [
            {
              "lineNumber": 327,
              "content": "priority",
              "indent": 28
            },
            {
              "lineNumber": 328,
              "content": "),",
              "indent": 24
            },
            {
              "lineNumber": 329,
              "content": "priority",
              "indent": 24
            },
            {
              "lineNumber": 330,
              "content": ");",
              "indent": 20
            },
            {
              "lineNumber": 331,
              "content": "}",
              "indent": 16
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 316,
            "distance": 10
          }
        },
        "prompts": [],
        "expectedOutputs": [],
        "parameters": {
          "message": {
            "value": "String(error);\r\n\r\n                logger.error(`Gemini API error (attempt ${attemptCount",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成"
          ],
          "complexity": "low",
          "dependencies": [
            "estPriority",
            "HIGH",
            "return",
            "await",
            "apiThrottler",
            "throttledRequest",
            "this",
            "executeGeminiRequest",
            "selectedModel",
            "prompt"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "ad25dc3545359ca2b3118391b06266fe"
      },
      {
        "id": "call_59370f58",
        "filePath": "src\\lib\\generation\\gemini-client.ts",
        "fileName": "gemini-client.ts",
        "lineNumber": 376,
        "lineContent": "private async executeGeminiRequest(modelName: string, prompt: string, genOptions: any): Promise<string> {",
        "matchedPattern": "executeGeminiRequest\\s*\\(",
        "callMethod": "executeGeminiRequest",
        "fullMatch": "executeGeminiRequest(",
        "context": {
          "before": [
            {
              "lineNumber": 371,
              "content": "/**",
              "indent": 4
            },
            {
              "lineNumber": 372,
              "content": "* Gemini APIへの実際のリクエスト実行を行う内部メソッド",
              "indent": 5
            },
            {
              "lineNumber": 373,
              "content": "* generateTextから分離して再利用性を高める",
              "indent": 5
            },
            {
              "lineNumber": 374,
              "content": "* @private",
              "indent": 5
            },
            {
              "lineNumber": 375,
              "content": "*/",
              "indent": 5
            }
          ],
          "current": {
            "lineNumber": 376,
            "content": "private async executeGeminiRequest(modelName: string, prompt: string, genOptions: any): Promise<string> {",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 377,
              "content": "const startTime = Date.now();",
              "indent": 8
            },
            {
              "lineNumber": 378,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 379,
              "content": "logger.info(`Starting Gemini API request`, {",
              "indent": 8
            },
            {
              "lineNumber": 380,
              "content": "timestamp: new Date().toISOString(),",
              "indent": 12
            },
            {
              "lineNumber": 381,
              "content": "promptLength: prompt.length,",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 349,
            "distance": 27
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "Failed to generate content after ${attemptCount} attempts: ${errorMessage}",
            "fullLength": 74,
            "truncatedContent": "Failed to generate content after ${attemptCount} attempts: ${errorMessage}",
            "hash": "442cb92b96a13bc2ce15236116f2c61f",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ",\r\n            { lastError: lastError }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gemini APIへの実際のリクエスト実行を行う内部メソッド\r\n     * generateTextから分離して再利用性を高める\r\n     * @private\r\n     */\r\n    private async executeGeminiRequest(modelName: string, prompt: string, genOptions: any): Promise<string> {\r\n        const startTime = Date.now();\r\n\r\n        logger.info(",
            "fullLength": 344,
            "truncatedContent": ",\r\n            { lastError: lastError }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gemini APIへの実際のリクエスト実行を行う内部メソッド\r\n     * generateTextから分離して再利用性を高める\r\n     * @private\r\n     */\r\n    private async executeGeminiRequest(modelName: string, prompt: string, genOptions: any): Promise<string> {\r\n        const startTime = Date.now();\r\n\r\n        logger.info(",
            "hash": "dc449931845ea9999a8083478fc64d19",
            "hasVariables": false,
            "variableCount": 0
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<string>"
            ],
            "extractedTypes": [
              "string>"
            ]
          },
          {
            "type": "json_expected",
            "indicator": "JSON\\.stringify",
            "confidence": "high"
          }
        ],
        "parameters": {
          "promptLength": {
            "value": "prompt.length",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "logger",
            "error",
            "All",
            "text",
            "generation",
            "attempts",
            "failed",
            "attemptCount",
            "lastError",
            "errorMessage"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "e13fb6416191a326de3480a31770ef66"
      },
      {
        "id": "call_391bd0db",
        "filePath": "src\\lib\\generation\\gemini-client.ts",
        "fileName": "gemini-client.ts",
        "lineNumber": 195,
        "lineContent": "* const text = await geminiClient.generateText(\"こんにちは、世界について教えてください\");",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 190,
              "content": "* @throws {GenerationError} 空のプロンプトが提供された場合、またはAPIが空の応答を返した場合",
              "indent": 5
            },
            {
              "lineNumber": 191,
              "content": "* @throws {ExternalServiceError} すべての再試行が失敗した場合",
              "indent": 5
            },
            {
              "lineNumber": 192,
              "content": "*",
              "indent": 5
            },
            {
              "lineNumber": 193,
              "content": "* @usage",
              "indent": 5
            },
            {
              "lineNumber": 194,
              "content": "* // 基本的な使用方法",
              "indent": 5
            }
          ],
          "current": {
            "lineNumber": 195,
            "content": "* const text = await geminiClient.generateText(\"こんにちは、世界について教えてください\");",
            "indent": 5
          },
          "after": [
            {
              "lineNumber": 196,
              "content": "*",
              "indent": 5
            },
            {
              "lineNumber": 197,
              "content": "* // オプション付きの使用方法",
              "indent": 5
            },
            {
              "lineNumber": 198,
              "content": "* const text = await geminiClient.generateText(\"詳細な分析をしてください\", {",
              "indent": 5
            },
            {
              "lineNumber": 199,
              "content": "*   temperature: 0.5,",
              "indent": 5
            },
            {
              "lineNumber": 200,
              "content": "*   targetLength: 5000,",
              "indent": 5
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 115,
            "distance": 80
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ");\r\n     * \r\n     * // オプション付きの使用方法\r\n     * const text = await geminiClient.generateText(",
            "fullLength": 89,
            "truncatedContent": ");\r\n     * \r\n     * // オプション付きの使用方法\r\n     * const text = await geminiClient.generateText(",
            "hash": "417dd5e58d9696d9511a72c5f49cbb36",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.5",
            "rawValue": "temperature: 0.5",
            "confidence": "high"
          },
          "frequencyPenalty": {
            "value": "0.5",
            "rawValue": "frequencyPenalty: 0.5",
            "confidence": "high"
          },
          "presencePenalty": {
            "value": "0.2",
            "rawValue": "presencePenalty: 0.2",
            "confidence": "high"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "Gemini",
            "API",
            "async",
            "param",
            "string",
            "prompt",
            "GenerationOptions",
            "purpose",
            "options",
            "returns"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "ee6a0af2f5c04a85bda3a31b1e334706"
      },
      {
        "id": "call_1896b4ce",
        "filePath": "src\\lib\\generation\\gemini-client.ts",
        "fileName": "gemini-client.ts",
        "lineNumber": 198,
        "lineContent": "* const text = await geminiClient.generateText(\"詳細な分析をしてください\", {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 193,
              "content": "* @usage",
              "indent": 5
            },
            {
              "lineNumber": 194,
              "content": "* // 基本的な使用方法",
              "indent": 5
            },
            {
              "lineNumber": 195,
              "content": "* const text = await geminiClient.generateText(\"こんにちは、世界について教えてください\");",
              "indent": 5
            },
            {
              "lineNumber": 196,
              "content": "*",
              "indent": 5
            },
            {
              "lineNumber": 197,
              "content": "* // オプション付きの使用方法",
              "indent": 5
            }
          ],
          "current": {
            "lineNumber": 198,
            "content": "* const text = await geminiClient.generateText(\"詳細な分析をしてください\", {",
            "indent": 5
          },
          "after": [
            {
              "lineNumber": 199,
              "content": "*   temperature: 0.5,",
              "indent": 5
            },
            {
              "lineNumber": 200,
              "content": "*   targetLength: 5000,",
              "indent": 5
            },
            {
              "lineNumber": 201,
              "content": "*   frequencyPenalty: 0.5,",
              "indent": 5
            },
            {
              "lineNumber": 202,
              "content": "*   presencePenalty: 0.2,",
              "indent": 5
            },
            {
              "lineNumber": 203,
              "content": "*   purpose: \"analysis\",",
              "indent": 5
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 115,
            "distance": 83
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ");\r\n     * \r\n     * // オプション付きの使用方法\r\n     * const text = await geminiClient.generateText(",
            "fullLength": 89,
            "truncatedContent": ");\r\n     * \r\n     * // オプション付きの使用方法\r\n     * const text = await geminiClient.generateText(",
            "hash": "417dd5e58d9696d9511a72c5f49cbb36",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.5",
            "source": "object_literal",
            "confidence": "medium"
          },
          "topP": {
            "value": "0.9\r\n     *",
            "source": "object_literal",
            "confidence": "medium"
          },
          "frequencyPenalty": {
            "value": "0.5",
            "rawValue": "frequencyPenalty: 0.5",
            "confidence": "high"
          },
          "presencePenalty": {
            "value": "0.2",
            "rawValue": "presencePenalty: 0.2",
            "confidence": "high"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "async",
            "param",
            "string",
            "prompt",
            "GenerationOptions",
            "purpose",
            "options",
            "returns",
            "Promise",
            "throws"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "1c42585b35542ca06ebc4bbcb498a368"
      },
      {
        "id": "call_bd38df0d",
        "filePath": "src\\lib\\generation\\gemini-client.ts",
        "fileName": "gemini-client.ts",
        "lineNumber": 716,
        "lineContent": "* const generatedText = await client.generateText(\"プロンプト\", {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 711,
              "content": "*   summary: 'gemini-2.0-pro',",
              "indent": 1
            },
            {
              "lineNumber": 712,
              "content": "*   content: 'gemini-2.0-flash'",
              "indent": 1
            },
            {
              "lineNumber": 713,
              "content": "* });",
              "indent": 1
            },
            {
              "lineNumber": 714,
              "content": "*",
              "indent": 1
            },
            {
              "lineNumber": 715,
              "content": "* // 用途を指定してテキスト生成",
              "indent": 1
            }
          ],
          "current": {
            "lineNumber": 716,
            "content": "* const generatedText = await client.generateText(\"プロンプト\", {",
            "indent": 1
          },
          "after": [
            {
              "lineNumber": 717,
              "content": "*   temperature: 0.7,",
              "indent": 1
            },
            {
              "lineNumber": 718,
              "content": "*   targetLength: 5000,",
              "indent": 1
            },
            {
              "lineNumber": 719,
              "content": "*   purpose: \"content\" // 用途を指定",
              "indent": 1
            },
            {
              "lineNumber": 720,
              "content": "* });",
              "indent": 1
            },
            {
              "lineNumber": 721,
              "content": "*",
              "indent": 1
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 496,
            "distance": 220
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\r\n * \r\n * const client = new GeminiClient();\r\n * \r\n * // 用途別モデルマップの設定\r\n * client.setModelMap({\r\n *   default: ",
            "fullLength": 111,
            "truncatedContent": ";\r\n * \r\n * const client = new GeminiClient();\r\n * \r\n * // 用途別モデルマップの設定\r\n * client.setModelMap({\r\n *   default: ",
            "hash": "2407410c182cce36c54fe1e61b6e5316",
            "keywords": [
              "設定"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n * });\r\n * \r\n * // 用途を指定してテキスト生成\r\n * const generatedText = await client.generateText(\"プロンプト\", {\r\n *   temperature: 0.7,\r\n *   targetLength: 5000,\r\n *   purpose: \"content\" // 用途を指定\r\n * });\r\n * \r\n * @example\r\n * // 基本的な使用例\r\n * import { GeminiClient } from ",
            "fullLength": 256,
            "truncatedContent": "\r\n * });\r\n * \r\n * // 用途を指定してテキスト生成\r\n * const generatedText = await client.generateText(\"プロンプト\", {\r\n *   temperature: 0.7,\r\n *   targetLength: 5000,\r\n *   purpose: \"content\" // 用途を指定\r\n * });\r\n * \r\n * @example\r\n * // 基本的な使用例\r\n * import { GeminiClient } from ",
            "hash": "d9ad9e8d96aa13df85cea2bfecf42608",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "medium",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": " // 用途を指定\r\n * });\r\n * \r\n * @example\r\n * // 基本的な使用例\r\n * import { GeminiClient } from '@/lib/generation/gemini-client';\r\n * \r\n * async function generateStory() {\r\n *   const client = new GeminiClient();\r\n *   const isValid = await client.validateApiKey();\r\n *   \r\n *   if (!isValid) {\r\n *     console.error(",
            "fullLength": 305,
            "truncatedContent": " // 用途を指定\r\n * });\r\n * \r\n * @example\r\n * // 基本的な使用例\r\n * import { GeminiClient } from '@/lib/generation/gemini-client';\r\n * \r\n * async function generateStory() {\r\n *   const client = new GeminiClient();\r\n *   const isValid = await client.validateApiKey();\r\n *   \r\n *   if (!isValid) {\r\n *     console.error(",
            "hash": "46937153a92ae7eac53283b670579b91",
            "keywords": [
              "generate",
              "Story"
            ],
            "sentiment": "neutral",
            "complexity": "medium",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n * });\r\n * \r\n * // 用途を指定してテキスト生成\r\n * const generatedText = await client.generateText(\"プロンプト\", {\r\n *   temperature: 0.7,\r\n *   targetLength: 5000,\r\n *   purpose: \"content\" // 用途を指定\r\n * });\r\n * \r\n * @example\r\n * // 基本的な使用例\r\n * import { GeminiClient } from ",
            "fullLength": 256,
            "truncatedContent": "\r\n * });\r\n * \r\n * // 用途を指定してテキスト生成\r\n * const generatedText = await client.generateText(\"プロンプト\", {\r\n *   temperature: 0.7,\r\n *   targetLength: 5000,\r\n *   purpose: \"content\" // 用途を指定\r\n * });\r\n * \r\n * @example\r\n * // 基本的な使用例\r\n * import { GeminiClient } from ",
            "hash": "d9ad9e8d96aa13df85cea2bfecf42608",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "medium",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.7",
            "source": "object_literal",
            "confidence": "medium"
          },
          "content": {
            "value": "'gemini-2.0-flash'\r\n *",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "type",
            "Class",
            "initialization",
            "API",
            "usage",
            "import",
            "GeminiClient",
            "from",
            "lib",
            "generation"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "0ac82c9d19d866492a1fb21d759ae5c8"
      },
      {
        "id": "call_415d8574",
        "filePath": "src\\lib\\generation\\gemini-client.ts",
        "fileName": "gemini-client.ts",
        "lineNumber": 746,
        "lineContent": "*     const story = await client.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 741,
              "content": "*   });",
              "indent": 1
            },
            {
              "lineNumber": 742,
              "content": "*",
              "indent": 1
            },
            {
              "lineNumber": 743,
              "content": "*   const prompt = \"短い物語を書いてください。テーマは「友情」です。\";",
              "indent": 1
            },
            {
              "lineNumber": 744,
              "content": "*   try {",
              "indent": 1
            },
            {
              "lineNumber": 745,
              "content": "*     // コンテンツ生成用途を指定",
              "indent": 1
            }
          ],
          "current": {
            "lineNumber": 746,
            "content": "*     const story = await client.generateText(prompt, {",
            "indent": 1
          },
          "after": [
            {
              "lineNumber": 747,
              "content": "*       temperature: 0.8,",
              "indent": 1
            },
            {
              "lineNumber": 748,
              "content": "*       targetLength: 3000,",
              "indent": 1
            },
            {
              "lineNumber": 749,
              "content": "*       purpose: \"content\",",
              "indent": 1
            },
            {
              "lineNumber": 750,
              "content": "*       frequencyPenalty: 0.6,",
              "indent": 1
            },
            {
              "lineNumber": 751,
              "content": "*       presencePenalty: 0.3",
              "indent": 1
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 730,
            "distance": 16
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "短い物語を書いてください。テーマは「友情」です。",
            "fullLength": 24,
            "truncatedContent": "短い物語を書いてください。テーマは「友情」です。",
            "hash": "7bd27ef9fb21e483c18cc21a8f9b5dfc",
            "keywords": [
              "物語"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ");\r\n *     return;\r\n *   }\r\n *   \r\n *   // 用途別モデルの設定\r\n *   client.setModelMap({\r\n *     default: 'gemini-2.0-flash-lite',\r\n *     summary: 'gemini-2.0-pro',\r\n *     content: 'gemini-2.0-flash',\r\n *     analysis: 'gemini-2.0-pro'\r\n *   });\r\n *   \r\n *   const prompt = ",
            "fullLength": 267,
            "truncatedContent": ");\r\n *     return;\r\n *   }\r\n *   \r\n *   // 用途別モデルの設定\r\n *   client.setModelMap({\r\n *     default: 'gemini-2.0-flash-lite',\r\n *     summary: 'gemini-2.0-pro',\r\n *     content: 'gemini-2.0-flash',\r\n *     analysis: 'gemini-2.0-pro'\r\n *   });\r\n *   \r\n *   const prompt = ",
            "hash": "9ccc9b36e878603f041ff3d70140458a",
            "keywords": [
              "設定"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "短い物語を書いてください。テーマは「友情」です。",
            "fullLength": 24,
            "truncatedContent": "短い物語を書いてください。テーマは「友情」です。",
            "hash": "7bd27ef9fb21e483c18cc21a8f9b5dfc",
            "keywords": [
              "物語"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\r\n *   try {\r\n *     // コンテンツ生成用途を指定\r\n *     const story = await client.generateText(prompt, {\r\n *       temperature: 0.8,\r\n *       targetLength: 3000,\r\n *       purpose: ",
            "fullLength": 173,
            "truncatedContent": ";\r\n *   try {\r\n *     // コンテンツ生成用途を指定\r\n *     const story = await client.generateText(prompt, {\r\n *       temperature: 0.8,\r\n *       targetLength: 3000,\r\n *       purpose: ",
            "hash": "b53b5bbab07b13dfb05f16d375526bd4",
            "keywords": [
              "生成",
              "story",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [],
        "parameters": {
          "temperature": {
            "value": "0.8",
            "source": "object_literal",
            "confidence": "medium"
          },
          "frequencyPenalty": {
            "value": "0.6",
            "rawValue": "frequencyPenalty: 0.6",
            "confidence": "high"
          },
          "presencePenalty": {
            "value": "0.3",
            "rawValue": "presencePenalty: 0.3",
            "confidence": "high"
          },
          "content": {
            "value": "'gemini-2.0-flash'",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "GeminiClient",
            "const",
            "isValid",
            "await",
            "client",
            "validateApiKey",
            "console",
            "error",
            "API",
            "return"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "626eaf40f5e89f7982575e1c61728790"
      },
      {
        "id": "call_94e6ee35",
        "filePath": "src\\lib\\generation\\gemini-client.ts",
        "fileName": "gemini-client.ts",
        "lineNumber": 407,
        "lineContent": "const result = await model.generateContent({",
        "matchedPattern": "\\.generateContent\\s*\\(",
        "callMethod": "generateContent",
        "fullMatch": ".generateContent(",
        "context": {
          "before": [
            {
              "lineNumber": 402,
              "content": "logger.info(`Sending request to Gemini API`, {",
              "indent": 8
            },
            {
              "lineNumber": 403,
              "content": "timestamp: new Date().toISOString(),",
              "indent": 12
            },
            {
              "lineNumber": 404,
              "content": "callStartTime: new Date().toISOString()",
              "indent": 12
            },
            {
              "lineNumber": 405,
              "content": "});",
              "indent": 8
            },
            {
              "lineNumber": 406,
              "content": "",
              "indent": 1
            }
          ],
          "current": {
            "lineNumber": 407,
            "content": "const result = await model.generateContent({",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 408,
              "content": "contents: [{ role: 'user', parts: [{ text: prompt }] }],",
              "indent": 12
            },
            {
              "lineNumber": 409,
              "content": "});",
              "indent": 8
            },
            {
              "lineNumber": 410,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 411,
              "content": "logger.info(`Received initial response from Gemini API`, {",
              "indent": 8
            },
            {
              "lineNumber": 412,
              "content": "timestamp: new Date().toISOString(),",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 349,
            "distance": 58
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ", parts: [{ text: prompt }] }],\r\n        });\r\n\r\n        logger.info(`Received initial response from Gemini API`, {\r\n            timestamp: new Date().toISOString(),\r\n            processingTime: Date.now() - startTime\r\n        });\r\n\r\n        const response = await result.response;\r\n        const responseText = response.text();\r\n\r\n        // 生成時間の記録\r\n        const generationTime = Date.now() - startTime;\r\n        logger.info(",
            "fullLength": 427,
            "truncatedContent": ", parts: [{ text: prompt }] }],\r\n        });\r\n\r\n        logger.info(`Received initial response from Gemini API`, {\r\n            timestamp: new Date().toISOString(),\r\n            processingTime: Date.now() - startTime\r\n        });\r\n\r\n        const response = await result.response;\r\n        const responseText = response.text();\r\n\r\n        // 生成時間の記録\r\n        const generationTime = Date.now() - startTime;\r\n        logger.info(",
            "hash": "ed9bbbf3c1c015303c5c92509110ece0",
            "keywords": [
              "生成"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", {\r\n            timestamp: new Date().toISOString(),\r\n            callStartTime: new Date().toISOString()\r\n        });\r\n\r\n        const result = await model.generateContent({\r\n            contents: [{ role: 'user', parts: [{ text: prompt }] }],\r\n        });\r\n\r\n        logger.info(",
            "fullLength": 282,
            "truncatedContent": ", {\r\n            timestamp: new Date().toISOString(),\r\n            callStartTime: new Date().toISOString()\r\n        });\r\n\r\n        const result = await model.generateContent({\r\n            contents: [{ role: 'user', parts: [{ text: prompt }] }],\r\n        });\r\n\r\n        logger.info(",
            "hash": "f0cd485865f5084265f6df960eef4a36",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ", {\r\n            timestamp: new Date().toISOString(),\r\n            callStartTime: new Date().toISOString()\r\n        });\r\n\r\n        const result = await model.generateContent({\r\n            contents: [{ role: 'user', parts: [{ text: prompt }] }],\r\n        });\r\n\r\n        logger.info(",
            "fullLength": 282,
            "truncatedContent": ", {\r\n            timestamp: new Date().toISOString(),\r\n            callStartTime: new Date().toISOString()\r\n        });\r\n\r\n        const result = await model.generateContent({\r\n            contents: [{ role: 'user', parts: [{ text: prompt }] }],\r\n        });\r\n\r\n        logger.info(",
            "hash": "f0cd485865f5084265f6df960eef4a36",
            "hasVariables": false,
            "variableCount": 0
          }
        ],
        "expectedOutputs": [
          {
            "type": "response_structure",
            "fields": [
              "response",
              "text"
            ],
            "confidence": "medium"
          }
        ],
        "parameters": {
          "contents": {
            "value": "[{ role: 'user'",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "eModel",
            "model",
            "modelName",
            "generationConfig",
            "genOptions",
            "logger",
            "info",
            "Model",
            "initialized",
            "preparing"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "af016cd03bfd8a3110c236232d554ffd"
      },
      {
        "id": "call_d5f26128",
        "filePath": "src\\lib\\generation\\gemini-client.ts",
        "fileName": "gemini-client.ts",
        "lineNumber": 493,
        "lineContent": "const result = await model.generateContent('test');",
        "matchedPattern": "\\.generateContent\\s*\\(",
        "callMethod": "generateContent",
        "fullMatch": ".generateContent(",
        "context": {
          "before": [
            {
              "lineNumber": 488,
              "content": "async validateApiKey(): Promise<boolean> {",
              "indent": 4
            },
            {
              "lineNumber": 489,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 490,
              "content": "logger.debug('Validating Gemini API key');",
              "indent": 12
            },
            {
              "lineNumber": 491,
              "content": "// デフォルトモデルを使用",
              "indent": 12
            },
            {
              "lineNumber": 492,
              "content": "const model = this.client.getGenerativeModel({ model: this.defaultModel });",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 493,
            "content": "const result = await model.generateContent('test');",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 494,
              "content": "logger.info('API key validation successful');",
              "indent": 12
            },
            {
              "lineNumber": 495,
              "content": "return true;",
              "indent": 12
            },
            {
              "lineNumber": 496,
              "content": "} catch (error) {",
              "indent": 8
            },
            {
              "lineNumber": 497,
              "content": "logger.warn('API key validation failed', {",
              "indent": 12
            },
            {
              "lineNumber": 498,
              "content": "error: error instanceof Error ? error.message : String(error)",
              "indent": 16
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 468,
            "distance": 25
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ");\r\n            // デフォルトモデルを使用\r\n            const model = this.client.getGenerativeModel({ model: this.defaultModel });\r\n            const result = await model.generateContent(",
            "fullLength": 176,
            "truncatedContent": ");\r\n            // デフォルトモデルを使用\r\n            const model = this.client.getGenerativeModel({ model: this.defaultModel });\r\n            const result = await model.generateContent(",
            "hash": "2c80ccbe645231d815d8ce367ee8fd94",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<boolean>"
            ],
            "extractedTypes": [
              "boolean>"
            ]
          }
        ],
        "parameters": {
          "model": {
            "value": "this.defaultModel",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定"
          ],
          "characterElements": [],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "false",
            "error",
            "handling",
            "monitoring",
            "DEBUG",
            "INFO",
            "WARN",
            "async",
            "validateApiKey",
            "Promise"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "3909e721bc59d5eef615f250172e6733"
      },
      {
        "id": "call_1734eaef",
        "filePath": "src\\lib\\learning-journey\\concept-learning-manager.ts",
        "fileName": "concept-learning-manager.ts",
        "lineNumber": 1102,
        "lineContent": "const response = await this.geminiClient.generateText(prompt, { temperature: 0.1 });",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 1097,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1098,
              "content": "段階コードは以下のいずれかを使用してください:",
              "indent": 0
            },
            {
              "lineNumber": 1099,
              "content": "MISCONCEPTION, EXPLORATION, CONFLICT, INSIGHT, APPLICATION, INTEGRATION",
              "indent": 0
            },
            {
              "lineNumber": 1100,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 1101,
              "content": "",
              "indent": 0
            }
          ],
          "current": {
            "lineNumber": 1102,
            "content": "const response = await this.geminiClient.generateText(prompt, { temperature: 0.1 });",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 1103,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1104,
              "content": "// レスポンスから段階を抽出",
              "indent": 12
            },
            {
              "lineNumber": 1105,
              "content": "const stageMatch = response.match(/学習段階:\\s*(MISCONCEPTION|EXPLORATION|CONFLICT|INSIGHT|APPLICATION|INTEGRATION)/i);",
              "indent": 12
            },
            {
              "lineNumber": 1106,
              "content": "const confidenceMatch = response.match(/確信度:\\s*([0-9.]+)/i);",
              "indent": 12
            },
            {
              "lineNumber": 1107,
              "content": "",
              "indent": 0
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 1062,
            "distance": 40
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "response_structure",
            "fields": [
              "match"
            ],
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "conflict",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "rawValue": "temperature: 0.1",
            "confidence": "high"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "keyPrinciples",
            "join",
            "additionalContext",
            "MISCONCEPTION",
            "EXPLORATION",
            "CONFLICT",
            "INSIGHT",
            "APPLICATION",
            "INTEGRATION",
            "const"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "a5022f1bc9d42958694dc44ec1d3ca0f"
      },
      {
        "id": "call_1734eaef",
        "filePath": "src\\lib\\learning-journey\\concept-learning-manager.ts",
        "fileName": "concept-learning-manager.ts",
        "lineNumber": 1102,
        "lineContent": "const response = await this.geminiClient.generateText(prompt, { temperature: 0.1 });",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 1097,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1098,
              "content": "段階コードは以下のいずれかを使用してください:",
              "indent": 0
            },
            {
              "lineNumber": 1099,
              "content": "MISCONCEPTION, EXPLORATION, CONFLICT, INSIGHT, APPLICATION, INTEGRATION",
              "indent": 0
            },
            {
              "lineNumber": 1100,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 1101,
              "content": "",
              "indent": 0
            }
          ],
          "current": {
            "lineNumber": 1102,
            "content": "const response = await this.geminiClient.generateText(prompt, { temperature: 0.1 });",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 1103,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1104,
              "content": "// レスポンスから段階を抽出",
              "indent": 12
            },
            {
              "lineNumber": 1105,
              "content": "const stageMatch = response.match(/学習段階:\\s*(MISCONCEPTION|EXPLORATION|CONFLICT|INSIGHT|APPLICATION|INTEGRATION)/i);",
              "indent": 12
            },
            {
              "lineNumber": 1106,
              "content": "const confidenceMatch = response.match(/確信度:\\s*([0-9.]+)/i);",
              "indent": 12
            },
            {
              "lineNumber": 1107,
              "content": "",
              "indent": 0
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 1062,
            "distance": 40
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "response_structure",
            "fields": [
              "match"
            ],
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "conflict",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "rawValue": "temperature: 0.1",
            "confidence": "high"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "keyPrinciples",
            "join",
            "additionalContext",
            "MISCONCEPTION",
            "EXPLORATION",
            "CONFLICT",
            "INSIGHT",
            "APPLICATION",
            "INTEGRATION",
            "const"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "a5022f1bc9d42958694dc44ec1d3ca0f"
      },
      {
        "id": "call_44e1bb22",
        "filePath": "src\\lib\\learning-journey\\concept-learning-manager.ts",
        "fileName": "concept-learning-manager.ts",
        "lineNumber": 1102,
        "lineContent": "const response = await this.geminiClient.generateText(prompt, { temperature: 0.1 });",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 1097,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1098,
              "content": "段階コードは以下のいずれかを使用してください:",
              "indent": 0
            },
            {
              "lineNumber": 1099,
              "content": "MISCONCEPTION, EXPLORATION, CONFLICT, INSIGHT, APPLICATION, INTEGRATION",
              "indent": 0
            },
            {
              "lineNumber": 1100,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 1101,
              "content": "",
              "indent": 0
            }
          ],
          "current": {
            "lineNumber": 1102,
            "content": "const response = await this.geminiClient.generateText(prompt, { temperature: 0.1 });",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 1103,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1104,
              "content": "// レスポンスから段階を抽出",
              "indent": 12
            },
            {
              "lineNumber": 1105,
              "content": "const stageMatch = response.match(/学習段階:\\s*(MISCONCEPTION|EXPLORATION|CONFLICT|INSIGHT|APPLICATION|INTEGRATION)/i);",
              "indent": 12
            },
            {
              "lineNumber": 1106,
              "content": "const confidenceMatch = response.match(/確信度:\\s*([0-9.]+)/i);",
              "indent": 12
            },
            {
              "lineNumber": 1107,
              "content": "",
              "indent": 0
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 1062,
            "distance": 40
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "response_structure",
            "fields": [
              "match"
            ],
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "conflict",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "rawValue": "temperature: 0.1",
            "confidence": "high"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "ples",
            "join",
            "additionalContext",
            "MISCONCEPTION",
            "EXPLORATION",
            "CONFLICT",
            "INSIGHT",
            "APPLICATION",
            "INTEGRATION",
            "const"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "6d113eecf03599fa4a2a03d55773670c"
      },
      {
        "id": "call_ca729a9d",
        "filePath": "src\\lib\\learning-journey\\context-manager.ts",
        "fileName": "context-manager.ts",
        "lineNumber": 470,
        "lineContent": "this.generateSummary(chapterData.chapter.content),",
        "matchedPattern": "(\\w+\\.)?generateSummary\\s*\\(",
        "callMethod": "generateSummary",
        "fullMatch": "this.generateSummary(",
        "context": {
          "before": [
            {
              "lineNumber": 465,
              "content": "if (chapterData.chapter) {",
              "indent": 28
            },
            {
              "lineNumber": 466,
              "content": "recentChapterInfo.push({",
              "indent": 32
            },
            {
              "lineNumber": 467,
              "content": "chapterNumber: chapterData.chapter.chapterNumber,",
              "indent": 36
            },
            {
              "lineNumber": 468,
              "content": "title: chapterData.chapter.title || `第${chapterData.chapter.chapterNumber}章`,",
              "indent": 36
            },
            {
              "lineNumber": 469,
              "content": "summary: chapterData.chapter.metadata?.summary ||",
              "indent": 36
            }
          ],
          "current": {
            "lineNumber": 470,
            "content": "this.generateSummary(chapterData.chapter.content),",
            "indent": 44
          },
          "after": [
            {
              "lineNumber": 471,
              "content": "mainEvents: this.extractMainEvents(chapterData.keyPhrases || [])",
              "indent": 36
            },
            {
              "lineNumber": 472,
              "content": "});",
              "indent": 32
            },
            {
              "lineNumber": 473,
              "content": "}",
              "indent": 28
            },
            {
              "lineNumber": 474,
              "content": "}",
              "indent": 24
            },
            {
              "lineNumber": 475,
              "content": "}",
              "indent": 20
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 465,
            "distance": 5
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "第${chapterData.chapter.chapterNumber}章",
            "fullLength": 38,
            "truncatedContent": "第${chapterData.chapter.chapterNumber}章",
            "hash": "93abc9ec46228a9b59b9ad457fc7da7c",
            "keywords": [
              "章",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "response_structure",
            "fields": [
              "data",
              "source"
            ],
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "for",
            "const",
            "chapterData",
            "result",
            "data",
            "recentChapters",
            "chapter",
            "recentChapterInfo",
            "push",
            "chapterNumber"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "1fafc4b80b62ae72f4ea299accbacb4b"
      },
      {
        "id": "call_796b89ed",
        "filePath": "src\\lib\\learning-journey\\context-manager.ts",
        "fileName": "context-manager.ts",
        "lineNumber": 515,
        "lineContent": "this.generateSummary(chapterData.chapter.content),",
        "matchedPattern": "(\\w+\\.)?generateSummary\\s*\\(",
        "callMethod": "generateSummary",
        "fullMatch": "this.generateSummary(",
        "context": {
          "before": [
            {
              "lineNumber": 510,
              "content": "if (chapterData.chapter) {",
              "indent": 20
            },
            {
              "lineNumber": 511,
              "content": "recentChapterInfo.push({",
              "indent": 24
            },
            {
              "lineNumber": 512,
              "content": "chapterNumber: chapterData.chapter.chapterNumber,",
              "indent": 28
            },
            {
              "lineNumber": 513,
              "content": "title: chapterData.chapter.title || `第${chapterData.chapter.chapterNumber}章`,",
              "indent": 28
            },
            {
              "lineNumber": 514,
              "content": "summary: chapterData.chapter.metadata?.summary ||",
              "indent": 28
            }
          ],
          "current": {
            "lineNumber": 515,
            "content": "this.generateSummary(chapterData.chapter.content),",
            "indent": 36
          },
          "after": [
            {
              "lineNumber": 516,
              "content": "mainEvents: this.extractMainEvents(chapterData.keyPhrases || [])",
              "indent": 28
            },
            {
              "lineNumber": 517,
              "content": "});",
              "indent": 24
            },
            {
              "lineNumber": 518,
              "content": "}",
              "indent": 20
            },
            {
              "lineNumber": 519,
              "content": "}",
              "indent": 16
            },
            {
              "lineNumber": 520,
              "content": "}",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 510,
            "distance": 5
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "第${chapterData.chapter.chapterNumber}章",
            "fullLength": 38,
            "truncatedContent": "第${chapterData.chapter.chapterNumber}章",
            "hash": "93abc9ec46228a9b59b9ad457fc7da7c",
            "keywords": [
              "章",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "mergeAnalysis",
            "relatedMethods": [
              "mergeAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<void>"
            ],
            "extractedTypes": [
              "void>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "hortTerm",
            "recentChapters",
            "for",
            "const",
            "chapterData",
            "context",
            "shortTerm",
            "chapter",
            "recentChapterInfo",
            "push"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "a93a96e9cb5c1872adc0d113dd2d9001"
      },
      {
        "id": "call_63625169",
        "filePath": "src\\lib\\learning-journey\\context-manager.ts",
        "fileName": "context-manager.ts",
        "lineNumber": 908,
        "lineContent": "summary: chapterData.summary || this.generateSummary(chapterData.content),",
        "matchedPattern": "(\\w+\\.)?generateSummary\\s*\\(",
        "callMethod": "generateSummary",
        "fullMatch": "this.generateSummary(",
        "context": {
          "before": [
            {
              "lineNumber": 903,
              "content": "updatedAt: new Date(),                       // ✅ 必須: Date型",
              "indent": 16
            },
            {
              "lineNumber": 904,
              "content": "metadata: {",
              "indent": 16
            },
            {
              "lineNumber": 905,
              "content": "createdAt: new Date().toISOString(),",
              "indent": 20
            },
            {
              "lineNumber": 906,
              "content": "lastModified: new Date().toISOString(),",
              "indent": 20
            },
            {
              "lineNumber": 907,
              "content": "status: 'analyzed',",
              "indent": 20
            }
          ],
          "current": {
            "lineNumber": 908,
            "content": "summary: chapterData.summary || this.generateSummary(chapterData.content),",
            "indent": 20
          },
          "after": [
            {
              "lineNumber": 909,
              "content": "mainEvents: chapterData.mainEvents || [],",
              "indent": 20
            },
            {
              "lineNumber": 910,
              "content": "learningStage: chapterData.learningStage || this.context.currentLearningStage,",
              "indent": 20
            },
            {
              "lineNumber": 911,
              "content": "wordCount: chapterData.content.length,",
              "indent": 20
            },
            {
              "lineNumber": 912,
              "content": "estimatedReadingTime: Math.ceil(chapterData.content.length / 1000)",
              "indent": 20
            },
            {
              "lineNumber": 913,
              "content": "}",
              "indent": 16
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 888,
            "distance": 20
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ",\n                    summary: chapterData.summary || this.generateSummary(chapterData.content),\n                    mainEvents: chapterData.mainEvents || [],\n                    learningStage: chapterData.learningStage || this.context.currentLearningStage,\n                    wordCount: chapterData.content.length,\n                    estimatedReadingTime: Math.ceil(chapterData.content.length / 1000)\n                }\n            };\n\n            // 統合記憶システムでの章処理\n            const result = await this.safeMemoryOperation(\n                () => this.memoryManager.processChapter(chapter),\n                { \n                    success: false, \n                    operationType: ",
            "fullLength": 683,
            "truncatedContent": ",\n                    summary: chapterData.summary || this.generateSummary(chapterData.content),\n                    mainEvents: chapterData.mainEvents || [],\n                    learningStage: chapterData.learningStage || this.context.currentLearningStage,\n                    wordCount: chapterData.content.length,\n                    estimatedReadingTime: Math.ceil(chapterData.content.length / 1000)\n                }\n            };\n\n            // 統合記憶システムでの章処理\n            const result = await this.safeMemoryOperation(\n                () => this.memoryManager.processChapter(chapter),\n                { \n                    success: false, \n                    operationType: ",
            "hash": "ff7fcbef3937974af01bf8e56868051d",
            "keywords": [
              "章",
              "chapter",
              "generate",
              "Chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ",\n                scenes: [],                                  // ✅ 必須フィールド\n                createdAt: new Date(),                       // ✅ 必須: Date型\n                updatedAt: new Date(),                       // ✅ 必須: Date型\n                metadata: {\n                    createdAt: new Date().toISOString(),\n                    lastModified: new Date().toISOString(),\n                    status: ",
            "fullLength": 401,
            "truncatedContent": ",\n                scenes: [],                                  // ✅ 必須フィールド\n                createdAt: new Date(),                       // ✅ 必須: Date型\n                updatedAt: new Date(),                       // ✅ 必須: Date型\n                metadata: {\n                    createdAt: new Date().toISOString(),\n                    lastModified: new Date().toISOString(),\n                    status: ",
            "hash": "6ce7b17c4033eaaeac0a9dc4efbbd8c1",
            "keywords": [
              "scene",
              "create"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ",\n                    summary: chapterData.summary || this.generateSummary(chapterData.content),\n                    mainEvents: chapterData.mainEvents || [],\n                    learningStage: chapterData.learningStage || this.context.currentLearningStage,\n                    wordCount: chapterData.content.length,\n                    estimatedReadingTime: Math.ceil(chapterData.content.length / 1000)\n                }\n            };\n\n            // 統合記憶システムでの章処理\n            const result = await this.safeMemoryOperation(\n                () => this.memoryManager.processChapter(chapter),\n                { \n                    success: false, \n                    operationType: ",
            "fullLength": 683,
            "truncatedContent": ",\n                    summary: chapterData.summary || this.generateSummary(chapterData.content),\n                    mainEvents: chapterData.mainEvents || [],\n                    learningStage: chapterData.learningStage || this.context.currentLearningStage,\n                    wordCount: chapterData.content.length,\n                    estimatedReadingTime: Math.ceil(chapterData.content.length / 1000)\n                }\n            };\n\n            // 統合記憶システムでの章処理\n            const result = await this.safeMemoryOperation(\n                () => this.memoryManager.processChapter(chapter),\n                { \n                    success: false, \n                    operationType: ",
            "hash": "ff7fcbef3937974af01bf8e56868051d",
            "keywords": [
              "章",
              "chapter",
              "generate",
              "Chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "scene",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate",
            "create",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "previousChapterSummary",
            "scenes",
            "createdAt",
            "new",
            "Date",
            "updatedAt",
            "metadata",
            "toISOString",
            "lastModified",
            "status"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "3c89fbcf166bc1f61bf35c80d24e4790"
      },
      {
        "id": "call_fa708e96",
        "filePath": "src\\lib\\learning-journey\\context-manager.ts",
        "fileName": "context-manager.ts",
        "lineNumber": 1031,
        "lineContent": "summary: chapterData.summary || this.generateSummary(chapterData.content),",
        "matchedPattern": "(\\w+\\.)?generateSummary\\s*\\(",
        "callMethod": "generateSummary",
        "fullMatch": "this.generateSummary(",
        "context": {
          "before": [
            {
              "lineNumber": 1026,
              "content": "if (!this.context) return;",
              "indent": 8
            },
            {
              "lineNumber": 1027,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1028,
              "content": "const chapterInfo = {",
              "indent": 8
            },
            {
              "lineNumber": 1029,
              "content": "chapterNumber,",
              "indent": 12
            },
            {
              "lineNumber": 1030,
              "content": "title: chapterData.title,",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 1031,
            "content": "summary: chapterData.summary || this.generateSummary(chapterData.content),",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 1032,
              "content": "mainEvents: chapterData.mainEvents || []",
              "indent": 12
            },
            {
              "lineNumber": 1033,
              "content": "};",
              "indent": 8
            },
            {
              "lineNumber": 1034,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1035,
              "content": "const existingIndex = this.context.recentChapters.findIndex(",
              "indent": 8
            },
            {
              "lineNumber": 1036,
              "content": "c => c.chapterNumber === chapterNumber",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 1009,
            "distance": 22
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<void>"
            ],
            "extractedTypes": [
              "void>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "param",
            "chapterNumber",
            "chapterData",
            "private",
            "async",
            "updateRecentChaptersFromProcessedChapter",
            "number",
            "title",
            "string",
            "content"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "74b80990fb9eb7667a11a536b4168c50"
      },
      {
        "id": "call_e0637847",
        "filePath": "src\\lib\\learning-journey\\context-manager.ts",
        "fileName": "context-manager.ts",
        "lineNumber": 1423,
        "lineContent": "private generateSummary(content: string): string {",
        "matchedPattern": "(\\w+\\.)?generateSummary\\s*\\(",
        "callMethod": "generateSummary",
        "fullMatch": "generateSummary(",
        "context": {
          "before": [
            {
              "lineNumber": 1418,
              "content": "* 内容から要約を生成する",
              "indent": 5
            },
            {
              "lineNumber": 1419,
              "content": "* @param content 内容",
              "indent": 5
            },
            {
              "lineNumber": 1420,
              "content": "* @returns 要約",
              "indent": 5
            },
            {
              "lineNumber": 1421,
              "content": "* @private",
              "indent": 5
            },
            {
              "lineNumber": 1422,
              "content": "*/",
              "indent": 5
            }
          ],
          "current": {
            "lineNumber": 1423,
            "content": "private generateSummary(content: string): string {",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 1424,
              "content": "if (content.length <= 200) {",
              "indent": 8
            },
            {
              "lineNumber": 1425,
              "content": "return content;",
              "indent": 12
            },
            {
              "lineNumber": 1426,
              "content": "}",
              "indent": 8
            },
            {
              "lineNumber": 1427,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1428,
              "content": "// 改良された要約生成（文の境界を考慮）",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 1412,
            "distance": 11
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ");\n        }\n    }\n\n    /**\n     * 内容から要約を生成する\n     * @param content 内容\n     * @returns 要約\n     * @private\n     */\n    private generateSummary(content: string): string {\n        if (content.length <= 200) {\n            return content;\n        }\n\n        // 改良された要約生成（文の境界を考慮）\n        const sentences = content.split(/[。！？]/);\n        let summary = ",
            "fullLength": 348,
            "truncatedContent": ");\n        }\n    }\n\n    /**\n     * 内容から要約を生成する\n     * @param content 内容\n     * @returns 要約\n     * @private\n     */\n    private generateSummary(content: string): string {\n        if (content.length <= 200) {\n            return content;\n        }\n\n        // 改良された要約生成（文の境界を考慮）\n        const sentences = content.split(/[。！？]/);\n        let summary = ",
            "hash": "29bfbf43a664ccaa9ad0365f4595b24d",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ");\n        }\n    }\n\n    /**\n     * 内容から要約を生成する\n     * @param content 内容\n     * @returns 要約\n     * @private\n     */\n    private generateSummary(content: string): string {\n        if (content.length <= 200) {\n            return content;\n        }\n\n        // 改良された要約生成（文の境界を考慮）\n        const sentences = content.split(/[。！？]/);\n        let summary = ",
            "fullLength": 348,
            "truncatedContent": ");\n        }\n    }\n\n    /**\n     * 内容から要約を生成する\n     * @param content 内容\n     * @returns 要約\n     * @private\n     */\n    private generateSummary(content: string): string {\n        if (content.length <= 200) {\n            return content;\n        }\n\n        // 改良された要約生成（文の境界を考慮）\n        const sentences = content.split(/[。！？]/);\n        let summary = ",
            "hash": "29bfbf43a664ccaa9ad0365f4595b24d",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "scene",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "nceStats",
            "averageProcessingTime",
            "this",
            "performanceStats",
            "totalOperations",
            "processingTime",
            "private",
            "ensureInitialized",
            "void",
            "initialized"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "07eda34e607da4bf51a47e44862de16c"
      },
      {
        "id": "call_a225d13e",
        "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
        "fileName": "emotional-learning-integrator.ts",
        "lineNumber": 1030,
        "lineContent": "return await this.geminiClient.generateText(prompt, options);",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 1025,
              "content": "* 安全なAI分析実行",
              "indent": 5
            },
            {
              "lineNumber": 1026,
              "content": "* @private",
              "indent": 5
            },
            {
              "lineNumber": 1027,
              "content": "*/",
              "indent": 5
            },
            {
              "lineNumber": 1028,
              "content": "private async executeAIAnalysis(prompt: string, options: any): Promise<string> {",
              "indent": 4
            },
            {
              "lineNumber": 1029,
              "content": "try {",
              "indent": 8
            }
          ],
          "current": {
            "lineNumber": 1030,
            "content": "return await this.geminiClient.generateText(prompt, options);",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 1031,
              "content": "} catch (error) {",
              "indent": 8
            },
            {
              "lineNumber": 1032,
              "content": "logger.error('AI analysis failed', { error });",
              "indent": 12
            },
            {
              "lineNumber": 1033,
              "content": "throw error;",
              "indent": 12
            },
            {
              "lineNumber": 1034,
              "content": "}",
              "indent": 8
            },
            {
              "lineNumber": 1035,
              "content": "}",
              "indent": 4
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 1015,
            "distance": 15
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\n            : content;\n    }\n\n    /**\n     * 安全なAI分析実行\n     * @private\n     */\n    private async executeAIAnalysis(prompt: string, options: any): Promise<string> {\n        try {\n            return await this.geminiClient.generateText(prompt, options);\n        } catch (error) {\n            logger.error(",
            "fullLength": 304,
            "truncatedContent": "\n            : content;\n    }\n\n    /**\n     * 安全なAI分析実行\n     * @private\n     */\n    private async executeAIAnalysis(prompt: string, options: any): Promise<string> {\n        try {\n            return await this.geminiClient.generateText(prompt, options);\n        } catch (error) {\n            logger.error(",
            "hash": "d65e54c92acae5c134de92df18a5620d",
            "keywords": [
              "分析",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n            : content;\n    }\n\n    /**\n     * 安全なAI分析実行\n     * @private\n     */\n    private async executeAIAnalysis(prompt: string, options: any): Promise<string> {\n        try {\n            return await this.geminiClient.generateText(prompt, options);\n        } catch (error) {\n            logger.error(",
            "fullLength": 304,
            "truncatedContent": "\n            : content;\n    }\n\n    /**\n     * 安全なAI分析実行\n     * @private\n     */\n    private async executeAIAnalysis(prompt: string, options: any): Promise<string> {\n        try {\n            return await this.geminiClient.generateText(prompt, options);\n        } catch (error) {\n            logger.error(",
            "hash": "d65e54c92acae5c134de92df18a5620d",
            "keywords": [
              "分析",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "executeAIAnalysis",
            "relatedMethods": [
              "executeAIAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<string>"
            ],
            "extractedTypes": [
              "string>"
            ]
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "create"
          ],
          "complexity": "low",
          "dependencies": [
            "private",
            "safeContentTruncation",
            "content",
            "string",
            "maxLength",
            "number",
            "typeof",
            "return",
            "length",
            "substring"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "99f9ae195bd0cb79789717cb52d25608"
      },
      {
        "id": "call_a225d13e",
        "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
        "fileName": "emotional-learning-integrator.ts",
        "lineNumber": 1030,
        "lineContent": "return await this.geminiClient.generateText(prompt, options);",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 1025,
              "content": "* 安全なAI分析実行",
              "indent": 5
            },
            {
              "lineNumber": 1026,
              "content": "* @private",
              "indent": 5
            },
            {
              "lineNumber": 1027,
              "content": "*/",
              "indent": 5
            },
            {
              "lineNumber": 1028,
              "content": "private async executeAIAnalysis(prompt: string, options: any): Promise<string> {",
              "indent": 4
            },
            {
              "lineNumber": 1029,
              "content": "try {",
              "indent": 8
            }
          ],
          "current": {
            "lineNumber": 1030,
            "content": "return await this.geminiClient.generateText(prompt, options);",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 1031,
              "content": "} catch (error) {",
              "indent": 8
            },
            {
              "lineNumber": 1032,
              "content": "logger.error('AI analysis failed', { error });",
              "indent": 12
            },
            {
              "lineNumber": 1033,
              "content": "throw error;",
              "indent": 12
            },
            {
              "lineNumber": 1034,
              "content": "}",
              "indent": 8
            },
            {
              "lineNumber": 1035,
              "content": "}",
              "indent": 4
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 1015,
            "distance": 15
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\n            : content;\n    }\n\n    /**\n     * 安全なAI分析実行\n     * @private\n     */\n    private async executeAIAnalysis(prompt: string, options: any): Promise<string> {\n        try {\n            return await this.geminiClient.generateText(prompt, options);\n        } catch (error) {\n            logger.error(",
            "fullLength": 304,
            "truncatedContent": "\n            : content;\n    }\n\n    /**\n     * 安全なAI分析実行\n     * @private\n     */\n    private async executeAIAnalysis(prompt: string, options: any): Promise<string> {\n        try {\n            return await this.geminiClient.generateText(prompt, options);\n        } catch (error) {\n            logger.error(",
            "hash": "d65e54c92acae5c134de92df18a5620d",
            "keywords": [
              "分析",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n            : content;\n    }\n\n    /**\n     * 安全なAI分析実行\n     * @private\n     */\n    private async executeAIAnalysis(prompt: string, options: any): Promise<string> {\n        try {\n            return await this.geminiClient.generateText(prompt, options);\n        } catch (error) {\n            logger.error(",
            "fullLength": 304,
            "truncatedContent": "\n            : content;\n    }\n\n    /**\n     * 安全なAI分析実行\n     * @private\n     */\n    private async executeAIAnalysis(prompt: string, options: any): Promise<string> {\n        try {\n            return await this.geminiClient.generateText(prompt, options);\n        } catch (error) {\n            logger.error(",
            "hash": "d65e54c92acae5c134de92df18a5620d",
            "keywords": [
              "分析",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "executeAIAnalysis",
            "relatedMethods": [
              "executeAIAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<string>"
            ],
            "extractedTypes": [
              "string>"
            ]
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "create"
          ],
          "complexity": "low",
          "dependencies": [
            "private",
            "safeContentTruncation",
            "content",
            "string",
            "maxLength",
            "number",
            "typeof",
            "return",
            "length",
            "substring"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "99f9ae195bd0cb79789717cb52d25608"
      },
      {
        "id": "call_43a85937",
        "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
        "fileName": "emotional-learning-integrator.ts",
        "lineNumber": 461,
        "lineContent": "const response = await this.executeAIAnalysis(prompt, {",
        "matchedPattern": "executeAIAnalysis\\s*\\(",
        "callMethod": "executeAIAnalysis",
        "fullMatch": "executeAIAnalysis(",
        "context": {
          "before": [
            {
              "lineNumber": 456,
              "content": "truncatedContent,",
              "indent": 16
            },
            {
              "lineNumber": 457,
              "content": "conceptName,",
              "indent": 16
            },
            {
              "lineNumber": 458,
              "content": "stage",
              "indent": 16
            },
            {
              "lineNumber": 459,
              "content": ");",
              "indent": 12
            },
            {
              "lineNumber": 460,
              "content": "",
              "indent": 0
            }
          ],
          "current": {
            "lineNumber": 461,
            "content": "const response = await this.executeAIAnalysis(prompt, {",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 462,
              "content": "temperature: 0.1,",
              "indent": 16
            },
            {
              "lineNumber": 463,
              "content": "responseFormat: 'json'",
              "indent": 16
            },
            {
              "lineNumber": 464,
              "content": "});",
              "indent": 12
            },
            {
              "lineNumber": 465,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 466,
              "content": "// レスポンスの安全な解析",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 415,
            "distance": 46
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ");\n            this.performanceStats.totalAnalyses++;\n\n            // コンテンツの安全な切り詰め\n            const truncatedContent = this.safeContentTruncation(chapterContent, 5000);\n\n            // AIを使って章内容を分析\n            const prompt = this.createSynchronizationPrompt(\n                truncatedContent,\n                conceptName,\n                stage\n            );\n\n            const response = await this.executeAIAnalysis(prompt, {\n                temperature: 0.1,\n                responseFormat: 'json'\n            });\n\n            // レスポンスの安全な解析\n            const metrics = this.parseSynchronizationResponse(response);\n\n            // 統合記憶システムを使用した結果保存\n            await this.safeMemoryOperation(\n                async () => {\n                    const searchResult = await this.memoryManager.unifiedSearch(\n                        ",
            "fullLength": 833,
            "truncatedContent": ");\n            this.performanceStats.totalAnalyses++;\n\n            // コンテンツの安全な切り詰め\n            const truncatedContent = this.safeContentTruncation(chapterContent, 5000);\n\n            // AIを使って章内容を分析\n            const prompt = this.createSynchronizationPrompt(\n                truncatedContent,\n                conceptName,\n                stage\n            );\n\n            const response = await this.executeAIAnalysis(prompt, {\n                temperature: 0.1,\n                responseFormat: 'json'\n            });\n\n            // レスポンスの安全な解析\n            const metrics = this.parseSynchronizationResponse(response);\n\n            // 統合記憶システムを使用した結果保存\n            await this.safeMemoryOperation(\n                async () => {\n                    const searchResult = await this.memoryManager.unifiedSearch(\n                        ",
            "hash": "a61f37b1071ad776cd353d7c060ff8e1",
            "keywords": [
              "章",
              "分析",
              "chapter",
              "create"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ");\n            this.performanceStats.totalAnalyses++;\n\n            // コンテンツの安全な切り詰め\n            const truncatedContent = this.safeContentTruncation(chapterContent, 5000);\n\n            // AIを使って章内容を分析\n            const prompt = this.createSynchronizationPrompt(\n                truncatedContent,\n                conceptName,\n                stage\n            );\n\n            const response = await this.executeAIAnalysis(prompt, {\n                temperature: 0.1,\n                responseFormat: 'json'\n            });\n\n            // レスポンスの安全な解析\n            const metrics = this.parseSynchronizationResponse(response);\n\n            // 統合記憶システムを使用した結果保存\n            await this.safeMemoryOperation(\n                async () => {\n                    const searchResult = await this.memoryManager.unifiedSearch(\n                        ",
            "fullLength": 833,
            "truncatedContent": ");\n            this.performanceStats.totalAnalyses++;\n\n            // コンテンツの安全な切り詰め\n            const truncatedContent = this.safeContentTruncation(chapterContent, 5000);\n\n            // AIを使って章内容を分析\n            const prompt = this.createSynchronizationPrompt(\n                truncatedContent,\n                conceptName,\n                stage\n            );\n\n            const response = await this.executeAIAnalysis(prompt, {\n                temperature: 0.1,\n                responseFormat: 'json'\n            });\n\n            // レスポンスの安全な解析\n            const metrics = this.parseSynchronizationResponse(response);\n\n            // 統合記憶システムを使用した結果保存\n            await this.safeMemoryOperation(\n                async () => {\n                    const searchResult = await this.memoryManager.unifiedSearch(\n                        ",
            "hash": "a61f37b1071ad776cd353d7c060ff8e1",
            "keywords": [
              "章",
              "分析",
              "chapter",
              "create"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ");\n            this.performanceStats.totalAnalyses++;\n\n            // コンテンツの安全な切り詰め\n            const truncatedContent = this.safeContentTruncation(chapterContent, 5000);\n\n            // AIを使って章内容を分析\n            const prompt = this.createSynchronizationPrompt(\n                truncatedContent,\n                conceptName,\n                stage\n            );\n\n            const response = await this.executeAIAnalysis(prompt, {\n                temperature: 0.1,\n                responseFormat: 'json'\n            });\n\n            // レスポンスの安全な解析\n            const metrics = this.parseSynchronizationResponse(response);\n\n            // 統合記憶システムを使用した結果保存\n            await this.safeMemoryOperation(\n                async () => {\n                    const searchResult = await this.memoryManager.unifiedSearch(\n                        ",
            "fullLength": 833,
            "truncatedContent": ");\n            this.performanceStats.totalAnalyses++;\n\n            // コンテンツの安全な切り詰め\n            const truncatedContent = this.safeContentTruncation(chapterContent, 5000);\n\n            // AIを使って章内容を分析\n            const prompt = this.createSynchronizationPrompt(\n                truncatedContent,\n                conceptName,\n                stage\n            );\n\n            const response = await this.executeAIAnalysis(prompt, {\n                temperature: 0.1,\n                responseFormat: 'json'\n            });\n\n            // レスポンスの安全な解析\n            const metrics = this.parseSynchronizationResponse(response);\n\n            // 統合記憶システムを使用した結果保存\n            await this.safeMemoryOperation(\n                async () => {\n                    const searchResult = await this.memoryManager.unifiedSearch(\n                        ",
            "hash": "a61f37b1071ad776cd353d7c060ff8e1",
            "keywords": [
              "章",
              "分析",
              "chapter",
              "create"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ");\n            this.performanceStats.totalAnalyses++;\n\n            // コンテンツの安全な切り詰め\n            const truncatedContent = this.safeContentTruncation(chapterContent, 5000);\n\n            // AIを使って章内容を分析\n            const prompt = this.createSynchronizationPrompt(\n                truncatedContent,\n                conceptName,\n                stage\n            );\n\n            const response = await this.executeAIAnalysis(prompt, {\n                temperature: 0.1,\n                responseFormat: 'json'\n            });\n\n            // レスポンスの安全な解析\n            const metrics = this.parseSynchronizationResponse(response);\n\n            // 統合記憶システムを使用した結果保存\n            await this.safeMemoryOperation(\n                async () => {\n                    const searchResult = await this.memoryManager.unifiedSearch(\n                        ",
            "fullLength": 833,
            "truncatedContent": ");\n            this.performanceStats.totalAnalyses++;\n\n            // コンテンツの安全な切り詰め\n            const truncatedContent = this.safeContentTruncation(chapterContent, 5000);\n\n            // AIを使って章内容を分析\n            const prompt = this.createSynchronizationPrompt(\n                truncatedContent,\n                conceptName,\n                stage\n            );\n\n            const response = await this.executeAIAnalysis(prompt, {\n                temperature: 0.1,\n                responseFormat: 'json'\n            });\n\n            // レスポンスの安全な解析\n            const metrics = this.parseSynchronizationResponse(response);\n\n            // 統合記憶システムを使用した結果保存\n            await this.safeMemoryOperation(\n                async () => {\n                    const searchResult = await this.memoryManager.unifiedSearch(\n                        ",
            "hash": "a61f37b1071ad776cd353d7c060ff8e1",
            "hasVariables": false,
            "variableCount": 0
          },
          {
            "type": "method_based",
            "suggestedPurpose": "createSynchronizationPrompt",
            "relatedMethods": [
              "createSynchronizationPrompt",
              "executeAIAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "create"
          ],
          "complexity": "low",
          "dependencies": [
            "logger",
            "info",
            "Analyzing",
            "emotion",
            "learning",
            "synchronization",
            "for",
            "conceptName",
            "stage",
            "this"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "f5c5b91d0835e8ba285773c3d84b7ab7"
      },
      {
        "id": "call_9bbf9fcd",
        "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
        "fileName": "emotional-learning-integrator.ts",
        "lineNumber": 543,
        "lineContent": "const response = await this.executeAIAnalysis(prompt, {",
        "matchedPattern": "executeAIAnalysis\\s*\\(",
        "callMethod": "executeAIAnalysis",
        "fullMatch": "executeAIAnalysis(",
        "context": {
          "before": [
            {
              "lineNumber": 538,
              "content": "truncatedContent,",
              "indent": 16
            },
            {
              "lineNumber": 539,
              "content": "conceptName,",
              "indent": 16
            },
            {
              "lineNumber": 540,
              "content": "stage",
              "indent": 16
            },
            {
              "lineNumber": 541,
              "content": ");",
              "indent": 12
            },
            {
              "lineNumber": 542,
              "content": "",
              "indent": 0
            }
          ],
          "current": {
            "lineNumber": 543,
            "content": "const response = await this.executeAIAnalysis(prompt, {",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 544,
              "content": "temperature: 0.3,",
              "indent": 16
            },
            {
              "lineNumber": 545,
              "content": "responseFormat: 'json'",
              "indent": 16
            },
            {
              "lineNumber": 546,
              "content": "});",
              "indent": 12
            },
            {
              "lineNumber": 547,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 548,
              "content": "// レスポンスの安全な解析",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 498,
            "distance": 45
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "empathetic.points.generated",
            "fullLength": 27,
            "truncatedContent": "empathetic.points.generated",
            "hash": "fa5c335aaedf67a2e6ed8627165ff6c5",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "createEmpatheticPointsPrompt",
            "relatedMethods": [
              "createEmpatheticPointsPrompt",
              "executeAIAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "create"
          ],
          "complexity": "low",
          "dependencies": [
            "logger",
            "info",
            "Generating",
            "empathetic",
            "points",
            "for",
            "conceptName",
            "stage",
            "this",
            "performanceStats"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "9b842a9608e72ec1804ae9f60b8e8805"
      },
      {
        "id": "call_0bf1b71f",
        "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
        "fileName": "emotional-learning-integrator.ts",
        "lineNumber": 605,
        "lineContent": "const response = await this.executeAIAnalysis(prompt, {",
        "matchedPattern": "executeAIAnalysis\\s*\\(",
        "callMethod": "executeAIAnalysis",
        "fullMatch": "executeAIAnalysis(",
        "context": {
          "before": [
            {
              "lineNumber": 600,
              "content": "// コンテンツの安全な切り詰め",
              "indent": 12
            },
            {
              "lineNumber": 601,
              "content": "const truncatedContent = this.safeContentTruncation(chapterContent, 5000);",
              "indent": 12
            },
            {
              "lineNumber": 602,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 603,
              "content": "const prompt = this.createEmotionAnalysisPrompt(truncatedContent, genre);",
              "indent": 12
            },
            {
              "lineNumber": 604,
              "content": "",
              "indent": 0
            }
          ],
          "current": {
            "lineNumber": 605,
            "content": "const response = await this.executeAIAnalysis(prompt, {",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 606,
              "content": "temperature: 0.1,",
              "indent": 16
            },
            {
              "lineNumber": 607,
              "content": "responseFormat: 'json'",
              "indent": 16
            },
            {
              "lineNumber": 608,
              "content": "});",
              "indent": 12
            },
            {
              "lineNumber": 609,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 610,
              "content": "// レスポンスの安全な解析",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 563,
            "distance": 42
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "chapter.emotion.analyzed",
            "fullLength": 24,
            "truncatedContent": "chapter.emotion.analyzed",
            "hash": "b1943a2130d1013940b942a8734dbd84",
            "keywords": [
              "chapter",
              "analyze"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "createEmotionAnalysisPrompt",
            "relatedMethods": [
              "createEmotionAnalysisPrompt",
              "executeAIAnalysis",
              "parseEmotionAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "create",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "ionalDimensions",
            "any",
            "const",
            "startTime",
            "Date",
            "now",
            "try",
            "await",
            "this",
            "ensureInitialized"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "361ad40778dc12b69613ebad6f451751"
      },
      {
        "id": "call_e0f3f264",
        "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
        "fileName": "emotional-learning-integrator.ts",
        "lineNumber": 1028,
        "lineContent": "private async executeAIAnalysis(prompt: string, options: any): Promise<string> {",
        "matchedPattern": "executeAIAnalysis\\s*\\(",
        "callMethod": "executeAIAnalysis",
        "fullMatch": "executeAIAnalysis(",
        "context": {
          "before": [
            {
              "lineNumber": 1023,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1024,
              "content": "/**",
              "indent": 4
            },
            {
              "lineNumber": 1025,
              "content": "* 安全なAI分析実行",
              "indent": 5
            },
            {
              "lineNumber": 1026,
              "content": "* @private",
              "indent": 5
            },
            {
              "lineNumber": 1027,
              "content": "*/",
              "indent": 5
            }
          ],
          "current": {
            "lineNumber": 1028,
            "content": "private async executeAIAnalysis(prompt: string, options: any): Promise<string> {",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 1029,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 1030,
              "content": "return await this.geminiClient.generateText(prompt, options);",
              "indent": 12
            },
            {
              "lineNumber": 1031,
              "content": "} catch (error) {",
              "indent": 8
            },
            {
              "lineNumber": 1032,
              "content": "logger.error('AI analysis failed', { error });",
              "indent": 12
            },
            {
              "lineNumber": 1033,
              "content": "throw error;",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 1015,
            "distance": 13
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\n            : content;\n    }\n\n    /**\n     * 安全なAI分析実行\n     * @private\n     */\n    private async executeAIAnalysis(prompt: string, options: any): Promise<string> {\n        try {\n            return await this.geminiClient.generateText(prompt, options);\n        } catch (error) {\n            logger.error(",
            "fullLength": 304,
            "truncatedContent": "\n            : content;\n    }\n\n    /**\n     * 安全なAI分析実行\n     * @private\n     */\n    private async executeAIAnalysis(prompt: string, options: any): Promise<string> {\n        try {\n            return await this.geminiClient.generateText(prompt, options);\n        } catch (error) {\n            logger.error(",
            "hash": "d65e54c92acae5c134de92df18a5620d",
            "keywords": [
              "分析",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n            : content;\n    }\n\n    /**\n     * 安全なAI分析実行\n     * @private\n     */\n    private async executeAIAnalysis(prompt: string, options: any): Promise<string> {\n        try {\n            return await this.geminiClient.generateText(prompt, options);\n        } catch (error) {\n            logger.error(",
            "fullLength": 304,
            "truncatedContent": "\n            : content;\n    }\n\n    /**\n     * 安全なAI分析実行\n     * @private\n     */\n    private async executeAIAnalysis(prompt: string, options: any): Promise<string> {\n        try {\n            return await this.geminiClient.generateText(prompt, options);\n        } catch (error) {\n            logger.error(",
            "hash": "d65e54c92acae5c134de92df18a5620d",
            "keywords": [
              "分析",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "executeAIAnalysis",
            "relatedMethods": [
              "executeAIAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<string>"
            ],
            "extractedTypes": [
              "string>"
            ]
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "return",
            "fallbackValue",
            "private",
            "safeContentTruncation",
            "content",
            "string",
            "maxLength",
            "number",
            "typeof",
            "length"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "ee6073ad0bd04d59d92db46d09921c56"
      },
      {
        "id": "call_40dce312",
        "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
        "fileName": "emotional-learning-integrator.ts",
        "lineNumber": 1030,
        "lineContent": "return await this.geminiClient.generateText(prompt, options);",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 1025,
              "content": "* 安全なAI分析実行",
              "indent": 5
            },
            {
              "lineNumber": 1026,
              "content": "* @private",
              "indent": 5
            },
            {
              "lineNumber": 1027,
              "content": "*/",
              "indent": 5
            },
            {
              "lineNumber": 1028,
              "content": "private async executeAIAnalysis(prompt: string, options: any): Promise<string> {",
              "indent": 4
            },
            {
              "lineNumber": 1029,
              "content": "try {",
              "indent": 8
            }
          ],
          "current": {
            "lineNumber": 1030,
            "content": "return await this.geminiClient.generateText(prompt, options);",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 1031,
              "content": "} catch (error) {",
              "indent": 8
            },
            {
              "lineNumber": 1032,
              "content": "logger.error('AI analysis failed', { error });",
              "indent": 12
            },
            {
              "lineNumber": 1033,
              "content": "throw error;",
              "indent": 12
            },
            {
              "lineNumber": 1034,
              "content": "}",
              "indent": 8
            },
            {
              "lineNumber": 1035,
              "content": "}",
              "indent": 4
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 1015,
            "distance": 15
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\n            : content;\n    }\n\n    /**\n     * 安全なAI分析実行\n     * @private\n     */\n    private async executeAIAnalysis(prompt: string, options: any): Promise<string> {\n        try {\n            return await this.geminiClient.generateText(prompt, options);\n        } catch (error) {\n            logger.error(",
            "fullLength": 304,
            "truncatedContent": "\n            : content;\n    }\n\n    /**\n     * 安全なAI分析実行\n     * @private\n     */\n    private async executeAIAnalysis(prompt: string, options: any): Promise<string> {\n        try {\n            return await this.geminiClient.generateText(prompt, options);\n        } catch (error) {\n            logger.error(",
            "hash": "d65e54c92acae5c134de92df18a5620d",
            "keywords": [
              "分析",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n            : content;\n    }\n\n    /**\n     * 安全なAI分析実行\n     * @private\n     */\n    private async executeAIAnalysis(prompt: string, options: any): Promise<string> {\n        try {\n            return await this.geminiClient.generateText(prompt, options);\n        } catch (error) {\n            logger.error(",
            "fullLength": 304,
            "truncatedContent": "\n            : content;\n    }\n\n    /**\n     * 安全なAI分析実行\n     * @private\n     */\n    private async executeAIAnalysis(prompt: string, options: any): Promise<string> {\n        try {\n            return await this.geminiClient.generateText(prompt, options);\n        } catch (error) {\n            logger.error(",
            "hash": "d65e54c92acae5c134de92df18a5620d",
            "keywords": [
              "分析",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "executeAIAnalysis",
            "relatedMethods": [
              "executeAIAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<string>"
            ],
            "extractedTypes": [
              "string>"
            ]
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "設定",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "create"
          ],
          "complexity": "low",
          "dependencies": [
            "rivate",
            "safeContentTruncation",
            "content",
            "string",
            "maxLength",
            "number",
            "typeof",
            "return",
            "length",
            "substring"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "1f2c3be98b8c6187aba21a7cb7683a06"
      },
      {
        "id": "call_75df9e80",
        "filePath": "src\\lib\\learning-journey\\index.ts",
        "fileName": "index.ts",
        "lineNumber": 1225,
        "lineContent": "const summary = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 1220,
              "content": "${truncatedContent}",
              "indent": 0
            },
            {
              "lineNumber": 1221,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1222,
              "content": "要約:",
              "indent": 0
            },
            {
              "lineNumber": 1223,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 1224,
              "content": "",
              "indent": 0
            }
          ],
          "current": {
            "lineNumber": 1225,
            "content": "const summary = await this.geminiClient.generateText(prompt, {",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 1226,
              "content": "temperature: 0.3,",
              "indent": 16
            },
            {
              "lineNumber": 1227,
              "content": "targetLength: 300",
              "indent": 16
            },
            {
              "lineNumber": 1228,
              "content": "});",
              "indent": 12
            },
            {
              "lineNumber": 1229,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1230,
              "content": "return summary.trim();",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 1189,
            "distance": 36
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
            "fullLength": 107,
            "truncatedContent": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
            "hash": "c67e2b17fa18011cda0157c8199a9f12",
            "keywords": [
              "章",
              "ストーリー",
              "キャラクター"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
            "fullLength": 107,
            "truncatedContent": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
            "hash": "c67e2b17fa18011cda0157c8199a9f12",
            "keywords": [
              "章",
              "ストーリー",
              "キャラクター"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n                : content;\n\n            const prompt = `\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n`;\n\n            const summary = await this.geminiClient.generateText(prompt, {\n                temperature: 0.3,\n                targetLength: 300\n            });\n\n            return summary.trim();\n\n        } catch (error) {\n            logger.warn(",
            "fullLength": 414,
            "truncatedContent": "\n                : content;\n\n            const prompt = `\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n`;\n\n            const summary = await this.geminiClient.generateText(prompt, {\n                temperature: 0.3,\n                targetLength: 300\n            });\n\n            return summary.trim();\n\n        } catch (error) {\n            logger.warn(",
            "hash": "a4afa55c252c54b71a25a4a5a4c07743",
            "keywords": [
              "章",
              "ストーリー",
              "キャラクター",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n                : content;\n\n            const prompt = `\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n`;\n\n            const summary = await this.geminiClient.generateText(prompt, {\n                temperature: 0.3,\n                targetLength: 300\n            });\n\n            return summary.trim();\n\n        } catch (error) {\n            logger.warn(",
            "fullLength": 414,
            "truncatedContent": "\n                : content;\n\n            const prompt = `\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n`;\n\n            const summary = await this.geminiClient.generateText(prompt, {\n                temperature: 0.3,\n                targetLength: 300\n            });\n\n            return summary.trim();\n\n        } catch (error) {\n            logger.warn(",
            "hash": "a4afa55c252c54b71a25a4a5a4c07743",
            "keywords": [
              "章",
              "ストーリー",
              "キャラクター",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "variable_assignment",
            "variableName": "prompt",
            "content": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
            "fullLength": 107,
            "truncatedContent": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
            "hash": "c67e2b17fa18011cda0157c8199a9f12"
          },
          {
            "type": "template_literal",
            "content": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
            "fullLength": 107,
            "truncatedContent": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
            "hash": "c67e2b17fa18011cda0157c8199a9f12",
            "hasVariables": true,
            "variableCount": 1
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "private",
            "async",
            "generateChapterSummaryWithFallback",
            "content",
            "string",
            "Promise",
            "try",
            "const",
            "truncatedContent",
            "length"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "e522cf44a1b7069e827bc13239744829"
      },
      {
        "id": "call_3051cf33",
        "filePath": "src\\lib\\learning-journey\\index.ts",
        "fileName": "index.ts",
        "lineNumber": 1611,
        "lineContent": "get prompt(): PromptGenerator {",
        "matchedPattern": "(\\w+\\.)?prompt\\s*\\(",
        "callMethod": "prompt",
        "fullMatch": "prompt(",
        "context": {
          "before": [
            {
              "lineNumber": 1606,
              "content": "throw new Error('ContextManager is not functional');",
              "indent": 12
            },
            {
              "lineNumber": 1607,
              "content": "}",
              "indent": 8
            },
            {
              "lineNumber": 1608,
              "content": "return this.contextManager;",
              "indent": 8
            },
            {
              "lineNumber": 1609,
              "content": "}",
              "indent": 4
            },
            {
              "lineNumber": 1610,
              "content": "",
              "indent": 0
            }
          ],
          "current": {
            "lineNumber": 1611,
            "content": "get prompt(): PromptGenerator {",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 1612,
              "content": "this.ensureInitialized();",
              "indent": 8
            },
            {
              "lineNumber": 1613,
              "content": "if (!this.componentStatus.promptGenerator.functional) {",
              "indent": 8
            },
            {
              "lineNumber": 1614,
              "content": "throw new Error('PromptGenerator is not functional');",
              "indent": 12
            },
            {
              "lineNumber": 1615,
              "content": "}",
              "indent": 8
            },
            {
              "lineNumber": 1616,
              "content": "return this.promptGenerator;",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 1605,
            "distance": 6
          }
        },
        "prompts": [],
        "expectedOutputs": [],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [],
          "complexity": "low",
          "dependencies": [
            "this",
            "ensureInitialized",
            "componentStatus",
            "emotionalIntegrator",
            "functional",
            "throw",
            "new",
            "Error",
            "EmotionalLearningIntegrator",
            "not"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "4c5da00460f728b091d8850f5023eaf9"
      },
      {
        "id": "call_75df9e80",
        "filePath": "src\\lib\\learning-journey\\index.ts",
        "fileName": "index.ts",
        "lineNumber": 1225,
        "lineContent": "const summary = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 1220,
              "content": "${truncatedContent}",
              "indent": 0
            },
            {
              "lineNumber": 1221,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1222,
              "content": "要約:",
              "indent": 0
            },
            {
              "lineNumber": 1223,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 1224,
              "content": "",
              "indent": 0
            }
          ],
          "current": {
            "lineNumber": 1225,
            "content": "const summary = await this.geminiClient.generateText(prompt, {",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 1226,
              "content": "temperature: 0.3,",
              "indent": 16
            },
            {
              "lineNumber": 1227,
              "content": "targetLength: 300",
              "indent": 16
            },
            {
              "lineNumber": 1228,
              "content": "});",
              "indent": 12
            },
            {
              "lineNumber": 1229,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1230,
              "content": "return summary.trim();",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 1189,
            "distance": 36
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
            "fullLength": 107,
            "truncatedContent": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
            "hash": "c67e2b17fa18011cda0157c8199a9f12",
            "keywords": [
              "章",
              "ストーリー",
              "キャラクター"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
            "fullLength": 107,
            "truncatedContent": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
            "hash": "c67e2b17fa18011cda0157c8199a9f12",
            "keywords": [
              "章",
              "ストーリー",
              "キャラクター"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n                : content;\n\n            const prompt = `\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n`;\n\n            const summary = await this.geminiClient.generateText(prompt, {\n                temperature: 0.3,\n                targetLength: 300\n            });\n\n            return summary.trim();\n\n        } catch (error) {\n            logger.warn(",
            "fullLength": 414,
            "truncatedContent": "\n                : content;\n\n            const prompt = `\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n`;\n\n            const summary = await this.geminiClient.generateText(prompt, {\n                temperature: 0.3,\n                targetLength: 300\n            });\n\n            return summary.trim();\n\n        } catch (error) {\n            logger.warn(",
            "hash": "a4afa55c252c54b71a25a4a5a4c07743",
            "keywords": [
              "章",
              "ストーリー",
              "キャラクター",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n                : content;\n\n            const prompt = `\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n`;\n\n            const summary = await this.geminiClient.generateText(prompt, {\n                temperature: 0.3,\n                targetLength: 300\n            });\n\n            return summary.trim();\n\n        } catch (error) {\n            logger.warn(",
            "fullLength": 414,
            "truncatedContent": "\n                : content;\n\n            const prompt = `\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n`;\n\n            const summary = await this.geminiClient.generateText(prompt, {\n                temperature: 0.3,\n                targetLength: 300\n            });\n\n            return summary.trim();\n\n        } catch (error) {\n            logger.warn(",
            "hash": "a4afa55c252c54b71a25a4a5a4c07743",
            "keywords": [
              "章",
              "ストーリー",
              "キャラクター",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "variable_assignment",
            "variableName": "prompt",
            "content": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
            "fullLength": 107,
            "truncatedContent": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
            "hash": "c67e2b17fa18011cda0157c8199a9f12"
          },
          {
            "type": "template_literal",
            "content": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
            "fullLength": 107,
            "truncatedContent": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
            "hash": "c67e2b17fa18011cda0157c8199a9f12",
            "hasVariables": true,
            "variableCount": 1
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "private",
            "async",
            "generateChapterSummaryWithFallback",
            "content",
            "string",
            "Promise",
            "try",
            "const",
            "truncatedContent",
            "length"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "e522cf44a1b7069e827bc13239744829"
      },
      {
        "id": "call_edef0302",
        "filePath": "src\\lib\\learning-journey\\index.ts",
        "fileName": "index.ts",
        "lineNumber": 1225,
        "lineContent": "const summary = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 1220,
              "content": "${truncatedContent}",
              "indent": 0
            },
            {
              "lineNumber": 1221,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1222,
              "content": "要約:",
              "indent": 0
            },
            {
              "lineNumber": 1223,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 1224,
              "content": "",
              "indent": 0
            }
          ],
          "current": {
            "lineNumber": 1225,
            "content": "const summary = await this.geminiClient.generateText(prompt, {",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 1226,
              "content": "temperature: 0.3,",
              "indent": 16
            },
            {
              "lineNumber": 1227,
              "content": "targetLength: 300",
              "indent": 16
            },
            {
              "lineNumber": 1228,
              "content": "});",
              "indent": 12
            },
            {
              "lineNumber": 1229,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 1230,
              "content": "return summary.trim();",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 1189,
            "distance": 36
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
            "fullLength": 107,
            "truncatedContent": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
            "hash": "c67e2b17fa18011cda0157c8199a9f12",
            "keywords": [
              "章",
              "ストーリー",
              "キャラクター"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
            "fullLength": 107,
            "truncatedContent": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
            "hash": "c67e2b17fa18011cda0157c8199a9f12",
            "keywords": [
              "章",
              "ストーリー",
              "キャラクター"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n                : content;\n\n            const prompt = `\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n`;\n\n            const summary = await this.geminiClient.generateText(prompt, {\n                temperature: 0.3,\n                targetLength: 300\n            });\n\n            return summary.trim();\n\n        } catch (error) {\n            logger.warn(",
            "fullLength": 414,
            "truncatedContent": "\n                : content;\n\n            const prompt = `\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n`;\n\n            const summary = await this.geminiClient.generateText(prompt, {\n                temperature: 0.3,\n                targetLength: 300\n            });\n\n            return summary.trim();\n\n        } catch (error) {\n            logger.warn(",
            "hash": "a4afa55c252c54b71a25a4a5a4c07743",
            "keywords": [
              "章",
              "ストーリー",
              "キャラクター",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\n                : content;\n\n            const prompt = `\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n`;\n\n            const summary = await this.geminiClient.generateText(prompt, {\n                temperature: 0.3,\n                targetLength: 300\n            });\n\n            return summary.trim();\n\n        } catch (error) {\n            logger.warn(",
            "fullLength": 414,
            "truncatedContent": "\n                : content;\n\n            const prompt = `\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n`;\n\n            const summary = await this.geminiClient.generateText(prompt, {\n                temperature: 0.3,\n                targetLength: 300\n            });\n\n            return summary.trim();\n\n        } catch (error) {\n            logger.warn(",
            "hash": "a4afa55c252c54b71a25a4a5a4c07743",
            "keywords": [
              "章",
              "ストーリー",
              "キャラクター",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "variable_assignment",
            "variableName": "prompt",
            "content": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
            "fullLength": 107,
            "truncatedContent": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
            "hash": "c67e2b17fa18011cda0157c8199a9f12"
          },
          {
            "type": "template_literal",
            "content": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
            "fullLength": 107,
            "truncatedContent": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
            "hash": "c67e2b17fa18011cda0157c8199a9f12",
            "hasVariables": true,
            "variableCount": 1
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.3",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "シーン",
            "設定",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "private",
            "async",
            "generateChapterSummaryWithFallback",
            "content",
            "string",
            "Promise",
            "try",
            "const",
            "truncatedContent",
            "length"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "b467ce09cf2e3d898b3f99ca00a95437"
      },
      {
        "id": "call_4be62073",
        "filePath": "src\\lib\\memory\\text-analyzer-service.ts",
        "fileName": "text-analyzer-service.ts",
        "lineNumber": 335,
        "lineContent": "const response = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 330,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 331,
              "content": "存在しない情報は省略してもかまいません。",
              "indent": 0
            },
            {
              "lineNumber": 332,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 333,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 334,
              "content": "try {",
              "indent": 4
            }
          ],
          "current": {
            "lineNumber": 335,
            "content": "const response = await this.geminiClient.generateText(prompt, {",
            "indent": 6
          },
          "after": [
            {
              "lineNumber": 336,
              "content": "temperature: 0.1,",
              "indent": 8
            },
            {
              "lineNumber": 337,
              "content": "targetLength: 500 * characterNames.length",
              "indent": 8
            },
            {
              "lineNumber": 338,
              "content": "});",
              "indent": 6
            },
            {
              "lineNumber": 339,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 340,
              "content": "// JSONをパース",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 297,
            "distance": 38
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "response_structure",
            "fields": [
              "indexOf",
              "lastIndexOf",
              "substring"
            ],
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "characterNames",
            "join",
            "truncatedText",
            "JSON",
            "name",
            "mood",
            "development",
            "relationships",
            "character",
            "relation"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "2eea1a87da18d34dcf0d356d58f5ca52"
      },
      {
        "id": "call_4be62073",
        "filePath": "src\\lib\\memory\\text-analyzer-service.ts",
        "fileName": "text-analyzer-service.ts",
        "lineNumber": 335,
        "lineContent": "const response = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 330,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 331,
              "content": "存在しない情報は省略してもかまいません。",
              "indent": 0
            },
            {
              "lineNumber": 332,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 333,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 334,
              "content": "try {",
              "indent": 4
            }
          ],
          "current": {
            "lineNumber": 335,
            "content": "const response = await this.geminiClient.generateText(prompt, {",
            "indent": 6
          },
          "after": [
            {
              "lineNumber": 336,
              "content": "temperature: 0.1,",
              "indent": 8
            },
            {
              "lineNumber": 337,
              "content": "targetLength: 500 * characterNames.length",
              "indent": 8
            },
            {
              "lineNumber": 338,
              "content": "});",
              "indent": 6
            },
            {
              "lineNumber": 339,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 340,
              "content": "// JSONをパース",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 297,
            "distance": 38
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "response_structure",
            "fields": [
              "indexOf",
              "lastIndexOf",
              "substring"
            ],
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "characterNames",
            "join",
            "truncatedText",
            "JSON",
            "name",
            "mood",
            "development",
            "relationships",
            "character",
            "relation"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "2eea1a87da18d34dcf0d356d58f5ca52"
      },
      {
        "id": "call_725f8327",
        "filePath": "src\\lib\\memory\\text-analyzer-service.ts",
        "fileName": "text-analyzer-service.ts",
        "lineNumber": 335,
        "lineContent": "const response = await this.geminiClient.generateText(prompt, {",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 330,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 331,
              "content": "存在しない情報は省略してもかまいません。",
              "indent": 0
            },
            {
              "lineNumber": 332,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 333,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 334,
              "content": "try {",
              "indent": 4
            }
          ],
          "current": {
            "lineNumber": 335,
            "content": "const response = await this.geminiClient.generateText(prompt, {",
            "indent": 6
          },
          "after": [
            {
              "lineNumber": 336,
              "content": "temperature: 0.1,",
              "indent": 8
            },
            {
              "lineNumber": 337,
              "content": "targetLength: 500 * characterNames.length",
              "indent": 8
            },
            {
              "lineNumber": 338,
              "content": "});",
              "indent": 6
            },
            {
              "lineNumber": 339,
              "content": "",
              "indent": 7
            },
            {
              "lineNumber": 340,
              "content": "// JSONをパース",
              "indent": 6
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 297,
            "distance": 38
          }
        },
        "prompts": [],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "response_structure",
            "fields": [
              "indexOf",
              "lastIndexOf",
              "substring"
            ],
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.1",
            "source": "object_literal",
            "confidence": "medium"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [],
          "storyElements": [],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "characterNames",
            "join",
            "truncatedText",
            "JSON",
            "name",
            "mood",
            "development",
            "relationships",
            "character",
            "relation"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "2e435325b7e600cddba0bcb129ba0164"
      },
      {
        "id": "call_d18c12a2",
        "filePath": "src\\lib\\plot\\checker.ts",
        "fileName": "checker.ts",
        "lineNumber": 768,
        "lineContent": "this.geminiClient.generateText(prompt, { temperature: 0.2 })",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 763,
              "content": "]",
              "indent": 2
            },
            {
              "lineNumber": 764,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 765,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 766,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 767,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 768,
            "content": "this.geminiClient.generateText(prompt, { temperature: 0.2 })",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 769,
              "content": ");",
              "indent": 12
            },
            {
              "lineNumber": 770,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 771,
              "content": "const analysis = JsonParser.parseFromAIResponse<{",
              "indent": 12
            },
            {
              "lineNumber": 772,
              "content": "continuityIssues: Array<{",
              "indent": 16
            },
            {
              "lineNumber": 773,
              "content": "description: string;",
              "indent": 20
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 714,
            "distance": 54
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\n    }\n  ]\n}\n`;\n\n            const response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { temperature: 0.2 })\n            );\n\n            const analysis = JsonParser.parseFromAIResponse<{\n                continuityIssues: Array<{\n                    description: string;\n                    severity: string;\n                    suggestion: string;\n                    context?: string;\n                }>;\n            }>(response, { continuityIssues: [] });\n\n            return (analysis.continuityIssues || []).map(issue => ({\n                type: ",
            "fullLength": 606,
            "truncatedContent": "\n    }\n  ]\n}\n`;\n\n            const response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { temperature: 0.2 })\n            );\n\n            const analysis = JsonParser.parseFromAIResponse<{\n                continuityIssues: Array<{\n                    description: string;\n                    severity: string;\n                    suggestion: string;\n                    context?: string;\n                }>;\n            }>(response, { continuityIssues: [] });\n\n            return (analysis.continuityIssues || []).map(issue => ({\n                type: ",
            "hash": "b257710dda61b24e95486444819036c6",
            "keywords": [
              "generate",
              "description"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.2",
            "rawValue": "temperature: 0.2",
            "confidence": "high"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "truncatedPrevious",
            "chapterNumber",
            "truncatedCurrent",
            "JSON",
            "continuityIssues",
            "description",
            "severity",
            "HIGH",
            "MEDIUM",
            "LOW"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "8246c176cbadbc96db9f218d1535c290"
      },
      {
        "id": "call_d18c12a2",
        "filePath": "src\\lib\\plot\\checker.ts",
        "fileName": "checker.ts",
        "lineNumber": 768,
        "lineContent": "this.geminiClient.generateText(prompt, { temperature: 0.2 })",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 763,
              "content": "]",
              "indent": 2
            },
            {
              "lineNumber": 764,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 765,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 766,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 767,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 768,
            "content": "this.geminiClient.generateText(prompt, { temperature: 0.2 })",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 769,
              "content": ");",
              "indent": 12
            },
            {
              "lineNumber": 770,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 771,
              "content": "const analysis = JsonParser.parseFromAIResponse<{",
              "indent": 12
            },
            {
              "lineNumber": 772,
              "content": "continuityIssues: Array<{",
              "indent": 16
            },
            {
              "lineNumber": 773,
              "content": "description: string;",
              "indent": 20
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 714,
            "distance": 54
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\n    }\n  ]\n}\n`;\n\n            const response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { temperature: 0.2 })\n            );\n\n            const analysis = JsonParser.parseFromAIResponse<{\n                continuityIssues: Array<{\n                    description: string;\n                    severity: string;\n                    suggestion: string;\n                    context?: string;\n                }>;\n            }>(response, { continuityIssues: [] });\n\n            return (analysis.continuityIssues || []).map(issue => ({\n                type: ",
            "fullLength": 606,
            "truncatedContent": "\n    }\n  ]\n}\n`;\n\n            const response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { temperature: 0.2 })\n            );\n\n            const analysis = JsonParser.parseFromAIResponse<{\n                continuityIssues: Array<{\n                    description: string;\n                    severity: string;\n                    suggestion: string;\n                    context?: string;\n                }>;\n            }>(response, { continuityIssues: [] });\n\n            return (analysis.continuityIssues || []).map(issue => ({\n                type: ",
            "hash": "b257710dda61b24e95486444819036c6",
            "keywords": [
              "generate",
              "description"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.2",
            "rawValue": "temperature: 0.2",
            "confidence": "high"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "truncatedPrevious",
            "chapterNumber",
            "truncatedCurrent",
            "JSON",
            "continuityIssues",
            "description",
            "severity",
            "HIGH",
            "MEDIUM",
            "LOW"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "8246c176cbadbc96db9f218d1535c290"
      },
      {
        "id": "call_b525b719",
        "filePath": "src\\lib\\plot\\checker.ts",
        "fileName": "checker.ts",
        "lineNumber": 768,
        "lineContent": "this.geminiClient.generateText(prompt, { temperature: 0.2 })",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 763,
              "content": "]",
              "indent": 2
            },
            {
              "lineNumber": 764,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 765,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 766,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 767,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 768,
            "content": "this.geminiClient.generateText(prompt, { temperature: 0.2 })",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 769,
              "content": ");",
              "indent": 12
            },
            {
              "lineNumber": 770,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 771,
              "content": "const analysis = JsonParser.parseFromAIResponse<{",
              "indent": 12
            },
            {
              "lineNumber": 772,
              "content": "continuityIssues: Array<{",
              "indent": 16
            },
            {
              "lineNumber": 773,
              "content": "description: string;",
              "indent": 20
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 714,
            "distance": 54
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\n    }\n  ]\n}\n`;\n\n            const response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { temperature: 0.2 })\n            );\n\n            const analysis = JsonParser.parseFromAIResponse<{\n                continuityIssues: Array<{\n                    description: string;\n                    severity: string;\n                    suggestion: string;\n                    context?: string;\n                }>;\n            }>(response, { continuityIssues: [] });\n\n            return (analysis.continuityIssues || []).map(issue => ({\n                type: ",
            "fullLength": 606,
            "truncatedContent": "\n    }\n  ]\n}\n`;\n\n            const response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { temperature: 0.2 })\n            );\n\n            const analysis = JsonParser.parseFromAIResponse<{\n                continuityIssues: Array<{\n                    description: string;\n                    severity: string;\n                    suggestion: string;\n                    context?: string;\n                }>;\n            }>(response, { continuityIssues: [] });\n\n            return (analysis.continuityIssues || []).map(issue => ({\n                type: ",
            "hash": "b257710dda61b24e95486444819036c6",
            "keywords": [
              "generate",
              "description"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {
          "temperature": {
            "value": "0.2",
            "rawValue": "temperature: 0.2",
            "confidence": "high"
          }
        },
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "truncatedPrevious",
            "chapterNumber",
            "truncatedCurrent",
            "JSON",
            "continuityIssues",
            "description",
            "severity",
            "HIGH",
            "MEDIUM",
            "LOW"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "6f49387e9708cce0adc5e9c78dd09201"
      },
      {
        "id": "call_798d91ff",
        "filePath": "src\\lib\\plot\\section\\index.ts",
        "fileName": "index.ts",
        "lineNumber": 397,
        "lineContent": "await this.geminiClient.generateText(testPrompt);",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 392,
              "content": "this.geminiClient = new GeminiClient();",
              "indent": 12
            },
            {
              "lineNumber": 393,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 394,
              "content": "// 接続テスト（簡易）",
              "indent": 12
            },
            {
              "lineNumber": 395,
              "content": "const testPrompt = 'Test connection - respond with \"OK\"';",
              "indent": 12
            },
            {
              "lineNumber": 396,
              "content": "try {",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 397,
            "content": "await this.geminiClient.generateText(testPrompt);",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 398,
              "content": "",
              "indent": 16
            },
            {
              "lineNumber": 399,
              "content": "this.updateComponentStatus('geminiClient', {",
              "indent": 16
            },
            {
              "lineNumber": 400,
              "content": "initialized: true,",
              "indent": 20
            },
            {
              "lineNumber": 401,
              "content": "healthy: true,",
              "indent": 20
            },
            {
              "lineNumber": 402,
              "content": "lastActivity: new Date().toISOString(),",
              "indent": 20
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 370,
            "distance": 27
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\n            try {\n                await this.geminiClient.generateText(testPrompt);\n                \n                this.updateComponentStatus(",
            "fullLength": 146,
            "truncatedContent": ";\n            try {\n                await this.geminiClient.generateText(testPrompt);\n                \n                this.updateComponentStatus(",
            "hash": "1798dd15179209a5b6027c9c25fd2460",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "testPrompt",
            "relatedMethods": [
              "testPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<void>"
            ],
            "extractedTypes": [
              "void>"
            ]
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "Failed",
            "initialize",
            "unified",
            "memory",
            "system",
            "throw",
            "error",
            "GeminiClient",
            "private",
            "async"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "47f4de94faac73859142e538859b1e95"
      },
      {
        "id": "call_798d91ff",
        "filePath": "src\\lib\\plot\\section\\index.ts",
        "fileName": "index.ts",
        "lineNumber": 397,
        "lineContent": "await this.geminiClient.generateText(testPrompt);",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 392,
              "content": "this.geminiClient = new GeminiClient();",
              "indent": 12
            },
            {
              "lineNumber": 393,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 394,
              "content": "// 接続テスト（簡易）",
              "indent": 12
            },
            {
              "lineNumber": 395,
              "content": "const testPrompt = 'Test connection - respond with \"OK\"';",
              "indent": 12
            },
            {
              "lineNumber": 396,
              "content": "try {",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 397,
            "content": "await this.geminiClient.generateText(testPrompt);",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 398,
              "content": "",
              "indent": 16
            },
            {
              "lineNumber": 399,
              "content": "this.updateComponentStatus('geminiClient', {",
              "indent": 16
            },
            {
              "lineNumber": 400,
              "content": "initialized: true,",
              "indent": 20
            },
            {
              "lineNumber": 401,
              "content": "healthy: true,",
              "indent": 20
            },
            {
              "lineNumber": 402,
              "content": "lastActivity: new Date().toISOString(),",
              "indent": 20
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 370,
            "distance": 27
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\n            try {\n                await this.geminiClient.generateText(testPrompt);\n                \n                this.updateComponentStatus(",
            "fullLength": 146,
            "truncatedContent": ";\n            try {\n                await this.geminiClient.generateText(testPrompt);\n                \n                this.updateComponentStatus(",
            "hash": "1798dd15179209a5b6027c9c25fd2460",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "testPrompt",
            "relatedMethods": [
              "testPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<void>"
            ],
            "extractedTypes": [
              "void>"
            ]
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "Failed",
            "initialize",
            "unified",
            "memory",
            "system",
            "throw",
            "error",
            "GeminiClient",
            "private",
            "async"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "47f4de94faac73859142e538859b1e95"
      },
      {
        "id": "call_25985289",
        "filePath": "src\\lib\\plot\\section\\index.ts",
        "fileName": "index.ts",
        "lineNumber": 397,
        "lineContent": "await this.geminiClient.generateText(testPrompt);",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 392,
              "content": "this.geminiClient = new GeminiClient();",
              "indent": 12
            },
            {
              "lineNumber": 393,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 394,
              "content": "// 接続テスト（簡易）",
              "indent": 12
            },
            {
              "lineNumber": 395,
              "content": "const testPrompt = 'Test connection - respond with \"OK\"';",
              "indent": 12
            },
            {
              "lineNumber": 396,
              "content": "try {",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 397,
            "content": "await this.geminiClient.generateText(testPrompt);",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 398,
              "content": "",
              "indent": 16
            },
            {
              "lineNumber": 399,
              "content": "this.updateComponentStatus('geminiClient', {",
              "indent": 16
            },
            {
              "lineNumber": 400,
              "content": "initialized: true,",
              "indent": 20
            },
            {
              "lineNumber": 401,
              "content": "healthy: true,",
              "indent": 20
            },
            {
              "lineNumber": 402,
              "content": "lastActivity: new Date().toISOString(),",
              "indent": 20
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 370,
            "distance": 27
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\n            try {\n                await this.geminiClient.generateText(testPrompt);\n                \n                this.updateComponentStatus(",
            "fullLength": 146,
            "truncatedContent": ";\n            try {\n                await this.geminiClient.generateText(testPrompt);\n                \n                this.updateComponentStatus(",
            "hash": "1798dd15179209a5b6027c9c25fd2460",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "testPrompt",
            "relatedMethods": [
              "testPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<void>"
            ],
            "extractedTypes": [
              "void>"
            ]
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "nitialize",
            "unified",
            "memory",
            "system",
            "throw",
            "error",
            "GeminiClient",
            "private",
            "async",
            "initializeGeminiClient"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "8561a1d0916bc4ba6a610a8d9e0a2d7e"
      },
      {
        "id": "call_b821aa55",
        "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
        "fileName": "section-analyzer.ts",
        "lineNumber": 632,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 627,
              "content": "const prompt = this.buildCoherenceAnalysisPrompt(section, chapters, memoryContext);",
              "indent": 8
            },
            {
              "lineNumber": 628,
              "content": "let response: string = '';",
              "indent": 8
            },
            {
              "lineNumber": 629,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 630,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 631,
              "content": "response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 632,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 633,
              "content": ");",
              "indent": 12
            },
            {
              "lineNumber": 634,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 635,
              "content": "const analysis = JSON.parse(response);",
              "indent": 12
            },
            {
              "lineNumber": 636,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 637,
              "content": "// 基本的な検証",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 609,
            "distance": 23
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "Successfully analyzed coherence for section ${section.structure.title}",
            "fullLength": 70,
            "truncatedContent": "Successfully analyzed coherence for section ${section.structure.title}",
            "hash": "2929b8486fcf2321b6354ce111e12af9",
            "keywords": [
              "analyze"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.overallScore === ",
            "fullLength": 332,
            "truncatedContent": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.overallScore === ",
            "hash": "d247d541e2d0d3f6e93d8f83a1e4253b",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": " &&\n                Array.isArray(analysis.problematicAreas) &&\n                Array.isArray(analysis.improvementSuggestions)) {\n\n                logger.info(`Successfully analyzed coherence for section ${section.structure.title}`);\n                return analysis;\n            }\n\n            logger.warn(",
            "fullLength": 306,
            "truncatedContent": " &&\n                Array.isArray(analysis.problematicAreas) &&\n                Array.isArray(analysis.improvementSuggestions)) {\n\n                logger.info(`Successfully analyzed coherence for section ${section.structure.title}`);\n                return analysis;\n            }\n\n            logger.warn(",
            "hash": "320f749e0a9e114bb54363e84cb4b670",
            "keywords": [
              "analyze"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "performAICoherenceAnalysis",
            "relatedMethods": [
              "performAICoherenceAnalysis",
              "CoherenceAnalysis",
              "buildCoherenceAnalysisPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<CoherenceAnalysis>"
            ],
            "extractedTypes": [
              "CoherenceAnalysis>"
            ]
          },
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "plot",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "analyze",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "private",
            "async",
            "performAICoherenceAnalysis",
            "section",
            "SectionPlot",
            "chapters",
            "Array",
            "chapterNumber",
            "number",
            "title"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "610dbb0aad4545092105ae66532c00f1"
      },
      {
        "id": "call_59aa5683",
        "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
        "fileName": "section-analyzer.ts",
        "lineNumber": 671,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 666,
              "content": "const prompt = this.buildObjectiveAnalysisPrompt(section, chapters, analysisContext);",
              "indent": 8
            },
            {
              "lineNumber": 667,
              "content": "let response: string = '';",
              "indent": 8
            },
            {
              "lineNumber": 668,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 669,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 670,
              "content": "response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 671,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 672,
              "content": ");",
              "indent": 12
            },
            {
              "lineNumber": 673,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 674,
              "content": "const analysis = JSON.parse(response);",
              "indent": 12
            },
            {
              "lineNumber": 675,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 676,
              "content": "// 基本的な検証",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 649,
            "distance": 22
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.cognitiveProgress === ",
            "fullLength": 337,
            "truncatedContent": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.cognitiveProgress === ",
            "hash": "77a50a6e1e418df2a63a9da228f0a6c7",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "performAIObjectiveAnalysis",
            "relatedMethods": [
              "performAIObjectiveAnalysis",
              "buildObjectiveAnalysisPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<ObjectiveProgress>"
            ],
            "extractedTypes": [
              "ObjectiveProgress>"
            ]
          },
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "plot",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "private",
            "async",
            "performAIObjectiveAnalysis",
            "section",
            "SectionPlot",
            "chapters",
            "Array",
            "chapterNumber",
            "number",
            "title"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "610dbb0aad4545092105ae66532c00f1"
      },
      {
        "id": "call_2c81c351",
        "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
        "fileName": "section-analyzer.ts",
        "lineNumber": 717,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 712,
              "content": "const prompt = this.buildEmotionalAnalysisPrompt(section, chapters, emotionalContext);",
              "indent": 8
            },
            {
              "lineNumber": 713,
              "content": "let response: string = '';",
              "indent": 8
            },
            {
              "lineNumber": 714,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 715,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 716,
              "content": "response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 717,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 718,
              "content": ");",
              "indent": 12
            },
            {
              "lineNumber": 719,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 720,
              "content": "const analysis = JSON.parse(response);",
              "indent": 12
            },
            {
              "lineNumber": 721,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 722,
              "content": "// 基本的な検証",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 695,
            "distance": 22
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.overallRealization === ",
            "fullLength": 338,
            "truncatedContent": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.overallRealization === ",
            "hash": "f58ee330e823f27e3e808879b9ef4651",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "performAIEmotionalAnalysis",
            "relatedMethods": [
              "performAIEmotionalAnalysis",
              "buildEmotionalAnalysisPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<EmotionalArcProgress>"
            ],
            "extractedTypes": [
              "EmotionalArcProgress>"
            ]
          },
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "plot",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "private",
            "async",
            "performAIEmotionalAnalysis",
            "section",
            "SectionPlot",
            "chapters",
            "Array",
            "chapterNumber",
            "number",
            "title"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "610dbb0aad4545092105ae66532c00f1"
      },
      {
        "id": "call_71c3a3c1",
        "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
        "fileName": "section-analyzer.ts",
        "lineNumber": 773,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 768,
              "content": ");",
              "indent": 8
            },
            {
              "lineNumber": 769,
              "content": "let response: string = '';",
              "indent": 8
            },
            {
              "lineNumber": 770,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 771,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 772,
              "content": "response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 773,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 774,
              "content": ");",
              "indent": 12
            },
            {
              "lineNumber": 775,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 776,
              "content": "const suggestions = JSON.parse(response);",
              "indent": 12
            },
            {
              "lineNumber": 777,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 778,
              "content": "// 基本的な検証",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 743,
            "distance": 30
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}",
            "fullLength": 107,
            "truncatedContent": "Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}",
            "hash": "6af57150f3e5183b6af0cdc5d08770db",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const suggestions = JSON.parse(response);\n\n            // 基本的な検証\n            if (Array.isArray(suggestions)) {\n                logger.info(`Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}`);\n                return suggestions;\n            }\n\n            logger.warn(",
            "fullLength": 519,
            "truncatedContent": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const suggestions = JSON.parse(response);\n\n            // 基本的な検証\n            if (Array.isArray(suggestions)) {\n                logger.info(`Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}`);\n                return suggestions;\n            }\n\n            logger.warn(",
            "hash": "dde5c5e52719e86afd8e56d8d50a49b9",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", { response });\n            return this.generateDefaultImprovementSuggestions(section, coherenceAnalysis, objectiveProgress);\n        } catch (parseError) {\n            logger.error(",
            "fullLength": 183,
            "truncatedContent": ", { response });\n            return this.generateDefaultImprovementSuggestions(section, coherenceAnalysis, objectiveProgress);\n        } catch (parseError) {\n            logger.error(",
            "hash": "e3ce1269b1e81c40b431ecc491bd3c60",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": "Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}",
            "fullLength": 107,
            "truncatedContent": "Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}",
            "hash": "6af57150f3e5183b6af0cdc5d08770db",
            "hasVariables": true,
            "variableCount": 2
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildImprovementAnalysisPrompt",
            "relatedMethods": [
              "buildImprovementAnalysisPrompt",
              "coherenceAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<ImprovementSuggestion[]>"
            ],
            "extractedTypes": [
              "ImprovementSuggestion[]>"
            ]
          },
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "ObjectiveProgress",
            "emotionalArcProgress",
            "EmotionalArcProgress",
            "improvementContext",
            "any",
            "Promise",
            "ImprovementSuggestion",
            "const",
            "prompt",
            "this"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "37334ebbe2a95023a8a3a4444b1b7a0c"
      },
      {
        "id": "call_b821aa55",
        "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
        "fileName": "section-analyzer.ts",
        "lineNumber": 632,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 627,
              "content": "const prompt = this.buildCoherenceAnalysisPrompt(section, chapters, memoryContext);",
              "indent": 8
            },
            {
              "lineNumber": 628,
              "content": "let response: string = '';",
              "indent": 8
            },
            {
              "lineNumber": 629,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 630,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 631,
              "content": "response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 632,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 633,
              "content": ");",
              "indent": 12
            },
            {
              "lineNumber": 634,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 635,
              "content": "const analysis = JSON.parse(response);",
              "indent": 12
            },
            {
              "lineNumber": 636,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 637,
              "content": "// 基本的な検証",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 609,
            "distance": 23
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "Successfully analyzed coherence for section ${section.structure.title}",
            "fullLength": 70,
            "truncatedContent": "Successfully analyzed coherence for section ${section.structure.title}",
            "hash": "2929b8486fcf2321b6354ce111e12af9",
            "keywords": [
              "analyze"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.overallScore === ",
            "fullLength": 332,
            "truncatedContent": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.overallScore === ",
            "hash": "d247d541e2d0d3f6e93d8f83a1e4253b",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": " &&\n                Array.isArray(analysis.problematicAreas) &&\n                Array.isArray(analysis.improvementSuggestions)) {\n\n                logger.info(`Successfully analyzed coherence for section ${section.structure.title}`);\n                return analysis;\n            }\n\n            logger.warn(",
            "fullLength": 306,
            "truncatedContent": " &&\n                Array.isArray(analysis.problematicAreas) &&\n                Array.isArray(analysis.improvementSuggestions)) {\n\n                logger.info(`Successfully analyzed coherence for section ${section.structure.title}`);\n                return analysis;\n            }\n\n            logger.warn(",
            "hash": "320f749e0a9e114bb54363e84cb4b670",
            "keywords": [
              "analyze"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "performAICoherenceAnalysis",
            "relatedMethods": [
              "performAICoherenceAnalysis",
              "CoherenceAnalysis",
              "buildCoherenceAnalysisPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<CoherenceAnalysis>"
            ],
            "extractedTypes": [
              "CoherenceAnalysis>"
            ]
          },
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "plot",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "analyze",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "private",
            "async",
            "performAICoherenceAnalysis",
            "section",
            "SectionPlot",
            "chapters",
            "Array",
            "chapterNumber",
            "number",
            "title"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "610dbb0aad4545092105ae66532c00f1"
      },
      {
        "id": "call_59aa5683",
        "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
        "fileName": "section-analyzer.ts",
        "lineNumber": 671,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 666,
              "content": "const prompt = this.buildObjectiveAnalysisPrompt(section, chapters, analysisContext);",
              "indent": 8
            },
            {
              "lineNumber": 667,
              "content": "let response: string = '';",
              "indent": 8
            },
            {
              "lineNumber": 668,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 669,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 670,
              "content": "response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 671,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 672,
              "content": ");",
              "indent": 12
            },
            {
              "lineNumber": 673,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 674,
              "content": "const analysis = JSON.parse(response);",
              "indent": 12
            },
            {
              "lineNumber": 675,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 676,
              "content": "// 基本的な検証",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 649,
            "distance": 22
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.cognitiveProgress === ",
            "fullLength": 337,
            "truncatedContent": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.cognitiveProgress === ",
            "hash": "77a50a6e1e418df2a63a9da228f0a6c7",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "performAIObjectiveAnalysis",
            "relatedMethods": [
              "performAIObjectiveAnalysis",
              "buildObjectiveAnalysisPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<ObjectiveProgress>"
            ],
            "extractedTypes": [
              "ObjectiveProgress>"
            ]
          },
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "plot",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "private",
            "async",
            "performAIObjectiveAnalysis",
            "section",
            "SectionPlot",
            "chapters",
            "Array",
            "chapterNumber",
            "number",
            "title"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "610dbb0aad4545092105ae66532c00f1"
      },
      {
        "id": "call_2c81c351",
        "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
        "fileName": "section-analyzer.ts",
        "lineNumber": 717,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 712,
              "content": "const prompt = this.buildEmotionalAnalysisPrompt(section, chapters, emotionalContext);",
              "indent": 8
            },
            {
              "lineNumber": 713,
              "content": "let response: string = '';",
              "indent": 8
            },
            {
              "lineNumber": 714,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 715,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 716,
              "content": "response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 717,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 718,
              "content": ");",
              "indent": 12
            },
            {
              "lineNumber": 719,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 720,
              "content": "const analysis = JSON.parse(response);",
              "indent": 12
            },
            {
              "lineNumber": 721,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 722,
              "content": "// 基本的な検証",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 695,
            "distance": 22
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.overallRealization === ",
            "fullLength": 338,
            "truncatedContent": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.overallRealization === ",
            "hash": "f58ee330e823f27e3e808879b9ef4651",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "performAIEmotionalAnalysis",
            "relatedMethods": [
              "performAIEmotionalAnalysis",
              "buildEmotionalAnalysisPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<EmotionalArcProgress>"
            ],
            "extractedTypes": [
              "EmotionalArcProgress>"
            ]
          },
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "plot",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "private",
            "async",
            "performAIEmotionalAnalysis",
            "section",
            "SectionPlot",
            "chapters",
            "Array",
            "chapterNumber",
            "number",
            "title"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "610dbb0aad4545092105ae66532c00f1"
      },
      {
        "id": "call_71c3a3c1",
        "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
        "fileName": "section-analyzer.ts",
        "lineNumber": 773,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 768,
              "content": ");",
              "indent": 8
            },
            {
              "lineNumber": 769,
              "content": "let response: string = '';",
              "indent": 8
            },
            {
              "lineNumber": 770,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 771,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 772,
              "content": "response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 773,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 774,
              "content": ");",
              "indent": 12
            },
            {
              "lineNumber": 775,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 776,
              "content": "const suggestions = JSON.parse(response);",
              "indent": 12
            },
            {
              "lineNumber": 777,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 778,
              "content": "// 基本的な検証",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 743,
            "distance": 30
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}",
            "fullLength": 107,
            "truncatedContent": "Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}",
            "hash": "6af57150f3e5183b6af0cdc5d08770db",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const suggestions = JSON.parse(response);\n\n            // 基本的な検証\n            if (Array.isArray(suggestions)) {\n                logger.info(`Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}`);\n                return suggestions;\n            }\n\n            logger.warn(",
            "fullLength": 519,
            "truncatedContent": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const suggestions = JSON.parse(response);\n\n            // 基本的な検証\n            if (Array.isArray(suggestions)) {\n                logger.info(`Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}`);\n                return suggestions;\n            }\n\n            logger.warn(",
            "hash": "dde5c5e52719e86afd8e56d8d50a49b9",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", { response });\n            return this.generateDefaultImprovementSuggestions(section, coherenceAnalysis, objectiveProgress);\n        } catch (parseError) {\n            logger.error(",
            "fullLength": 183,
            "truncatedContent": ", { response });\n            return this.generateDefaultImprovementSuggestions(section, coherenceAnalysis, objectiveProgress);\n        } catch (parseError) {\n            logger.error(",
            "hash": "e3ce1269b1e81c40b431ecc491bd3c60",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": "Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}",
            "fullLength": 107,
            "truncatedContent": "Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}",
            "hash": "6af57150f3e5183b6af0cdc5d08770db",
            "hasVariables": true,
            "variableCount": 2
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildImprovementAnalysisPrompt",
            "relatedMethods": [
              "buildImprovementAnalysisPrompt",
              "coherenceAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<ImprovementSuggestion[]>"
            ],
            "extractedTypes": [
              "ImprovementSuggestion[]>"
            ]
          },
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "ObjectiveProgress",
            "emotionalArcProgress",
            "EmotionalArcProgress",
            "improvementContext",
            "any",
            "Promise",
            "ImprovementSuggestion",
            "const",
            "prompt",
            "this"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "37334ebbe2a95023a8a3a4444b1b7a0c"
      },
      {
        "id": "call_a643be4b",
        "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
        "fileName": "section-analyzer.ts",
        "lineNumber": 138,
        "lineContent": "const aiAnalysisResult = await this.performAICoherenceAnalysis(",
        "matchedPattern": "performAI\\w*Analysis\\s*\\(",
        "callMethod": "performAICoherenceAnalysis",
        "fullMatch": "performAICoherenceAnalysis(",
        "context": {
          "before": [
            {
              "lineNumber": 133,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 134,
              "content": "// 統合記憶システムから追加コンテキストを取得",
              "indent": 12
            },
            {
              "lineNumber": 135,
              "content": "const memoryContext = await this.getUnifiedMemoryContext(start, end);",
              "indent": 12
            },
            {
              "lineNumber": 136,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 137,
              "content": "// AIによる一貫性分析",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 138,
            "content": "const aiAnalysisResult = await this.performAICoherenceAnalysis(",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 139,
              "content": "section,",
              "indent": 16
            },
            {
              "lineNumber": 140,
              "content": "chapters,",
              "indent": 16
            },
            {
              "lineNumber": 141,
              "content": "memoryContext",
              "indent": 16
            },
            {
              "lineNumber": 142,
              "content": ");",
              "indent": 12
            },
            {
              "lineNumber": 143,
              "content": "",
              "indent": 0
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 130,
            "distance": 8
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "Successfully analyzed coherence for section ${sectionId}",
            "fullLength": 56,
            "truncatedContent": "Successfully analyzed coherence for section ${sectionId}",
            "hash": "56b36ffffa23b2e05ebc2648fc968b79",
            "keywords": [
              "analyze"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "generateDefaultCoherenceAnalysis",
            "relatedMethods": [
              "generateDefaultCoherenceAnalysis",
              "aiAnalysis",
              "performAICoherenceAnalysis",
              "updateAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "const",
            "start",
            "end",
            "section",
            "chapterRange",
            "chapters",
            "await",
            "this",
            "getChapterDataSafely",
            "length"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "caea34b2fa727bedbeb8a9be66107d11"
      },
      {
        "id": "call_2f7dba2f",
        "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
        "fileName": "section-analyzer.ts",
        "lineNumber": 201,
        "lineContent": "const aiAnalysisResult = await this.performAIObjectiveAnalysis(",
        "matchedPattern": "performAI\\w*Analysis\\s*\\(",
        "callMethod": "performAIObjectiveAnalysis",
        "fullMatch": "performAIObjectiveAnalysis(",
        "context": {
          "before": [
            {
              "lineNumber": 196,
              "content": "if (chapters.length === 0) {",
              "indent": 12
            },
            {
              "lineNumber": 197,
              "content": "return this.generateDefaultObjectiveProgress(section);",
              "indent": 16
            },
            {
              "lineNumber": 198,
              "content": "}",
              "indent": 12
            },
            {
              "lineNumber": 199,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 200,
              "content": "// AIによる学習目標達成度分析",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 201,
            "content": "const aiAnalysisResult = await this.performAIObjectiveAnalysis(",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 202,
              "content": "section,",
              "indent": 16
            },
            {
              "lineNumber": 203,
              "content": "chapters,",
              "indent": 16
            },
            {
              "lineNumber": 204,
              "content": "analysisContext",
              "indent": 16
            },
            {
              "lineNumber": 205,
              "content": ");",
              "indent": 12
            },
            {
              "lineNumber": 206,
              "content": "",
              "indent": 0
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 196,
            "distance": 5
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "Successfully analyzed learning objective progress for section ${sectionId}",
            "fullLength": 74,
            "truncatedContent": "Successfully analyzed learning objective progress for section ${sectionId}",
            "hash": "5bd97c8ffccf12a731b7d688f2f85ca4",
            "keywords": [
              "analyze"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "getAnalysis",
            "relatedMethods": [
              "getAnalysis",
              "aiAnalysis",
              "performAIObjectiveAnalysis",
              "updateAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "const",
            "start",
            "end",
            "section",
            "chapterRange",
            "analysisContext",
            "await",
            "this",
            "getAnalysisContextFromMemory",
            "chapters"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "b9601cfe732dbf382cec7864358d0b47"
      },
      {
        "id": "call_8749b3de",
        "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
        "fileName": "section-analyzer.ts",
        "lineNumber": 276,
        "lineContent": "const aiAnalysisResult = await this.performAIEmotionalAnalysis(",
        "matchedPattern": "performAI\\w*Analysis\\s*\\(",
        "callMethod": "performAIEmotionalAnalysis",
        "fullMatch": "performAIEmotionalAnalysis(",
        "context": {
          "before": [
            {
              "lineNumber": 271,
              "content": "if (chapters.length === 0) {",
              "indent": 12
            },
            {
              "lineNumber": 272,
              "content": "return this.generateDefaultEmotionalArcProgress(section);",
              "indent": 16
            },
            {
              "lineNumber": 273,
              "content": "}",
              "indent": 12
            },
            {
              "lineNumber": 274,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 275,
              "content": "// AIによる感情アーク実現度分析",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 276,
            "content": "const aiAnalysisResult = await this.performAIEmotionalAnalysis(",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 277,
              "content": "section,",
              "indent": 16
            },
            {
              "lineNumber": 278,
              "content": "chapters,",
              "indent": 16
            },
            {
              "lineNumber": 279,
              "content": "emotionalContext",
              "indent": 16
            },
            {
              "lineNumber": 280,
              "content": ");",
              "indent": 12
            },
            {
              "lineNumber": 281,
              "content": "",
              "indent": 0
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 271,
            "distance": 5
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "Successfully analyzed emotional arc realization for section ${sectionId}",
            "fullLength": 72,
            "truncatedContent": "Successfully analyzed emotional arc realization for section ${sectionId}",
            "hash": "20382c515827fb0dc396d5786f7fd7d3",
            "keywords": [
              "analyze"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "aiAnalysis",
            "relatedMethods": [
              "aiAnalysis",
              "performAIEmotionalAnalysis",
              "updateAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "const",
            "start",
            "end",
            "section",
            "chapterRange",
            "emotionalContext",
            "await",
            "this",
            "getEmotionalContextFromMemory",
            "chapters"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "37170b39e0331ecf4b1e2932bc0689a1"
      },
      {
        "id": "call_50f93511",
        "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
        "fileName": "section-analyzer.ts",
        "lineNumber": 354,
        "lineContent": "const aiSuggestions = await this.performAIImprovementAnalysis(",
        "matchedPattern": "performAI\\w*Analysis\\s*\\(",
        "callMethod": "performAIImprovementAnalysis",
        "fullMatch": "performAIImprovementAnalysis(",
        "context": {
          "before": [
            {
              "lineNumber": 349,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 350,
              "content": "// 統合記憶システムから改善コンテキストを取得",
              "indent": 12
            },
            {
              "lineNumber": 351,
              "content": "const improvementContext = await this.getImprovementContextFromMemory(section);",
              "indent": 12
            },
            {
              "lineNumber": 352,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 353,
              "content": "// AIによる改善提案の生成",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 354,
            "content": "const aiSuggestions = await this.performAIImprovementAnalysis(",
            "indent": 12
          },
          "after": [
            {
              "lineNumber": 355,
              "content": "section,",
              "indent": 16
            },
            {
              "lineNumber": 356,
              "content": "coherenceAnalysis,",
              "indent": 16
            },
            {
              "lineNumber": 357,
              "content": "objectiveProgress,",
              "indent": 16
            },
            {
              "lineNumber": 358,
              "content": "emotionalArcProgress,",
              "indent": 16
            },
            {
              "lineNumber": 359,
              "content": "improvementContext",
              "indent": 16
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 339,
            "distance": 15
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ");\n            }\n\n            // 各種分析を実行\n            const [coherenceAnalysis, objectiveProgress, emotionalArcProgress] = await Promise.all([\n                this.analyzeSectionCoherence(sectionId),\n                this.analyzeLearningObjectiveProgress(sectionId),\n                this.analyzeEmotionalArcRealization(sectionId)\n            ]);\n\n            // 統合記憶システムから改善コンテキストを取得\n            const improvementContext = await this.getImprovementContextFromMemory(section);\n\n            // AIによる改善提案の生成\n            const aiSuggestions = await this.performAIImprovementAnalysis(\n                section,\n                coherenceAnalysis,\n                objectiveProgress,\n                emotionalArcProgress,\n                improvementContext\n            );\n\n            this.analysisMetrics.successfulAnalyses++;\n            this.updateAnalysisMetrics(Date.now() - startTime);\n\n            logger.info(",
            "fullLength": 906,
            "truncatedContent": ");\n            }\n\n            // 各種分析を実行\n            const [coherenceAnalysis, objectiveProgress, emotionalArcProgress] = await Promise.all([\n                this.analyzeSectionCoherence(sectionId),\n                this.analyzeLearningObjectiveProgress(sectionId),\n                this.analyzeEmotionalArcRealization(sectionId)\n            ]);\n\n            // 統合記憶システムから改善コンテキストを取得\n            const improvementContext = await this.getImprovementContextFromMemory(section);\n\n            // AIによる改善提案の生成\n            const aiSuggestions = await this.performAIImprovementAnalysis(\n                section,\n                coherenceAnalysis,\n                objectiveProgress,\n                emotionalArcProgress,\n                improvementContext\n            );\n\n            this.analysisMetrics.successfulAnalyses++;\n            this.updateAnalysisMetrics(Date.now() - startTime);\n\n            logger.info(",
            "hash": "6ca2f60024f9c05b8c4f74b397989619",
            "keywords": [
              "分析",
              "生成",
              "analyze"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ");\n            }\n\n            // 各種分析を実行\n            const [coherenceAnalysis, objectiveProgress, emotionalArcProgress] = await Promise.all([\n                this.analyzeSectionCoherence(sectionId),\n                this.analyzeLearningObjectiveProgress(sectionId),\n                this.analyzeEmotionalArcRealization(sectionId)\n            ]);\n\n            // 統合記憶システムから改善コンテキストを取得\n            const improvementContext = await this.getImprovementContextFromMemory(section);\n\n            // AIによる改善提案の生成\n            const aiSuggestions = await this.performAIImprovementAnalysis(\n                section,\n                coherenceAnalysis,\n                objectiveProgress,\n                emotionalArcProgress,\n                improvementContext\n            );\n\n            this.analysisMetrics.successfulAnalyses++;\n            this.updateAnalysisMetrics(Date.now() - startTime);\n\n            logger.info(",
            "fullLength": 906,
            "truncatedContent": ");\n            }\n\n            // 各種分析を実行\n            const [coherenceAnalysis, objectiveProgress, emotionalArcProgress] = await Promise.all([\n                this.analyzeSectionCoherence(sectionId),\n                this.analyzeLearningObjectiveProgress(sectionId),\n                this.analyzeEmotionalArcRealization(sectionId)\n            ]);\n\n            // 統合記憶システムから改善コンテキストを取得\n            const improvementContext = await this.getImprovementContextFromMemory(section);\n\n            // AIによる改善提案の生成\n            const aiSuggestions = await this.performAIImprovementAnalysis(\n                section,\n                coherenceAnalysis,\n                objectiveProgress,\n                emotionalArcProgress,\n                improvementContext\n            );\n\n            this.analysisMetrics.successfulAnalyses++;\n            this.updateAnalysisMetrics(Date.now() - startTime);\n\n            logger.info(",
            "hash": "6ca2f60024f9c05b8c4f74b397989619",
            "keywords": [
              "分析",
              "生成",
              "analyze"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ");\n            }\n\n            // 各種分析を実行\n            const [coherenceAnalysis, objectiveProgress, emotionalArcProgress] = await Promise.all([\n                this.analyzeSectionCoherence(sectionId),\n                this.analyzeLearningObjectiveProgress(sectionId),\n                this.analyzeEmotionalArcRealization(sectionId)\n            ]);\n\n            // 統合記憶システムから改善コンテキストを取得\n            const improvementContext = await this.getImprovementContextFromMemory(section);\n\n            // AIによる改善提案の生成\n            const aiSuggestions = await this.performAIImprovementAnalysis(\n                section,\n                coherenceAnalysis,\n                objectiveProgress,\n                emotionalArcProgress,\n                improvementContext\n            );\n\n            this.analysisMetrics.successfulAnalyses++;\n            this.updateAnalysisMetrics(Date.now() - startTime);\n\n            logger.info(",
            "fullLength": 906,
            "truncatedContent": ");\n            }\n\n            // 各種分析を実行\n            const [coherenceAnalysis, objectiveProgress, emotionalArcProgress] = await Promise.all([\n                this.analyzeSectionCoherence(sectionId),\n                this.analyzeLearningObjectiveProgress(sectionId),\n                this.analyzeEmotionalArcRealization(sectionId)\n            ]);\n\n            // 統合記憶システムから改善コンテキストを取得\n            const improvementContext = await this.getImprovementContextFromMemory(section);\n\n            // AIによる改善提案の生成\n            const aiSuggestions = await this.performAIImprovementAnalysis(\n                section,\n                coherenceAnalysis,\n                objectiveProgress,\n                emotionalArcProgress,\n                improvementContext\n            );\n\n            this.analysisMetrics.successfulAnalyses++;\n            this.updateAnalysisMetrics(Date.now() - startTime);\n\n            logger.info(",
            "hash": "6ca2f60024f9c05b8c4f74b397989619",
            "hasVariables": false,
            "variableCount": 0
          },
          {
            "type": "method_based",
            "suggestedPurpose": "coherenceAnalysis",
            "relatedMethods": [
              "coherenceAnalysis",
              "performAIImprovementAnalysis",
              "updateAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "analyze"
          ],
          "complexity": "low",
          "dependencies": [
            "const",
            "coherenceAnalysis",
            "objectiveProgress",
            "emotionalArcProgress",
            "await",
            "Promise",
            "all",
            "this",
            "analyzeSectionCoherence",
            "sectionId"
          ],
          "outputUsage": {
            "isAssigned": false,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "11780e22dacb0e9f3cedf1fa5a697311"
      },
      {
        "id": "call_5f96b84e",
        "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
        "fileName": "section-analyzer.ts",
        "lineNumber": 622,
        "lineContent": "private async performAICoherenceAnalysis(",
        "matchedPattern": "performAI\\w*Analysis\\s*\\(",
        "callMethod": "performAICoherenceAnalysis",
        "fullMatch": "performAICoherenceAnalysis(",
        "context": {
          "before": [
            {
              "lineNumber": 617,
              "content": "// ============================================================================",
              "indent": 4
            },
            {
              "lineNumber": 618,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 619,
              "content": "/**",
              "indent": 4
            },
            {
              "lineNumber": 620,
              "content": "* AI一貫性分析を実行",
              "indent": 5
            },
            {
              "lineNumber": 621,
              "content": "*/",
              "indent": 5
            }
          ],
          "current": {
            "lineNumber": 622,
            "content": "private async performAICoherenceAnalysis(",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 623,
              "content": "section: SectionPlot,",
              "indent": 8
            },
            {
              "lineNumber": 624,
              "content": "chapters: Array<{ chapterNumber: number; title: string; content: string }>,",
              "indent": 8
            },
            {
              "lineNumber": 625,
              "content": "memoryContext: any",
              "indent": 8
            },
            {
              "lineNumber": 626,
              "content": "): Promise<CoherenceAnalysis> {",
              "indent": 4
            },
            {
              "lineNumber": 627,
              "content": "const prompt = this.buildCoherenceAnalysisPrompt(section, chapters, memoryContext);",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 609,
            "distance": 13
          }
        },
        "prompts": [
          {
            "type": "method_based",
            "suggestedPurpose": "performAICoherenceAnalysis",
            "relatedMethods": [
              "performAICoherenceAnalysis",
              "CoherenceAnalysis",
              "buildCoherenceAnalysisPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<CoherenceAnalysis>"
            ],
            "extractedTypes": [
              "CoherenceAnalysis>"
            ]
          },
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "plot",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "ryManager",
            "not",
            "initialized",
            "return",
            "fallbackValue",
            "await",
            "operation",
            "catch",
            "error",
            "logger"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "9d49a3ab68b615872679e053b3297a73"
      },
      {
        "id": "call_a6c8c1d7",
        "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
        "fileName": "section-analyzer.ts",
        "lineNumber": 661,
        "lineContent": "private async performAIObjectiveAnalysis(",
        "matchedPattern": "performAI\\w*Analysis\\s*\\(",
        "callMethod": "performAIObjectiveAnalysis",
        "fullMatch": "performAIObjectiveAnalysis(",
        "context": {
          "before": [
            {
              "lineNumber": 656,
              "content": "}",
              "indent": 4
            },
            {
              "lineNumber": 657,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 658,
              "content": "/**",
              "indent": 4
            },
            {
              "lineNumber": 659,
              "content": "* AI目標分析を実行",
              "indent": 5
            },
            {
              "lineNumber": 660,
              "content": "*/",
              "indent": 5
            }
          ],
          "current": {
            "lineNumber": 661,
            "content": "private async performAIObjectiveAnalysis(",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 662,
              "content": "section: SectionPlot,",
              "indent": 8
            },
            {
              "lineNumber": 663,
              "content": "chapters: Array<{ chapterNumber: number; title: string; content: string }>,",
              "indent": 8
            },
            {
              "lineNumber": 664,
              "content": "analysisContext: any",
              "indent": 8
            },
            {
              "lineNumber": 665,
              "content": "): Promise<ObjectiveProgress> {",
              "indent": 4
            },
            {
              "lineNumber": 666,
              "content": "const prompt = this.buildObjectiveAnalysisPrompt(section, chapters, analysisContext);",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 649,
            "distance": 12
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ", {\n                error: parseError instanceof Error ? parseError.message : String(parseError),\n                response\n            });\n            return this.generateDefaultCoherenceAnalysis();\n        }\n    }\n\n    /**\n     * AI目標分析を実行\n     */\n    private async performAIObjectiveAnalysis(\n        section: SectionPlot,\n        chapters: Array<{ chapterNumber: number; title: string; content: string }>,\n        analysisContext: any\n    ): Promise<ObjectiveProgress> {\n        const prompt = this.buildObjectiveAnalysisPrompt(section, chapters, analysisContext);\n        let response: string = ",
            "fullLength": 599,
            "truncatedContent": ", {\n                error: parseError instanceof Error ? parseError.message : String(parseError),\n                response\n            });\n            return this.generateDefaultCoherenceAnalysis();\n        }\n    }\n\n    /**\n     * AI目標分析を実行\n     */\n    private async performAIObjectiveAnalysis(\n        section: SectionPlot,\n        chapters: Array<{ chapterNumber: number; title: string; content: string }>,\n        analysisContext: any\n    ): Promise<ObjectiveProgress> {\n        const prompt = this.buildObjectiveAnalysisPrompt(section, chapters, analysisContext);\n        let response: string = ",
            "hash": "b3faa305b0d6195cd40ed9690d2b36ba",
            "keywords": [
              "分析",
              "generate",
              "Plot",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", { response });\n            return this.generateDefaultCoherenceAnalysis();\n        } catch (parseError) {\n            logger.error(",
            "fullLength": 133,
            "truncatedContent": ", { response });\n            return this.generateDefaultCoherenceAnalysis();\n        } catch (parseError) {\n            logger.error(",
            "hash": "e48c1835a6fd0c773760d02df5774990",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", {\n                error: parseError instanceof Error ? parseError.message : String(parseError),\n                response\n            });\n            return this.generateDefaultCoherenceAnalysis();\n        }\n    }\n\n    /**\n     * AI目標分析を実行\n     */\n    private async performAIObjectiveAnalysis(\n        section: SectionPlot,\n        chapters: Array<{ chapterNumber: number; title: string; content: string }>,\n        analysisContext: any\n    ): Promise<ObjectiveProgress> {\n        const prompt = this.buildObjectiveAnalysisPrompt(section, chapters, analysisContext);\n        let response: string = ",
            "fullLength": 599,
            "truncatedContent": ", {\n                error: parseError instanceof Error ? parseError.message : String(parseError),\n                response\n            });\n            return this.generateDefaultCoherenceAnalysis();\n        }\n    }\n\n    /**\n     * AI目標分析を実行\n     */\n    private async performAIObjectiveAnalysis(\n        section: SectionPlot,\n        chapters: Array<{ chapterNumber: number; title: string; content: string }>,\n        analysisContext: any\n    ): Promise<ObjectiveProgress> {\n        const prompt = this.buildObjectiveAnalysisPrompt(section, chapters, analysisContext);\n        let response: string = ",
            "hash": "b3faa305b0d6195cd40ed9690d2b36ba",
            "keywords": [
              "分析",
              "generate",
              "Plot",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "generateDefaultCoherenceAnalysis",
            "relatedMethods": [
              "generateDefaultCoherenceAnalysis",
              "performAIObjectiveAnalysis",
              "buildObjectiveAnalysisPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<ObjectiveProgress>"
            ],
            "extractedTypes": [
              "ObjectiveProgress>"
            ]
          },
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "plot",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "logger",
            "warn",
            "response",
            "not",
            "valid",
            "coherence",
            "analysis",
            "return",
            "this",
            "generateDefaultCoherenceAnalysis"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "007ee5f2536cd915e663c417c8a90edc"
      },
      {
        "id": "call_503d7717",
        "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
        "fileName": "section-analyzer.ts",
        "lineNumber": 707,
        "lineContent": "private async performAIEmotionalAnalysis(",
        "matchedPattern": "performAI\\w*Analysis\\s*\\(",
        "callMethod": "performAIEmotionalAnalysis",
        "fullMatch": "performAIEmotionalAnalysis(",
        "context": {
          "before": [
            {
              "lineNumber": 702,
              "content": "}",
              "indent": 4
            },
            {
              "lineNumber": 703,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 704,
              "content": "/**",
              "indent": 4
            },
            {
              "lineNumber": 705,
              "content": "* AI感情分析を実行",
              "indent": 5
            },
            {
              "lineNumber": 706,
              "content": "*/",
              "indent": 5
            }
          ],
          "current": {
            "lineNumber": 707,
            "content": "private async performAIEmotionalAnalysis(",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 708,
              "content": "section: SectionPlot,",
              "indent": 8
            },
            {
              "lineNumber": 709,
              "content": "chapters: Array<{ chapterNumber: number; title: string; content: string }>,",
              "indent": 8
            },
            {
              "lineNumber": 710,
              "content": "emotionalContext: any",
              "indent": 8
            },
            {
              "lineNumber": 711,
              "content": "): Promise<EmotionalArcProgress> {",
              "indent": 4
            },
            {
              "lineNumber": 712,
              "content": "const prompt = this.buildEmotionalAnalysisPrompt(section, chapters, emotionalContext);",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 695,
            "distance": 12
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ", {\n                error: parseError instanceof Error ? parseError.message : String(parseError),\n                response\n            });\n            return this.generateDefaultObjectiveProgress(section);\n        }\n    }\n\n    /**\n     * AI感情分析を実行\n     */\n    private async performAIEmotionalAnalysis(\n        section: SectionPlot,\n        chapters: Array<{ chapterNumber: number; title: string; content: string }>,\n        emotionalContext: any\n    ): Promise<EmotionalArcProgress> {\n        const prompt = this.buildEmotionalAnalysisPrompt(section, chapters, emotionalContext);\n        let response: string = ",
            "fullLength": 611,
            "truncatedContent": ", {\n                error: parseError instanceof Error ? parseError.message : String(parseError),\n                response\n            });\n            return this.generateDefaultObjectiveProgress(section);\n        }\n    }\n\n    /**\n     * AI感情分析を実行\n     */\n    private async performAIEmotionalAnalysis(\n        section: SectionPlot,\n        chapters: Array<{ chapterNumber: number; title: string; content: string }>,\n        emotionalContext: any\n    ): Promise<EmotionalArcProgress> {\n        const prompt = this.buildEmotionalAnalysisPrompt(section, chapters, emotionalContext);\n        let response: string = ",
            "hash": "965feb7ff72ba12aba6780155a0cec9f",
            "keywords": [
              "分析",
              "generate",
              "Plot",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", { response });\n            return this.generateDefaultObjectiveProgress(section);\n        } catch (parseError) {\n            logger.error(",
            "fullLength": 140,
            "truncatedContent": ", { response });\n            return this.generateDefaultObjectiveProgress(section);\n        } catch (parseError) {\n            logger.error(",
            "hash": "89159e5f9935cf284e75de8c638e1b14",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", {\n                error: parseError instanceof Error ? parseError.message : String(parseError),\n                response\n            });\n            return this.generateDefaultObjectiveProgress(section);\n        }\n    }\n\n    /**\n     * AI感情分析を実行\n     */\n    private async performAIEmotionalAnalysis(\n        section: SectionPlot,\n        chapters: Array<{ chapterNumber: number; title: string; content: string }>,\n        emotionalContext: any\n    ): Promise<EmotionalArcProgress> {\n        const prompt = this.buildEmotionalAnalysisPrompt(section, chapters, emotionalContext);\n        let response: string = ",
            "fullLength": 611,
            "truncatedContent": ", {\n                error: parseError instanceof Error ? parseError.message : String(parseError),\n                response\n            });\n            return this.generateDefaultObjectiveProgress(section);\n        }\n    }\n\n    /**\n     * AI感情分析を実行\n     */\n    private async performAIEmotionalAnalysis(\n        section: SectionPlot,\n        chapters: Array<{ chapterNumber: number; title: string; content: string }>,\n        emotionalContext: any\n    ): Promise<EmotionalArcProgress> {\n        const prompt = this.buildEmotionalAnalysisPrompt(section, chapters, emotionalContext);\n        let response: string = ",
            "hash": "965feb7ff72ba12aba6780155a0cec9f",
            "keywords": [
              "分析",
              "generate",
              "Plot",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "performAIEmotionalAnalysis",
            "relatedMethods": [
              "performAIEmotionalAnalysis",
              "buildEmotionalAnalysisPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<EmotionalArcProgress>"
            ],
            "extractedTypes": [
              "EmotionalArcProgress>"
            ]
          },
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "plot",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "ponse",
            "not",
            "valid",
            "objective",
            "progress",
            "analysis",
            "response",
            "return",
            "this",
            "generateDefaultObjectiveProgress"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": true,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "b5691f846668b74c0f1634c218a08b00"
      },
      {
        "id": "call_5fcbc634",
        "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
        "fileName": "section-analyzer.ts",
        "lineNumber": 755,
        "lineContent": "private async performAIImprovementAnalysis(",
        "matchedPattern": "performAI\\w*Analysis\\s*\\(",
        "callMethod": "performAIImprovementAnalysis",
        "fullMatch": "performAIImprovementAnalysis(",
        "context": {
          "before": [
            {
              "lineNumber": 750,
              "content": "}",
              "indent": 4
            },
            {
              "lineNumber": 751,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 752,
              "content": "/**",
              "indent": 4
            },
            {
              "lineNumber": 753,
              "content": "* AI改善分析を実行",
              "indent": 5
            },
            {
              "lineNumber": 754,
              "content": "*/",
              "indent": 5
            }
          ],
          "current": {
            "lineNumber": 755,
            "content": "private async performAIImprovementAnalysis(",
            "indent": 4
          },
          "after": [
            {
              "lineNumber": 756,
              "content": "section: SectionPlot,",
              "indent": 8
            },
            {
              "lineNumber": 757,
              "content": "coherenceAnalysis: CoherenceAnalysis,",
              "indent": 8
            },
            {
              "lineNumber": 758,
              "content": "objectiveProgress: ObjectiveProgress,",
              "indent": 8
            },
            {
              "lineNumber": 759,
              "content": "emotionalArcProgress: EmotionalArcProgress,",
              "indent": 8
            },
            {
              "lineNumber": 760,
              "content": "improvementContext: any",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 743,
            "distance": 12
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ", {\n                error: parseError instanceof Error ? parseError.message : String(parseError),\n                response\n            });\n            return this.generateDefaultEmotionalArcProgress(section);\n        }\n    }\n\n    /**\n     * AI改善分析を実行\n     */\n    private async performAIImprovementAnalysis(\n        section: SectionPlot,\n        coherenceAnalysis: CoherenceAnalysis,\n        objectiveProgress: ObjectiveProgress,\n        emotionalArcProgress: EmotionalArcProgress,\n        improvementContext: any\n    ): Promise<ImprovementSuggestion[]> {\n        const prompt = this.buildImprovementAnalysisPrompt(\n            section,\n            coherenceAnalysis,\n            objectiveProgress,\n            emotionalArcProgress,\n            improvementContext\n        );\n        let response: string = ",
            "fullLength": 805,
            "truncatedContent": ", {\n                error: parseError instanceof Error ? parseError.message : String(parseError),\n                response\n            });\n            return this.generateDefaultEmotionalArcProgress(section);\n        }\n    }\n\n    /**\n     * AI改善分析を実行\n     */\n    private async performAIImprovementAnalysis(\n        section: SectionPlot,\n        coherenceAnalysis: CoherenceAnalysis,\n        objectiveProgress: ObjectiveProgress,\n        emotionalArcProgress: EmotionalArcProgress,\n        improvementContext: any\n    ): Promise<ImprovementSuggestion[]> {\n        const prompt = this.buildImprovementAnalysisPrompt(\n            section,\n            coherenceAnalysis,\n            objectiveProgress,\n            emotionalArcProgress,\n            improvementContext\n        );\n        let response: string = ",
            "hash": "9ecd96666e000d5e0e6b60074e81f0a6",
            "keywords": [
              "分析",
              "generate",
              "Plot"
            ],
            "sentiment": "neutral",
            "complexity": "medium",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", { response });\n            return this.generateDefaultEmotionalArcProgress(section);\n        } catch (parseError) {\n            logger.error(",
            "fullLength": 143,
            "truncatedContent": ", { response });\n            return this.generateDefaultEmotionalArcProgress(section);\n        } catch (parseError) {\n            logger.error(",
            "hash": "fcad2ffc009c3aef54afb1d30b6f202c",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", {\n                error: parseError instanceof Error ? parseError.message : String(parseError),\n                response\n            });\n            return this.generateDefaultEmotionalArcProgress(section);\n        }\n    }\n\n    /**\n     * AI改善分析を実行\n     */\n    private async performAIImprovementAnalysis(\n        section: SectionPlot,\n        coherenceAnalysis: CoherenceAnalysis,\n        objectiveProgress: ObjectiveProgress,\n        emotionalArcProgress: EmotionalArcProgress,\n        improvementContext: any\n    ): Promise<ImprovementSuggestion[]> {\n        const prompt = this.buildImprovementAnalysisPrompt(\n            section,\n            coherenceAnalysis,\n            objectiveProgress,\n            emotionalArcProgress,\n            improvementContext\n        );\n        let response: string = ",
            "fullLength": 805,
            "truncatedContent": ", {\n                error: parseError instanceof Error ? parseError.message : String(parseError),\n                response\n            });\n            return this.generateDefaultEmotionalArcProgress(section);\n        }\n    }\n\n    /**\n     * AI改善分析を実行\n     */\n    private async performAIImprovementAnalysis(\n        section: SectionPlot,\n        coherenceAnalysis: CoherenceAnalysis,\n        objectiveProgress: ObjectiveProgress,\n        emotionalArcProgress: EmotionalArcProgress,\n        improvementContext: any\n    ): Promise<ImprovementSuggestion[]> {\n        const prompt = this.buildImprovementAnalysisPrompt(\n            section,\n            coherenceAnalysis,\n            objectiveProgress,\n            emotionalArcProgress,\n            improvementContext\n        );\n        let response: string = ",
            "hash": "9ecd96666e000d5e0e6b60074e81f0a6",
            "keywords": [
              "分析",
              "generate",
              "Plot"
            ],
            "sentiment": "neutral",
            "complexity": "medium",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "performAIImprovementAnalysis",
            "relatedMethods": [
              "performAIImprovementAnalysis",
              "coherenceAnalysis",
              "CoherenceAnalysis",
              "buildImprovementAnalysisPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": CoherenceAnalysis",
              ": Promise<ImprovementSuggestion[]>"
            ],
            "extractedTypes": [
              "CoherenceAnalysis",
              "ImprovementSuggestion[]>"
            ]
          },
          {
            "type": "novel_structure",
            "element": "plot",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "valid",
            "emotional",
            "arc",
            "progress",
            "analysis",
            "response",
            "return",
            "this",
            "generateDefaultEmotionalArcProgress",
            "section"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "780b17573e00ec16752fa86e1c05b2a2"
      },
      {
        "id": "call_01bf8aff",
        "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
        "fileName": "section-analyzer.ts",
        "lineNumber": 632,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 627,
              "content": "const prompt = this.buildCoherenceAnalysisPrompt(section, chapters, memoryContext);",
              "indent": 8
            },
            {
              "lineNumber": 628,
              "content": "let response: string = '';",
              "indent": 8
            },
            {
              "lineNumber": 629,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 630,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 631,
              "content": "response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 632,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 633,
              "content": ");",
              "indent": 12
            },
            {
              "lineNumber": 634,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 635,
              "content": "const analysis = JSON.parse(response);",
              "indent": 12
            },
            {
              "lineNumber": 636,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 637,
              "content": "// 基本的な検証",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 609,
            "distance": 23
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "Successfully analyzed coherence for section ${section.structure.title}",
            "fullLength": 70,
            "truncatedContent": "Successfully analyzed coherence for section ${section.structure.title}",
            "hash": "2929b8486fcf2321b6354ce111e12af9",
            "keywords": [
              "analyze"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.overallScore === ",
            "fullLength": 332,
            "truncatedContent": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.overallScore === ",
            "hash": "d247d541e2d0d3f6e93d8f83a1e4253b",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": " &&\n                Array.isArray(analysis.problematicAreas) &&\n                Array.isArray(analysis.improvementSuggestions)) {\n\n                logger.info(`Successfully analyzed coherence for section ${section.structure.title}`);\n                return analysis;\n            }\n\n            logger.warn(",
            "fullLength": 306,
            "truncatedContent": " &&\n                Array.isArray(analysis.problematicAreas) &&\n                Array.isArray(analysis.improvementSuggestions)) {\n\n                logger.info(`Successfully analyzed coherence for section ${section.structure.title}`);\n                return analysis;\n            }\n\n            logger.warn(",
            "hash": "320f749e0a9e114bb54363e84cb4b670",
            "keywords": [
              "analyze"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "performAICoherenceAnalysis",
            "relatedMethods": [
              "performAICoherenceAnalysis",
              "CoherenceAnalysis",
              "buildCoherenceAnalysisPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<CoherenceAnalysis>"
            ],
            "extractedTypes": [
              "CoherenceAnalysis>"
            ]
          },
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "plot",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "analyze",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "private",
            "async",
            "performAICoherenceAnalysis",
            "section",
            "SectionPlot",
            "chapters",
            "Array",
            "chapterNumber",
            "number",
            "title"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "35ce0974632043ca74718864f3cf85af"
      },
      {
        "id": "call_7234ed6d",
        "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
        "fileName": "section-analyzer.ts",
        "lineNumber": 671,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 666,
              "content": "const prompt = this.buildObjectiveAnalysisPrompt(section, chapters, analysisContext);",
              "indent": 8
            },
            {
              "lineNumber": 667,
              "content": "let response: string = '';",
              "indent": 8
            },
            {
              "lineNumber": 668,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 669,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 670,
              "content": "response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 671,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 672,
              "content": ");",
              "indent": 12
            },
            {
              "lineNumber": 673,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 674,
              "content": "const analysis = JSON.parse(response);",
              "indent": 12
            },
            {
              "lineNumber": 675,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 676,
              "content": "// 基本的な検証",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 649,
            "distance": 22
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.cognitiveProgress === ",
            "fullLength": 337,
            "truncatedContent": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.cognitiveProgress === ",
            "hash": "77a50a6e1e418df2a63a9da228f0a6c7",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "performAIObjectiveAnalysis",
            "relatedMethods": [
              "performAIObjectiveAnalysis",
              "buildObjectiveAnalysisPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<ObjectiveProgress>"
            ],
            "extractedTypes": [
              "ObjectiveProgress>"
            ]
          },
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "plot",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "private",
            "async",
            "performAIObjectiveAnalysis",
            "section",
            "SectionPlot",
            "chapters",
            "Array",
            "chapterNumber",
            "number",
            "title"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "35ce0974632043ca74718864f3cf85af"
      },
      {
        "id": "call_25880c3e",
        "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
        "fileName": "section-analyzer.ts",
        "lineNumber": 717,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 712,
              "content": "const prompt = this.buildEmotionalAnalysisPrompt(section, chapters, emotionalContext);",
              "indent": 8
            },
            {
              "lineNumber": 713,
              "content": "let response: string = '';",
              "indent": 8
            },
            {
              "lineNumber": 714,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 715,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 716,
              "content": "response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 717,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 718,
              "content": ");",
              "indent": 12
            },
            {
              "lineNumber": 719,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 720,
              "content": "const analysis = JSON.parse(response);",
              "indent": 12
            },
            {
              "lineNumber": 721,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 722,
              "content": "// 基本的な検証",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 695,
            "distance": 22
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.overallRealization === ",
            "fullLength": 338,
            "truncatedContent": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.overallRealization === ",
            "hash": "f58ee330e823f27e3e808879b9ef4651",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "method_based",
            "suggestedPurpose": "performAIEmotionalAnalysis",
            "relatedMethods": [
              "performAIEmotionalAnalysis",
              "buildEmotionalAnalysisPrompt"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<EmotionalArcProgress>"
            ],
            "extractedTypes": [
              "EmotionalArcProgress>"
            ]
          },
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "plot",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "分析",
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "private",
            "async",
            "performAIEmotionalAnalysis",
            "section",
            "SectionPlot",
            "chapters",
            "Array",
            "chapterNumber",
            "number",
            "title"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "35ce0974632043ca74718864f3cf85af"
      },
      {
        "id": "call_5414a8ea",
        "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
        "fileName": "section-analyzer.ts",
        "lineNumber": 773,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 768,
              "content": ");",
              "indent": 8
            },
            {
              "lineNumber": 769,
              "content": "let response: string = '';",
              "indent": 8
            },
            {
              "lineNumber": 770,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 771,
              "content": "try {",
              "indent": 8
            },
            {
              "lineNumber": 772,
              "content": "response = await apiThrottler.throttledRequest(() =>",
              "indent": 12
            }
          ],
          "current": {
            "lineNumber": 773,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 16
          },
          "after": [
            {
              "lineNumber": 774,
              "content": ");",
              "indent": 12
            },
            {
              "lineNumber": 775,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 776,
              "content": "const suggestions = JSON.parse(response);",
              "indent": 12
            },
            {
              "lineNumber": 777,
              "content": "",
              "indent": 0
            },
            {
              "lineNumber": 778,
              "content": "// 基本的な検証",
              "indent": 12
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 743,
            "distance": 30
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}",
            "fullLength": 107,
            "truncatedContent": "Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}",
            "hash": "6af57150f3e5183b6af0cdc5d08770db",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const suggestions = JSON.parse(response);\n\n            // 基本的な検証\n            if (Array.isArray(suggestions)) {\n                logger.info(`Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}`);\n                return suggestions;\n            }\n\n            logger.warn(",
            "fullLength": 519,
            "truncatedContent": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const suggestions = JSON.parse(response);\n\n            // 基本的な検証\n            if (Array.isArray(suggestions)) {\n                logger.info(`Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}`);\n                return suggestions;\n            }\n\n            logger.warn(",
            "hash": "dde5c5e52719e86afd8e56d8d50a49b9",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", { response });\n            return this.generateDefaultImprovementSuggestions(section, coherenceAnalysis, objectiveProgress);\n        } catch (parseError) {\n            logger.error(",
            "fullLength": 183,
            "truncatedContent": ", { response });\n            return this.generateDefaultImprovementSuggestions(section, coherenceAnalysis, objectiveProgress);\n        } catch (parseError) {\n            logger.error(",
            "hash": "e3ce1269b1e81c40b431ecc491bd3c60",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": "Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}",
            "fullLength": 107,
            "truncatedContent": "Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}",
            "hash": "6af57150f3e5183b6af0cdc5d08770db",
            "hasVariables": true,
            "variableCount": 2
          },
          {
            "type": "method_based",
            "suggestedPurpose": "buildImprovementAnalysisPrompt",
            "relatedMethods": [
              "buildImprovementAnalysisPrompt",
              "coherenceAnalysis"
            ],
            "confidence": "medium"
          }
        ],
        "expectedOutputs": [
          {
            "type": "type_annotation",
            "types": [
              ": Promise<ImprovementSuggestion[]>"
            ],
            "extractedTypes": [
              "ImprovementSuggestion[]>"
            ]
          },
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "設定",
            "plot",
            "setting"
          ],
          "characterElements": [
            "キャラクター",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "generate",
            "build"
          ],
          "complexity": "low",
          "dependencies": [
            "gress",
            "emotionalArcProgress",
            "EmotionalArcProgress",
            "improvementContext",
            "any",
            "Promise",
            "ImprovementSuggestion",
            "const",
            "prompt",
            "this"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "dc29385e41bea363e65ef5eee28c88fe"
      },
      {
        "id": "call_27c6e3cd",
        "filePath": "src\\lib\\plot\\section\\section-designer.ts",
        "fileName": "section-designer.ts",
        "lineNumber": 165,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 160,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 161,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 162,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 163,
              "content": "// AIによる生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 164,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 165,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 166,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 167,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 168,
              "content": "// 応答をjsonとしてパース",
              "indent": 6
            },
            {
              "lineNumber": 169,
              "content": "try {",
              "indent": 6
            },
            {
              "lineNumber": 170,
              "content": "const keyScenes = JSON.parse(response);",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 101,
            "distance": 64
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 177,
            "truncatedContent": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "b133460cea1796cd488cf8e88b859090",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 177,
            "truncatedContent": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "b133460cea1796cd488cf8e88b859090",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", { response });\r\n        return this.generateDefaultKeyScenes(section, chapterCount);\r\n      } catch (parseError) {\r\n        logger.error(",
            "fullLength": 139,
            "truncatedContent": ", { response });\r\n        return this.generateDefaultKeyScenes(section, chapterCount);\r\n      } catch (parseError) {\r\n        logger.error(",
            "hash": "66619830a45c9eff0373ae37d360d46e",
            "keywords": [
              "generate",
              "Scene",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "scene",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "シーン",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "tionalArc",
            "opening",
            "emotion",
            "emotionalArc",
            "midpoint",
            "conclusion",
            "JSON",
            "description",
            "purpose",
            "relativePosition"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
      },
      {
        "id": "call_2fad31e3",
        "filePath": "src\\lib\\plot\\section\\section-designer.ts",
        "fileName": "section-designer.ts",
        "lineNumber": 264,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 259,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 260,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 261,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 262,
              "content": "// AIによる生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 263,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 264,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 265,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 266,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 267,
              "content": "// 応答をJSONとしてパース",
              "indent": 6
            },
            {
              "lineNumber": 268,
              "content": "try {",
              "indent": 6
            },
            {
              "lineNumber": 269,
              "content": "const turningPoints = JSON.parse(response);",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 183,
            "distance": 81
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ": 0.33\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 183,
            "truncatedContent": ": 0.33\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "c41be880c084fcabca11fb970cc6ebea",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ": 0.33\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 183,
            "truncatedContent": ": 0.33\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "c41be880c084fcabca11fb970cc6ebea",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", { response });\r\n        return this.generateDefaultTurningPoints(section);\r\n      } catch (parseError) {\r\n        logger.error(",
            "fullLength": 129,
            "truncatedContent": ", { response });\r\n        return this.generateDefaultTurningPoints(section);\r\n      } catch (parseError) {\r\n        logger.error(",
            "hash": "f30c764b844b2831f4682c5619554725",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "シーン",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "learning",
            "primaryLearningStage",
            "emotion",
            "emotionalArc",
            "opening",
            "midpoint",
            "conclusion",
            "JSON",
            "description",
            "impact"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
      },
      {
        "id": "call_36bd0422",
        "filePath": "src\\lib\\plot\\section\\section-designer.ts",
        "fileName": "section-designer.ts",
        "lineNumber": 349,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 344,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 345,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 346,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 347,
              "content": "// AIによる生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 348,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 349,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 350,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 351,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 352,
              "content": "// 応答をJSONとしてパース",
              "indent": 6
            },
            {
              "lineNumber": 353,
              "content": "try {",
              "indent": 6
            },
            {
              "lineNumber": 354,
              "content": "const threads = JSON.parse(response);",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 282,
            "distance": 67
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 177,
            "truncatedContent": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "b133460cea1796cd488cf8e88b859090",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 177,
            "truncatedContent": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "b133460cea1796cd488cf8e88b859090",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", { response });\r\n        return this.generateDefaultNarrativeThreads(section);\r\n      } catch (parseError) {\r\n        logger.error(",
            "fullLength": 132,
            "truncatedContent": ", { response });\r\n        return this.generateDefaultNarrativeThreads(section);\r\n      } catch (parseError) {\r\n        logger.error(",
            "hash": "009ffb6ed89e2908c0baa7c8c8a75353",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "シーン",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "theme",
            "learning",
            "mainConcept",
            "primaryLearningStage",
            "transformationalArc",
            "startingState",
            "endState",
            "JSON",
            "thread",
            "development"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
      },
      {
        "id": "call_871fb462",
        "filePath": "src\\lib\\plot\\section\\section-designer.ts",
        "fileName": "section-designer.ts",
        "lineNumber": 442,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 437,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 438,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 439,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 440,
              "content": "// AIによる生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 441,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 442,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 443,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 444,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 445,
              "content": "// 応答をJSONとしてパース",
              "indent": 6
            },
            {
              "lineNumber": 446,
              "content": "try {",
              "indent": 6
            },
            {
              "lineNumber": 447,
              "content": "const foreshadowing = JSON.parse(response);",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 367,
            "distance": 75
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ": 2\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 180,
            "truncatedContent": ": 2\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "67188a6448697428fb587f7bad43b483",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ": 2\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 180,
            "truncatedContent": ": 2\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "67188a6448697428fb587f7bad43b483",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", { response });\r\n        return this.generateDefaultForeshadowing(section);\r\n      } catch (parseError) {\r\n        logger.error(",
            "fullLength": 129,
            "truncatedContent": ", { response });\r\n        return this.generateDefaultForeshadowing(section);\r\n      } catch (parseError) {\r\n        logger.error(",
            "hash": "e8bc1594043af01ecdeb01cfb9b777ca",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "シーン",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "設計",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "structure",
            "theme",
            "narrativePhase",
            "section",
            "chapterRange",
            "start",
            "end",
            "JSON",
            "element",
            "plantingPoint"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
      },
      {
        "id": "call_a403e1b8",
        "filePath": "src\\lib\\plot\\section\\section-designer.ts",
        "fileName": "section-designer.ts",
        "lineNumber": 685,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 680,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 681,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 682,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 683,
              "content": "// AIによる生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 684,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 685,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 686,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 687,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 688,
              "content": "// 応答をJSONとしてパース",
              "indent": 6
            },
            {
              "lineNumber": 689,
              "content": "try {",
              "indent": 6
            },
            {
              "lineNumber": 690,
              "content": "const emotionalDesign = JSON.parse(response);",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 628,
            "distance": 57
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 164,
            "truncatedContent": "\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "a32a1970ca9a13471e352bc513f5fb20",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 164,
            "truncatedContent": "\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "a32a1970ca9a13471e352bc513f5fb20",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "シーン",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "design"
          ],
          "complexity": "low",
          "dependencies": [
            "conclusion",
            "tensionPoints",
            "relativePosition",
            "intensity",
            "description",
            "catharticMoment",
            "type",
            "intellectual",
            "readerEmotionalJourney",
            "emotionalPayoff"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
      },
      {
        "id": "call_f586e8f0",
        "filePath": "src\\lib\\plot\\section\\section-designer.ts",
        "fileName": "section-designer.ts",
        "lineNumber": 853,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 848,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 849,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 850,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 851,
              "content": "// AIによる生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 852,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 853,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 854,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 855,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 856,
              "content": "// 応答をJSONとしてパース",
              "indent": 6
            },
            {
              "lineNumber": 857,
              "content": "try {",
              "indent": 6
            },
            {
              "lineNumber": 858,
              "content": "const characterDesign = JSON.parse(response);",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 787,
            "distance": 66
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\r\n    },\r\n    ...\r\n  }\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 186,
            "truncatedContent": "\r\n    },\r\n    ...\r\n  }\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "64aa3dcf139eb30e40c669c4bbb9f1af",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n    },\r\n    ...\r\n  }\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 186,
            "truncatedContent": "\r\n    },\r\n    ...\r\n  }\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "64aa3dcf139eb30e40c669c4bbb9f1af",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "シーン",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "design"
          ],
          "complexity": "low",
          "dependencies": [
            "characters",
            "startingDynamic",
            "evolution",
            "endDynamic",
            "characterTransformations",
            "startingState",
            "internalObstacles",
            "growthMoments",
            "endState",
            "const"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
      },
      {
        "id": "call_fbc93dbd",
        "filePath": "src\\lib\\plot\\section\\section-designer.ts",
        "fileName": "section-designer.ts",
        "lineNumber": 1005,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 1000,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 1001,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 1002,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 1003,
              "content": "// AIによる生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 1004,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 1005,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 1006,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 1007,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 1008,
              "content": "// 応答をJSONとしてパース",
              "indent": 6
            },
            {
              "lineNumber": 1009,
              "content": "try {",
              "indent": 6
            },
            {
              "lineNumber": 1010,
              "content": "const outlines = JSON.parse(response);",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 949,
            "distance": 56
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
            "fullLength": 524,
            "truncatedContent": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
            "hash": "9ad88852ab2e8247ad7a7a5355653f91",
            "keywords": [
              "生成",
              "generate",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "]\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 178,
            "truncatedContent": "]\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "7ab089a00dd657b54ec119e503cb22f7",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
            "fullLength": 524,
            "truncatedContent": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
            "hash": "9ad88852ab2e8247ad7a7a5355653f91",
            "keywords": [
              "生成",
              "generate",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "]\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 178,
            "truncatedContent": "]\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "7ab089a00dd657b54ec119e503cb22f7",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
            "fullLength": 524,
            "truncatedContent": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
            "hash": "9ad88852ab2e8247ad7a7a5355653f91",
            "hasVariables": false,
            "variableCount": 0
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "シーン",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "JSON",
            "chapterNumber",
            "title",
            "summary",
            "learningStage",
            "EXPLORATION",
            "emotionalTone",
            "keyEvents",
            "const",
            "response"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
      },
      {
        "id": "call_27c6e3cd",
        "filePath": "src\\lib\\plot\\section\\section-designer.ts",
        "fileName": "section-designer.ts",
        "lineNumber": 165,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 160,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 161,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 162,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 163,
              "content": "// AIによる生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 164,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 165,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 166,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 167,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 168,
              "content": "// 応答をjsonとしてパース",
              "indent": 6
            },
            {
              "lineNumber": 169,
              "content": "try {",
              "indent": 6
            },
            {
              "lineNumber": 170,
              "content": "const keyScenes = JSON.parse(response);",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 101,
            "distance": 64
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 177,
            "truncatedContent": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "b133460cea1796cd488cf8e88b859090",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 177,
            "truncatedContent": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "b133460cea1796cd488cf8e88b859090",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", { response });\r\n        return this.generateDefaultKeyScenes(section, chapterCount);\r\n      } catch (parseError) {\r\n        logger.error(",
            "fullLength": 139,
            "truncatedContent": ", { response });\r\n        return this.generateDefaultKeyScenes(section, chapterCount);\r\n      } catch (parseError) {\r\n        logger.error(",
            "hash": "66619830a45c9eff0373ae37d360d46e",
            "keywords": [
              "generate",
              "Scene",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "scene",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "シーン",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "tionalArc",
            "opening",
            "emotion",
            "emotionalArc",
            "midpoint",
            "conclusion",
            "JSON",
            "description",
            "purpose",
            "relativePosition"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
      },
      {
        "id": "call_2fad31e3",
        "filePath": "src\\lib\\plot\\section\\section-designer.ts",
        "fileName": "section-designer.ts",
        "lineNumber": 264,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 259,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 260,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 261,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 262,
              "content": "// AIによる生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 263,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 264,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 265,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 266,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 267,
              "content": "// 応答をJSONとしてパース",
              "indent": 6
            },
            {
              "lineNumber": 268,
              "content": "try {",
              "indent": 6
            },
            {
              "lineNumber": 269,
              "content": "const turningPoints = JSON.parse(response);",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 183,
            "distance": 81
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ": 0.33\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 183,
            "truncatedContent": ": 0.33\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "c41be880c084fcabca11fb970cc6ebea",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ": 0.33\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 183,
            "truncatedContent": ": 0.33\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "c41be880c084fcabca11fb970cc6ebea",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", { response });\r\n        return this.generateDefaultTurningPoints(section);\r\n      } catch (parseError) {\r\n        logger.error(",
            "fullLength": 129,
            "truncatedContent": ", { response });\r\n        return this.generateDefaultTurningPoints(section);\r\n      } catch (parseError) {\r\n        logger.error(",
            "hash": "f30c764b844b2831f4682c5619554725",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "シーン",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "learning",
            "primaryLearningStage",
            "emotion",
            "emotionalArc",
            "opening",
            "midpoint",
            "conclusion",
            "JSON",
            "description",
            "impact"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
      },
      {
        "id": "call_36bd0422",
        "filePath": "src\\lib\\plot\\section\\section-designer.ts",
        "fileName": "section-designer.ts",
        "lineNumber": 349,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 344,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 345,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 346,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 347,
              "content": "// AIによる生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 348,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 349,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 350,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 351,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 352,
              "content": "// 応答をJSONとしてパース",
              "indent": 6
            },
            {
              "lineNumber": 353,
              "content": "try {",
              "indent": 6
            },
            {
              "lineNumber": 354,
              "content": "const threads = JSON.parse(response);",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 282,
            "distance": 67
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 177,
            "truncatedContent": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "b133460cea1796cd488cf8e88b859090",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 177,
            "truncatedContent": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "b133460cea1796cd488cf8e88b859090",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", { response });\r\n        return this.generateDefaultNarrativeThreads(section);\r\n      } catch (parseError) {\r\n        logger.error(",
            "fullLength": 132,
            "truncatedContent": ", { response });\r\n        return this.generateDefaultNarrativeThreads(section);\r\n      } catch (parseError) {\r\n        logger.error(",
            "hash": "009ffb6ed89e2908c0baa7c8c8a75353",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "シーン",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "theme",
            "learning",
            "mainConcept",
            "primaryLearningStage",
            "transformationalArc",
            "startingState",
            "endState",
            "JSON",
            "thread",
            "development"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
      },
      {
        "id": "call_871fb462",
        "filePath": "src\\lib\\plot\\section\\section-designer.ts",
        "fileName": "section-designer.ts",
        "lineNumber": 442,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 437,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 438,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 439,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 440,
              "content": "// AIによる生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 441,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 442,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 443,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 444,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 445,
              "content": "// 応答をJSONとしてパース",
              "indent": 6
            },
            {
              "lineNumber": 446,
              "content": "try {",
              "indent": 6
            },
            {
              "lineNumber": 447,
              "content": "const foreshadowing = JSON.parse(response);",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 367,
            "distance": 75
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ": 2\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 180,
            "truncatedContent": ": 2\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "67188a6448697428fb587f7bad43b483",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ": 2\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 180,
            "truncatedContent": ": 2\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "67188a6448697428fb587f7bad43b483",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", { response });\r\n        return this.generateDefaultForeshadowing(section);\r\n      } catch (parseError) {\r\n        logger.error(",
            "fullLength": 129,
            "truncatedContent": ", { response });\r\n        return this.generateDefaultForeshadowing(section);\r\n      } catch (parseError) {\r\n        logger.error(",
            "hash": "e8bc1594043af01ecdeb01cfb9b777ca",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "シーン",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "設計",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "structure",
            "theme",
            "narrativePhase",
            "section",
            "chapterRange",
            "start",
            "end",
            "JSON",
            "element",
            "plantingPoint"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
      },
      {
        "id": "call_a403e1b8",
        "filePath": "src\\lib\\plot\\section\\section-designer.ts",
        "fileName": "section-designer.ts",
        "lineNumber": 685,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 680,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 681,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 682,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 683,
              "content": "// AIによる生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 684,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 685,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 686,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 687,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 688,
              "content": "// 応答をJSONとしてパース",
              "indent": 6
            },
            {
              "lineNumber": 689,
              "content": "try {",
              "indent": 6
            },
            {
              "lineNumber": 690,
              "content": "const emotionalDesign = JSON.parse(response);",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 628,
            "distance": 57
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 164,
            "truncatedContent": "\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "a32a1970ca9a13471e352bc513f5fb20",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 164,
            "truncatedContent": "\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "a32a1970ca9a13471e352bc513f5fb20",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "シーン",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "design"
          ],
          "complexity": "low",
          "dependencies": [
            "conclusion",
            "tensionPoints",
            "relativePosition",
            "intensity",
            "description",
            "catharticMoment",
            "type",
            "intellectual",
            "readerEmotionalJourney",
            "emotionalPayoff"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
      },
      {
        "id": "call_f586e8f0",
        "filePath": "src\\lib\\plot\\section\\section-designer.ts",
        "fileName": "section-designer.ts",
        "lineNumber": 853,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 848,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 849,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 850,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 851,
              "content": "// AIによる生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 852,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 853,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 854,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 855,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 856,
              "content": "// 応答をJSONとしてパース",
              "indent": 6
            },
            {
              "lineNumber": 857,
              "content": "try {",
              "indent": 6
            },
            {
              "lineNumber": 858,
              "content": "const characterDesign = JSON.parse(response);",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 787,
            "distance": 66
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\r\n    },\r\n    ...\r\n  }\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 186,
            "truncatedContent": "\r\n    },\r\n    ...\r\n  }\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "64aa3dcf139eb30e40c669c4bbb9f1af",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n    },\r\n    ...\r\n  }\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 186,
            "truncatedContent": "\r\n    },\r\n    ...\r\n  }\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "64aa3dcf139eb30e40c669c4bbb9f1af",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "シーン",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "design"
          ],
          "complexity": "low",
          "dependencies": [
            "characters",
            "startingDynamic",
            "evolution",
            "endDynamic",
            "characterTransformations",
            "startingState",
            "internalObstacles",
            "growthMoments",
            "endState",
            "const"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
      },
      {
        "id": "call_fbc93dbd",
        "filePath": "src\\lib\\plot\\section\\section-designer.ts",
        "fileName": "section-designer.ts",
        "lineNumber": 1005,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": "geminiClient.generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 1000,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 1001,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 1002,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 1003,
              "content": "// AIによる生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 1004,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 1005,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 1006,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 1007,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 1008,
              "content": "// 応答をJSONとしてパース",
              "indent": 6
            },
            {
              "lineNumber": 1009,
              "content": "try {",
              "indent": 6
            },
            {
              "lineNumber": 1010,
              "content": "const outlines = JSON.parse(response);",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 949,
            "distance": 56
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
            "fullLength": 524,
            "truncatedContent": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
            "hash": "9ad88852ab2e8247ad7a7a5355653f91",
            "keywords": [
              "生成",
              "generate",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "]\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 178,
            "truncatedContent": "]\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "7ab089a00dd657b54ec119e503cb22f7",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
            "fullLength": 524,
            "truncatedContent": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
            "hash": "9ad88852ab2e8247ad7a7a5355653f91",
            "keywords": [
              "生成",
              "generate",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "]\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 178,
            "truncatedContent": "]\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "7ab089a00dd657b54ec119e503cb22f7",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
            "fullLength": 524,
            "truncatedContent": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
            "hash": "9ad88852ab2e8247ad7a7a5355653f91",
            "hasVariables": false,
            "variableCount": 0
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "シーン",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "JSON",
            "chapterNumber",
            "title",
            "summary",
            "learningStage",
            "EXPLORATION",
            "emotionalTone",
            "keyEvents",
            "const",
            "response"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
      },
      {
        "id": "call_c9e2a5af",
        "filePath": "src\\lib\\plot\\section\\section-designer.ts",
        "fileName": "section-designer.ts",
        "lineNumber": 165,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 160,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 161,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 162,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 163,
              "content": "// AIによる生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 164,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 165,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 166,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 167,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 168,
              "content": "// 応答をjsonとしてパース",
              "indent": 6
            },
            {
              "lineNumber": 169,
              "content": "try {",
              "indent": 6
            },
            {
              "lineNumber": 170,
              "content": "const keyScenes = JSON.parse(response);",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 101,
            "distance": 64
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 177,
            "truncatedContent": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "b133460cea1796cd488cf8e88b859090",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 177,
            "truncatedContent": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "b133460cea1796cd488cf8e88b859090",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", { response });\r\n        return this.generateDefaultKeyScenes(section, chapterCount);\r\n      } catch (parseError) {\r\n        logger.error(",
            "fullLength": 139,
            "truncatedContent": ", { response });\r\n        return this.generateDefaultKeyScenes(section, chapterCount);\r\n      } catch (parseError) {\r\n        logger.error(",
            "hash": "66619830a45c9eff0373ae37d360d46e",
            "keywords": [
              "generate",
              "Scene",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "scene",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "シーン",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "ening",
            "emotion",
            "emotionalArc",
            "midpoint",
            "conclusion",
            "JSON",
            "description",
            "purpose",
            "relativePosition",
            "learningConnection"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "892777074cbbda29148b1644ce692bf0"
      },
      {
        "id": "call_f2eeedb1",
        "filePath": "src\\lib\\plot\\section\\section-designer.ts",
        "fileName": "section-designer.ts",
        "lineNumber": 264,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 259,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 260,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 261,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 262,
              "content": "// AIによる生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 263,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 264,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 265,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 266,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 267,
              "content": "// 応答をJSONとしてパース",
              "indent": 6
            },
            {
              "lineNumber": 268,
              "content": "try {",
              "indent": 6
            },
            {
              "lineNumber": 269,
              "content": "const turningPoints = JSON.parse(response);",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 183,
            "distance": 81
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ": 0.33\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 183,
            "truncatedContent": ": 0.33\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "c41be880c084fcabca11fb970cc6ebea",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ": 0.33\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 183,
            "truncatedContent": ": 0.33\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "c41be880c084fcabca11fb970cc6ebea",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", { response });\r\n        return this.generateDefaultTurningPoints(section);\r\n      } catch (parseError) {\r\n        logger.error(",
            "fullLength": 129,
            "truncatedContent": ", { response });\r\n        return this.generateDefaultTurningPoints(section);\r\n      } catch (parseError) {\r\n        logger.error(",
            "hash": "f30c764b844b2831f4682c5619554725",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "シーン",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "primaryLearningStage",
            "emotion",
            "emotionalArc",
            "opening",
            "midpoint",
            "conclusion",
            "JSON",
            "description",
            "impact",
            "relativePosition"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "892777074cbbda29148b1644ce692bf0"
      },
      {
        "id": "call_bcb69358",
        "filePath": "src\\lib\\plot\\section\\section-designer.ts",
        "fileName": "section-designer.ts",
        "lineNumber": 349,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 344,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 345,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 346,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 347,
              "content": "// AIによる生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 348,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 349,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 350,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 351,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 352,
              "content": "// 応答をJSONとしてパース",
              "indent": 6
            },
            {
              "lineNumber": 353,
              "content": "try {",
              "indent": 6
            },
            {
              "lineNumber": 354,
              "content": "const threads = JSON.parse(response);",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 282,
            "distance": 67
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 177,
            "truncatedContent": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "b133460cea1796cd488cf8e88b859090",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 177,
            "truncatedContent": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "b133460cea1796cd488cf8e88b859090",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", { response });\r\n        return this.generateDefaultNarrativeThreads(section);\r\n      } catch (parseError) {\r\n        logger.error(",
            "fullLength": 132,
            "truncatedContent": ", { response });\r\n        return this.generateDefaultNarrativeThreads(section);\r\n      } catch (parseError) {\r\n        logger.error(",
            "hash": "009ffb6ed89e2908c0baa7c8c8a75353",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "シーン",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "theme",
            "learning",
            "mainConcept",
            "primaryLearningStage",
            "transformationalArc",
            "startingState",
            "endState",
            "JSON",
            "thread",
            "development"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "892777074cbbda29148b1644ce692bf0"
      },
      {
        "id": "call_6efd7ed4",
        "filePath": "src\\lib\\plot\\section\\section-designer.ts",
        "fileName": "section-designer.ts",
        "lineNumber": 442,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 437,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 438,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 439,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 440,
              "content": "// AIによる生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 441,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 442,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 443,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 444,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 445,
              "content": "// 応答をJSONとしてパース",
              "indent": 6
            },
            {
              "lineNumber": 446,
              "content": "try {",
              "indent": 6
            },
            {
              "lineNumber": 447,
              "content": "const foreshadowing = JSON.parse(response);",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "catch",
            "startLine": 367,
            "distance": 75
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ": 2\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 180,
            "truncatedContent": ": 2\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "67188a6448697428fb587f7bad43b483",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ": 2\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 180,
            "truncatedContent": ": 2\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "67188a6448697428fb587f7bad43b483",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ", { response });\r\n        return this.generateDefaultForeshadowing(section);\r\n      } catch (parseError) {\r\n        logger.error(",
            "fullLength": 129,
            "truncatedContent": ", { response });\r\n        return this.generateDefaultForeshadowing(section);\r\n      } catch (parseError) {\r\n        logger.error(",
            "hash": "e8bc1594043af01ecdeb01cfb9b777ca",
            "keywords": [
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "シーン",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "structure",
            "theme",
            "narrativePhase",
            "section",
            "chapterRange",
            "start",
            "end",
            "JSON",
            "element",
            "plantingPoint"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": true
          }
        },
        "duplicateHash": "892777074cbbda29148b1644ce692bf0"
      },
      {
        "id": "call_73b771d0",
        "filePath": "src\\lib\\plot\\section\\section-designer.ts",
        "fileName": "section-designer.ts",
        "lineNumber": 685,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 680,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 681,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 682,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 683,
              "content": "// AIによる生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 684,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 685,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 686,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 687,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 688,
              "content": "// 応答をJSONとしてパース",
              "indent": 6
            },
            {
              "lineNumber": 689,
              "content": "try {",
              "indent": 6
            },
            {
              "lineNumber": 690,
              "content": "const emotionalDesign = JSON.parse(response);",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 628,
            "distance": 57
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 164,
            "truncatedContent": "\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "a32a1970ca9a13471e352bc513f5fb20",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 164,
            "truncatedContent": "\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "a32a1970ca9a13471e352bc513f5fb20",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "description",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "シーン",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "design"
          ],
          "complexity": "low",
          "dependencies": [
            "conclusion",
            "tensionPoints",
            "relativePosition",
            "intensity",
            "description",
            "catharticMoment",
            "type",
            "intellectual",
            "readerEmotionalJourney",
            "emotionalPayoff"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "892777074cbbda29148b1644ce692bf0"
      },
      {
        "id": "call_caf3f08f",
        "filePath": "src\\lib\\plot\\section\\section-designer.ts",
        "fileName": "section-designer.ts",
        "lineNumber": 853,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 848,
              "content": "}",
              "indent": 0
            },
            {
              "lineNumber": 849,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 850,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 851,
              "content": "// AIによる生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 852,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 853,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 854,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 855,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 856,
              "content": "// 応答をJSONとしてパース",
              "indent": 6
            },
            {
              "lineNumber": 857,
              "content": "try {",
              "indent": 6
            },
            {
              "lineNumber": 858,
              "content": "const characterDesign = JSON.parse(response);",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 787,
            "distance": 66
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": "\r\n    },\r\n    ...\r\n  }\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 186,
            "truncatedContent": "\r\n    },\r\n    ...\r\n  }\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "64aa3dcf139eb30e40c669c4bbb9f1af",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "\r\n    },\r\n    ...\r\n  }\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 186,
            "truncatedContent": "\r\n    },\r\n    ...\r\n  }\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "64aa3dcf139eb30e40c669c4bbb9f1af",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "character",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "シーン",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate",
            "design"
          ],
          "complexity": "low",
          "dependencies": [
            "haracters",
            "startingDynamic",
            "evolution",
            "endDynamic",
            "characterTransformations",
            "startingState",
            "internalObstacles",
            "growthMoments",
            "endState",
            "const"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "892777074cbbda29148b1644ce692bf0"
      },
      {
        "id": "call_571cb420",
        "filePath": "src\\lib\\plot\\section\\section-designer.ts",
        "fileName": "section-designer.ts",
        "lineNumber": 1005,
        "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "matchedPattern": "\\.generateText\\s*\\(",
        "callMethod": "generateText",
        "fullMatch": ".generateText(",
        "context": {
          "before": [
            {
              "lineNumber": 1000,
              "content": "]",
              "indent": 0
            },
            {
              "lineNumber": 1001,
              "content": "`;",
              "indent": 0
            },
            {
              "lineNumber": 1002,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 1003,
              "content": "// AIによる生成を実行",
              "indent": 6
            },
            {
              "lineNumber": 1004,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "indent": 6
            }
          ],
          "current": {
            "lineNumber": 1005,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "indent": 8
          },
          "after": [
            {
              "lineNumber": 1006,
              "content": ");",
              "indent": 6
            },
            {
              "lineNumber": 1007,
              "content": "",
              "indent": 1
            },
            {
              "lineNumber": 1008,
              "content": "// 応答をJSONとしてパース",
              "indent": 6
            },
            {
              "lineNumber": 1009,
              "content": "try {",
              "indent": 6
            },
            {
              "lineNumber": 1010,
              "content": "const outlines = JSON.parse(response);",
              "indent": 8
            }
          ],
          "functionContext": {
            "functionName": "if",
            "startLine": 949,
            "distance": 56
          }
        },
        "prompts": [
          {
            "type": "pattern_match",
            "content": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
            "fullLength": 524,
            "truncatedContent": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
            "hash": "9ad88852ab2e8247ad7a7a5355653f91",
            "keywords": [
              "生成",
              "generate",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "]\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 178,
            "truncatedContent": "]\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "7ab089a00dd657b54ec119e503cb22f7",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
            "fullLength": 524,
            "truncatedContent": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
            "hash": "9ad88852ab2e8247ad7a7a5355653f91",
            "keywords": [
              "生成",
              "generate",
              "chapter"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "pattern_match",
            "content": "]\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "fullLength": 178,
            "truncatedContent": "]\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
            "hash": "7ab089a00dd657b54ec119e503cb22f7",
            "keywords": [
              "生成",
              "generate"
            ],
            "sentiment": "neutral",
            "complexity": "low",
            "language": "english",
            "novelElements": {
              "genres": [],
              "perspective": "third_person",
              "tense": "present"
            }
          },
          {
            "type": "template_literal",
            "content": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
            "fullLength": 524,
            "truncatedContent": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
            "hash": "9ad88852ab2e8247ad7a7a5355653f91",
            "hasVariables": false,
            "variableCount": 0
          }
        ],
        "expectedOutputs": [
          {
            "type": "json_expected",
            "indicator": "JSON\\.parse\\s*\\(",
            "confidence": "high"
          },
          {
            "type": "novel_structure",
            "element": "title",
            "confidence": "medium"
          },
          {
            "type": "novel_structure",
            "element": "chapter",
            "confidence": "medium"
          }
        ],
        "parameters": {},
        "novelSpecific": {
          "hasNovelKeywords": true,
          "detectedGenres": [
            "SF"
          ],
          "storyElements": [
            "プロット",
            "シーン",
            "plot",
            "scene"
          ],
          "characterElements": [
            "キャラクター",
            "登場人物",
            "主人公",
            "character"
          ],
          "narrativeStyle": "unknown"
        },
        "semanticAnalysis": {
          "purposeIndicators": [
            "生成",
            "generate"
          ],
          "complexity": "low",
          "dependencies": [
            "JSON",
            "chapterNumber",
            "title",
            "summary",
            "learningStage",
            "EXPLORATION",
            "emotionalTone",
            "keyEvents",
            "const",
            "response"
          ],
          "outputUsage": {
            "isAssigned": true,
            "isAwaited": false,
            "isChained": true,
            "isLogged": false,
            "isReturned": false
          }
        },
        "duplicateHash": "892777074cbbda29148b1644ce692bf0"
      }
    ],
    "duplicateAnalysis": {
      "exactDuplicates": [
        {
          "hash": "002f1430c4a1c8bbb9e1ca504a580ed2",
          "calls": [
            {
              "id": "call_1948d757",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "fileName": "character-depth-service.ts",
              "lineNumber": 390,
              "lineContent": "this.geminiClient.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 385,
                    "content": "// ジャンル適合性分析プロンプトを構築",
                    "indent": 12
                  },
                  {
                    "lineNumber": 386,
                    "content": "const prompt = this.buildGenreAnalysisPrompt(character, genre);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 387,
                    "content": "",
                    "indent": 13
                  },
                  {
                    "lineNumber": 388,
                    "content": "// AI分析を実行",
                    "indent": 12
                  },
                  {
                    "lineNumber": 389,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 390,
                  "content": "this.geminiClient.generateText(prompt, {",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 391,
                    "content": "temperature: 0.3,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 392,
                    "content": "targetLength: 800,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 393,
                    "content": "purpose: 'analysis',",
                    "indent": 20
                  },
                  {
                    "lineNumber": 394,
                    "content": "responseFormat: 'json'",
                    "indent": 20
                  },
                  {
                    "lineNumber": 395,
                    "content": "})",
                    "indent": 16
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 364,
                  "distance": 26
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                  "fullLength": 761,
                  "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                  "hash": "3231e0c6916fe75790dc783a2e1b8b35",
                  "keywords": [
                    "分析",
                    "生成",
                    "character",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: ",
                  "fullLength": 267,
                  "truncatedContent": "\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: ",
                  "hash": "1fb0292de1d0158a628ab39a27644d03",
                  "keywords": [
                    "生成"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                  "fullLength": 761,
                  "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                  "hash": "3231e0c6916fe75790dc783a2e1b8b35",
                  "keywords": [
                    "分析",
                    "生成",
                    "character",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "template_literal",
                  "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                  "fullLength": 761,
                  "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                  "hash": "3231e0c6916fe75790dc783a2e1b8b35",
                  "hasVariables": false,
                  "variableCount": 0
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "buildGenreAnalysisPrompt",
                  "relatedMethods": [
                    "buildGenreAnalysisPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<DepthRecommendation[]>"
                  ],
                  "extractedTypes": [
                    "DepthRecommendation[]>"
                  ]
                },
                {
                  "type": "novel_structure",
                  "element": "title",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "分析",
                  "構築",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "urns",
                  "async",
                  "suggestGenreBasedTraits",
                  "character",
                  "Character",
                  "genre",
                  "string",
                  "Promise",
                  "DepthRecommendation",
                  "try"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "002f1430c4a1c8bbb9e1ca504a580ed2"
            },
            {
              "id": "call_1948d757",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "fileName": "character-depth-service.ts",
              "lineNumber": 390,
              "lineContent": "this.geminiClient.generateText(prompt, {",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 385,
                    "content": "// ジャンル適合性分析プロンプトを構築",
                    "indent": 12
                  },
                  {
                    "lineNumber": 386,
                    "content": "const prompt = this.buildGenreAnalysisPrompt(character, genre);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 387,
                    "content": "",
                    "indent": 13
                  },
                  {
                    "lineNumber": 388,
                    "content": "// AI分析を実行",
                    "indent": 12
                  },
                  {
                    "lineNumber": 389,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 390,
                  "content": "this.geminiClient.generateText(prompt, {",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 391,
                    "content": "temperature: 0.3,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 392,
                    "content": "targetLength: 800,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 393,
                    "content": "purpose: 'analysis',",
                    "indent": 20
                  },
                  {
                    "lineNumber": 394,
                    "content": "responseFormat: 'json'",
                    "indent": 20
                  },
                  {
                    "lineNumber": 395,
                    "content": "})",
                    "indent": 16
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 364,
                  "distance": 26
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                  "fullLength": 761,
                  "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                  "hash": "3231e0c6916fe75790dc783a2e1b8b35",
                  "keywords": [
                    "分析",
                    "生成",
                    "character",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: ",
                  "fullLength": 267,
                  "truncatedContent": "\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: ",
                  "hash": "1fb0292de1d0158a628ab39a27644d03",
                  "keywords": [
                    "生成"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                  "fullLength": 761,
                  "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                  "hash": "3231e0c6916fe75790dc783a2e1b8b35",
                  "keywords": [
                    "分析",
                    "生成",
                    "character",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "template_literal",
                  "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                  "fullLength": 761,
                  "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                  "hash": "3231e0c6916fe75790dc783a2e1b8b35",
                  "hasVariables": false,
                  "variableCount": 0
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "buildGenreAnalysisPrompt",
                  "relatedMethods": [
                    "buildGenreAnalysisPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<DepthRecommendation[]>"
                  ],
                  "extractedTypes": [
                    "DepthRecommendation[]>"
                  ]
                },
                {
                  "type": "novel_structure",
                  "element": "title",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "分析",
                  "構築",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "urns",
                  "async",
                  "suggestGenreBasedTraits",
                  "character",
                  "Character",
                  "genre",
                  "string",
                  "Promise",
                  "DepthRecommendation",
                  "try"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "002f1430c4a1c8bbb9e1ca504a580ed2"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "6656550b65c6ecd65464c7016e689e65",
          "calls": [
            {
              "id": "call_1c9a2ed2",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "fileName": "character-depth-service.ts",
              "lineNumber": 689,
              "lineContent": "this.geminiClient.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 684,
                    "content": "): Promise<CharacterArcRecommendation[]> {",
                    "indent": 4
                  },
                  {
                    "lineNumber": 685,
                    "content": "try {",
                    "indent": 8
                  },
                  {
                    "lineNumber": 686,
                    "content": "const prompt = this.buildArcOptimizationPrompt(character, analysisResult, chapterNumber);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 687,
                    "content": "",
                    "indent": 13
                  },
                  {
                    "lineNumber": 688,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 689,
                  "content": "this.geminiClient.generateText(prompt, {",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 690,
                    "content": "temperature: 0.3,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 691,
                    "content": "targetLength: 800,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 692,
                    "content": "purpose: 'creation',",
                    "indent": 20
                  },
                  {
                    "lineNumber": 693,
                    "content": "responseFormat: 'json'",
                    "indent": 20
                  },
                  {
                    "lineNumber": 694,
                    "content": "})",
                    "indent": 16
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 670,
                  "distance": 19
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "アーク推奨生成エラー: ${character.name}",
                  "fullLength": 29,
                  "truncatedContent": "アーク推奨生成エラー: ${character.name}",
                  "hash": "576e7d84ea2592c66dbf82ee784f8a60",
                  "keywords": [
                    "生成",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "CharacterAnalysis",
                  "relatedMethods": [
                    "CharacterAnalysis",
                    "buildArcOptimizationPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": CharacterAnalysisResult",
                    ": Promise<CharacterArcRecommendation[]>"
                  ],
                  "extractedTypes": [
                    "CharacterAnalysisResult",
                    "CharacterArcRecommendation[]>"
                  ]
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "private",
                  "async",
                  "generateArcOptimizationRecommendations",
                  "character",
                  "Character",
                  "analysisResult",
                  "CharacterAnalysisResult",
                  "chapterNumber",
                  "number",
                  "Promise"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "6656550b65c6ecd65464c7016e689e65"
            },
            {
              "id": "call_3ab7176e",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "fileName": "character-depth-service.ts",
              "lineNumber": 716,
              "lineContent": "this.geminiClient.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 711,
                    "content": "): Promise<MotivationEnhancement[]> {",
                    "indent": 4
                  },
                  {
                    "lineNumber": 712,
                    "content": "try {",
                    "indent": 8
                  },
                  {
                    "lineNumber": 713,
                    "content": "const prompt = this.buildMotivationEnhancementPrompt(character, psychology);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 714,
                    "content": "",
                    "indent": 13
                  },
                  {
                    "lineNumber": 715,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 716,
                  "content": "this.geminiClient.generateText(prompt, {",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 717,
                    "content": "temperature: 0.3,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 718,
                    "content": "targetLength: 800,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 719,
                    "content": "purpose: 'creation',",
                    "indent": 20
                  },
                  {
                    "lineNumber": 720,
                    "content": "responseFormat: 'json'",
                    "indent": 20
                  },
                  {
                    "lineNumber": 721,
                    "content": "})",
                    "indent": 16
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 698,
                  "distance": 18
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "動機強化推奨生成エラー: ${character.name}",
                  "fullLength": 30,
                  "truncatedContent": "動機強化推奨生成エラー: ${character.name}",
                  "hash": "ed094c0116a864caf1639c6fd61d9a1c",
                  "keywords": [
                    "生成",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "buildMotivationEnhancementPrompt",
                  "relatedMethods": [
                    "buildMotivationEnhancementPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<MotivationEnhancement[]>"
                  ],
                  "extractedTypes": [
                    "MotivationEnhancement[]>"
                  ]
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "rateFallbackArcRecommendations",
                  "character",
                  "private",
                  "async",
                  "generateMotivationEnhancements",
                  "Character",
                  "psychology",
                  "CharacterPsychology",
                  "Promise",
                  "MotivationEnhancement"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "6656550b65c6ecd65464c7016e689e65"
            },
            {
              "id": "call_1c9a2ed2",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "fileName": "character-depth-service.ts",
              "lineNumber": 689,
              "lineContent": "this.geminiClient.generateText(prompt, {",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 684,
                    "content": "): Promise<CharacterArcRecommendation[]> {",
                    "indent": 4
                  },
                  {
                    "lineNumber": 685,
                    "content": "try {",
                    "indent": 8
                  },
                  {
                    "lineNumber": 686,
                    "content": "const prompt = this.buildArcOptimizationPrompt(character, analysisResult, chapterNumber);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 687,
                    "content": "",
                    "indent": 13
                  },
                  {
                    "lineNumber": 688,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 689,
                  "content": "this.geminiClient.generateText(prompt, {",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 690,
                    "content": "temperature: 0.3,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 691,
                    "content": "targetLength: 800,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 692,
                    "content": "purpose: 'creation',",
                    "indent": 20
                  },
                  {
                    "lineNumber": 693,
                    "content": "responseFormat: 'json'",
                    "indent": 20
                  },
                  {
                    "lineNumber": 694,
                    "content": "})",
                    "indent": 16
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 670,
                  "distance": 19
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "アーク推奨生成エラー: ${character.name}",
                  "fullLength": 29,
                  "truncatedContent": "アーク推奨生成エラー: ${character.name}",
                  "hash": "576e7d84ea2592c66dbf82ee784f8a60",
                  "keywords": [
                    "生成",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "CharacterAnalysis",
                  "relatedMethods": [
                    "CharacterAnalysis",
                    "buildArcOptimizationPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": CharacterAnalysisResult",
                    ": Promise<CharacterArcRecommendation[]>"
                  ],
                  "extractedTypes": [
                    "CharacterAnalysisResult",
                    "CharacterArcRecommendation[]>"
                  ]
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "private",
                  "async",
                  "generateArcOptimizationRecommendations",
                  "character",
                  "Character",
                  "analysisResult",
                  "CharacterAnalysisResult",
                  "chapterNumber",
                  "number",
                  "Promise"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "6656550b65c6ecd65464c7016e689e65"
            },
            {
              "id": "call_3ab7176e",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "fileName": "character-depth-service.ts",
              "lineNumber": 716,
              "lineContent": "this.geminiClient.generateText(prompt, {",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 711,
                    "content": "): Promise<MotivationEnhancement[]> {",
                    "indent": 4
                  },
                  {
                    "lineNumber": 712,
                    "content": "try {",
                    "indent": 8
                  },
                  {
                    "lineNumber": 713,
                    "content": "const prompt = this.buildMotivationEnhancementPrompt(character, psychology);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 714,
                    "content": "",
                    "indent": 13
                  },
                  {
                    "lineNumber": 715,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 716,
                  "content": "this.geminiClient.generateText(prompt, {",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 717,
                    "content": "temperature: 0.3,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 718,
                    "content": "targetLength: 800,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 719,
                    "content": "purpose: 'creation',",
                    "indent": 20
                  },
                  {
                    "lineNumber": 720,
                    "content": "responseFormat: 'json'",
                    "indent": 20
                  },
                  {
                    "lineNumber": 721,
                    "content": "})",
                    "indent": 16
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 698,
                  "distance": 18
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "動機強化推奨生成エラー: ${character.name}",
                  "fullLength": 30,
                  "truncatedContent": "動機強化推奨生成エラー: ${character.name}",
                  "hash": "ed094c0116a864caf1639c6fd61d9a1c",
                  "keywords": [
                    "生成",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "buildMotivationEnhancementPrompt",
                  "relatedMethods": [
                    "buildMotivationEnhancementPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<MotivationEnhancement[]>"
                  ],
                  "extractedTypes": [
                    "MotivationEnhancement[]>"
                  ]
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "rateFallbackArcRecommendations",
                  "character",
                  "private",
                  "async",
                  "generateMotivationEnhancements",
                  "Character",
                  "psychology",
                  "CharacterPsychology",
                  "Promise",
                  "MotivationEnhancement"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "6656550b65c6ecd65464c7016e689e65"
            }
          ],
          "count": 4,
          "severity": "high"
        },
        {
          "hash": "70df527efb8f1ea6c86160329072acc5",
          "calls": [
            {
              "id": "call_18183c83",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "fileName": "character-depth-service.ts",
              "lineNumber": 750,
              "lineContent": "this.geminiClient.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 745,
                    "content": "}",
                    "indent": 12
                  },
                  {
                    "lineNumber": 746,
                    "content": "",
                    "indent": 13
                  },
                  {
                    "lineNumber": 747,
                    "content": "const prompt = this.buildContrastRecommendationsPrompt(character, sameTypeCharacters);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 748,
                    "content": "",
                    "indent": 13
                  },
                  {
                    "lineNumber": 749,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 750,
                  "content": "this.geminiClient.generateText(prompt, {",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 751,
                    "content": "temperature: 0.4,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 752,
                    "content": "targetLength: 800,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 753,
                    "content": "purpose: 'creation',",
                    "indent": 20
                  },
                  {
                    "lineNumber": 754,
                    "content": "responseFormat: 'json'",
                    "indent": 20
                  },
                  {
                    "lineNumber": 755,
                    "content": "})",
                    "indent": 16
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 743,
                  "distance": 7
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "コントラスト推奨生成エラー: ${character.name}",
                  "fullLength": 32,
                  "truncatedContent": "コントラスト推奨生成エラー: ${character.name}",
                  "hash": "4cbbecf723eae2c9ef64c0e39f398284",
                  "keywords": [
                    "生成",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "buildContrastRecommendationsPrompt",
                  "relatedMethods": [
                    "buildContrastRecommendationsPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<ContrastRecommendation[]>"
                  ],
                  "extractedTypes": [
                    "ContrastRecommendation[]>"
                  ]
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.4",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "getCharactersByType",
                  "const",
                  "sameTypeCharacters",
                  "await",
                  "this",
                  "characterManager",
                  "character",
                  "type",
                  "length",
                  "return"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "70df527efb8f1ea6c86160329072acc5"
            },
            {
              "id": "call_18183c83",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "fileName": "character-depth-service.ts",
              "lineNumber": 750,
              "lineContent": "this.geminiClient.generateText(prompt, {",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 745,
                    "content": "}",
                    "indent": 12
                  },
                  {
                    "lineNumber": 746,
                    "content": "",
                    "indent": 13
                  },
                  {
                    "lineNumber": 747,
                    "content": "const prompt = this.buildContrastRecommendationsPrompt(character, sameTypeCharacters);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 748,
                    "content": "",
                    "indent": 13
                  },
                  {
                    "lineNumber": 749,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 750,
                  "content": "this.geminiClient.generateText(prompt, {",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 751,
                    "content": "temperature: 0.4,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 752,
                    "content": "targetLength: 800,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 753,
                    "content": "purpose: 'creation',",
                    "indent": 20
                  },
                  {
                    "lineNumber": 754,
                    "content": "responseFormat: 'json'",
                    "indent": 20
                  },
                  {
                    "lineNumber": 755,
                    "content": "})",
                    "indent": 16
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 743,
                  "distance": 7
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "コントラスト推奨生成エラー: ${character.name}",
                  "fullLength": 32,
                  "truncatedContent": "コントラスト推奨生成エラー: ${character.name}",
                  "hash": "4cbbecf723eae2c9ef64c0e39f398284",
                  "keywords": [
                    "生成",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "buildContrastRecommendationsPrompt",
                  "relatedMethods": [
                    "buildContrastRecommendationsPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<ContrastRecommendation[]>"
                  ],
                  "extractedTypes": [
                    "ContrastRecommendation[]>"
                  ]
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.4",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "getCharactersByType",
                  "const",
                  "sameTypeCharacters",
                  "await",
                  "this",
                  "characterManager",
                  "character",
                  "type",
                  "length",
                  "return"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "70df527efb8f1ea6c86160329072acc5"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "2e24e5b1b9624d6abea305d59c71d90c",
          "calls": [
            {
              "id": "call_580712e8",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "fileName": "character-depth-service.ts",
              "lineNumber": 390,
              "lineContent": "this.geminiClient.generateText(prompt, {",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 385,
                    "content": "// ジャンル適合性分析プロンプトを構築",
                    "indent": 12
                  },
                  {
                    "lineNumber": 386,
                    "content": "const prompt = this.buildGenreAnalysisPrompt(character, genre);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 387,
                    "content": "",
                    "indent": 13
                  },
                  {
                    "lineNumber": 388,
                    "content": "// AI分析を実行",
                    "indent": 12
                  },
                  {
                    "lineNumber": 389,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 390,
                  "content": "this.geminiClient.generateText(prompt, {",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 391,
                    "content": "temperature: 0.3,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 392,
                    "content": "targetLength: 800,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 393,
                    "content": "purpose: 'analysis',",
                    "indent": 20
                  },
                  {
                    "lineNumber": 394,
                    "content": "responseFormat: 'json'",
                    "indent": 20
                  },
                  {
                    "lineNumber": 395,
                    "content": "})",
                    "indent": 16
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 364,
                  "distance": 26
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                  "fullLength": 761,
                  "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                  "hash": "3231e0c6916fe75790dc783a2e1b8b35",
                  "keywords": [
                    "分析",
                    "生成",
                    "character",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: ",
                  "fullLength": 267,
                  "truncatedContent": "\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: ",
                  "hash": "1fb0292de1d0158a628ab39a27644d03",
                  "keywords": [
                    "生成"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                  "fullLength": 761,
                  "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                  "hash": "3231e0c6916fe75790dc783a2e1b8b35",
                  "keywords": [
                    "分析",
                    "生成",
                    "character",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "template_literal",
                  "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                  "fullLength": 761,
                  "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                  "hash": "3231e0c6916fe75790dc783a2e1b8b35",
                  "hasVariables": false,
                  "variableCount": 0
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "buildGenreAnalysisPrompt",
                  "relatedMethods": [
                    "buildGenreAnalysisPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<DepthRecommendation[]>"
                  ],
                  "extractedTypes": [
                    "DepthRecommendation[]>"
                  ]
                },
                {
                  "type": "novel_structure",
                  "element": "title",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "分析",
                  "構築",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "async",
                  "suggestGenreBasedTraits",
                  "character",
                  "Character",
                  "genre",
                  "string",
                  "Promise",
                  "DepthRecommendation",
                  "try",
                  "this"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "2e24e5b1b9624d6abea305d59c71d90c"
            },
            {
              "id": "call_874c5434",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "fileName": "character-depth-service.ts",
              "lineNumber": 689,
              "lineContent": "this.geminiClient.generateText(prompt, {",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 684,
                    "content": "): Promise<CharacterArcRecommendation[]> {",
                    "indent": 4
                  },
                  {
                    "lineNumber": 685,
                    "content": "try {",
                    "indent": 8
                  },
                  {
                    "lineNumber": 686,
                    "content": "const prompt = this.buildArcOptimizationPrompt(character, analysisResult, chapterNumber);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 687,
                    "content": "",
                    "indent": 13
                  },
                  {
                    "lineNumber": 688,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 689,
                  "content": "this.geminiClient.generateText(prompt, {",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 690,
                    "content": "temperature: 0.3,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 691,
                    "content": "targetLength: 800,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 692,
                    "content": "purpose: 'creation',",
                    "indent": 20
                  },
                  {
                    "lineNumber": 693,
                    "content": "responseFormat: 'json'",
                    "indent": 20
                  },
                  {
                    "lineNumber": 694,
                    "content": "})",
                    "indent": 16
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 670,
                  "distance": 19
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "アーク推奨生成エラー: ${character.name}",
                  "fullLength": 29,
                  "truncatedContent": "アーク推奨生成エラー: ${character.name}",
                  "hash": "576e7d84ea2592c66dbf82ee784f8a60",
                  "keywords": [
                    "生成",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "CharacterAnalysis",
                  "relatedMethods": [
                    "CharacterAnalysis",
                    "buildArcOptimizationPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": CharacterAnalysisResult",
                    ": Promise<CharacterArcRecommendation[]>"
                  ],
                  "extractedTypes": [
                    "CharacterAnalysisResult",
                    "CharacterArcRecommendation[]>"
                  ]
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "private",
                  "async",
                  "generateArcOptimizationRecommendations",
                  "character",
                  "Character",
                  "analysisResult",
                  "CharacterAnalysisResult",
                  "chapterNumber",
                  "number",
                  "Promise"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "2e24e5b1b9624d6abea305d59c71d90c"
            },
            {
              "id": "call_5ef55a3b",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "fileName": "character-depth-service.ts",
              "lineNumber": 716,
              "lineContent": "this.geminiClient.generateText(prompt, {",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 711,
                    "content": "): Promise<MotivationEnhancement[]> {",
                    "indent": 4
                  },
                  {
                    "lineNumber": 712,
                    "content": "try {",
                    "indent": 8
                  },
                  {
                    "lineNumber": 713,
                    "content": "const prompt = this.buildMotivationEnhancementPrompt(character, psychology);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 714,
                    "content": "",
                    "indent": 13
                  },
                  {
                    "lineNumber": 715,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 716,
                  "content": "this.geminiClient.generateText(prompt, {",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 717,
                    "content": "temperature: 0.3,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 718,
                    "content": "targetLength: 800,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 719,
                    "content": "purpose: 'creation',",
                    "indent": 20
                  },
                  {
                    "lineNumber": 720,
                    "content": "responseFormat: 'json'",
                    "indent": 20
                  },
                  {
                    "lineNumber": 721,
                    "content": "})",
                    "indent": 16
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 698,
                  "distance": 18
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "動機強化推奨生成エラー: ${character.name}",
                  "fullLength": 30,
                  "truncatedContent": "動機強化推奨生成エラー: ${character.name}",
                  "hash": "ed094c0116a864caf1639c6fd61d9a1c",
                  "keywords": [
                    "生成",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "buildMotivationEnhancementPrompt",
                  "relatedMethods": [
                    "buildMotivationEnhancementPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<MotivationEnhancement[]>"
                  ],
                  "extractedTypes": [
                    "MotivationEnhancement[]>"
                  ]
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "ArcRecommendations",
                  "character",
                  "private",
                  "async",
                  "generateMotivationEnhancements",
                  "Character",
                  "psychology",
                  "CharacterPsychology",
                  "Promise",
                  "MotivationEnhancement"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "2e24e5b1b9624d6abea305d59c71d90c"
            }
          ],
          "count": 3,
          "severity": "high"
        },
        {
          "hash": "1502eb2fbdffef35b195f62bf6fba15c",
          "calls": [
            {
              "id": "call_77847414",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "fileName": "style-optimization-service.ts",
              "lineNumber": 529,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiAdapter.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 524,
                    "content": "}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 525,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 526,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 527,
                    "content": "// APIスロットリングを使用してAI生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 528,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 529,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 530,
                    "content": "temperature: 0.4,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 531,
                    "content": "purpose: 'suggestion',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 532,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 533,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 534,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 448,
                  "distance": 81
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "AIによる代替表現生成中にエラーが発生しました",
                  "fullLength": 23,
                  "truncatedContent": "AIによる代替表現生成中にエラーが発生しました",
                  "hash": "09891be9e88f0f4c1f5aef50b686bf0d",
                  "keywords": [
                    "生成"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [],
              "parameters": {
                "temperature": {
                  "value": "0.4",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "SF",
                  "ミステリー",
                  "ロマンス"
                ],
                "storyElements": [
                  "シーン",
                  "設定",
                  "世界観",
                  "背景"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "dialogueAlternatives",
                  "conjunctionAlternatives",
                  "structureAlternatives",
                  "API",
                  "const",
                  "response",
                  "await",
                  "apiThrottler",
                  "throttledRequest",
                  "this"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "1502eb2fbdffef35b195f62bf6fba15c"
            },
            {
              "id": "call_87abbd70",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "fileName": "style-optimization-service.ts",
              "lineNumber": 901,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiAdapter.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 896,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 897,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 898,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 899,
                    "content": "// APIスロットリングを使用してAI生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 900,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 901,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 902,
                    "content": "temperature: 0.4,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 903,
                    "content": "purpose: 'suggestion',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 904,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 905,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 906,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 828,
                  "distance": 73
                }
              },
              "prompts": [],
              "expectedOutputs": [],
              "parameters": {
                "temperature": {
                  "value": "0.4",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "SF",
                  "ミステリー",
                  "ロマンス"
                ],
                "storyElements": [
                  "シーン",
                  "設定",
                  "世界観",
                  "背景"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate",
                  "create"
                ],
                "complexity": "low",
                "dependencies": [
                  "tension",
                  "JSON",
                  "type",
                  "issue",
                  "suggestion",
                  "example",
                  "before",
                  "after",
                  "API",
                  "const"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "1502eb2fbdffef35b195f62bf6fba15c"
            },
            {
              "id": "call_f9f6e71f",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "fileName": "style-optimization-service.ts",
              "lineNumber": 1148,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiAdapter.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 1143,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1144,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1145,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 1146,
                    "content": "// APIスロットリングを使用してAI生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 1147,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 1148,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 1149,
                    "content": "temperature: 0.4,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 1150,
                    "content": "purpose: 'suggestion',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 1151,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 1152,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 1153,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 1087,
                  "distance": 61
                }
              },
              "prompts": [],
              "expectedOutputs": [],
              "parameters": {
                "temperature": {
                  "value": "0.4",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "SF",
                  "ミステリー",
                  "ロマンス"
                ],
                "storyElements": [
                  "シーン",
                  "設定",
                  "世界観",
                  "背景"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate",
                  "create"
                ],
                "complexity": "low",
                "dependencies": [
                  "limitedRepetitions",
                  "map",
                  "rep",
                  "idx",
                  "join",
                  "JSON",
                  "original",
                  "alternatives",
                  "context",
                  "API"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "1502eb2fbdffef35b195f62bf6fba15c"
            },
            {
              "id": "call_b3a40c33",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "fileName": "theme-enhancement-service.ts",
              "lineNumber": 551,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiAdapter.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 546,
                    "content": "}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 547,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 548,
                    "content": "",
                    "indent": 7
                  },
                  {
                    "lineNumber": 549,
                    "content": "// APIスロットリングを使用してAI生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 550,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 551,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 552,
                    "content": "temperature: 0.4,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 553,
                    "content": "purpose: 'suggestion',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 554,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 555,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 556,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 470,
                  "distance": 81
                }
              },
              "prompts": [],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.4",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "SF",
                  "ミステリー",
                  "fantasy",
                  "mystery"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "世界観",
                  "plot",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate",
                  "create"
                ],
                "complexity": "low",
                "dependencies": [
                  "phaseStrategy",
                  "genreStrategy",
                  "JSON",
                  "plotTechniques",
                  "technique",
                  "description",
                  "example",
                  "reference",
                  "characterTechniques",
                  "atmosphereTechniques"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "1502eb2fbdffef35b195f62bf6fba15c"
            },
            {
              "id": "call_587109fc",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "fileName": "theme-enhancement-service.ts",
              "lineNumber": 633,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiAdapter.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 628,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 629,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 630,
                    "content": "",
                    "indent": 7
                  },
                  {
                    "lineNumber": 631,
                    "content": "// APIスロットリングを使用してAI生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 632,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 633,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 634,
                    "content": "temperature: 0.4,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 635,
                    "content": "purpose: 'suggestion',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 636,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 637,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 638,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 569,
                  "distance": 64
                }
              },
              "prompts": [],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.4",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "SF",
                  "ミステリー",
                  "fantasy",
                  "mystery"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "世界観",
                  "plot",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate",
                  "create"
                ],
                "complexity": "low",
                "dependencies": [
                  "general",
                  "genreStrategy",
                  "JSON",
                  "theme",
                  "symbolName",
                  "description",
                  "usage",
                  "effect",
                  "caution",
                  "API"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "1502eb2fbdffef35b195f62bf6fba15c"
            },
            {
              "id": "call_64534711",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "fileName": "theme-enhancement-service.ts",
              "lineNumber": 801,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiAdapter.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 796,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 797,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 798,
                    "content": "",
                    "indent": 7
                  },
                  {
                    "lineNumber": 799,
                    "content": "// APIスロットリングを使用してAI生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 800,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 801,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 802,
                    "content": "temperature: 0.4,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 803,
                    "content": "purpose: 'suggestion',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 804,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 805,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 806,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 737,
                  "distance": 64
                }
              },
              "prompts": [],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.4",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "SF",
                  "ミステリー",
                  "fantasy",
                  "mystery"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "世界観",
                  "plot",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "genreStrategy",
                  "JSON",
                  "techniqueName",
                  "description",
                  "example",
                  "effect",
                  "suitableGenres",
                  "themeRelevance",
                  "API",
                  "const"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "1502eb2fbdffef35b195f62bf6fba15c"
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "hash": "e2c34ca4e6171e2d60149565e268b20c",
          "calls": [
            {
              "id": "call_c02c53f9",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "fileName": "style-optimization-service.ts",
              "lineNumber": 719,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiAdapter.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 714,
                    "content": "}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 715,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 716,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 717,
                    "content": "// APIスロットリングを使用してAI生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 718,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 719,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 720,
                    "content": "temperature: 0.3,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 721,
                    "content": "purpose: 'suggestion',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 722,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 723,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 724,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 669,
                  "distance": 50
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ", ...]\r\n}\r\n`;\r\n\r\n      // APIスロットリングを使用してAI生成を実行\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: 'suggestion',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // デフォルト値を準備\r\n      const defaultOptimization: SubjectPatternOptimization = {\r\n        score: subjectPatterns.subjectDiversityScore,\r\n        problems: [],\r\n        suggestions: [\r\n          ",
                  "fullLength": 485,
                  "truncatedContent": ", ...]\r\n}\r\n`;\r\n\r\n      // APIスロットリングを使用してAI生成を実行\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: 'suggestion',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // デフォルト値を準備\r\n      const defaultOptimization: SubjectPatternOptimization = {\r\n        score: subjectPatterns.subjectDiversityScore,\r\n        problems: [],\r\n        suggestions: [\r\n          ",
                  "hash": "9c856847a97833ecaa73ea416401d96e",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ", ...]\r\n}\r\n`;\r\n\r\n      // APIスロットリングを使用してAI生成を実行\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: 'suggestion',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // デフォルト値を準備\r\n      const defaultOptimization: SubjectPatternOptimization = {\r\n        score: subjectPatterns.subjectDiversityScore,\r\n        problems: [],\r\n        suggestions: [\r\n          ",
                  "fullLength": 485,
                  "truncatedContent": ", ...]\r\n}\r\n`;\r\n\r\n      // APIスロットリングを使用してAI生成を実行\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: 'suggestion',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // デフォルト値を準備\r\n      const defaultOptimization: SubjectPatternOptimization = {\r\n        score: subjectPatterns.subjectDiversityScore,\r\n        problems: [],\r\n        suggestions: [\r\n          ",
                  "hash": "9c856847a97833ecaa73ea416401d96e",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "SF",
                  "ミステリー",
                  "ロマンス"
                ],
                "storyElements": [
                  "シーン",
                  "設定",
                  "世界観",
                  "背景"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "bjects",
                  "map",
                  "subject",
                  "count",
                  "join",
                  "context",
                  "genre",
                  "theme",
                  "JSON",
                  "score"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "e2c34ca4e6171e2d60149565e268b20c"
            },
            {
              "id": "call_1035d952",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "fileName": "theme-enhancement-service.ts",
              "lineNumber": 450,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiAdapter.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 445,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 446,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 447,
                    "content": "",
                    "indent": 7
                  },
                  {
                    "lineNumber": 448,
                    "content": "// APIスロットリングを使用してAI生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 449,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 450,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 451,
                    "content": "temperature: 0.3,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 452,
                    "content": "purpose: 'suggestion',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 453,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 454,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 455,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 389,
                  "distance": 61
                }
              },
              "prompts": [],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "SF",
                  "ミステリー",
                  "fantasy",
                  "mystery"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "世界観",
                  "plot",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate",
                  "create"
                ],
                "complexity": "low",
                "dependencies": [
                  "phaseStrategy",
                  "genreStrategy",
                  "JSON",
                  "theme",
                  "currentStrength",
                  "suggestion",
                  "approach",
                  "example",
                  "impact",
                  "API"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "e2c34ca4e6171e2d60149565e268b20c"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "53f9c919e94033b84e90fe8e4a208688",
          "calls": [
            {
              "id": "call_7ab19737",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "fileName": "style-optimization-service.ts",
              "lineNumber": 529,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 524,
                    "content": "}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 525,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 526,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 527,
                    "content": "// APIスロットリングを使用してAI生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 528,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 529,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 530,
                    "content": "temperature: 0.4,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 531,
                    "content": "purpose: 'suggestion',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 532,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 533,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 534,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 448,
                  "distance": 81
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "AIによる代替表現生成中にエラーが発生しました",
                  "fullLength": 23,
                  "truncatedContent": "AIによる代替表現生成中にエラーが発生しました",
                  "hash": "09891be9e88f0f4c1f5aef50b686bf0d",
                  "keywords": [
                    "生成"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [],
              "parameters": {
                "temperature": {
                  "value": "0.4",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "SF",
                  "ミステリー",
                  "ロマンス"
                ],
                "storyElements": [
                  "シーン",
                  "設定",
                  "世界観",
                  "背景"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "dialogueAlternatives",
                  "conjunctionAlternatives",
                  "structureAlternatives",
                  "API",
                  "const",
                  "response",
                  "await",
                  "apiThrottler",
                  "throttledRequest",
                  "this"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "53f9c919e94033b84e90fe8e4a208688"
            },
            {
              "id": "call_3c5880f8",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "fileName": "style-optimization-service.ts",
              "lineNumber": 901,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 896,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 897,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 898,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 899,
                    "content": "// APIスロットリングを使用してAI生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 900,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 901,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 902,
                    "content": "temperature: 0.4,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 903,
                    "content": "purpose: 'suggestion',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 904,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 905,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 906,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 828,
                  "distance": 73
                }
              },
              "prompts": [],
              "expectedOutputs": [],
              "parameters": {
                "temperature": {
                  "value": "0.4",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "SF",
                  "ミステリー",
                  "ロマンス"
                ],
                "storyElements": [
                  "シーン",
                  "設定",
                  "世界観",
                  "背景"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate",
                  "create"
                ],
                "complexity": "low",
                "dependencies": [
                  "JSON",
                  "type",
                  "issue",
                  "suggestion",
                  "example",
                  "before",
                  "after",
                  "API",
                  "const",
                  "response"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "53f9c919e94033b84e90fe8e4a208688"
            },
            {
              "id": "call_90bbb4b4",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "fileName": "style-optimization-service.ts",
              "lineNumber": 1148,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 1143,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1144,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1145,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 1146,
                    "content": "// APIスロットリングを使用してAI生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 1147,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 1148,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 1149,
                    "content": "temperature: 0.4,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 1150,
                    "content": "purpose: 'suggestion',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 1151,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 1152,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 1153,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 1087,
                  "distance": 61
                }
              },
              "prompts": [],
              "expectedOutputs": [],
              "parameters": {
                "temperature": {
                  "value": "0.4",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "SF",
                  "ミステリー",
                  "ロマンス"
                ],
                "storyElements": [
                  "シーン",
                  "設定",
                  "世界観",
                  "背景"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate",
                  "create"
                ],
                "complexity": "low",
                "dependencies": [
                  "itions",
                  "map",
                  "rep",
                  "idx",
                  "join",
                  "JSON",
                  "original",
                  "alternatives",
                  "context",
                  "API"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "53f9c919e94033b84e90fe8e4a208688"
            },
            {
              "id": "call_0ae55a83",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "fileName": "theme-enhancement-service.ts",
              "lineNumber": 551,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 546,
                    "content": "}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 547,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 548,
                    "content": "",
                    "indent": 7
                  },
                  {
                    "lineNumber": 549,
                    "content": "// APIスロットリングを使用してAI生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 550,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 551,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 552,
                    "content": "temperature: 0.4,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 553,
                    "content": "purpose: 'suggestion',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 554,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 555,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 556,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 470,
                  "distance": 81
                }
              },
              "prompts": [],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.4",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "SF",
                  "ミステリー",
                  "fantasy",
                  "mystery"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "世界観",
                  "plot",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate",
                  "create"
                ],
                "complexity": "low",
                "dependencies": [
                  "ategy",
                  "genreStrategy",
                  "JSON",
                  "plotTechniques",
                  "technique",
                  "description",
                  "example",
                  "reference",
                  "characterTechniques",
                  "atmosphereTechniques"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "53f9c919e94033b84e90fe8e4a208688"
            },
            {
              "id": "call_40b206b4",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "fileName": "theme-enhancement-service.ts",
              "lineNumber": 633,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 628,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 629,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 630,
                    "content": "",
                    "indent": 7
                  },
                  {
                    "lineNumber": 631,
                    "content": "// APIスロットリングを使用してAI生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 632,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 633,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 634,
                    "content": "temperature: 0.4,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 635,
                    "content": "purpose: 'suggestion',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 636,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 637,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 638,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 569,
                  "distance": 64
                }
              },
              "prompts": [],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.4",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "SF",
                  "ミステリー",
                  "fantasy",
                  "mystery"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "世界観",
                  "plot",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate",
                  "create"
                ],
                "complexity": "low",
                "dependencies": [
                  "genreStrategy",
                  "JSON",
                  "theme",
                  "symbolName",
                  "description",
                  "usage",
                  "effect",
                  "caution",
                  "API",
                  "const"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "53f9c919e94033b84e90fe8e4a208688"
            },
            {
              "id": "call_a2a64800",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "fileName": "theme-enhancement-service.ts",
              "lineNumber": 801,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 796,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 797,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 798,
                    "content": "",
                    "indent": 7
                  },
                  {
                    "lineNumber": 799,
                    "content": "// APIスロットリングを使用してAI生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 800,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 801,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 802,
                    "content": "temperature: 0.4,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 803,
                    "content": "purpose: 'suggestion',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 804,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 805,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 806,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 737,
                  "distance": 64
                }
              },
              "prompts": [],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.4",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "SF",
                  "ミステリー",
                  "fantasy",
                  "mystery"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "世界観",
                  "plot",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "genreStrategy",
                  "JSON",
                  "techniqueName",
                  "description",
                  "example",
                  "effect",
                  "suitableGenres",
                  "themeRelevance",
                  "API",
                  "const"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "53f9c919e94033b84e90fe8e4a208688"
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "hash": "6f4ca77e200882cc8341a60491a7fc41",
          "calls": [
            {
              "id": "call_7376c0dd",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "fileName": "style-optimization-service.ts",
              "lineNumber": 719,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 714,
                    "content": "}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 715,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 716,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 717,
                    "content": "// APIスロットリングを使用してAI生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 718,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 719,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 720,
                    "content": "temperature: 0.3,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 721,
                    "content": "purpose: 'suggestion',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 722,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 723,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 724,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 669,
                  "distance": 50
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ", ...]\r\n}\r\n`;\r\n\r\n      // APIスロットリングを使用してAI生成を実行\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: 'suggestion',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // デフォルト値を準備\r\n      const defaultOptimization: SubjectPatternOptimization = {\r\n        score: subjectPatterns.subjectDiversityScore,\r\n        problems: [],\r\n        suggestions: [\r\n          ",
                  "fullLength": 485,
                  "truncatedContent": ", ...]\r\n}\r\n`;\r\n\r\n      // APIスロットリングを使用してAI生成を実行\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: 'suggestion',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // デフォルト値を準備\r\n      const defaultOptimization: SubjectPatternOptimization = {\r\n        score: subjectPatterns.subjectDiversityScore,\r\n        problems: [],\r\n        suggestions: [\r\n          ",
                  "hash": "9c856847a97833ecaa73ea416401d96e",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ", ...]\r\n}\r\n`;\r\n\r\n      // APIスロットリングを使用してAI生成を実行\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: 'suggestion',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // デフォルト値を準備\r\n      const defaultOptimization: SubjectPatternOptimization = {\r\n        score: subjectPatterns.subjectDiversityScore,\r\n        problems: [],\r\n        suggestions: [\r\n          ",
                  "fullLength": 485,
                  "truncatedContent": ", ...]\r\n}\r\n`;\r\n\r\n      // APIスロットリングを使用してAI生成を実行\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiAdapter.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: 'suggestion',\r\n          responseFormat: 'json'\r\n        })\r\n      );\r\n\r\n      // デフォルト値を準備\r\n      const defaultOptimization: SubjectPatternOptimization = {\r\n        score: subjectPatterns.subjectDiversityScore,\r\n        problems: [],\r\n        suggestions: [\r\n          ",
                  "hash": "9c856847a97833ecaa73ea416401d96e",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "SF",
                  "ミステリー",
                  "ロマンス"
                ],
                "storyElements": [
                  "シーン",
                  "設定",
                  "世界観",
                  "背景"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "subject",
                  "count",
                  "join",
                  "context",
                  "genre",
                  "theme",
                  "JSON",
                  "score",
                  "problems",
                  "suggestions"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "6f4ca77e200882cc8341a60491a7fc41"
            },
            {
              "id": "call_b943c4c9",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "fileName": "theme-enhancement-service.ts",
              "lineNumber": 450,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 445,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 446,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 447,
                    "content": "",
                    "indent": 7
                  },
                  {
                    "lineNumber": 448,
                    "content": "// APIスロットリングを使用してAI生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 449,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 450,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 451,
                    "content": "temperature: 0.3,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 452,
                    "content": "purpose: 'suggestion',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 453,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 454,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 455,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 389,
                  "distance": 61
                }
              },
              "prompts": [],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "SF",
                  "ミステリー",
                  "fantasy",
                  "mystery"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "世界観",
                  "plot",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate",
                  "create"
                ],
                "complexity": "low",
                "dependencies": [
                  "phaseStrategy",
                  "genreStrategy",
                  "JSON",
                  "theme",
                  "currentStrength",
                  "suggestion",
                  "approach",
                  "example",
                  "impact",
                  "API"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "6f4ca77e200882cc8341a60491a7fc41"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "54e38612037403030ec4454f3d8509f9",
          "calls": [
            {
              "id": "call_f85b10f3",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "fileName": "character-analysis-service.ts",
              "lineNumber": 342,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiAdapter.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 337,
                    "content": "\"scenes\": [\"シーン1\", \"シーン2\"]",
                    "indent": 4
                  },
                  {
                    "lineNumber": 338,
                    "content": "}",
                    "indent": 2
                  },
                  {
                    "lineNumber": 339,
                    "content": "]`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 340,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 341,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 342,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 343,
                    "content": "temperature: 0.2,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 344,
                    "content": "purpose: 'analysis',",
                    "indent": 20
                  },
                  {
                    "lineNumber": 345,
                    "content": "responseFormat: 'json'",
                    "indent": 20
                  },
                  {
                    "lineNumber": 346,
                    "content": "})",
                    "indent": 16
                  },
                  {
                    "lineNumber": 347,
                    "content": ");",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 291,
                  "distance": 51
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "Failed to analyze character appearances",
                  "fullLength": 39,
                  "truncatedContent": "Failed to analyze character appearances",
                  "hash": "fab657ba7d641c9ae422fa6998465b8f",
                  "keywords": [
                    "analyze",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "scene",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "dialogue",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.2",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [],
                "storyElements": [
                  "シーン",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "generate",
                  "analyze"
                ],
                "complexity": "low",
                "dependencies": [
                  "JSON",
                  "characterName",
                  "dialogueCount",
                  "significance",
                  "actions",
                  "emotions",
                  "scenes",
                  "const",
                  "response",
                  "await"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "54e38612037403030ec4454f3d8509f9"
            },
            {
              "id": "call_73ca6c9a",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "fileName": "character-analysis-service.ts",
              "lineNumber": 511,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiAdapter.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 506,
                    "content": "重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：",
                    "indent": 0
                  },
                  {
                    "lineNumber": 507,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 508,
                    "content": "[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 509,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 510,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 511,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 512,
                    "content": "temperature: 0.2,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 513,
                    "content": "purpose: 'analysis',",
                    "indent": 20
                  },
                  {
                    "lineNumber": 514,
                    "content": "responseFormat: 'json'",
                    "indent": 20
                  },
                  {
                    "lineNumber": 515,
                    "content": "})",
                    "indent": 16
                  },
                  {
                    "lineNumber": 516,
                    "content": ");",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 495,
                  "distance": 16
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[",
                  "fullLength": 150,
                  "truncatedContent": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[",
                  "hash": "6e7fdf93795824a03f557aca129aeaa6",
                  "keywords": [
                    "小説",
                    "章",
                    "キャラクター",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]",
                  "fullLength": 182,
                  "truncatedContent": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]",
                  "hash": "aafe42113775e5b5cfb322f4b02038ae",
                  "keywords": [
                    "小説",
                    "章",
                    "キャラクター",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ");\r\n\r\n            const prompt = `\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]`;\r\n\r\n            const response = await apiThrottler.throttledRequest(() =>\r\n                this.geminiAdapter.generateText(prompt, {\r\n                    temperature: 0.2,\r\n                    purpose: ",
                  "fullLength": 421,
                  "truncatedContent": ");\r\n\r\n            const prompt = `\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]`;\r\n\r\n            const response = await apiThrottler.throttledRequest(() =>\r\n                this.geminiAdapter.generateText(prompt, {\r\n                    temperature: 0.2,\r\n                    purpose: ",
                  "hash": "75ef48161f3b26651494cb75e153ebf9",
                  "keywords": [
                    "小説",
                    "章",
                    "キャラクター",
                    "character",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ");\r\n\r\n            const prompt = `\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]`;\r\n\r\n            const response = await apiThrottler.throttledRequest(() =>\r\n                this.geminiAdapter.generateText(prompt, {\r\n                    temperature: 0.2,\r\n                    purpose: ",
                  "fullLength": 421,
                  "truncatedContent": ");\r\n\r\n            const prompt = `\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]`;\r\n\r\n            const response = await apiThrottler.throttledRequest(() =>\r\n                this.geminiAdapter.generateText(prompt, {\r\n                    temperature: 0.2,\r\n                    purpose: ",
                  "hash": "75ef48161f3b26651494cb75e153ebf9",
                  "keywords": [
                    "小説",
                    "章",
                    "キャラクター",
                    "character",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "variable_assignment",
                  "variableName": "prompt",
                  "content": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[",
                  "fullLength": 150,
                  "truncatedContent": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[",
                  "hash": "6e7fdf93795824a03f557aca129aeaa6"
                },
                {
                  "type": "template_literal",
                  "content": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]",
                  "fullLength": 182,
                  "truncatedContent": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]",
                  "hash": "aafe42113775e5b5cfb322f4b02038ae",
                  "hasVariables": true,
                  "variableCount": 2
                }
              ],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.2",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [],
                "storyElements": [
                  "シーン",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "updatedCharacters",
                  "length",
                  "return",
                  "const",
                  "characterNames",
                  "map",
                  "char",
                  "name",
                  "join",
                  "prompt"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "54e38612037403030ec4454f3d8509f9"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "a2c48ffe909f25492d0fc894bda96199",
          "calls": [
            {
              "id": "call_47799132",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "fileName": "character-analysis-service.ts",
              "lineNumber": 401,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiAdapter.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 396,
                    "content": "\"psychologicalProfile\": \"心理プロファイルの説明\"",
                    "indent": 4
                  },
                  {
                    "lineNumber": 397,
                    "content": "}",
                    "indent": 2
                  },
                  {
                    "lineNumber": 398,
                    "content": "]`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 399,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 400,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 401,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 402,
                    "content": "temperature: 0.3,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 403,
                    "content": "purpose: 'analysis',",
                    "indent": 20
                  },
                  {
                    "lineNumber": 404,
                    "content": "responseFormat: 'json'",
                    "indent": 20
                  },
                  {
                    "lineNumber": 405,
                    "content": "})",
                    "indent": 16
                  },
                  {
                    "lineNumber": 406,
                    "content": ");",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 352,
                  "distance": 49
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "Failed to analyze character psychologies",
                  "fullLength": 40,
                  "truncatedContent": "Failed to analyze character psychologies",
                  "hash": "c576709f7b4c4141bbb970b83dc56a5f",
                  "keywords": [
                    "analyze",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "conflict",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [],
                "storyElements": [
                  "シーン",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "generate",
                  "analyze"
                ],
                "complexity": "low",
                "dependencies": [
                  "emotionalState",
                  "motivations",
                  "conflicts",
                  "growthPoints",
                  "psychologicalProfile",
                  "JSON",
                  "characterName",
                  "const",
                  "response",
                  "await"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "a2c48ffe909f25492d0fc894bda96199"
            },
            {
              "id": "call_222993c5",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "fileName": "character-analysis-service.ts",
              "lineNumber": 464,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiAdapter.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 459,
                    "content": "\"development\": \"関係の発展についての説明\"",
                    "indent": 4
                  },
                  {
                    "lineNumber": 460,
                    "content": "}",
                    "indent": 2
                  },
                  {
                    "lineNumber": 461,
                    "content": "]`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 462,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 463,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 464,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 465,
                    "content": "temperature: 0.3,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 466,
                    "content": "purpose: 'analysis',",
                    "indent": 20
                  },
                  {
                    "lineNumber": 467,
                    "content": "responseFormat: 'json'",
                    "indent": 20
                  },
                  {
                    "lineNumber": 468,
                    "content": "})",
                    "indent": 16
                  },
                  {
                    "lineNumber": 469,
                    "content": ");",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 411,
                  "distance": 53
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "Failed to analyze relationship dynamics",
                  "fullLength": 39,
                  "truncatedContent": "Failed to analyze relationship dynamics",
                  "hash": "573a5da98ca232f0ca2caf45e97a9ebb",
                  "keywords": [
                    "analyze"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [],
                "storyElements": [
                  "シーン",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "generate",
                  "analyze"
                ],
                "complexity": "low",
                "dependencies": [
                  "content",
                  "substring",
                  "JSON",
                  "character1",
                  "character2",
                  "relationshipType",
                  "strength",
                  "development",
                  "const",
                  "response"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "a2c48ffe909f25492d0fc894bda96199"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "dd21b42f0aa469cf4c28f7566d50eb85",
          "calls": [
            {
              "id": "call_9b3d30c4",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "fileName": "character-analysis-service.ts",
              "lineNumber": 264,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 259,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 260,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 261,
                    "content": "成長が見られないキャラクターは配列に含めないでください。`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 262,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 263,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 264,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 265,
                    "content": "temperature: 0.3,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 266,
                    "content": "purpose: 'analysis',",
                    "indent": 20
                  },
                  {
                    "lineNumber": 267,
                    "content": "responseFormat: 'json'",
                    "indent": 20
                  },
                  {
                    "lineNumber": 268,
                    "content": "})",
                    "indent": 16
                  },
                  {
                    "lineNumber": 269,
                    "content": ");",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 223,
                  "distance": 41
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\r\n                })\r\n            );\r\n\r\n            const parsedGrowth = JsonParser.parseFromAIResponse<any[]>(response, []);\r\n\r\n            // 成長が実際にあるキャラクターのみをフィルタリング\r\n            const updatedCharacters = parsedGrowth.filter(char =>\r\n                (char.parameterChanges && char.parameterChanges.length > 0) ||\r\n                (char.skillAcquisitions && char.skillAcquisitions.length > 0) ||\r\n                (char.growthPhase && char.growthPhase !== ",
                  "fullLength": 457,
                  "truncatedContent": "\r\n                })\r\n            );\r\n\r\n            const parsedGrowth = JsonParser.parseFromAIResponse<any[]>(response, []);\r\n\r\n            // 成長が実際にあるキャラクターのみをフィルタリング\r\n            const updatedCharacters = parsedGrowth.filter(char =>\r\n                (char.parameterChanges && char.parameterChanges.length > 0) ||\r\n                (char.skillAcquisitions && char.skillAcquisitions.length > 0) ||\r\n                (char.growthPhase && char.growthPhase !== ",
                  "hash": "fda6797ca4ee2b1b1e32581a022a178d",
                  "keywords": [
                    "キャラクター",
                    "Character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [],
                "storyElements": [
                  "シーン",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "JSON",
                  "character",
                  "name",
                  "growthPhase",
                  "parameterChanges",
                  "change",
                  "skillAcquisitions",
                  "growthDescription",
                  "const",
                  "response"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "dd21b42f0aa469cf4c28f7566d50eb85"
            },
            {
              "id": "call_8c4a1ae8",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "fileName": "character-analysis-service.ts",
              "lineNumber": 401,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 396,
                    "content": "\"psychologicalProfile\": \"心理プロファイルの説明\"",
                    "indent": 4
                  },
                  {
                    "lineNumber": 397,
                    "content": "}",
                    "indent": 2
                  },
                  {
                    "lineNumber": 398,
                    "content": "]`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 399,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 400,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 401,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 402,
                    "content": "temperature: 0.3,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 403,
                    "content": "purpose: 'analysis',",
                    "indent": 20
                  },
                  {
                    "lineNumber": 404,
                    "content": "responseFormat: 'json'",
                    "indent": 20
                  },
                  {
                    "lineNumber": 405,
                    "content": "})",
                    "indent": 16
                  },
                  {
                    "lineNumber": 406,
                    "content": ");",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 352,
                  "distance": 49
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "Failed to analyze character psychologies",
                  "fullLength": 40,
                  "truncatedContent": "Failed to analyze character psychologies",
                  "hash": "c576709f7b4c4141bbb970b83dc56a5f",
                  "keywords": [
                    "analyze",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "conflict",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [],
                "storyElements": [
                  "シーン",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "generate",
                  "analyze"
                ],
                "complexity": "low",
                "dependencies": [
                  "emotionalState",
                  "motivations",
                  "conflicts",
                  "growthPoints",
                  "psychologicalProfile",
                  "JSON",
                  "characterName",
                  "const",
                  "response",
                  "await"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "dd21b42f0aa469cf4c28f7566d50eb85"
            },
            {
              "id": "call_e73439f8",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "fileName": "character-analysis-service.ts",
              "lineNumber": 464,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 459,
                    "content": "\"development\": \"関係の発展についての説明\"",
                    "indent": 4
                  },
                  {
                    "lineNumber": 460,
                    "content": "}",
                    "indent": 2
                  },
                  {
                    "lineNumber": 461,
                    "content": "]`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 462,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 463,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 464,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 465,
                    "content": "temperature: 0.3,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 466,
                    "content": "purpose: 'analysis',",
                    "indent": 20
                  },
                  {
                    "lineNumber": 467,
                    "content": "responseFormat: 'json'",
                    "indent": 20
                  },
                  {
                    "lineNumber": 468,
                    "content": "})",
                    "indent": 16
                  },
                  {
                    "lineNumber": 469,
                    "content": ");",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 411,
                  "distance": 53
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "Failed to analyze relationship dynamics",
                  "fullLength": 39,
                  "truncatedContent": "Failed to analyze relationship dynamics",
                  "hash": "573a5da98ca232f0ca2caf45e97a9ebb",
                  "keywords": [
                    "analyze"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [],
                "storyElements": [
                  "シーン",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "generate",
                  "analyze"
                ],
                "complexity": "low",
                "dependencies": [
                  "ent",
                  "substring",
                  "JSON",
                  "character1",
                  "character2",
                  "relationshipType",
                  "strength",
                  "development",
                  "const",
                  "response"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "dd21b42f0aa469cf4c28f7566d50eb85"
            }
          ],
          "count": 3,
          "severity": "high"
        },
        {
          "hash": "18354624934fded1fd609337b81e65a4",
          "calls": [
            {
              "id": "call_ef390022",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "fileName": "character-analysis-service.ts",
              "lineNumber": 342,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 337,
                    "content": "\"scenes\": [\"シーン1\", \"シーン2\"]",
                    "indent": 4
                  },
                  {
                    "lineNumber": 338,
                    "content": "}",
                    "indent": 2
                  },
                  {
                    "lineNumber": 339,
                    "content": "]`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 340,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 341,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 342,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 343,
                    "content": "temperature: 0.2,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 344,
                    "content": "purpose: 'analysis',",
                    "indent": 20
                  },
                  {
                    "lineNumber": 345,
                    "content": "responseFormat: 'json'",
                    "indent": 20
                  },
                  {
                    "lineNumber": 346,
                    "content": "})",
                    "indent": 16
                  },
                  {
                    "lineNumber": 347,
                    "content": ");",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 291,
                  "distance": 51
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "Failed to analyze character appearances",
                  "fullLength": 39,
                  "truncatedContent": "Failed to analyze character appearances",
                  "hash": "fab657ba7d641c9ae422fa6998465b8f",
                  "keywords": [
                    "analyze",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "scene",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "dialogue",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.2",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [],
                "storyElements": [
                  "シーン",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "generate",
                  "analyze"
                ],
                "complexity": "low",
                "dependencies": [
                  "JSON",
                  "characterName",
                  "dialogueCount",
                  "significance",
                  "actions",
                  "emotions",
                  "scenes",
                  "const",
                  "response",
                  "await"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "18354624934fded1fd609337b81e65a4"
            },
            {
              "id": "call_cb07f524",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "fileName": "character-analysis-service.ts",
              "lineNumber": 511,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 506,
                    "content": "重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：",
                    "indent": 0
                  },
                  {
                    "lineNumber": 507,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 508,
                    "content": "[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 509,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 510,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 511,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 512,
                    "content": "temperature: 0.2,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 513,
                    "content": "purpose: 'analysis',",
                    "indent": 20
                  },
                  {
                    "lineNumber": 514,
                    "content": "responseFormat: 'json'",
                    "indent": 20
                  },
                  {
                    "lineNumber": 515,
                    "content": "})",
                    "indent": 16
                  },
                  {
                    "lineNumber": 516,
                    "content": ");",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 495,
                  "distance": 16
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[",
                  "fullLength": 150,
                  "truncatedContent": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[",
                  "hash": "6e7fdf93795824a03f557aca129aeaa6",
                  "keywords": [
                    "小説",
                    "章",
                    "キャラクター",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]",
                  "fullLength": 182,
                  "truncatedContent": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]",
                  "hash": "aafe42113775e5b5cfb322f4b02038ae",
                  "keywords": [
                    "小説",
                    "章",
                    "キャラクター",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ");\r\n\r\n            const prompt = `\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]`;\r\n\r\n            const response = await apiThrottler.throttledRequest(() =>\r\n                this.geminiAdapter.generateText(prompt, {\r\n                    temperature: 0.2,\r\n                    purpose: ",
                  "fullLength": 421,
                  "truncatedContent": ");\r\n\r\n            const prompt = `\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]`;\r\n\r\n            const response = await apiThrottler.throttledRequest(() =>\r\n                this.geminiAdapter.generateText(prompt, {\r\n                    temperature: 0.2,\r\n                    purpose: ",
                  "hash": "75ef48161f3b26651494cb75e153ebf9",
                  "keywords": [
                    "小説",
                    "章",
                    "キャラクター",
                    "character",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ");\r\n\r\n            const prompt = `\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]`;\r\n\r\n            const response = await apiThrottler.throttledRequest(() =>\r\n                this.geminiAdapter.generateText(prompt, {\r\n                    temperature: 0.2,\r\n                    purpose: ",
                  "fullLength": 421,
                  "truncatedContent": ");\r\n\r\n            const prompt = `\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]`;\r\n\r\n            const response = await apiThrottler.throttledRequest(() =>\r\n                this.geminiAdapter.generateText(prompt, {\r\n                    temperature: 0.2,\r\n                    purpose: ",
                  "hash": "75ef48161f3b26651494cb75e153ebf9",
                  "keywords": [
                    "小説",
                    "章",
                    "キャラクター",
                    "character",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "variable_assignment",
                  "variableName": "prompt",
                  "content": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[",
                  "fullLength": 150,
                  "truncatedContent": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[",
                  "hash": "6e7fdf93795824a03f557aca129aeaa6"
                },
                {
                  "type": "template_literal",
                  "content": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]",
                  "fullLength": 182,
                  "truncatedContent": "\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]",
                  "hash": "aafe42113775e5b5cfb322f4b02038ae",
                  "hasVariables": true,
                  "variableCount": 2
                }
              ],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.2",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [],
                "storyElements": [
                  "シーン",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "updatedCharacters",
                  "length",
                  "return",
                  "const",
                  "characterNames",
                  "map",
                  "char",
                  "name",
                  "join",
                  "prompt"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "18354624934fded1fd609337b81e65a4"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "99e23080571769f0e9f13364b53473e9",
          "calls": [
            {
              "id": "call_4ad1c568",
              "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
              "fileName": "literary-comparison-system.ts",
              "lineNumber": 218,
              "lineContent": "this.geminiClient.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 213,
                    "content": ": `章番号: ${chapterNumber}`;",
                    "indent": 8
                  },
                  {
                    "lineNumber": 214,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 215,
                    "content": "const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);",
                    "indent": 6
                  },
                  {
                    "lineNumber": 216,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 217,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 218,
                  "content": "this.geminiClient.generateText(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 219,
                    "content": "temperature: 0.3,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 220,
                    "content": "purpose: 'selection',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 221,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 222,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 223,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 196,
                  "distance": 22
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "章番号: ${chapterNumber}",
                  "fullLength": 21,
                  "truncatedContent": "章番号: ${chapterNumber}",
                  "hash": "a0bc1771193a38f54fc3a20d79cf63f7",
                  "keywords": [
                    "章",
                    "chapter"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ")\r\n        : `章番号: ${chapterNumber}`;\r\n\r\n      const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);\r\n\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiClient.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: ",
                  "fullLength": 290,
                  "truncatedContent": ")\r\n        : `章番号: ${chapterNumber}`;\r\n\r\n      const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);\r\n\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiClient.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: ",
                  "hash": "930f774d0f29d9500d67bcea6c3f198c",
                  "keywords": [
                    "章",
                    "chapter",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ")\r\n        : `章番号: ${chapterNumber}`;\r\n\r\n      const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);\r\n\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiClient.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: ",
                  "fullLength": 290,
                  "truncatedContent": ")\r\n        : `章番号: ${chapterNumber}`;\r\n\r\n      const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);\r\n\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiClient.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: ",
                  "hash": "930f774d0f29d9500d67bcea6c3f198c",
                  "keywords": [
                    "章",
                    "chapter",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "buildSelectionPrompt",
                  "relatedMethods": [
                    "buildSelectionPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<LiteraryGuideline[]>"
                  ],
                  "extractedTypes": [
                    "LiteraryGuideline[]>"
                  ]
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [],
                "storyElements": [
                  "シーン",
                  "設定",
                  "plot",
                  "scene",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "ivate",
                  "async",
                  "selectGuidelinesWithAI",
                  "availableGuidelines",
                  "LiteraryGuideline",
                  "contexts",
                  "CollectedContext",
                  "chapterNumber",
                  "number",
                  "Promise"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "99e23080571769f0e9f13364b53473e9"
            },
            {
              "id": "call_4ad1c568",
              "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
              "fileName": "literary-comparison-system.ts",
              "lineNumber": 218,
              "lineContent": "this.geminiClient.generateText(prompt, {",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 213,
                    "content": ": `章番号: ${chapterNumber}`;",
                    "indent": 8
                  },
                  {
                    "lineNumber": 214,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 215,
                    "content": "const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);",
                    "indent": 6
                  },
                  {
                    "lineNumber": 216,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 217,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 218,
                  "content": "this.geminiClient.generateText(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 219,
                    "content": "temperature: 0.3,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 220,
                    "content": "purpose: 'selection',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 221,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 222,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 223,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 196,
                  "distance": 22
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "章番号: ${chapterNumber}",
                  "fullLength": 21,
                  "truncatedContent": "章番号: ${chapterNumber}",
                  "hash": "a0bc1771193a38f54fc3a20d79cf63f7",
                  "keywords": [
                    "章",
                    "chapter"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ")\r\n        : `章番号: ${chapterNumber}`;\r\n\r\n      const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);\r\n\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiClient.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: ",
                  "fullLength": 290,
                  "truncatedContent": ")\r\n        : `章番号: ${chapterNumber}`;\r\n\r\n      const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);\r\n\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiClient.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: ",
                  "hash": "930f774d0f29d9500d67bcea6c3f198c",
                  "keywords": [
                    "章",
                    "chapter",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ")\r\n        : `章番号: ${chapterNumber}`;\r\n\r\n      const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);\r\n\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiClient.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: ",
                  "fullLength": 290,
                  "truncatedContent": ")\r\n        : `章番号: ${chapterNumber}`;\r\n\r\n      const prompt = this.buildSelectionPrompt(availableGuidelines, contextText);\r\n\r\n      const response = await apiThrottler.throttledRequest(() =>\r\n        this.geminiClient.generateText(prompt, {\r\n          temperature: 0.3,\r\n          purpose: ",
                  "hash": "930f774d0f29d9500d67bcea6c3f198c",
                  "keywords": [
                    "章",
                    "chapter",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "buildSelectionPrompt",
                  "relatedMethods": [
                    "buildSelectionPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<LiteraryGuideline[]>"
                  ],
                  "extractedTypes": [
                    "LiteraryGuideline[]>"
                  ]
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [],
                "storyElements": [
                  "シーン",
                  "設定",
                  "plot",
                  "scene",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "ivate",
                  "async",
                  "selectGuidelinesWithAI",
                  "availableGuidelines",
                  "LiteraryGuideline",
                  "contexts",
                  "CollectedContext",
                  "chapterNumber",
                  "number",
                  "Promise"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "99e23080571769f0e9f13364b53473e9"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "52cfec5e66d9cfcc28609c004a9d1b99",
          "calls": [
            {
              "id": "call_1ed727cf",
              "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
              "fileName": "scene-structure-optimizer.ts",
              "lineNumber": 452,
              "lineContent": "const response = await this.geminiClient.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 447,
                    "content": "// システムパラメータから適切な長さを取得",
                    "indent": 6
                  },
                  {
                    "lineNumber": 448,
                    "content": "const parameters = parameterManager.getParameters();",
                    "indent": 6
                  },
                  {
                    "lineNumber": 449,
                    "content": "const targetLength = 800; // デフォルト値",
                    "indent": 6
                  },
                  {
                    "lineNumber": 450,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 451,
                    "content": "// AIクライアントでシーン構成の推奨を生成",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 452,
                  "content": "const response = await this.geminiClient.generateText(prompt, {",
                  "indent": 6
                },
                "after": [
                  {
                    "lineNumber": 453,
                    "content": "temperature: 0.7,",
                    "indent": 8
                  },
                  {
                    "lineNumber": 454,
                    "content": "targetLength: targetLength",
                    "indent": 8
                  },
                  {
                    "lineNumber": 455,
                    "content": "});",
                    "indent": 6
                  },
                  {
                    "lineNumber": 456,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 457,
                    "content": "// レスポンスを整形",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "actualRatio",
                  "startLine": 378,
                  "distance": 74
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
                  "fullLength": 602,
                  "truncatedContent": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
                  "hash": "e5308eae8a37807f36a1ec49e852dc69",
                  "keywords": [
                    "シーン",
                    "生成",
                    "generate",
                    "chapter"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
                  "fullLength": 602,
                  "truncatedContent": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
                  "hash": "e5308eae8a37807f36a1ec49e852dc69",
                  "keywords": [
                    "シーン",
                    "生成",
                    "generate",
                    "chapter"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
                  "fullLength": 602,
                  "truncatedContent": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
                  "hash": "e5308eae8a37807f36a1ec49e852dc69",
                  "keywords": [
                    "シーン",
                    "生成",
                    "generate",
                    "chapter"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "template_literal",
                  "content": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
                  "fullLength": 602,
                  "truncatedContent": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
                  "hash": "e5308eae8a37807f36a1ec49e852dc69",
                  "hasVariables": false,
                  "variableCount": 0
                }
              ],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.7",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF",
                  "アクション"
                ],
                "storyElements": [
                  "シーン",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "lengthDistribution",
                  "max",
                  "analysis",
                  "avg",
                  "toFixed",
                  "stdDev",
                  "paceVariation",
                  "const",
                  "parameters",
                  "parameterManager"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "52cfec5e66d9cfcc28609c004a9d1b99"
            },
            {
              "id": "call_1ed727cf",
              "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
              "fileName": "scene-structure-optimizer.ts",
              "lineNumber": 452,
              "lineContent": "const response = await this.geminiClient.generateText(prompt, {",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 447,
                    "content": "// システムパラメータから適切な長さを取得",
                    "indent": 6
                  },
                  {
                    "lineNumber": 448,
                    "content": "const parameters = parameterManager.getParameters();",
                    "indent": 6
                  },
                  {
                    "lineNumber": 449,
                    "content": "const targetLength = 800; // デフォルト値",
                    "indent": 6
                  },
                  {
                    "lineNumber": 450,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 451,
                    "content": "// AIクライアントでシーン構成の推奨を生成",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 452,
                  "content": "const response = await this.geminiClient.generateText(prompt, {",
                  "indent": 6
                },
                "after": [
                  {
                    "lineNumber": 453,
                    "content": "temperature: 0.7,",
                    "indent": 8
                  },
                  {
                    "lineNumber": 454,
                    "content": "targetLength: targetLength",
                    "indent": 8
                  },
                  {
                    "lineNumber": 455,
                    "content": "});",
                    "indent": 6
                  },
                  {
                    "lineNumber": 456,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 457,
                    "content": "// レスポンスを整形",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "actualRatio",
                  "startLine": 378,
                  "distance": 74
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
                  "fullLength": 602,
                  "truncatedContent": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
                  "hash": "e5308eae8a37807f36a1ec49e852dc69",
                  "keywords": [
                    "シーン",
                    "生成",
                    "generate",
                    "chapter"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
                  "fullLength": 602,
                  "truncatedContent": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
                  "hash": "e5308eae8a37807f36a1ec49e852dc69",
                  "keywords": [
                    "シーン",
                    "生成",
                    "generate",
                    "chapter"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
                  "fullLength": 602,
                  "truncatedContent": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
                  "hash": "e5308eae8a37807f36a1ec49e852dc69",
                  "keywords": [
                    "シーン",
                    "生成",
                    "generate",
                    "chapter"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "template_literal",
                  "content": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
                  "fullLength": 602,
                  "truncatedContent": ";\r\n\r\n      // システムパラメータから適切な長さを取得\r\n      const parameters = parameterManager.getParameters();\r\n      const targetLength = 800; // デフォルト値\r\n\r\n      // AIクライアントでシーン構成の推奨を生成\r\n      const response = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.7,\r\n        targetLength: targetLength\r\n      });\r\n\r\n      // レスポンスを整形\r\n      return this.formatAIResponse(response);\r\n    } catch (error) {\r\n      logger.error('推奨シーン構成の生成に失敗しました', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n        chapterNumber\r\n      });\r\n      \r\n      // エラー時のフォールバック推奨\r\n      return ",
                  "hash": "e5308eae8a37807f36a1ec49e852dc69",
                  "hasVariables": false,
                  "variableCount": 0
                }
              ],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.7",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF",
                  "アクション"
                ],
                "storyElements": [
                  "シーン",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "lengthDistribution",
                  "max",
                  "analysis",
                  "avg",
                  "toFixed",
                  "stdDev",
                  "paceVariation",
                  "const",
                  "parameters",
                  "parameterManager"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "52cfec5e66d9cfcc28609c004a9d1b99"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "30bc41cfd969a617572057474600c1e1",
          "calls": [
            {
              "id": "call_a757ae0b",
              "filePath": "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts",
              "fileName": "reader-experience-analysis-service.ts",
              "lineNumber": 111,
              "lineContent": "this.geminiClient.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 106,
                    "content": "\"strengths\": [\"強み1\", \"強み2\"]",
                    "indent": 2
                  },
                  {
                    "lineNumber": 107,
                    "content": "}`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 108,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 109,
                    "content": "// API呼び出し（スロットリング対応）",
                    "indent": 6
                  },
                  {
                    "lineNumber": 110,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 111,
                  "content": "this.geminiClient.generateText(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 112,
                    "content": "temperature: 0.3,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 113,
                    "content": "purpose: 'analysis',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 114,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 115,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 116,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "constructor",
                  "startLine": 54,
                  "distance": 57
                }
              },
              "prompts": [
                {
                  "type": "method_based",
                  "suggestedPurpose": "defaultAnalysis",
                  "relatedMethods": [
                    "defaultAnalysis",
                    "ReaderExperienceAnalysis"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": ReaderExperienceAnalysis"
                  ],
                  "extractedTypes": [
                    "ReaderExperienceAnalysis"
                  ]
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "ミステリー",
                  "ロマンス",
                  "アクション",
                  "fantasy",
                  "mystery",
                  "romance"
                ],
                "storyElements": [
                  "シーン",
                  "設定",
                  "世界観",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "JSON",
                  "interestRetention",
                  "empathy",
                  "clarity",
                  "unexpectedness",
                  "anticipation",
                  "overallScore",
                  "weakPoints",
                  "point",
                  "suggestion"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "30bc41cfd969a617572057474600c1e1"
            },
            {
              "id": "call_a757ae0b",
              "filePath": "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts",
              "fileName": "reader-experience-analysis-service.ts",
              "lineNumber": 111,
              "lineContent": "this.geminiClient.generateText(prompt, {",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 106,
                    "content": "\"strengths\": [\"強み1\", \"強み2\"]",
                    "indent": 2
                  },
                  {
                    "lineNumber": 107,
                    "content": "}`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 108,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 109,
                    "content": "// API呼び出し（スロットリング対応）",
                    "indent": 6
                  },
                  {
                    "lineNumber": 110,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 111,
                  "content": "this.geminiClient.generateText(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 112,
                    "content": "temperature: 0.3,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 113,
                    "content": "purpose: 'analysis',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 114,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 115,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 116,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "constructor",
                  "startLine": 54,
                  "distance": 57
                }
              },
              "prompts": [
                {
                  "type": "method_based",
                  "suggestedPurpose": "defaultAnalysis",
                  "relatedMethods": [
                    "defaultAnalysis",
                    "ReaderExperienceAnalysis"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": ReaderExperienceAnalysis"
                  ],
                  "extractedTypes": [
                    "ReaderExperienceAnalysis"
                  ]
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "ミステリー",
                  "ロマンス",
                  "アクション",
                  "fantasy",
                  "mystery",
                  "romance"
                ],
                "storyElements": [
                  "シーン",
                  "設定",
                  "世界観",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "JSON",
                  "interestRetention",
                  "empathy",
                  "clarity",
                  "unexpectedness",
                  "anticipation",
                  "overallScore",
                  "weakPoints",
                  "point",
                  "suggestion"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "30bc41cfd969a617572057474600c1e1"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "8ac893f9e18fb1c5b1ea506708def46b",
          "calls": [
            {
              "id": "call_79363298",
              "filePath": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
              "fileName": "style-analysis-service.ts",
              "lineNumber": 787,
              "lineContent": "this.geminiAdapter.generateContent(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateContent\\s*\\(",
              "callMethod": "generateContent",
              "fullMatch": "geminiAdapter.generateContent(",
              "context": {
                "before": [
                  {
                    "lineNumber": 782,
                    "content": "}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 783,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 784,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 785,
                    "content": "// APIスロットリングを使用してAI分析を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 786,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 787,
                  "content": "this.geminiAdapter.generateContent(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 788,
                    "content": "temperature: 0.1,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 789,
                    "content": "purpose: 'analysis',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 790,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 791,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 792,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 735,
                  "distance": 52
                }
              },
              "prompts": [
                {
                  "type": "method_based",
                  "suggestedPurpose": "StyleAnalysis",
                  "relatedMethods": [
                    "StyleAnalysis"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [],
              "parameters": {
                "temperature": {
                  "value": "0.1",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [],
                "storyElements": [],
                "characterElements": [
                  "キャラクター"
                ],
                "narrativeStyle": "first_person"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "truncatedContent",
                  "JSON",
                  "avgSentenceLength",
                  "sentenceVariety",
                  "vocabularyRichness",
                  "narrativeVoice",
                  "tenseConsistency",
                  "sentimentBalance",
                  "API",
                  "const"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "8ac893f9e18fb1c5b1ea506708def46b"
            },
            {
              "id": "call_d213a88b",
              "filePath": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
              "fileName": "style-analysis-service.ts",
              "lineNumber": 863,
              "lineContent": "this.geminiAdapter.generateContent(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateContent\\s*\\(",
              "callMethod": "generateContent",
              "fullMatch": "geminiAdapter.generateContent(",
              "context": {
                "before": [
                  {
                    "lineNumber": 858,
                    "content": "}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 859,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 860,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 861,
                    "content": "// APIスロットリングを使用してAI分析を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 862,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 863,
                  "content": "this.geminiAdapter.generateContent(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 864,
                    "content": "temperature: 0.1,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 865,
                    "content": "purpose: 'analysis',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 866,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 867,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 868,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 802,
                  "distance": 61
                }
              },
              "prompts": [],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "dialogue",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.1",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [],
                "storyElements": [],
                "characterElements": [
                  "キャラクター"
                ],
                "narrativeStyle": "first_person"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "xpression",
                  "frequency",
                  "adjectivalExpressions",
                  "expression",
                  "dialoguePatterns",
                  "conjunctions",
                  "sentenceStructures",
                  "API",
                  "const",
                  "response"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "8ac893f9e18fb1c5b1ea506708def46b"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "dfa02393263e8c436a4ce9f332412a04",
          "calls": [
            {
              "id": "call_f89b139e",
              "filePath": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
              "fileName": "style-analysis-service.ts",
              "lineNumber": 787,
              "lineContent": "this.geminiAdapter.generateContent(prompt, {",
              "matchedPattern": "\\.generateContent\\s*\\(",
              "callMethod": "generateContent",
              "fullMatch": ".generateContent(",
              "context": {
                "before": [
                  {
                    "lineNumber": 782,
                    "content": "}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 783,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 784,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 785,
                    "content": "// APIスロットリングを使用してAI分析を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 786,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 787,
                  "content": "this.geminiAdapter.generateContent(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 788,
                    "content": "temperature: 0.1,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 789,
                    "content": "purpose: 'analysis',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 790,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 791,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 792,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 735,
                  "distance": 52
                }
              },
              "prompts": [
                {
                  "type": "method_based",
                  "suggestedPurpose": "StyleAnalysis",
                  "relatedMethods": [
                    "StyleAnalysis"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [],
              "parameters": {
                "temperature": {
                  "value": "0.1",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [],
                "storyElements": [],
                "characterElements": [
                  "キャラクター"
                ],
                "narrativeStyle": "first_person"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "truncatedContent",
                  "JSON",
                  "avgSentenceLength",
                  "sentenceVariety",
                  "vocabularyRichness",
                  "narrativeVoice",
                  "tenseConsistency",
                  "sentimentBalance",
                  "API",
                  "const"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "dfa02393263e8c436a4ce9f332412a04"
            },
            {
              "id": "call_ab66f212",
              "filePath": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
              "fileName": "style-analysis-service.ts",
              "lineNumber": 863,
              "lineContent": "this.geminiAdapter.generateContent(prompt, {",
              "matchedPattern": "\\.generateContent\\s*\\(",
              "callMethod": "generateContent",
              "fullMatch": ".generateContent(",
              "context": {
                "before": [
                  {
                    "lineNumber": 858,
                    "content": "}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 859,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 860,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 861,
                    "content": "// APIスロットリングを使用してAI分析を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 862,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 863,
                  "content": "this.geminiAdapter.generateContent(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 864,
                    "content": "temperature: 0.1,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 865,
                    "content": "purpose: 'analysis',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 866,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 867,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 868,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 802,
                  "distance": 61
                }
              },
              "prompts": [],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "dialogue",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.1",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [],
                "storyElements": [],
                "characterElements": [
                  "キャラクター"
                ],
                "narrativeStyle": "first_person"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "frequency",
                  "adjectivalExpressions",
                  "expression",
                  "dialoguePatterns",
                  "conjunctions",
                  "sentenceStructures",
                  "API",
                  "const",
                  "response",
                  "await"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "dfa02393263e8c436a4ce9f332412a04"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "87af42a9ca181a3cd1b95bdea60d9214",
          "calls": [
            {
              "id": "call_acc16f7d",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "fileName": "theme-analysis-service.ts",
              "lineNumber": 602,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiAdapter.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 597,
                    "content": "// 分析プロンプト（記憶システムからの情報を活用）",
                    "indent": 6
                  },
                  {
                    "lineNumber": 598,
                    "content": "const prompt = this.buildSymbolismAnalysisPrompt(content, symbolismContext.data);",
                    "indent": 6
                  },
                  {
                    "lineNumber": 599,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 600,
                    "content": "// APIスロットリングを使用して分析を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 601,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 602,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 603,
                    "content": "temperature: 0.3,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 604,
                    "content": "purpose: 'analysis',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 605,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 606,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 607,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 585,
                  "distance": 17
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\n      );\n\n      // 分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildSymbolismAnalysisPrompt(content, symbolismContext.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: ",
                  "fullLength": 325,
                  "truncatedContent": "\n      );\n\n      // 分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildSymbolismAnalysisPrompt(content, symbolismContext.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: ",
                  "hash": "2727056cf7d5382743614bae02580053",
                  "keywords": [
                    "分析",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\n      );\n\n      // 分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildSymbolismAnalysisPrompt(content, symbolismContext.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: ",
                  "fullLength": 325,
                  "truncatedContent": "\n      );\n\n      // 分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildSymbolismAnalysisPrompt(content, symbolismContext.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: ",
                  "hash": "2727056cf7d5382743614bae02580053",
                  "keywords": [
                    "分析",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "cachedAnalysis",
                  "relatedMethods": [
                    "cachedAnalysis",
                    "buildSymbolismAnalysisPrompt",
                    "defaultAnalysis",
                    "SymbolismAnalysis"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": SymbolismAnalysis"
                  ],
                  "extractedTypes": [
                    "SymbolismAnalysis"
                  ]
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "設定",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "const",
                  "symbolismContext",
                  "await",
                  "this",
                  "safeMemoryOperation",
                  "performUnifiedMemorySearch",
                  "existingSymbols",
                  "commonMotifs",
                  "literaryDevices",
                  "getSymbolismContext"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "87af42a9ca181a3cd1b95bdea60d9214"
            },
            {
              "id": "call_306575ca",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "fileName": "theme-analysis-service.ts",
              "lineNumber": 710,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiAdapter.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 705,
                    "content": "// 一貫性分析プロンプト（記憶システムからの情報を活用）",
                    "indent": 6
                  },
                  {
                    "lineNumber": 706,
                    "content": "const prompt = this.buildConsistencyAnalysisPrompt(summaries, theme, themeHistory.data);",
                    "indent": 6
                  },
                  {
                    "lineNumber": 707,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 708,
                    "content": "// APIスロットリングを使用して分析を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 709,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 710,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 711,
                    "content": "temperature: 0.3,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 712,
                    "content": "purpose: 'analysis',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 713,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 714,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 715,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 695,
                  "distance": 15
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "章 ${index + 1} の要約生成に失敗しました",
                  "fullLength": 27,
                  "truncatedContent": "章 ${index + 1} の要約生成に失敗しました",
                  "hash": "26937f9076a0051a8e17e8c940611146",
                  "keywords": [
                    "章",
                    "生成"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "章 ${index + 1} の要約（生成失敗）",
                  "fullLength": 24,
                  "truncatedContent": "章 ${index + 1} の要約（生成失敗）",
                  "hash": "deb5472f1a9d7405a2c0c73e0d545f91",
                  "keywords": [
                    "章",
                    "生成"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "章 ${index + 1} の要約生成に失敗しました",
                  "fullLength": 27,
                  "truncatedContent": "章 ${index + 1} の要約生成に失敗しました",
                  "hash": "26937f9076a0051a8e17e8c940611146",
                  "keywords": [
                    "章",
                    "生成"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "章 ${index + 1} の要約（生成失敗）",
                  "fullLength": 24,
                  "truncatedContent": "章 ${index + 1} の要約（生成失敗）",
                  "hash": "deb5472f1a9d7405a2c0c73e0d545f91",
                  "keywords": [
                    "章",
                    "生成"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": " };\n        }\n      });\n\n      const summaries = await Promise.all(summaryPromises);\n\n      // 一貫性分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildConsistencyAnalysisPrompt(summaries, theme, themeHistory.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      // デフォルト値\n      const defaultAnalysis: ThemeConsistencyAnalysis = {\n        consistencyScore: 7,\n        strengthByChapter: contents.map(() => 5),\n        developmentPattern: \"テーマの発展が適度に続いています\",\n        weakPoints: [],\n        improvementSuggestions: [\n          ",
                  "fullLength": 745,
                  "truncatedContent": " };\n        }\n      });\n\n      const summaries = await Promise.all(summaryPromises);\n\n      // 一貫性分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildConsistencyAnalysisPrompt(summaries, theme, themeHistory.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      // デフォルト値\n      const defaultAnalysis: ThemeConsistencyAnalysis = {\n        consistencyScore: 7,\n        strengthByChapter: contents.map(() => 5),\n        developmentPattern: \"テーマの発展が適度に続いています\",\n        weakPoints: [],\n        improvementSuggestions: [\n          ",
                  "hash": "42edc094e90efc52b3a177e12866c3c6",
                  "keywords": [
                    "分析",
                    "story",
                    "generate",
                    "Chapter"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "template_literal",
                  "content": ", {\n            error: error instanceof Error ? error.message : String(error)\n          });\n          return { chapterIndex: index, summary: ",
                  "fullLength": 141,
                  "truncatedContent": ", {\n            error: error instanceof Error ? error.message : String(error)\n          });\n          return { chapterIndex: index, summary: ",
                  "hash": "72b5cd502e3f79595c8575c2d3cd8219",
                  "hasVariables": false,
                  "variableCount": 0
                },
                {
                  "type": "template_literal",
                  "content": " };\n        }\n      });\n\n      const summaries = await Promise.all(summaryPromises);\n\n      // 一貫性分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildConsistencyAnalysisPrompt(summaries, theme, themeHistory.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      // デフォルト値\n      const defaultAnalysis: ThemeConsistencyAnalysis = {\n        consistencyScore: 7,\n        strengthByChapter: contents.map(() => 5),\n        developmentPattern: \"テーマの発展が適度に続いています\",\n        weakPoints: [],\n        improvementSuggestions: [\n          ",
                  "fullLength": 745,
                  "truncatedContent": " };\n        }\n      });\n\n      const summaries = await Promise.all(summaryPromises);\n\n      // 一貫性分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildConsistencyAnalysisPrompt(summaries, theme, themeHistory.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      // デフォルト値\n      const defaultAnalysis: ThemeConsistencyAnalysis = {\n        consistencyScore: 7,\n        strengthByChapter: contents.map(() => 5),\n        developmentPattern: \"テーマの発展が適度に続いています\",\n        weakPoints: [],\n        improvementSuggestions: [\n          ",
                  "hash": "42edc094e90efc52b3a177e12866c3c6",
                  "hasVariables": false,
                  "variableCount": 0
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "buildConsistencyAnalysisPrompt",
                  "relatedMethods": [
                    "buildConsistencyAnalysisPrompt",
                    "defaultAnalysis",
                    "ThemeConsistencyAnalysis"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": ThemeConsistencyAnalysis"
                  ],
                  "extractedTypes": [
                    "ThemeConsistencyAnalysis"
                  ]
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "設定",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "分析",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "error",
                  "instanceof",
                  "Error",
                  "message",
                  "String",
                  "return",
                  "chapterIndex",
                  "index",
                  "summary",
                  "const"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "87af42a9ca181a3cd1b95bdea60d9214"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "5c4c8e9ba52be9199b2c92bc121ed144",
          "calls": [
            {
              "id": "call_7a25db3c",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "fileName": "theme-analysis-service.ts",
              "lineNumber": 602,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 597,
                    "content": "// 分析プロンプト（記憶システムからの情報を活用）",
                    "indent": 6
                  },
                  {
                    "lineNumber": 598,
                    "content": "const prompt = this.buildSymbolismAnalysisPrompt(content, symbolismContext.data);",
                    "indent": 6
                  },
                  {
                    "lineNumber": 599,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 600,
                    "content": "// APIスロットリングを使用して分析を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 601,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 602,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 603,
                    "content": "temperature: 0.3,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 604,
                    "content": "purpose: 'analysis',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 605,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 606,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 607,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 585,
                  "distance": 17
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\n      );\n\n      // 分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildSymbolismAnalysisPrompt(content, symbolismContext.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: ",
                  "fullLength": 325,
                  "truncatedContent": "\n      );\n\n      // 分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildSymbolismAnalysisPrompt(content, symbolismContext.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: ",
                  "hash": "2727056cf7d5382743614bae02580053",
                  "keywords": [
                    "分析",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\n      );\n\n      // 分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildSymbolismAnalysisPrompt(content, symbolismContext.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: ",
                  "fullLength": 325,
                  "truncatedContent": "\n      );\n\n      // 分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildSymbolismAnalysisPrompt(content, symbolismContext.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: ",
                  "hash": "2727056cf7d5382743614bae02580053",
                  "keywords": [
                    "分析",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "cachedAnalysis",
                  "relatedMethods": [
                    "cachedAnalysis",
                    "buildSymbolismAnalysisPrompt",
                    "defaultAnalysis",
                    "SymbolismAnalysis"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": SymbolismAnalysis"
                  ],
                  "extractedTypes": [
                    "SymbolismAnalysis"
                  ]
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "設定",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "const",
                  "symbolismContext",
                  "await",
                  "this",
                  "safeMemoryOperation",
                  "performUnifiedMemorySearch",
                  "existingSymbols",
                  "commonMotifs",
                  "literaryDevices",
                  "getSymbolismContext"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "5c4c8e9ba52be9199b2c92bc121ed144"
            },
            {
              "id": "call_55a9819f",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "fileName": "theme-analysis-service.ts",
              "lineNumber": 710,
              "lineContent": "this.geminiAdapter.generateText(prompt, {",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 705,
                    "content": "// 一貫性分析プロンプト（記憶システムからの情報を活用）",
                    "indent": 6
                  },
                  {
                    "lineNumber": 706,
                    "content": "const prompt = this.buildConsistencyAnalysisPrompt(summaries, theme, themeHistory.data);",
                    "indent": 6
                  },
                  {
                    "lineNumber": 707,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 708,
                    "content": "// APIスロットリングを使用して分析を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 709,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 710,
                  "content": "this.geminiAdapter.generateText(prompt, {",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 711,
                    "content": "temperature: 0.3,",
                    "indent": 10
                  },
                  {
                    "lineNumber": 712,
                    "content": "purpose: 'analysis',",
                    "indent": 10
                  },
                  {
                    "lineNumber": 713,
                    "content": "responseFormat: 'json'",
                    "indent": 10
                  },
                  {
                    "lineNumber": 714,
                    "content": "})",
                    "indent": 8
                  },
                  {
                    "lineNumber": 715,
                    "content": ");",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 695,
                  "distance": 15
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "章 ${index + 1} の要約生成に失敗しました",
                  "fullLength": 27,
                  "truncatedContent": "章 ${index + 1} の要約生成に失敗しました",
                  "hash": "26937f9076a0051a8e17e8c940611146",
                  "keywords": [
                    "章",
                    "生成"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "章 ${index + 1} の要約（生成失敗）",
                  "fullLength": 24,
                  "truncatedContent": "章 ${index + 1} の要約（生成失敗）",
                  "hash": "deb5472f1a9d7405a2c0c73e0d545f91",
                  "keywords": [
                    "章",
                    "生成"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "章 ${index + 1} の要約生成に失敗しました",
                  "fullLength": 27,
                  "truncatedContent": "章 ${index + 1} の要約生成に失敗しました",
                  "hash": "26937f9076a0051a8e17e8c940611146",
                  "keywords": [
                    "章",
                    "生成"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "章 ${index + 1} の要約（生成失敗）",
                  "fullLength": 24,
                  "truncatedContent": "章 ${index + 1} の要約（生成失敗）",
                  "hash": "deb5472f1a9d7405a2c0c73e0d545f91",
                  "keywords": [
                    "章",
                    "生成"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": " };\n        }\n      });\n\n      const summaries = await Promise.all(summaryPromises);\n\n      // 一貫性分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildConsistencyAnalysisPrompt(summaries, theme, themeHistory.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      // デフォルト値\n      const defaultAnalysis: ThemeConsistencyAnalysis = {\n        consistencyScore: 7,\n        strengthByChapter: contents.map(() => 5),\n        developmentPattern: \"テーマの発展が適度に続いています\",\n        weakPoints: [],\n        improvementSuggestions: [\n          ",
                  "fullLength": 745,
                  "truncatedContent": " };\n        }\n      });\n\n      const summaries = await Promise.all(summaryPromises);\n\n      // 一貫性分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildConsistencyAnalysisPrompt(summaries, theme, themeHistory.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      // デフォルト値\n      const defaultAnalysis: ThemeConsistencyAnalysis = {\n        consistencyScore: 7,\n        strengthByChapter: contents.map(() => 5),\n        developmentPattern: \"テーマの発展が適度に続いています\",\n        weakPoints: [],\n        improvementSuggestions: [\n          ",
                  "hash": "42edc094e90efc52b3a177e12866c3c6",
                  "keywords": [
                    "分析",
                    "story",
                    "generate",
                    "Chapter"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "template_literal",
                  "content": ", {\n            error: error instanceof Error ? error.message : String(error)\n          });\n          return { chapterIndex: index, summary: ",
                  "fullLength": 141,
                  "truncatedContent": ", {\n            error: error instanceof Error ? error.message : String(error)\n          });\n          return { chapterIndex: index, summary: ",
                  "hash": "72b5cd502e3f79595c8575c2d3cd8219",
                  "hasVariables": false,
                  "variableCount": 0
                },
                {
                  "type": "template_literal",
                  "content": " };\n        }\n      });\n\n      const summaries = await Promise.all(summaryPromises);\n\n      // 一貫性分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildConsistencyAnalysisPrompt(summaries, theme, themeHistory.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      // デフォルト値\n      const defaultAnalysis: ThemeConsistencyAnalysis = {\n        consistencyScore: 7,\n        strengthByChapter: contents.map(() => 5),\n        developmentPattern: \"テーマの発展が適度に続いています\",\n        weakPoints: [],\n        improvementSuggestions: [\n          ",
                  "fullLength": 745,
                  "truncatedContent": " };\n        }\n      });\n\n      const summaries = await Promise.all(summaryPromises);\n\n      // 一貫性分析プロンプト（記憶システムからの情報を活用）\n      const prompt = this.buildConsistencyAnalysisPrompt(summaries, theme, themeHistory.data);\n\n      // APIスロットリングを使用して分析を実行\n      const response = await apiThrottler.throttledRequest(() =>\n        this.geminiAdapter.generateText(prompt, {\n          temperature: 0.3,\n          purpose: 'analysis',\n          responseFormat: 'json'\n        })\n      );\n\n      // デフォルト値\n      const defaultAnalysis: ThemeConsistencyAnalysis = {\n        consistencyScore: 7,\n        strengthByChapter: contents.map(() => 5),\n        developmentPattern: \"テーマの発展が適度に続いています\",\n        weakPoints: [],\n        improvementSuggestions: [\n          ",
                  "hash": "42edc094e90efc52b3a177e12866c3c6",
                  "hasVariables": false,
                  "variableCount": 0
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "buildConsistencyAnalysisPrompt",
                  "relatedMethods": [
                    "buildConsistencyAnalysisPrompt",
                    "defaultAnalysis",
                    "ThemeConsistencyAnalysis"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": ThemeConsistencyAnalysis"
                  ],
                  "extractedTypes": [
                    "ThemeConsistencyAnalysis"
                  ]
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "設定",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "分析",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "error",
                  "instanceof",
                  "Error",
                  "message",
                  "String",
                  "return",
                  "chapterIndex",
                  "index",
                  "summary",
                  "const"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "5c4c8e9ba52be9199b2c92bc121ed144"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "9690e16e0c38a36d072534939c89f69a",
          "calls": [
            {
              "id": "call_2f85bbc6",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "fileName": "character-analyzer.ts",
              "lineNumber": 234,
              "lineContent": "const result = await this.geminiClient.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 229,
                    "content": "\"suggestedAlternatives\": [\"代替行動1\", \"代替行動2\"] // 一貫性がない場合のみ",
                    "indent": 2
                  },
                  {
                    "lineNumber": 230,
                    "content": "}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 231,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 232,
                    "content": "",
                    "indent": 7
                  },
                  {
                    "lineNumber": 233,
                    "content": "// AIによる一貫性検証",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 234,
                  "content": "const result = await this.geminiClient.generateText(prompt, {",
                  "indent": 6
                },
                "after": [
                  {
                    "lineNumber": 235,
                    "content": "temperature: 0.3",
                    "indent": 8
                  },
                  {
                    "lineNumber": 236,
                    "content": "});",
                    "indent": 6
                  },
                  {
                    "lineNumber": 237,
                    "content": "",
                    "indent": 7
                  },
                  {
                    "lineNumber": 238,
                    "content": "// JSONを解析",
                    "indent": 6
                  },
                  {
                    "lineNumber": 239,
                    "content": "const jsonMatch = result.match(/\\{[\\s\\S]*\\}/);",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 160,
                  "distance": 74
                }
              },
              "prompts": [],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": ValidationResult"
                  ],
                  "extractedTypes": [
                    "ValidationResult"
                  ]
                },
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "response_structure",
                  "fields": [
                    "match"
                  ],
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "rawValue": "temperature: 0.3",
                  "confidence": "high"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "アクション"
                ],
                "storyElements": [
                  "プロット",
                  "plot"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "評価",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "this",
                  "formatCharacterHistory",
                  "character",
                  "context",
                  "proposedAction",
                  "JSON",
                  "consistent",
                  "true",
                  "false",
                  "confidence"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "9690e16e0c38a36d072534939c89f69a"
            },
            {
              "id": "call_2f85bbc6",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "fileName": "character-analyzer.ts",
              "lineNumber": 234,
              "lineContent": "const result = await this.geminiClient.generateText(prompt, {",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 229,
                    "content": "\"suggestedAlternatives\": [\"代替行動1\", \"代替行動2\"] // 一貫性がない場合のみ",
                    "indent": 2
                  },
                  {
                    "lineNumber": 230,
                    "content": "}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 231,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 232,
                    "content": "",
                    "indent": 7
                  },
                  {
                    "lineNumber": 233,
                    "content": "// AIによる一貫性検証",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 234,
                  "content": "const result = await this.geminiClient.generateText(prompt, {",
                  "indent": 6
                },
                "after": [
                  {
                    "lineNumber": 235,
                    "content": "temperature: 0.3",
                    "indent": 8
                  },
                  {
                    "lineNumber": 236,
                    "content": "});",
                    "indent": 6
                  },
                  {
                    "lineNumber": 237,
                    "content": "",
                    "indent": 7
                  },
                  {
                    "lineNumber": 238,
                    "content": "// JSONを解析",
                    "indent": 6
                  },
                  {
                    "lineNumber": 239,
                    "content": "const jsonMatch = result.match(/\\{[\\s\\S]*\\}/);",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 160,
                  "distance": 74
                }
              },
              "prompts": [],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": ValidationResult"
                  ],
                  "extractedTypes": [
                    "ValidationResult"
                  ]
                },
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "response_structure",
                  "fields": [
                    "match"
                  ],
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "rawValue": "temperature: 0.3",
                  "confidence": "high"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "アクション"
                ],
                "storyElements": [
                  "プロット",
                  "plot"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "評価",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "this",
                  "formatCharacterHistory",
                  "character",
                  "context",
                  "proposedAction",
                  "JSON",
                  "consistent",
                  "true",
                  "false",
                  "confidence"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "9690e16e0c38a36d072534939c89f69a"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "1b5aa787157119b34f9b55546e225e87",
          "calls": [
            {
              "id": "call_1f7dcda5",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "fileName": "character-analyzer.ts",
              "lineNumber": 316,
              "lineContent": "const result = await this.geminiClient.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 311,
                    "content": "1は完全に一貫しており自然な行動、0は完全に矛盾している行動を意味します。",
                    "indent": 0
                  },
                  {
                    "lineNumber": 312,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 313,
                    "content": "数値のみを出力してください。",
                    "indent": 0
                  },
                  {
                    "lineNumber": 314,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 315,
                    "content": "",
                    "indent": 7
                  }
                ],
                "current": {
                  "lineNumber": 316,
                  "content": "const result = await this.geminiClient.generateText(prompt, {",
                  "indent": 6
                },
                "after": [
                  {
                    "lineNumber": 317,
                    "content": "temperature: 0.1,",
                    "indent": 8
                  },
                  {
                    "lineNumber": 318,
                    "content": "targetLength: 10",
                    "indent": 8
                  },
                  {
                    "lineNumber": 319,
                    "content": "});",
                    "indent": 6
                  },
                  {
                    "lineNumber": 320,
                    "content": "",
                    "indent": 7
                  },
                  {
                    "lineNumber": 321,
                    "content": "// 数値を抽出",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 289,
                  "distance": 27
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "キャラクター「${character.name}」の履歴比較に失敗しました",
                  "fullLength": 37,
                  "truncatedContent": "キャラクター「${character.name}」の履歴比較に失敗しました",
                  "hash": "345a3584e94692d8689acfaf5e7a3cb3",
                  "keywords": [
                    "キャラクター",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ";\r\n      \r\n      const result = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.1,\r\n        targetLength: 10\r\n      });\r\n      \r\n      // 数値を抽出\r\n      const scoreMatch = result.match(/0\\.\\d+|1\\.0|1/);\r\n      if (scoreMatch) {\r\n        return parseFloat(scoreMatch[0]);\r\n      }\r\n      \r\n      // 数値が見つからない場合は中程度のスコア\r\n      return 0.7;\r\n    } catch (error) {\r\n      logger.error(",
                  "fullLength": 401,
                  "truncatedContent": ";\r\n      \r\n      const result = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.1,\r\n        targetLength: 10\r\n      });\r\n      \r\n      // 数値を抽出\r\n      const scoreMatch = result.match(/0\\.\\d+|1\\.0|1/);\r\n      if (scoreMatch) {\r\n        return parseFloat(scoreMatch[0]);\r\n      }\r\n      \r\n      // 数値が見つからない場合は中程度のスコア\r\n      return 0.7;\r\n    } catch (error) {\r\n      logger.error(",
                  "hash": "9a754dbb57e1a81d0780117331ddd019",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "template_literal",
                  "content": ";\r\n      \r\n      const result = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.1,\r\n        targetLength: 10\r\n      });\r\n      \r\n      // 数値を抽出\r\n      const scoreMatch = result.match(/0\\.\\d+|1\\.0|1/);\r\n      if (scoreMatch) {\r\n        return parseFloat(scoreMatch[0]);\r\n      }\r\n      \r\n      // 数値が見つからない場合は中程度のスコア\r\n      return 0.7;\r\n    } catch (error) {\r\n      logger.error(",
                  "fullLength": 401,
                  "truncatedContent": ";\r\n      \r\n      const result = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.1,\r\n        targetLength: 10\r\n      });\r\n      \r\n      // 数値を抽出\r\n      const scoreMatch = result.match(/0\\.\\d+|1\\.0|1/);\r\n      if (scoreMatch) {\r\n        return parseFloat(scoreMatch[0]);\r\n      }\r\n      \r\n      // 数値が見つからない場合は中程度のスコア\r\n      return 0.7;\r\n    } catch (error) {\r\n      logger.error(",
                  "hash": "9a754dbb57e1a81d0780117331ddd019",
                  "hasVariables": false,
                  "variableCount": 0
                }
              ],
              "expectedOutputs": [
                {
                  "type": "response_structure",
                  "fields": [
                    "match"
                  ],
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.1",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "アクション"
                ],
                "storyElements": [
                  "プロット",
                  "plot"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "作成",
                  "分析",
                  "評価",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "return",
                  "const",
                  "prompt",
                  "character",
                  "name",
                  "type",
                  "description",
                  "this",
                  "formatCharacterHistory",
                  "proposedAction"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "1b5aa787157119b34f9b55546e225e87"
            },
            {
              "id": "call_1f7dcda5",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "fileName": "character-analyzer.ts",
              "lineNumber": 316,
              "lineContent": "const result = await this.geminiClient.generateText(prompt, {",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 311,
                    "content": "1は完全に一貫しており自然な行動、0は完全に矛盾している行動を意味します。",
                    "indent": 0
                  },
                  {
                    "lineNumber": 312,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 313,
                    "content": "数値のみを出力してください。",
                    "indent": 0
                  },
                  {
                    "lineNumber": 314,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 315,
                    "content": "",
                    "indent": 7
                  }
                ],
                "current": {
                  "lineNumber": 316,
                  "content": "const result = await this.geminiClient.generateText(prompt, {",
                  "indent": 6
                },
                "after": [
                  {
                    "lineNumber": 317,
                    "content": "temperature: 0.1,",
                    "indent": 8
                  },
                  {
                    "lineNumber": 318,
                    "content": "targetLength: 10",
                    "indent": 8
                  },
                  {
                    "lineNumber": 319,
                    "content": "});",
                    "indent": 6
                  },
                  {
                    "lineNumber": 320,
                    "content": "",
                    "indent": 7
                  },
                  {
                    "lineNumber": 321,
                    "content": "// 数値を抽出",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 289,
                  "distance": 27
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "キャラクター「${character.name}」の履歴比較に失敗しました",
                  "fullLength": 37,
                  "truncatedContent": "キャラクター「${character.name}」の履歴比較に失敗しました",
                  "hash": "345a3584e94692d8689acfaf5e7a3cb3",
                  "keywords": [
                    "キャラクター",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ";\r\n      \r\n      const result = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.1,\r\n        targetLength: 10\r\n      });\r\n      \r\n      // 数値を抽出\r\n      const scoreMatch = result.match(/0\\.\\d+|1\\.0|1/);\r\n      if (scoreMatch) {\r\n        return parseFloat(scoreMatch[0]);\r\n      }\r\n      \r\n      // 数値が見つからない場合は中程度のスコア\r\n      return 0.7;\r\n    } catch (error) {\r\n      logger.error(",
                  "fullLength": 401,
                  "truncatedContent": ";\r\n      \r\n      const result = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.1,\r\n        targetLength: 10\r\n      });\r\n      \r\n      // 数値を抽出\r\n      const scoreMatch = result.match(/0\\.\\d+|1\\.0|1/);\r\n      if (scoreMatch) {\r\n        return parseFloat(scoreMatch[0]);\r\n      }\r\n      \r\n      // 数値が見つからない場合は中程度のスコア\r\n      return 0.7;\r\n    } catch (error) {\r\n      logger.error(",
                  "hash": "9a754dbb57e1a81d0780117331ddd019",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "template_literal",
                  "content": ";\r\n      \r\n      const result = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.1,\r\n        targetLength: 10\r\n      });\r\n      \r\n      // 数値を抽出\r\n      const scoreMatch = result.match(/0\\.\\d+|1\\.0|1/);\r\n      if (scoreMatch) {\r\n        return parseFloat(scoreMatch[0]);\r\n      }\r\n      \r\n      // 数値が見つからない場合は中程度のスコア\r\n      return 0.7;\r\n    } catch (error) {\r\n      logger.error(",
                  "fullLength": 401,
                  "truncatedContent": ";\r\n      \r\n      const result = await this.geminiClient.generateText(prompt, {\r\n        temperature: 0.1,\r\n        targetLength: 10\r\n      });\r\n      \r\n      // 数値を抽出\r\n      const scoreMatch = result.match(/0\\.\\d+|1\\.0|1/);\r\n      if (scoreMatch) {\r\n        return parseFloat(scoreMatch[0]);\r\n      }\r\n      \r\n      // 数値が見つからない場合は中程度のスコア\r\n      return 0.7;\r\n    } catch (error) {\r\n      logger.error(",
                  "hash": "9a754dbb57e1a81d0780117331ddd019",
                  "hasVariables": false,
                  "variableCount": 0
                }
              ],
              "expectedOutputs": [
                {
                  "type": "response_structure",
                  "fields": [
                    "match"
                  ],
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.1",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "アクション"
                ],
                "storyElements": [
                  "プロット",
                  "plot"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "作成",
                  "分析",
                  "評価",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "return",
                  "const",
                  "prompt",
                  "character",
                  "name",
                  "type",
                  "description",
                  "this",
                  "formatCharacterHistory",
                  "proposedAction"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "1b5aa787157119b34f9b55546e225e87"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "905cd400dde066bf416323c1eff6ee38",
          "calls": [
            {
              "id": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "fileName": "character-generator.ts",
              "lineNumber": 292,
              "lineContent": "() => this.geminiClient.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 287,
                    "content": "[バックストーリー本文]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 288,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 289,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 290,
                    "content": "// リトライロジックを使用してAI生成",
                    "indent": 12
                  },
                  {
                    "lineNumber": 291,
                    "content": "const backstory = await this.retryGenerationRequest(",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 292,
                  "content": "() => this.geminiClient.generateText(prompt, {",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 293,
                    "content": "temperature: 0.7,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 294,
                    "content": "targetLength: 1500",
                    "indent": 20
                  },
                  {
                    "lineNumber": 295,
                    "content": "}),",
                    "indent": 16
                  },
                  {
                    "lineNumber": 296,
                    "content": "'バックストーリー生成'",
                    "indent": 16
                  },
                  {
                    "lineNumber": 297,
                    "content": ");",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 251,
                  "distance": 41
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ").join('\\n') || '- (重要な出来事は特になし)'}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || '?'}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n",
                  "fullLength": 127,
                  "truncatedContent": ").join('\\n') || '- (重要な出来事は特になし)'}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || '?'}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n",
                  "hash": "b63754088aa27046ac7fe81819d0a02d",
                  "keywords": [
                    "物語",
                    "ストーリー",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "キャラクター「${character.name}」のバックストーリーを生成しました (${backstory.length}文字)",
                  "fullLength": 65,
                  "truncatedContent": "キャラクター「${character.name}」のバックストーリーを生成しました (${backstory.length}文字)",
                  "hash": "6ce0e953f2314c1e57fda79296ec5c0a",
                  "keywords": [
                    "キャラクター",
                    "ストーリー",
                    "生成",
                    "character",
                    "story"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "キャラクター「${character.name}」のバックストーリー生成に失敗しました",
                  "fullLength": 43,
                  "truncatedContent": "キャラクター「${character.name}」のバックストーリー生成に失敗しました",
                  "hash": "1db2ec83855afc276d100a57e5656189",
                  "keywords": [
                    "キャラクター",
                    "ストーリー",
                    "生成",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || ",
                  "fullLength": 61,
                  "truncatedContent": "}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || ",
                  "hash": "6fb6f1dee79b23241996a3b9ee204c6d",
                  "keywords": [
                    "物語",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
                  "fullLength": 308,
                  "truncatedContent": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
                  "hash": "6f6d9f42f5fa64a446d4a3c4ce8a2ae1",
                  "keywords": [
                    "ストーリー",
                    "生成",
                    "story",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ";\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                'バックストーリー生成'\n            );\n\n            logger.info(",
                  "fullLength": 330,
                  "truncatedContent": ";\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                'バックストーリー生成'\n            );\n\n            logger.info(",
                  "hash": "90e13dbbe207daa122a29f6343cd8e6c",
                  "keywords": [
                    "生成",
                    "ストーリー",
                    "story",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "キャラクター「${character.name}」のバックストーリー生成に失敗しました",
                  "fullLength": 43,
                  "truncatedContent": "キャラクター「${character.name}」のバックストーリー生成に失敗しました",
                  "hash": "1db2ec83855afc276d100a57e5656189",
                  "keywords": [
                    "キャラクター",
                    "ストーリー",
                    "生成",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
                  "fullLength": 308,
                  "truncatedContent": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
                  "hash": "6f6d9f42f5fa64a446d4a3c4ce8a2ae1",
                  "keywords": [
                    "ストーリー",
                    "生成",
                    "story",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ";\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                'バックストーリー生成'\n            );\n\n            logger.info(",
                  "fullLength": 330,
                  "truncatedContent": ";\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                'バックストーリー生成'\n            );\n\n            logger.info(",
                  "hash": "90e13dbbe207daa122a29f6343cd8e6c",
                  "keywords": [
                    "生成",
                    "ストーリー",
                    "story",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
                  "fullLength": 308,
                  "truncatedContent": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
                  "hash": "6f6d9f42f5fa64a446d4a3c4ce8a2ae1",
                  "keywords": [
                    "ストーリー",
                    "生成",
                    "story",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "template_literal",
                  "content": ").join('\\n') || '- (重要な出来事は特になし)'}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || '?'}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n",
                  "fullLength": 127,
                  "truncatedContent": ").join('\\n') || '- (重要な出来事は特になし)'}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || '?'}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n",
                  "hash": "b63754088aa27046ac7fe81819d0a02d",
                  "hasVariables": true,
                  "variableCount": 1
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "retryGeneration",
                  "relatedMethods": [
                    "retryGeneration"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.7",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "SF"
                ],
                "storyElements": [
                  "設定",
                  "世界観",
                  "背景",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "character",
                  "personality",
                  "values",
                  "join",
                  "quirks",
                  "backstory",
                  "origin",
                  "significantEvents",
                  "map",
                  "event"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "905cd400dde066bf416323c1eff6ee38"
            },
            {
              "id": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "fileName": "character-generator.ts",
              "lineNumber": 292,
              "lineContent": "() => this.geminiClient.generateText(prompt, {",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 287,
                    "content": "[バックストーリー本文]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 288,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 289,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 290,
                    "content": "// リトライロジックを使用してAI生成",
                    "indent": 12
                  },
                  {
                    "lineNumber": 291,
                    "content": "const backstory = await this.retryGenerationRequest(",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 292,
                  "content": "() => this.geminiClient.generateText(prompt, {",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 293,
                    "content": "temperature: 0.7,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 294,
                    "content": "targetLength: 1500",
                    "indent": 20
                  },
                  {
                    "lineNumber": 295,
                    "content": "}),",
                    "indent": 16
                  },
                  {
                    "lineNumber": 296,
                    "content": "'バックストーリー生成'",
                    "indent": 16
                  },
                  {
                    "lineNumber": 297,
                    "content": ");",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 251,
                  "distance": 41
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ").join('\\n') || '- (重要な出来事は特になし)'}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || '?'}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n",
                  "fullLength": 127,
                  "truncatedContent": ").join('\\n') || '- (重要な出来事は特になし)'}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || '?'}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n",
                  "hash": "b63754088aa27046ac7fe81819d0a02d",
                  "keywords": [
                    "物語",
                    "ストーリー",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "キャラクター「${character.name}」のバックストーリーを生成しました (${backstory.length}文字)",
                  "fullLength": 65,
                  "truncatedContent": "キャラクター「${character.name}」のバックストーリーを生成しました (${backstory.length}文字)",
                  "hash": "6ce0e953f2314c1e57fda79296ec5c0a",
                  "keywords": [
                    "キャラクター",
                    "ストーリー",
                    "生成",
                    "character",
                    "story"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "キャラクター「${character.name}」のバックストーリー生成に失敗しました",
                  "fullLength": 43,
                  "truncatedContent": "キャラクター「${character.name}」のバックストーリー生成に失敗しました",
                  "hash": "1db2ec83855afc276d100a57e5656189",
                  "keywords": [
                    "キャラクター",
                    "ストーリー",
                    "生成",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || ",
                  "fullLength": 61,
                  "truncatedContent": "}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || ",
                  "hash": "6fb6f1dee79b23241996a3b9ee204c6d",
                  "keywords": [
                    "物語",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
                  "fullLength": 308,
                  "truncatedContent": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
                  "hash": "6f6d9f42f5fa64a446d4a3c4ce8a2ae1",
                  "keywords": [
                    "ストーリー",
                    "生成",
                    "story",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ";\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                'バックストーリー生成'\n            );\n\n            logger.info(",
                  "fullLength": 330,
                  "truncatedContent": ";\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                'バックストーリー生成'\n            );\n\n            logger.info(",
                  "hash": "90e13dbbe207daa122a29f6343cd8e6c",
                  "keywords": [
                    "生成",
                    "ストーリー",
                    "story",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "キャラクター「${character.name}」のバックストーリー生成に失敗しました",
                  "fullLength": 43,
                  "truncatedContent": "キャラクター「${character.name}」のバックストーリー生成に失敗しました",
                  "hash": "1db2ec83855afc276d100a57e5656189",
                  "keywords": [
                    "キャラクター",
                    "ストーリー",
                    "生成",
                    "character"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
                  "fullLength": 308,
                  "truncatedContent": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
                  "hash": "6f6d9f42f5fa64a446d4a3c4ce8a2ae1",
                  "keywords": [
                    "ストーリー",
                    "生成",
                    "story",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ";\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                'バックストーリー生成'\n            );\n\n            logger.info(",
                  "fullLength": 330,
                  "truncatedContent": ";\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                'バックストーリー生成'\n            );\n\n            logger.info(",
                  "hash": "90e13dbbe207daa122a29f6343cd8e6c",
                  "keywords": [
                    "生成",
                    "ストーリー",
                    "story",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
                  "fullLength": 308,
                  "truncatedContent": "}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`;\n\n            // リトライロジックを使用してAI生成\n            const backstory = await this.retryGenerationRequest(\n                () => this.geminiClient.generateText(prompt, {\n                    temperature: 0.7,\n                    targetLength: 1500\n                }),\n                ",
                  "hash": "6f6d9f42f5fa64a446d4a3c4ce8a2ae1",
                  "keywords": [
                    "ストーリー",
                    "生成",
                    "story",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "template_literal",
                  "content": ").join('\\n') || '- (重要な出来事は特になし)'}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || '?'}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n",
                  "fullLength": 127,
                  "truncatedContent": ").join('\\n') || '- (重要な出来事は特になし)'}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || '?'}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n",
                  "hash": "b63754088aa27046ac7fe81819d0a02d",
                  "hasVariables": true,
                  "variableCount": 1
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "retryGeneration",
                  "relatedMethods": [
                    "retryGeneration"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.7",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "SF"
                ],
                "storyElements": [
                  "設定",
                  "世界観",
                  "背景",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "character",
                  "personality",
                  "values",
                  "join",
                  "quirks",
                  "backstory",
                  "origin",
                  "significantEvents",
                  "map",
                  "event"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "905cd400dde066bf416323c1eff6ee38"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "9e135a97103d2a88168af9fea8fc3b9c",
          "calls": [
            {
              "id": "call_3cf732e2",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "fileName": "character-generator.ts",
              "lineNumber": 445,
              "lineContent": "const result = await this.geminiClient.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 440,
                    "content": "${template.personality?.traits?.join(', ') || ''}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 441,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 442,
                    "content": "名前だけを出力してください。",
                    "indent": 0
                  },
                  {
                    "lineNumber": 443,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 444,
                    "content": "",
                    "indent": 0
                  }
                ],
                "current": {
                  "lineNumber": 445,
                  "content": "const result = await this.geminiClient.generateText(prompt, {",
                  "indent": 12
                },
                "after": [
                  {
                    "lineNumber": 446,
                    "content": "temperature: 0.7,",
                    "indent": 16
                  },
                  {
                    "lineNumber": 447,
                    "content": "targetLength: 50",
                    "indent": 16
                  },
                  {
                    "lineNumber": 448,
                    "content": "});",
                    "indent": 12
                  },
                  {
                    "lineNumber": 449,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 450,
                    "content": "// 余分な記号やスペースを削除",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 423,
                  "distance": 22
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
                  "fullLength": 432,
                  "truncatedContent": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
                  "hash": "54d2bd2eafec3617eade2e3e3f976f7f",
                  "keywords": [
                    "キャラクター",
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
                  "fullLength": 432,
                  "truncatedContent": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
                  "hash": "54d2bd2eafec3617eade2e3e3f976f7f",
                  "keywords": [
                    "キャラクター",
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
                  "fullLength": 432,
                  "truncatedContent": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
                  "hash": "54d2bd2eafec3617eade2e3e3f976f7f",
                  "keywords": [
                    "キャラクター",
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "}\n\n名前だけを出力してください。\n`;\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, ",
                  "fullLength": 260,
                  "truncatedContent": "}\n\n名前だけを出力してください。\n`;\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, ",
                  "hash": "0fbc4586b86a373e88cf3b8b1e7d3ef7",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "template_literal",
                  "content": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
                  "fullLength": 432,
                  "truncatedContent": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
                  "hash": "54d2bd2eafec3617eade2e3e3f976f7f",
                  "hasVariables": false,
                  "variableCount": 0
                }
              ],
              "expectedOutputs": [
                {
                  "type": "response_structure",
                  "fields": [
                    "trim"
                  ],
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.7",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "SF"
                ],
                "storyElements": [
                  "設定",
                  "世界観",
                  "背景",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "作成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "data",
                  "worldData",
                  "typeof",
                  "object",
                  "description",
                  "worldDescription",
                  "const",
                  "prompt",
                  "template",
                  "name"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "9e135a97103d2a88168af9fea8fc3b9c"
            },
            {
              "id": "call_3cf732e2",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "fileName": "character-generator.ts",
              "lineNumber": 445,
              "lineContent": "const result = await this.geminiClient.generateText(prompt, {",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 440,
                    "content": "${template.personality?.traits?.join(', ') || ''}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 441,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 442,
                    "content": "名前だけを出力してください。",
                    "indent": 0
                  },
                  {
                    "lineNumber": 443,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 444,
                    "content": "",
                    "indent": 0
                  }
                ],
                "current": {
                  "lineNumber": 445,
                  "content": "const result = await this.geminiClient.generateText(prompt, {",
                  "indent": 12
                },
                "after": [
                  {
                    "lineNumber": 446,
                    "content": "temperature: 0.7,",
                    "indent": 16
                  },
                  {
                    "lineNumber": 447,
                    "content": "targetLength: 50",
                    "indent": 16
                  },
                  {
                    "lineNumber": 448,
                    "content": "});",
                    "indent": 12
                  },
                  {
                    "lineNumber": 449,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 450,
                    "content": "// 余分な記号やスペースを削除",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 423,
                  "distance": 22
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
                  "fullLength": 432,
                  "truncatedContent": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
                  "hash": "54d2bd2eafec3617eade2e3e3f976f7f",
                  "keywords": [
                    "キャラクター",
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
                  "fullLength": 432,
                  "truncatedContent": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
                  "hash": "54d2bd2eafec3617eade2e3e3f976f7f",
                  "keywords": [
                    "キャラクター",
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
                  "fullLength": 432,
                  "truncatedContent": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
                  "hash": "54d2bd2eafec3617eade2e3e3f976f7f",
                  "keywords": [
                    "キャラクター",
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "}\n\n名前だけを出力してください。\n`;\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, ",
                  "fullLength": 260,
                  "truncatedContent": "}\n\n名前だけを出力してください。\n`;\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, ",
                  "hash": "0fbc4586b86a373e88cf3b8b1e7d3ef7",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "template_literal",
                  "content": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
                  "fullLength": 432,
                  "truncatedContent": ";\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 50\n            });\n\n            // 余分な記号やスペースを削除\n            return result.trim().replace(/[\"\"\"]/g, '');\n\n        } catch (error) {\n            logger.warn('キャラクター名生成に失敗しました', {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return ",
                  "hash": "54d2bd2eafec3617eade2e3e3f976f7f",
                  "hasVariables": false,
                  "variableCount": 0
                }
              ],
              "expectedOutputs": [
                {
                  "type": "response_structure",
                  "fields": [
                    "trim"
                  ],
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.7",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "SF"
                ],
                "storyElements": [
                  "設定",
                  "世界観",
                  "背景",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "作成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "data",
                  "worldData",
                  "typeof",
                  "object",
                  "description",
                  "worldDescription",
                  "const",
                  "prompt",
                  "template",
                  "name"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "9e135a97103d2a88168af9fea8fc3b9c"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "5a0877d24f989f441c0047695890a57b",
          "calls": [
            {
              "id": "call_60439f63",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "fileName": "character-generator.ts",
              "lineNumber": 626,
              "lineContent": "const result = await this.geminiClient.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 621,
                    "content": "\"strength\": 0から1の数値（関係の強さ）,",
                    "indent": 2
                  },
                  {
                    "lineNumber": 622,
                    "content": "\"description\": \"関係の簡潔な説明\"",
                    "indent": 2
                  },
                  {
                    "lineNumber": 623,
                    "content": "}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 624,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 625,
                    "content": "",
                    "indent": 0
                  }
                ],
                "current": {
                  "lineNumber": 626,
                  "content": "const result = await this.geminiClient.generateText(prompt, {",
                  "indent": 12
                },
                "after": [
                  {
                    "lineNumber": 627,
                    "content": "temperature: 0.7,",
                    "indent": 16
                  },
                  {
                    "lineNumber": 628,
                    "content": "targetLength: 200",
                    "indent": 16
                  },
                  {
                    "lineNumber": 629,
                    "content": "});",
                    "indent": 12
                  },
                  {
                    "lineNumber": 630,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 631,
                    "content": "// JSONを解析",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 576,
                  "distance": 50
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "}\n\n次の関係タイプから最も適切なものを選んでください:\nFRIEND, ENEMY, RIVAL, MENTOR, STUDENT, PARENT, CHILD, LOVER, PROTECTOR, PROTECTED, COLLEAGUE, NEUTRAL\n\nJSONフォーマットで回答してください:\n{\n  \"type\": \"関係タイプ\",\n  \"strength\": 0から1の数値（関係の強さ）,\n  \"description\": \"関係の簡潔な説明\"\n}\n`;\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 200\n            });\n\n            // JSONを解析\n            const jsonMatch = result.match(/\\{[\\s\\S]*\\}/);\n            if (!jsonMatch) {\n                throw new Error(",
                  "fullLength": 541,
                  "truncatedContent": "}\n\n次の関係タイプから最も適切なものを選んでください:\nFRIEND, ENEMY, RIVAL, MENTOR, STUDENT, PARENT, CHILD, LOVER, PROTECTOR, PROTECTED, COLLEAGUE, NEUTRAL\n\nJSONフォーマットで回答してください:\n{\n  \"type\": \"関係タイプ\",\n  \"strength\": 0から1の数値（関係の強さ）,\n  \"description\": \"関係の簡潔な説明\"\n}\n`;\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 200\n            });\n\n            // JSONを解析\n            const jsonMatch = result.match(/\\{[\\s\\S]*\\}/);\n            if (!jsonMatch) {\n                throw new Error(",
                  "hash": "c4152b1ab5abef6d566d2f29f6f57b31",
                  "keywords": [
                    "description",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "response_structure",
                  "fields": [
                    "match"
                  ],
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.7",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "SF"
                ],
                "storyElements": [
                  "設定",
                  "世界観",
                  "背景",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "構築",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "character",
                  "personality",
                  "traits",
                  "join",
                  "targetCharacter",
                  "name",
                  "type",
                  "description",
                  "FRIEND",
                  "ENEMY"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "5a0877d24f989f441c0047695890a57b"
            },
            {
              "id": "call_60439f63",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "fileName": "character-generator.ts",
              "lineNumber": 626,
              "lineContent": "const result = await this.geminiClient.generateText(prompt, {",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 621,
                    "content": "\"strength\": 0から1の数値（関係の強さ）,",
                    "indent": 2
                  },
                  {
                    "lineNumber": 622,
                    "content": "\"description\": \"関係の簡潔な説明\"",
                    "indent": 2
                  },
                  {
                    "lineNumber": 623,
                    "content": "}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 624,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 625,
                    "content": "",
                    "indent": 0
                  }
                ],
                "current": {
                  "lineNumber": 626,
                  "content": "const result = await this.geminiClient.generateText(prompt, {",
                  "indent": 12
                },
                "after": [
                  {
                    "lineNumber": 627,
                    "content": "temperature: 0.7,",
                    "indent": 16
                  },
                  {
                    "lineNumber": 628,
                    "content": "targetLength: 200",
                    "indent": 16
                  },
                  {
                    "lineNumber": 629,
                    "content": "});",
                    "indent": 12
                  },
                  {
                    "lineNumber": 630,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 631,
                    "content": "// JSONを解析",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 576,
                  "distance": 50
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "}\n\n次の関係タイプから最も適切なものを選んでください:\nFRIEND, ENEMY, RIVAL, MENTOR, STUDENT, PARENT, CHILD, LOVER, PROTECTOR, PROTECTED, COLLEAGUE, NEUTRAL\n\nJSONフォーマットで回答してください:\n{\n  \"type\": \"関係タイプ\",\n  \"strength\": 0から1の数値（関係の強さ）,\n  \"description\": \"関係の簡潔な説明\"\n}\n`;\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 200\n            });\n\n            // JSONを解析\n            const jsonMatch = result.match(/\\{[\\s\\S]*\\}/);\n            if (!jsonMatch) {\n                throw new Error(",
                  "fullLength": 541,
                  "truncatedContent": "}\n\n次の関係タイプから最も適切なものを選んでください:\nFRIEND, ENEMY, RIVAL, MENTOR, STUDENT, PARENT, CHILD, LOVER, PROTECTOR, PROTECTED, COLLEAGUE, NEUTRAL\n\nJSONフォーマットで回答してください:\n{\n  \"type\": \"関係タイプ\",\n  \"strength\": 0から1の数値（関係の強さ）,\n  \"description\": \"関係の簡潔な説明\"\n}\n`;\n\n            const result = await this.geminiClient.generateText(prompt, {\n                temperature: 0.7,\n                targetLength: 200\n            });\n\n            // JSONを解析\n            const jsonMatch = result.match(/\\{[\\s\\S]*\\}/);\n            if (!jsonMatch) {\n                throw new Error(",
                  "hash": "c4152b1ab5abef6d566d2f29f6f57b31",
                  "keywords": [
                    "description",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "response_structure",
                  "fields": [
                    "match"
                  ],
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.7",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "SF"
                ],
                "storyElements": [
                  "設定",
                  "世界観",
                  "背景",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "構築",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "character",
                  "personality",
                  "traits",
                  "join",
                  "targetCharacter",
                  "name",
                  "type",
                  "description",
                  "FRIEND",
                  "ENEMY"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "5a0877d24f989f441c0047695890a57b"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "49c06b2e36f9a52f9df39e2d1948f159",
          "calls": [
            {
              "id": "call_3b4a4711",
              "filePath": "src\\lib\\characters\\utils\\character-utils.ts",
              "fileName": "character-utils.ts",
              "lineNumber": 159,
              "lineContent": "const result = await geminiClient.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 154,
                    "content": "- 特性3",
                    "indent": 0
                  },
                  {
                    "lineNumber": 155,
                    "content": "- 特性4",
                    "indent": 0
                  },
                  {
                    "lineNumber": 156,
                    "content": "- 特性5",
                    "indent": 0
                  },
                  {
                    "lineNumber": 157,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 158,
                    "content": "",
                    "indent": 1
                  }
                ],
                "current": {
                  "lineNumber": 159,
                  "content": "const result = await geminiClient.generateText(prompt, {",
                  "indent": 4
                },
                "after": [
                  {
                    "lineNumber": 160,
                    "content": "temperature: 0.3,",
                    "indent": 6
                  },
                  {
                    "lineNumber": 161,
                    "content": "targetLength: 200",
                    "indent": 6
                  },
                  {
                    "lineNumber": 162,
                    "content": "});",
                    "indent": 4
                  },
                  {
                    "lineNumber": 163,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 164,
                    "content": "// 抽出された特性をリストに変換",
                    "indent": 4
                  }
                ],
                "functionContext": {
                  "functionName": "extractTraitsFromBackstory",
                  "startLine": 139,
                  "distance": 20
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
                  "fullLength": 158,
                  "truncatedContent": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
                  "hash": "e24c81817910e0cdf8b1481a16febc8a",
                  "keywords": [
                    "キャラクター",
                    "ストーリー",
                    "story"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
                  "fullLength": 158,
                  "truncatedContent": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
                  "hash": "e24c81817910e0cdf8b1481a16febc8a",
                  "keywords": [
                    "キャラクター",
                    "ストーリー",
                    "story"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "variable_assignment",
                  "variableName": "prompt",
                  "content": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
                  "fullLength": 158,
                  "truncatedContent": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
                  "hash": "e24c81817910e0cdf8b1481a16febc8a"
                },
                {
                  "type": "template_literal",
                  "content": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
                  "fullLength": 158,
                  "truncatedContent": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
                  "hash": "e24c81817910e0cdf8b1481a16febc8a",
                  "hasVariables": true,
                  "variableCount": 1
                }
              ],
              "expectedOutputs": [],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "背景"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "作成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "return",
                  "result",
                  "param",
                  "backstory",
                  "returns",
                  "Promise",
                  "export",
                  "async",
                  "function",
                  "extractTraitsFromBackstory"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "49c06b2e36f9a52f9df39e2d1948f159"
            },
            {
              "id": "call_3b4a4711",
              "filePath": "src\\lib\\characters\\utils\\character-utils.ts",
              "fileName": "character-utils.ts",
              "lineNumber": 159,
              "lineContent": "const result = await geminiClient.generateText(prompt, {",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 154,
                    "content": "- 特性3",
                    "indent": 0
                  },
                  {
                    "lineNumber": 155,
                    "content": "- 特性4",
                    "indent": 0
                  },
                  {
                    "lineNumber": 156,
                    "content": "- 特性5",
                    "indent": 0
                  },
                  {
                    "lineNumber": 157,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 158,
                    "content": "",
                    "indent": 1
                  }
                ],
                "current": {
                  "lineNumber": 159,
                  "content": "const result = await geminiClient.generateText(prompt, {",
                  "indent": 4
                },
                "after": [
                  {
                    "lineNumber": 160,
                    "content": "temperature: 0.3,",
                    "indent": 6
                  },
                  {
                    "lineNumber": 161,
                    "content": "targetLength: 200",
                    "indent": 6
                  },
                  {
                    "lineNumber": 162,
                    "content": "});",
                    "indent": 4
                  },
                  {
                    "lineNumber": 163,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 164,
                    "content": "// 抽出された特性をリストに変換",
                    "indent": 4
                  }
                ],
                "functionContext": {
                  "functionName": "extractTraitsFromBackstory",
                  "startLine": 139,
                  "distance": 20
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
                  "fullLength": 158,
                  "truncatedContent": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
                  "hash": "e24c81817910e0cdf8b1481a16febc8a",
                  "keywords": [
                    "キャラクター",
                    "ストーリー",
                    "story"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
                  "fullLength": 158,
                  "truncatedContent": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
                  "hash": "e24c81817910e0cdf8b1481a16febc8a",
                  "keywords": [
                    "キャラクター",
                    "ストーリー",
                    "story"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "variable_assignment",
                  "variableName": "prompt",
                  "content": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
                  "fullLength": 158,
                  "truncatedContent": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
                  "hash": "e24c81817910e0cdf8b1481a16febc8a"
                },
                {
                  "type": "template_literal",
                  "content": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
                  "fullLength": 158,
                  "truncatedContent": "\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n",
                  "hash": "e24c81817910e0cdf8b1481a16febc8a",
                  "hasVariables": true,
                  "variableCount": 1
                }
              ],
              "expectedOutputs": [],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "背景"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "作成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "return",
                  "result",
                  "param",
                  "backstory",
                  "returns",
                  "Promise",
                  "export",
                  "async",
                  "function",
                  "extractTraitsFromBackstory"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "49c06b2e36f9a52f9df39e2d1948f159"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "7453ba71b6a00dcb0c9ec412ffabbb99",
          "calls": [
            {
              "id": "call_b27aa071",
              "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
              "fileName": "auto-generator.ts",
              "lineNumber": 183,
              "lineContent": "() => this.geminiClient.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 178,
                    "content": "enrichedContext.characterInfo",
                    "indent": 20
                  },
                  {
                    "lineNumber": 179,
                    "content": ");",
                    "indent": 16
                  },
                  {
                    "lineNumber": 180,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 181,
                    "content": "// リトライロジック付きAI生成",
                    "indent": 16
                  },
                  {
                    "lineNumber": 182,
                    "content": "const response = await this.retryGenerationRequest(",
                    "indent": 16
                  }
                ],
                "current": {
                  "lineNumber": 183,
                  "content": "() => this.geminiClient.generateText(prompt, {",
                  "indent": 20
                },
                "after": [
                  {
                    "lineNumber": 184,
                    "content": "temperature: 0.7,",
                    "indent": 24
                  },
                  {
                    "lineNumber": 185,
                    "content": "targetLength: 2000",
                    "indent": 24
                  },
                  {
                    "lineNumber": 186,
                    "content": "}),",
                    "indent": 20
                  },
                  {
                    "lineNumber": 187,
                    "content": "'伏線生成'",
                    "indent": 20
                  },
                  {
                    "lineNumber": 188,
                    "content": ");",
                    "indent": 16
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 108,
                  "distance": 75
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\n                );\n\n                // 応答解析と検証\n                const generatedForeshadowing = this.parseAndValidateResponse(response, currentChapter);\n\n                logger.info(",
                  "fullLength": 181,
                  "truncatedContent": "\n                );\n\n                // 応答解析と検証\n                const generatedForeshadowing = this.parseAndValidateResponse(response, currentChapter);\n\n                logger.info(",
                  "hash": "9e9326d25764b198ce6204dc1b3f5802",
                  "keywords": [
                    "generate",
                    "Chapter"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "createAdvancedGenerationPrompt",
                  "relatedMethods": [
                    "createAdvancedGenerationPrompt",
                    "retryGeneration"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "setting",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.7",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "SF"
                ],
                "storyElements": [
                  "設定",
                  "世界観",
                  "scene",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "作成",
                  "generate",
                  "create"
                ],
                "complexity": "medium",
                "dependencies": [
                  "context",
                  "currentChapter",
                  "const",
                  "prompt",
                  "this",
                  "createAdvancedGenerationPrompt",
                  "enrichedContext",
                  "finalContext",
                  "count",
                  "worldSettings"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "7453ba71b6a00dcb0c9ec412ffabbb99"
            },
            {
              "id": "call_b27aa071",
              "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
              "fileName": "auto-generator.ts",
              "lineNumber": 183,
              "lineContent": "() => this.geminiClient.generateText(prompt, {",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 178,
                    "content": "enrichedContext.characterInfo",
                    "indent": 20
                  },
                  {
                    "lineNumber": 179,
                    "content": ");",
                    "indent": 16
                  },
                  {
                    "lineNumber": 180,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 181,
                    "content": "// リトライロジック付きAI生成",
                    "indent": 16
                  },
                  {
                    "lineNumber": 182,
                    "content": "const response = await this.retryGenerationRequest(",
                    "indent": 16
                  }
                ],
                "current": {
                  "lineNumber": 183,
                  "content": "() => this.geminiClient.generateText(prompt, {",
                  "indent": 20
                },
                "after": [
                  {
                    "lineNumber": 184,
                    "content": "temperature: 0.7,",
                    "indent": 24
                  },
                  {
                    "lineNumber": 185,
                    "content": "targetLength: 2000",
                    "indent": 24
                  },
                  {
                    "lineNumber": 186,
                    "content": "}),",
                    "indent": 20
                  },
                  {
                    "lineNumber": 187,
                    "content": "'伏線生成'",
                    "indent": 20
                  },
                  {
                    "lineNumber": 188,
                    "content": ");",
                    "indent": 16
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 108,
                  "distance": 75
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\n                );\n\n                // 応答解析と検証\n                const generatedForeshadowing = this.parseAndValidateResponse(response, currentChapter);\n\n                logger.info(",
                  "fullLength": 181,
                  "truncatedContent": "\n                );\n\n                // 応答解析と検証\n                const generatedForeshadowing = this.parseAndValidateResponse(response, currentChapter);\n\n                logger.info(",
                  "hash": "9e9326d25764b198ce6204dc1b3f5802",
                  "keywords": [
                    "generate",
                    "Chapter"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "createAdvancedGenerationPrompt",
                  "relatedMethods": [
                    "createAdvancedGenerationPrompt",
                    "retryGeneration"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "setting",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.7",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "ファンタジー",
                  "SF"
                ],
                "storyElements": [
                  "設定",
                  "世界観",
                  "scene",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "作成",
                  "generate",
                  "create"
                ],
                "complexity": "medium",
                "dependencies": [
                  "context",
                  "currentChapter",
                  "const",
                  "prompt",
                  "this",
                  "createAdvancedGenerationPrompt",
                  "enrichedContext",
                  "finalContext",
                  "count",
                  "worldSettings"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "7453ba71b6a00dcb0c9ec412ffabbb99"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "b4c07500cfaab5ab7cd1d7c0761adda7",
          "calls": [
            {
              "id": "call_0e0ffa92",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "fileName": "engine.ts",
              "lineNumber": 379,
              "lineContent": "const response = await this.geminiClient.generateText(contextualPrompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 374,
                    "content": "count,",
                    "indent": 8
                  },
                  {
                    "lineNumber": 375,
                    "content": "memoryContext",
                    "indent": 8
                  },
                  {
                    "lineNumber": 376,
                    "content": ");",
                    "indent": 6
                  },
                  {
                    "lineNumber": 377,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 378,
                    "content": "// Gemini APIによる生成",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 379,
                  "content": "const response = await this.geminiClient.generateText(contextualPrompt, {",
                  "indent": 6
                },
                "after": [
                  {
                    "lineNumber": 380,
                    "content": "temperature: 0.7",
                    "indent": 8
                  },
                  {
                    "lineNumber": 381,
                    "content": "});",
                    "indent": 6
                  },
                  {
                    "lineNumber": 382,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 383,
                    "content": "// レスポンスの解析と構造化",
                    "indent": 6
                  },
                  {
                    "lineNumber": 384,
                    "content": "const parsedForeshadowings = this.parseForeshadowingResponse(response, chapterNumber);",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 351,
                  "distance": 28
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "AI generated ${parsedForeshadowings.length} foreshadowings",
                  "fullLength": 58,
                  "truncatedContent": "AI generated ${parsedForeshadowings.length} foreshadowings",
                  "hash": "2a0c82bb81e19d3194f56e9a34c29bb9",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "contextualPrompt",
                  "relatedMethods": [
                    "contextualPrompt",
                    "buildContextualPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<Foreshadowing[]>"
                  ],
                  "extractedTypes": [
                    "Foreshadowing[]>"
                  ]
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.7",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "設定",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "character",
                  "character development"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "作成",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "private",
                  "async",
                  "generateAIForeshadowings",
                  "chapterContent",
                  "string",
                  "chapterNumber",
                  "number",
                  "count",
                  "memoryContext",
                  "ConsolidatedContext"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "b4c07500cfaab5ab7cd1d7c0761adda7"
            },
            {
              "id": "call_0e0ffa92",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "fileName": "engine.ts",
              "lineNumber": 379,
              "lineContent": "const response = await this.geminiClient.generateText(contextualPrompt, {",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 374,
                    "content": "count,",
                    "indent": 8
                  },
                  {
                    "lineNumber": 375,
                    "content": "memoryContext",
                    "indent": 8
                  },
                  {
                    "lineNumber": 376,
                    "content": ");",
                    "indent": 6
                  },
                  {
                    "lineNumber": 377,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 378,
                    "content": "// Gemini APIによる生成",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 379,
                  "content": "const response = await this.geminiClient.generateText(contextualPrompt, {",
                  "indent": 6
                },
                "after": [
                  {
                    "lineNumber": 380,
                    "content": "temperature: 0.7",
                    "indent": 8
                  },
                  {
                    "lineNumber": 381,
                    "content": "});",
                    "indent": 6
                  },
                  {
                    "lineNumber": 382,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 383,
                    "content": "// レスポンスの解析と構造化",
                    "indent": 6
                  },
                  {
                    "lineNumber": 384,
                    "content": "const parsedForeshadowings = this.parseForeshadowingResponse(response, chapterNumber);",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 351,
                  "distance": 28
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "AI generated ${parsedForeshadowings.length} foreshadowings",
                  "fullLength": 58,
                  "truncatedContent": "AI generated ${parsedForeshadowings.length} foreshadowings",
                  "hash": "2a0c82bb81e19d3194f56e9a34c29bb9",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "contextualPrompt",
                  "relatedMethods": [
                    "contextualPrompt",
                    "buildContextualPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<Foreshadowing[]>"
                  ],
                  "extractedTypes": [
                    "Foreshadowing[]>"
                  ]
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.7",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "設定",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "character",
                  "character development"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "作成",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "private",
                  "async",
                  "generateAIForeshadowings",
                  "chapterContent",
                  "string",
                  "chapterNumber",
                  "number",
                  "count",
                  "memoryContext",
                  "ConsolidatedContext"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "b4c07500cfaab5ab7cd1d7c0761adda7"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "fa09d995e4731ede117f4d94a9f940b1",
          "calls": [
            {
              "id": "call_6adb174a",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "fileName": "engine.ts",
              "lineNumber": 1006,
              "lineContent": "const response = await this.geminiClient.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 1001,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1002,
                    "content": "複数選択する場合は、それぞれについて上記形式で記述してください。",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1003,
                    "content": "適切な候補がない場合は「適切な候補なし」と回答してください。",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1004,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1005,
                    "content": "",
                    "indent": 0
                  }
                ],
                "current": {
                  "lineNumber": 1006,
                  "content": "const response = await this.geminiClient.generateText(prompt, {",
                  "indent": 6
                },
                "after": [
                  {
                    "lineNumber": 1007,
                    "content": "temperature: 0.3",
                    "indent": 8
                  },
                  {
                    "lineNumber": 1008,
                    "content": "});",
                    "indent": 6
                  },
                  {
                    "lineNumber": 1009,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1010,
                    "content": "return this.parseResolutionAnalysis(response, candidates);",
                    "indent": 6
                  },
                  {
                    "lineNumber": 1011,
                    "content": "",
                    "indent": 0
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 956,
                  "distance": 50
                }
              },
              "prompts": [
                {
                  "type": "method_based",
                  "suggestedPurpose": "parseResolutionAnalysis",
                  "relatedMethods": [
                    "parseResolutionAnalysis"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "resolution",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "rawValue": "temperature: 0.3",
                  "confidence": "high"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "設定",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "character",
                  "character development"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "評価",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "lannedResolution",
                  "join",
                  "const",
                  "prompt",
                  "maxCount",
                  "candidateInfo",
                  "chapterContent",
                  "substring",
                  "response",
                  "await"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "fa09d995e4731ede117f4d94a9f940b1"
            },
            {
              "id": "call_6adb174a",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "fileName": "engine.ts",
              "lineNumber": 1006,
              "lineContent": "const response = await this.geminiClient.generateText(prompt, {",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 1001,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1002,
                    "content": "複数選択する場合は、それぞれについて上記形式で記述してください。",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1003,
                    "content": "適切な候補がない場合は「適切な候補なし」と回答してください。",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1004,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1005,
                    "content": "",
                    "indent": 0
                  }
                ],
                "current": {
                  "lineNumber": 1006,
                  "content": "const response = await this.geminiClient.generateText(prompt, {",
                  "indent": 6
                },
                "after": [
                  {
                    "lineNumber": 1007,
                    "content": "temperature: 0.3",
                    "indent": 8
                  },
                  {
                    "lineNumber": 1008,
                    "content": "});",
                    "indent": 6
                  },
                  {
                    "lineNumber": 1009,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1010,
                    "content": "return this.parseResolutionAnalysis(response, candidates);",
                    "indent": 6
                  },
                  {
                    "lineNumber": 1011,
                    "content": "",
                    "indent": 0
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 956,
                  "distance": 50
                }
              },
              "prompts": [
                {
                  "type": "method_based",
                  "suggestedPurpose": "parseResolutionAnalysis",
                  "relatedMethods": [
                    "parseResolutionAnalysis"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "resolution",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "rawValue": "temperature: 0.3",
                  "confidence": "high"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "設定",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "character",
                  "character development"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "評価",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "lannedResolution",
                  "join",
                  "const",
                  "prompt",
                  "maxCount",
                  "candidateInfo",
                  "chapterContent",
                  "substring",
                  "response",
                  "await"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "fa09d995e4731ede117f4d94a9f940b1"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "a7aebb40a563f7f66caa22c0191ffaa2",
          "calls": [
            {
              "id": "call_18fd8fd2",
              "filePath": "src\\lib\\foreshadowing\\manager.ts",
              "fileName": "manager.ts",
              "lineNumber": 435,
              "lineContent": "const response = await this.geminiClient.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 430,
                    "content": "\"resolutionMethod\": \"string\",",
                    "indent": 2
                  },
                  {
                    "lineNumber": 431,
                    "content": "\"isHint\": boolean",
                    "indent": 2
                  },
                  {
                    "lineNumber": 432,
                    "content": "}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 433,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 434,
                    "content": "",
                    "indent": 0
                  }
                ],
                "current": {
                  "lineNumber": 435,
                  "content": "const response = await this.geminiClient.generateText(prompt, {",
                  "indent": 12
                },
                "after": [
                  {
                    "lineNumber": 436,
                    "content": "temperature: 0.1",
                    "indent": 16
                  },
                  {
                    "lineNumber": 437,
                    "content": "});",
                    "indent": 12
                  },
                  {
                    "lineNumber": 438,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 439,
                    "content": "const evaluation = this.parseEvaluationResponse(response);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 440,
                    "content": "",
                    "indent": 0
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 374,
                  "distance": 61
                }
              },
              "prompts": [],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "resolution",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.1",
                  "rawValue": "temperature: 0.1",
                  "confidence": "high"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "設定",
                  "scene"
                ],
                "characterElements": [],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "評価",
                  "判断",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "otential_resolution",
                  "foreshadowing",
                  "plannedResolution",
                  "chapterNumber",
                  "chapterContent",
                  "substring",
                  "JSON",
                  "isPossible",
                  "boolean",
                  "confidence"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "a7aebb40a563f7f66caa22c0191ffaa2"
            },
            {
              "id": "call_18fd8fd2",
              "filePath": "src\\lib\\foreshadowing\\manager.ts",
              "fileName": "manager.ts",
              "lineNumber": 435,
              "lineContent": "const response = await this.geminiClient.generateText(prompt, {",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 430,
                    "content": "\"resolutionMethod\": \"string\",",
                    "indent": 2
                  },
                  {
                    "lineNumber": 431,
                    "content": "\"isHint\": boolean",
                    "indent": 2
                  },
                  {
                    "lineNumber": 432,
                    "content": "}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 433,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 434,
                    "content": "",
                    "indent": 0
                  }
                ],
                "current": {
                  "lineNumber": 435,
                  "content": "const response = await this.geminiClient.generateText(prompt, {",
                  "indent": 12
                },
                "after": [
                  {
                    "lineNumber": 436,
                    "content": "temperature: 0.1",
                    "indent": 16
                  },
                  {
                    "lineNumber": 437,
                    "content": "});",
                    "indent": 12
                  },
                  {
                    "lineNumber": 438,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 439,
                    "content": "const evaluation = this.parseEvaluationResponse(response);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 440,
                    "content": "",
                    "indent": 0
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 374,
                  "distance": 61
                }
              },
              "prompts": [],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "resolution",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.1",
                  "rawValue": "temperature: 0.1",
                  "confidence": "high"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "設定",
                  "scene"
                ],
                "characterElements": [],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "評価",
                  "判断",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "otential_resolution",
                  "foreshadowing",
                  "plannedResolution",
                  "chapterNumber",
                  "chapterContent",
                  "substring",
                  "JSON",
                  "isPossible",
                  "boolean",
                  "confidence"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "a7aebb40a563f7f66caa22c0191ffaa2"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "88bad847670f4df4a24201c80e1d2620",
          "calls": [
            {
              "id": "call_aea0563d",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "fileName": "resolution-advisor.ts",
              "lineNumber": 408,
              "lineContent": "const aiResponse = await this.geminiClient.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 403,
                    "content": "chapterNumber,",
                    "indent": 12
                  },
                  {
                    "lineNumber": 404,
                    "content": "qualityMetrics",
                    "indent": 12
                  },
                  {
                    "lineNumber": 405,
                    "content": ");",
                    "indent": 8
                  },
                  {
                    "lineNumber": 406,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 407,
                    "content": "try {",
                    "indent": 8
                  }
                ],
                "current": {
                  "lineNumber": 408,
                  "content": "const aiResponse = await this.geminiClient.generateText(prompt, {",
                  "indent": 12
                },
                "after": [
                  {
                    "lineNumber": 409,
                    "content": "temperature: 0.1 // 分析タスクは低温で",
                    "indent": 16
                  },
                  {
                    "lineNumber": 410,
                    "content": "});",
                    "indent": 12
                  },
                  {
                    "lineNumber": 411,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 412,
                    "content": "// レスポンスの安全な解析",
                    "indent": 12
                  },
                  {
                    "lineNumber": 413,
                    "content": "const aiAnalysis = this.parseAIResponse(aiResponse);",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 373,
                  "distance": 35
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "]\n    ): Promise<ResolutionEvaluationResult> {\n        // タイミング信頼度の計算\n        const timingScore = this.calculateTimingConfidence(foreshadowing, chapterNumber);\n\n        // AIプロンプトの構築（統合記憶コンテキスト含む）\n        const prompt = this.buildAnalysisPrompt(\n            foreshadowing, \n            chapterContent, \n            chapterNumber, \n            qualityMetrics\n        );\n\n        try {\n            const aiResponse = await this.geminiClient.generateText(prompt, {\n                temperature: 0.1 // 分析タスクは低温で\n            });\n\n            // レスポンスの安全な解析\n            const aiAnalysis = this.parseAIResponse(aiResponse);\n            const aiScore = aiAnalysis.confidence;\n\n            // 最終的な信頼度計算（タイミング + AI分析 + システム品質）\n            const finalScore = this.calculateFinalConfidence(timingScore, aiScore, qualityMetrics);\n\n            return {\n                isPossible: aiAnalysis.isPossible && finalScore >= 0.6,\n                confidence: finalScore,\n                reason: aiAnalysis.reason || ",
                  "fullLength": 996,
                  "truncatedContent": "]\n    ): Promise<ResolutionEvaluationResult> {\n        // タイミング信頼度の計算\n        const timingScore = this.calculateTimingConfidence(foreshadowing, chapterNumber);\n\n        // AIプロンプトの構築（統合記憶コンテキスト含む）\n        const prompt = this.buildAnalysisPrompt(\n            foreshadowing, \n            chapterContent, \n            chapterNumber, \n            qualityMetrics\n        );\n\n        try {\n            const aiResponse = await this.geminiClient.generateText(prompt, {\n                temperature: 0.1 // 分析タスクは低温で\n            });\n\n            // レスポンスの安全な解析\n            const aiAnalysis = this.parseAIResponse(aiResponse);\n            const aiScore = aiAnalysis.confidence;\n\n            // 最終的な信頼度計算（タイミング + AI分析 + システム品質）\n            const finalScore = this.calculateFinalConfidence(timingScore, aiScore, qualityMetrics);\n\n            return {\n                isPossible: aiAnalysis.isPossible && finalScore >= 0.6,\n                confidence: finalScore,\n                reason: aiAnalysis.reason || ",
                  "hash": "2d4b2a57bab23204abc2498362f720bb",
                  "keywords": [
                    "分析",
                    "chapter",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "]\n    ): Promise<ResolutionEvaluationResult> {\n        // タイミング信頼度の計算\n        const timingScore = this.calculateTimingConfidence(foreshadowing, chapterNumber);\n\n        // AIプロンプトの構築（統合記憶コンテキスト含む）\n        const prompt = this.buildAnalysisPrompt(\n            foreshadowing, \n            chapterContent, \n            chapterNumber, \n            qualityMetrics\n        );\n\n        try {\n            const aiResponse = await this.geminiClient.generateText(prompt, {\n                temperature: 0.1 // 分析タスクは低温で\n            });\n\n            // レスポンスの安全な解析\n            const aiAnalysis = this.parseAIResponse(aiResponse);\n            const aiScore = aiAnalysis.confidence;\n\n            // 最終的な信頼度計算（タイミング + AI分析 + システム品質）\n            const finalScore = this.calculateFinalConfidence(timingScore, aiScore, qualityMetrics);\n\n            return {\n                isPossible: aiAnalysis.isPossible && finalScore >= 0.6,\n                confidence: finalScore,\n                reason: aiAnalysis.reason || ",
                  "fullLength": 996,
                  "truncatedContent": "]\n    ): Promise<ResolutionEvaluationResult> {\n        // タイミング信頼度の計算\n        const timingScore = this.calculateTimingConfidence(foreshadowing, chapterNumber);\n\n        // AIプロンプトの構築（統合記憶コンテキスト含む）\n        const prompt = this.buildAnalysisPrompt(\n            foreshadowing, \n            chapterContent, \n            chapterNumber, \n            qualityMetrics\n        );\n\n        try {\n            const aiResponse = await this.geminiClient.generateText(prompt, {\n                temperature: 0.1 // 分析タスクは低温で\n            });\n\n            // レスポンスの安全な解析\n            const aiAnalysis = this.parseAIResponse(aiResponse);\n            const aiScore = aiAnalysis.confidence;\n\n            // 最終的な信頼度計算（タイミング + AI分析 + システム品質）\n            const finalScore = this.calculateFinalConfidence(timingScore, aiScore, qualityMetrics);\n\n            return {\n                isPossible: aiAnalysis.isPossible && finalScore >= 0.6,\n                confidence: finalScore,\n                reason: aiAnalysis.reason || ",
                  "hash": "2d4b2a57bab23204abc2498362f720bb",
                  "keywords": [
                    "分析",
                    "chapter",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "buildAnalysisPrompt",
                  "relatedMethods": [
                    "buildAnalysisPrompt",
                    "aiAnalysis"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<ResolutionEvaluationResult>"
                  ],
                  "extractedTypes": [
                    "ResolutionEvaluationResult>"
                  ]
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "resolution",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.1 // 分析タスクは低温で",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "設定"
                ],
                "characterElements": [],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "構築",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "number",
                  "qualityMetrics",
                  "UnifiedForeshadowingData",
                  "Promise",
                  "ResolutionEvaluationResult",
                  "const",
                  "timingScore",
                  "this",
                  "calculateTimingConfidence",
                  "foreshadowing"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "88bad847670f4df4a24201c80e1d2620"
            },
            {
              "id": "call_aea0563d",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "fileName": "resolution-advisor.ts",
              "lineNumber": 408,
              "lineContent": "const aiResponse = await this.geminiClient.generateText(prompt, {",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 403,
                    "content": "chapterNumber,",
                    "indent": 12
                  },
                  {
                    "lineNumber": 404,
                    "content": "qualityMetrics",
                    "indent": 12
                  },
                  {
                    "lineNumber": 405,
                    "content": ");",
                    "indent": 8
                  },
                  {
                    "lineNumber": 406,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 407,
                    "content": "try {",
                    "indent": 8
                  }
                ],
                "current": {
                  "lineNumber": 408,
                  "content": "const aiResponse = await this.geminiClient.generateText(prompt, {",
                  "indent": 12
                },
                "after": [
                  {
                    "lineNumber": 409,
                    "content": "temperature: 0.1 // 分析タスクは低温で",
                    "indent": 16
                  },
                  {
                    "lineNumber": 410,
                    "content": "});",
                    "indent": 12
                  },
                  {
                    "lineNumber": 411,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 412,
                    "content": "// レスポンスの安全な解析",
                    "indent": 12
                  },
                  {
                    "lineNumber": 413,
                    "content": "const aiAnalysis = this.parseAIResponse(aiResponse);",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 373,
                  "distance": 35
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "]\n    ): Promise<ResolutionEvaluationResult> {\n        // タイミング信頼度の計算\n        const timingScore = this.calculateTimingConfidence(foreshadowing, chapterNumber);\n\n        // AIプロンプトの構築（統合記憶コンテキスト含む）\n        const prompt = this.buildAnalysisPrompt(\n            foreshadowing, \n            chapterContent, \n            chapterNumber, \n            qualityMetrics\n        );\n\n        try {\n            const aiResponse = await this.geminiClient.generateText(prompt, {\n                temperature: 0.1 // 分析タスクは低温で\n            });\n\n            // レスポンスの安全な解析\n            const aiAnalysis = this.parseAIResponse(aiResponse);\n            const aiScore = aiAnalysis.confidence;\n\n            // 最終的な信頼度計算（タイミング + AI分析 + システム品質）\n            const finalScore = this.calculateFinalConfidence(timingScore, aiScore, qualityMetrics);\n\n            return {\n                isPossible: aiAnalysis.isPossible && finalScore >= 0.6,\n                confidence: finalScore,\n                reason: aiAnalysis.reason || ",
                  "fullLength": 996,
                  "truncatedContent": "]\n    ): Promise<ResolutionEvaluationResult> {\n        // タイミング信頼度の計算\n        const timingScore = this.calculateTimingConfidence(foreshadowing, chapterNumber);\n\n        // AIプロンプトの構築（統合記憶コンテキスト含む）\n        const prompt = this.buildAnalysisPrompt(\n            foreshadowing, \n            chapterContent, \n            chapterNumber, \n            qualityMetrics\n        );\n\n        try {\n            const aiResponse = await this.geminiClient.generateText(prompt, {\n                temperature: 0.1 // 分析タスクは低温で\n            });\n\n            // レスポンスの安全な解析\n            const aiAnalysis = this.parseAIResponse(aiResponse);\n            const aiScore = aiAnalysis.confidence;\n\n            // 最終的な信頼度計算（タイミング + AI分析 + システム品質）\n            const finalScore = this.calculateFinalConfidence(timingScore, aiScore, qualityMetrics);\n\n            return {\n                isPossible: aiAnalysis.isPossible && finalScore >= 0.6,\n                confidence: finalScore,\n                reason: aiAnalysis.reason || ",
                  "hash": "2d4b2a57bab23204abc2498362f720bb",
                  "keywords": [
                    "分析",
                    "chapter",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "]\n    ): Promise<ResolutionEvaluationResult> {\n        // タイミング信頼度の計算\n        const timingScore = this.calculateTimingConfidence(foreshadowing, chapterNumber);\n\n        // AIプロンプトの構築（統合記憶コンテキスト含む）\n        const prompt = this.buildAnalysisPrompt(\n            foreshadowing, \n            chapterContent, \n            chapterNumber, \n            qualityMetrics\n        );\n\n        try {\n            const aiResponse = await this.geminiClient.generateText(prompt, {\n                temperature: 0.1 // 分析タスクは低温で\n            });\n\n            // レスポンスの安全な解析\n            const aiAnalysis = this.parseAIResponse(aiResponse);\n            const aiScore = aiAnalysis.confidence;\n\n            // 最終的な信頼度計算（タイミング + AI分析 + システム品質）\n            const finalScore = this.calculateFinalConfidence(timingScore, aiScore, qualityMetrics);\n\n            return {\n                isPossible: aiAnalysis.isPossible && finalScore >= 0.6,\n                confidence: finalScore,\n                reason: aiAnalysis.reason || ",
                  "fullLength": 996,
                  "truncatedContent": "]\n    ): Promise<ResolutionEvaluationResult> {\n        // タイミング信頼度の計算\n        const timingScore = this.calculateTimingConfidence(foreshadowing, chapterNumber);\n\n        // AIプロンプトの構築（統合記憶コンテキスト含む）\n        const prompt = this.buildAnalysisPrompt(\n            foreshadowing, \n            chapterContent, \n            chapterNumber, \n            qualityMetrics\n        );\n\n        try {\n            const aiResponse = await this.geminiClient.generateText(prompt, {\n                temperature: 0.1 // 分析タスクは低温で\n            });\n\n            // レスポンスの安全な解析\n            const aiAnalysis = this.parseAIResponse(aiResponse);\n            const aiScore = aiAnalysis.confidence;\n\n            // 最終的な信頼度計算（タイミング + AI分析 + システム品質）\n            const finalScore = this.calculateFinalConfidence(timingScore, aiScore, qualityMetrics);\n\n            return {\n                isPossible: aiAnalysis.isPossible && finalScore >= 0.6,\n                confidence: finalScore,\n                reason: aiAnalysis.reason || ",
                  "hash": "2d4b2a57bab23204abc2498362f720bb",
                  "keywords": [
                    "分析",
                    "chapter",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "buildAnalysisPrompt",
                  "relatedMethods": [
                    "buildAnalysisPrompt",
                    "aiAnalysis"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<ResolutionEvaluationResult>"
                  ],
                  "extractedTypes": [
                    "ResolutionEvaluationResult>"
                  ]
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "resolution",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.1 // 分析タスクは低温で",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "設定"
                ],
                "characterElements": [],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "構築",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "number",
                  "qualityMetrics",
                  "UnifiedForeshadowingData",
                  "Promise",
                  "ResolutionEvaluationResult",
                  "const",
                  "timingScore",
                  "this",
                  "calculateTimingConfidence",
                  "foreshadowing"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "88bad847670f4df4a24201c80e1d2620"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "abcd09bbf657661a476210500145c0e9",
          "calls": [
            {
              "id": "call_869cbbc6",
              "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
              "fileName": "chapter-generator.ts",
              "lineNumber": 357,
              "lineContent": "this.geminiClient.generateText(enhancedPrompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 352,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 353,
                    "content": "// テキスト生成",
                    "indent": 12
                  },
                  {
                    "lineNumber": 354,
                    "content": "logger.info(`Calling Gemini API for chapter ${chapterNumber}`);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 355,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 356,
                    "content": "const generatedText = await withTimeout(",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 357,
                  "content": "this.geminiClient.generateText(enhancedPrompt, {",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 358,
                    "content": "targetLength: enhancementOptions?.targetLength || params.generation.targetLength,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 359,
                    "content": "temperature: params.generation.temperature,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 360,
                    "content": "frequencyPenalty: params.generation.frequencyPenalty,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 361,
                    "content": "presencePenalty: params.generation.presencePenalty,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 362,
                    "content": "...(enhancementOptions?.overrides?.model ? { model: enhancementOptions.overrides.model } : {}),",
                    "indent": 20
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 346,
                  "distance": 11
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ", {\n                    error: promptSaveError instanceof Error ? promptSaveError.message : String(promptSaveError)\n                });\n                // プロンプト保存失敗は生成処理を停止させない\n            }\n\n            // テキスト生成\n            logger.info(",
                  "fullLength": 238,
                  "truncatedContent": ", {\n                    error: promptSaveError instanceof Error ? promptSaveError.message : String(promptSaveError)\n                });\n                // プロンプト保存失敗は生成処理を停止させない\n            }\n\n            // テキスト生成\n            logger.info(",
                  "hash": "1a1c874b4efe1d178ab108d0376de6c7",
                  "keywords": [
                    "生成"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "template_literal",
                  "content": ", {\n                    error: promptSaveError instanceof Error ? promptSaveError.message : String(promptSaveError)\n                });\n                // プロンプト保存失敗は生成処理を停止させない\n            }\n\n            // テキスト生成\n            logger.info(",
                  "fullLength": 238,
                  "truncatedContent": ", {\n                    error: promptSaveError instanceof Error ? promptSaveError.message : String(promptSaveError)\n                });\n                // プロンプト保存失敗は生成処理を停止させない\n            }\n\n            // テキスト生成\n            logger.info(",
                  "hash": "1a1c874b4efe1d178ab108d0376de6c7",
                  "hasVariables": false,
                  "variableCount": 0
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "savedPrompt",
                  "relatedMethods": [
                    "savedPrompt",
                    "enhancedPrompt",
                    "AI_GENERATION"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "params.generation.temperature",
                  "source": "object_literal",
                  "confidence": "medium"
                },
                "model": {
                  "value": "enhancementOptions.overrides.model",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "背景",
                  "plot",
                  "scene",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "catch",
                  "promptSaveError",
                  "logger",
                  "warn",
                  "Failed",
                  "save",
                  "prompt",
                  "for",
                  "chapter",
                  "chapterNumber"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "abcd09bbf657661a476210500145c0e9"
            },
            {
              "id": "call_869cbbc6",
              "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
              "fileName": "chapter-generator.ts",
              "lineNumber": 357,
              "lineContent": "this.geminiClient.generateText(enhancedPrompt, {",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 352,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 353,
                    "content": "// テキスト生成",
                    "indent": 12
                  },
                  {
                    "lineNumber": 354,
                    "content": "logger.info(`Calling Gemini API for chapter ${chapterNumber}`);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 355,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 356,
                    "content": "const generatedText = await withTimeout(",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 357,
                  "content": "this.geminiClient.generateText(enhancedPrompt, {",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 358,
                    "content": "targetLength: enhancementOptions?.targetLength || params.generation.targetLength,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 359,
                    "content": "temperature: params.generation.temperature,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 360,
                    "content": "frequencyPenalty: params.generation.frequencyPenalty,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 361,
                    "content": "presencePenalty: params.generation.presencePenalty,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 362,
                    "content": "...(enhancementOptions?.overrides?.model ? { model: enhancementOptions.overrides.model } : {}),",
                    "indent": 20
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 346,
                  "distance": 11
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ", {\n                    error: promptSaveError instanceof Error ? promptSaveError.message : String(promptSaveError)\n                });\n                // プロンプト保存失敗は生成処理を停止させない\n            }\n\n            // テキスト生成\n            logger.info(",
                  "fullLength": 238,
                  "truncatedContent": ", {\n                    error: promptSaveError instanceof Error ? promptSaveError.message : String(promptSaveError)\n                });\n                // プロンプト保存失敗は生成処理を停止させない\n            }\n\n            // テキスト生成\n            logger.info(",
                  "hash": "1a1c874b4efe1d178ab108d0376de6c7",
                  "keywords": [
                    "生成"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "template_literal",
                  "content": ", {\n                    error: promptSaveError instanceof Error ? promptSaveError.message : String(promptSaveError)\n                });\n                // プロンプト保存失敗は生成処理を停止させない\n            }\n\n            // テキスト生成\n            logger.info(",
                  "fullLength": 238,
                  "truncatedContent": ", {\n                    error: promptSaveError instanceof Error ? promptSaveError.message : String(promptSaveError)\n                });\n                // プロンプト保存失敗は生成処理を停止させない\n            }\n\n            // テキスト生成\n            logger.info(",
                  "hash": "1a1c874b4efe1d178ab108d0376de6c7",
                  "hasVariables": false,
                  "variableCount": 0
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "savedPrompt",
                  "relatedMethods": [
                    "savedPrompt",
                    "enhancedPrompt",
                    "AI_GENERATION"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "params.generation.temperature",
                  "source": "object_literal",
                  "confidence": "medium"
                },
                "model": {
                  "value": "enhancementOptions.overrides.model",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "背景",
                  "plot",
                  "scene",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "catch",
                  "promptSaveError",
                  "logger",
                  "warn",
                  "Failed",
                  "save",
                  "prompt",
                  "for",
                  "chapter",
                  "chapterNumber"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "abcd09bbf657661a476210500145c0e9"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "e903081b2c235442c25df28c40679d8b",
          "calls": [
            {
              "id": "call_f992fda8",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "fileName": "gemini-client.ts",
              "lineNumber": 195,
              "lineContent": "* const text = await geminiClient.generateText(\"こんにちは、世界について教えてください\");",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 190,
                    "content": "* @throws {GenerationError} 空のプロンプトが提供された場合、またはAPIが空の応答を返した場合",
                    "indent": 5
                  },
                  {
                    "lineNumber": 191,
                    "content": "* @throws {ExternalServiceError} すべての再試行が失敗した場合",
                    "indent": 5
                  },
                  {
                    "lineNumber": 192,
                    "content": "*",
                    "indent": 5
                  },
                  {
                    "lineNumber": 193,
                    "content": "* @usage",
                    "indent": 5
                  },
                  {
                    "lineNumber": 194,
                    "content": "* // 基本的な使用方法",
                    "indent": 5
                  }
                ],
                "current": {
                  "lineNumber": 195,
                  "content": "* const text = await geminiClient.generateText(\"こんにちは、世界について教えてください\");",
                  "indent": 5
                },
                "after": [
                  {
                    "lineNumber": 196,
                    "content": "*",
                    "indent": 5
                  },
                  {
                    "lineNumber": 197,
                    "content": "* // オプション付きの使用方法",
                    "indent": 5
                  },
                  {
                    "lineNumber": 198,
                    "content": "* const text = await geminiClient.generateText(\"詳細な分析をしてください\", {",
                    "indent": 5
                  },
                  {
                    "lineNumber": 199,
                    "content": "*   temperature: 0.5,",
                    "indent": 5
                  },
                  {
                    "lineNumber": 200,
                    "content": "*   targetLength: 5000,",
                    "indent": 5
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 115,
                  "distance": 80
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ");\r\n     * \r\n     * // オプション付きの使用方法\r\n     * const text = await geminiClient.generateText(",
                  "fullLength": 89,
                  "truncatedContent": ");\r\n     * \r\n     * // オプション付きの使用方法\r\n     * const text = await geminiClient.generateText(",
                  "hash": "417dd5e58d9696d9511a72c5f49cbb36",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [],
              "parameters": {
                "temperature": {
                  "value": "0.5",
                  "rawValue": "temperature: 0.5",
                  "confidence": "high"
                },
                "frequencyPenalty": {
                  "value": "0.5",
                  "rawValue": "frequencyPenalty: 0.5",
                  "confidence": "high"
                },
                "presencePenalty": {
                  "value": "0.2",
                  "rawValue": "presencePenalty: 0.2",
                  "confidence": "high"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "設定"
                ],
                "characterElements": [],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "分析",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "Gemini",
                  "API",
                  "async",
                  "param",
                  "string",
                  "prompt",
                  "GenerationOptions",
                  "purpose",
                  "options",
                  "returns"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": true,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "e903081b2c235442c25df28c40679d8b"
            },
            {
              "id": "call_f992fda8",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "fileName": "gemini-client.ts",
              "lineNumber": 195,
              "lineContent": "* const text = await geminiClient.generateText(\"こんにちは、世界について教えてください\");",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 190,
                    "content": "* @throws {GenerationError} 空のプロンプトが提供された場合、またはAPIが空の応答を返した場合",
                    "indent": 5
                  },
                  {
                    "lineNumber": 191,
                    "content": "* @throws {ExternalServiceError} すべての再試行が失敗した場合",
                    "indent": 5
                  },
                  {
                    "lineNumber": 192,
                    "content": "*",
                    "indent": 5
                  },
                  {
                    "lineNumber": 193,
                    "content": "* @usage",
                    "indent": 5
                  },
                  {
                    "lineNumber": 194,
                    "content": "* // 基本的な使用方法",
                    "indent": 5
                  }
                ],
                "current": {
                  "lineNumber": 195,
                  "content": "* const text = await geminiClient.generateText(\"こんにちは、世界について教えてください\");",
                  "indent": 5
                },
                "after": [
                  {
                    "lineNumber": 196,
                    "content": "*",
                    "indent": 5
                  },
                  {
                    "lineNumber": 197,
                    "content": "* // オプション付きの使用方法",
                    "indent": 5
                  },
                  {
                    "lineNumber": 198,
                    "content": "* const text = await geminiClient.generateText(\"詳細な分析をしてください\", {",
                    "indent": 5
                  },
                  {
                    "lineNumber": 199,
                    "content": "*   temperature: 0.5,",
                    "indent": 5
                  },
                  {
                    "lineNumber": 200,
                    "content": "*   targetLength: 5000,",
                    "indent": 5
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 115,
                  "distance": 80
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ");\r\n     * \r\n     * // オプション付きの使用方法\r\n     * const text = await geminiClient.generateText(",
                  "fullLength": 89,
                  "truncatedContent": ");\r\n     * \r\n     * // オプション付きの使用方法\r\n     * const text = await geminiClient.generateText(",
                  "hash": "417dd5e58d9696d9511a72c5f49cbb36",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [],
              "parameters": {
                "temperature": {
                  "value": "0.5",
                  "rawValue": "temperature: 0.5",
                  "confidence": "high"
                },
                "frequencyPenalty": {
                  "value": "0.5",
                  "rawValue": "frequencyPenalty: 0.5",
                  "confidence": "high"
                },
                "presencePenalty": {
                  "value": "0.2",
                  "rawValue": "presencePenalty: 0.2",
                  "confidence": "high"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "設定"
                ],
                "characterElements": [],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "分析",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "Gemini",
                  "API",
                  "async",
                  "param",
                  "string",
                  "prompt",
                  "GenerationOptions",
                  "purpose",
                  "options",
                  "returns"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": true,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "e903081b2c235442c25df28c40679d8b"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "f4a8a56c6676daaecaa114e505a606c0",
          "calls": [
            {
              "id": "call_443277df",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "fileName": "gemini-client.ts",
              "lineNumber": 198,
              "lineContent": "* const text = await geminiClient.generateText(\"詳細な分析をしてください\", {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 193,
                    "content": "* @usage",
                    "indent": 5
                  },
                  {
                    "lineNumber": 194,
                    "content": "* // 基本的な使用方法",
                    "indent": 5
                  },
                  {
                    "lineNumber": 195,
                    "content": "* const text = await geminiClient.generateText(\"こんにちは、世界について教えてください\");",
                    "indent": 5
                  },
                  {
                    "lineNumber": 196,
                    "content": "*",
                    "indent": 5
                  },
                  {
                    "lineNumber": 197,
                    "content": "* // オプション付きの使用方法",
                    "indent": 5
                  }
                ],
                "current": {
                  "lineNumber": 198,
                  "content": "* const text = await geminiClient.generateText(\"詳細な分析をしてください\", {",
                  "indent": 5
                },
                "after": [
                  {
                    "lineNumber": 199,
                    "content": "*   temperature: 0.5,",
                    "indent": 5
                  },
                  {
                    "lineNumber": 200,
                    "content": "*   targetLength: 5000,",
                    "indent": 5
                  },
                  {
                    "lineNumber": 201,
                    "content": "*   frequencyPenalty: 0.5,",
                    "indent": 5
                  },
                  {
                    "lineNumber": 202,
                    "content": "*   presencePenalty: 0.2,",
                    "indent": 5
                  },
                  {
                    "lineNumber": 203,
                    "content": "*   purpose: \"analysis\",",
                    "indent": 5
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 115,
                  "distance": 83
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ");\r\n     * \r\n     * // オプション付きの使用方法\r\n     * const text = await geminiClient.generateText(",
                  "fullLength": 89,
                  "truncatedContent": ");\r\n     * \r\n     * // オプション付きの使用方法\r\n     * const text = await geminiClient.generateText(",
                  "hash": "417dd5e58d9696d9511a72c5f49cbb36",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [],
              "parameters": {
                "temperature": {
                  "value": "0.5",
                  "source": "object_literal",
                  "confidence": "medium"
                },
                "topP": {
                  "value": "0.9\r\n     *",
                  "source": "object_literal",
                  "confidence": "medium"
                },
                "frequencyPenalty": {
                  "value": "0.5",
                  "rawValue": "frequencyPenalty: 0.5",
                  "confidence": "high"
                },
                "presencePenalty": {
                  "value": "0.2",
                  "rawValue": "presencePenalty: 0.2",
                  "confidence": "high"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "設定"
                ],
                "characterElements": [],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "分析",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "async",
                  "param",
                  "string",
                  "prompt",
                  "GenerationOptions",
                  "purpose",
                  "options",
                  "returns",
                  "Promise",
                  "throws"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "f4a8a56c6676daaecaa114e505a606c0"
            },
            {
              "id": "call_443277df",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "fileName": "gemini-client.ts",
              "lineNumber": 198,
              "lineContent": "* const text = await geminiClient.generateText(\"詳細な分析をしてください\", {",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 193,
                    "content": "* @usage",
                    "indent": 5
                  },
                  {
                    "lineNumber": 194,
                    "content": "* // 基本的な使用方法",
                    "indent": 5
                  },
                  {
                    "lineNumber": 195,
                    "content": "* const text = await geminiClient.generateText(\"こんにちは、世界について教えてください\");",
                    "indent": 5
                  },
                  {
                    "lineNumber": 196,
                    "content": "*",
                    "indent": 5
                  },
                  {
                    "lineNumber": 197,
                    "content": "* // オプション付きの使用方法",
                    "indent": 5
                  }
                ],
                "current": {
                  "lineNumber": 198,
                  "content": "* const text = await geminiClient.generateText(\"詳細な分析をしてください\", {",
                  "indent": 5
                },
                "after": [
                  {
                    "lineNumber": 199,
                    "content": "*   temperature: 0.5,",
                    "indent": 5
                  },
                  {
                    "lineNumber": 200,
                    "content": "*   targetLength: 5000,",
                    "indent": 5
                  },
                  {
                    "lineNumber": 201,
                    "content": "*   frequencyPenalty: 0.5,",
                    "indent": 5
                  },
                  {
                    "lineNumber": 202,
                    "content": "*   presencePenalty: 0.2,",
                    "indent": 5
                  },
                  {
                    "lineNumber": 203,
                    "content": "*   purpose: \"analysis\",",
                    "indent": 5
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 115,
                  "distance": 83
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ");\r\n     * \r\n     * // オプション付きの使用方法\r\n     * const text = await geminiClient.generateText(",
                  "fullLength": 89,
                  "truncatedContent": ");\r\n     * \r\n     * // オプション付きの使用方法\r\n     * const text = await geminiClient.generateText(",
                  "hash": "417dd5e58d9696d9511a72c5f49cbb36",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [],
              "parameters": {
                "temperature": {
                  "value": "0.5",
                  "source": "object_literal",
                  "confidence": "medium"
                },
                "topP": {
                  "value": "0.9\r\n     *",
                  "source": "object_literal",
                  "confidence": "medium"
                },
                "frequencyPenalty": {
                  "value": "0.5",
                  "rawValue": "frequencyPenalty: 0.5",
                  "confidence": "high"
                },
                "presencePenalty": {
                  "value": "0.2",
                  "rawValue": "presencePenalty: 0.2",
                  "confidence": "high"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "設定"
                ],
                "characterElements": [],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "分析",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "async",
                  "param",
                  "string",
                  "prompt",
                  "GenerationOptions",
                  "purpose",
                  "options",
                  "returns",
                  "Promise",
                  "throws"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "f4a8a56c6676daaecaa114e505a606c0"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "a5022f1bc9d42958694dc44ec1d3ca0f",
          "calls": [
            {
              "id": "call_1734eaef",
              "filePath": "src\\lib\\learning-journey\\concept-learning-manager.ts",
              "fileName": "concept-learning-manager.ts",
              "lineNumber": 1102,
              "lineContent": "const response = await this.geminiClient.generateText(prompt, { temperature: 0.1 });",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 1097,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1098,
                    "content": "段階コードは以下のいずれかを使用してください:",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1099,
                    "content": "MISCONCEPTION, EXPLORATION, CONFLICT, INSIGHT, APPLICATION, INTEGRATION",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1100,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1101,
                    "content": "",
                    "indent": 0
                  }
                ],
                "current": {
                  "lineNumber": 1102,
                  "content": "const response = await this.geminiClient.generateText(prompt, { temperature: 0.1 });",
                  "indent": 12
                },
                "after": [
                  {
                    "lineNumber": 1103,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1104,
                    "content": "// レスポンスから段階を抽出",
                    "indent": 12
                  },
                  {
                    "lineNumber": 1105,
                    "content": "const stageMatch = response.match(/学習段階:\\s*(MISCONCEPTION|EXPLORATION|CONFLICT|INSIGHT|APPLICATION|INTEGRATION)/i);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 1106,
                    "content": "const confidenceMatch = response.match(/確信度:\\s*([0-9.]+)/i);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 1107,
                    "content": "",
                    "indent": 0
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 1062,
                  "distance": 40
                }
              },
              "prompts": [],
              "expectedOutputs": [
                {
                  "type": "response_structure",
                  "fields": [
                    "match"
                  ],
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "conflict",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.1",
                  "rawValue": "temperature: 0.1",
                  "confidence": "high"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "設定",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "keyPrinciples",
                  "join",
                  "additionalContext",
                  "MISCONCEPTION",
                  "EXPLORATION",
                  "CONFLICT",
                  "INSIGHT",
                  "APPLICATION",
                  "INTEGRATION",
                  "const"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "a5022f1bc9d42958694dc44ec1d3ca0f"
            },
            {
              "id": "call_1734eaef",
              "filePath": "src\\lib\\learning-journey\\concept-learning-manager.ts",
              "fileName": "concept-learning-manager.ts",
              "lineNumber": 1102,
              "lineContent": "const response = await this.geminiClient.generateText(prompt, { temperature: 0.1 });",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 1097,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1098,
                    "content": "段階コードは以下のいずれかを使用してください:",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1099,
                    "content": "MISCONCEPTION, EXPLORATION, CONFLICT, INSIGHT, APPLICATION, INTEGRATION",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1100,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1101,
                    "content": "",
                    "indent": 0
                  }
                ],
                "current": {
                  "lineNumber": 1102,
                  "content": "const response = await this.geminiClient.generateText(prompt, { temperature: 0.1 });",
                  "indent": 12
                },
                "after": [
                  {
                    "lineNumber": 1103,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1104,
                    "content": "// レスポンスから段階を抽出",
                    "indent": 12
                  },
                  {
                    "lineNumber": 1105,
                    "content": "const stageMatch = response.match(/学習段階:\\s*(MISCONCEPTION|EXPLORATION|CONFLICT|INSIGHT|APPLICATION|INTEGRATION)/i);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 1106,
                    "content": "const confidenceMatch = response.match(/確信度:\\s*([0-9.]+)/i);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 1107,
                    "content": "",
                    "indent": 0
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 1062,
                  "distance": 40
                }
              },
              "prompts": [],
              "expectedOutputs": [
                {
                  "type": "response_structure",
                  "fields": [
                    "match"
                  ],
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "conflict",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.1",
                  "rawValue": "temperature: 0.1",
                  "confidence": "high"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "設定",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "keyPrinciples",
                  "join",
                  "additionalContext",
                  "MISCONCEPTION",
                  "EXPLORATION",
                  "CONFLICT",
                  "INSIGHT",
                  "APPLICATION",
                  "INTEGRATION",
                  "const"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "a5022f1bc9d42958694dc44ec1d3ca0f"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "99f9ae195bd0cb79789717cb52d25608",
          "calls": [
            {
              "id": "call_a225d13e",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "fileName": "emotional-learning-integrator.ts",
              "lineNumber": 1030,
              "lineContent": "return await this.geminiClient.generateText(prompt, options);",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 1025,
                    "content": "* 安全なAI分析実行",
                    "indent": 5
                  },
                  {
                    "lineNumber": 1026,
                    "content": "* @private",
                    "indent": 5
                  },
                  {
                    "lineNumber": 1027,
                    "content": "*/",
                    "indent": 5
                  },
                  {
                    "lineNumber": 1028,
                    "content": "private async executeAIAnalysis(prompt: string, options: any): Promise<string> {",
                    "indent": 4
                  },
                  {
                    "lineNumber": 1029,
                    "content": "try {",
                    "indent": 8
                  }
                ],
                "current": {
                  "lineNumber": 1030,
                  "content": "return await this.geminiClient.generateText(prompt, options);",
                  "indent": 12
                },
                "after": [
                  {
                    "lineNumber": 1031,
                    "content": "} catch (error) {",
                    "indent": 8
                  },
                  {
                    "lineNumber": 1032,
                    "content": "logger.error('AI analysis failed', { error });",
                    "indent": 12
                  },
                  {
                    "lineNumber": 1033,
                    "content": "throw error;",
                    "indent": 12
                  },
                  {
                    "lineNumber": 1034,
                    "content": "}",
                    "indent": 8
                  },
                  {
                    "lineNumber": 1035,
                    "content": "}",
                    "indent": 4
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 1015,
                  "distance": 15
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\n            : content;\n    }\n\n    /**\n     * 安全なAI分析実行\n     * @private\n     */\n    private async executeAIAnalysis(prompt: string, options: any): Promise<string> {\n        try {\n            return await this.geminiClient.generateText(prompt, options);\n        } catch (error) {\n            logger.error(",
                  "fullLength": 304,
                  "truncatedContent": "\n            : content;\n    }\n\n    /**\n     * 安全なAI分析実行\n     * @private\n     */\n    private async executeAIAnalysis(prompt: string, options: any): Promise<string> {\n        try {\n            return await this.geminiClient.generateText(prompt, options);\n        } catch (error) {\n            logger.error(",
                  "hash": "d65e54c92acae5c134de92df18a5620d",
                  "keywords": [
                    "分析",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\n            : content;\n    }\n\n    /**\n     * 安全なAI分析実行\n     * @private\n     */\n    private async executeAIAnalysis(prompt: string, options: any): Promise<string> {\n        try {\n            return await this.geminiClient.generateText(prompt, options);\n        } catch (error) {\n            logger.error(",
                  "fullLength": 304,
                  "truncatedContent": "\n            : content;\n    }\n\n    /**\n     * 安全なAI分析実行\n     * @private\n     */\n    private async executeAIAnalysis(prompt: string, options: any): Promise<string> {\n        try {\n            return await this.geminiClient.generateText(prompt, options);\n        } catch (error) {\n            logger.error(",
                  "hash": "d65e54c92acae5c134de92df18a5620d",
                  "keywords": [
                    "分析",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "executeAIAnalysis",
                  "relatedMethods": [
                    "executeAIAnalysis"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<string>"
                  ],
                  "extractedTypes": [
                    "string>"
                  ]
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "設定",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "generate",
                  "create"
                ],
                "complexity": "low",
                "dependencies": [
                  "private",
                  "safeContentTruncation",
                  "content",
                  "string",
                  "maxLength",
                  "number",
                  "typeof",
                  "return",
                  "length",
                  "substring"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "99f9ae195bd0cb79789717cb52d25608"
            },
            {
              "id": "call_a225d13e",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "fileName": "emotional-learning-integrator.ts",
              "lineNumber": 1030,
              "lineContent": "return await this.geminiClient.generateText(prompt, options);",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 1025,
                    "content": "* 安全なAI分析実行",
                    "indent": 5
                  },
                  {
                    "lineNumber": 1026,
                    "content": "* @private",
                    "indent": 5
                  },
                  {
                    "lineNumber": 1027,
                    "content": "*/",
                    "indent": 5
                  },
                  {
                    "lineNumber": 1028,
                    "content": "private async executeAIAnalysis(prompt: string, options: any): Promise<string> {",
                    "indent": 4
                  },
                  {
                    "lineNumber": 1029,
                    "content": "try {",
                    "indent": 8
                  }
                ],
                "current": {
                  "lineNumber": 1030,
                  "content": "return await this.geminiClient.generateText(prompt, options);",
                  "indent": 12
                },
                "after": [
                  {
                    "lineNumber": 1031,
                    "content": "} catch (error) {",
                    "indent": 8
                  },
                  {
                    "lineNumber": 1032,
                    "content": "logger.error('AI analysis failed', { error });",
                    "indent": 12
                  },
                  {
                    "lineNumber": 1033,
                    "content": "throw error;",
                    "indent": 12
                  },
                  {
                    "lineNumber": 1034,
                    "content": "}",
                    "indent": 8
                  },
                  {
                    "lineNumber": 1035,
                    "content": "}",
                    "indent": 4
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 1015,
                  "distance": 15
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\n            : content;\n    }\n\n    /**\n     * 安全なAI分析実行\n     * @private\n     */\n    private async executeAIAnalysis(prompt: string, options: any): Promise<string> {\n        try {\n            return await this.geminiClient.generateText(prompt, options);\n        } catch (error) {\n            logger.error(",
                  "fullLength": 304,
                  "truncatedContent": "\n            : content;\n    }\n\n    /**\n     * 安全なAI分析実行\n     * @private\n     */\n    private async executeAIAnalysis(prompt: string, options: any): Promise<string> {\n        try {\n            return await this.geminiClient.generateText(prompt, options);\n        } catch (error) {\n            logger.error(",
                  "hash": "d65e54c92acae5c134de92df18a5620d",
                  "keywords": [
                    "分析",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\n            : content;\n    }\n\n    /**\n     * 安全なAI分析実行\n     * @private\n     */\n    private async executeAIAnalysis(prompt: string, options: any): Promise<string> {\n        try {\n            return await this.geminiClient.generateText(prompt, options);\n        } catch (error) {\n            logger.error(",
                  "fullLength": 304,
                  "truncatedContent": "\n            : content;\n    }\n\n    /**\n     * 安全なAI分析実行\n     * @private\n     */\n    private async executeAIAnalysis(prompt: string, options: any): Promise<string> {\n        try {\n            return await this.geminiClient.generateText(prompt, options);\n        } catch (error) {\n            logger.error(",
                  "hash": "d65e54c92acae5c134de92df18a5620d",
                  "keywords": [
                    "分析",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "executeAIAnalysis",
                  "relatedMethods": [
                    "executeAIAnalysis"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<string>"
                  ],
                  "extractedTypes": [
                    "string>"
                  ]
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "設定",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "generate",
                  "create"
                ],
                "complexity": "low",
                "dependencies": [
                  "private",
                  "safeContentTruncation",
                  "content",
                  "string",
                  "maxLength",
                  "number",
                  "typeof",
                  "return",
                  "length",
                  "substring"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "99f9ae195bd0cb79789717cb52d25608"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "e522cf44a1b7069e827bc13239744829",
          "calls": [
            {
              "id": "call_75df9e80",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "fileName": "index.ts",
              "lineNumber": 1225,
              "lineContent": "const summary = await this.geminiClient.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 1220,
                    "content": "${truncatedContent}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1221,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1222,
                    "content": "要約:",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1223,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1224,
                    "content": "",
                    "indent": 0
                  }
                ],
                "current": {
                  "lineNumber": 1225,
                  "content": "const summary = await this.geminiClient.generateText(prompt, {",
                  "indent": 12
                },
                "after": [
                  {
                    "lineNumber": 1226,
                    "content": "temperature: 0.3,",
                    "indent": 16
                  },
                  {
                    "lineNumber": 1227,
                    "content": "targetLength: 300",
                    "indent": 16
                  },
                  {
                    "lineNumber": 1228,
                    "content": "});",
                    "indent": 12
                  },
                  {
                    "lineNumber": 1229,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1230,
                    "content": "return summary.trim();",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 1189,
                  "distance": 36
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
                  "fullLength": 107,
                  "truncatedContent": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
                  "hash": "c67e2b17fa18011cda0157c8199a9f12",
                  "keywords": [
                    "章",
                    "ストーリー",
                    "キャラクター"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
                  "fullLength": 107,
                  "truncatedContent": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
                  "hash": "c67e2b17fa18011cda0157c8199a9f12",
                  "keywords": [
                    "章",
                    "ストーリー",
                    "キャラクター"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\n                : content;\n\n            const prompt = `\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n`;\n\n            const summary = await this.geminiClient.generateText(prompt, {\n                temperature: 0.3,\n                targetLength: 300\n            });\n\n            return summary.trim();\n\n        } catch (error) {\n            logger.warn(",
                  "fullLength": 414,
                  "truncatedContent": "\n                : content;\n\n            const prompt = `\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n`;\n\n            const summary = await this.geminiClient.generateText(prompt, {\n                temperature: 0.3,\n                targetLength: 300\n            });\n\n            return summary.trim();\n\n        } catch (error) {\n            logger.warn(",
                  "hash": "a4afa55c252c54b71a25a4a5a4c07743",
                  "keywords": [
                    "章",
                    "ストーリー",
                    "キャラクター",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\n                : content;\n\n            const prompt = `\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n`;\n\n            const summary = await this.geminiClient.generateText(prompt, {\n                temperature: 0.3,\n                targetLength: 300\n            });\n\n            return summary.trim();\n\n        } catch (error) {\n            logger.warn(",
                  "fullLength": 414,
                  "truncatedContent": "\n                : content;\n\n            const prompt = `\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n`;\n\n            const summary = await this.geminiClient.generateText(prompt, {\n                temperature: 0.3,\n                targetLength: 300\n            });\n\n            return summary.trim();\n\n        } catch (error) {\n            logger.warn(",
                  "hash": "a4afa55c252c54b71a25a4a5a4c07743",
                  "keywords": [
                    "章",
                    "ストーリー",
                    "キャラクター",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "variable_assignment",
                  "variableName": "prompt",
                  "content": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
                  "fullLength": 107,
                  "truncatedContent": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
                  "hash": "c67e2b17fa18011cda0157c8199a9f12"
                },
                {
                  "type": "template_literal",
                  "content": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
                  "fullLength": 107,
                  "truncatedContent": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
                  "hash": "c67e2b17fa18011cda0157c8199a9f12",
                  "hasVariables": true,
                  "variableCount": 1
                }
              ],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "シーン",
                  "設定",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "private",
                  "async",
                  "generateChapterSummaryWithFallback",
                  "content",
                  "string",
                  "Promise",
                  "try",
                  "const",
                  "truncatedContent",
                  "length"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "e522cf44a1b7069e827bc13239744829"
            },
            {
              "id": "call_75df9e80",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "fileName": "index.ts",
              "lineNumber": 1225,
              "lineContent": "const summary = await this.geminiClient.generateText(prompt, {",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 1220,
                    "content": "${truncatedContent}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1221,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1222,
                    "content": "要約:",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1223,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1224,
                    "content": "",
                    "indent": 0
                  }
                ],
                "current": {
                  "lineNumber": 1225,
                  "content": "const summary = await this.geminiClient.generateText(prompt, {",
                  "indent": 12
                },
                "after": [
                  {
                    "lineNumber": 1226,
                    "content": "temperature: 0.3,",
                    "indent": 16
                  },
                  {
                    "lineNumber": 1227,
                    "content": "targetLength: 300",
                    "indent": 16
                  },
                  {
                    "lineNumber": 1228,
                    "content": "});",
                    "indent": 12
                  },
                  {
                    "lineNumber": 1229,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1230,
                    "content": "return summary.trim();",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 1189,
                  "distance": 36
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
                  "fullLength": 107,
                  "truncatedContent": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
                  "hash": "c67e2b17fa18011cda0157c8199a9f12",
                  "keywords": [
                    "章",
                    "ストーリー",
                    "キャラクター"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
                  "fullLength": 107,
                  "truncatedContent": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
                  "hash": "c67e2b17fa18011cda0157c8199a9f12",
                  "keywords": [
                    "章",
                    "ストーリー",
                    "キャラクター"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\n                : content;\n\n            const prompt = `\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n`;\n\n            const summary = await this.geminiClient.generateText(prompt, {\n                temperature: 0.3,\n                targetLength: 300\n            });\n\n            return summary.trim();\n\n        } catch (error) {\n            logger.warn(",
                  "fullLength": 414,
                  "truncatedContent": "\n                : content;\n\n            const prompt = `\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n`;\n\n            const summary = await this.geminiClient.generateText(prompt, {\n                temperature: 0.3,\n                targetLength: 300\n            });\n\n            return summary.trim();\n\n        } catch (error) {\n            logger.warn(",
                  "hash": "a4afa55c252c54b71a25a4a5a4c07743",
                  "keywords": [
                    "章",
                    "ストーリー",
                    "キャラクター",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\n                : content;\n\n            const prompt = `\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n`;\n\n            const summary = await this.geminiClient.generateText(prompt, {\n                temperature: 0.3,\n                targetLength: 300\n            });\n\n            return summary.trim();\n\n        } catch (error) {\n            logger.warn(",
                  "fullLength": 414,
                  "truncatedContent": "\n                : content;\n\n            const prompt = `\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n`;\n\n            const summary = await this.geminiClient.generateText(prompt, {\n                temperature: 0.3,\n                targetLength: 300\n            });\n\n            return summary.trim();\n\n        } catch (error) {\n            logger.warn(",
                  "hash": "a4afa55c252c54b71a25a4a5a4c07743",
                  "keywords": [
                    "章",
                    "ストーリー",
                    "キャラクター",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "variable_assignment",
                  "variableName": "prompt",
                  "content": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
                  "fullLength": 107,
                  "truncatedContent": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
                  "hash": "c67e2b17fa18011cda0157c8199a9f12"
                },
                {
                  "type": "template_literal",
                  "content": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
                  "fullLength": 107,
                  "truncatedContent": "\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n",
                  "hash": "c67e2b17fa18011cda0157c8199a9f12",
                  "hasVariables": true,
                  "variableCount": 1
                }
              ],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.3",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "シーン",
                  "設定",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "private",
                  "async",
                  "generateChapterSummaryWithFallback",
                  "content",
                  "string",
                  "Promise",
                  "try",
                  "const",
                  "truncatedContent",
                  "length"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "e522cf44a1b7069e827bc13239744829"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "2eea1a87da18d34dcf0d356d58f5ca52",
          "calls": [
            {
              "id": "call_4be62073",
              "filePath": "src\\lib\\memory\\text-analyzer-service.ts",
              "fileName": "text-analyzer-service.ts",
              "lineNumber": 335,
              "lineContent": "const response = await this.geminiClient.generateText(prompt, {",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 330,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 331,
                    "content": "存在しない情報は省略してもかまいません。",
                    "indent": 0
                  },
                  {
                    "lineNumber": 332,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 333,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 334,
                    "content": "try {",
                    "indent": 4
                  }
                ],
                "current": {
                  "lineNumber": 335,
                  "content": "const response = await this.geminiClient.generateText(prompt, {",
                  "indent": 6
                },
                "after": [
                  {
                    "lineNumber": 336,
                    "content": "temperature: 0.1,",
                    "indent": 8
                  },
                  {
                    "lineNumber": 337,
                    "content": "targetLength: 500 * characterNames.length",
                    "indent": 8
                  },
                  {
                    "lineNumber": 338,
                    "content": "});",
                    "indent": 6
                  },
                  {
                    "lineNumber": 339,
                    "content": "",
                    "indent": 7
                  },
                  {
                    "lineNumber": 340,
                    "content": "// JSONをパース",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 297,
                  "distance": 38
                }
              },
              "prompts": [],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "response_structure",
                  "fields": [
                    "indexOf",
                    "lastIndexOf",
                    "substring"
                  ],
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.1",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [],
                "storyElements": [],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "characterNames",
                  "join",
                  "truncatedText",
                  "JSON",
                  "name",
                  "mood",
                  "development",
                  "relationships",
                  "character",
                  "relation"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "2eea1a87da18d34dcf0d356d58f5ca52"
            },
            {
              "id": "call_4be62073",
              "filePath": "src\\lib\\memory\\text-analyzer-service.ts",
              "fileName": "text-analyzer-service.ts",
              "lineNumber": 335,
              "lineContent": "const response = await this.geminiClient.generateText(prompt, {",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 330,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 331,
                    "content": "存在しない情報は省略してもかまいません。",
                    "indent": 0
                  },
                  {
                    "lineNumber": 332,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 333,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 334,
                    "content": "try {",
                    "indent": 4
                  }
                ],
                "current": {
                  "lineNumber": 335,
                  "content": "const response = await this.geminiClient.generateText(prompt, {",
                  "indent": 6
                },
                "after": [
                  {
                    "lineNumber": 336,
                    "content": "temperature: 0.1,",
                    "indent": 8
                  },
                  {
                    "lineNumber": 337,
                    "content": "targetLength: 500 * characterNames.length",
                    "indent": 8
                  },
                  {
                    "lineNumber": 338,
                    "content": "});",
                    "indent": 6
                  },
                  {
                    "lineNumber": 339,
                    "content": "",
                    "indent": 7
                  },
                  {
                    "lineNumber": 340,
                    "content": "// JSONをパース",
                    "indent": 6
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 297,
                  "distance": 38
                }
              },
              "prompts": [],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "response_structure",
                  "fields": [
                    "indexOf",
                    "lastIndexOf",
                    "substring"
                  ],
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.1",
                  "source": "object_literal",
                  "confidence": "medium"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [],
                "storyElements": [],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "characterNames",
                  "join",
                  "truncatedText",
                  "JSON",
                  "name",
                  "mood",
                  "development",
                  "relationships",
                  "character",
                  "relation"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "2eea1a87da18d34dcf0d356d58f5ca52"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "8246c176cbadbc96db9f218d1535c290",
          "calls": [
            {
              "id": "call_d18c12a2",
              "filePath": "src\\lib\\plot\\checker.ts",
              "fileName": "checker.ts",
              "lineNumber": 768,
              "lineContent": "this.geminiClient.generateText(prompt, { temperature: 0.2 })",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 763,
                    "content": "]",
                    "indent": 2
                  },
                  {
                    "lineNumber": 764,
                    "content": "}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 765,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 766,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 767,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 768,
                  "content": "this.geminiClient.generateText(prompt, { temperature: 0.2 })",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 769,
                    "content": ");",
                    "indent": 12
                  },
                  {
                    "lineNumber": 770,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 771,
                    "content": "const analysis = JsonParser.parseFromAIResponse<{",
                    "indent": 12
                  },
                  {
                    "lineNumber": 772,
                    "content": "continuityIssues: Array<{",
                    "indent": 16
                  },
                  {
                    "lineNumber": 773,
                    "content": "description: string;",
                    "indent": 20
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 714,
                  "distance": 54
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\n    }\n  ]\n}\n`;\n\n            const response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { temperature: 0.2 })\n            );\n\n            const analysis = JsonParser.parseFromAIResponse<{\n                continuityIssues: Array<{\n                    description: string;\n                    severity: string;\n                    suggestion: string;\n                    context?: string;\n                }>;\n            }>(response, { continuityIssues: [] });\n\n            return (analysis.continuityIssues || []).map(issue => ({\n                type: ",
                  "fullLength": 606,
                  "truncatedContent": "\n    }\n  ]\n}\n`;\n\n            const response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { temperature: 0.2 })\n            );\n\n            const analysis = JsonParser.parseFromAIResponse<{\n                continuityIssues: Array<{\n                    description: string;\n                    severity: string;\n                    suggestion: string;\n                    context?: string;\n                }>;\n            }>(response, { continuityIssues: [] });\n\n            return (analysis.continuityIssues || []).map(issue => ({\n                type: ",
                  "hash": "b257710dda61b24e95486444819036c6",
                  "keywords": [
                    "generate",
                    "description"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.2",
                  "rawValue": "temperature: 0.2",
                  "confidence": "high"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "plot",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "truncatedPrevious",
                  "chapterNumber",
                  "truncatedCurrent",
                  "JSON",
                  "continuityIssues",
                  "description",
                  "severity",
                  "HIGH",
                  "MEDIUM",
                  "LOW"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "8246c176cbadbc96db9f218d1535c290"
            },
            {
              "id": "call_d18c12a2",
              "filePath": "src\\lib\\plot\\checker.ts",
              "fileName": "checker.ts",
              "lineNumber": 768,
              "lineContent": "this.geminiClient.generateText(prompt, { temperature: 0.2 })",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 763,
                    "content": "]",
                    "indent": 2
                  },
                  {
                    "lineNumber": 764,
                    "content": "}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 765,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 766,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 767,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 768,
                  "content": "this.geminiClient.generateText(prompt, { temperature: 0.2 })",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 769,
                    "content": ");",
                    "indent": 12
                  },
                  {
                    "lineNumber": 770,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 771,
                    "content": "const analysis = JsonParser.parseFromAIResponse<{",
                    "indent": 12
                  },
                  {
                    "lineNumber": 772,
                    "content": "continuityIssues: Array<{",
                    "indent": 16
                  },
                  {
                    "lineNumber": 773,
                    "content": "description: string;",
                    "indent": 20
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 714,
                  "distance": 54
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\n    }\n  ]\n}\n`;\n\n            const response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { temperature: 0.2 })\n            );\n\n            const analysis = JsonParser.parseFromAIResponse<{\n                continuityIssues: Array<{\n                    description: string;\n                    severity: string;\n                    suggestion: string;\n                    context?: string;\n                }>;\n            }>(response, { continuityIssues: [] });\n\n            return (analysis.continuityIssues || []).map(issue => ({\n                type: ",
                  "fullLength": 606,
                  "truncatedContent": "\n    }\n  ]\n}\n`;\n\n            const response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { temperature: 0.2 })\n            );\n\n            const analysis = JsonParser.parseFromAIResponse<{\n                continuityIssues: Array<{\n                    description: string;\n                    severity: string;\n                    suggestion: string;\n                    context?: string;\n                }>;\n            }>(response, { continuityIssues: [] });\n\n            return (analysis.continuityIssues || []).map(issue => ({\n                type: ",
                  "hash": "b257710dda61b24e95486444819036c6",
                  "keywords": [
                    "generate",
                    "description"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {
                "temperature": {
                  "value": "0.2",
                  "rawValue": "temperature: 0.2",
                  "confidence": "high"
                }
              },
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "plot",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "truncatedPrevious",
                  "chapterNumber",
                  "truncatedCurrent",
                  "JSON",
                  "continuityIssues",
                  "description",
                  "severity",
                  "HIGH",
                  "MEDIUM",
                  "LOW"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "8246c176cbadbc96db9f218d1535c290"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "47f4de94faac73859142e538859b1e95",
          "calls": [
            {
              "id": "call_798d91ff",
              "filePath": "src\\lib\\plot\\section\\index.ts",
              "fileName": "index.ts",
              "lineNumber": 397,
              "lineContent": "await this.geminiClient.generateText(testPrompt);",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 392,
                    "content": "this.geminiClient = new GeminiClient();",
                    "indent": 12
                  },
                  {
                    "lineNumber": 393,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 394,
                    "content": "// 接続テスト（簡易）",
                    "indent": 12
                  },
                  {
                    "lineNumber": 395,
                    "content": "const testPrompt = 'Test connection - respond with \"OK\"';",
                    "indent": 12
                  },
                  {
                    "lineNumber": 396,
                    "content": "try {",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 397,
                  "content": "await this.geminiClient.generateText(testPrompt);",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 398,
                    "content": "",
                    "indent": 16
                  },
                  {
                    "lineNumber": 399,
                    "content": "this.updateComponentStatus('geminiClient', {",
                    "indent": 16
                  },
                  {
                    "lineNumber": 400,
                    "content": "initialized: true,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 401,
                    "content": "healthy: true,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 402,
                    "content": "lastActivity: new Date().toISOString(),",
                    "indent": 20
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 370,
                  "distance": 27
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ";\n            try {\n                await this.geminiClient.generateText(testPrompt);\n                \n                this.updateComponentStatus(",
                  "fullLength": 146,
                  "truncatedContent": ";\n            try {\n                await this.geminiClient.generateText(testPrompt);\n                \n                this.updateComponentStatus(",
                  "hash": "1798dd15179209a5b6027c9c25fd2460",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "testPrompt",
                  "relatedMethods": [
                    "testPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<void>"
                  ],
                  "extractedTypes": [
                    "void>"
                  ]
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "plot",
                  "setting"
                ],
                "characterElements": [
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "Failed",
                  "initialize",
                  "unified",
                  "memory",
                  "system",
                  "throw",
                  "error",
                  "GeminiClient",
                  "private",
                  "async"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "47f4de94faac73859142e538859b1e95"
            },
            {
              "id": "call_798d91ff",
              "filePath": "src\\lib\\plot\\section\\index.ts",
              "fileName": "index.ts",
              "lineNumber": 397,
              "lineContent": "await this.geminiClient.generateText(testPrompt);",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 392,
                    "content": "this.geminiClient = new GeminiClient();",
                    "indent": 12
                  },
                  {
                    "lineNumber": 393,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 394,
                    "content": "// 接続テスト（簡易）",
                    "indent": 12
                  },
                  {
                    "lineNumber": 395,
                    "content": "const testPrompt = 'Test connection - respond with \"OK\"';",
                    "indent": 12
                  },
                  {
                    "lineNumber": 396,
                    "content": "try {",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 397,
                  "content": "await this.geminiClient.generateText(testPrompt);",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 398,
                    "content": "",
                    "indent": 16
                  },
                  {
                    "lineNumber": 399,
                    "content": "this.updateComponentStatus('geminiClient', {",
                    "indent": 16
                  },
                  {
                    "lineNumber": 400,
                    "content": "initialized: true,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 401,
                    "content": "healthy: true,",
                    "indent": 20
                  },
                  {
                    "lineNumber": 402,
                    "content": "lastActivity: new Date().toISOString(),",
                    "indent": 20
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 370,
                  "distance": 27
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ";\n            try {\n                await this.geminiClient.generateText(testPrompt);\n                \n                this.updateComponentStatus(",
                  "fullLength": 146,
                  "truncatedContent": ";\n            try {\n                await this.geminiClient.generateText(testPrompt);\n                \n                this.updateComponentStatus(",
                  "hash": "1798dd15179209a5b6027c9c25fd2460",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "testPrompt",
                  "relatedMethods": [
                    "testPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<void>"
                  ],
                  "extractedTypes": [
                    "void>"
                  ]
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "plot",
                  "setting"
                ],
                "characterElements": [
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "Failed",
                  "initialize",
                  "unified",
                  "memory",
                  "system",
                  "throw",
                  "error",
                  "GeminiClient",
                  "private",
                  "async"
                ],
                "outputUsage": {
                  "isAssigned": false,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "47f4de94faac73859142e538859b1e95"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "610dbb0aad4545092105ae66532c00f1",
          "calls": [
            {
              "id": "call_b821aa55",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "fileName": "section-analyzer.ts",
              "lineNumber": 632,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 627,
                    "content": "const prompt = this.buildCoherenceAnalysisPrompt(section, chapters, memoryContext);",
                    "indent": 8
                  },
                  {
                    "lineNumber": 628,
                    "content": "let response: string = '';",
                    "indent": 8
                  },
                  {
                    "lineNumber": 629,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 630,
                    "content": "try {",
                    "indent": 8
                  },
                  {
                    "lineNumber": 631,
                    "content": "response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 632,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 633,
                    "content": ");",
                    "indent": 12
                  },
                  {
                    "lineNumber": 634,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 635,
                    "content": "const analysis = JSON.parse(response);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 636,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 637,
                    "content": "// 基本的な検証",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 609,
                  "distance": 23
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "Successfully analyzed coherence for section ${section.structure.title}",
                  "fullLength": 70,
                  "truncatedContent": "Successfully analyzed coherence for section ${section.structure.title}",
                  "hash": "2929b8486fcf2321b6354ce111e12af9",
                  "keywords": [
                    "analyze"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.overallScore === ",
                  "fullLength": 332,
                  "truncatedContent": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.overallScore === ",
                  "hash": "d247d541e2d0d3f6e93d8f83a1e4253b",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": " &&\n                Array.isArray(analysis.problematicAreas) &&\n                Array.isArray(analysis.improvementSuggestions)) {\n\n                logger.info(`Successfully analyzed coherence for section ${section.structure.title}`);\n                return analysis;\n            }\n\n            logger.warn(",
                  "fullLength": 306,
                  "truncatedContent": " &&\n                Array.isArray(analysis.problematicAreas) &&\n                Array.isArray(analysis.improvementSuggestions)) {\n\n                logger.info(`Successfully analyzed coherence for section ${section.structure.title}`);\n                return analysis;\n            }\n\n            logger.warn(",
                  "hash": "320f749e0a9e114bb54363e84cb4b670",
                  "keywords": [
                    "analyze"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "performAICoherenceAnalysis",
                  "relatedMethods": [
                    "performAICoherenceAnalysis",
                    "CoherenceAnalysis",
                    "buildCoherenceAnalysisPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<CoherenceAnalysis>"
                  ],
                  "extractedTypes": [
                    "CoherenceAnalysis>"
                  ]
                },
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "title",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "plot",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "plot",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "generate",
                  "analyze",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "private",
                  "async",
                  "performAICoherenceAnalysis",
                  "section",
                  "SectionPlot",
                  "chapters",
                  "Array",
                  "chapterNumber",
                  "number",
                  "title"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "610dbb0aad4545092105ae66532c00f1"
            },
            {
              "id": "call_59aa5683",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "fileName": "section-analyzer.ts",
              "lineNumber": 671,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 666,
                    "content": "const prompt = this.buildObjectiveAnalysisPrompt(section, chapters, analysisContext);",
                    "indent": 8
                  },
                  {
                    "lineNumber": 667,
                    "content": "let response: string = '';",
                    "indent": 8
                  },
                  {
                    "lineNumber": 668,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 669,
                    "content": "try {",
                    "indent": 8
                  },
                  {
                    "lineNumber": 670,
                    "content": "response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 671,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 672,
                    "content": ");",
                    "indent": 12
                  },
                  {
                    "lineNumber": 673,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 674,
                    "content": "const analysis = JSON.parse(response);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 675,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 676,
                    "content": "// 基本的な検証",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 649,
                  "distance": 22
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.cognitiveProgress === ",
                  "fullLength": 337,
                  "truncatedContent": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.cognitiveProgress === ",
                  "hash": "77a50a6e1e418df2a63a9da228f0a6c7",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "performAIObjectiveAnalysis",
                  "relatedMethods": [
                    "performAIObjectiveAnalysis",
                    "buildObjectiveAnalysisPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<ObjectiveProgress>"
                  ],
                  "extractedTypes": [
                    "ObjectiveProgress>"
                  ]
                },
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "title",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "plot",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "plot",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "private",
                  "async",
                  "performAIObjectiveAnalysis",
                  "section",
                  "SectionPlot",
                  "chapters",
                  "Array",
                  "chapterNumber",
                  "number",
                  "title"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "610dbb0aad4545092105ae66532c00f1"
            },
            {
              "id": "call_2c81c351",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "fileName": "section-analyzer.ts",
              "lineNumber": 717,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 712,
                    "content": "const prompt = this.buildEmotionalAnalysisPrompt(section, chapters, emotionalContext);",
                    "indent": 8
                  },
                  {
                    "lineNumber": 713,
                    "content": "let response: string = '';",
                    "indent": 8
                  },
                  {
                    "lineNumber": 714,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 715,
                    "content": "try {",
                    "indent": 8
                  },
                  {
                    "lineNumber": 716,
                    "content": "response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 717,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 718,
                    "content": ");",
                    "indent": 12
                  },
                  {
                    "lineNumber": 719,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 720,
                    "content": "const analysis = JSON.parse(response);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 721,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 722,
                    "content": "// 基本的な検証",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 695,
                  "distance": 22
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.overallRealization === ",
                  "fullLength": 338,
                  "truncatedContent": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.overallRealization === ",
                  "hash": "f58ee330e823f27e3e808879b9ef4651",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "performAIEmotionalAnalysis",
                  "relatedMethods": [
                    "performAIEmotionalAnalysis",
                    "buildEmotionalAnalysisPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<EmotionalArcProgress>"
                  ],
                  "extractedTypes": [
                    "EmotionalArcProgress>"
                  ]
                },
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "title",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "plot",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "plot",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "private",
                  "async",
                  "performAIEmotionalAnalysis",
                  "section",
                  "SectionPlot",
                  "chapters",
                  "Array",
                  "chapterNumber",
                  "number",
                  "title"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "610dbb0aad4545092105ae66532c00f1"
            },
            {
              "id": "call_b821aa55",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "fileName": "section-analyzer.ts",
              "lineNumber": 632,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 627,
                    "content": "const prompt = this.buildCoherenceAnalysisPrompt(section, chapters, memoryContext);",
                    "indent": 8
                  },
                  {
                    "lineNumber": 628,
                    "content": "let response: string = '';",
                    "indent": 8
                  },
                  {
                    "lineNumber": 629,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 630,
                    "content": "try {",
                    "indent": 8
                  },
                  {
                    "lineNumber": 631,
                    "content": "response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 632,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 633,
                    "content": ");",
                    "indent": 12
                  },
                  {
                    "lineNumber": 634,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 635,
                    "content": "const analysis = JSON.parse(response);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 636,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 637,
                    "content": "// 基本的な検証",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 609,
                  "distance": 23
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "Successfully analyzed coherence for section ${section.structure.title}",
                  "fullLength": 70,
                  "truncatedContent": "Successfully analyzed coherence for section ${section.structure.title}",
                  "hash": "2929b8486fcf2321b6354ce111e12af9",
                  "keywords": [
                    "analyze"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.overallScore === ",
                  "fullLength": 332,
                  "truncatedContent": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.overallScore === ",
                  "hash": "d247d541e2d0d3f6e93d8f83a1e4253b",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": " &&\n                Array.isArray(analysis.problematicAreas) &&\n                Array.isArray(analysis.improvementSuggestions)) {\n\n                logger.info(`Successfully analyzed coherence for section ${section.structure.title}`);\n                return analysis;\n            }\n\n            logger.warn(",
                  "fullLength": 306,
                  "truncatedContent": " &&\n                Array.isArray(analysis.problematicAreas) &&\n                Array.isArray(analysis.improvementSuggestions)) {\n\n                logger.info(`Successfully analyzed coherence for section ${section.structure.title}`);\n                return analysis;\n            }\n\n            logger.warn(",
                  "hash": "320f749e0a9e114bb54363e84cb4b670",
                  "keywords": [
                    "analyze"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "performAICoherenceAnalysis",
                  "relatedMethods": [
                    "performAICoherenceAnalysis",
                    "CoherenceAnalysis",
                    "buildCoherenceAnalysisPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<CoherenceAnalysis>"
                  ],
                  "extractedTypes": [
                    "CoherenceAnalysis>"
                  ]
                },
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "title",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "plot",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "plot",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "generate",
                  "analyze",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "private",
                  "async",
                  "performAICoherenceAnalysis",
                  "section",
                  "SectionPlot",
                  "chapters",
                  "Array",
                  "chapterNumber",
                  "number",
                  "title"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "610dbb0aad4545092105ae66532c00f1"
            },
            {
              "id": "call_59aa5683",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "fileName": "section-analyzer.ts",
              "lineNumber": 671,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 666,
                    "content": "const prompt = this.buildObjectiveAnalysisPrompt(section, chapters, analysisContext);",
                    "indent": 8
                  },
                  {
                    "lineNumber": 667,
                    "content": "let response: string = '';",
                    "indent": 8
                  },
                  {
                    "lineNumber": 668,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 669,
                    "content": "try {",
                    "indent": 8
                  },
                  {
                    "lineNumber": 670,
                    "content": "response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 671,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 672,
                    "content": ");",
                    "indent": 12
                  },
                  {
                    "lineNumber": 673,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 674,
                    "content": "const analysis = JSON.parse(response);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 675,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 676,
                    "content": "// 基本的な検証",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 649,
                  "distance": 22
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.cognitiveProgress === ",
                  "fullLength": 337,
                  "truncatedContent": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.cognitiveProgress === ",
                  "hash": "77a50a6e1e418df2a63a9da228f0a6c7",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "performAIObjectiveAnalysis",
                  "relatedMethods": [
                    "performAIObjectiveAnalysis",
                    "buildObjectiveAnalysisPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<ObjectiveProgress>"
                  ],
                  "extractedTypes": [
                    "ObjectiveProgress>"
                  ]
                },
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "title",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "plot",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "plot",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "private",
                  "async",
                  "performAIObjectiveAnalysis",
                  "section",
                  "SectionPlot",
                  "chapters",
                  "Array",
                  "chapterNumber",
                  "number",
                  "title"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "610dbb0aad4545092105ae66532c00f1"
            },
            {
              "id": "call_2c81c351",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "fileName": "section-analyzer.ts",
              "lineNumber": 717,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 712,
                    "content": "const prompt = this.buildEmotionalAnalysisPrompt(section, chapters, emotionalContext);",
                    "indent": 8
                  },
                  {
                    "lineNumber": 713,
                    "content": "let response: string = '';",
                    "indent": 8
                  },
                  {
                    "lineNumber": 714,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 715,
                    "content": "try {",
                    "indent": 8
                  },
                  {
                    "lineNumber": 716,
                    "content": "response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 717,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 718,
                    "content": ");",
                    "indent": 12
                  },
                  {
                    "lineNumber": 719,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 720,
                    "content": "const analysis = JSON.parse(response);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 721,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 722,
                    "content": "// 基本的な検証",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 695,
                  "distance": 22
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.overallRealization === ",
                  "fullLength": 338,
                  "truncatedContent": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.overallRealization === ",
                  "hash": "f58ee330e823f27e3e808879b9ef4651",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "performAIEmotionalAnalysis",
                  "relatedMethods": [
                    "performAIEmotionalAnalysis",
                    "buildEmotionalAnalysisPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<EmotionalArcProgress>"
                  ],
                  "extractedTypes": [
                    "EmotionalArcProgress>"
                  ]
                },
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "title",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "plot",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "plot",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "private",
                  "async",
                  "performAIEmotionalAnalysis",
                  "section",
                  "SectionPlot",
                  "chapters",
                  "Array",
                  "chapterNumber",
                  "number",
                  "title"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "610dbb0aad4545092105ae66532c00f1"
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "hash": "37334ebbe2a95023a8a3a4444b1b7a0c",
          "calls": [
            {
              "id": "call_71c3a3c1",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "fileName": "section-analyzer.ts",
              "lineNumber": 773,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 768,
                    "content": ");",
                    "indent": 8
                  },
                  {
                    "lineNumber": 769,
                    "content": "let response: string = '';",
                    "indent": 8
                  },
                  {
                    "lineNumber": 770,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 771,
                    "content": "try {",
                    "indent": 8
                  },
                  {
                    "lineNumber": 772,
                    "content": "response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 773,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 774,
                    "content": ");",
                    "indent": 12
                  },
                  {
                    "lineNumber": 775,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 776,
                    "content": "const suggestions = JSON.parse(response);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 777,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 778,
                    "content": "// 基本的な検証",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 743,
                  "distance": 30
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}",
                  "fullLength": 107,
                  "truncatedContent": "Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}",
                  "hash": "6af57150f3e5183b6af0cdc5d08770db",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const suggestions = JSON.parse(response);\n\n            // 基本的な検証\n            if (Array.isArray(suggestions)) {\n                logger.info(`Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}`);\n                return suggestions;\n            }\n\n            logger.warn(",
                  "fullLength": 519,
                  "truncatedContent": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const suggestions = JSON.parse(response);\n\n            // 基本的な検証\n            if (Array.isArray(suggestions)) {\n                logger.info(`Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}`);\n                return suggestions;\n            }\n\n            logger.warn(",
                  "hash": "dde5c5e52719e86afd8e56d8d50a49b9",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ", { response });\n            return this.generateDefaultImprovementSuggestions(section, coherenceAnalysis, objectiveProgress);\n        } catch (parseError) {\n            logger.error(",
                  "fullLength": 183,
                  "truncatedContent": ", { response });\n            return this.generateDefaultImprovementSuggestions(section, coherenceAnalysis, objectiveProgress);\n        } catch (parseError) {\n            logger.error(",
                  "hash": "e3ce1269b1e81c40b431ecc491bd3c60",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "template_literal",
                  "content": "Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}",
                  "fullLength": 107,
                  "truncatedContent": "Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}",
                  "hash": "6af57150f3e5183b6af0cdc5d08770db",
                  "hasVariables": true,
                  "variableCount": 2
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "buildImprovementAnalysisPrompt",
                  "relatedMethods": [
                    "buildImprovementAnalysisPrompt",
                    "coherenceAnalysis"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<ImprovementSuggestion[]>"
                  ],
                  "extractedTypes": [
                    "ImprovementSuggestion[]>"
                  ]
                },
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "title",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "plot",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "ObjectiveProgress",
                  "emotionalArcProgress",
                  "EmotionalArcProgress",
                  "improvementContext",
                  "any",
                  "Promise",
                  "ImprovementSuggestion",
                  "const",
                  "prompt",
                  "this"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "37334ebbe2a95023a8a3a4444b1b7a0c"
            },
            {
              "id": "call_71c3a3c1",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "fileName": "section-analyzer.ts",
              "lineNumber": 773,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 768,
                    "content": ");",
                    "indent": 8
                  },
                  {
                    "lineNumber": 769,
                    "content": "let response: string = '';",
                    "indent": 8
                  },
                  {
                    "lineNumber": 770,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 771,
                    "content": "try {",
                    "indent": 8
                  },
                  {
                    "lineNumber": 772,
                    "content": "response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 773,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 774,
                    "content": ");",
                    "indent": 12
                  },
                  {
                    "lineNumber": 775,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 776,
                    "content": "const suggestions = JSON.parse(response);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 777,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 778,
                    "content": "// 基本的な検証",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 743,
                  "distance": 30
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}",
                  "fullLength": 107,
                  "truncatedContent": "Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}",
                  "hash": "6af57150f3e5183b6af0cdc5d08770db",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const suggestions = JSON.parse(response);\n\n            // 基本的な検証\n            if (Array.isArray(suggestions)) {\n                logger.info(`Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}`);\n                return suggestions;\n            }\n\n            logger.warn(",
                  "fullLength": 519,
                  "truncatedContent": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const suggestions = JSON.parse(response);\n\n            // 基本的な検証\n            if (Array.isArray(suggestions)) {\n                logger.info(`Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}`);\n                return suggestions;\n            }\n\n            logger.warn(",
                  "hash": "dde5c5e52719e86afd8e56d8d50a49b9",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ", { response });\n            return this.generateDefaultImprovementSuggestions(section, coherenceAnalysis, objectiveProgress);\n        } catch (parseError) {\n            logger.error(",
                  "fullLength": 183,
                  "truncatedContent": ", { response });\n            return this.generateDefaultImprovementSuggestions(section, coherenceAnalysis, objectiveProgress);\n        } catch (parseError) {\n            logger.error(",
                  "hash": "e3ce1269b1e81c40b431ecc491bd3c60",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "template_literal",
                  "content": "Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}",
                  "fullLength": 107,
                  "truncatedContent": "Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}",
                  "hash": "6af57150f3e5183b6af0cdc5d08770db",
                  "hasVariables": true,
                  "variableCount": 2
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "buildImprovementAnalysisPrompt",
                  "relatedMethods": [
                    "buildImprovementAnalysisPrompt",
                    "coherenceAnalysis"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<ImprovementSuggestion[]>"
                  ],
                  "extractedTypes": [
                    "ImprovementSuggestion[]>"
                  ]
                },
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "title",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "plot",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "ObjectiveProgress",
                  "emotionalArcProgress",
                  "EmotionalArcProgress",
                  "improvementContext",
                  "any",
                  "Promise",
                  "ImprovementSuggestion",
                  "const",
                  "prompt",
                  "this"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "37334ebbe2a95023a8a3a4444b1b7a0c"
            }
          ],
          "count": 2,
          "severity": "high"
        },
        {
          "hash": "35ce0974632043ca74718864f3cf85af",
          "calls": [
            {
              "id": "call_01bf8aff",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "fileName": "section-analyzer.ts",
              "lineNumber": 632,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 627,
                    "content": "const prompt = this.buildCoherenceAnalysisPrompt(section, chapters, memoryContext);",
                    "indent": 8
                  },
                  {
                    "lineNumber": 628,
                    "content": "let response: string = '';",
                    "indent": 8
                  },
                  {
                    "lineNumber": 629,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 630,
                    "content": "try {",
                    "indent": 8
                  },
                  {
                    "lineNumber": 631,
                    "content": "response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 632,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 633,
                    "content": ");",
                    "indent": 12
                  },
                  {
                    "lineNumber": 634,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 635,
                    "content": "const analysis = JSON.parse(response);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 636,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 637,
                    "content": "// 基本的な検証",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 609,
                  "distance": 23
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "Successfully analyzed coherence for section ${section.structure.title}",
                  "fullLength": 70,
                  "truncatedContent": "Successfully analyzed coherence for section ${section.structure.title}",
                  "hash": "2929b8486fcf2321b6354ce111e12af9",
                  "keywords": [
                    "analyze"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.overallScore === ",
                  "fullLength": 332,
                  "truncatedContent": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.overallScore === ",
                  "hash": "d247d541e2d0d3f6e93d8f83a1e4253b",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": " &&\n                Array.isArray(analysis.problematicAreas) &&\n                Array.isArray(analysis.improvementSuggestions)) {\n\n                logger.info(`Successfully analyzed coherence for section ${section.structure.title}`);\n                return analysis;\n            }\n\n            logger.warn(",
                  "fullLength": 306,
                  "truncatedContent": " &&\n                Array.isArray(analysis.problematicAreas) &&\n                Array.isArray(analysis.improvementSuggestions)) {\n\n                logger.info(`Successfully analyzed coherence for section ${section.structure.title}`);\n                return analysis;\n            }\n\n            logger.warn(",
                  "hash": "320f749e0a9e114bb54363e84cb4b670",
                  "keywords": [
                    "analyze"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "performAICoherenceAnalysis",
                  "relatedMethods": [
                    "performAICoherenceAnalysis",
                    "CoherenceAnalysis",
                    "buildCoherenceAnalysisPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<CoherenceAnalysis>"
                  ],
                  "extractedTypes": [
                    "CoherenceAnalysis>"
                  ]
                },
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "title",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "plot",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "plot",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "generate",
                  "analyze",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "private",
                  "async",
                  "performAICoherenceAnalysis",
                  "section",
                  "SectionPlot",
                  "chapters",
                  "Array",
                  "chapterNumber",
                  "number",
                  "title"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "35ce0974632043ca74718864f3cf85af"
            },
            {
              "id": "call_7234ed6d",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "fileName": "section-analyzer.ts",
              "lineNumber": 671,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 666,
                    "content": "const prompt = this.buildObjectiveAnalysisPrompt(section, chapters, analysisContext);",
                    "indent": 8
                  },
                  {
                    "lineNumber": 667,
                    "content": "let response: string = '';",
                    "indent": 8
                  },
                  {
                    "lineNumber": 668,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 669,
                    "content": "try {",
                    "indent": 8
                  },
                  {
                    "lineNumber": 670,
                    "content": "response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 671,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 672,
                    "content": ");",
                    "indent": 12
                  },
                  {
                    "lineNumber": 673,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 674,
                    "content": "const analysis = JSON.parse(response);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 675,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 676,
                    "content": "// 基本的な検証",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 649,
                  "distance": 22
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.cognitiveProgress === ",
                  "fullLength": 337,
                  "truncatedContent": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.cognitiveProgress === ",
                  "hash": "77a50a6e1e418df2a63a9da228f0a6c7",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "performAIObjectiveAnalysis",
                  "relatedMethods": [
                    "performAIObjectiveAnalysis",
                    "buildObjectiveAnalysisPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<ObjectiveProgress>"
                  ],
                  "extractedTypes": [
                    "ObjectiveProgress>"
                  ]
                },
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "title",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "plot",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "plot",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "private",
                  "async",
                  "performAIObjectiveAnalysis",
                  "section",
                  "SectionPlot",
                  "chapters",
                  "Array",
                  "chapterNumber",
                  "number",
                  "title"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "35ce0974632043ca74718864f3cf85af"
            },
            {
              "id": "call_25880c3e",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "fileName": "section-analyzer.ts",
              "lineNumber": 717,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 712,
                    "content": "const prompt = this.buildEmotionalAnalysisPrompt(section, chapters, emotionalContext);",
                    "indent": 8
                  },
                  {
                    "lineNumber": 713,
                    "content": "let response: string = '';",
                    "indent": 8
                  },
                  {
                    "lineNumber": 714,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 715,
                    "content": "try {",
                    "indent": 8
                  },
                  {
                    "lineNumber": 716,
                    "content": "response = await apiThrottler.throttledRequest(() =>",
                    "indent": 12
                  }
                ],
                "current": {
                  "lineNumber": 717,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 16
                },
                "after": [
                  {
                    "lineNumber": 718,
                    "content": ");",
                    "indent": 12
                  },
                  {
                    "lineNumber": 719,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 720,
                    "content": "const analysis = JSON.parse(response);",
                    "indent": 12
                  },
                  {
                    "lineNumber": 721,
                    "content": "",
                    "indent": 0
                  },
                  {
                    "lineNumber": 722,
                    "content": "// 基本的な検証",
                    "indent": 12
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 695,
                  "distance": 22
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.overallRealization === ",
                  "fullLength": 338,
                  "truncatedContent": ";\n\n        try {\n            response = await apiThrottler.throttledRequest(() =>\n                this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\n            );\n\n            const analysis = JSON.parse(response);\n\n            // 基本的な検証\n            if (analysis &&\n                typeof analysis.overallRealization === ",
                  "hash": "f58ee330e823f27e3e808879b9ef4651",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "method_based",
                  "suggestedPurpose": "performAIEmotionalAnalysis",
                  "relatedMethods": [
                    "performAIEmotionalAnalysis",
                    "buildEmotionalAnalysisPrompt"
                  ],
                  "confidence": "medium"
                }
              ],
              "expectedOutputs": [
                {
                  "type": "type_annotation",
                  "types": [
                    ": Promise<EmotionalArcProgress>"
                  ],
                  "extractedTypes": [
                    "EmotionalArcProgress>"
                  ]
                },
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "title",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "plot",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "設定",
                  "plot",
                  "setting"
                ],
                "characterElements": [
                  "キャラクター",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "分析",
                  "generate",
                  "build"
                ],
                "complexity": "low",
                "dependencies": [
                  "private",
                  "async",
                  "performAIEmotionalAnalysis",
                  "section",
                  "SectionPlot",
                  "chapters",
                  "Array",
                  "chapterNumber",
                  "number",
                  "title"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "35ce0974632043ca74718864f3cf85af"
            }
          ],
          "count": 3,
          "severity": "high"
        },
        {
          "hash": "d0d0216e3f35e835df7863d165031faf",
          "calls": [
            {
              "id": "call_27c6e3cd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "fileName": "section-designer.ts",
              "lineNumber": 165,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 160,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 161,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 162,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 163,
                    "content": "// AIによる生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 164,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 165,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 166,
                    "content": ");",
                    "indent": 6
                  },
                  {
                    "lineNumber": 167,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 168,
                    "content": "// 応答をjsonとしてパース",
                    "indent": 6
                  },
                  {
                    "lineNumber": 169,
                    "content": "try {",
                    "indent": 6
                  },
                  {
                    "lineNumber": 170,
                    "content": "const keyScenes = JSON.parse(response);",
                    "indent": 8
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 101,
                  "distance": 64
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 177,
                  "truncatedContent": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "b133460cea1796cd488cf8e88b859090",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 177,
                  "truncatedContent": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "b133460cea1796cd488cf8e88b859090",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ", { response });\r\n        return this.generateDefaultKeyScenes(section, chapterCount);\r\n      } catch (parseError) {\r\n        logger.error(",
                  "fullLength": 139,
                  "truncatedContent": ", { response });\r\n        return this.generateDefaultKeyScenes(section, chapterCount);\r\n      } catch (parseError) {\r\n        logger.error(",
                  "hash": "66619830a45c9eff0373ae37d360d46e",
                  "keywords": [
                    "generate",
                    "Scene",
                    "chapter"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "scene",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "シーン",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "tionalArc",
                  "opening",
                  "emotion",
                  "emotionalArc",
                  "midpoint",
                  "conclusion",
                  "JSON",
                  "description",
                  "purpose",
                  "relativePosition"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
            },
            {
              "id": "call_2fad31e3",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "fileName": "section-designer.ts",
              "lineNumber": 264,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 259,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 260,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 261,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 262,
                    "content": "// AIによる生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 263,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 264,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 265,
                    "content": ");",
                    "indent": 6
                  },
                  {
                    "lineNumber": 266,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 267,
                    "content": "// 応答をJSONとしてパース",
                    "indent": 6
                  },
                  {
                    "lineNumber": 268,
                    "content": "try {",
                    "indent": 6
                  },
                  {
                    "lineNumber": 269,
                    "content": "const turningPoints = JSON.parse(response);",
                    "indent": 8
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 183,
                  "distance": 81
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ": 0.33\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 183,
                  "truncatedContent": ": 0.33\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "c41be880c084fcabca11fb970cc6ebea",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ": 0.33\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 183,
                  "truncatedContent": ": 0.33\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "c41be880c084fcabca11fb970cc6ebea",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ", { response });\r\n        return this.generateDefaultTurningPoints(section);\r\n      } catch (parseError) {\r\n        logger.error(",
                  "fullLength": 129,
                  "truncatedContent": ", { response });\r\n        return this.generateDefaultTurningPoints(section);\r\n      } catch (parseError) {\r\n        logger.error(",
                  "hash": "f30c764b844b2831f4682c5619554725",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "シーン",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "learning",
                  "primaryLearningStage",
                  "emotion",
                  "emotionalArc",
                  "opening",
                  "midpoint",
                  "conclusion",
                  "JSON",
                  "description",
                  "impact"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
            },
            {
              "id": "call_36bd0422",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "fileName": "section-designer.ts",
              "lineNumber": 349,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 344,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 345,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 346,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 347,
                    "content": "// AIによる生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 348,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 349,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 350,
                    "content": ");",
                    "indent": 6
                  },
                  {
                    "lineNumber": 351,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 352,
                    "content": "// 応答をJSONとしてパース",
                    "indent": 6
                  },
                  {
                    "lineNumber": 353,
                    "content": "try {",
                    "indent": 6
                  },
                  {
                    "lineNumber": 354,
                    "content": "const threads = JSON.parse(response);",
                    "indent": 8
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 282,
                  "distance": 67
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 177,
                  "truncatedContent": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "b133460cea1796cd488cf8e88b859090",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 177,
                  "truncatedContent": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "b133460cea1796cd488cf8e88b859090",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ", { response });\r\n        return this.generateDefaultNarrativeThreads(section);\r\n      } catch (parseError) {\r\n        logger.error(",
                  "fullLength": 132,
                  "truncatedContent": ", { response });\r\n        return this.generateDefaultNarrativeThreads(section);\r\n      } catch (parseError) {\r\n        logger.error(",
                  "hash": "009ffb6ed89e2908c0baa7c8c8a75353",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "シーン",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "theme",
                  "learning",
                  "mainConcept",
                  "primaryLearningStage",
                  "transformationalArc",
                  "startingState",
                  "endState",
                  "JSON",
                  "thread",
                  "development"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
            },
            {
              "id": "call_871fb462",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "fileName": "section-designer.ts",
              "lineNumber": 442,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 437,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 438,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 439,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 440,
                    "content": "// AIによる生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 441,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 442,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 443,
                    "content": ");",
                    "indent": 6
                  },
                  {
                    "lineNumber": 444,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 445,
                    "content": "// 応答をJSONとしてパース",
                    "indent": 6
                  },
                  {
                    "lineNumber": 446,
                    "content": "try {",
                    "indent": 6
                  },
                  {
                    "lineNumber": 447,
                    "content": "const foreshadowing = JSON.parse(response);",
                    "indent": 8
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 367,
                  "distance": 75
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ": 2\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 180,
                  "truncatedContent": ": 2\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "67188a6448697428fb587f7bad43b483",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ": 2\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 180,
                  "truncatedContent": ": 2\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "67188a6448697428fb587f7bad43b483",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ", { response });\r\n        return this.generateDefaultForeshadowing(section);\r\n      } catch (parseError) {\r\n        logger.error(",
                  "fullLength": 129,
                  "truncatedContent": ", { response });\r\n        return this.generateDefaultForeshadowing(section);\r\n      } catch (parseError) {\r\n        logger.error(",
                  "hash": "e8bc1594043af01ecdeb01cfb9b777ca",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "シーン",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "設計",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "structure",
                  "theme",
                  "narrativePhase",
                  "section",
                  "chapterRange",
                  "start",
                  "end",
                  "JSON",
                  "element",
                  "plantingPoint"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
            },
            {
              "id": "call_a403e1b8",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "fileName": "section-designer.ts",
              "lineNumber": 685,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 680,
                    "content": "}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 681,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 682,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 683,
                    "content": "// AIによる生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 684,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 685,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 686,
                    "content": ");",
                    "indent": 6
                  },
                  {
                    "lineNumber": 687,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 688,
                    "content": "// 応答をJSONとしてパース",
                    "indent": 6
                  },
                  {
                    "lineNumber": 689,
                    "content": "try {",
                    "indent": 6
                  },
                  {
                    "lineNumber": 690,
                    "content": "const emotionalDesign = JSON.parse(response);",
                    "indent": 8
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 628,
                  "distance": 57
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 164,
                  "truncatedContent": "\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "a32a1970ca9a13471e352bc513f5fb20",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 164,
                  "truncatedContent": "\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "a32a1970ca9a13471e352bc513f5fb20",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "シーン",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate",
                  "design"
                ],
                "complexity": "low",
                "dependencies": [
                  "conclusion",
                  "tensionPoints",
                  "relativePosition",
                  "intensity",
                  "description",
                  "catharticMoment",
                  "type",
                  "intellectual",
                  "readerEmotionalJourney",
                  "emotionalPayoff"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
            },
            {
              "id": "call_f586e8f0",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "fileName": "section-designer.ts",
              "lineNumber": 853,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 848,
                    "content": "}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 849,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 850,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 851,
                    "content": "// AIによる生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 852,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 853,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 854,
                    "content": ");",
                    "indent": 6
                  },
                  {
                    "lineNumber": 855,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 856,
                    "content": "// 応答をJSONとしてパース",
                    "indent": 6
                  },
                  {
                    "lineNumber": 857,
                    "content": "try {",
                    "indent": 6
                  },
                  {
                    "lineNumber": 858,
                    "content": "const characterDesign = JSON.parse(response);",
                    "indent": 8
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 787,
                  "distance": 66
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\r\n    },\r\n    ...\r\n  }\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 186,
                  "truncatedContent": "\r\n    },\r\n    ...\r\n  }\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "64aa3dcf139eb30e40c669c4bbb9f1af",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\r\n    },\r\n    ...\r\n  }\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 186,
                  "truncatedContent": "\r\n    },\r\n    ...\r\n  }\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "64aa3dcf139eb30e40c669c4bbb9f1af",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "シーン",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate",
                  "design"
                ],
                "complexity": "low",
                "dependencies": [
                  "characters",
                  "startingDynamic",
                  "evolution",
                  "endDynamic",
                  "characterTransformations",
                  "startingState",
                  "internalObstacles",
                  "growthMoments",
                  "endState",
                  "const"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
            },
            {
              "id": "call_fbc93dbd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "fileName": "section-designer.ts",
              "lineNumber": 1005,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 1000,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1001,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1002,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 1003,
                    "content": "// AIによる生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 1004,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 1005,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 1006,
                    "content": ");",
                    "indent": 6
                  },
                  {
                    "lineNumber": 1007,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 1008,
                    "content": "// 応答をJSONとしてパース",
                    "indent": 6
                  },
                  {
                    "lineNumber": 1009,
                    "content": "try {",
                    "indent": 6
                  },
                  {
                    "lineNumber": 1010,
                    "content": "const outlines = JSON.parse(response);",
                    "indent": 8
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 949,
                  "distance": 56
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
                  "fullLength": 524,
                  "truncatedContent": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
                  "hash": "9ad88852ab2e8247ad7a7a5355653f91",
                  "keywords": [
                    "生成",
                    "generate",
                    "chapter"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "]\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 178,
                  "truncatedContent": "]\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "7ab089a00dd657b54ec119e503cb22f7",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
                  "fullLength": 524,
                  "truncatedContent": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
                  "hash": "9ad88852ab2e8247ad7a7a5355653f91",
                  "keywords": [
                    "生成",
                    "generate",
                    "chapter"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "]\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 178,
                  "truncatedContent": "]\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "7ab089a00dd657b54ec119e503cb22f7",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "template_literal",
                  "content": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
                  "fullLength": 524,
                  "truncatedContent": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
                  "hash": "9ad88852ab2e8247ad7a7a5355653f91",
                  "hasVariables": false,
                  "variableCount": 0
                }
              ],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "title",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "シーン",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "JSON",
                  "chapterNumber",
                  "title",
                  "summary",
                  "learningStage",
                  "EXPLORATION",
                  "emotionalTone",
                  "keyEvents",
                  "const",
                  "response"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
            },
            {
              "id": "call_27c6e3cd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "fileName": "section-designer.ts",
              "lineNumber": 165,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 160,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 161,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 162,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 163,
                    "content": "// AIによる生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 164,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 165,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 166,
                    "content": ");",
                    "indent": 6
                  },
                  {
                    "lineNumber": 167,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 168,
                    "content": "// 応答をjsonとしてパース",
                    "indent": 6
                  },
                  {
                    "lineNumber": 169,
                    "content": "try {",
                    "indent": 6
                  },
                  {
                    "lineNumber": 170,
                    "content": "const keyScenes = JSON.parse(response);",
                    "indent": 8
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 101,
                  "distance": 64
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 177,
                  "truncatedContent": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "b133460cea1796cd488cf8e88b859090",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 177,
                  "truncatedContent": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "b133460cea1796cd488cf8e88b859090",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ", { response });\r\n        return this.generateDefaultKeyScenes(section, chapterCount);\r\n      } catch (parseError) {\r\n        logger.error(",
                  "fullLength": 139,
                  "truncatedContent": ", { response });\r\n        return this.generateDefaultKeyScenes(section, chapterCount);\r\n      } catch (parseError) {\r\n        logger.error(",
                  "hash": "66619830a45c9eff0373ae37d360d46e",
                  "keywords": [
                    "generate",
                    "Scene",
                    "chapter"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "scene",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "シーン",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "tionalArc",
                  "opening",
                  "emotion",
                  "emotionalArc",
                  "midpoint",
                  "conclusion",
                  "JSON",
                  "description",
                  "purpose",
                  "relativePosition"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
            },
            {
              "id": "call_2fad31e3",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "fileName": "section-designer.ts",
              "lineNumber": 264,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 259,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 260,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 261,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 262,
                    "content": "// AIによる生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 263,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 264,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 265,
                    "content": ");",
                    "indent": 6
                  },
                  {
                    "lineNumber": 266,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 267,
                    "content": "// 応答をJSONとしてパース",
                    "indent": 6
                  },
                  {
                    "lineNumber": 268,
                    "content": "try {",
                    "indent": 6
                  },
                  {
                    "lineNumber": 269,
                    "content": "const turningPoints = JSON.parse(response);",
                    "indent": 8
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 183,
                  "distance": 81
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ": 0.33\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 183,
                  "truncatedContent": ": 0.33\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "c41be880c084fcabca11fb970cc6ebea",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ": 0.33\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 183,
                  "truncatedContent": ": 0.33\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "c41be880c084fcabca11fb970cc6ebea",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ", { response });\r\n        return this.generateDefaultTurningPoints(section);\r\n      } catch (parseError) {\r\n        logger.error(",
                  "fullLength": 129,
                  "truncatedContent": ", { response });\r\n        return this.generateDefaultTurningPoints(section);\r\n      } catch (parseError) {\r\n        logger.error(",
                  "hash": "f30c764b844b2831f4682c5619554725",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "シーン",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "learning",
                  "primaryLearningStage",
                  "emotion",
                  "emotionalArc",
                  "opening",
                  "midpoint",
                  "conclusion",
                  "JSON",
                  "description",
                  "impact"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
            },
            {
              "id": "call_36bd0422",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "fileName": "section-designer.ts",
              "lineNumber": 349,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 344,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 345,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 346,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 347,
                    "content": "// AIによる生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 348,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 349,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 350,
                    "content": ");",
                    "indent": 6
                  },
                  {
                    "lineNumber": 351,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 352,
                    "content": "// 応答をJSONとしてパース",
                    "indent": 6
                  },
                  {
                    "lineNumber": 353,
                    "content": "try {",
                    "indent": 6
                  },
                  {
                    "lineNumber": 354,
                    "content": "const threads = JSON.parse(response);",
                    "indent": 8
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 282,
                  "distance": 67
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 177,
                  "truncatedContent": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "b133460cea1796cd488cf8e88b859090",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 177,
                  "truncatedContent": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "b133460cea1796cd488cf8e88b859090",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ", { response });\r\n        return this.generateDefaultNarrativeThreads(section);\r\n      } catch (parseError) {\r\n        logger.error(",
                  "fullLength": 132,
                  "truncatedContent": ", { response });\r\n        return this.generateDefaultNarrativeThreads(section);\r\n      } catch (parseError) {\r\n        logger.error(",
                  "hash": "009ffb6ed89e2908c0baa7c8c8a75353",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "シーン",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "theme",
                  "learning",
                  "mainConcept",
                  "primaryLearningStage",
                  "transformationalArc",
                  "startingState",
                  "endState",
                  "JSON",
                  "thread",
                  "development"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
            },
            {
              "id": "call_871fb462",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "fileName": "section-designer.ts",
              "lineNumber": 442,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 437,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 438,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 439,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 440,
                    "content": "// AIによる生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 441,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 442,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 443,
                    "content": ");",
                    "indent": 6
                  },
                  {
                    "lineNumber": 444,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 445,
                    "content": "// 応答をJSONとしてパース",
                    "indent": 6
                  },
                  {
                    "lineNumber": 446,
                    "content": "try {",
                    "indent": 6
                  },
                  {
                    "lineNumber": 447,
                    "content": "const foreshadowing = JSON.parse(response);",
                    "indent": 8
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 367,
                  "distance": 75
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ": 2\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 180,
                  "truncatedContent": ": 2\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "67188a6448697428fb587f7bad43b483",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ": 2\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 180,
                  "truncatedContent": ": 2\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "67188a6448697428fb587f7bad43b483",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ", { response });\r\n        return this.generateDefaultForeshadowing(section);\r\n      } catch (parseError) {\r\n        logger.error(",
                  "fullLength": 129,
                  "truncatedContent": ", { response });\r\n        return this.generateDefaultForeshadowing(section);\r\n      } catch (parseError) {\r\n        logger.error(",
                  "hash": "e8bc1594043af01ecdeb01cfb9b777ca",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "シーン",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "設計",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "structure",
                  "theme",
                  "narrativePhase",
                  "section",
                  "chapterRange",
                  "start",
                  "end",
                  "JSON",
                  "element",
                  "plantingPoint"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
            },
            {
              "id": "call_a403e1b8",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "fileName": "section-designer.ts",
              "lineNumber": 685,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 680,
                    "content": "}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 681,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 682,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 683,
                    "content": "// AIによる生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 684,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 685,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 686,
                    "content": ");",
                    "indent": 6
                  },
                  {
                    "lineNumber": 687,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 688,
                    "content": "// 応答をJSONとしてパース",
                    "indent": 6
                  },
                  {
                    "lineNumber": 689,
                    "content": "try {",
                    "indent": 6
                  },
                  {
                    "lineNumber": 690,
                    "content": "const emotionalDesign = JSON.parse(response);",
                    "indent": 8
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 628,
                  "distance": 57
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 164,
                  "truncatedContent": "\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "a32a1970ca9a13471e352bc513f5fb20",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 164,
                  "truncatedContent": "\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "a32a1970ca9a13471e352bc513f5fb20",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "シーン",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate",
                  "design"
                ],
                "complexity": "low",
                "dependencies": [
                  "conclusion",
                  "tensionPoints",
                  "relativePosition",
                  "intensity",
                  "description",
                  "catharticMoment",
                  "type",
                  "intellectual",
                  "readerEmotionalJourney",
                  "emotionalPayoff"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
            },
            {
              "id": "call_f586e8f0",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "fileName": "section-designer.ts",
              "lineNumber": 853,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 848,
                    "content": "}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 849,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 850,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 851,
                    "content": "// AIによる生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 852,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 853,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 854,
                    "content": ");",
                    "indent": 6
                  },
                  {
                    "lineNumber": 855,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 856,
                    "content": "// 応答をJSONとしてパース",
                    "indent": 6
                  },
                  {
                    "lineNumber": 857,
                    "content": "try {",
                    "indent": 6
                  },
                  {
                    "lineNumber": 858,
                    "content": "const characterDesign = JSON.parse(response);",
                    "indent": 8
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 787,
                  "distance": 66
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\r\n    },\r\n    ...\r\n  }\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 186,
                  "truncatedContent": "\r\n    },\r\n    ...\r\n  }\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "64aa3dcf139eb30e40c669c4bbb9f1af",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\r\n    },\r\n    ...\r\n  }\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 186,
                  "truncatedContent": "\r\n    },\r\n    ...\r\n  }\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "64aa3dcf139eb30e40c669c4bbb9f1af",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "シーン",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate",
                  "design"
                ],
                "complexity": "low",
                "dependencies": [
                  "characters",
                  "startingDynamic",
                  "evolution",
                  "endDynamic",
                  "characterTransformations",
                  "startingState",
                  "internalObstacles",
                  "growthMoments",
                  "endState",
                  "const"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
            },
            {
              "id": "call_fbc93dbd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "fileName": "section-designer.ts",
              "lineNumber": 1005,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": "geminiClient.generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 1000,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1001,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1002,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 1003,
                    "content": "// AIによる生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 1004,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 1005,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 1006,
                    "content": ");",
                    "indent": 6
                  },
                  {
                    "lineNumber": 1007,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 1008,
                    "content": "// 応答をJSONとしてパース",
                    "indent": 6
                  },
                  {
                    "lineNumber": 1009,
                    "content": "try {",
                    "indent": 6
                  },
                  {
                    "lineNumber": 1010,
                    "content": "const outlines = JSON.parse(response);",
                    "indent": 8
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 949,
                  "distance": 56
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
                  "fullLength": 524,
                  "truncatedContent": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
                  "hash": "9ad88852ab2e8247ad7a7a5355653f91",
                  "keywords": [
                    "生成",
                    "generate",
                    "chapter"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "]\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 178,
                  "truncatedContent": "]\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "7ab089a00dd657b54ec119e503cb22f7",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
                  "fullLength": 524,
                  "truncatedContent": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
                  "hash": "9ad88852ab2e8247ad7a7a5355653f91",
                  "keywords": [
                    "生成",
                    "generate",
                    "chapter"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "]\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 178,
                  "truncatedContent": "]\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "7ab089a00dd657b54ec119e503cb22f7",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "template_literal",
                  "content": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
                  "fullLength": 524,
                  "truncatedContent": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
                  "hash": "9ad88852ab2e8247ad7a7a5355653f91",
                  "hasVariables": false,
                  "variableCount": 0
                }
              ],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "title",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "シーン",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "JSON",
                  "chapterNumber",
                  "title",
                  "summary",
                  "learningStage",
                  "EXPLORATION",
                  "emotionalTone",
                  "keyEvents",
                  "const",
                  "response"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "d0d0216e3f35e835df7863d165031faf"
            }
          ],
          "count": 14,
          "severity": "high"
        },
        {
          "hash": "892777074cbbda29148b1644ce692bf0",
          "calls": [
            {
              "id": "call_c9e2a5af",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "fileName": "section-designer.ts",
              "lineNumber": 165,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 160,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 161,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 162,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 163,
                    "content": "// AIによる生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 164,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 165,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 166,
                    "content": ");",
                    "indent": 6
                  },
                  {
                    "lineNumber": 167,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 168,
                    "content": "// 応答をjsonとしてパース",
                    "indent": 6
                  },
                  {
                    "lineNumber": 169,
                    "content": "try {",
                    "indent": 6
                  },
                  {
                    "lineNumber": 170,
                    "content": "const keyScenes = JSON.parse(response);",
                    "indent": 8
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 101,
                  "distance": 64
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 177,
                  "truncatedContent": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "b133460cea1796cd488cf8e88b859090",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 177,
                  "truncatedContent": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "b133460cea1796cd488cf8e88b859090",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ", { response });\r\n        return this.generateDefaultKeyScenes(section, chapterCount);\r\n      } catch (parseError) {\r\n        logger.error(",
                  "fullLength": 139,
                  "truncatedContent": ", { response });\r\n        return this.generateDefaultKeyScenes(section, chapterCount);\r\n      } catch (parseError) {\r\n        logger.error(",
                  "hash": "66619830a45c9eff0373ae37d360d46e",
                  "keywords": [
                    "generate",
                    "Scene",
                    "chapter"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "scene",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "シーン",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "ening",
                  "emotion",
                  "emotionalArc",
                  "midpoint",
                  "conclusion",
                  "JSON",
                  "description",
                  "purpose",
                  "relativePosition",
                  "learningConnection"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "892777074cbbda29148b1644ce692bf0"
            },
            {
              "id": "call_f2eeedb1",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "fileName": "section-designer.ts",
              "lineNumber": 264,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 259,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 260,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 261,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 262,
                    "content": "// AIによる生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 263,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 264,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 265,
                    "content": ");",
                    "indent": 6
                  },
                  {
                    "lineNumber": 266,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 267,
                    "content": "// 応答をJSONとしてパース",
                    "indent": 6
                  },
                  {
                    "lineNumber": 268,
                    "content": "try {",
                    "indent": 6
                  },
                  {
                    "lineNumber": 269,
                    "content": "const turningPoints = JSON.parse(response);",
                    "indent": 8
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 183,
                  "distance": 81
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ": 0.33\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 183,
                  "truncatedContent": ": 0.33\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "c41be880c084fcabca11fb970cc6ebea",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ": 0.33\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 183,
                  "truncatedContent": ": 0.33\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "c41be880c084fcabca11fb970cc6ebea",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ", { response });\r\n        return this.generateDefaultTurningPoints(section);\r\n      } catch (parseError) {\r\n        logger.error(",
                  "fullLength": 129,
                  "truncatedContent": ", { response });\r\n        return this.generateDefaultTurningPoints(section);\r\n      } catch (parseError) {\r\n        logger.error(",
                  "hash": "f30c764b844b2831f4682c5619554725",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "シーン",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "primaryLearningStage",
                  "emotion",
                  "emotionalArc",
                  "opening",
                  "midpoint",
                  "conclusion",
                  "JSON",
                  "description",
                  "impact",
                  "relativePosition"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "892777074cbbda29148b1644ce692bf0"
            },
            {
              "id": "call_bcb69358",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "fileName": "section-designer.ts",
              "lineNumber": 349,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 344,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 345,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 346,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 347,
                    "content": "// AIによる生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 348,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 349,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 350,
                    "content": ");",
                    "indent": 6
                  },
                  {
                    "lineNumber": 351,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 352,
                    "content": "// 応答をJSONとしてパース",
                    "indent": 6
                  },
                  {
                    "lineNumber": 353,
                    "content": "try {",
                    "indent": 6
                  },
                  {
                    "lineNumber": 354,
                    "content": "const threads = JSON.parse(response);",
                    "indent": 8
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 282,
                  "distance": 67
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 177,
                  "truncatedContent": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "b133460cea1796cd488cf8e88b859090",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 177,
                  "truncatedContent": "\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "b133460cea1796cd488cf8e88b859090",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ", { response });\r\n        return this.generateDefaultNarrativeThreads(section);\r\n      } catch (parseError) {\r\n        logger.error(",
                  "fullLength": 132,
                  "truncatedContent": ", { response });\r\n        return this.generateDefaultNarrativeThreads(section);\r\n      } catch (parseError) {\r\n        logger.error(",
                  "hash": "009ffb6ed89e2908c0baa7c8c8a75353",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "シーン",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "theme",
                  "learning",
                  "mainConcept",
                  "primaryLearningStage",
                  "transformationalArc",
                  "startingState",
                  "endState",
                  "JSON",
                  "thread",
                  "development"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "892777074cbbda29148b1644ce692bf0"
            },
            {
              "id": "call_6efd7ed4",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "fileName": "section-designer.ts",
              "lineNumber": 442,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 437,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 438,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 439,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 440,
                    "content": "// AIによる生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 441,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 442,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 443,
                    "content": ");",
                    "indent": 6
                  },
                  {
                    "lineNumber": 444,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 445,
                    "content": "// 応答をJSONとしてパース",
                    "indent": 6
                  },
                  {
                    "lineNumber": 446,
                    "content": "try {",
                    "indent": 6
                  },
                  {
                    "lineNumber": 447,
                    "content": "const foreshadowing = JSON.parse(response);",
                    "indent": 8
                  }
                ],
                "functionContext": {
                  "functionName": "catch",
                  "startLine": 367,
                  "distance": 75
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ": 2\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 180,
                  "truncatedContent": ": 2\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "67188a6448697428fb587f7bad43b483",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ": 2\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 180,
                  "truncatedContent": ": 2\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "67188a6448697428fb587f7bad43b483",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ", { response });\r\n        return this.generateDefaultForeshadowing(section);\r\n      } catch (parseError) {\r\n        logger.error(",
                  "fullLength": 129,
                  "truncatedContent": ", { response });\r\n        return this.generateDefaultForeshadowing(section);\r\n      } catch (parseError) {\r\n        logger.error(",
                  "hash": "e8bc1594043af01ecdeb01cfb9b777ca",
                  "keywords": [
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "シーン",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "structure",
                  "theme",
                  "narrativePhase",
                  "section",
                  "chapterRange",
                  "start",
                  "end",
                  "JSON",
                  "element",
                  "plantingPoint"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": true
                }
              },
              "duplicateHash": "892777074cbbda29148b1644ce692bf0"
            },
            {
              "id": "call_73b771d0",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "fileName": "section-designer.ts",
              "lineNumber": 685,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 680,
                    "content": "}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 681,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 682,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 683,
                    "content": "// AIによる生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 684,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 685,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 686,
                    "content": ");",
                    "indent": 6
                  },
                  {
                    "lineNumber": 687,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 688,
                    "content": "// 応答をJSONとしてパース",
                    "indent": 6
                  },
                  {
                    "lineNumber": 689,
                    "content": "try {",
                    "indent": 6
                  },
                  {
                    "lineNumber": 690,
                    "content": "const emotionalDesign = JSON.parse(response);",
                    "indent": 8
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 628,
                  "distance": 57
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 164,
                  "truncatedContent": "\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "a32a1970ca9a13471e352bc513f5fb20",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 164,
                  "truncatedContent": "\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "a32a1970ca9a13471e352bc513f5fb20",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "description",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "シーン",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate",
                  "design"
                ],
                "complexity": "low",
                "dependencies": [
                  "conclusion",
                  "tensionPoints",
                  "relativePosition",
                  "intensity",
                  "description",
                  "catharticMoment",
                  "type",
                  "intellectual",
                  "readerEmotionalJourney",
                  "emotionalPayoff"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "892777074cbbda29148b1644ce692bf0"
            },
            {
              "id": "call_caf3f08f",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "fileName": "section-designer.ts",
              "lineNumber": 853,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 848,
                    "content": "}",
                    "indent": 0
                  },
                  {
                    "lineNumber": 849,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 850,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 851,
                    "content": "// AIによる生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 852,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 853,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 854,
                    "content": ");",
                    "indent": 6
                  },
                  {
                    "lineNumber": 855,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 856,
                    "content": "// 応答をJSONとしてパース",
                    "indent": 6
                  },
                  {
                    "lineNumber": 857,
                    "content": "try {",
                    "indent": 6
                  },
                  {
                    "lineNumber": 858,
                    "content": "const characterDesign = JSON.parse(response);",
                    "indent": 8
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 787,
                  "distance": 66
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": "\r\n    },\r\n    ...\r\n  }\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 186,
                  "truncatedContent": "\r\n    },\r\n    ...\r\n  }\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "64aa3dcf139eb30e40c669c4bbb9f1af",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "\r\n    },\r\n    ...\r\n  }\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 186,
                  "truncatedContent": "\r\n    },\r\n    ...\r\n  }\r\n}\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "64aa3dcf139eb30e40c669c4bbb9f1af",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                }
              ],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "character",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "シーン",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate",
                  "design"
                ],
                "complexity": "low",
                "dependencies": [
                  "haracters",
                  "startingDynamic",
                  "evolution",
                  "endDynamic",
                  "characterTransformations",
                  "startingState",
                  "internalObstacles",
                  "growthMoments",
                  "endState",
                  "const"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "892777074cbbda29148b1644ce692bf0"
            },
            {
              "id": "call_571cb420",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "fileName": "section-designer.ts",
              "lineNumber": 1005,
              "lineContent": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "matchedPattern": "\\.generateText\\s*\\(",
              "callMethod": "generateText",
              "fullMatch": ".generateText(",
              "context": {
                "before": [
                  {
                    "lineNumber": 1000,
                    "content": "]",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1001,
                    "content": "`;",
                    "indent": 0
                  },
                  {
                    "lineNumber": 1002,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 1003,
                    "content": "// AIによる生成を実行",
                    "indent": 6
                  },
                  {
                    "lineNumber": 1004,
                    "content": "const response = await apiThrottler.throttledRequest(() =>",
                    "indent": 6
                  }
                ],
                "current": {
                  "lineNumber": 1005,
                  "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
                  "indent": 8
                },
                "after": [
                  {
                    "lineNumber": 1006,
                    "content": ");",
                    "indent": 6
                  },
                  {
                    "lineNumber": 1007,
                    "content": "",
                    "indent": 1
                  },
                  {
                    "lineNumber": 1008,
                    "content": "// 応答をJSONとしてパース",
                    "indent": 6
                  },
                  {
                    "lineNumber": 1009,
                    "content": "try {",
                    "indent": 6
                  },
                  {
                    "lineNumber": 1010,
                    "content": "const outlines = JSON.parse(response);",
                    "indent": 8
                  }
                ],
                "functionContext": {
                  "functionName": "if",
                  "startLine": 949,
                  "distance": 56
                }
              },
              "prompts": [
                {
                  "type": "pattern_match",
                  "content": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
                  "fullLength": 524,
                  "truncatedContent": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
                  "hash": "9ad88852ab2e8247ad7a7a5355653f91",
                  "keywords": [
                    "生成",
                    "generate",
                    "chapter"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "]\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 178,
                  "truncatedContent": "]\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "7ab089a00dd657b54ec119e503cb22f7",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
                  "fullLength": 524,
                  "truncatedContent": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
                  "hash": "9ad88852ab2e8247ad7a7a5355653f91",
                  "keywords": [
                    "生成",
                    "generate",
                    "chapter"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "pattern_match",
                  "content": "]\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "fullLength": 178,
                  "truncatedContent": "]\r\n  },\r\n  ...\r\n]\r\n`;\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: ",
                  "hash": "7ab089a00dd657b54ec119e503cb22f7",
                  "keywords": [
                    "生成",
                    "generate"
                  ],
                  "sentiment": "neutral",
                  "complexity": "low",
                  "language": "english",
                  "novelElements": {
                    "genres": [],
                    "perspective": "third_person",
                    "tense": "present"
                  }
                },
                {
                  "type": "template_literal",
                  "content": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
                  "fullLength": 524,
                  "truncatedContent": ";\r\n\r\n      // AIによる生成を実行\r\n      const response = await apiThrottler.throttledRequest(() => \r\n        this.geminiClient.generateText(prompt, { responseFormat: \"json\" })\r\n      );\r\n\r\n      // 応答をJSONとしてパース\r\n      try {\r\n        const outlines = JSON.parse(response);\r\n        if (Array.isArray(outlines)) {\r\n          // チャプター番号の範囲を修正\r\n          const correctedOutlines = outlines.map((outline, index) => ({\r\n            ...outline,\r\n            chapterNumber: start + index\r\n          }));\r\n          \r\n          logger.info(",
                  "hash": "9ad88852ab2e8247ad7a7a5355653f91",
                  "hasVariables": false,
                  "variableCount": 0
                }
              ],
              "expectedOutputs": [
                {
                  "type": "json_expected",
                  "indicator": "JSON\\.parse\\s*\\(",
                  "confidence": "high"
                },
                {
                  "type": "novel_structure",
                  "element": "title",
                  "confidence": "medium"
                },
                {
                  "type": "novel_structure",
                  "element": "chapter",
                  "confidence": "medium"
                }
              ],
              "parameters": {},
              "novelSpecific": {
                "hasNovelKeywords": true,
                "detectedGenres": [
                  "SF"
                ],
                "storyElements": [
                  "プロット",
                  "シーン",
                  "plot",
                  "scene"
                ],
                "characterElements": [
                  "キャラクター",
                  "登場人物",
                  "主人公",
                  "character"
                ],
                "narrativeStyle": "unknown"
              },
              "semanticAnalysis": {
                "purposeIndicators": [
                  "生成",
                  "generate"
                ],
                "complexity": "low",
                "dependencies": [
                  "JSON",
                  "chapterNumber",
                  "title",
                  "summary",
                  "learningStage",
                  "EXPLORATION",
                  "emotionalTone",
                  "keyEvents",
                  "const",
                  "response"
                ],
                "outputUsage": {
                  "isAssigned": true,
                  "isAwaited": false,
                  "isChained": true,
                  "isLogged": false,
                  "isReturned": false
                }
              },
              "duplicateHash": "892777074cbbda29148b1644ce692bf0"
            }
          ],
          "count": 7,
          "severity": "high"
        }
      ],
      "promptDuplicates": [
        {
          "hash": "a9a1f3eae4e16a93d56d34f8764f874a",
          "calls": [
            {
              "callId": "call_6bca0ae0",
              "filePath": "src\\app\\api\\generation\\chapter\\route.ts",
              "lineNumber": 233,
              "method": "generateChapter",
              "promptType": "pattern_match",
              "promptLength": 162
            },
            {
              "callId": "call_6bca0ae0",
              "filePath": "src\\app\\api\\generation\\chapter\\route.ts",
              "lineNumber": 233,
              "method": "generateChapter",
              "promptType": "pattern_match",
              "promptLength": 162
            },
            {
              "callId": "call_6bca0ae0",
              "filePath": "src\\app\\api\\generation\\chapter\\route.ts",
              "lineNumber": 233,
              "method": "generateChapter",
              "promptType": "pattern_match",
              "promptLength": 162
            },
            {
              "callId": "call_6bca0ae0",
              "filePath": "src\\app\\api\\generation\\chapter\\route.ts",
              "lineNumber": 233,
              "method": "generateChapter",
              "promptType": "template_literal",
              "promptLength": 162
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "hash": "63f385cb2ccdb145ce205ed52789f6dd",
          "calls": [
            {
              "callId": "call_6bca0ae0",
              "filePath": "src\\app\\api\\generation\\chapter\\route.ts",
              "lineNumber": 233,
              "method": "generateChapter",
              "promptType": "pattern_match",
              "promptLength": 166
            },
            {
              "callId": "call_6bca0ae0",
              "filePath": "src\\app\\api\\generation\\chapter\\route.ts",
              "lineNumber": 233,
              "method": "generateChapter",
              "promptType": "template_literal",
              "promptLength": 166
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "300fc325f3312af882f7bab48b1652dd",
          "calls": [
            {
              "callId": "call_5eb04109",
              "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
              "lineNumber": 468,
              "method": "analyzeCharacter",
              "promptType": "pattern_match",
              "promptLength": 534
            },
            {
              "callId": "call_5eb04109",
              "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
              "lineNumber": 468,
              "method": "analyzeCharacter",
              "promptType": "pattern_match",
              "promptLength": 534
            },
            {
              "callId": "call_5eb04109",
              "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
              "lineNumber": 468,
              "method": "analyzeCharacter",
              "promptType": "pattern_match",
              "promptLength": 534
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "ffd209a1b61bdc731cfa06a0d4f7d6d3",
          "calls": [
            {
              "callId": "call_462fa399",
              "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
              "lineNumber": 708,
              "method": "analyzeCharacter",
              "promptType": "pattern_match",
              "promptLength": 155
            },
            {
              "callId": "call_462fa399",
              "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
              "lineNumber": 708,
              "method": "analyzeCharacter",
              "promptType": "pattern_match",
              "promptLength": 155
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "83dc398d95182367b4826994499a6224",
          "calls": [
            {
              "callId": "call_462fa399",
              "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
              "lineNumber": 708,
              "method": "analyzeCharacter",
              "promptType": "pattern_match",
              "promptLength": 203
            },
            {
              "callId": "call_462fa399",
              "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
              "lineNumber": 708,
              "method": "analyzeCharacter",
              "promptType": "pattern_match",
              "promptLength": 203
            },
            {
              "callId": "call_462fa399",
              "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
              "lineNumber": 708,
              "method": "analyzeCharacter",
              "promptType": "pattern_match",
              "promptLength": 203
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "3231e0c6916fe75790dc783a2e1b8b35",
          "calls": [
            {
              "callId": "call_1948d757",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 761
            },
            {
              "callId": "call_1948d757",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 761
            },
            {
              "callId": "call_1948d757",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 761
            },
            {
              "callId": "call_1948d757",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 761
            },
            {
              "callId": "call_1948d757",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 761
            },
            {
              "callId": "call_1948d757",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 761
            },
            {
              "callId": "call_580712e8",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 761
            },
            {
              "callId": "call_580712e8",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 761
            },
            {
              "callId": "call_580712e8",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 761
            }
          ],
          "count": 9,
          "severity": "high"
        },
        {
          "hash": "1fb0292de1d0158a628ab39a27644d03",
          "calls": [
            {
              "callId": "call_1948d757",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 267
            },
            {
              "callId": "call_1948d757",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 267
            },
            {
              "callId": "call_580712e8",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 267
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "576e7d84ea2592c66dbf82ee784f8a60",
          "calls": [
            {
              "callId": "call_1c9a2ed2",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 689,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 29
            },
            {
              "callId": "call_1c9a2ed2",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 689,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 29
            },
            {
              "callId": "call_874c5434",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 689,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 29
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "ed094c0116a864caf1639c6fd61d9a1c",
          "calls": [
            {
              "callId": "call_3ab7176e",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 716,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 30
            },
            {
              "callId": "call_3ab7176e",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 716,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 30
            },
            {
              "callId": "call_5ef55a3b",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 716,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 30
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "4cbbecf723eae2c9ef64c0e39f398284",
          "calls": [
            {
              "callId": "call_18183c83",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 750,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 32
            },
            {
              "callId": "call_18183c83",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 750,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 32
            },
            {
              "callId": "call_1ba6677b",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 750,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 32
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "09891be9e88f0f4c1f5aef50b686bf0d",
          "calls": [
            {
              "callId": "call_77847414",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "lineNumber": 529,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 23
            },
            {
              "callId": "call_7ab19737",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "lineNumber": 529,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 23
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "9c856847a97833ecaa73ea416401d96e",
          "calls": [
            {
              "callId": "call_c02c53f9",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "lineNumber": 719,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 485
            },
            {
              "callId": "call_c02c53f9",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "lineNumber": 719,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 485
            },
            {
              "callId": "call_7376c0dd",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "lineNumber": 719,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 485
            },
            {
              "callId": "call_7376c0dd",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "lineNumber": 719,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 485
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "hash": "d514105e915bea901c4adcab8e730324",
          "calls": [
            {
              "callId": "call_e3499eaa",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "lineNumber": 145,
              "method": "analyzeStyle",
              "promptType": "pattern_match",
              "promptLength": 54
            },
            {
              "callId": "call_e3499eaa",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "lineNumber": 145,
              "method": "analyzeStyle",
              "promptType": "pattern_match",
              "promptLength": 54
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "21db59c7003619a326b9f42bf8560435",
          "calls": [
            {
              "callId": "call_1f3e5a77",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 881,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 720
            },
            {
              "callId": "call_1f3e5a77",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 881,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 720
            },
            {
              "callId": "call_1f3e5a77",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 881,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 720
            },
            {
              "callId": "call_3e476d9e",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 881,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 720
            },
            {
              "callId": "call_3e476d9e",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 881,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 720
            },
            {
              "callId": "call_3e476d9e",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 881,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 720
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "hash": "dd804c933880feb272e0698b858f21f4",
          "calls": [
            {
              "callId": "call_1f3e5a77",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 881,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 224
            },
            {
              "callId": "call_3e476d9e",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 881,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 224
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "fda6797ca4ee2b1b1e32581a022a178d",
          "calls": [
            {
              "callId": "call_9d90ac6a",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 264,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 457
            },
            {
              "callId": "call_9b3d30c4",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 264,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 457
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "fab657ba7d641c9ae422fa6998465b8f",
          "calls": [
            {
              "callId": "call_f85b10f3",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 342,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 39
            },
            {
              "callId": "call_ef390022",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 342,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 39
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "c576709f7b4c4141bbb970b83dc56a5f",
          "calls": [
            {
              "callId": "call_47799132",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 401,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 40
            },
            {
              "callId": "call_8c4a1ae8",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 401,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 40
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "573a5da98ca232f0ca2caf45e97a9ebb",
          "calls": [
            {
              "callId": "call_222993c5",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 464,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 39
            },
            {
              "callId": "call_e73439f8",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 464,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 39
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "6e7fdf93795824a03f557aca129aeaa6",
          "calls": [
            {
              "callId": "call_73ca6c9a",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 511,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 150
            },
            {
              "callId": "call_73ca6c9a",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 511,
              "method": "generateText",
              "promptType": "variable_assignment",
              "promptLength": 150
            },
            {
              "callId": "call_cb07f524",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 511,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 150
            },
            {
              "callId": "call_cb07f524",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 511,
              "method": "generateText",
              "promptType": "variable_assignment",
              "promptLength": 150
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "hash": "aafe42113775e5b5cfb322f4b02038ae",
          "calls": [
            {
              "callId": "call_73ca6c9a",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 511,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 182
            },
            {
              "callId": "call_73ca6c9a",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 511,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 182
            },
            {
              "callId": "call_cb07f524",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 511,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 182
            },
            {
              "callId": "call_cb07f524",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 511,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 182
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "hash": "75ef48161f3b26651494cb75e153ebf9",
          "calls": [
            {
              "callId": "call_73ca6c9a",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 511,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 421
            },
            {
              "callId": "call_73ca6c9a",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 511,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 421
            },
            {
              "callId": "call_cb07f524",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 511,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 421
            },
            {
              "callId": "call_cb07f524",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 511,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 421
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "hash": "a0bc1771193a38f54fc3a20d79cf63f7",
          "calls": [
            {
              "callId": "call_4ad1c568",
              "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
              "lineNumber": 218,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 21
            },
            {
              "callId": "call_4ad1c568",
              "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
              "lineNumber": 218,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 21
            },
            {
              "callId": "call_fbfd72f9",
              "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
              "lineNumber": 218,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 21
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "930f774d0f29d9500d67bcea6c3f198c",
          "calls": [
            {
              "callId": "call_4ad1c568",
              "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
              "lineNumber": 218,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 290
            },
            {
              "callId": "call_4ad1c568",
              "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
              "lineNumber": 218,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 290
            },
            {
              "callId": "call_4ad1c568",
              "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
              "lineNumber": 218,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 290
            },
            {
              "callId": "call_4ad1c568",
              "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
              "lineNumber": 218,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 290
            },
            {
              "callId": "call_fbfd72f9",
              "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
              "lineNumber": 218,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 290
            },
            {
              "callId": "call_fbfd72f9",
              "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
              "lineNumber": 218,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 290
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "hash": "e5308eae8a37807f36a1ec49e852dc69",
          "calls": [
            {
              "callId": "call_1ed727cf",
              "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
              "lineNumber": 452,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 602
            },
            {
              "callId": "call_1ed727cf",
              "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
              "lineNumber": 452,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 602
            },
            {
              "callId": "call_1ed727cf",
              "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
              "lineNumber": 452,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 602
            },
            {
              "callId": "call_1ed727cf",
              "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
              "lineNumber": 452,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 602
            },
            {
              "callId": "call_1ed727cf",
              "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
              "lineNumber": 452,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 602
            },
            {
              "callId": "call_1ed727cf",
              "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
              "lineNumber": 452,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 602
            },
            {
              "callId": "call_1ed727cf",
              "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
              "lineNumber": 452,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 602
            },
            {
              "callId": "call_1ed727cf",
              "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
              "lineNumber": 452,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 602
            },
            {
              "callId": "call_3cd296f3",
              "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
              "lineNumber": 452,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 602
            },
            {
              "callId": "call_3cd296f3",
              "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
              "lineNumber": 452,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 602
            },
            {
              "callId": "call_3cd296f3",
              "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
              "lineNumber": 452,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 602
            },
            {
              "callId": "call_3cd296f3",
              "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
              "lineNumber": 452,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 602
            }
          ],
          "count": 12,
          "severity": "high"
        },
        {
          "hash": "b394f40a5a372fa8e323aa1b93117160",
          "calls": [
            {
              "callId": "call_21d614e0",
              "filePath": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
              "lineNumber": 103,
              "method": "analyzeStyle",
              "promptType": "pattern_match",
              "promptLength": 622
            },
            {
              "callId": "call_21d614e0",
              "filePath": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
              "lineNumber": 103,
              "method": "analyzeStyle",
              "promptType": "pattern_match",
              "promptLength": 622
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "e27823414367e0be89ef5c93a35732c0",
          "calls": [
            {
              "callId": "call_d3d90909",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 167,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 34
            },
            {
              "callId": "call_b39b77f9",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 167,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 34
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "554a7647bf34167b4903891809a8a825",
          "calls": [
            {
              "callId": "call_d3d90909",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 167,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 167
            },
            {
              "callId": "call_b39b77f9",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 167,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 167
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "c5236be0e3ae42c31728fbd1ed9016d6",
          "calls": [
            {
              "callId": "call_d3d90909",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 167,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 339
            },
            {
              "callId": "call_d3d90909",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 167,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 339
            },
            {
              "callId": "call_b39b77f9",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 167,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 339
            },
            {
              "callId": "call_b39b77f9",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 167,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 339
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "hash": "43a02fe6456194b1ca8a988066390ec8",
          "calls": [
            {
              "callId": "call_2d6b1ee3",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 395,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 356
            },
            {
              "callId": "call_2d6b1ee3",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 395,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 356
            },
            {
              "callId": "call_c3189908",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 395,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 356
            },
            {
              "callId": "call_c3189908",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 395,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 356
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "hash": "ef22b68a1f51ab155d2f99657097a80f",
          "calls": [
            {
              "callId": "call_5a61e7e9",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 461,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 800
            },
            {
              "callId": "call_5a61e7e9",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 461,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 800
            },
            {
              "callId": "call_5a61e7e9",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 461,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 800
            },
            {
              "callId": "call_42f50d23",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 461,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 800
            },
            {
              "callId": "call_42f50d23",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 461,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 800
            },
            {
              "callId": "call_42f50d23",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 461,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 800
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "hash": "6f3ccd1c16eebc632740157240b19317",
          "calls": [
            {
              "callId": "call_5a61e7e9",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 461,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 423
            },
            {
              "callId": "call_5a61e7e9",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 461,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 423
            },
            {
              "callId": "call_42f50d23",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 461,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 423
            },
            {
              "callId": "call_42f50d23",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 461,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 423
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "hash": "2727056cf7d5382743614bae02580053",
          "calls": [
            {
              "callId": "call_acc16f7d",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 602,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 325
            },
            {
              "callId": "call_acc16f7d",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 602,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 325
            },
            {
              "callId": "call_7a25db3c",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 602,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 325
            },
            {
              "callId": "call_7a25db3c",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 602,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 325
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "hash": "75dd7695a92333e45262edde4ac99fdc",
          "calls": [
            {
              "callId": "call_cd18ed56",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 688,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 616
            },
            {
              "callId": "call_cd18ed56",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 688,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 616
            },
            {
              "callId": "call_cd18ed56",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 688,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 616
            },
            {
              "callId": "call_cd18ed56",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 688,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 616
            },
            {
              "callId": "call_afc20166",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 688,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 616
            },
            {
              "callId": "call_afc20166",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 688,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 616
            },
            {
              "callId": "call_afc20166",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 688,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 616
            },
            {
              "callId": "call_afc20166",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 688,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 616
            }
          ],
          "count": 8,
          "severity": "high"
        },
        {
          "hash": "deb5472f1a9d7405a2c0c73e0d545f91",
          "calls": [
            {
              "callId": "call_cd18ed56",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 688,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 24
            },
            {
              "callId": "call_cd18ed56",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 688,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 24
            },
            {
              "callId": "call_306575ca",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 710,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 24
            },
            {
              "callId": "call_306575ca",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 710,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 24
            },
            {
              "callId": "call_afc20166",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 688,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 24
            },
            {
              "callId": "call_afc20166",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 688,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 24
            },
            {
              "callId": "call_55a9819f",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 710,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 24
            },
            {
              "callId": "call_55a9819f",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 710,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 24
            }
          ],
          "count": 8,
          "severity": "high"
        },
        {
          "hash": "72b5cd502e3f79595c8575c2d3cd8219",
          "calls": [
            {
              "callId": "call_cd18ed56",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 688,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 141
            },
            {
              "callId": "call_306575ca",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 710,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 141
            },
            {
              "callId": "call_afc20166",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 688,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 141
            },
            {
              "callId": "call_55a9819f",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 710,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 141
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "hash": "26937f9076a0051a8e17e8c940611146",
          "calls": [
            {
              "callId": "call_306575ca",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 710,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 27
            },
            {
              "callId": "call_306575ca",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 710,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 27
            },
            {
              "callId": "call_55a9819f",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 710,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 27
            },
            {
              "callId": "call_55a9819f",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 710,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 27
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "hash": "42edc094e90efc52b3a177e12866c3c6",
          "calls": [
            {
              "callId": "call_306575ca",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 710,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 745
            },
            {
              "callId": "call_306575ca",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 710,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 745
            },
            {
              "callId": "call_55a9819f",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 710,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 745
            },
            {
              "callId": "call_55a9819f",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 710,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 745
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "hash": "81bee7338a6e5e923a87060bd8da3967",
          "calls": [
            {
              "callId": "call_5b244c9b",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 1811,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 285
            },
            {
              "callId": "call_5b244c9b",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 1811,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 285
            },
            {
              "callId": "call_40f41ebd",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 1811,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 285
            },
            {
              "callId": "call_40f41ebd",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 1811,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 285
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "hash": "4c479f26b700baffa5dbb20d8eece1cc",
          "calls": [
            {
              "callId": "call_071f4b24",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 1897,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 339
            },
            {
              "callId": "call_071f4b24",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 1897,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 339
            },
            {
              "callId": "call_3e4b2368",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 1897,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 339
            },
            {
              "callId": "call_3e4b2368",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 1897,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 339
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "hash": "b67330adc59c5fcff7a760c2389c2846",
          "calls": [
            {
              "callId": "call_626a1c0b",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2064,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 188
            },
            {
              "callId": "call_626a1c0b",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2064,
              "method": "generateText",
              "promptType": "variable_assignment",
              "promptLength": 188
            },
            {
              "callId": "call_ad65bc8f",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2064,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 188
            },
            {
              "callId": "call_ad65bc8f",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2064,
              "method": "generateText",
              "promptType": "variable_assignment",
              "promptLength": 188
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "hash": "7b36d498cdd2e99417364ed49e25928a",
          "calls": [
            {
              "callId": "call_626a1c0b",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2064,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 208
            },
            {
              "callId": "call_626a1c0b",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2064,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 208
            },
            {
              "callId": "call_ad65bc8f",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2064,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 208
            },
            {
              "callId": "call_ad65bc8f",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2064,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 208
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "hash": "97c042a0b0902e0cab4586eedb427157",
          "calls": [
            {
              "callId": "call_626a1c0b",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2064,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 420
            },
            {
              "callId": "call_626a1c0b",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2064,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 420
            },
            {
              "callId": "call_ad65bc8f",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2064,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 420
            },
            {
              "callId": "call_ad65bc8f",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2064,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 420
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "hash": "a19bf41d782f7114f41c427f466c74d4",
          "calls": [
            {
              "callId": "call_626a1c0b",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2064,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 21
            },
            {
              "callId": "call_ad65bc8f",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2064,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 21
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "8191ddf8818eca5295c5f8ddad5824b3",
          "calls": [
            {
              "callId": "call_7e6621ef",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2139,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 418
            },
            {
              "callId": "call_7e6621ef",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2139,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 418
            },
            {
              "callId": "call_7e6621ef",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2139,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 418
            },
            {
              "callId": "call_360a38f7",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2139,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 418
            },
            {
              "callId": "call_360a38f7",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2139,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 418
            },
            {
              "callId": "call_360a38f7",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2139,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 418
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "hash": "44ec635cb5448df680605a977024e911",
          "calls": [
            {
              "callId": "call_cdcdc465",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2336,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 441
            },
            {
              "callId": "call_cdcdc465",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2336,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 441
            },
            {
              "callId": "call_8f565bb1",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2336,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 441
            },
            {
              "callId": "call_8f565bb1",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2336,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 441
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "hash": "d1d7988625bba11513ebc0033cbac362",
          "calls": [
            {
              "callId": "call_cdcdc465",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2336,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 309
            },
            {
              "callId": "call_8f565bb1",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2336,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 309
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "345a3584e94692d8689acfaf5e7a3cb3",
          "calls": [
            {
              "callId": "call_1f7dcda5",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 316,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 37
            },
            {
              "callId": "call_1f7dcda5",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 316,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 37
            },
            {
              "callId": "call_d8b4231a",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 316,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 37
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "9a754dbb57e1a81d0780117331ddd019",
          "calls": [
            {
              "callId": "call_1f7dcda5",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 316,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 401
            },
            {
              "callId": "call_1f7dcda5",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 316,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 401
            },
            {
              "callId": "call_1f7dcda5",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 316,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 401
            },
            {
              "callId": "call_1f7dcda5",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 316,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 401
            },
            {
              "callId": "call_d8b4231a",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 316,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 401
            },
            {
              "callId": "call_d8b4231a",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 316,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 401
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "hash": "b63754088aa27046ac7fe81819d0a02d",
          "calls": [
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 127
            },
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 127
            },
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 127
            },
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 127
            },
            {
              "callId": "call_2101b18c",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 127
            },
            {
              "callId": "call_2101b18c",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 127
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "hash": "6ce0e953f2314c1e57fda79296ec5c0a",
          "calls": [
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 65
            },
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 65
            },
            {
              "callId": "call_2101b18c",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 65
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "1db2ec83855afc276d100a57e5656189",
          "calls": [
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 43
            },
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 43
            },
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 43
            },
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 43
            },
            {
              "callId": "call_2101b18c",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 43
            },
            {
              "callId": "call_2101b18c",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 43
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "hash": "6fb6f1dee79b23241996a3b9ee204c6d",
          "calls": [
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 61
            },
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 61
            },
            {
              "callId": "call_2101b18c",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 61
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "6f6d9f42f5fa64a446d4a3c4ce8a2ae1",
          "calls": [
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 308
            },
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 308
            },
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 308
            },
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 308
            },
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 308
            },
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 308
            },
            {
              "callId": "call_2101b18c",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 308
            },
            {
              "callId": "call_2101b18c",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 308
            },
            {
              "callId": "call_2101b18c",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 308
            }
          ],
          "count": 9,
          "severity": "high"
        },
        {
          "hash": "90e13dbbe207daa122a29f6343cd8e6c",
          "calls": [
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 330
            },
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 330
            },
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 330
            },
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 330
            },
            {
              "callId": "call_2101b18c",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 330
            },
            {
              "callId": "call_2101b18c",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 330
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "hash": "54d2bd2eafec3617eade2e3e3f976f7f",
          "calls": [
            {
              "callId": "call_3cf732e2",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 445,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 432
            },
            {
              "callId": "call_3cf732e2",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 445,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 432
            },
            {
              "callId": "call_3cf732e2",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 445,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 432
            },
            {
              "callId": "call_3cf732e2",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 445,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 432
            },
            {
              "callId": "call_3cf732e2",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 445,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 432
            },
            {
              "callId": "call_3cf732e2",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 445,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 432
            },
            {
              "callId": "call_3cf732e2",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 445,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 432
            },
            {
              "callId": "call_3cf732e2",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 445,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 432
            },
            {
              "callId": "call_47a728bd",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 445,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 432
            },
            {
              "callId": "call_47a728bd",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 445,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 432
            },
            {
              "callId": "call_47a728bd",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 445,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 432
            },
            {
              "callId": "call_47a728bd",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 445,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 432
            }
          ],
          "count": 12,
          "severity": "high"
        },
        {
          "hash": "0fbc4586b86a373e88cf3b8b1e7d3ef7",
          "calls": [
            {
              "callId": "call_3cf732e2",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 445,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 260
            },
            {
              "callId": "call_3cf732e2",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 445,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 260
            },
            {
              "callId": "call_47a728bd",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 445,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 260
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "c4152b1ab5abef6d566d2f29f6f57b31",
          "calls": [
            {
              "callId": "call_60439f63",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 626,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 541
            },
            {
              "callId": "call_60439f63",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 626,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 541
            },
            {
              "callId": "call_fd3f8227",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 626,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 541
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "1f993291c1f9fbb1f7930b0a9ba84734",
          "calls": [
            {
              "callId": "call_239288c0",
              "filePath": "src\\lib\\characters\\manager.ts",
              "lineNumber": 463,
              "method": "analyzeCharacter",
              "promptType": "pattern_match",
              "promptLength": 470
            },
            {
              "callId": "call_239288c0",
              "filePath": "src\\lib\\characters\\manager.ts",
              "lineNumber": 463,
              "method": "analyzeCharacter",
              "promptType": "pattern_match",
              "promptLength": 470
            },
            {
              "callId": "call_239288c0",
              "filePath": "src\\lib\\characters\\manager.ts",
              "lineNumber": 463,
              "method": "analyzeCharacter",
              "promptType": "pattern_match",
              "promptLength": 470
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "e24c81817910e0cdf8b1481a16febc8a",
          "calls": [
            {
              "callId": "call_3b4a4711",
              "filePath": "src\\lib\\characters\\utils\\character-utils.ts",
              "lineNumber": 159,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 158
            },
            {
              "callId": "call_3b4a4711",
              "filePath": "src\\lib\\characters\\utils\\character-utils.ts",
              "lineNumber": 159,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 158
            },
            {
              "callId": "call_3b4a4711",
              "filePath": "src\\lib\\characters\\utils\\character-utils.ts",
              "lineNumber": 159,
              "method": "generateText",
              "promptType": "variable_assignment",
              "promptLength": 158
            },
            {
              "callId": "call_3b4a4711",
              "filePath": "src\\lib\\characters\\utils\\character-utils.ts",
              "lineNumber": 159,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 158
            },
            {
              "callId": "call_3b4a4711",
              "filePath": "src\\lib\\characters\\utils\\character-utils.ts",
              "lineNumber": 159,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 158
            },
            {
              "callId": "call_3b4a4711",
              "filePath": "src\\lib\\characters\\utils\\character-utils.ts",
              "lineNumber": 159,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 158
            },
            {
              "callId": "call_3b4a4711",
              "filePath": "src\\lib\\characters\\utils\\character-utils.ts",
              "lineNumber": 159,
              "method": "generateText",
              "promptType": "variable_assignment",
              "promptLength": 158
            },
            {
              "callId": "call_3b4a4711",
              "filePath": "src\\lib\\characters\\utils\\character-utils.ts",
              "lineNumber": 159,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 158
            },
            {
              "callId": "call_0c1dd664",
              "filePath": "src\\lib\\characters\\utils\\character-utils.ts",
              "lineNumber": 159,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 158
            },
            {
              "callId": "call_0c1dd664",
              "filePath": "src\\lib\\characters\\utils\\character-utils.ts",
              "lineNumber": 159,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 158
            },
            {
              "callId": "call_0c1dd664",
              "filePath": "src\\lib\\characters\\utils\\character-utils.ts",
              "lineNumber": 159,
              "method": "generateText",
              "promptType": "variable_assignment",
              "promptLength": 158
            },
            {
              "callId": "call_0c1dd664",
              "filePath": "src\\lib\\characters\\utils\\character-utils.ts",
              "lineNumber": 159,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 158
            }
          ],
          "count": 12,
          "severity": "high"
        },
        {
          "hash": "9e9326d25764b198ce6204dc1b3f5802",
          "calls": [
            {
              "callId": "call_b27aa071",
              "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
              "lineNumber": 183,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 181
            },
            {
              "callId": "call_b27aa071",
              "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
              "lineNumber": 183,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 181
            },
            {
              "callId": "call_bf02a47e",
              "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
              "lineNumber": 183,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 181
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "2a0c82bb81e19d3194f56e9a34c29bb9",
          "calls": [
            {
              "callId": "call_0e0ffa92",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "lineNumber": 379,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 58
            },
            {
              "callId": "call_0e0ffa92",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "lineNumber": 379,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 58
            },
            {
              "callId": "call_6d2bdcd3",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "lineNumber": 379,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 58
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "2d4b2a57bab23204abc2498362f720bb",
          "calls": [
            {
              "callId": "call_aea0563d",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "lineNumber": 408,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 996
            },
            {
              "callId": "call_aea0563d",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "lineNumber": 408,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 996
            },
            {
              "callId": "call_aea0563d",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "lineNumber": 408,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 996
            },
            {
              "callId": "call_aea0563d",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "lineNumber": 408,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 996
            },
            {
              "callId": "call_7b8b64d8",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "lineNumber": 408,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 996
            },
            {
              "callId": "call_7b8b64d8",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "lineNumber": 408,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 996
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "hash": "1a1c874b4efe1d178ab108d0376de6c7",
          "calls": [
            {
              "callId": "call_869cbbc6",
              "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
              "lineNumber": 357,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 238
            },
            {
              "callId": "call_869cbbc6",
              "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
              "lineNumber": 357,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 238
            },
            {
              "callId": "call_869cbbc6",
              "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
              "lineNumber": 357,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 238
            },
            {
              "callId": "call_869cbbc6",
              "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
              "lineNumber": 357,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 238
            },
            {
              "callId": "call_ca2cf1b3",
              "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
              "lineNumber": 357,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 238
            },
            {
              "callId": "call_ca2cf1b3",
              "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
              "lineNumber": 357,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 238
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "hash": "417dd5e58d9696d9511a72c5f49cbb36",
          "calls": [
            {
              "callId": "call_f992fda8",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 195,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 89
            },
            {
              "callId": "call_443277df",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 198,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 89
            },
            {
              "callId": "call_f992fda8",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 195,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 89
            },
            {
              "callId": "call_443277df",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 198,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 89
            },
            {
              "callId": "call_391bd0db",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 195,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 89
            },
            {
              "callId": "call_1896b4ce",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 198,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 89
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "hash": "2407410c182cce36c54fe1e61b6e5316",
          "calls": [
            {
              "callId": "call_3ec4ba81",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 716,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 111
            },
            {
              "callId": "call_bd38df0d",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 716,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 111
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "d9ad9e8d96aa13df85cea2bfecf42608",
          "calls": [
            {
              "callId": "call_3ec4ba81",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 716,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 256
            },
            {
              "callId": "call_3ec4ba81",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 716,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 256
            },
            {
              "callId": "call_d45808e8",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 726,
              "method": "generateStory",
              "promptType": "pattern_match",
              "promptLength": 256
            },
            {
              "callId": "call_d45808e8",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 726,
              "method": "generateStory",
              "promptType": "pattern_match",
              "promptLength": 256
            },
            {
              "callId": "call_bd38df0d",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 716,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 256
            },
            {
              "callId": "call_bd38df0d",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 716,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 256
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "hash": "46937153a92ae7eac53283b670579b91",
          "calls": [
            {
              "callId": "call_3ec4ba81",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 716,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 305
            },
            {
              "callId": "call_d45808e8",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 726,
              "method": "generateStory",
              "promptType": "pattern_match",
              "promptLength": 305
            },
            {
              "callId": "call_bd38df0d",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 716,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 305
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "7bd27ef9fb21e483c18cc21a8f9b5dfc",
          "calls": [
            {
              "callId": "call_0e05a2a9",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 746,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 24
            },
            {
              "callId": "call_0e05a2a9",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 746,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 24
            },
            {
              "callId": "call_415d8574",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 746,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 24
            },
            {
              "callId": "call_415d8574",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 746,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 24
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "hash": "9ccc9b36e878603f041ff3d70140458a",
          "calls": [
            {
              "callId": "call_0e05a2a9",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 746,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 267
            },
            {
              "callId": "call_415d8574",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 746,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 267
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "b53b5bbab07b13dfb05f16d375526bd4",
          "calls": [
            {
              "callId": "call_0e05a2a9",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 746,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 173
            },
            {
              "callId": "call_415d8574",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 746,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 173
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "ed9bbbf3c1c015303c5c92509110ece0",
          "calls": [
            {
              "callId": "call_96b72f47",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 407,
              "method": "generateContent",
              "promptType": "pattern_match",
              "promptLength": 427
            },
            {
              "callId": "call_94e6ee35",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 407,
              "method": "generateContent",
              "promptType": "pattern_match",
              "promptLength": 427
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "f0cd485865f5084265f6df960eef4a36",
          "calls": [
            {
              "callId": "call_96b72f47",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 407,
              "method": "generateContent",
              "promptType": "pattern_match",
              "promptLength": 282
            },
            {
              "callId": "call_96b72f47",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 407,
              "method": "generateContent",
              "promptType": "template_literal",
              "promptLength": 282
            },
            {
              "callId": "call_94e6ee35",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 407,
              "method": "generateContent",
              "promptType": "pattern_match",
              "promptLength": 282
            },
            {
              "callId": "call_94e6ee35",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 407,
              "method": "generateContent",
              "promptType": "template_literal",
              "promptLength": 282
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "hash": "2c80ccbe645231d815d8ce367ee8fd94",
          "calls": [
            {
              "callId": "call_1d0290a3",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 493,
              "method": "generateContent",
              "promptType": "pattern_match",
              "promptLength": 176
            },
            {
              "callId": "call_d5f26128",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 493,
              "method": "generateContent",
              "promptType": "pattern_match",
              "promptLength": 176
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "0d8f8db19630926c92814c641827a449",
          "calls": [
            {
              "callId": "call_d45808e8",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 726,
              "method": "generateStory",
              "promptType": "pattern_match",
              "promptLength": 298
            },
            {
              "callId": "call_d45808e8",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 726,
              "method": "generateStory",
              "promptType": "pattern_match",
              "promptLength": 298
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "93abc9ec46228a9b59b9ad457fc7da7c",
          "calls": [
            {
              "callId": "call_ca729a9d",
              "filePath": "src\\lib\\learning-journey\\context-manager.ts",
              "lineNumber": 470,
              "method": "generateSummary",
              "promptType": "pattern_match",
              "promptLength": 38
            },
            {
              "callId": "call_796b89ed",
              "filePath": "src\\lib\\learning-journey\\context-manager.ts",
              "lineNumber": 515,
              "method": "generateSummary",
              "promptType": "pattern_match",
              "promptLength": 38
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "ff7fcbef3937974af01bf8e56868051d",
          "calls": [
            {
              "callId": "call_63625169",
              "filePath": "src\\lib\\learning-journey\\context-manager.ts",
              "lineNumber": 908,
              "method": "generateSummary",
              "promptType": "pattern_match",
              "promptLength": 683
            },
            {
              "callId": "call_63625169",
              "filePath": "src\\lib\\learning-journey\\context-manager.ts",
              "lineNumber": 908,
              "method": "generateSummary",
              "promptType": "pattern_match",
              "promptLength": 683
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "29bfbf43a664ccaa9ad0365f4595b24d",
          "calls": [
            {
              "callId": "call_e0637847",
              "filePath": "src\\lib\\learning-journey\\context-manager.ts",
              "lineNumber": 1423,
              "method": "generateSummary",
              "promptType": "pattern_match",
              "promptLength": 348
            },
            {
              "callId": "call_e0637847",
              "filePath": "src\\lib\\learning-journey\\context-manager.ts",
              "lineNumber": 1423,
              "method": "generateSummary",
              "promptType": "pattern_match",
              "promptLength": 348
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "d65e54c92acae5c134de92df18a5620d",
          "calls": [
            {
              "callId": "call_a225d13e",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "lineNumber": 1030,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 304
            },
            {
              "callId": "call_a225d13e",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "lineNumber": 1030,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 304
            },
            {
              "callId": "call_a225d13e",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "lineNumber": 1030,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 304
            },
            {
              "callId": "call_a225d13e",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "lineNumber": 1030,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 304
            },
            {
              "callId": "call_e0f3f264",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "lineNumber": 1028,
              "method": "executeAIAnalysis",
              "promptType": "pattern_match",
              "promptLength": 304
            },
            {
              "callId": "call_e0f3f264",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "lineNumber": 1028,
              "method": "executeAIAnalysis",
              "promptType": "pattern_match",
              "promptLength": 304
            },
            {
              "callId": "call_40dce312",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "lineNumber": 1030,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 304
            },
            {
              "callId": "call_40dce312",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "lineNumber": 1030,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 304
            }
          ],
          "count": 8,
          "severity": "high"
        },
        {
          "hash": "a61f37b1071ad776cd353d7c060ff8e1",
          "calls": [
            {
              "callId": "call_43a85937",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "lineNumber": 461,
              "method": "executeAIAnalysis",
              "promptType": "pattern_match",
              "promptLength": 833
            },
            {
              "callId": "call_43a85937",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "lineNumber": 461,
              "method": "executeAIAnalysis",
              "promptType": "pattern_match",
              "promptLength": 833
            },
            {
              "callId": "call_43a85937",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "lineNumber": 461,
              "method": "executeAIAnalysis",
              "promptType": "pattern_match",
              "promptLength": 833
            },
            {
              "callId": "call_43a85937",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "lineNumber": 461,
              "method": "executeAIAnalysis",
              "promptType": "template_literal",
              "promptLength": 833
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "hash": "c67e2b17fa18011cda0157c8199a9f12",
          "calls": [
            {
              "callId": "call_75df9e80",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "lineNumber": 1225,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 107
            },
            {
              "callId": "call_75df9e80",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "lineNumber": 1225,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 107
            },
            {
              "callId": "call_75df9e80",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "lineNumber": 1225,
              "method": "generateText",
              "promptType": "variable_assignment",
              "promptLength": 107
            },
            {
              "callId": "call_75df9e80",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "lineNumber": 1225,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 107
            },
            {
              "callId": "call_75df9e80",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "lineNumber": 1225,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 107
            },
            {
              "callId": "call_75df9e80",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "lineNumber": 1225,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 107
            },
            {
              "callId": "call_75df9e80",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "lineNumber": 1225,
              "method": "generateText",
              "promptType": "variable_assignment",
              "promptLength": 107
            },
            {
              "callId": "call_75df9e80",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "lineNumber": 1225,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 107
            },
            {
              "callId": "call_edef0302",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "lineNumber": 1225,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 107
            },
            {
              "callId": "call_edef0302",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "lineNumber": 1225,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 107
            },
            {
              "callId": "call_edef0302",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "lineNumber": 1225,
              "method": "generateText",
              "promptType": "variable_assignment",
              "promptLength": 107
            },
            {
              "callId": "call_edef0302",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "lineNumber": 1225,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 107
            }
          ],
          "count": 12,
          "severity": "high"
        },
        {
          "hash": "a4afa55c252c54b71a25a4a5a4c07743",
          "calls": [
            {
              "callId": "call_75df9e80",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "lineNumber": 1225,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 414
            },
            {
              "callId": "call_75df9e80",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "lineNumber": 1225,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 414
            },
            {
              "callId": "call_75df9e80",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "lineNumber": 1225,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 414
            },
            {
              "callId": "call_75df9e80",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "lineNumber": 1225,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 414
            },
            {
              "callId": "call_edef0302",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "lineNumber": 1225,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 414
            },
            {
              "callId": "call_edef0302",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "lineNumber": 1225,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 414
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "hash": "b257710dda61b24e95486444819036c6",
          "calls": [
            {
              "callId": "call_d18c12a2",
              "filePath": "src\\lib\\plot\\checker.ts",
              "lineNumber": 768,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 606
            },
            {
              "callId": "call_d18c12a2",
              "filePath": "src\\lib\\plot\\checker.ts",
              "lineNumber": 768,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 606
            },
            {
              "callId": "call_b525b719",
              "filePath": "src\\lib\\plot\\checker.ts",
              "lineNumber": 768,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 606
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "1798dd15179209a5b6027c9c25fd2460",
          "calls": [
            {
              "callId": "call_798d91ff",
              "filePath": "src\\lib\\plot\\section\\index.ts",
              "lineNumber": 397,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 146
            },
            {
              "callId": "call_798d91ff",
              "filePath": "src\\lib\\plot\\section\\index.ts",
              "lineNumber": 397,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 146
            },
            {
              "callId": "call_25985289",
              "filePath": "src\\lib\\plot\\section\\index.ts",
              "lineNumber": 397,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 146
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "2929b8486fcf2321b6354ce111e12af9",
          "calls": [
            {
              "callId": "call_b821aa55",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 70
            },
            {
              "callId": "call_b821aa55",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 70
            },
            {
              "callId": "call_01bf8aff",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 70
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "d247d541e2d0d3f6e93d8f83a1e4253b",
          "calls": [
            {
              "callId": "call_b821aa55",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 332
            },
            {
              "callId": "call_b821aa55",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 332
            },
            {
              "callId": "call_01bf8aff",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 332
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "320f749e0a9e114bb54363e84cb4b670",
          "calls": [
            {
              "callId": "call_b821aa55",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 306
            },
            {
              "callId": "call_b821aa55",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 306
            },
            {
              "callId": "call_01bf8aff",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 306
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "77a50a6e1e418df2a63a9da228f0a6c7",
          "calls": [
            {
              "callId": "call_59aa5683",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 671,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 337
            },
            {
              "callId": "call_59aa5683",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 671,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 337
            },
            {
              "callId": "call_7234ed6d",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 671,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 337
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "f58ee330e823f27e3e808879b9ef4651",
          "calls": [
            {
              "callId": "call_2c81c351",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 717,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 338
            },
            {
              "callId": "call_2c81c351",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 717,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 338
            },
            {
              "callId": "call_25880c3e",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 717,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 338
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "6af57150f3e5183b6af0cdc5d08770db",
          "calls": [
            {
              "callId": "call_71c3a3c1",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 773,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 107
            },
            {
              "callId": "call_71c3a3c1",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 773,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 107
            },
            {
              "callId": "call_71c3a3c1",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 773,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 107
            },
            {
              "callId": "call_71c3a3c1",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 773,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 107
            },
            {
              "callId": "call_5414a8ea",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 773,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 107
            },
            {
              "callId": "call_5414a8ea",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 773,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 107
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "hash": "dde5c5e52719e86afd8e56d8d50a49b9",
          "calls": [
            {
              "callId": "call_71c3a3c1",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 773,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 519
            },
            {
              "callId": "call_71c3a3c1",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 773,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 519
            },
            {
              "callId": "call_5414a8ea",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 773,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 519
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "e3ce1269b1e81c40b431ecc491bd3c60",
          "calls": [
            {
              "callId": "call_71c3a3c1",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 773,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 183
            },
            {
              "callId": "call_71c3a3c1",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 773,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 183
            },
            {
              "callId": "call_5414a8ea",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 773,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 183
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "6ca2f60024f9c05b8c4f74b397989619",
          "calls": [
            {
              "callId": "call_50f93511",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 354,
              "method": "performAIImprovementAnalysis",
              "promptType": "pattern_match",
              "promptLength": 906
            },
            {
              "callId": "call_50f93511",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 354,
              "method": "performAIImprovementAnalysis",
              "promptType": "pattern_match",
              "promptLength": 906
            },
            {
              "callId": "call_50f93511",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 354,
              "method": "performAIImprovementAnalysis",
              "promptType": "template_literal",
              "promptLength": 906
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "b3faa305b0d6195cd40ed9690d2b36ba",
          "calls": [
            {
              "callId": "call_a6c8c1d7",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 661,
              "method": "performAIObjectiveAnalysis",
              "promptType": "pattern_match",
              "promptLength": 599
            },
            {
              "callId": "call_a6c8c1d7",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 661,
              "method": "performAIObjectiveAnalysis",
              "promptType": "pattern_match",
              "promptLength": 599
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "965feb7ff72ba12aba6780155a0cec9f",
          "calls": [
            {
              "callId": "call_503d7717",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 707,
              "method": "performAIEmotionalAnalysis",
              "promptType": "pattern_match",
              "promptLength": 611
            },
            {
              "callId": "call_503d7717",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 707,
              "method": "performAIEmotionalAnalysis",
              "promptType": "pattern_match",
              "promptLength": 611
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "9ecd96666e000d5e0e6b60074e81f0a6",
          "calls": [
            {
              "callId": "call_5fcbc634",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 755,
              "method": "performAIImprovementAnalysis",
              "promptType": "pattern_match",
              "promptLength": 805
            },
            {
              "callId": "call_5fcbc634",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 755,
              "method": "performAIImprovementAnalysis",
              "promptType": "pattern_match",
              "promptLength": 805
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "hash": "b133460cea1796cd488cf8e88b859090",
          "calls": [
            {
              "callId": "call_27c6e3cd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 165,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 177
            },
            {
              "callId": "call_27c6e3cd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 165,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 177
            },
            {
              "callId": "call_36bd0422",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 349,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 177
            },
            {
              "callId": "call_36bd0422",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 349,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 177
            },
            {
              "callId": "call_27c6e3cd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 165,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 177
            },
            {
              "callId": "call_27c6e3cd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 165,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 177
            },
            {
              "callId": "call_36bd0422",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 349,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 177
            },
            {
              "callId": "call_36bd0422",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 349,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 177
            },
            {
              "callId": "call_c9e2a5af",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 165,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 177
            },
            {
              "callId": "call_c9e2a5af",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 165,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 177
            },
            {
              "callId": "call_bcb69358",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 349,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 177
            },
            {
              "callId": "call_bcb69358",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 349,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 177
            }
          ],
          "count": 12,
          "severity": "high"
        },
        {
          "hash": "66619830a45c9eff0373ae37d360d46e",
          "calls": [
            {
              "callId": "call_27c6e3cd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 165,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 139
            },
            {
              "callId": "call_27c6e3cd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 165,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 139
            },
            {
              "callId": "call_c9e2a5af",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 165,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 139
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "c41be880c084fcabca11fb970cc6ebea",
          "calls": [
            {
              "callId": "call_2fad31e3",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 264,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 183
            },
            {
              "callId": "call_2fad31e3",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 264,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 183
            },
            {
              "callId": "call_2fad31e3",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 264,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 183
            },
            {
              "callId": "call_2fad31e3",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 264,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 183
            },
            {
              "callId": "call_f2eeedb1",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 264,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 183
            },
            {
              "callId": "call_f2eeedb1",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 264,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 183
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "hash": "f30c764b844b2831f4682c5619554725",
          "calls": [
            {
              "callId": "call_2fad31e3",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 264,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 129
            },
            {
              "callId": "call_2fad31e3",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 264,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 129
            },
            {
              "callId": "call_f2eeedb1",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 264,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 129
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "009ffb6ed89e2908c0baa7c8c8a75353",
          "calls": [
            {
              "callId": "call_36bd0422",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 349,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 132
            },
            {
              "callId": "call_36bd0422",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 349,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 132
            },
            {
              "callId": "call_bcb69358",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 349,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 132
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "67188a6448697428fb587f7bad43b483",
          "calls": [
            {
              "callId": "call_871fb462",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 442,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 180
            },
            {
              "callId": "call_871fb462",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 442,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 180
            },
            {
              "callId": "call_871fb462",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 442,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 180
            },
            {
              "callId": "call_871fb462",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 442,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 180
            },
            {
              "callId": "call_6efd7ed4",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 442,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 180
            },
            {
              "callId": "call_6efd7ed4",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 442,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 180
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "hash": "e8bc1594043af01ecdeb01cfb9b777ca",
          "calls": [
            {
              "callId": "call_871fb462",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 442,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 129
            },
            {
              "callId": "call_871fb462",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 442,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 129
            },
            {
              "callId": "call_6efd7ed4",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 442,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 129
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "hash": "a32a1970ca9a13471e352bc513f5fb20",
          "calls": [
            {
              "callId": "call_a403e1b8",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 685,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 164
            },
            {
              "callId": "call_a403e1b8",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 685,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 164
            },
            {
              "callId": "call_a403e1b8",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 685,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 164
            },
            {
              "callId": "call_a403e1b8",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 685,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 164
            },
            {
              "callId": "call_73b771d0",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 685,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 164
            },
            {
              "callId": "call_73b771d0",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 685,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 164
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "hash": "64aa3dcf139eb30e40c669c4bbb9f1af",
          "calls": [
            {
              "callId": "call_f586e8f0",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 853,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 186
            },
            {
              "callId": "call_f586e8f0",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 853,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 186
            },
            {
              "callId": "call_f586e8f0",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 853,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 186
            },
            {
              "callId": "call_f586e8f0",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 853,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 186
            },
            {
              "callId": "call_caf3f08f",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 853,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 186
            },
            {
              "callId": "call_caf3f08f",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 853,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 186
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "hash": "9ad88852ab2e8247ad7a7a5355653f91",
          "calls": [
            {
              "callId": "call_fbc93dbd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 524
            },
            {
              "callId": "call_fbc93dbd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 524
            },
            {
              "callId": "call_fbc93dbd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 524
            },
            {
              "callId": "call_fbc93dbd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 524
            },
            {
              "callId": "call_fbc93dbd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 524
            },
            {
              "callId": "call_fbc93dbd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 524
            },
            {
              "callId": "call_571cb420",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 524
            },
            {
              "callId": "call_571cb420",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 524
            },
            {
              "callId": "call_571cb420",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "promptType": "template_literal",
              "promptLength": 524
            }
          ],
          "count": 9,
          "severity": "high"
        },
        {
          "hash": "7ab089a00dd657b54ec119e503cb22f7",
          "calls": [
            {
              "callId": "call_fbc93dbd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 178
            },
            {
              "callId": "call_fbc93dbd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 178
            },
            {
              "callId": "call_fbc93dbd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 178
            },
            {
              "callId": "call_fbc93dbd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 178
            },
            {
              "callId": "call_571cb420",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 178
            },
            {
              "callId": "call_571cb420",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "promptType": "pattern_match",
              "promptLength": 178
            }
          ],
          "count": 6,
          "severity": "high"
        }
      ],
      "outputDuplicates": [
        {
          "pattern": "novel:chapter",
          "calls": [
            {
              "callId": "call_6bca0ae0",
              "filePath": "src\\app\\api\\generation\\chapter\\route.ts",
              "lineNumber": 233,
              "method": "generateChapter",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_5eb04109",
              "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
              "lineNumber": 468,
              "method": "analyzeCharacter",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_462fa399",
              "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
              "lineNumber": 708,
              "method": "analyzeCharacter",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_e3f53090",
              "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
              "lineNumber": 762,
              "method": "analyzeCharacter",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_e72a01ca",
              "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
              "lineNumber": 820,
              "method": "analyzeStyle",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_1c9a2ed2",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 689,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_18183c83",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 750,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_0459ffc7",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 535,
              "method": "analyzeCharacter",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_4bc217e9",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 536,
              "method": "analyzeCharacter",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_1c9a2ed2",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 689,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_18183c83",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 750,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_874c5434",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 689,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_1ba6677b",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 750,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_e3499eaa",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "lineNumber": 145,
              "method": "analyzeStyle",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_1035d952",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "lineNumber": 450,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_65dcaee2",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "lineNumber": 717,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_b943c4c9",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "lineNumber": 450,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_d1dbf14b",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "lineNumber": 717,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_69171be2",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 182,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_0696c96c",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 290,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_edfc52ac",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 791,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_1f3e5a77",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 881,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_ce99d105",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 182,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_ed6830f7",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 290,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_61ed4d09",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 791,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_3e476d9e",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 881,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_129ddf5b",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 89,
              "method": "analyzeCharacter",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_818d1a06",
              "filePath": "src\\lib\\analysis\\services\\character\\interfaces.ts",
              "lineNumber": 24,
              "method": "analyzeCharacter",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_4ad1c568",
              "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
              "lineNumber": 218,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_4ad1c568",
              "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
              "lineNumber": 218,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_fbfd72f9",
              "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
              "lineNumber": 218,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_1ed727cf",
              "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
              "lineNumber": 452,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_1ed727cf",
              "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
              "lineNumber": 452,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_3cd296f3",
              "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
              "lineNumber": 452,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_2d6b1ee3",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 395,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_5a61e7e9",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 461,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_cd18ed56",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 688,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_306575ca",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 710,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_7e6621ef",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2139,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_c3189908",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 395,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_42f50d23",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 461,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_afc20166",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 688,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_55a9819f",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 710,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_360a38f7",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2139,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_b27aa071",
              "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
              "lineNumber": 183,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_b27aa071",
              "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
              "lineNumber": 183,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_bf02a47e",
              "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
              "lineNumber": 183,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_0e0ffa92",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "lineNumber": 379,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_6adb174a",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "lineNumber": 1006,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_0e0ffa92",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "lineNumber": 379,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_6adb174a",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "lineNumber": 1006,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_6d2bdcd3",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "lineNumber": 379,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_14ab93e8",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "lineNumber": 1006,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_aea0563d",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "lineNumber": 408,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_aea0563d",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "lineNumber": 408,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_9ebc9a83",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "lineNumber": 400,
              "method": "buildAnalysisPrompt",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_8c27c221",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "lineNumber": 635,
              "method": "buildAnalysisPrompt",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_7b8b64d8",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "lineNumber": 408,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_869cbbc6",
              "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
              "lineNumber": 357,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_869cbbc6",
              "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
              "lineNumber": 357,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_ca2cf1b3",
              "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
              "lineNumber": 357,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_9819843c",
              "filePath": "src\\lib\\generation\\engine.ts",
              "lineNumber": 184,
              "method": "generateChapter",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_c66a8107",
              "filePath": "src\\lib\\generation\\engine.ts",
              "lineNumber": 261,
              "method": "generateChapter",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_bfc638e7",
              "filePath": "src\\lib\\generation\\engine.ts",
              "lineNumber": 263,
              "method": "generateChapter",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_ca729a9d",
              "filePath": "src\\lib\\learning-journey\\context-manager.ts",
              "lineNumber": 470,
              "method": "generateSummary",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_796b89ed",
              "filePath": "src\\lib\\learning-journey\\context-manager.ts",
              "lineNumber": 515,
              "method": "generateSummary",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_63625169",
              "filePath": "src\\lib\\learning-journey\\context-manager.ts",
              "lineNumber": 908,
              "method": "generateSummary",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_fa708e96",
              "filePath": "src\\lib\\learning-journey\\context-manager.ts",
              "lineNumber": 1031,
              "method": "generateSummary",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_43a85937",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "lineNumber": 461,
              "method": "executeAIAnalysis",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_9bbf9fcd",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "lineNumber": 543,
              "method": "executeAIAnalysis",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_0bf1b71f",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "lineNumber": 605,
              "method": "executeAIAnalysis",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_75df9e80",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "lineNumber": 1225,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_75df9e80",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "lineNumber": 1225,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_edef0302",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "lineNumber": 1225,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_b821aa55",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_59aa5683",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 671,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_2c81c351",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 717,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_b821aa55",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_59aa5683",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 671,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_2c81c351",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 717,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_a643be4b",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 138,
              "method": "performAICoherenceAnalysis",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_2f7dba2f",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 201,
              "method": "performAIObjectiveAnalysis",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_8749b3de",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 276,
              "method": "performAIEmotionalAnalysis",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_5f96b84e",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 622,
              "method": "performAICoherenceAnalysis",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_a6c8c1d7",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 661,
              "method": "performAIObjectiveAnalysis",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_503d7717",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 707,
              "method": "performAIEmotionalAnalysis",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_01bf8aff",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_7234ed6d",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 671,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_25880c3e",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 717,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_27c6e3cd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 165,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_fbc93dbd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_27c6e3cd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 165,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_fbc93dbd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_c9e2a5af",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 165,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_571cb420",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "outputType": "novel_structure"
            }
          ],
          "count": 95,
          "severity": "high"
        },
        {
          "pattern": "type:string>",
          "calls": [
            {
              "callId": "call_769936d4",
              "filePath": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
              "lineNumber": 51,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_cced1d04",
              "filePath": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
              "lineNumber": 166,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_12be75a9",
              "filePath": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
              "lineNumber": 154,
              "method": "generateContent",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_815968e8",
              "filePath": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
              "lineNumber": 166,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_9c35b55d",
              "filePath": "src\\lib\\analysis\\adapters\\interfaces.ts",
              "lineNumber": 21,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_4da878fb",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 248,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_59370f58",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 376,
              "method": "executeGeminiRequest",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_a225d13e",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "lineNumber": 1030,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_a225d13e",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "lineNumber": 1030,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_e0f3f264",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "lineNumber": 1028,
              "method": "executeAIAnalysis",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_40dce312",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "lineNumber": 1030,
              "method": "generateText",
              "outputType": "type_annotation"
            }
          ],
          "count": 11,
          "severity": "high"
        },
        {
          "pattern": "type:ChapterAnalysis>",
          "calls": [
            {
              "callId": "call_5eb04109",
              "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
              "lineNumber": 468,
              "method": "analyzeCharacter",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_edfc52ac",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 791,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_61ed4d09",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 791,
              "method": "generateText",
              "outputType": "type_annotation"
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "pattern": "novel:title",
          "calls": [
            {
              "callId": "call_5eb04109",
              "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
              "lineNumber": 468,
              "method": "analyzeCharacter",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_1948d757",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_1948d757",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_580712e8",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_1f3e5a77",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 881,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_3e476d9e",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 881,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_ca729a9d",
              "filePath": "src\\lib\\learning-journey\\context-manager.ts",
              "lineNumber": 470,
              "method": "generateSummary",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_796b89ed",
              "filePath": "src\\lib\\learning-journey\\context-manager.ts",
              "lineNumber": 515,
              "method": "generateSummary",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_63625169",
              "filePath": "src\\lib\\learning-journey\\context-manager.ts",
              "lineNumber": 908,
              "method": "generateSummary",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_fa708e96",
              "filePath": "src\\lib\\learning-journey\\context-manager.ts",
              "lineNumber": 1031,
              "method": "generateSummary",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_b821aa55",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_59aa5683",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 671,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_2c81c351",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 717,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_71c3a3c1",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 773,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_b821aa55",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_59aa5683",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 671,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_2c81c351",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 717,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_71c3a3c1",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 773,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_5f96b84e",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 622,
              "method": "performAICoherenceAnalysis",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_a6c8c1d7",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 661,
              "method": "performAIObjectiveAnalysis",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_503d7717",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 707,
              "method": "performAIEmotionalAnalysis",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_01bf8aff",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_7234ed6d",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 671,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_25880c3e",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 717,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_5414a8ea",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 773,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_fbc93dbd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_fbc93dbd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_571cb420",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "outputType": "novel_structure"
            }
          ],
          "count": 28,
          "severity": "high"
        },
        {
          "pattern": "novel:scene",
          "calls": [
            {
              "callId": "call_5eb04109",
              "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
              "lineNumber": 468,
              "method": "analyzeCharacter",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_1f3e5a77",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 881,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_3e476d9e",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 881,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_f85b10f3",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 342,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_ef390022",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 342,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_63625169",
              "filePath": "src\\lib\\learning-journey\\context-manager.ts",
              "lineNumber": 908,
              "method": "generateSummary",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_27c6e3cd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 165,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_27c6e3cd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 165,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_c9e2a5af",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 165,
              "method": "generateText",
              "outputType": "novel_structure"
            }
          ],
          "count": 9,
          "severity": "high"
        },
        {
          "pattern": "novel:character",
          "calls": [
            {
              "callId": "call_5eb04109",
              "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
              "lineNumber": 468,
              "method": "analyzeCharacter",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_462fa399",
              "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
              "lineNumber": 708,
              "method": "analyzeCharacter",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_e3f53090",
              "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
              "lineNumber": 762,
              "method": "analyzeCharacter",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_1948d757",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_1c9a2ed2",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 689,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_3ab7176e",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 716,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_18183c83",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 750,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_0459ffc7",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 535,
              "method": "analyzeCharacter",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_4bc217e9",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 536,
              "method": "analyzeCharacter",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_7479181a",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 606,
              "method": "analyzeCharacter",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_1948d757",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_1c9a2ed2",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 689,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_3ab7176e",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 716,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_18183c83",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 750,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_580712e8",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_874c5434",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 689,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_5ef55a3b",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 716,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_1ba6677b",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 750,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_b3a40c33",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "lineNumber": 551,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_0ae55a83",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "lineNumber": 551,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_69171be2",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 182,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_0696c96c",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 290,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_93e91667",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 354,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_edfc52ac",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 791,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_1f3e5a77",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 881,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_ce99d105",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 182,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_ed6830f7",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 290,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_e5010d96",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 354,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_61ed4d09",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 791,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_3e476d9e",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 881,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_9d90ac6a",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 264,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_f85b10f3",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 342,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_47799132",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 401,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_222993c5",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 464,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_73ca6c9a",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 511,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_129ddf5b",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 89,
              "method": "analyzeCharacter",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_9b3d30c4",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 264,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_ef390022",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 342,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_8c4a1ae8",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 401,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_e73439f8",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 464,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_cb07f524",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 511,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_818d1a06",
              "filePath": "src\\lib\\analysis\\services\\character\\interfaces.ts",
              "lineNumber": 24,
              "method": "analyzeCharacter",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_5b244c9b",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 1811,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_40f41ebd",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 1811,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_1f7dcda5",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 316,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_1f7dcda5",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 316,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_d8b4231a",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 316,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_0dc98618",
              "filePath": "src\\lib\\characters\\core\\interfaces.ts",
              "lineNumber": 847,
              "method": "analyzeCharacter",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_3cf732e2",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 445,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_60439f63",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 626,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_3cf732e2",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 445,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_60439f63",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 626,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_2101b18c",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_47a728bd",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 445,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_fd3f8227",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 626,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_239288c0",
              "filePath": "src\\lib\\characters\\manager.ts",
              "lineNumber": 463,
              "method": "analyzeCharacter",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_b27aa071",
              "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
              "lineNumber": 183,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_b27aa071",
              "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
              "lineNumber": 183,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_bf02a47e",
              "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
              "lineNumber": 183,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_e7f7a802",
              "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
              "lineNumber": 914,
              "method": "validateApiKey",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_4be62073",
              "filePath": "src\\lib\\memory\\text-analyzer-service.ts",
              "lineNumber": 335,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_4be62073",
              "filePath": "src\\lib\\memory\\text-analyzer-service.ts",
              "lineNumber": 335,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_725f8327",
              "filePath": "src\\lib\\memory\\text-analyzer-service.ts",
              "lineNumber": 335,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_f586e8f0",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 853,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_f586e8f0",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 853,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_caf3f08f",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 853,
              "method": "generateText",
              "outputType": "novel_structure"
            }
          ],
          "count": 68,
          "severity": "high"
        },
        {
          "pattern": "type:DepthRecommendation[]>",
          "calls": [
            {
              "callId": "call_1948d757",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_1948d757",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_580712e8",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "outputType": "type_annotation"
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "pattern": "novel:description",
          "calls": [
            {
              "callId": "call_1948d757",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_1948d757",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_580712e8",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_b3a40c33",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "lineNumber": 551,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_587109fc",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "lineNumber": 633,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_64534711",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "lineNumber": 801,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_0ae55a83",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "lineNumber": 551,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_40b206b4",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "lineNumber": 633,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_a2a64800",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "lineNumber": 801,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_9d90ac6a",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 264,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_9b3d30c4",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 264,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_5b244c9b",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 1811,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_40f41ebd",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 1811,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_1f7dcda5",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 316,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_1f7dcda5",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 316,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_d8b4231a",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 316,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_3cf732e2",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 445,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_60439f63",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 626,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_3cf732e2",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 445,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_60439f63",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 626,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_47a728bd",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 445,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_fd3f8227",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 626,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_8c27c221",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "lineNumber": 635,
              "method": "buildAnalysisPrompt",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_d18c12a2",
              "filePath": "src\\lib\\plot\\checker.ts",
              "lineNumber": 768,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_d18c12a2",
              "filePath": "src\\lib\\plot\\checker.ts",
              "lineNumber": 768,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_b525b719",
              "filePath": "src\\lib\\plot\\checker.ts",
              "lineNumber": 768,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_27c6e3cd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 165,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_2fad31e3",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 264,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_a403e1b8",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 685,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_27c6e3cd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 165,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_2fad31e3",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 264,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_a403e1b8",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 685,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_c9e2a5af",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 165,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_f2eeedb1",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 264,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_73b771d0",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 685,
              "method": "generateText",
              "outputType": "novel_structure"
            }
          ],
          "count": 35,
          "severity": "high"
        },
        {
          "pattern": "type:CharacterAnalysisResult|CharacterArcRecommendation[]>",
          "calls": [
            {
              "callId": "call_1c9a2ed2",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 689,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_1c9a2ed2",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 689,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_874c5434",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 689,
              "method": "generateText",
              "outputType": "type_annotation"
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "pattern": "type:MotivationEnhancement[]>",
          "calls": [
            {
              "callId": "call_3ab7176e",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 716,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_3ab7176e",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 716,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_5ef55a3b",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 716,
              "method": "generateText",
              "outputType": "type_annotation"
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "pattern": "type:ContrastRecommendation[]>",
          "calls": [
            {
              "callId": "call_18183c83",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 750,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_18183c83",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 750,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_1ba6677b",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 750,
              "method": "generateText",
              "outputType": "type_annotation"
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "pattern": "type:CharacterAnalysisResult>",
          "calls": [
            {
              "callId": "call_0459ffc7",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 535,
              "method": "analyzeCharacter",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_4bc217e9",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 536,
              "method": "analyzeCharacter",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_129ddf5b",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 89,
              "method": "analyzeCharacter",
              "outputType": "type_annotation"
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "pattern": "json_response",
          "calls": [
            {
              "callId": "call_0573e5a0",
              "filePath": "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
              "lineNumber": 1580,
              "method": "generateContent",
              "outputType": "json_expected"
            },
            {
              "callId": "call_f7dee58e",
              "filePath": "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
              "lineNumber": 1580,
              "method": "generateContent",
              "outputType": "json_expected"
            },
            {
              "callId": "call_5b244c9b",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 1811,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_40f41ebd",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 1811,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_2f85bbc6",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 234,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_2f85bbc6",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 234,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_af323c00",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 234,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_60439f63",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 626,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_60439f63",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 626,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_fd3f8227",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 626,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_59370f58",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 376,
              "method": "executeGeminiRequest",
              "outputType": "json_expected"
            },
            {
              "callId": "call_4be62073",
              "filePath": "src\\lib\\memory\\text-analyzer-service.ts",
              "lineNumber": 335,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_4be62073",
              "filePath": "src\\lib\\memory\\text-analyzer-service.ts",
              "lineNumber": 335,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_725f8327",
              "filePath": "src\\lib\\memory\\text-analyzer-service.ts",
              "lineNumber": 335,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_b821aa55",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_59aa5683",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 671,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_2c81c351",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 717,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_71c3a3c1",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 773,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_b821aa55",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_59aa5683",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 671,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_2c81c351",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 717,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_71c3a3c1",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 773,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_5f96b84e",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 622,
              "method": "performAICoherenceAnalysis",
              "outputType": "json_expected"
            },
            {
              "callId": "call_a6c8c1d7",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 661,
              "method": "performAIObjectiveAnalysis",
              "outputType": "json_expected"
            },
            {
              "callId": "call_503d7717",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 707,
              "method": "performAIEmotionalAnalysis",
              "outputType": "json_expected"
            },
            {
              "callId": "call_01bf8aff",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_7234ed6d",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 671,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_25880c3e",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 717,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_5414a8ea",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 773,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_27c6e3cd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 165,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_2fad31e3",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 264,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_36bd0422",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 349,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_871fb462",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 442,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_a403e1b8",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 685,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_f586e8f0",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 853,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_fbc93dbd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_27c6e3cd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 165,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_2fad31e3",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 264,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_36bd0422",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 349,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_871fb462",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 442,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_a403e1b8",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 685,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_f586e8f0",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 853,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_fbc93dbd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_c9e2a5af",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 165,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_f2eeedb1",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 264,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_bcb69358",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 349,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_6efd7ed4",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 442,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_73b771d0",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 685,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_caf3f08f",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 853,
              "method": "generateText",
              "outputType": "json_expected"
            },
            {
              "callId": "call_571cb420",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "outputType": "json_expected"
            }
          ],
          "count": 50,
          "severity": "high"
        },
        {
          "pattern": "novel:resolution",
          "calls": [
            {
              "callId": "call_65dcaee2",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "lineNumber": 717,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_d1dbf14b",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "lineNumber": 717,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_2d6b1ee3",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 395,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_c3189908",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 395,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_6adb174a",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "lineNumber": 1006,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_6adb174a",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "lineNumber": 1006,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_14ab93e8",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "lineNumber": 1006,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_18fd8fd2",
              "filePath": "src\\lib\\foreshadowing\\manager.ts",
              "lineNumber": 435,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_18fd8fd2",
              "filePath": "src\\lib\\foreshadowing\\manager.ts",
              "lineNumber": 435,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_b224c7e0",
              "filePath": "src\\lib\\foreshadowing\\manager.ts",
              "lineNumber": 435,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_aea0563d",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "lineNumber": 408,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_aea0563d",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "lineNumber": 408,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_9ebc9a83",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "lineNumber": 400,
              "method": "buildAnalysisPrompt",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_7b8b64d8",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "lineNumber": 408,
              "method": "generateText",
              "outputType": "novel_structure"
            }
          ],
          "count": 14,
          "severity": "high"
        },
        {
          "pattern": "novel:dialogue",
          "calls": [
            {
              "callId": "call_0696c96c",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 290,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_ed6830f7",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 290,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_f85b10f3",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 342,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_ef390022",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 342,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_d213a88b",
              "filePath": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
              "lineNumber": 863,
              "method": "generateContent",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_ab66f212",
              "filePath": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
              "lineNumber": 863,
              "method": "generateContent",
              "outputType": "novel_structure"
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "pattern": "novel:conflict",
          "calls": [
            {
              "callId": "call_47799132",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 401,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_8c4a1ae8",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 401,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_5b244c9b",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 1811,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_40f41ebd",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 1811,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_1734eaef",
              "filePath": "src\\lib\\learning-journey\\concept-learning-manager.ts",
              "lineNumber": 1102,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_1734eaef",
              "filePath": "src\\lib\\learning-journey\\concept-learning-manager.ts",
              "lineNumber": 1102,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_44e1bb22",
              "filePath": "src\\lib\\learning-journey\\concept-learning-manager.ts",
              "lineNumber": 1102,
              "method": "generateText",
              "outputType": "novel_structure"
            }
          ],
          "count": 7,
          "severity": "high"
        },
        {
          "pattern": "type:LiteraryGuideline[]>",
          "calls": [
            {
              "callId": "call_4ad1c568",
              "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
              "lineNumber": 218,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_4ad1c568",
              "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
              "lineNumber": 218,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_fbfd72f9",
              "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
              "lineNumber": 218,
              "method": "generateText",
              "outputType": "type_annotation"
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "pattern": "type:ReaderExperienceAnalysis",
          "calls": [
            {
              "callId": "call_a757ae0b",
              "filePath": "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts",
              "lineNumber": 111,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_a757ae0b",
              "filePath": "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts",
              "lineNumber": 111,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_821ffddd",
              "filePath": "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts",
              "lineNumber": 111,
              "method": "generateText",
              "outputType": "type_annotation"
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "pattern": "type:SymbolismAnalysis",
          "calls": [
            {
              "callId": "call_acc16f7d",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 602,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_7a25db3c",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 602,
              "method": "generateText",
              "outputType": "type_annotation"
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "pattern": "type:ThemeConsistencyAnalysis",
          "calls": [
            {
              "callId": "call_306575ca",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 710,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_55a9819f",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 710,
              "method": "generateText",
              "outputType": "type_annotation"
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "pattern": "type:ValidationResult",
          "calls": [
            {
              "callId": "call_2f85bbc6",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 234,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_2f85bbc6",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 234,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_af323c00",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 234,
              "method": "generateText",
              "outputType": "type_annotation"
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "pattern": "novel:setting",
          "calls": [
            {
              "callId": "call_b27aa071",
              "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
              "lineNumber": 183,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_b27aa071",
              "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
              "lineNumber": 183,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_bf02a47e",
              "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
              "lineNumber": 183,
              "method": "generateText",
              "outputType": "novel_structure"
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "pattern": "type:Foreshadowing[]>",
          "calls": [
            {
              "callId": "call_0e0ffa92",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "lineNumber": 379,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_0e0ffa92",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "lineNumber": 379,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_6d2bdcd3",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "lineNumber": 379,
              "method": "generateText",
              "outputType": "type_annotation"
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "pattern": "type:ResolutionEvaluationResult>",
          "calls": [
            {
              "callId": "call_aea0563d",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "lineNumber": 408,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_aea0563d",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "lineNumber": 408,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_9ebc9a83",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "lineNumber": 400,
              "method": "buildAnalysisPrompt",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_7b8b64d8",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "lineNumber": 408,
              "method": "generateText",
              "outputType": "type_annotation"
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "pattern": "novel:plot",
          "calls": [
            {
              "callId": "call_9819843c",
              "filePath": "src\\lib\\generation\\engine.ts",
              "lineNumber": 184,
              "method": "generateChapter",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_95cf4bd3",
              "filePath": "src\\lib\\generation\\engine.ts",
              "lineNumber": 72,
              "method": "setModelMap",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_c6c4f0b6",
              "filePath": "src\\lib\\generation\\engine.ts",
              "lineNumber": 127,
              "method": "validateApiKey",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_f46a5856",
              "filePath": "src\\lib\\generation\\engine.ts",
              "lineNumber": 128,
              "method": "getModelInfo",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_b821aa55",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_59aa5683",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 671,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_2c81c351",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 717,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_b821aa55",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_59aa5683",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 671,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_2c81c351",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 717,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_5f96b84e",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 622,
              "method": "performAICoherenceAnalysis",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_a6c8c1d7",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 661,
              "method": "performAIObjectiveAnalysis",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_503d7717",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 707,
              "method": "performAIEmotionalAnalysis",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_5fcbc634",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 755,
              "method": "performAIImprovementAnalysis",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_01bf8aff",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_7234ed6d",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 671,
              "method": "generateText",
              "outputType": "novel_structure"
            },
            {
              "callId": "call_25880c3e",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 717,
              "method": "generateText",
              "outputType": "novel_structure"
            }
          ],
          "count": 17,
          "severity": "high"
        },
        {
          "pattern": "type:GenerateChapter|Chapter>|{\n    apiKeyValid: boolean;\n    modelInfo: any;\n    parameters: SystemParameters;\n  }>",
          "calls": [
            {
              "callId": "call_c66a8107",
              "filePath": "src\\lib\\generation\\engine.ts",
              "lineNumber": 261,
              "method": "generateChapter",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_bfc638e7",
              "filePath": "src\\lib\\generation\\engine.ts",
              "lineNumber": 263,
              "method": "generateChapter",
              "outputType": "type_annotation"
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "pattern": "type:{\n    apiKeyValid: boolean;\n    modelInfo: any;\n    parameters: SystemParameters;\n  }>",
          "calls": [
            {
              "callId": "call_cc81755d",
              "filePath": "src\\lib\\generation\\engine.ts",
              "lineNumber": 92,
              "method": "setModelMap",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_be8a9ee2",
              "filePath": "src\\lib\\generation\\engine.ts",
              "lineNumber": 107,
              "method": "validateApiKey",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_fccffdbd",
              "filePath": "src\\lib\\generation\\engine.ts",
              "lineNumber": 108,
              "method": "getModelInfo",
              "outputType": "type_annotation"
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "pattern": "type:{\n    apiKeyValid: boolean;\n    modelInfo: any;\n    parameters: SystemParameters;\n    plotManagerStatus?: any;\n  }>",
          "calls": [
            {
              "callId": "call_c6c4f0b6",
              "filePath": "src\\lib\\generation\\engine.ts",
              "lineNumber": 127,
              "method": "validateApiKey",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_f46a5856",
              "filePath": "src\\lib\\generation\\engine.ts",
              "lineNumber": 128,
              "method": "getModelInfo",
              "outputType": "type_annotation"
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "pattern": "type:boolean>",
          "calls": [
            {
              "callId": "call_1d0290a3",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 493,
              "method": "generateContent",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_d5f26128",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 493,
              "method": "generateContent",
              "outputType": "type_annotation"
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "pattern": "type:void>",
          "calls": [
            {
              "callId": "call_796b89ed",
              "filePath": "src\\lib\\learning-journey\\context-manager.ts",
              "lineNumber": 515,
              "method": "generateSummary",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_fa708e96",
              "filePath": "src\\lib\\learning-journey\\context-manager.ts",
              "lineNumber": 1031,
              "method": "generateSummary",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_798d91ff",
              "filePath": "src\\lib\\plot\\section\\index.ts",
              "lineNumber": 397,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_798d91ff",
              "filePath": "src\\lib\\plot\\section\\index.ts",
              "lineNumber": 397,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_25985289",
              "filePath": "src\\lib\\plot\\section\\index.ts",
              "lineNumber": 397,
              "method": "generateText",
              "outputType": "type_annotation"
            }
          ],
          "count": 5,
          "severity": "high"
        },
        {
          "pattern": "type:CoherenceAnalysis>",
          "calls": [
            {
              "callId": "call_b821aa55",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_b821aa55",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_5f96b84e",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 622,
              "method": "performAICoherenceAnalysis",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_01bf8aff",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "outputType": "type_annotation"
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "pattern": "type:ObjectiveProgress>",
          "calls": [
            {
              "callId": "call_59aa5683",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 671,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_59aa5683",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 671,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_a6c8c1d7",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 661,
              "method": "performAIObjectiveAnalysis",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_7234ed6d",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 671,
              "method": "generateText",
              "outputType": "type_annotation"
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "pattern": "type:EmotionalArcProgress>",
          "calls": [
            {
              "callId": "call_2c81c351",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 717,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_2c81c351",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 717,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_503d7717",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 707,
              "method": "performAIEmotionalAnalysis",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_25880c3e",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 717,
              "method": "generateText",
              "outputType": "type_annotation"
            }
          ],
          "count": 4,
          "severity": "medium"
        },
        {
          "pattern": "type:ImprovementSuggestion[]>",
          "calls": [
            {
              "callId": "call_71c3a3c1",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 773,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_71c3a3c1",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 773,
              "method": "generateText",
              "outputType": "type_annotation"
            },
            {
              "callId": "call_5414a8ea",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 773,
              "method": "generateText",
              "outputType": "type_annotation"
            }
          ],
          "count": 3,
          "severity": "medium"
        }
      ],
      "semanticDuplicates": [
        {
          "purpose": "生成_generate",
          "calls": [
            {
              "callId": "call_6bca0ae0",
              "filePath": "src\\app\\api\\generation\\chapter\\route.ts",
              "lineNumber": 233,
              "method": "generateChapter",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_77847414",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "lineNumber": 529,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_c02c53f9",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "lineNumber": 719,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_7ab19737",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "lineNumber": 529,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_7376c0dd",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "lineNumber": 719,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_206fafae",
              "filePath": "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
              "lineNumber": 1186,
              "method": "generateContent",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_b536e5f0",
              "filePath": "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
              "lineNumber": 1186,
              "method": "generateContent",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_65dcaee2",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "lineNumber": 717,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_64534711",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "lineNumber": 801,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_d1dbf14b",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "lineNumber": 717,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_a2a64800",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "lineNumber": 801,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_1ed727cf",
              "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
              "lineNumber": 452,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_1ed727cf",
              "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
              "lineNumber": 452,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_3cd296f3",
              "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
              "lineNumber": 452,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_626a1c0b",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2064,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_ad65bc8f",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2064,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_64726330",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_2101b18c",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 292,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_869cbbc6",
              "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
              "lineNumber": 357,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_869cbbc6",
              "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
              "lineNumber": 357,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_ca2cf1b3",
              "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
              "lineNumber": 357,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_9819843c",
              "filePath": "src\\lib\\generation\\engine.ts",
              "lineNumber": 184,
              "method": "generateChapter",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_c66a8107",
              "filePath": "src\\lib\\generation\\engine.ts",
              "lineNumber": 261,
              "method": "generateChapter",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_bfc638e7",
              "filePath": "src\\lib\\generation\\engine.ts",
              "lineNumber": 263,
              "method": "generateChapter",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_3ec4ba81",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 716,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_0e05a2a9",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 746,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_96b72f47",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 407,
              "method": "generateContent",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_d45808e8",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 726,
              "method": "generateStory",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_bd38df0d",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 716,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_415d8574",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 746,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_94e6ee35",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 407,
              "method": "generateContent",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_e0637847",
              "filePath": "src\\lib\\learning-journey\\context-manager.ts",
              "lineNumber": 1423,
              "method": "generateSummary",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_75df9e80",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "lineNumber": 1225,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_75df9e80",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "lineNumber": 1225,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_edef0302",
              "filePath": "src\\lib\\learning-journey\\index.ts",
              "lineNumber": 1225,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_27c6e3cd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 165,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_2fad31e3",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 264,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_36bd0422",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 349,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_fbc93dbd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_27c6e3cd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 165,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_2fad31e3",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 264,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_36bd0422",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 349,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_fbc93dbd",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_c9e2a5af",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 165,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_f2eeedb1",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 264,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_bcb69358",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 349,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_6efd7ed4",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 442,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            },
            {
              "callId": "call_571cb420",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 1005,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate"
              ]
            }
          ],
          "count": 49,
          "severity": "high"
        },
        {
          "purpose": "生成_generate_create",
          "calls": [
            {
              "callId": "call_769936d4",
              "filePath": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
              "lineNumber": 51,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "create"
              ]
            },
            {
              "callId": "call_87abbd70",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "lineNumber": 901,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "create"
              ]
            },
            {
              "callId": "call_f9f6e71f",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "lineNumber": 1148,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "create"
              ]
            },
            {
              "callId": "call_3c5880f8",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "lineNumber": 901,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "create"
              ]
            },
            {
              "callId": "call_90bbb4b4",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "lineNumber": 1148,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "create"
              ]
            },
            {
              "callId": "call_1035d952",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "lineNumber": 450,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "create"
              ]
            },
            {
              "callId": "call_b3a40c33",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "lineNumber": 551,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "create"
              ]
            },
            {
              "callId": "call_587109fc",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "lineNumber": 633,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "create"
              ]
            },
            {
              "callId": "call_b943c4c9",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "lineNumber": 450,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "create"
              ]
            },
            {
              "callId": "call_0ae55a83",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "lineNumber": 551,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "create"
              ]
            },
            {
              "callId": "call_40b206b4",
              "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
              "lineNumber": 633,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "create"
              ]
            },
            {
              "callId": "call_9bbf9fcd",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "lineNumber": 543,
              "method": "executeAIAnalysis",
              "purposes": [
                "生成",
                "generate",
                "create"
              ]
            }
          ],
          "count": 12,
          "severity": "high"
        },
        {
          "purpose": "generate",
          "calls": [
            {
              "callId": "call_13353cc3",
              "filePath": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
              "lineNumber": 104,
              "method": "generateText",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_8205a11d",
              "filePath": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
              "lineNumber": 104,
              "method": "generateText",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_93e91667",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 354,
              "method": "generateText",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_e5010d96",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 354,
              "method": "generateText",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_9d90ac6a",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 264,
              "method": "generateText",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_73ca6c9a",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 511,
              "method": "generateText",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_9b3d30c4",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 264,
              "method": "generateText",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_cb07f524",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 511,
              "method": "generateText",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_7535f0a1",
              "filePath": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
              "lineNumber": 539,
              "method": "generateContent",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_5af47d39",
              "filePath": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
              "lineNumber": 539,
              "method": "generateContent",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_5b244c9b",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 1811,
              "method": "generateText",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_40f41ebd",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 1811,
              "method": "generateText",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_1d0290a3",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 493,
              "method": "generateContent",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_59370f58",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 376,
              "method": "executeGeminiRequest",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_d5f26128",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 493,
              "method": "generateContent",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_1734eaef",
              "filePath": "src\\lib\\learning-journey\\concept-learning-manager.ts",
              "lineNumber": 1102,
              "method": "generateText",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_1734eaef",
              "filePath": "src\\lib\\learning-journey\\concept-learning-manager.ts",
              "lineNumber": 1102,
              "method": "generateText",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_44e1bb22",
              "filePath": "src\\lib\\learning-journey\\concept-learning-manager.ts",
              "lineNumber": 1102,
              "method": "generateText",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_ca729a9d",
              "filePath": "src\\lib\\learning-journey\\context-manager.ts",
              "lineNumber": 470,
              "method": "generateSummary",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_fa708e96",
              "filePath": "src\\lib\\learning-journey\\context-manager.ts",
              "lineNumber": 1031,
              "method": "generateSummary",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_d18c12a2",
              "filePath": "src\\lib\\plot\\checker.ts",
              "lineNumber": 768,
              "method": "generateText",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_d18c12a2",
              "filePath": "src\\lib\\plot\\checker.ts",
              "lineNumber": 768,
              "method": "generateText",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_b525b719",
              "filePath": "src\\lib\\plot\\checker.ts",
              "lineNumber": 768,
              "method": "generateText",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_798d91ff",
              "filePath": "src\\lib\\plot\\section\\index.ts",
              "lineNumber": 397,
              "method": "generateText",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_798d91ff",
              "filePath": "src\\lib\\plot\\section\\index.ts",
              "lineNumber": 397,
              "method": "generateText",
              "purposes": [
                "generate"
              ]
            },
            {
              "callId": "call_25985289",
              "filePath": "src\\lib\\plot\\section\\index.ts",
              "lineNumber": 397,
              "method": "generateText",
              "purposes": [
                "generate"
              ]
            }
          ],
          "count": 26,
          "severity": "high"
        },
        {
          "purpose": "生成_分析_generate",
          "calls": [
            {
              "callId": "call_cced1d04",
              "filePath": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
              "lineNumber": 166,
              "method": "generateText",
              "purposes": [
                "生成",
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_12be75a9",
              "filePath": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
              "lineNumber": 154,
              "method": "generateContent",
              "purposes": [
                "生成",
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_815968e8",
              "filePath": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
              "lineNumber": 166,
              "method": "generateText",
              "purposes": [
                "生成",
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_9c35b55d",
              "filePath": "src\\lib\\analysis\\adapters\\interfaces.ts",
              "lineNumber": 21,
              "method": "generateText",
              "purposes": [
                "生成",
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_e8daeaad",
              "filePath": "src\\lib\\analysis\\adapters\\interfaces.ts",
              "lineNumber": 40,
              "method": "generateContent",
              "purposes": [
                "生成",
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_f992fda8",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 195,
              "method": "generateText",
              "purposes": [
                "生成",
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_443277df",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 198,
              "method": "generateText",
              "purposes": [
                "生成",
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_f992fda8",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 195,
              "method": "generateText",
              "purposes": [
                "生成",
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_443277df",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 198,
              "method": "generateText",
              "purposes": [
                "生成",
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_391bd0db",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 195,
              "method": "generateText",
              "purposes": [
                "生成",
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_1896b4ce",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 198,
              "method": "generateText",
              "purposes": [
                "生成",
                "分析",
                "generate"
              ]
            }
          ],
          "count": 11,
          "severity": "high"
        },
        {
          "purpose": "分析_analyze",
          "calls": [
            {
              "callId": "call_462fa399",
              "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
              "lineNumber": 708,
              "method": "analyzeCharacter",
              "purposes": [
                "分析",
                "analyze"
              ]
            },
            {
              "callId": "call_e72a01ca",
              "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
              "lineNumber": 820,
              "method": "analyzeStyle",
              "purposes": [
                "分析",
                "analyze"
              ]
            },
            {
              "callId": "call_0459ffc7",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 535,
              "method": "analyzeCharacter",
              "purposes": [
                "分析",
                "analyze"
              ]
            },
            {
              "callId": "call_4bc217e9",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 536,
              "method": "analyzeCharacter",
              "purposes": [
                "分析",
                "analyze"
              ]
            },
            {
              "callId": "call_818d1a06",
              "filePath": "src\\lib\\analysis\\services\\character\\interfaces.ts",
              "lineNumber": 24,
              "method": "analyzeCharacter",
              "purposes": [
                "分析",
                "analyze"
              ]
            },
            {
              "callId": "call_0225a6e2",
              "filePath": "src\\lib\\analysis\\services\\style\\interfaces.ts",
              "lineNumber": 53,
              "method": "analyzeStyle",
              "purposes": [
                "分析",
                "analyze"
              ]
            },
            {
              "callId": "call_0dc98618",
              "filePath": "src\\lib\\characters\\core\\interfaces.ts",
              "lineNumber": 847,
              "method": "analyzeCharacter",
              "purposes": [
                "分析",
                "analyze"
              ]
            },
            {
              "callId": "call_239288c0",
              "filePath": "src\\lib\\characters\\manager.ts",
              "lineNumber": 463,
              "method": "analyzeCharacter",
              "purposes": [
                "分析",
                "analyze"
              ]
            }
          ],
          "count": 8,
          "severity": "high"
        },
        {
          "purpose": "生成_分析_構築_generate_build",
          "calls": [
            {
              "callId": "call_1948d757",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "purposes": [
                "生成",
                "分析",
                "構築",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_1948d757",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "purposes": [
                "生成",
                "分析",
                "構築",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_580712e8",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 390,
              "method": "generateText",
              "purposes": [
                "生成",
                "分析",
                "構築",
                "generate",
                "build"
              ]
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "purpose": "生成_generate_build",
          "calls": [
            {
              "callId": "call_1c9a2ed2",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 689,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_3ab7176e",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 716,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_18183c83",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 750,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_1c9a2ed2",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 689,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_3ab7176e",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 716,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_18183c83",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 750,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_874c5434",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 689,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_5ef55a3b",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 716,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_1ba6677b",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 750,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_5a61e7e9",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 461,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_cd18ed56",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 688,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_42f50d23",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 461,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_afc20166",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 688,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_6d2bdcd3",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "lineNumber": 379,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "build"
              ]
            }
          ],
          "count": 14,
          "severity": "high"
        },
        {
          "purpose": "生成_分析_generate_analyze",
          "calls": [
            {
              "callId": "call_7479181a",
              "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
              "lineNumber": 606,
              "method": "analyzeCharacter",
              "purposes": [
                "生成",
                "分析",
                "generate",
                "analyze"
              ]
            },
            {
              "callId": "call_e3499eaa",
              "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
              "lineNumber": 145,
              "method": "analyzeStyle",
              "purposes": [
                "生成",
                "分析",
                "generate",
                "analyze"
              ]
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "purpose": "設計_generate",
          "calls": [
            {
              "callId": "call_0573e5a0",
              "filePath": "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
              "lineNumber": 1580,
              "method": "generateContent",
              "purposes": [
                "設計",
                "generate"
              ]
            },
            {
              "callId": "call_f7dee58e",
              "filePath": "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
              "lineNumber": 1580,
              "method": "generateContent",
              "purposes": [
                "設計",
                "generate"
              ]
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "purpose": "分析_generate_create",
          "calls": [
            {
              "callId": "call_69171be2",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 182,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate",
                "create"
              ]
            },
            {
              "callId": "call_ce99d105",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 182,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate",
                "create"
              ]
            },
            {
              "callId": "call_a225d13e",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "lineNumber": 1030,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate",
                "create"
              ]
            },
            {
              "callId": "call_a225d13e",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "lineNumber": 1030,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate",
                "create"
              ]
            },
            {
              "callId": "call_40dce312",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "lineNumber": 1030,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate",
                "create"
              ]
            }
          ],
          "count": 5,
          "severity": "high"
        },
        {
          "purpose": "分析_generate",
          "calls": [
            {
              "callId": "call_0696c96c",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 290,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_ed6830f7",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 290,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_a757ae0b",
              "filePath": "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts",
              "lineNumber": 111,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_a757ae0b",
              "filePath": "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts",
              "lineNumber": 111,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_821ffddd",
              "filePath": "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts",
              "lineNumber": 111,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_79363298",
              "filePath": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
              "lineNumber": 787,
              "method": "generateContent",
              "purposes": [
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_d213a88b",
              "filePath": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
              "lineNumber": 863,
              "method": "generateContent",
              "purposes": [
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_f89b139e",
              "filePath": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
              "lineNumber": 787,
              "method": "generateContent",
              "purposes": [
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_ab66f212",
              "filePath": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
              "lineNumber": 863,
              "method": "generateContent",
              "purposes": [
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_071f4b24",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 1897,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_cdcdc465",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2336,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_3e4b2368",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 1897,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_8f565bb1",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2336,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_796b89ed",
              "filePath": "src\\lib\\learning-journey\\context-manager.ts",
              "lineNumber": 515,
              "method": "generateSummary",
              "purposes": [
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_e0f3f264",
              "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
              "lineNumber": 1028,
              "method": "executeAIAnalysis",
              "purposes": [
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_4be62073",
              "filePath": "src\\lib\\memory\\text-analyzer-service.ts",
              "lineNumber": 335,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_4be62073",
              "filePath": "src\\lib\\memory\\text-analyzer-service.ts",
              "lineNumber": 335,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate"
              ]
            },
            {
              "callId": "call_725f8327",
              "filePath": "src\\lib\\memory\\text-analyzer-service.ts",
              "lineNumber": 335,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate"
              ]
            }
          ],
          "count": 18,
          "severity": "high"
        },
        {
          "purpose": "生成_分析_構築_generate_create",
          "calls": [
            {
              "callId": "call_edfc52ac",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 791,
              "method": "generateText",
              "purposes": [
                "生成",
                "分析",
                "構築",
                "generate",
                "create"
              ]
            },
            {
              "callId": "call_61ed4d09",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 791,
              "method": "generateText",
              "purposes": [
                "生成",
                "分析",
                "構築",
                "generate",
                "create"
              ]
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "purpose": "generate_create",
          "calls": [
            {
              "callId": "call_1f3e5a77",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 881,
              "method": "generateText",
              "purposes": [
                "generate",
                "create"
              ]
            },
            {
              "callId": "call_3e476d9e",
              "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
              "lineNumber": 881,
              "method": "generateText",
              "purposes": [
                "generate",
                "create"
              ]
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "purpose": "generate_analyze",
          "calls": [
            {
              "callId": "call_f85b10f3",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 342,
              "method": "generateText",
              "purposes": [
                "generate",
                "analyze"
              ]
            },
            {
              "callId": "call_47799132",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 401,
              "method": "generateText",
              "purposes": [
                "generate",
                "analyze"
              ]
            },
            {
              "callId": "call_222993c5",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 464,
              "method": "generateText",
              "purposes": [
                "generate",
                "analyze"
              ]
            },
            {
              "callId": "call_ef390022",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 342,
              "method": "generateText",
              "purposes": [
                "generate",
                "analyze"
              ]
            },
            {
              "callId": "call_8c4a1ae8",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 401,
              "method": "generateText",
              "purposes": [
                "generate",
                "analyze"
              ]
            },
            {
              "callId": "call_e73439f8",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 464,
              "method": "generateText",
              "purposes": [
                "generate",
                "analyze"
              ]
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "purpose": "生成_分析_analyze",
          "calls": [
            {
              "callId": "call_129ddf5b",
              "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
              "lineNumber": 89,
              "method": "analyzeCharacter",
              "purposes": [
                "生成",
                "分析",
                "analyze"
              ]
            },
            {
              "callId": "call_21d614e0",
              "filePath": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
              "lineNumber": 103,
              "method": "analyzeStyle",
              "purposes": [
                "生成",
                "分析",
                "analyze"
              ]
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "purpose": "generate_build",
          "calls": [
            {
              "callId": "call_4ad1c568",
              "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
              "lineNumber": 218,
              "method": "generateText",
              "purposes": [
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_4ad1c568",
              "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
              "lineNumber": 218,
              "method": "generateText",
              "purposes": [
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_fbfd72f9",
              "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
              "lineNumber": 218,
              "method": "generateText",
              "purposes": [
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_71c3a3c1",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 773,
              "method": "generateText",
              "purposes": [
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_71c3a3c1",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 773,
              "method": "generateText",
              "purposes": [
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_5414a8ea",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 773,
              "method": "generateText",
              "purposes": [
                "generate",
                "build"
              ]
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "purpose": "分析_構築_generate_create_build",
          "calls": [
            {
              "callId": "call_d3d90909",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 167,
              "method": "generateText",
              "purposes": [
                "分析",
                "構築",
                "generate",
                "create",
                "build"
              ]
            },
            {
              "callId": "call_b39b77f9",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 167,
              "method": "generateText",
              "purposes": [
                "分析",
                "構築",
                "generate",
                "create",
                "build"
              ]
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "purpose": "分析_generate_build",
          "calls": [
            {
              "callId": "call_2d6b1ee3",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 395,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_acc16f7d",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 602,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_7e6621ef",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2139,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_c3189908",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 395,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_7a25db3c",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 602,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_360a38f7",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 2139,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_59aa5683",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 671,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_2c81c351",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 717,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_59aa5683",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 671,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_2c81c351",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 717,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_5f96b84e",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 622,
              "method": "performAICoherenceAnalysis",
              "purposes": [
                "分析",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_a6c8c1d7",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 661,
              "method": "performAIObjectiveAnalysis",
              "purposes": [
                "分析",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_503d7717",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 707,
              "method": "performAIEmotionalAnalysis",
              "purposes": [
                "分析",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_5fcbc634",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 755,
              "method": "performAIImprovementAnalysis",
              "purposes": [
                "分析",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_7234ed6d",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 671,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_25880c3e",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 717,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate",
                "build"
              ]
            }
          ],
          "count": 16,
          "severity": "high"
        },
        {
          "purpose": "生成_分析_generate_build",
          "calls": [
            {
              "callId": "call_306575ca",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 710,
              "method": "generateText",
              "purposes": [
                "生成",
                "分析",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_55a9819f",
              "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
              "lineNumber": 710,
              "method": "generateText",
              "purposes": [
                "生成",
                "分析",
                "generate",
                "build"
              ]
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "purpose": "分析_評価_generate",
          "calls": [
            {
              "callId": "call_2f85bbc6",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 234,
              "method": "generateText",
              "purposes": [
                "分析",
                "評価",
                "generate"
              ]
            },
            {
              "callId": "call_2f85bbc6",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 234,
              "method": "generateText",
              "purposes": [
                "分析",
                "評価",
                "generate"
              ]
            },
            {
              "callId": "call_af323c00",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 234,
              "method": "generateText",
              "purposes": [
                "分析",
                "評価",
                "generate"
              ]
            },
            {
              "callId": "call_6adb174a",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "lineNumber": 1006,
              "method": "generateText",
              "purposes": [
                "分析",
                "評価",
                "generate"
              ]
            },
            {
              "callId": "call_6adb174a",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "lineNumber": 1006,
              "method": "generateText",
              "purposes": [
                "分析",
                "評価",
                "generate"
              ]
            },
            {
              "callId": "call_14ab93e8",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "lineNumber": 1006,
              "method": "generateText",
              "purposes": [
                "分析",
                "評価",
                "generate"
              ]
            }
          ],
          "count": 6,
          "severity": "high"
        },
        {
          "purpose": "作成_分析_評価_generate",
          "calls": [
            {
              "callId": "call_1f7dcda5",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 316,
              "method": "generateText",
              "purposes": [
                "作成",
                "分析",
                "評価",
                "generate"
              ]
            },
            {
              "callId": "call_1f7dcda5",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 316,
              "method": "generateText",
              "purposes": [
                "作成",
                "分析",
                "評価",
                "generate"
              ]
            },
            {
              "callId": "call_d8b4231a",
              "filePath": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
              "lineNumber": 316,
              "method": "generateText",
              "purposes": [
                "作成",
                "分析",
                "評価",
                "generate"
              ]
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "purpose": "生成_作成_generate",
          "calls": [
            {
              "callId": "call_3cf732e2",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 445,
              "method": "generateText",
              "purposes": [
                "生成",
                "作成",
                "generate"
              ]
            },
            {
              "callId": "call_3cf732e2",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 445,
              "method": "generateText",
              "purposes": [
                "生成",
                "作成",
                "generate"
              ]
            },
            {
              "callId": "call_47a728bd",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 445,
              "method": "generateText",
              "purposes": [
                "生成",
                "作成",
                "generate"
              ]
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "purpose": "構築_generate",
          "calls": [
            {
              "callId": "call_60439f63",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 626,
              "method": "generateText",
              "purposes": [
                "構築",
                "generate"
              ]
            },
            {
              "callId": "call_60439f63",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 626,
              "method": "generateText",
              "purposes": [
                "構築",
                "generate"
              ]
            },
            {
              "callId": "call_fd3f8227",
              "filePath": "src\\lib\\characters\\generators\\character-generator.ts",
              "lineNumber": 626,
              "method": "generateText",
              "purposes": [
                "構築",
                "generate"
              ]
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "purpose": "作成_generate",
          "calls": [
            {
              "callId": "call_3b4a4711",
              "filePath": "src\\lib\\characters\\utils\\character-utils.ts",
              "lineNumber": 159,
              "method": "generateText",
              "purposes": [
                "作成",
                "generate"
              ]
            },
            {
              "callId": "call_3b4a4711",
              "filePath": "src\\lib\\characters\\utils\\character-utils.ts",
              "lineNumber": 159,
              "method": "generateText",
              "purposes": [
                "作成",
                "generate"
              ]
            },
            {
              "callId": "call_0c1dd664",
              "filePath": "src\\lib\\characters\\utils\\character-utils.ts",
              "lineNumber": 159,
              "method": "generateText",
              "purposes": [
                "作成",
                "generate"
              ]
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "purpose": "生成_作成_generate_create",
          "calls": [
            {
              "callId": "call_b27aa071",
              "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
              "lineNumber": 183,
              "method": "generateText",
              "purposes": [
                "生成",
                "作成",
                "generate",
                "create"
              ]
            },
            {
              "callId": "call_b27aa071",
              "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
              "lineNumber": 183,
              "method": "generateText",
              "purposes": [
                "生成",
                "作成",
                "generate",
                "create"
              ]
            },
            {
              "callId": "call_bf02a47e",
              "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
              "lineNumber": 183,
              "method": "generateText",
              "purposes": [
                "生成",
                "作成",
                "generate",
                "create"
              ]
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "purpose": "生成_作成_generate_build",
          "calls": [
            {
              "callId": "call_0e0ffa92",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "lineNumber": 379,
              "method": "generateText",
              "purposes": [
                "生成",
                "作成",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_0e0ffa92",
              "filePath": "src\\lib\\foreshadowing\\engine.ts",
              "lineNumber": 379,
              "method": "generateText",
              "purposes": [
                "生成",
                "作成",
                "generate",
                "build"
              ]
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "purpose": "評価_判断_generate",
          "calls": [
            {
              "callId": "call_18fd8fd2",
              "filePath": "src\\lib\\foreshadowing\\manager.ts",
              "lineNumber": 435,
              "method": "generateText",
              "purposes": [
                "評価",
                "判断",
                "generate"
              ]
            },
            {
              "callId": "call_18fd8fd2",
              "filePath": "src\\lib\\foreshadowing\\manager.ts",
              "lineNumber": 435,
              "method": "generateText",
              "purposes": [
                "評価",
                "判断",
                "generate"
              ]
            },
            {
              "callId": "call_b224c7e0",
              "filePath": "src\\lib\\foreshadowing\\manager.ts",
              "lineNumber": 435,
              "method": "generateText",
              "purposes": [
                "評価",
                "判断",
                "generate"
              ]
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "purpose": "分析_構築_generate_build",
          "calls": [
            {
              "callId": "call_aea0563d",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "lineNumber": 408,
              "method": "generateText",
              "purposes": [
                "分析",
                "構築",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_aea0563d",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "lineNumber": 408,
              "method": "generateText",
              "purposes": [
                "分析",
                "構築",
                "generate",
                "build"
              ]
            },
            {
              "callId": "call_7b8b64d8",
              "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
              "lineNumber": 408,
              "method": "generateText",
              "purposes": [
                "分析",
                "構築",
                "generate",
                "build"
              ]
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "purpose": "生成_設計_generate",
          "calls": [
            {
              "callId": "call_4da878fb",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 248,
              "method": "generateText",
              "purposes": [
                "生成",
                "設計",
                "generate"
              ]
            },
            {
              "callId": "call_871fb462",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 442,
              "method": "generateText",
              "purposes": [
                "生成",
                "設計",
                "generate"
              ]
            },
            {
              "callId": "call_871fb462",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 442,
              "method": "generateText",
              "purposes": [
                "生成",
                "設計",
                "generate"
              ]
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "purpose": "生成",
          "calls": [
            {
              "callId": "call_2464bf38",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 319,
              "method": "executeGeminiRequest",
              "purposes": [
                "生成"
              ]
            },
            {
              "callId": "call_340b44dd",
              "filePath": "src\\lib\\generation\\gemini-client.ts",
              "lineNumber": 326,
              "method": "executeGeminiRequest",
              "purposes": [
                "生成"
              ]
            }
          ],
          "count": 2,
          "severity": "low"
        },
        {
          "purpose": "分析_generate_analyze_build",
          "calls": [
            {
              "callId": "call_b821aa55",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate",
                "analyze",
                "build"
              ]
            },
            {
              "callId": "call_b821aa55",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate",
                "analyze",
                "build"
              ]
            },
            {
              "callId": "call_01bf8aff",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 632,
              "method": "generateText",
              "purposes": [
                "分析",
                "generate",
                "analyze",
                "build"
              ]
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "purpose": "分析_generate_analyze",
          "calls": [
            {
              "callId": "call_a643be4b",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 138,
              "method": "performAICoherenceAnalysis",
              "purposes": [
                "分析",
                "generate",
                "analyze"
              ]
            },
            {
              "callId": "call_2f7dba2f",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 201,
              "method": "performAIObjectiveAnalysis",
              "purposes": [
                "分析",
                "generate",
                "analyze"
              ]
            },
            {
              "callId": "call_8749b3de",
              "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
              "lineNumber": 276,
              "method": "performAIEmotionalAnalysis",
              "purposes": [
                "分析",
                "generate",
                "analyze"
              ]
            }
          ],
          "count": 3,
          "severity": "medium"
        },
        {
          "purpose": "生成_generate_design",
          "calls": [
            {
              "callId": "call_a403e1b8",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 685,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "design"
              ]
            },
            {
              "callId": "call_f586e8f0",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 853,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "design"
              ]
            },
            {
              "callId": "call_a403e1b8",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 685,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "design"
              ]
            },
            {
              "callId": "call_f586e8f0",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 853,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "design"
              ]
            },
            {
              "callId": "call_73b771d0",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 685,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "design"
              ]
            },
            {
              "callId": "call_caf3f08f",
              "filePath": "src\\lib\\plot\\section\\section-designer.ts",
              "lineNumber": 853,
              "method": "generateText",
              "purposes": [
                "生成",
                "generate",
                "design"
              ]
            }
          ],
          "count": 6,
          "severity": "high"
        }
      ]
    },
    "detailedReports": {
      "fileDistribution": {
        "detailed": [
          {
            "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "count": 22
          },
          {
            "file": "src\\lib\\generation\\gemini-client.ts",
            "count": 22
          },
          {
            "file": "src\\lib\\plot\\section\\section-designer.ts",
            "count": 21
          },
          {
            "file": "src\\lib\\plot\\section\\section-analyzer.ts",
            "count": 20
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
            "count": 15
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
            "count": 11
          },
          {
            "file": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
            "count": 11
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "count": 10
          },
          {
            "file": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
            "count": 10
          },
          {
            "file": "src\\lib\\characters\\generators\\character-generator.ts",
            "count": 9
          },
          {
            "file": "src\\lib\\generation\\engine.ts",
            "count": 9
          },
          {
            "file": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
            "count": 7
          },
          {
            "file": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
            "count": 7
          },
          {
            "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
            "count": 6
          },
          {
            "file": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
            "count": 6
          },
          {
            "file": "src\\lib\\foreshadowing\\engine.ts",
            "count": 6
          },
          {
            "file": "src\\lib\\foreshadowing\\resolution-advisor.ts",
            "count": 5
          },
          {
            "file": "src\\lib\\learning-journey\\context-manager.ts",
            "count": 5
          },
          {
            "file": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
            "count": 4
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
            "count": 4
          },
          {
            "file": "src\\lib\\generation\\engine\\chapter-generator.ts",
            "count": 4
          },
          {
            "file": "src\\lib\\learning-journey\\index.ts",
            "count": 4
          },
          {
            "file": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
            "count": 3
          },
          {
            "file": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
            "count": 3
          },
          {
            "file": "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts",
            "count": 3
          },
          {
            "file": "src\\lib\\characters\\utils\\character-utils.ts",
            "count": 3
          },
          {
            "file": "src\\lib\\foreshadowing\\auto-generator.ts",
            "count": 3
          },
          {
            "file": "src\\lib\\foreshadowing\\manager.ts",
            "count": 3
          },
          {
            "file": "src\\lib\\learning-journey\\concept-learning-manager.ts",
            "count": 3
          },
          {
            "file": "src\\lib\\memory\\text-analyzer-service.ts",
            "count": 3
          },
          {
            "file": "src\\lib\\plot\\checker.ts",
            "count": 3
          },
          {
            "file": "src\\lib\\plot\\section\\index.ts",
            "count": 3
          },
          {
            "file": "src\\lib\\analysis\\adapters\\interfaces.ts",
            "count": 2
          },
          {
            "file": "src\\app\\api\\generation\\chapter\\route.ts",
            "count": 1
          },
          {
            "file": "src\\lib\\analysis\\services\\character\\interfaces.ts",
            "count": 1
          },
          {
            "file": "src\\lib\\analysis\\services\\style\\interfaces.ts",
            "count": 1
          },
          {
            "file": "src\\lib\\characters\\core\\interfaces.ts",
            "count": 1
          },
          {
            "file": "src\\lib\\characters\\manager.ts",
            "count": 1
          }
        ],
        "byFileType": {
          ".ts": 255
        },
        "hotspots": [
          {
            "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "count": 22,
            "severity": "high"
          },
          {
            "file": "src\\lib\\generation\\gemini-client.ts",
            "count": 22,
            "severity": "high"
          },
          {
            "file": "src\\lib\\plot\\section\\section-designer.ts",
            "count": 21,
            "severity": "high"
          },
          {
            "file": "src\\lib\\plot\\section\\section-analyzer.ts",
            "count": 20,
            "severity": "medium"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
            "count": 15,
            "severity": "medium"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
            "count": 11,
            "severity": "medium"
          },
          {
            "file": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
            "count": 11,
            "severity": "medium"
          }
        ],
        "recommendations": [
          "AI呼び出しが集中しているファイルのリファクタリングを検討してください",
          "責任の分離と機能の分割を検討してください"
        ]
      },
      "methodAnalysis": {
        "detailedMethods": [
          {
            "method": "generateChapter",
            "count": 4,
            "fileCount": 2,
            "purposes": [
              "生成",
              "generate"
            ],
            "uniqueParameterPatterns": 1,
            "consistency": "high"
          },
          {
            "method": "generateText",
            "count": 187,
            "fileCount": 28,
            "purposes": [
              "生成",
              "generate",
              "create",
              "分析",
              "構築",
              "build",
              "作成",
              "analyze",
              "評価",
              "判断",
              "設計",
              "design"
            ],
            "uniqueParameterPatterns": 8,
            "consistency": "low"
          },
          {
            "method": "generateContent",
            "count": 16,
            "fileCount": 5,
            "purposes": [
              "生成",
              "分析",
              "generate",
              "設計"
            ],
            "uniqueParameterPatterns": 3,
            "consistency": "medium"
          },
          {
            "method": "analyzeCharacter",
            "count": 10,
            "fileCount": 6,
            "purposes": [
              "作成",
              "分析",
              "generate",
              "create",
              "analyze",
              "生成"
            ],
            "uniqueParameterPatterns": 0,
            "consistency": "medium"
          },
          {
            "method": "analyzeStyle",
            "count": 4,
            "fileCount": 4,
            "purposes": [
              "分析",
              "analyze",
              "生成",
              "generate"
            ],
            "uniqueParameterPatterns": 0,
            "consistency": "medium"
          },
          {
            "method": "buildAnalysisPrompt",
            "count": 2,
            "fileCount": 1,
            "purposes": [
              "分析",
              "評価",
              "構築",
              "generate",
              "evaluate",
              "build"
            ],
            "uniqueParameterPatterns": 1,
            "consistency": "high"
          },
          {
            "method": "validateApiKey",
            "count": 4,
            "fileCount": 3,
            "purposes": [
              "生成",
              "分析"
            ],
            "uniqueParameterPatterns": 0,
            "consistency": "medium"
          },
          {
            "method": "setModelMap",
            "count": 3,
            "fileCount": 2,
            "purposes": [],
            "uniqueParameterPatterns": 1,
            "consistency": "high"
          },
          {
            "method": "getModelInfo",
            "count": 3,
            "fileCount": 2,
            "purposes": [],
            "uniqueParameterPatterns": 1,
            "consistency": "high"
          },
          {
            "method": "generateStory",
            "count": 1,
            "fileCount": 1,
            "purposes": [
              "生成",
              "generate"
            ],
            "uniqueParameterPatterns": 1,
            "consistency": "high"
          },
          {
            "method": "executeGeminiRequest",
            "count": 3,
            "fileCount": 1,
            "purposes": [
              "生成",
              "generate"
            ],
            "uniqueParameterPatterns": 2,
            "consistency": "medium"
          },
          {
            "method": "generateSummary",
            "count": 5,
            "fileCount": 1,
            "purposes": [
              "generate",
              "分析",
              "create",
              "analyze",
              "生成"
            ],
            "uniqueParameterPatterns": 0,
            "consistency": "medium"
          },
          {
            "method": "executeAIAnalysis",
            "count": 4,
            "fileCount": 1,
            "purposes": [
              "分析",
              "create",
              "生成",
              "generate",
              "analyze"
            ],
            "uniqueParameterPatterns": 1,
            "consistency": "high"
          },
          {
            "method": "prompt",
            "count": 1,
            "fileCount": 1,
            "purposes": [],
            "uniqueParameterPatterns": 0,
            "consistency": "medium"
          },
          {
            "method": "performAICoherenceAnalysis",
            "count": 2,
            "fileCount": 1,
            "purposes": [
              "分析",
              "generate",
              "analyze",
              "build"
            ],
            "uniqueParameterPatterns": 0,
            "consistency": "medium"
          },
          {
            "method": "performAIObjectiveAnalysis",
            "count": 2,
            "fileCount": 1,
            "purposes": [
              "分析",
              "generate",
              "analyze",
              "build"
            ],
            "uniqueParameterPatterns": 0,
            "consistency": "medium"
          },
          {
            "method": "performAIEmotionalAnalysis",
            "count": 2,
            "fileCount": 1,
            "purposes": [
              "分析",
              "generate",
              "analyze",
              "build"
            ],
            "uniqueParameterPatterns": 0,
            "consistency": "medium"
          },
          {
            "method": "performAIImprovementAnalysis",
            "count": 2,
            "fileCount": 1,
            "purposes": [
              "生成",
              "generate",
              "analyze",
              "分析",
              "build"
            ],
            "uniqueParameterPatterns": 0,
            "consistency": "medium"
          }
        ],
        "usagePatterns": {
          "generateChapter": {
            "frequency": 4,
            "distribution": 2,
            "consistency": "high",
            "primaryPurpose": "生成"
          },
          "generateText": {
            "frequency": 187,
            "distribution": 28,
            "consistency": "low",
            "primaryPurpose": "生成"
          },
          "generateContent": {
            "frequency": 16,
            "distribution": 5,
            "consistency": "medium",
            "primaryPurpose": "生成"
          },
          "analyzeCharacter": {
            "frequency": 10,
            "distribution": 6,
            "consistency": "medium",
            "primaryPurpose": "作成"
          },
          "analyzeStyle": {
            "frequency": 4,
            "distribution": 4,
            "consistency": "medium",
            "primaryPurpose": "分析"
          },
          "buildAnalysisPrompt": {
            "frequency": 2,
            "distribution": 1,
            "consistency": "high",
            "primaryPurpose": "分析"
          },
          "validateApiKey": {
            "frequency": 4,
            "distribution": 3,
            "consistency": "medium",
            "primaryPurpose": "生成"
          },
          "setModelMap": {
            "frequency": 3,
            "distribution": 2,
            "consistency": "high",
            "primaryPurpose": "unknown"
          },
          "getModelInfo": {
            "frequency": 3,
            "distribution": 2,
            "consistency": "high",
            "primaryPurpose": "unknown"
          },
          "generateStory": {
            "frequency": 1,
            "distribution": 1,
            "consistency": "high",
            "primaryPurpose": "生成"
          },
          "executeGeminiRequest": {
            "frequency": 3,
            "distribution": 1,
            "consistency": "medium",
            "primaryPurpose": "生成"
          },
          "generateSummary": {
            "frequency": 5,
            "distribution": 1,
            "consistency": "medium",
            "primaryPurpose": "generate"
          },
          "executeAIAnalysis": {
            "frequency": 4,
            "distribution": 1,
            "consistency": "high",
            "primaryPurpose": "分析"
          },
          "prompt": {
            "frequency": 1,
            "distribution": 1,
            "consistency": "medium",
            "primaryPurpose": "unknown"
          },
          "performAICoherenceAnalysis": {
            "frequency": 2,
            "distribution": 1,
            "consistency": "medium",
            "primaryPurpose": "分析"
          },
          "performAIObjectiveAnalysis": {
            "frequency": 2,
            "distribution": 1,
            "consistency": "medium",
            "primaryPurpose": "分析"
          },
          "performAIEmotionalAnalysis": {
            "frequency": 2,
            "distribution": 1,
            "consistency": "medium",
            "primaryPurpose": "分析"
          },
          "performAIImprovementAnalysis": {
            "frequency": 2,
            "distribution": 1,
            "consistency": "medium",
            "primaryPurpose": "生成"
          }
        },
        "recommendations": [
          {
            "type": "inconsistent_usage",
            "methods": [
              "generateText"
            ],
            "suggestion": "メソッドの使用方法を標準化してください"
          },
          {
            "type": "overused_methods",
            "methods": [
              "generateText",
              "generateContent"
            ],
            "suggestion": "ヘルパー関数またはサービスクラスの作成を検討してください"
          }
        ]
      },
      "promptAnalysis": {
        "totalPrompts": 594,
        "lengthStatistics": {
          "min": 21,
          "max": 996,
          "average": 301,
          "median": 256,
          "distribution": [
            21,
            21,
            21,
            21,
            21,
            23,
            23,
            23,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            27,
            27,
            27,
            27,
            27,
            29,
            29,
            29,
            29,
            30,
            30,
            30,
            32,
            32,
            32,
            34,
            34,
            37,
            37,
            37,
            38,
            38,
            39,
            39,
            39,
            39,
            40,
            40,
            43,
            43,
            43,
            43,
            43,
            43,
            52,
            54,
            54,
            56,
            58,
            58,
            58,
            61,
            61,
            61,
            61,
            65,
            65,
            65,
            68,
            70,
            70,
            70,
            72,
            74,
            74,
            89,
            89,
            89,
            89,
            89,
            89,
            107,
            107,
            107,
            107,
            107,
            107,
            107,
            107,
            107,
            107,
            107,
            107,
            107,
            107,
            107,
            107,
            107,
            107,
            111,
            111,
            127,
            127,
            127,
            127,
            127,
            127,
            129,
            129,
            129,
            129,
            129,
            129,
            132,
            132,
            132,
            133,
            139,
            139,
            139,
            140,
            141,
            141,
            141,
            141,
            143,
            146,
            146,
            146,
            150,
            150,
            150,
            150,
            155,
            155,
            158,
            158,
            158,
            158,
            158,
            158,
            158,
            158,
            158,
            158,
            158,
            158,
            162,
            162,
            162,
            162,
            164,
            164,
            164,
            164,
            164,
            164,
            166,
            166,
            167,
            167,
            173,
            173,
            176,
            176,
            177,
            177,
            177,
            177,
            177,
            177,
            177,
            177,
            177,
            177,
            177,
            177,
            178,
            178,
            178,
            178,
            178,
            178,
            180,
            180,
            180,
            180,
            180,
            180,
            181,
            181,
            181,
            182,
            182,
            182,
            182,
            183,
            183,
            183,
            183,
            183,
            183,
            183,
            183,
            183,
            186,
            186,
            186,
            186,
            186,
            186,
            188,
            188,
            188,
            188,
            194,
            196,
            198,
            203,
            203,
            203,
            208,
            208,
            208,
            208,
            224,
            224,
            238,
            238,
            238,
            238,
            238,
            238,
            256,
            256,
            256,
            256,
            256,
            256,
            260,
            260,
            260,
            267,
            267,
            267,
            267,
            267,
            282,
            282,
            282,
            282,
            285,
            285,
            285,
            285,
            290,
            290,
            290,
            290,
            290,
            290,
            298,
            298,
            304,
            304,
            304,
            304,
            304,
            304,
            304,
            304,
            305,
            305,
            305,
            306,
            306,
            306,
            308,
            308,
            308,
            308,
            308,
            308,
            308,
            308,
            308,
            309,
            309,
            325,
            325,
            325,
            325,
            330,
            330,
            330,
            330,
            330,
            330,
            332,
            332,
            332,
            337,
            337,
            337,
            338,
            338,
            338,
            339,
            339,
            339,
            339,
            339,
            339,
            339,
            339,
            344,
            348,
            348,
            356,
            356,
            356,
            356,
            376,
            401,
            401,
            401,
            401,
            401,
            401,
            401,
            401,
            414,
            414,
            414,
            414,
            414,
            414,
            418,
            418,
            418,
            418,
            418,
            418,
            420,
            420,
            420,
            420,
            421,
            421,
            421,
            421,
            423,
            423,
            423,
            423,
            427,
            427,
            432,
            432,
            432,
            432,
            432,
            432,
            432,
            432,
            432,
            432,
            432,
            432,
            441,
            441,
            441,
            441,
            447,
            457,
            457,
            470,
            470,
            470,
            485,
            485,
            485,
            485,
            519,
            519,
            519,
            524,
            524,
            524,
            524,
            524,
            524,
            524,
            524,
            524,
            534,
            534,
            534,
            541,
            541,
            541,
            599,
            599,
            602,
            602,
            602,
            602,
            602,
            602,
            602,
            602,
            602,
            602,
            602,
            602,
            606,
            606,
            606,
            611,
            611,
            616,
            616,
            616,
            616,
            616,
            616,
            616,
            616,
            622,
            622,
            683,
            683,
            720,
            720,
            720,
            720,
            720,
            720,
            745,
            745,
            745,
            745,
            761,
            761,
            761,
            761,
            761,
            761,
            761,
            761,
            761,
            800,
            800,
            800,
            800,
            800,
            800,
            805,
            805,
            833,
            833,
            833,
            833,
            906,
            906,
            906,
            996,
            996,
            996,
            996,
            996,
            996
          ]
        },
        "contentAnalysis": {
          "topKeywords": {
            "generate": 267,
            "生成": 166,
            "chapter": 88,
            "章": 75,
            "分析": 71,
            "character": 61,
            "キャラクター": 55,
            "ストーリー": 45,
            "story": 34,
            "analyze": 30,
            "Chapter": 19,
            "シーン": 16,
            "小説": 16,
            "物語": 13,
            "Character": 12,
            "設定": 9,
            "create": 8,
            "scene": 8,
            "Scene": 7,
            "description": 6
          },
          "languageDistribution": {
            "english": 405
          },
          "purposeDistribution": {},
          "complexityDistribution": {
            "low": 394,
            "medium": 11
          }
        },
        "qualityMetrics": {
          "wellStructured": 126,
          "needsImprovement": 56,
          "templateUsage": 16
        },
        "novelSpecificInsights": {
          "genrePatterns": {},
          "narrativeElements": {
            "third_person": 405
          },
          "characterDevelopment": 75,
          "worldBuilding": 0
        }
      }
    }
  },
  "recommendations": {
    "optimizationRecommendations": [
      {
        "type": "EXACT_DUPLICATES",
        "severity": "CRITICAL",
        "priority": 1,
        "count": 44,
        "description": "完全に重複するAI呼び出しが検出されました",
        "suggestion": "重複したコードをリファクタリングして共通関数を作成してください",
        "impact": "パフォーマンス向上、コスト削減、保守性向上",
        "details": [
          {
            "hash": "002f1430c4a1c8bbb9e1ca504a580ed2",
            "calls": [
              {
                "id": "call_1948d757",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "fileName": "character-depth-service.ts",
                "lineNumber": 390,
                "lineContent": "this.geminiClient.generateText(prompt, {",
                "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
                "callMethod": "generateText",
                "fullMatch": "geminiClient.generateText(",
                "context": {
                  "before": [
                    {
                      "lineNumber": 385,
                      "content": "// ジャンル適合性分析プロンプトを構築",
                      "indent": 12
                    },
                    {
                      "lineNumber": 386,
                      "content": "const prompt = this.buildGenreAnalysisPrompt(character, genre);",
                      "indent": 12
                    },
                    {
                      "lineNumber": 387,
                      "content": "",
                      "indent": 13
                    },
                    {
                      "lineNumber": 388,
                      "content": "// AI分析を実行",
                      "indent": 12
                    },
                    {
                      "lineNumber": 389,
                      "content": "const response = await apiThrottler.throttledRequest(() =>",
                      "indent": 12
                    }
                  ],
                  "current": {
                    "lineNumber": 390,
                    "content": "this.geminiClient.generateText(prompt, {",
                    "indent": 16
                  },
                  "after": [
                    {
                      "lineNumber": 391,
                      "content": "temperature: 0.3,",
                      "indent": 20
                    },
                    {
                      "lineNumber": 392,
                      "content": "targetLength: 800,",
                      "indent": 20
                    },
                    {
                      "lineNumber": 393,
                      "content": "purpose: 'analysis',",
                      "indent": 20
                    },
                    {
                      "lineNumber": 394,
                      "content": "responseFormat: 'json'",
                      "indent": 20
                    },
                    {
                      "lineNumber": 395,
                      "content": "})",
                      "indent": 16
                    }
                  ],
                  "functionContext": {
                    "functionName": "catch",
                    "startLine": 364,
                    "distance": 26
                  }
                },
                "prompts": [
                  {
                    "type": "pattern_match",
                    "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                    "fullLength": 761,
                    "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                    "hash": "3231e0c6916fe75790dc783a2e1b8b35",
                    "keywords": [
                      "分析",
                      "生成",
                      "character",
                      "generate"
                    ],
                    "sentiment": "neutral",
                    "complexity": "low",
                    "language": "english",
                    "novelElements": {
                      "genres": [],
                      "perspective": "third_person",
                      "tense": "present"
                    }
                  },
                  {
                    "type": "pattern_match",
                    "content": "\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: ",
                    "fullLength": 267,
                    "truncatedContent": "\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: ",
                    "hash": "1fb0292de1d0158a628ab39a27644d03",
                    "keywords": [
                      "生成"
                    ],
                    "sentiment": "neutral",
                    "complexity": "low",
                    "language": "english",
                    "novelElements": {
                      "genres": [],
                      "perspective": "third_person",
                      "tense": "present"
                    }
                  },
                  {
                    "type": "pattern_match",
                    "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                    "fullLength": 761,
                    "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                    "hash": "3231e0c6916fe75790dc783a2e1b8b35",
                    "keywords": [
                      "分析",
                      "生成",
                      "character",
                      "generate"
                    ],
                    "sentiment": "neutral",
                    "complexity": "low",
                    "language": "english",
                    "novelElements": {
                      "genres": [],
                      "perspective": "third_person",
                      "tense": "present"
                    }
                  },
                  {
                    "type": "template_literal",
                    "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                    "fullLength": 761,
                    "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                    "hash": "3231e0c6916fe75790dc783a2e1b8b35",
                    "hasVariables": false,
                    "variableCount": 0
                  },
                  {
                    "type": "method_based",
                    "suggestedPurpose": "buildGenreAnalysisPrompt",
                    "relatedMethods": [
                      "buildGenreAnalysisPrompt"
                    ],
                    "confidence": "medium"
                  }
                ],
                "expectedOutputs": [
                  {
                    "type": "type_annotation",
                    "types": [
                      ": Promise<DepthRecommendation[]>"
                    ],
                    "extractedTypes": [
                      "DepthRecommendation[]>"
                    ]
                  },
                  {
                    "type": "novel_structure",
                    "element": "title",
                    "confidence": "medium"
                  },
                  {
                    "type": "novel_structure",
                    "element": "character",
                    "confidence": "medium"
                  },
                  {
                    "type": "novel_structure",
                    "element": "description",
                    "confidence": "medium"
                  }
                ],
                "parameters": {
                  "temperature": {
                    "value": "0.3",
                    "source": "object_literal",
                    "confidence": "medium"
                  }
                },
                "novelSpecific": {
                  "hasNovelKeywords": true,
                  "detectedGenres": [
                    "SF"
                  ],
                  "storyElements": [],
                  "characterElements": [
                    "キャラクター",
                    "character"
                  ],
                  "narrativeStyle": "unknown"
                },
                "semanticAnalysis": {
                  "purposeIndicators": [
                    "生成",
                    "分析",
                    "構築",
                    "generate",
                    "build"
                  ],
                  "complexity": "low",
                  "dependencies": [
                    "urns",
                    "async",
                    "suggestGenreBasedTraits",
                    "character",
                    "Character",
                    "genre",
                    "string",
                    "Promise",
                    "DepthRecommendation",
                    "try"
                  ],
                  "outputUsage": {
                    "isAssigned": true,
                    "isAwaited": false,
                    "isChained": true,
                    "isLogged": false,
                    "isReturned": true
                  }
                },
                "duplicateHash": "002f1430c4a1c8bbb9e1ca504a580ed2"
              },
              {
                "id": "call_1948d757",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "fileName": "character-depth-service.ts",
                "lineNumber": 390,
                "lineContent": "this.geminiClient.generateText(prompt, {",
                "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
                "callMethod": "generateText",
                "fullMatch": "geminiClient.generateText(",
                "context": {
                  "before": [
                    {
                      "lineNumber": 385,
                      "content": "// ジャンル適合性分析プロンプトを構築",
                      "indent": 12
                    },
                    {
                      "lineNumber": 386,
                      "content": "const prompt = this.buildGenreAnalysisPrompt(character, genre);",
                      "indent": 12
                    },
                    {
                      "lineNumber": 387,
                      "content": "",
                      "indent": 13
                    },
                    {
                      "lineNumber": 388,
                      "content": "// AI分析を実行",
                      "indent": 12
                    },
                    {
                      "lineNumber": 389,
                      "content": "const response = await apiThrottler.throttledRequest(() =>",
                      "indent": 12
                    }
                  ],
                  "current": {
                    "lineNumber": 390,
                    "content": "this.geminiClient.generateText(prompt, {",
                    "indent": 16
                  },
                  "after": [
                    {
                      "lineNumber": 391,
                      "content": "temperature: 0.3,",
                      "indent": 20
                    },
                    {
                      "lineNumber": 392,
                      "content": "targetLength: 800,",
                      "indent": 20
                    },
                    {
                      "lineNumber": 393,
                      "content": "purpose: 'analysis',",
                      "indent": 20
                    },
                    {
                      "lineNumber": 394,
                      "content": "responseFormat: 'json'",
                      "indent": 20
                    },
                    {
                      "lineNumber": 395,
                      "content": "})",
                      "indent": 16
                    }
                  ],
                  "functionContext": {
                    "functionName": "catch",
                    "startLine": 364,
                    "distance": 26
                  }
                },
                "prompts": [
                  {
                    "type": "pattern_match",
                    "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                    "fullLength": 761,
                    "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                    "hash": "3231e0c6916fe75790dc783a2e1b8b35",
                    "keywords": [
                      "分析",
                      "生成",
                      "character",
                      "generate"
                    ],
                    "sentiment": "neutral",
                    "complexity": "low",
                    "language": "english",
                    "novelElements": {
                      "genres": [],
                      "perspective": "third_person",
                      "tense": "present"
                    }
                  },
                  {
                    "type": "pattern_match",
                    "content": "\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: ",
                    "fullLength": 267,
                    "truncatedContent": "\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: ",
                    "hash": "1fb0292de1d0158a628ab39a27644d03",
                    "keywords": [
                      "生成"
                    ],
                    "sentiment": "neutral",
                    "complexity": "low",
                    "language": "english",
                    "novelElements": {
                      "genres": [],
                      "perspective": "third_person",
                      "tense": "present"
                    }
                  },
                  {
                    "type": "pattern_match",
                    "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                    "fullLength": 761,
                    "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                    "hash": "3231e0c6916fe75790dc783a2e1b8b35",
                    "keywords": [
                      "分析",
                      "生成",
                      "character",
                      "generate"
                    ],
                    "sentiment": "neutral",
                    "complexity": "low",
                    "language": "english",
                    "novelElements": {
                      "genres": [],
                      "perspective": "third_person",
                      "tense": "present"
                    }
                  },
                  {
                    "type": "template_literal",
                    "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                    "fullLength": 761,
                    "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                    "hash": "3231e0c6916fe75790dc783a2e1b8b35",
                    "hasVariables": false,
                    "variableCount": 0
                  },
                  {
                    "type": "method_based",
                    "suggestedPurpose": "buildGenreAnalysisPrompt",
                    "relatedMethods": [
                      "buildGenreAnalysisPrompt"
                    ],
                    "confidence": "medium"
                  }
                ],
                "expectedOutputs": [
                  {
                    "type": "type_annotation",
                    "types": [
                      ": Promise<DepthRecommendation[]>"
                    ],
                    "extractedTypes": [
                      "DepthRecommendation[]>"
                    ]
                  },
                  {
                    "type": "novel_structure",
                    "element": "title",
                    "confidence": "medium"
                  },
                  {
                    "type": "novel_structure",
                    "element": "character",
                    "confidence": "medium"
                  },
                  {
                    "type": "novel_structure",
                    "element": "description",
                    "confidence": "medium"
                  }
                ],
                "parameters": {
                  "temperature": {
                    "value": "0.3",
                    "source": "object_literal",
                    "confidence": "medium"
                  }
                },
                "novelSpecific": {
                  "hasNovelKeywords": true,
                  "detectedGenres": [
                    "SF"
                  ],
                  "storyElements": [],
                  "characterElements": [
                    "キャラクター",
                    "character"
                  ],
                  "narrativeStyle": "unknown"
                },
                "semanticAnalysis": {
                  "purposeIndicators": [
                    "生成",
                    "分析",
                    "構築",
                    "generate",
                    "build"
                  ],
                  "complexity": "low",
                  "dependencies": [
                    "urns",
                    "async",
                    "suggestGenreBasedTraits",
                    "character",
                    "Character",
                    "genre",
                    "string",
                    "Promise",
                    "DepthRecommendation",
                    "try"
                  ],
                  "outputUsage": {
                    "isAssigned": true,
                    "isAwaited": false,
                    "isChained": true,
                    "isLogged": false,
                    "isReturned": true
                  }
                },
                "duplicateHash": "002f1430c4a1c8bbb9e1ca504a580ed2"
              }
            ],
            "count": 2,
            "severity": "high"
          },
          {
            "hash": "6656550b65c6ecd65464c7016e689e65",
            "calls": [
              {
                "id": "call_1c9a2ed2",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "fileName": "character-depth-service.ts",
                "lineNumber": 689,
                "lineContent": "this.geminiClient.generateText(prompt, {",
                "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
                "callMethod": "generateText",
                "fullMatch": "geminiClient.generateText(",
                "context": {
                  "before": [
                    {
                      "lineNumber": 684,
                      "content": "): Promise<CharacterArcRecommendation[]> {",
                      "indent": 4
                    },
                    {
                      "lineNumber": 685,
                      "content": "try {",
                      "indent": 8
                    },
                    {
                      "lineNumber": 686,
                      "content": "const prompt = this.buildArcOptimizationPrompt(character, analysisResult, chapterNumber);",
                      "indent": 12
                    },
                    {
                      "lineNumber": 687,
                      "content": "",
                      "indent": 13
                    },
                    {
                      "lineNumber": 688,
                      "content": "const response = await apiThrottler.throttledRequest(() =>",
                      "indent": 12
                    }
                  ],
                  "current": {
                    "lineNumber": 689,
                    "content": "this.geminiClient.generateText(prompt, {",
                    "indent": 16
                  },
                  "after": [
                    {
                      "lineNumber": 690,
                      "content": "temperature: 0.3,",
                      "indent": 20
                    },
                    {
                      "lineNumber": 691,
                      "content": "targetLength: 800,",
                      "indent": 20
                    },
                    {
                      "lineNumber": 692,
                      "content": "purpose: 'creation',",
                      "indent": 20
                    },
                    {
                      "lineNumber": 693,
                      "content": "responseFormat: 'json'",
                      "indent": 20
                    },
                    {
                      "lineNumber": 694,
                      "content": "})",
                      "indent": 16
                    }
                  ],
                  "functionContext": {
                    "functionName": "catch",
                    "startLine": 670,
                    "distance": 19
                  }
                },
                "prompts": [
                  {
                    "type": "pattern_match",
                    "content": "アーク推奨生成エラー: ${character.name}",
                    "fullLength": 29,
                    "truncatedContent": "アーク推奨生成エラー: ${character.name}",
                    "hash": "576e7d84ea2592c66dbf82ee784f8a60",
                    "keywords": [
                      "生成",
                      "character"
                    ],
                    "sentiment": "neutral",
                    "complexity": "low",
                    "language": "english",
                    "novelElements": {
                      "genres": [],
                      "perspective": "third_person",
                      "tense": "present"
                    }
                  },
                  {
                    "type": "method_based",
                    "suggestedPurpose": "CharacterAnalysis",
                    "relatedMethods": [
                      "CharacterAnalysis",
                      "buildArcOptimizationPrompt"
                    ],
                    "confidence": "medium"
                  }
                ],
                "expectedOutputs": [
                  {
                    "type": "type_annotation",
                    "types": [
                      ": CharacterAnalysisResult",
                      ": Promise<CharacterArcRecommendation[]>"
                    ],
                    "extractedTypes": [
                      "CharacterAnalysisResult",
                      "CharacterArcRecommendation[]>"
                    ]
                  },
                  {
                    "type": "novel_structure",
                    "element": "chapter",
                    "confidence": "medium"
                  },
                  {
                    "type": "novel_structure",
                    "element": "character",
                    "confidence": "medium"
                  }
                ],
                "parameters": {
                  "temperature": {
                    "value": "0.3",
                    "source": "object_literal",
                    "confidence": "medium"
                  }
                },
                "novelSpecific": {
                  "hasNovelKeywords": true,
                  "detectedGenres": [
                    "SF"
                  ],
                  "storyElements": [],
                  "characterElements": [
                    "キャラクター",
                    "character"
                  ],
                  "narrativeStyle": "unknown"
                },
                "semanticAnalysis": {
                  "purposeIndicators": [
                    "生成",
                    "generate",
                    "build"
                  ],
                  "complexity": "low",
                  "dependencies": [
                    "private",
                    "async",
                    "generateArcOptimizationRecommendations",
                    "character",
                    "Character",
                    "analysisResult",
                    "CharacterAnalysisResult",
                    "chapterNumber",
                    "number",
                    "Promise"
                  ],
                  "outputUsage": {
                    "isAssigned": false,
                    "isAwaited": false,
                    "isChained": true,
                    "isLogged": false,
                    "isReturned": true
                  }
                },
                "duplicateHash": "6656550b65c6ecd65464c7016e689e65"
              },
              {
                "id": "call_3ab7176e",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "fileName": "character-depth-service.ts",
                "lineNumber": 716,
                "lineContent": "this.geminiClient.generateText(prompt, {",
                "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
                "callMethod": "generateText",
                "fullMatch": "geminiClient.generateText(",
                "context": {
                  "before": [
                    {
                      "lineNumber": 711,
                      "content": "): Promise<MotivationEnhancement[]> {",
                      "indent": 4
                    },
                    {
                      "lineNumber": 712,
                      "content": "try {",
                      "indent": 8
                    },
                    {
                      "lineNumber": 713,
                      "content": "const prompt = this.buildMotivationEnhancementPrompt(character, psychology);",
                      "indent": 12
                    },
                    {
                      "lineNumber": 714,
                      "content": "",
                      "indent": 13
                    },
                    {
                      "lineNumber": 715,
                      "content": "const response = await apiThrottler.throttledRequest(() =>",
                      "indent": 12
                    }
                  ],
                  "current": {
                    "lineNumber": 716,
                    "content": "this.geminiClient.generateText(prompt, {",
                    "indent": 16
                  },
                  "after": [
                    {
                      "lineNumber": 717,
                      "content": "temperature: 0.3,",
                      "indent": 20
                    },
                    {
                      "lineNumber": 718,
                      "content": "targetLength: 800,",
                      "indent": 20
                    },
                    {
                      "lineNumber": 719,
                      "content": "purpose: 'creation',",
                      "indent": 20
                    },
                    {
                      "lineNumber": 720,
                      "content": "responseFormat: 'json'",
                      "indent": 20
                    },
                    {
                      "lineNumber": 721,
                      "content": "})",
                      "indent": 16
                    }
                  ],
                  "functionContext": {
                    "functionName": "catch",
                    "startLine": 698,
                    "distance": 18
                  }
                },
                "prompts": [
                  {
                    "type": "pattern_match",
                    "content": "動機強化推奨生成エラー: ${character.name}",
                    "fullLength": 30,
                    "truncatedContent": "動機強化推奨生成エラー: ${character.name}",
                    "hash": "ed094c0116a864caf1639c6fd61d9a1c",
                    "keywords": [
                      "生成",
                      "character"
                    ],
                    "sentiment": "neutral",
                    "complexity": "low",
                    "language": "english",
                    "novelElements": {
                      "genres": [],
                      "perspective": "third_person",
                      "tense": "present"
                    }
                  },
                  {
                    "type": "method_based",
                    "suggestedPurpose": "buildMotivationEnhancementPrompt",
                    "relatedMethods": [
                      "buildMotivationEnhancementPrompt"
                    ],
                    "confidence": "medium"
                  }
                ],
                "expectedOutputs": [
                  {
                    "type": "type_annotation",
                    "types": [
                      ": Promise<MotivationEnhancement[]>"
                    ],
                    "extractedTypes": [
                      "MotivationEnhancement[]>"
                    ]
                  },
                  {
                    "type": "novel_structure",
                    "element": "character",
                    "confidence": "medium"
                  }
                ],
                "parameters": {
                  "temperature": {
                    "value": "0.3",
                    "source": "object_literal",
                    "confidence": "medium"
                  }
                },
                "novelSpecific": {
                  "hasNovelKeywords": true,
                  "detectedGenres": [
                    "SF"
                  ],
                  "storyElements": [],
                  "characterElements": [
                    "キャラクター",
                    "character"
                  ],
                  "narrativeStyle": "unknown"
                },
                "semanticAnalysis": {
                  "purposeIndicators": [
                    "生成",
                    "generate",
                    "build"
                  ],
                  "complexity": "low",
                  "dependencies": [
                    "rateFallbackArcRecommendations",
                    "character",
                    "private",
                    "async",
                    "generateMotivationEnhancements",
                    "Character",
                    "psychology",
                    "CharacterPsychology",
                    "Promise",
                    "MotivationEnhancement"
                  ],
                  "outputUsage": {
                    "isAssigned": false,
                    "isAwaited": false,
                    "isChained": true,
                    "isLogged": false,
                    "isReturned": true
                  }
                },
                "duplicateHash": "6656550b65c6ecd65464c7016e689e65"
              },
              {
                "id": "call_1c9a2ed2",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "fileName": "character-depth-service.ts",
                "lineNumber": 689,
                "lineContent": "this.geminiClient.generateText(prompt, {",
                "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
                "callMethod": "generateText",
                "fullMatch": "geminiClient.generateText(",
                "context": {
                  "before": [
                    {
                      "lineNumber": 684,
                      "content": "): Promise<CharacterArcRecommendation[]> {",
                      "indent": 4
                    },
                    {
                      "lineNumber": 685,
                      "content": "try {",
                      "indent": 8
                    },
                    {
                      "lineNumber": 686,
                      "content": "const prompt = this.buildArcOptimizationPrompt(character, analysisResult, chapterNumber);",
                      "indent": 12
                    },
                    {
                      "lineNumber": 687,
                      "content": "",
                      "indent": 13
                    },
                    {
                      "lineNumber": 688,
                      "content": "const response = await apiThrottler.throttledRequest(() =>",
                      "indent": 12
                    }
                  ],
                  "current": {
                    "lineNumber": 689,
                    "content": "this.geminiClient.generateText(prompt, {",
                    "indent": 16
                  },
                  "after": [
                    {
                      "lineNumber": 690,
                      "content": "temperature: 0.3,",
                      "indent": 20
                    },
                    {
                      "lineNumber": 691,
                      "content": "targetLength: 800,",
                      "indent": 20
                    },
                    {
                      "lineNumber": 692,
                      "content": "purpose: 'creation',",
                      "indent": 20
                    },
                    {
                      "lineNumber": 693,
                      "content": "responseFormat: 'json'",
                      "indent": 20
                    },
                    {
                      "lineNumber": 694,
                      "content": "})",
                      "indent": 16
                    }
                  ],
                  "functionContext": {
                    "functionName": "catch",
                    "startLine": 670,
                    "distance": 19
                  }
                },
                "prompts": [
                  {
                    "type": "pattern_match",
                    "content": "アーク推奨生成エラー: ${character.name}",
                    "fullLength": 29,
                    "truncatedContent": "アーク推奨生成エラー: ${character.name}",
                    "hash": "576e7d84ea2592c66dbf82ee784f8a60",
                    "keywords": [
                      "生成",
                      "character"
                    ],
                    "sentiment": "neutral",
                    "complexity": "low",
                    "language": "english",
                    "novelElements": {
                      "genres": [],
                      "perspective": "third_person",
                      "tense": "present"
                    }
                  },
                  {
                    "type": "method_based",
                    "suggestedPurpose": "CharacterAnalysis",
                    "relatedMethods": [
                      "CharacterAnalysis",
                      "buildArcOptimizationPrompt"
                    ],
                    "confidence": "medium"
                  }
                ],
                "expectedOutputs": [
                  {
                    "type": "type_annotation",
                    "types": [
                      ": CharacterAnalysisResult",
                      ": Promise<CharacterArcRecommendation[]>"
                    ],
                    "extractedTypes": [
                      "CharacterAnalysisResult",
                      "CharacterArcRecommendation[]>"
                    ]
                  },
                  {
                    "type": "novel_structure",
                    "element": "chapter",
                    "confidence": "medium"
                  },
                  {
                    "type": "novel_structure",
                    "element": "character",
                    "confidence": "medium"
                  }
                ],
                "parameters": {
                  "temperature": {
                    "value": "0.3",
                    "source": "object_literal",
                    "confidence": "medium"
                  }
                },
                "novelSpecific": {
                  "hasNovelKeywords": true,
                  "detectedGenres": [
                    "SF"
                  ],
                  "storyElements": [],
                  "characterElements": [
                    "キャラクター",
                    "character"
                  ],
                  "narrativeStyle": "unknown"
                },
                "semanticAnalysis": {
                  "purposeIndicators": [
                    "生成",
                    "generate",
                    "build"
                  ],
                  "complexity": "low",
                  "dependencies": [
                    "private",
                    "async",
                    "generateArcOptimizationRecommendations",
                    "character",
                    "Character",
                    "analysisResult",
                    "CharacterAnalysisResult",
                    "chapterNumber",
                    "number",
                    "Promise"
                  ],
                  "outputUsage": {
                    "isAssigned": false,
                    "isAwaited": false,
                    "isChained": true,
                    "isLogged": false,
                    "isReturned": true
                  }
                },
                "duplicateHash": "6656550b65c6ecd65464c7016e689e65"
              },
              {
                "id": "call_3ab7176e",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "fileName": "character-depth-service.ts",
                "lineNumber": 716,
                "lineContent": "this.geminiClient.generateText(prompt, {",
                "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
                "callMethod": "generateText",
                "fullMatch": "geminiClient.generateText(",
                "context": {
                  "before": [
                    {
                      "lineNumber": 711,
                      "content": "): Promise<MotivationEnhancement[]> {",
                      "indent": 4
                    },
                    {
                      "lineNumber": 712,
                      "content": "try {",
                      "indent": 8
                    },
                    {
                      "lineNumber": 713,
                      "content": "const prompt = this.buildMotivationEnhancementPrompt(character, psychology);",
                      "indent": 12
                    },
                    {
                      "lineNumber": 714,
                      "content": "",
                      "indent": 13
                    },
                    {
                      "lineNumber": 715,
                      "content": "const response = await apiThrottler.throttledRequest(() =>",
                      "indent": 12
                    }
                  ],
                  "current": {
                    "lineNumber": 716,
                    "content": "this.geminiClient.generateText(prompt, {",
                    "indent": 16
                  },
                  "after": [
                    {
                      "lineNumber": 717,
                      "content": "temperature: 0.3,",
                      "indent": 20
                    },
                    {
                      "lineNumber": 718,
                      "content": "targetLength: 800,",
                      "indent": 20
                    },
                    {
                      "lineNumber": 719,
                      "content": "purpose: 'creation',",
                      "indent": 20
                    },
                    {
                      "lineNumber": 720,
                      "content": "responseFormat: 'json'",
                      "indent": 20
                    },
                    {
                      "lineNumber": 721,
                      "content": "})",
                      "indent": 16
                    }
                  ],
                  "functionContext": {
                    "functionName": "catch",
                    "startLine": 698,
                    "distance": 18
                  }
                },
                "prompts": [
                  {
                    "type": "pattern_match",
                    "content": "動機強化推奨生成エラー: ${character.name}",
                    "fullLength": 30,
                    "truncatedContent": "動機強化推奨生成エラー: ${character.name}",
                    "hash": "ed094c0116a864caf1639c6fd61d9a1c",
                    "keywords": [
                      "生成",
                      "character"
                    ],
                    "sentiment": "neutral",
                    "complexity": "low",
                    "language": "english",
                    "novelElements": {
                      "genres": [],
                      "perspective": "third_person",
                      "tense": "present"
                    }
                  },
                  {
                    "type": "method_based",
                    "suggestedPurpose": "buildMotivationEnhancementPrompt",
                    "relatedMethods": [
                      "buildMotivationEnhancementPrompt"
                    ],
                    "confidence": "medium"
                  }
                ],
                "expectedOutputs": [
                  {
                    "type": "type_annotation",
                    "types": [
                      ": Promise<MotivationEnhancement[]>"
                    ],
                    "extractedTypes": [
                      "MotivationEnhancement[]>"
                    ]
                  },
                  {
                    "type": "novel_structure",
                    "element": "character",
                    "confidence": "medium"
                  }
                ],
                "parameters": {
                  "temperature": {
                    "value": "0.3",
                    "source": "object_literal",
                    "confidence": "medium"
                  }
                },
                "novelSpecific": {
                  "hasNovelKeywords": true,
                  "detectedGenres": [
                    "SF"
                  ],
                  "storyElements": [],
                  "characterElements": [
                    "キャラクター",
                    "character"
                  ],
                  "narrativeStyle": "unknown"
                },
                "semanticAnalysis": {
                  "purposeIndicators": [
                    "生成",
                    "generate",
                    "build"
                  ],
                  "complexity": "low",
                  "dependencies": [
                    "rateFallbackArcRecommendations",
                    "character",
                    "private",
                    "async",
                    "generateMotivationEnhancements",
                    "Character",
                    "psychology",
                    "CharacterPsychology",
                    "Promise",
                    "MotivationEnhancement"
                  ],
                  "outputUsage": {
                    "isAssigned": false,
                    "isAwaited": false,
                    "isChained": true,
                    "isLogged": false,
                    "isReturned": true
                  }
                },
                "duplicateHash": "6656550b65c6ecd65464c7016e689e65"
              }
            ],
            "count": 4,
            "severity": "high"
          },
          {
            "hash": "70df527efb8f1ea6c86160329072acc5",
            "calls": [
              {
                "id": "call_18183c83",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "fileName": "character-depth-service.ts",
                "lineNumber": 750,
                "lineContent": "this.geminiClient.generateText(prompt, {",
                "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
                "callMethod": "generateText",
                "fullMatch": "geminiClient.generateText(",
                "context": {
                  "before": [
                    {
                      "lineNumber": 745,
                      "content": "}",
                      "indent": 12
                    },
                    {
                      "lineNumber": 746,
                      "content": "",
                      "indent": 13
                    },
                    {
                      "lineNumber": 747,
                      "content": "const prompt = this.buildContrastRecommendationsPrompt(character, sameTypeCharacters);",
                      "indent": 12
                    },
                    {
                      "lineNumber": 748,
                      "content": "",
                      "indent": 13
                    },
                    {
                      "lineNumber": 749,
                      "content": "const response = await apiThrottler.throttledRequest(() =>",
                      "indent": 12
                    }
                  ],
                  "current": {
                    "lineNumber": 750,
                    "content": "this.geminiClient.generateText(prompt, {",
                    "indent": 16
                  },
                  "after": [
                    {
                      "lineNumber": 751,
                      "content": "temperature: 0.4,",
                      "indent": 20
                    },
                    {
                      "lineNumber": 752,
                      "content": "targetLength: 800,",
                      "indent": 20
                    },
                    {
                      "lineNumber": 753,
                      "content": "purpose: 'creation',",
                      "indent": 20
                    },
                    {
                      "lineNumber": 754,
                      "content": "responseFormat: 'json'",
                      "indent": 20
                    },
                    {
                      "lineNumber": 755,
                      "content": "})",
                      "indent": 16
                    }
                  ],
                  "functionContext": {
                    "functionName": "if",
                    "startLine": 743,
                    "distance": 7
                  }
                },
                "prompts": [
                  {
                    "type": "pattern_match",
                    "content": "コントラスト推奨生成エラー: ${character.name}",
                    "fullLength": 32,
                    "truncatedContent": "コントラスト推奨生成エラー: ${character.name}",
                    "hash": "4cbbecf723eae2c9ef64c0e39f398284",
                    "keywords": [
                      "生成",
                      "character"
                    ],
                    "sentiment": "neutral",
                    "complexity": "low",
                    "language": "english",
                    "novelElements": {
                      "genres": [],
                      "perspective": "third_person",
                      "tense": "present"
                    }
                  },
                  {
                    "type": "method_based",
                    "suggestedPurpose": "buildContrastRecommendationsPrompt",
                    "relatedMethods": [
                      "buildContrastRecommendationsPrompt"
                    ],
                    "confidence": "medium"
                  }
                ],
                "expectedOutputs": [
                  {
                    "type": "type_annotation",
                    "types": [
                      ": Promise<ContrastRecommendation[]>"
                    ],
                    "extractedTypes": [
                      "ContrastRecommendation[]>"
                    ]
                  },
                  {
                    "type": "novel_structure",
                    "element": "chapter",
                    "confidence": "medium"
                  },
                  {
                    "type": "novel_structure",
                    "element": "character",
                    "confidence": "medium"
                  }
                ],
                "parameters": {
                  "temperature": {
                    "value": "0.4",
                    "source": "object_literal",
                    "confidence": "medium"
                  }
                },
                "novelSpecific": {
                  "hasNovelKeywords": true,
                  "detectedGenres": [
                    "SF"
                  ],
                  "storyElements": [],
                  "characterElements": [
                    "キャラクター",
                    "character"
                  ],
                  "narrativeStyle": "unknown"
                },
                "semanticAnalysis": {
                  "purposeIndicators": [
                    "生成",
                    "generate",
                    "build"
                  ],
                  "complexity": "low",
                  "dependencies": [
                    "getCharactersByType",
                    "const",
                    "sameTypeCharacters",
                    "await",
                    "this",
                    "characterManager",
                    "character",
                    "type",
                    "length",
                    "return"
                  ],
                  "outputUsage": {
                    "isAssigned": false,
                    "isAwaited": false,
                    "isChained": true,
                    "isLogged": false,
                    "isReturned": true
                  }
                },
                "duplicateHash": "70df527efb8f1ea6c86160329072acc5"
              },
              {
                "id": "call_18183c83",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "fileName": "character-depth-service.ts",
                "lineNumber": 750,
                "lineContent": "this.geminiClient.generateText(prompt, {",
                "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
                "callMethod": "generateText",
                "fullMatch": "geminiClient.generateText(",
                "context": {
                  "before": [
                    {
                      "lineNumber": 745,
                      "content": "}",
                      "indent": 12
                    },
                    {
                      "lineNumber": 746,
                      "content": "",
                      "indent": 13
                    },
                    {
                      "lineNumber": 747,
                      "content": "const prompt = this.buildContrastRecommendationsPrompt(character, sameTypeCharacters);",
                      "indent": 12
                    },
                    {
                      "lineNumber": 748,
                      "content": "",
                      "indent": 13
                    },
                    {
                      "lineNumber": 749,
                      "content": "const response = await apiThrottler.throttledRequest(() =>",
                      "indent": 12
                    }
                  ],
                  "current": {
                    "lineNumber": 750,
                    "content": "this.geminiClient.generateText(prompt, {",
                    "indent": 16
                  },
                  "after": [
                    {
                      "lineNumber": 751,
                      "content": "temperature: 0.4,",
                      "indent": 20
                    },
                    {
                      "lineNumber": 752,
                      "content": "targetLength: 800,",
                      "indent": 20
                    },
                    {
                      "lineNumber": 753,
                      "content": "purpose: 'creation',",
                      "indent": 20
                    },
                    {
                      "lineNumber": 754,
                      "content": "responseFormat: 'json'",
                      "indent": 20
                    },
                    {
                      "lineNumber": 755,
                      "content": "})",
                      "indent": 16
                    }
                  ],
                  "functionContext": {
                    "functionName": "if",
                    "startLine": 743,
                    "distance": 7
                  }
                },
                "prompts": [
                  {
                    "type": "pattern_match",
                    "content": "コントラスト推奨生成エラー: ${character.name}",
                    "fullLength": 32,
                    "truncatedContent": "コントラスト推奨生成エラー: ${character.name}",
                    "hash": "4cbbecf723eae2c9ef64c0e39f398284",
                    "keywords": [
                      "生成",
                      "character"
                    ],
                    "sentiment": "neutral",
                    "complexity": "low",
                    "language": "english",
                    "novelElements": {
                      "genres": [],
                      "perspective": "third_person",
                      "tense": "present"
                    }
                  },
                  {
                    "type": "method_based",
                    "suggestedPurpose": "buildContrastRecommendationsPrompt",
                    "relatedMethods": [
                      "buildContrastRecommendationsPrompt"
                    ],
                    "confidence": "medium"
                  }
                ],
                "expectedOutputs": [
                  {
                    "type": "type_annotation",
                    "types": [
                      ": Promise<ContrastRecommendation[]>"
                    ],
                    "extractedTypes": [
                      "ContrastRecommendation[]>"
                    ]
                  },
                  {
                    "type": "novel_structure",
                    "element": "chapter",
                    "confidence": "medium"
                  },
                  {
                    "type": "novel_structure",
                    "element": "character",
                    "confidence": "medium"
                  }
                ],
                "parameters": {
                  "temperature": {
                    "value": "0.4",
                    "source": "object_literal",
                    "confidence": "medium"
                  }
                },
                "novelSpecific": {
                  "hasNovelKeywords": true,
                  "detectedGenres": [
                    "SF"
                  ],
                  "storyElements": [],
                  "characterElements": [
                    "キャラクター",
                    "character"
                  ],
                  "narrativeStyle": "unknown"
                },
                "semanticAnalysis": {
                  "purposeIndicators": [
                    "生成",
                    "generate",
                    "build"
                  ],
                  "complexity": "low",
                  "dependencies": [
                    "getCharactersByType",
                    "const",
                    "sameTypeCharacters",
                    "await",
                    "this",
                    "characterManager",
                    "character",
                    "type",
                    "length",
                    "return"
                  ],
                  "outputUsage": {
                    "isAssigned": false,
                    "isAwaited": false,
                    "isChained": true,
                    "isLogged": false,
                    "isReturned": true
                  }
                },
                "duplicateHash": "70df527efb8f1ea6c86160329072acc5"
              }
            ],
            "count": 2,
            "severity": "high"
          }
        ],
        "estimatedSavings": {
          "codeLines": 390,
          "apiCalls": 78,
          "estimatedCostReduction": "10-30%"
        }
      },
      {
        "type": "DUPLICATE_PROMPTS",
        "severity": "HIGH",
        "priority": 2,
        "count": 30,
        "description": "重複または類似のプロンプトが多数検出されました",
        "suggestion": "プロンプトテンプレートシステムの導入を検討してください",
        "impact": "コード重複削減、一貫性向上、変更管理の簡素化",
        "details": [
          {
            "hash": "3231e0c6916fe75790dc783a2e1b8b35",
            "calls": [
              {
                "callId": "call_1948d757",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "lineNumber": 390,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 761
              },
              {
                "callId": "call_1948d757",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "lineNumber": 390,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 761
              },
              {
                "callId": "call_1948d757",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "lineNumber": 390,
                "method": "generateText",
                "promptType": "template_literal",
                "promptLength": 761
              },
              {
                "callId": "call_1948d757",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "lineNumber": 390,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 761
              },
              {
                "callId": "call_1948d757",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "lineNumber": 390,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 761
              },
              {
                "callId": "call_1948d757",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "lineNumber": 390,
                "method": "generateText",
                "promptType": "template_literal",
                "promptLength": 761
              },
              {
                "callId": "call_580712e8",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "lineNumber": 390,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 761
              },
              {
                "callId": "call_580712e8",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "lineNumber": 390,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 761
              },
              {
                "callId": "call_580712e8",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "lineNumber": 390,
                "method": "generateText",
                "promptType": "template_literal",
                "promptLength": 761
              }
            ],
            "count": 9,
            "severity": "high"
          },
          {
            "hash": "21db59c7003619a326b9f42bf8560435",
            "calls": [
              {
                "callId": "call_1f3e5a77",
                "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                "lineNumber": 881,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 720
              },
              {
                "callId": "call_1f3e5a77",
                "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                "lineNumber": 881,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 720
              },
              {
                "callId": "call_1f3e5a77",
                "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                "lineNumber": 881,
                "method": "generateText",
                "promptType": "template_literal",
                "promptLength": 720
              },
              {
                "callId": "call_3e476d9e",
                "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                "lineNumber": 881,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 720
              },
              {
                "callId": "call_3e476d9e",
                "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                "lineNumber": 881,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 720
              },
              {
                "callId": "call_3e476d9e",
                "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                "lineNumber": 881,
                "method": "generateText",
                "promptType": "template_literal",
                "promptLength": 720
              }
            ],
            "count": 6,
            "severity": "high"
          },
          {
            "hash": "930f774d0f29d9500d67bcea6c3f198c",
            "calls": [
              {
                "callId": "call_4ad1c568",
                "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
                "lineNumber": 218,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 290
              },
              {
                "callId": "call_4ad1c568",
                "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
                "lineNumber": 218,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 290
              },
              {
                "callId": "call_4ad1c568",
                "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
                "lineNumber": 218,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 290
              },
              {
                "callId": "call_4ad1c568",
                "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
                "lineNumber": 218,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 290
              },
              {
                "callId": "call_fbfd72f9",
                "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
                "lineNumber": 218,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 290
              },
              {
                "callId": "call_fbfd72f9",
                "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
                "lineNumber": 218,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 290
              }
            ],
            "count": 6,
            "severity": "high"
          },
          {
            "hash": "e5308eae8a37807f36a1ec49e852dc69",
            "calls": [
              {
                "callId": "call_1ed727cf",
                "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                "lineNumber": 452,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 602
              },
              {
                "callId": "call_1ed727cf",
                "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                "lineNumber": 452,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 602
              },
              {
                "callId": "call_1ed727cf",
                "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                "lineNumber": 452,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 602
              },
              {
                "callId": "call_1ed727cf",
                "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                "lineNumber": 452,
                "method": "generateText",
                "promptType": "template_literal",
                "promptLength": 602
              },
              {
                "callId": "call_1ed727cf",
                "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                "lineNumber": 452,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 602
              },
              {
                "callId": "call_1ed727cf",
                "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                "lineNumber": 452,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 602
              },
              {
                "callId": "call_1ed727cf",
                "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                "lineNumber": 452,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 602
              },
              {
                "callId": "call_1ed727cf",
                "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                "lineNumber": 452,
                "method": "generateText",
                "promptType": "template_literal",
                "promptLength": 602
              },
              {
                "callId": "call_3cd296f3",
                "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                "lineNumber": 452,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 602
              },
              {
                "callId": "call_3cd296f3",
                "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                "lineNumber": 452,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 602
              },
              {
                "callId": "call_3cd296f3",
                "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                "lineNumber": 452,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 602
              },
              {
                "callId": "call_3cd296f3",
                "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                "lineNumber": 452,
                "method": "generateText",
                "promptType": "template_literal",
                "promptLength": 602
              }
            ],
            "count": 12,
            "severity": "high"
          },
          {
            "hash": "ef22b68a1f51ab155d2f99657097a80f",
            "calls": [
              {
                "callId": "call_5a61e7e9",
                "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                "lineNumber": 461,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 800
              },
              {
                "callId": "call_5a61e7e9",
                "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                "lineNumber": 461,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 800
              },
              {
                "callId": "call_5a61e7e9",
                "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                "lineNumber": 461,
                "method": "generateText",
                "promptType": "template_literal",
                "promptLength": 800
              },
              {
                "callId": "call_42f50d23",
                "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                "lineNumber": 461,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 800
              },
              {
                "callId": "call_42f50d23",
                "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                "lineNumber": 461,
                "method": "generateText",
                "promptType": "pattern_match",
                "promptLength": 800
              },
              {
                "callId": "call_42f50d23",
                "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                "lineNumber": 461,
                "method": "generateText",
                "promptType": "template_literal",
                "promptLength": 800
              }
            ],
            "count": 6,
            "severity": "high"
          }
        ],
        "implementationGuide": [
          "共通プロンプトテンプレートファイルの作成",
          "パラメータ化されたプロンプト関数の実装",
          "プロンプトバリデーション機能の追加"
        ]
      },
      {
        "type": "DUPLICATE_OUTPUTS",
        "severity": "MEDIUM",
        "priority": 3,
        "count": 34,
        "description": "重複する出力パターンが検出されました",
        "suggestion": "共通インターフェースまたは型定義の作成を検討してください",
        "impact": "型安全性向上、開発効率向上",
        "details": [
          {
            "pattern": "novel:chapter",
            "calls": [
              {
                "callId": "call_6bca0ae0",
                "filePath": "src\\app\\api\\generation\\chapter\\route.ts",
                "lineNumber": 233,
                "method": "generateChapter",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_5eb04109",
                "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
                "lineNumber": 468,
                "method": "analyzeCharacter",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_462fa399",
                "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
                "lineNumber": 708,
                "method": "analyzeCharacter",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_e3f53090",
                "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
                "lineNumber": 762,
                "method": "analyzeCharacter",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_e72a01ca",
                "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
                "lineNumber": 820,
                "method": "analyzeStyle",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_1c9a2ed2",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "lineNumber": 689,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_18183c83",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "lineNumber": 750,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_0459ffc7",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "lineNumber": 535,
                "method": "analyzeCharacter",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_4bc217e9",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "lineNumber": 536,
                "method": "analyzeCharacter",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_1c9a2ed2",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "lineNumber": 689,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_18183c83",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "lineNumber": 750,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_874c5434",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "lineNumber": 689,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_1ba6677b",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "lineNumber": 750,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_e3499eaa",
                "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
                "lineNumber": 145,
                "method": "analyzeStyle",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_1035d952",
                "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
                "lineNumber": 450,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_65dcaee2",
                "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
                "lineNumber": 717,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_b943c4c9",
                "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
                "lineNumber": 450,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_d1dbf14b",
                "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
                "lineNumber": 717,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_69171be2",
                "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                "lineNumber": 182,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_0696c96c",
                "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                "lineNumber": 290,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_edfc52ac",
                "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                "lineNumber": 791,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_1f3e5a77",
                "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                "lineNumber": 881,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_ce99d105",
                "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                "lineNumber": 182,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_ed6830f7",
                "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                "lineNumber": 290,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_61ed4d09",
                "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                "lineNumber": 791,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_3e476d9e",
                "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                "lineNumber": 881,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_129ddf5b",
                "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
                "lineNumber": 89,
                "method": "analyzeCharacter",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_818d1a06",
                "filePath": "src\\lib\\analysis\\services\\character\\interfaces.ts",
                "lineNumber": 24,
                "method": "analyzeCharacter",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_4ad1c568",
                "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
                "lineNumber": 218,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_4ad1c568",
                "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
                "lineNumber": 218,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_fbfd72f9",
                "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
                "lineNumber": 218,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_1ed727cf",
                "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                "lineNumber": 452,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_1ed727cf",
                "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                "lineNumber": 452,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_3cd296f3",
                "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                "lineNumber": 452,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_2d6b1ee3",
                "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                "lineNumber": 395,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_5a61e7e9",
                "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                "lineNumber": 461,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_cd18ed56",
                "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                "lineNumber": 688,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_306575ca",
                "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                "lineNumber": 710,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_7e6621ef",
                "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                "lineNumber": 2139,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_c3189908",
                "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                "lineNumber": 395,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_42f50d23",
                "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                "lineNumber": 461,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_afc20166",
                "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                "lineNumber": 688,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_55a9819f",
                "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                "lineNumber": 710,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_360a38f7",
                "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                "lineNumber": 2139,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_b27aa071",
                "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
                "lineNumber": 183,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_b27aa071",
                "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
                "lineNumber": 183,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_bf02a47e",
                "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
                "lineNumber": 183,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_0e0ffa92",
                "filePath": "src\\lib\\foreshadowing\\engine.ts",
                "lineNumber": 379,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_6adb174a",
                "filePath": "src\\lib\\foreshadowing\\engine.ts",
                "lineNumber": 1006,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_0e0ffa92",
                "filePath": "src\\lib\\foreshadowing\\engine.ts",
                "lineNumber": 379,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_6adb174a",
                "filePath": "src\\lib\\foreshadowing\\engine.ts",
                "lineNumber": 1006,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_6d2bdcd3",
                "filePath": "src\\lib\\foreshadowing\\engine.ts",
                "lineNumber": 379,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_14ab93e8",
                "filePath": "src\\lib\\foreshadowing\\engine.ts",
                "lineNumber": 1006,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_aea0563d",
                "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
                "lineNumber": 408,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_aea0563d",
                "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
                "lineNumber": 408,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_9ebc9a83",
                "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
                "lineNumber": 400,
                "method": "buildAnalysisPrompt",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_8c27c221",
                "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
                "lineNumber": 635,
                "method": "buildAnalysisPrompt",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_7b8b64d8",
                "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
                "lineNumber": 408,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_869cbbc6",
                "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
                "lineNumber": 357,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_869cbbc6",
                "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
                "lineNumber": 357,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_ca2cf1b3",
                "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
                "lineNumber": 357,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_9819843c",
                "filePath": "src\\lib\\generation\\engine.ts",
                "lineNumber": 184,
                "method": "generateChapter",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_c66a8107",
                "filePath": "src\\lib\\generation\\engine.ts",
                "lineNumber": 261,
                "method": "generateChapter",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_bfc638e7",
                "filePath": "src\\lib\\generation\\engine.ts",
                "lineNumber": 263,
                "method": "generateChapter",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_ca729a9d",
                "filePath": "src\\lib\\learning-journey\\context-manager.ts",
                "lineNumber": 470,
                "method": "generateSummary",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_796b89ed",
                "filePath": "src\\lib\\learning-journey\\context-manager.ts",
                "lineNumber": 515,
                "method": "generateSummary",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_63625169",
                "filePath": "src\\lib\\learning-journey\\context-manager.ts",
                "lineNumber": 908,
                "method": "generateSummary",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_fa708e96",
                "filePath": "src\\lib\\learning-journey\\context-manager.ts",
                "lineNumber": 1031,
                "method": "generateSummary",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_43a85937",
                "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
                "lineNumber": 461,
                "method": "executeAIAnalysis",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_9bbf9fcd",
                "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
                "lineNumber": 543,
                "method": "executeAIAnalysis",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_0bf1b71f",
                "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
                "lineNumber": 605,
                "method": "executeAIAnalysis",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_75df9e80",
                "filePath": "src\\lib\\learning-journey\\index.ts",
                "lineNumber": 1225,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_75df9e80",
                "filePath": "src\\lib\\learning-journey\\index.ts",
                "lineNumber": 1225,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_edef0302",
                "filePath": "src\\lib\\learning-journey\\index.ts",
                "lineNumber": 1225,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_b821aa55",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 632,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_59aa5683",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 671,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_2c81c351",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 717,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_b821aa55",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 632,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_59aa5683",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 671,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_2c81c351",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 717,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_a643be4b",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 138,
                "method": "performAICoherenceAnalysis",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_2f7dba2f",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 201,
                "method": "performAIObjectiveAnalysis",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_8749b3de",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 276,
                "method": "performAIEmotionalAnalysis",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_5f96b84e",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 622,
                "method": "performAICoherenceAnalysis",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_a6c8c1d7",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 661,
                "method": "performAIObjectiveAnalysis",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_503d7717",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 707,
                "method": "performAIEmotionalAnalysis",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_01bf8aff",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 632,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_7234ed6d",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 671,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_25880c3e",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 717,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_27c6e3cd",
                "filePath": "src\\lib\\plot\\section\\section-designer.ts",
                "lineNumber": 165,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_fbc93dbd",
                "filePath": "src\\lib\\plot\\section\\section-designer.ts",
                "lineNumber": 1005,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_27c6e3cd",
                "filePath": "src\\lib\\plot\\section\\section-designer.ts",
                "lineNumber": 165,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_fbc93dbd",
                "filePath": "src\\lib\\plot\\section\\section-designer.ts",
                "lineNumber": 1005,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_c9e2a5af",
                "filePath": "src\\lib\\plot\\section\\section-designer.ts",
                "lineNumber": 165,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_571cb420",
                "filePath": "src\\lib\\plot\\section\\section-designer.ts",
                "lineNumber": 1005,
                "method": "generateText",
                "outputType": "novel_structure"
              }
            ],
            "count": 95,
            "severity": "high"
          },
          {
            "pattern": "type:string>",
            "calls": [
              {
                "callId": "call_769936d4",
                "filePath": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
                "lineNumber": 51,
                "method": "generateText",
                "outputType": "type_annotation"
              },
              {
                "callId": "call_cced1d04",
                "filePath": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
                "lineNumber": 166,
                "method": "generateText",
                "outputType": "type_annotation"
              },
              {
                "callId": "call_12be75a9",
                "filePath": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
                "lineNumber": 154,
                "method": "generateContent",
                "outputType": "type_annotation"
              },
              {
                "callId": "call_815968e8",
                "filePath": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
                "lineNumber": 166,
                "method": "generateText",
                "outputType": "type_annotation"
              },
              {
                "callId": "call_9c35b55d",
                "filePath": "src\\lib\\analysis\\adapters\\interfaces.ts",
                "lineNumber": 21,
                "method": "generateText",
                "outputType": "type_annotation"
              },
              {
                "callId": "call_4da878fb",
                "filePath": "src\\lib\\generation\\gemini-client.ts",
                "lineNumber": 248,
                "method": "generateText",
                "outputType": "type_annotation"
              },
              {
                "callId": "call_59370f58",
                "filePath": "src\\lib\\generation\\gemini-client.ts",
                "lineNumber": 376,
                "method": "executeGeminiRequest",
                "outputType": "type_annotation"
              },
              {
                "callId": "call_a225d13e",
                "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
                "lineNumber": 1030,
                "method": "generateText",
                "outputType": "type_annotation"
              },
              {
                "callId": "call_a225d13e",
                "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
                "lineNumber": 1030,
                "method": "generateText",
                "outputType": "type_annotation"
              },
              {
                "callId": "call_e0f3f264",
                "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
                "lineNumber": 1028,
                "method": "executeAIAnalysis",
                "outputType": "type_annotation"
              },
              {
                "callId": "call_40dce312",
                "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
                "lineNumber": 1030,
                "method": "generateText",
                "outputType": "type_annotation"
              }
            ],
            "count": 11,
            "severity": "high"
          },
          {
            "pattern": "type:ChapterAnalysis>",
            "calls": [
              {
                "callId": "call_5eb04109",
                "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
                "lineNumber": 468,
                "method": "analyzeCharacter",
                "outputType": "type_annotation"
              },
              {
                "callId": "call_edfc52ac",
                "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                "lineNumber": 791,
                "method": "generateText",
                "outputType": "type_annotation"
              },
              {
                "callId": "call_61ed4d09",
                "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                "lineNumber": 791,
                "method": "generateText",
                "outputType": "type_annotation"
              }
            ],
            "count": 3,
            "severity": "medium"
          },
          {
            "pattern": "novel:title",
            "calls": [
              {
                "callId": "call_5eb04109",
                "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
                "lineNumber": 468,
                "method": "analyzeCharacter",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_1948d757",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "lineNumber": 390,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_1948d757",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "lineNumber": 390,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_580712e8",
                "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                "lineNumber": 390,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_1f3e5a77",
                "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                "lineNumber": 881,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_3e476d9e",
                "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                "lineNumber": 881,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_ca729a9d",
                "filePath": "src\\lib\\learning-journey\\context-manager.ts",
                "lineNumber": 470,
                "method": "generateSummary",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_796b89ed",
                "filePath": "src\\lib\\learning-journey\\context-manager.ts",
                "lineNumber": 515,
                "method": "generateSummary",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_63625169",
                "filePath": "src\\lib\\learning-journey\\context-manager.ts",
                "lineNumber": 908,
                "method": "generateSummary",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_fa708e96",
                "filePath": "src\\lib\\learning-journey\\context-manager.ts",
                "lineNumber": 1031,
                "method": "generateSummary",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_b821aa55",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 632,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_59aa5683",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 671,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_2c81c351",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 717,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_71c3a3c1",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 773,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_b821aa55",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 632,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_59aa5683",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 671,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_2c81c351",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 717,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_71c3a3c1",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 773,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_5f96b84e",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 622,
                "method": "performAICoherenceAnalysis",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_a6c8c1d7",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 661,
                "method": "performAIObjectiveAnalysis",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_503d7717",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 707,
                "method": "performAIEmotionalAnalysis",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_01bf8aff",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 632,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_7234ed6d",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 671,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_25880c3e",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 717,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_5414a8ea",
                "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                "lineNumber": 773,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_fbc93dbd",
                "filePath": "src\\lib\\plot\\section\\section-designer.ts",
                "lineNumber": 1005,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_fbc93dbd",
                "filePath": "src\\lib\\plot\\section\\section-designer.ts",
                "lineNumber": 1005,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_571cb420",
                "filePath": "src\\lib\\plot\\section\\section-designer.ts",
                "lineNumber": 1005,
                "method": "generateText",
                "outputType": "novel_structure"
              }
            ],
            "count": 28,
            "severity": "high"
          },
          {
            "pattern": "novel:scene",
            "calls": [
              {
                "callId": "call_5eb04109",
                "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
                "lineNumber": 468,
                "method": "analyzeCharacter",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_1f3e5a77",
                "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                "lineNumber": 881,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_3e476d9e",
                "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                "lineNumber": 881,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_f85b10f3",
                "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
                "lineNumber": 342,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_ef390022",
                "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
                "lineNumber": 342,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_63625169",
                "filePath": "src\\lib\\learning-journey\\context-manager.ts",
                "lineNumber": 908,
                "method": "generateSummary",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_27c6e3cd",
                "filePath": "src\\lib\\plot\\section\\section-designer.ts",
                "lineNumber": 165,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_27c6e3cd",
                "filePath": "src\\lib\\plot\\section\\section-designer.ts",
                "lineNumber": 165,
                "method": "generateText",
                "outputType": "novel_structure"
              },
              {
                "callId": "call_c9e2a5af",
                "filePath": "src\\lib\\plot\\section\\section-designer.ts",
                "lineNumber": 165,
                "method": "generateText",
                "outputType": "novel_structure"
              }
            ],
            "count": 9,
            "severity": "high"
          }
        ],
        "implementationGuide": [
          "共通型定義ファイルの作成",
          "レスポンスパーサーの統一",
          "バリデーション機能の実装"
        ]
      },
      {
        "type": "HIGH_FREQUENCY_METHODS",
        "severity": "MEDIUM",
        "priority": 4,
        "description": "高頻度で使用されているAIメソッドが検出されました",
        "suggestion": "キャッシュシステムまたはバッチ処理の実装を検討してください",
        "impact": "API呼び出し削減、レスポンス速度向上、コスト削減",
        "details": [
          [
            "generateText",
            187
          ],
          [
            "generateContent",
            16
          ]
        ],
        "implementationGuide": [
          "レスポンスキャッシュシステムの実装",
          "バッチ処理による効率化",
          "リクエスト重複除去機能の追加"
        ]
      },
      {
        "type": "GENRE_CONSISTENCY",
        "severity": "LOW",
        "priority": 6,
        "description": "複数のジャンルが混在している可能性があります",
        "suggestion": "ジャンル別にプロンプトテンプレートを分離することを検討してください",
        "impact": "生成内容の一貫性向上",
        "details": {
          "detectedGenres": [
            "SF",
            "ファンタジー",
            "ミステリー",
            "ロマンス",
            "ホラー",
            "アクション",
            "fantasy",
            "mystery",
            "romance",
            "horror"
          ]
        }
      }
    ],
    "implementationPriority": {
      "phase1_immediate": {
        "title": "即座に対応すべき項目",
        "items": [
          {
            "type": "EXACT_DUPLICATES",
            "severity": "CRITICAL",
            "priority": 1,
            "count": 44,
            "description": "完全に重複するAI呼び出しが検出されました",
            "suggestion": "重複したコードをリファクタリングして共通関数を作成してください",
            "impact": "パフォーマンス向上、コスト削減、保守性向上",
            "details": [
              {
                "hash": "002f1430c4a1c8bbb9e1ca504a580ed2",
                "calls": [
                  {
                    "id": "call_1948d757",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "fileName": "character-depth-service.ts",
                    "lineNumber": 390,
                    "lineContent": "this.geminiClient.generateText(prompt, {",
                    "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
                    "callMethod": "generateText",
                    "fullMatch": "geminiClient.generateText(",
                    "context": {
                      "before": [
                        {
                          "lineNumber": 385,
                          "content": "// ジャンル適合性分析プロンプトを構築",
                          "indent": 12
                        },
                        {
                          "lineNumber": 386,
                          "content": "const prompt = this.buildGenreAnalysisPrompt(character, genre);",
                          "indent": 12
                        },
                        {
                          "lineNumber": 387,
                          "content": "",
                          "indent": 13
                        },
                        {
                          "lineNumber": 388,
                          "content": "// AI分析を実行",
                          "indent": 12
                        },
                        {
                          "lineNumber": 389,
                          "content": "const response = await apiThrottler.throttledRequest(() =>",
                          "indent": 12
                        }
                      ],
                      "current": {
                        "lineNumber": 390,
                        "content": "this.geminiClient.generateText(prompt, {",
                        "indent": 16
                      },
                      "after": [
                        {
                          "lineNumber": 391,
                          "content": "temperature: 0.3,",
                          "indent": 20
                        },
                        {
                          "lineNumber": 392,
                          "content": "targetLength: 800,",
                          "indent": 20
                        },
                        {
                          "lineNumber": 393,
                          "content": "purpose: 'analysis',",
                          "indent": 20
                        },
                        {
                          "lineNumber": 394,
                          "content": "responseFormat: 'json'",
                          "indent": 20
                        },
                        {
                          "lineNumber": 395,
                          "content": "})",
                          "indent": 16
                        }
                      ],
                      "functionContext": {
                        "functionName": "catch",
                        "startLine": 364,
                        "distance": 26
                      }
                    },
                    "prompts": [
                      {
                        "type": "pattern_match",
                        "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                        "fullLength": 761,
                        "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                        "hash": "3231e0c6916fe75790dc783a2e1b8b35",
                        "keywords": [
                          "分析",
                          "生成",
                          "character",
                          "generate"
                        ],
                        "sentiment": "neutral",
                        "complexity": "low",
                        "language": "english",
                        "novelElements": {
                          "genres": [],
                          "perspective": "third_person",
                          "tense": "present"
                        }
                      },
                      {
                        "type": "pattern_match",
                        "content": "\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: ",
                        "fullLength": 267,
                        "truncatedContent": "\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: ",
                        "hash": "1fb0292de1d0158a628ab39a27644d03",
                        "keywords": [
                          "生成"
                        ],
                        "sentiment": "neutral",
                        "complexity": "low",
                        "language": "english",
                        "novelElements": {
                          "genres": [],
                          "perspective": "third_person",
                          "tense": "present"
                        }
                      },
                      {
                        "type": "pattern_match",
                        "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                        "fullLength": 761,
                        "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                        "hash": "3231e0c6916fe75790dc783a2e1b8b35",
                        "keywords": [
                          "分析",
                          "生成",
                          "character",
                          "generate"
                        ],
                        "sentiment": "neutral",
                        "complexity": "low",
                        "language": "english",
                        "novelElements": {
                          "genres": [],
                          "perspective": "third_person",
                          "tense": "present"
                        }
                      },
                      {
                        "type": "template_literal",
                        "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                        "fullLength": 761,
                        "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                        "hash": "3231e0c6916fe75790dc783a2e1b8b35",
                        "hasVariables": false,
                        "variableCount": 0
                      },
                      {
                        "type": "method_based",
                        "suggestedPurpose": "buildGenreAnalysisPrompt",
                        "relatedMethods": [
                          "buildGenreAnalysisPrompt"
                        ],
                        "confidence": "medium"
                      }
                    ],
                    "expectedOutputs": [
                      {
                        "type": "type_annotation",
                        "types": [
                          ": Promise<DepthRecommendation[]>"
                        ],
                        "extractedTypes": [
                          "DepthRecommendation[]>"
                        ]
                      },
                      {
                        "type": "novel_structure",
                        "element": "title",
                        "confidence": "medium"
                      },
                      {
                        "type": "novel_structure",
                        "element": "character",
                        "confidence": "medium"
                      },
                      {
                        "type": "novel_structure",
                        "element": "description",
                        "confidence": "medium"
                      }
                    ],
                    "parameters": {
                      "temperature": {
                        "value": "0.3",
                        "source": "object_literal",
                        "confidence": "medium"
                      }
                    },
                    "novelSpecific": {
                      "hasNovelKeywords": true,
                      "detectedGenres": [
                        "SF"
                      ],
                      "storyElements": [],
                      "characterElements": [
                        "キャラクター",
                        "character"
                      ],
                      "narrativeStyle": "unknown"
                    },
                    "semanticAnalysis": {
                      "purposeIndicators": [
                        "生成",
                        "分析",
                        "構築",
                        "generate",
                        "build"
                      ],
                      "complexity": "low",
                      "dependencies": [
                        "urns",
                        "async",
                        "suggestGenreBasedTraits",
                        "character",
                        "Character",
                        "genre",
                        "string",
                        "Promise",
                        "DepthRecommendation",
                        "try"
                      ],
                      "outputUsage": {
                        "isAssigned": true,
                        "isAwaited": false,
                        "isChained": true,
                        "isLogged": false,
                        "isReturned": true
                      }
                    },
                    "duplicateHash": "002f1430c4a1c8bbb9e1ca504a580ed2"
                  },
                  {
                    "id": "call_1948d757",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "fileName": "character-depth-service.ts",
                    "lineNumber": 390,
                    "lineContent": "this.geminiClient.generateText(prompt, {",
                    "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
                    "callMethod": "generateText",
                    "fullMatch": "geminiClient.generateText(",
                    "context": {
                      "before": [
                        {
                          "lineNumber": 385,
                          "content": "// ジャンル適合性分析プロンプトを構築",
                          "indent": 12
                        },
                        {
                          "lineNumber": 386,
                          "content": "const prompt = this.buildGenreAnalysisPrompt(character, genre);",
                          "indent": 12
                        },
                        {
                          "lineNumber": 387,
                          "content": "",
                          "indent": 13
                        },
                        {
                          "lineNumber": 388,
                          "content": "// AI分析を実行",
                          "indent": 12
                        },
                        {
                          "lineNumber": 389,
                          "content": "const response = await apiThrottler.throttledRequest(() =>",
                          "indent": 12
                        }
                      ],
                      "current": {
                        "lineNumber": 390,
                        "content": "this.geminiClient.generateText(prompt, {",
                        "indent": 16
                      },
                      "after": [
                        {
                          "lineNumber": 391,
                          "content": "temperature: 0.3,",
                          "indent": 20
                        },
                        {
                          "lineNumber": 392,
                          "content": "targetLength: 800,",
                          "indent": 20
                        },
                        {
                          "lineNumber": 393,
                          "content": "purpose: 'analysis',",
                          "indent": 20
                        },
                        {
                          "lineNumber": 394,
                          "content": "responseFormat: 'json'",
                          "indent": 20
                        },
                        {
                          "lineNumber": 395,
                          "content": "})",
                          "indent": 16
                        }
                      ],
                      "functionContext": {
                        "functionName": "catch",
                        "startLine": 364,
                        "distance": 26
                      }
                    },
                    "prompts": [
                      {
                        "type": "pattern_match",
                        "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                        "fullLength": 761,
                        "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                        "hash": "3231e0c6916fe75790dc783a2e1b8b35",
                        "keywords": [
                          "分析",
                          "生成",
                          "character",
                          "generate"
                        ],
                        "sentiment": "neutral",
                        "complexity": "low",
                        "language": "english",
                        "novelElements": {
                          "genres": [],
                          "perspective": "third_person",
                          "tense": "present"
                        }
                      },
                      {
                        "type": "pattern_match",
                        "content": "\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: ",
                        "fullLength": 267,
                        "truncatedContent": "\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: ",
                        "hash": "1fb0292de1d0158a628ab39a27644d03",
                        "keywords": [
                          "生成"
                        ],
                        "sentiment": "neutral",
                        "complexity": "low",
                        "language": "english",
                        "novelElements": {
                          "genres": [],
                          "perspective": "third_person",
                          "tense": "present"
                        }
                      },
                      {
                        "type": "pattern_match",
                        "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                        "fullLength": 761,
                        "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                        "hash": "3231e0c6916fe75790dc783a2e1b8b35",
                        "keywords": [
                          "分析",
                          "生成",
                          "character",
                          "generate"
                        ],
                        "sentiment": "neutral",
                        "complexity": "low",
                        "language": "english",
                        "novelElements": {
                          "genres": [],
                          "perspective": "third_person",
                          "tense": "present"
                        }
                      },
                      {
                        "type": "template_literal",
                        "content": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                        "fullLength": 761,
                        "truncatedContent": ");\r\n            \r\n            // ジャンル適合性分析プロンプトを構築\r\n            const prompt = this.buildGenreAnalysisPrompt(character, genre);\r\n            \r\n            // AI分析を実行\r\n            const response = await apiThrottler.throttledRequest(() => \r\n                this.geminiClient.generateText(prompt, {\r\n                    temperature: 0.3,\r\n                    targetLength: 800,\r\n                    purpose: 'analysis',\r\n                    responseFormat: 'json'\r\n                })\r\n            );\r\n            \r\n            // レスポンスを解析して推奨を生成\r\n            const genreRecommendations = this.parseGenreRecommendationsResponse(response);\r\n            \r\n            return genreRecommendations.map(rec => ({\r\n                type: 'genre',\r\n                title: ",
                        "hash": "3231e0c6916fe75790dc783a2e1b8b35",
                        "hasVariables": false,
                        "variableCount": 0
                      },
                      {
                        "type": "method_based",
                        "suggestedPurpose": "buildGenreAnalysisPrompt",
                        "relatedMethods": [
                          "buildGenreAnalysisPrompt"
                        ],
                        "confidence": "medium"
                      }
                    ],
                    "expectedOutputs": [
                      {
                        "type": "type_annotation",
                        "types": [
                          ": Promise<DepthRecommendation[]>"
                        ],
                        "extractedTypes": [
                          "DepthRecommendation[]>"
                        ]
                      },
                      {
                        "type": "novel_structure",
                        "element": "title",
                        "confidence": "medium"
                      },
                      {
                        "type": "novel_structure",
                        "element": "character",
                        "confidence": "medium"
                      },
                      {
                        "type": "novel_structure",
                        "element": "description",
                        "confidence": "medium"
                      }
                    ],
                    "parameters": {
                      "temperature": {
                        "value": "0.3",
                        "source": "object_literal",
                        "confidence": "medium"
                      }
                    },
                    "novelSpecific": {
                      "hasNovelKeywords": true,
                      "detectedGenres": [
                        "SF"
                      ],
                      "storyElements": [],
                      "characterElements": [
                        "キャラクター",
                        "character"
                      ],
                      "narrativeStyle": "unknown"
                    },
                    "semanticAnalysis": {
                      "purposeIndicators": [
                        "生成",
                        "分析",
                        "構築",
                        "generate",
                        "build"
                      ],
                      "complexity": "low",
                      "dependencies": [
                        "urns",
                        "async",
                        "suggestGenreBasedTraits",
                        "character",
                        "Character",
                        "genre",
                        "string",
                        "Promise",
                        "DepthRecommendation",
                        "try"
                      ],
                      "outputUsage": {
                        "isAssigned": true,
                        "isAwaited": false,
                        "isChained": true,
                        "isLogged": false,
                        "isReturned": true
                      }
                    },
                    "duplicateHash": "002f1430c4a1c8bbb9e1ca504a580ed2"
                  }
                ],
                "count": 2,
                "severity": "high"
              },
              {
                "hash": "6656550b65c6ecd65464c7016e689e65",
                "calls": [
                  {
                    "id": "call_1c9a2ed2",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "fileName": "character-depth-service.ts",
                    "lineNumber": 689,
                    "lineContent": "this.geminiClient.generateText(prompt, {",
                    "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
                    "callMethod": "generateText",
                    "fullMatch": "geminiClient.generateText(",
                    "context": {
                      "before": [
                        {
                          "lineNumber": 684,
                          "content": "): Promise<CharacterArcRecommendation[]> {",
                          "indent": 4
                        },
                        {
                          "lineNumber": 685,
                          "content": "try {",
                          "indent": 8
                        },
                        {
                          "lineNumber": 686,
                          "content": "const prompt = this.buildArcOptimizationPrompt(character, analysisResult, chapterNumber);",
                          "indent": 12
                        },
                        {
                          "lineNumber": 687,
                          "content": "",
                          "indent": 13
                        },
                        {
                          "lineNumber": 688,
                          "content": "const response = await apiThrottler.throttledRequest(() =>",
                          "indent": 12
                        }
                      ],
                      "current": {
                        "lineNumber": 689,
                        "content": "this.geminiClient.generateText(prompt, {",
                        "indent": 16
                      },
                      "after": [
                        {
                          "lineNumber": 690,
                          "content": "temperature: 0.3,",
                          "indent": 20
                        },
                        {
                          "lineNumber": 691,
                          "content": "targetLength: 800,",
                          "indent": 20
                        },
                        {
                          "lineNumber": 692,
                          "content": "purpose: 'creation',",
                          "indent": 20
                        },
                        {
                          "lineNumber": 693,
                          "content": "responseFormat: 'json'",
                          "indent": 20
                        },
                        {
                          "lineNumber": 694,
                          "content": "})",
                          "indent": 16
                        }
                      ],
                      "functionContext": {
                        "functionName": "catch",
                        "startLine": 670,
                        "distance": 19
                      }
                    },
                    "prompts": [
                      {
                        "type": "pattern_match",
                        "content": "アーク推奨生成エラー: ${character.name}",
                        "fullLength": 29,
                        "truncatedContent": "アーク推奨生成エラー: ${character.name}",
                        "hash": "576e7d84ea2592c66dbf82ee784f8a60",
                        "keywords": [
                          "生成",
                          "character"
                        ],
                        "sentiment": "neutral",
                        "complexity": "low",
                        "language": "english",
                        "novelElements": {
                          "genres": [],
                          "perspective": "third_person",
                          "tense": "present"
                        }
                      },
                      {
                        "type": "method_based",
                        "suggestedPurpose": "CharacterAnalysis",
                        "relatedMethods": [
                          "CharacterAnalysis",
                          "buildArcOptimizationPrompt"
                        ],
                        "confidence": "medium"
                      }
                    ],
                    "expectedOutputs": [
                      {
                        "type": "type_annotation",
                        "types": [
                          ": CharacterAnalysisResult",
                          ": Promise<CharacterArcRecommendation[]>"
                        ],
                        "extractedTypes": [
                          "CharacterAnalysisResult",
                          "CharacterArcRecommendation[]>"
                        ]
                      },
                      {
                        "type": "novel_structure",
                        "element": "chapter",
                        "confidence": "medium"
                      },
                      {
                        "type": "novel_structure",
                        "element": "character",
                        "confidence": "medium"
                      }
                    ],
                    "parameters": {
                      "temperature": {
                        "value": "0.3",
                        "source": "object_literal",
                        "confidence": "medium"
                      }
                    },
                    "novelSpecific": {
                      "hasNovelKeywords": true,
                      "detectedGenres": [
                        "SF"
                      ],
                      "storyElements": [],
                      "characterElements": [
                        "キャラクター",
                        "character"
                      ],
                      "narrativeStyle": "unknown"
                    },
                    "semanticAnalysis": {
                      "purposeIndicators": [
                        "生成",
                        "generate",
                        "build"
                      ],
                      "complexity": "low",
                      "dependencies": [
                        "private",
                        "async",
                        "generateArcOptimizationRecommendations",
                        "character",
                        "Character",
                        "analysisResult",
                        "CharacterAnalysisResult",
                        "chapterNumber",
                        "number",
                        "Promise"
                      ],
                      "outputUsage": {
                        "isAssigned": false,
                        "isAwaited": false,
                        "isChained": true,
                        "isLogged": false,
                        "isReturned": true
                      }
                    },
                    "duplicateHash": "6656550b65c6ecd65464c7016e689e65"
                  },
                  {
                    "id": "call_3ab7176e",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "fileName": "character-depth-service.ts",
                    "lineNumber": 716,
                    "lineContent": "this.geminiClient.generateText(prompt, {",
                    "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
                    "callMethod": "generateText",
                    "fullMatch": "geminiClient.generateText(",
                    "context": {
                      "before": [
                        {
                          "lineNumber": 711,
                          "content": "): Promise<MotivationEnhancement[]> {",
                          "indent": 4
                        },
                        {
                          "lineNumber": 712,
                          "content": "try {",
                          "indent": 8
                        },
                        {
                          "lineNumber": 713,
                          "content": "const prompt = this.buildMotivationEnhancementPrompt(character, psychology);",
                          "indent": 12
                        },
                        {
                          "lineNumber": 714,
                          "content": "",
                          "indent": 13
                        },
                        {
                          "lineNumber": 715,
                          "content": "const response = await apiThrottler.throttledRequest(() =>",
                          "indent": 12
                        }
                      ],
                      "current": {
                        "lineNumber": 716,
                        "content": "this.geminiClient.generateText(prompt, {",
                        "indent": 16
                      },
                      "after": [
                        {
                          "lineNumber": 717,
                          "content": "temperature: 0.3,",
                          "indent": 20
                        },
                        {
                          "lineNumber": 718,
                          "content": "targetLength: 800,",
                          "indent": 20
                        },
                        {
                          "lineNumber": 719,
                          "content": "purpose: 'creation',",
                          "indent": 20
                        },
                        {
                          "lineNumber": 720,
                          "content": "responseFormat: 'json'",
                          "indent": 20
                        },
                        {
                          "lineNumber": 721,
                          "content": "})",
                          "indent": 16
                        }
                      ],
                      "functionContext": {
                        "functionName": "catch",
                        "startLine": 698,
                        "distance": 18
                      }
                    },
                    "prompts": [
                      {
                        "type": "pattern_match",
                        "content": "動機強化推奨生成エラー: ${character.name}",
                        "fullLength": 30,
                        "truncatedContent": "動機強化推奨生成エラー: ${character.name}",
                        "hash": "ed094c0116a864caf1639c6fd61d9a1c",
                        "keywords": [
                          "生成",
                          "character"
                        ],
                        "sentiment": "neutral",
                        "complexity": "low",
                        "language": "english",
                        "novelElements": {
                          "genres": [],
                          "perspective": "third_person",
                          "tense": "present"
                        }
                      },
                      {
                        "type": "method_based",
                        "suggestedPurpose": "buildMotivationEnhancementPrompt",
                        "relatedMethods": [
                          "buildMotivationEnhancementPrompt"
                        ],
                        "confidence": "medium"
                      }
                    ],
                    "expectedOutputs": [
                      {
                        "type": "type_annotation",
                        "types": [
                          ": Promise<MotivationEnhancement[]>"
                        ],
                        "extractedTypes": [
                          "MotivationEnhancement[]>"
                        ]
                      },
                      {
                        "type": "novel_structure",
                        "element": "character",
                        "confidence": "medium"
                      }
                    ],
                    "parameters": {
                      "temperature": {
                        "value": "0.3",
                        "source": "object_literal",
                        "confidence": "medium"
                      }
                    },
                    "novelSpecific": {
                      "hasNovelKeywords": true,
                      "detectedGenres": [
                        "SF"
                      ],
                      "storyElements": [],
                      "characterElements": [
                        "キャラクター",
                        "character"
                      ],
                      "narrativeStyle": "unknown"
                    },
                    "semanticAnalysis": {
                      "purposeIndicators": [
                        "生成",
                        "generate",
                        "build"
                      ],
                      "complexity": "low",
                      "dependencies": [
                        "rateFallbackArcRecommendations",
                        "character",
                        "private",
                        "async",
                        "generateMotivationEnhancements",
                        "Character",
                        "psychology",
                        "CharacterPsychology",
                        "Promise",
                        "MotivationEnhancement"
                      ],
                      "outputUsage": {
                        "isAssigned": false,
                        "isAwaited": false,
                        "isChained": true,
                        "isLogged": false,
                        "isReturned": true
                      }
                    },
                    "duplicateHash": "6656550b65c6ecd65464c7016e689e65"
                  },
                  {
                    "id": "call_1c9a2ed2",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "fileName": "character-depth-service.ts",
                    "lineNumber": 689,
                    "lineContent": "this.geminiClient.generateText(prompt, {",
                    "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
                    "callMethod": "generateText",
                    "fullMatch": "geminiClient.generateText(",
                    "context": {
                      "before": [
                        {
                          "lineNumber": 684,
                          "content": "): Promise<CharacterArcRecommendation[]> {",
                          "indent": 4
                        },
                        {
                          "lineNumber": 685,
                          "content": "try {",
                          "indent": 8
                        },
                        {
                          "lineNumber": 686,
                          "content": "const prompt = this.buildArcOptimizationPrompt(character, analysisResult, chapterNumber);",
                          "indent": 12
                        },
                        {
                          "lineNumber": 687,
                          "content": "",
                          "indent": 13
                        },
                        {
                          "lineNumber": 688,
                          "content": "const response = await apiThrottler.throttledRequest(() =>",
                          "indent": 12
                        }
                      ],
                      "current": {
                        "lineNumber": 689,
                        "content": "this.geminiClient.generateText(prompt, {",
                        "indent": 16
                      },
                      "after": [
                        {
                          "lineNumber": 690,
                          "content": "temperature: 0.3,",
                          "indent": 20
                        },
                        {
                          "lineNumber": 691,
                          "content": "targetLength: 800,",
                          "indent": 20
                        },
                        {
                          "lineNumber": 692,
                          "content": "purpose: 'creation',",
                          "indent": 20
                        },
                        {
                          "lineNumber": 693,
                          "content": "responseFormat: 'json'",
                          "indent": 20
                        },
                        {
                          "lineNumber": 694,
                          "content": "})",
                          "indent": 16
                        }
                      ],
                      "functionContext": {
                        "functionName": "catch",
                        "startLine": 670,
                        "distance": 19
                      }
                    },
                    "prompts": [
                      {
                        "type": "pattern_match",
                        "content": "アーク推奨生成エラー: ${character.name}",
                        "fullLength": 29,
                        "truncatedContent": "アーク推奨生成エラー: ${character.name}",
                        "hash": "576e7d84ea2592c66dbf82ee784f8a60",
                        "keywords": [
                          "生成",
                          "character"
                        ],
                        "sentiment": "neutral",
                        "complexity": "low",
                        "language": "english",
                        "novelElements": {
                          "genres": [],
                          "perspective": "third_person",
                          "tense": "present"
                        }
                      },
                      {
                        "type": "method_based",
                        "suggestedPurpose": "CharacterAnalysis",
                        "relatedMethods": [
                          "CharacterAnalysis",
                          "buildArcOptimizationPrompt"
                        ],
                        "confidence": "medium"
                      }
                    ],
                    "expectedOutputs": [
                      {
                        "type": "type_annotation",
                        "types": [
                          ": CharacterAnalysisResult",
                          ": Promise<CharacterArcRecommendation[]>"
                        ],
                        "extractedTypes": [
                          "CharacterAnalysisResult",
                          "CharacterArcRecommendation[]>"
                        ]
                      },
                      {
                        "type": "novel_structure",
                        "element": "chapter",
                        "confidence": "medium"
                      },
                      {
                        "type": "novel_structure",
                        "element": "character",
                        "confidence": "medium"
                      }
                    ],
                    "parameters": {
                      "temperature": {
                        "value": "0.3",
                        "source": "object_literal",
                        "confidence": "medium"
                      }
                    },
                    "novelSpecific": {
                      "hasNovelKeywords": true,
                      "detectedGenres": [
                        "SF"
                      ],
                      "storyElements": [],
                      "characterElements": [
                        "キャラクター",
                        "character"
                      ],
                      "narrativeStyle": "unknown"
                    },
                    "semanticAnalysis": {
                      "purposeIndicators": [
                        "生成",
                        "generate",
                        "build"
                      ],
                      "complexity": "low",
                      "dependencies": [
                        "private",
                        "async",
                        "generateArcOptimizationRecommendations",
                        "character",
                        "Character",
                        "analysisResult",
                        "CharacterAnalysisResult",
                        "chapterNumber",
                        "number",
                        "Promise"
                      ],
                      "outputUsage": {
                        "isAssigned": false,
                        "isAwaited": false,
                        "isChained": true,
                        "isLogged": false,
                        "isReturned": true
                      }
                    },
                    "duplicateHash": "6656550b65c6ecd65464c7016e689e65"
                  },
                  {
                    "id": "call_3ab7176e",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "fileName": "character-depth-service.ts",
                    "lineNumber": 716,
                    "lineContent": "this.geminiClient.generateText(prompt, {",
                    "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
                    "callMethod": "generateText",
                    "fullMatch": "geminiClient.generateText(",
                    "context": {
                      "before": [
                        {
                          "lineNumber": 711,
                          "content": "): Promise<MotivationEnhancement[]> {",
                          "indent": 4
                        },
                        {
                          "lineNumber": 712,
                          "content": "try {",
                          "indent": 8
                        },
                        {
                          "lineNumber": 713,
                          "content": "const prompt = this.buildMotivationEnhancementPrompt(character, psychology);",
                          "indent": 12
                        },
                        {
                          "lineNumber": 714,
                          "content": "",
                          "indent": 13
                        },
                        {
                          "lineNumber": 715,
                          "content": "const response = await apiThrottler.throttledRequest(() =>",
                          "indent": 12
                        }
                      ],
                      "current": {
                        "lineNumber": 716,
                        "content": "this.geminiClient.generateText(prompt, {",
                        "indent": 16
                      },
                      "after": [
                        {
                          "lineNumber": 717,
                          "content": "temperature: 0.3,",
                          "indent": 20
                        },
                        {
                          "lineNumber": 718,
                          "content": "targetLength: 800,",
                          "indent": 20
                        },
                        {
                          "lineNumber": 719,
                          "content": "purpose: 'creation',",
                          "indent": 20
                        },
                        {
                          "lineNumber": 720,
                          "content": "responseFormat: 'json'",
                          "indent": 20
                        },
                        {
                          "lineNumber": 721,
                          "content": "})",
                          "indent": 16
                        }
                      ],
                      "functionContext": {
                        "functionName": "catch",
                        "startLine": 698,
                        "distance": 18
                      }
                    },
                    "prompts": [
                      {
                        "type": "pattern_match",
                        "content": "動機強化推奨生成エラー: ${character.name}",
                        "fullLength": 30,
                        "truncatedContent": "動機強化推奨生成エラー: ${character.name}",
                        "hash": "ed094c0116a864caf1639c6fd61d9a1c",
                        "keywords": [
                          "生成",
                          "character"
                        ],
                        "sentiment": "neutral",
                        "complexity": "low",
                        "language": "english",
                        "novelElements": {
                          "genres": [],
                          "perspective": "third_person",
                          "tense": "present"
                        }
                      },
                      {
                        "type": "method_based",
                        "suggestedPurpose": "buildMotivationEnhancementPrompt",
                        "relatedMethods": [
                          "buildMotivationEnhancementPrompt"
                        ],
                        "confidence": "medium"
                      }
                    ],
                    "expectedOutputs": [
                      {
                        "type": "type_annotation",
                        "types": [
                          ": Promise<MotivationEnhancement[]>"
                        ],
                        "extractedTypes": [
                          "MotivationEnhancement[]>"
                        ]
                      },
                      {
                        "type": "novel_structure",
                        "element": "character",
                        "confidence": "medium"
                      }
                    ],
                    "parameters": {
                      "temperature": {
                        "value": "0.3",
                        "source": "object_literal",
                        "confidence": "medium"
                      }
                    },
                    "novelSpecific": {
                      "hasNovelKeywords": true,
                      "detectedGenres": [
                        "SF"
                      ],
                      "storyElements": [],
                      "characterElements": [
                        "キャラクター",
                        "character"
                      ],
                      "narrativeStyle": "unknown"
                    },
                    "semanticAnalysis": {
                      "purposeIndicators": [
                        "生成",
                        "generate",
                        "build"
                      ],
                      "complexity": "low",
                      "dependencies": [
                        "rateFallbackArcRecommendations",
                        "character",
                        "private",
                        "async",
                        "generateMotivationEnhancements",
                        "Character",
                        "psychology",
                        "CharacterPsychology",
                        "Promise",
                        "MotivationEnhancement"
                      ],
                      "outputUsage": {
                        "isAssigned": false,
                        "isAwaited": false,
                        "isChained": true,
                        "isLogged": false,
                        "isReturned": true
                      }
                    },
                    "duplicateHash": "6656550b65c6ecd65464c7016e689e65"
                  }
                ],
                "count": 4,
                "severity": "high"
              },
              {
                "hash": "70df527efb8f1ea6c86160329072acc5",
                "calls": [
                  {
                    "id": "call_18183c83",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "fileName": "character-depth-service.ts",
                    "lineNumber": 750,
                    "lineContent": "this.geminiClient.generateText(prompt, {",
                    "matchedPattern": "(\\w+\\.)?generateText\\s*\\(",
                    "callMethod": "generateText",
                    "fullMatch": "geminiClient.generateText(",
                    "context": {
                      "before": [
                        {
                          "lineNumber": 745,
                          "content": "}",
                          "indent": 12
                        },
                        {
                          "lineNumber": 746,
                          "content": "",
                          "indent": 13
                        },
                        {
                          "lineNumber": 747,
                          "content": "const prompt = this.buildContrastRecommendationsPrompt(character, sameTypeCharacters);",
                          "indent": 12
                        },
                        {
                          "lineNumber": 748,
                          "content": "",
                          "indent": 13
                        },
                        {
                          "lineNumber": 749,
                          "content": "const response = await apiThrottler.throttledRequest(() =>",
                          "indent": 12
                        }
                      ],
                      "current": {
                        "lineNumber": 750,
                        "content": "this.geminiClient.generateText(prompt, {",
                        "indent": 16
                      },
                      "after": [
                        {
                          "lineNumber": 751,
                          "content": "temperature: 0.4,",
                          "indent": 20
                        },
                        {
                          "lineNumber": 752,
                          "content": "targetLength: 800,",
                          "indent": 20
                        },
                        {
                          "lineNumber": 753,
                          "content": "purpose: 'creation',",
                          "indent": 20
                        },
                        {
                          "lineNumber": 754,
                          "content": "responseFormat: 'json'",
                          "indent": 20
                        },
                        {
                          "lineNumber": 755,
                          "content": "})",
                          "indent": 16
                        }
                      ],
                      "functionContext": {
                        "functionName": "if",
                        "startLine": 743,
                        "distance": 7
                      }
                    },
                    "prompts": [
                      {
                        "type": "pattern_match",
                        "content": "コントラスト推奨生成エラー: ${character.name}",
                        "fullLength": 32,
                        "truncatedContent": "コントラスト推奨生成エラー: ${character.name}",
                        "hash": "4cbbecf723eae2c9ef64c0e39f398284",
                        "keywords": [
                          "生成",
                          "character"
                        ],
                        "sentiment": "neutral",
                        "complexity": "low",
                        "language": "english",
                        "novelElements": {
                          "genres": [],
                          "perspective": "third_person",
                          "tense": "present"
                        }
                      },
                      {
                        "type": "method_based",
                        "suggestedPurpose": "buildContrastRecommendationsPrompt",
                        "relatedMethods": [
                          "buildContrastRecommendationsPrompt"
                        ],
                        "confidence": "medium"
                      }
                    ],
                    "expectedOutputs": [
                      {
                        "type": "type_annotation",
                        "types": [
                          ": Promise<ContrastRecommendation[]>"
                        ],
                        "extractedTypes": [
                          "ContrastRecommendation[]>"
                        ]
                      },
                      {
                        "type": "novel_structure",
                        "element": "chapter",
                        "confidence": "medium"
                      },
                      {
                        "type": "novel_structure",
                        "element": "character",
                        "confidence": "medium"
                      }
                    ],
                    "parameters": {
                      "temperature": {
                        "value": "0.4",
                        "source": "object_literal",
                        "confidence": "medium"
                      }
                    },
                    "novelSpecific": {
                      "hasNovelKeywords": true,
                      "detectedGenres": [
                        "SF"
                      ],
                      "storyElements": [],
                      "characterElements": [
                        "キャラクター",
                        "character"
                      ],
                      "narrativeStyle": "unknown"
                    },
                    "semanticAnalysis": {
                      "purposeIndicators": [
                        "生成",
                        "generate",
                        "build"
                      ],
                      "complexity": "low",
                      "dependencies": [
                        "getCharactersByType",
                        "const",
                        "sameTypeCharacters",
                        "await",
                        "this",
                        "characterManager",
                        "character",
                        "type",
                        "length",
                        "return"
                      ],
                      "outputUsage": {
                        "isAssigned": false,
                        "isAwaited": false,
                        "isChained": true,
                        "isLogged": false,
                        "isReturned": true
                      }
                    },
                    "duplicateHash": "70df527efb8f1ea6c86160329072acc5"
                  },
                  {
                    "id": "call_18183c83",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "fileName": "character-depth-service.ts",
                    "lineNumber": 750,
                    "lineContent": "this.geminiClient.generateText(prompt, {",
                    "matchedPattern": "geminiClient\\.\\w+\\s*\\(",
                    "callMethod": "generateText",
                    "fullMatch": "geminiClient.generateText(",
                    "context": {
                      "before": [
                        {
                          "lineNumber": 745,
                          "content": "}",
                          "indent": 12
                        },
                        {
                          "lineNumber": 746,
                          "content": "",
                          "indent": 13
                        },
                        {
                          "lineNumber": 747,
                          "content": "const prompt = this.buildContrastRecommendationsPrompt(character, sameTypeCharacters);",
                          "indent": 12
                        },
                        {
                          "lineNumber": 748,
                          "content": "",
                          "indent": 13
                        },
                        {
                          "lineNumber": 749,
                          "content": "const response = await apiThrottler.throttledRequest(() =>",
                          "indent": 12
                        }
                      ],
                      "current": {
                        "lineNumber": 750,
                        "content": "this.geminiClient.generateText(prompt, {",
                        "indent": 16
                      },
                      "after": [
                        {
                          "lineNumber": 751,
                          "content": "temperature: 0.4,",
                          "indent": 20
                        },
                        {
                          "lineNumber": 752,
                          "content": "targetLength: 800,",
                          "indent": 20
                        },
                        {
                          "lineNumber": 753,
                          "content": "purpose: 'creation',",
                          "indent": 20
                        },
                        {
                          "lineNumber": 754,
                          "content": "responseFormat: 'json'",
                          "indent": 20
                        },
                        {
                          "lineNumber": 755,
                          "content": "})",
                          "indent": 16
                        }
                      ],
                      "functionContext": {
                        "functionName": "if",
                        "startLine": 743,
                        "distance": 7
                      }
                    },
                    "prompts": [
                      {
                        "type": "pattern_match",
                        "content": "コントラスト推奨生成エラー: ${character.name}",
                        "fullLength": 32,
                        "truncatedContent": "コントラスト推奨生成エラー: ${character.name}",
                        "hash": "4cbbecf723eae2c9ef64c0e39f398284",
                        "keywords": [
                          "生成",
                          "character"
                        ],
                        "sentiment": "neutral",
                        "complexity": "low",
                        "language": "english",
                        "novelElements": {
                          "genres": [],
                          "perspective": "third_person",
                          "tense": "present"
                        }
                      },
                      {
                        "type": "method_based",
                        "suggestedPurpose": "buildContrastRecommendationsPrompt",
                        "relatedMethods": [
                          "buildContrastRecommendationsPrompt"
                        ],
                        "confidence": "medium"
                      }
                    ],
                    "expectedOutputs": [
                      {
                        "type": "type_annotation",
                        "types": [
                          ": Promise<ContrastRecommendation[]>"
                        ],
                        "extractedTypes": [
                          "ContrastRecommendation[]>"
                        ]
                      },
                      {
                        "type": "novel_structure",
                        "element": "chapter",
                        "confidence": "medium"
                      },
                      {
                        "type": "novel_structure",
                        "element": "character",
                        "confidence": "medium"
                      }
                    ],
                    "parameters": {
                      "temperature": {
                        "value": "0.4",
                        "source": "object_literal",
                        "confidence": "medium"
                      }
                    },
                    "novelSpecific": {
                      "hasNovelKeywords": true,
                      "detectedGenres": [
                        "SF"
                      ],
                      "storyElements": [],
                      "characterElements": [
                        "キャラクター",
                        "character"
                      ],
                      "narrativeStyle": "unknown"
                    },
                    "semanticAnalysis": {
                      "purposeIndicators": [
                        "生成",
                        "generate",
                        "build"
                      ],
                      "complexity": "low",
                      "dependencies": [
                        "getCharactersByType",
                        "const",
                        "sameTypeCharacters",
                        "await",
                        "this",
                        "characterManager",
                        "character",
                        "type",
                        "length",
                        "return"
                      ],
                      "outputUsage": {
                        "isAssigned": false,
                        "isAwaited": false,
                        "isChained": true,
                        "isLogged": false,
                        "isReturned": true
                      }
                    },
                    "duplicateHash": "70df527efb8f1ea6c86160329072acc5"
                  }
                ],
                "count": 2,
                "severity": "high"
              }
            ],
            "estimatedSavings": {
              "codeLines": 390,
              "apiCalls": 78,
              "estimatedCostReduction": "10-30%"
            }
          }
        ],
        "timeframe": "1週間以内"
      },
      "phase2_shortTerm": {
        "title": "短期間で対応すべき項目",
        "items": [
          {
            "type": "DUPLICATE_PROMPTS",
            "severity": "HIGH",
            "priority": 2,
            "count": 30,
            "description": "重複または類似のプロンプトが多数検出されました",
            "suggestion": "プロンプトテンプレートシステムの導入を検討してください",
            "impact": "コード重複削減、一貫性向上、変更管理の簡素化",
            "details": [
              {
                "hash": "3231e0c6916fe75790dc783a2e1b8b35",
                "calls": [
                  {
                    "callId": "call_1948d757",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "lineNumber": 390,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 761
                  },
                  {
                    "callId": "call_1948d757",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "lineNumber": 390,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 761
                  },
                  {
                    "callId": "call_1948d757",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "lineNumber": 390,
                    "method": "generateText",
                    "promptType": "template_literal",
                    "promptLength": 761
                  },
                  {
                    "callId": "call_1948d757",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "lineNumber": 390,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 761
                  },
                  {
                    "callId": "call_1948d757",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "lineNumber": 390,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 761
                  },
                  {
                    "callId": "call_1948d757",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "lineNumber": 390,
                    "method": "generateText",
                    "promptType": "template_literal",
                    "promptLength": 761
                  },
                  {
                    "callId": "call_580712e8",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "lineNumber": 390,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 761
                  },
                  {
                    "callId": "call_580712e8",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "lineNumber": 390,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 761
                  },
                  {
                    "callId": "call_580712e8",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "lineNumber": 390,
                    "method": "generateText",
                    "promptType": "template_literal",
                    "promptLength": 761
                  }
                ],
                "count": 9,
                "severity": "high"
              },
              {
                "hash": "21db59c7003619a326b9f42bf8560435",
                "calls": [
                  {
                    "callId": "call_1f3e5a77",
                    "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                    "lineNumber": 881,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 720
                  },
                  {
                    "callId": "call_1f3e5a77",
                    "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                    "lineNumber": 881,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 720
                  },
                  {
                    "callId": "call_1f3e5a77",
                    "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                    "lineNumber": 881,
                    "method": "generateText",
                    "promptType": "template_literal",
                    "promptLength": 720
                  },
                  {
                    "callId": "call_3e476d9e",
                    "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                    "lineNumber": 881,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 720
                  },
                  {
                    "callId": "call_3e476d9e",
                    "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                    "lineNumber": 881,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 720
                  },
                  {
                    "callId": "call_3e476d9e",
                    "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                    "lineNumber": 881,
                    "method": "generateText",
                    "promptType": "template_literal",
                    "promptLength": 720
                  }
                ],
                "count": 6,
                "severity": "high"
              },
              {
                "hash": "930f774d0f29d9500d67bcea6c3f198c",
                "calls": [
                  {
                    "callId": "call_4ad1c568",
                    "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
                    "lineNumber": 218,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 290
                  },
                  {
                    "callId": "call_4ad1c568",
                    "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
                    "lineNumber": 218,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 290
                  },
                  {
                    "callId": "call_4ad1c568",
                    "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
                    "lineNumber": 218,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 290
                  },
                  {
                    "callId": "call_4ad1c568",
                    "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
                    "lineNumber": 218,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 290
                  },
                  {
                    "callId": "call_fbfd72f9",
                    "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
                    "lineNumber": 218,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 290
                  },
                  {
                    "callId": "call_fbfd72f9",
                    "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
                    "lineNumber": 218,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 290
                  }
                ],
                "count": 6,
                "severity": "high"
              },
              {
                "hash": "e5308eae8a37807f36a1ec49e852dc69",
                "calls": [
                  {
                    "callId": "call_1ed727cf",
                    "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                    "lineNumber": 452,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 602
                  },
                  {
                    "callId": "call_1ed727cf",
                    "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                    "lineNumber": 452,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 602
                  },
                  {
                    "callId": "call_1ed727cf",
                    "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                    "lineNumber": 452,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 602
                  },
                  {
                    "callId": "call_1ed727cf",
                    "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                    "lineNumber": 452,
                    "method": "generateText",
                    "promptType": "template_literal",
                    "promptLength": 602
                  },
                  {
                    "callId": "call_1ed727cf",
                    "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                    "lineNumber": 452,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 602
                  },
                  {
                    "callId": "call_1ed727cf",
                    "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                    "lineNumber": 452,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 602
                  },
                  {
                    "callId": "call_1ed727cf",
                    "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                    "lineNumber": 452,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 602
                  },
                  {
                    "callId": "call_1ed727cf",
                    "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                    "lineNumber": 452,
                    "method": "generateText",
                    "promptType": "template_literal",
                    "promptLength": 602
                  },
                  {
                    "callId": "call_3cd296f3",
                    "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                    "lineNumber": 452,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 602
                  },
                  {
                    "callId": "call_3cd296f3",
                    "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                    "lineNumber": 452,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 602
                  },
                  {
                    "callId": "call_3cd296f3",
                    "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                    "lineNumber": 452,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 602
                  },
                  {
                    "callId": "call_3cd296f3",
                    "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                    "lineNumber": 452,
                    "method": "generateText",
                    "promptType": "template_literal",
                    "promptLength": 602
                  }
                ],
                "count": 12,
                "severity": "high"
              },
              {
                "hash": "ef22b68a1f51ab155d2f99657097a80f",
                "calls": [
                  {
                    "callId": "call_5a61e7e9",
                    "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                    "lineNumber": 461,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 800
                  },
                  {
                    "callId": "call_5a61e7e9",
                    "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                    "lineNumber": 461,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 800
                  },
                  {
                    "callId": "call_5a61e7e9",
                    "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                    "lineNumber": 461,
                    "method": "generateText",
                    "promptType": "template_literal",
                    "promptLength": 800
                  },
                  {
                    "callId": "call_42f50d23",
                    "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                    "lineNumber": 461,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 800
                  },
                  {
                    "callId": "call_42f50d23",
                    "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                    "lineNumber": 461,
                    "method": "generateText",
                    "promptType": "pattern_match",
                    "promptLength": 800
                  },
                  {
                    "callId": "call_42f50d23",
                    "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                    "lineNumber": 461,
                    "method": "generateText",
                    "promptType": "template_literal",
                    "promptLength": 800
                  }
                ],
                "count": 6,
                "severity": "high"
              }
            ],
            "implementationGuide": [
              "共通プロンプトテンプレートファイルの作成",
              "パラメータ化されたプロンプト関数の実装",
              "プロンプトバリデーション機能の追加"
            ]
          }
        ],
        "timeframe": "1ヶ月以内"
      },
      "phase3_mediumTerm": {
        "title": "中期的に対応すべき項目",
        "items": [
          {
            "type": "DUPLICATE_OUTPUTS",
            "severity": "MEDIUM",
            "priority": 3,
            "count": 34,
            "description": "重複する出力パターンが検出されました",
            "suggestion": "共通インターフェースまたは型定義の作成を検討してください",
            "impact": "型安全性向上、開発効率向上",
            "details": [
              {
                "pattern": "novel:chapter",
                "calls": [
                  {
                    "callId": "call_6bca0ae0",
                    "filePath": "src\\app\\api\\generation\\chapter\\route.ts",
                    "lineNumber": 233,
                    "method": "generateChapter",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_5eb04109",
                    "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
                    "lineNumber": 468,
                    "method": "analyzeCharacter",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_462fa399",
                    "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
                    "lineNumber": 708,
                    "method": "analyzeCharacter",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_e3f53090",
                    "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
                    "lineNumber": 762,
                    "method": "analyzeCharacter",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_e72a01ca",
                    "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
                    "lineNumber": 820,
                    "method": "analyzeStyle",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_1c9a2ed2",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "lineNumber": 689,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_18183c83",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "lineNumber": 750,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_0459ffc7",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "lineNumber": 535,
                    "method": "analyzeCharacter",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_4bc217e9",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "lineNumber": 536,
                    "method": "analyzeCharacter",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_1c9a2ed2",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "lineNumber": 689,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_18183c83",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "lineNumber": 750,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_874c5434",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "lineNumber": 689,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_1ba6677b",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "lineNumber": 750,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_e3499eaa",
                    "filePath": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
                    "lineNumber": 145,
                    "method": "analyzeStyle",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_1035d952",
                    "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
                    "lineNumber": 450,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_65dcaee2",
                    "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
                    "lineNumber": 717,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_b943c4c9",
                    "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
                    "lineNumber": 450,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_d1dbf14b",
                    "filePath": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
                    "lineNumber": 717,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_69171be2",
                    "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                    "lineNumber": 182,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_0696c96c",
                    "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                    "lineNumber": 290,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_edfc52ac",
                    "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                    "lineNumber": 791,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_1f3e5a77",
                    "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                    "lineNumber": 881,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_ce99d105",
                    "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                    "lineNumber": 182,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_ed6830f7",
                    "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                    "lineNumber": 290,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_61ed4d09",
                    "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                    "lineNumber": 791,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_3e476d9e",
                    "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                    "lineNumber": 881,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_129ddf5b",
                    "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
                    "lineNumber": 89,
                    "method": "analyzeCharacter",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_818d1a06",
                    "filePath": "src\\lib\\analysis\\services\\character\\interfaces.ts",
                    "lineNumber": 24,
                    "method": "analyzeCharacter",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_4ad1c568",
                    "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
                    "lineNumber": 218,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_4ad1c568",
                    "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
                    "lineNumber": 218,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_fbfd72f9",
                    "filePath": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
                    "lineNumber": 218,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_1ed727cf",
                    "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                    "lineNumber": 452,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_1ed727cf",
                    "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                    "lineNumber": 452,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_3cd296f3",
                    "filePath": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
                    "lineNumber": 452,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_2d6b1ee3",
                    "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                    "lineNumber": 395,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_5a61e7e9",
                    "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                    "lineNumber": 461,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_cd18ed56",
                    "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                    "lineNumber": 688,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_306575ca",
                    "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                    "lineNumber": 710,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_7e6621ef",
                    "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                    "lineNumber": 2139,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_c3189908",
                    "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                    "lineNumber": 395,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_42f50d23",
                    "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                    "lineNumber": 461,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_afc20166",
                    "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                    "lineNumber": 688,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_55a9819f",
                    "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                    "lineNumber": 710,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_360a38f7",
                    "filePath": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
                    "lineNumber": 2139,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_b27aa071",
                    "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
                    "lineNumber": 183,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_b27aa071",
                    "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
                    "lineNumber": 183,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_bf02a47e",
                    "filePath": "src\\lib\\foreshadowing\\auto-generator.ts",
                    "lineNumber": 183,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_0e0ffa92",
                    "filePath": "src\\lib\\foreshadowing\\engine.ts",
                    "lineNumber": 379,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_6adb174a",
                    "filePath": "src\\lib\\foreshadowing\\engine.ts",
                    "lineNumber": 1006,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_0e0ffa92",
                    "filePath": "src\\lib\\foreshadowing\\engine.ts",
                    "lineNumber": 379,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_6adb174a",
                    "filePath": "src\\lib\\foreshadowing\\engine.ts",
                    "lineNumber": 1006,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_6d2bdcd3",
                    "filePath": "src\\lib\\foreshadowing\\engine.ts",
                    "lineNumber": 379,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_14ab93e8",
                    "filePath": "src\\lib\\foreshadowing\\engine.ts",
                    "lineNumber": 1006,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_aea0563d",
                    "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
                    "lineNumber": 408,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_aea0563d",
                    "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
                    "lineNumber": 408,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_9ebc9a83",
                    "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
                    "lineNumber": 400,
                    "method": "buildAnalysisPrompt",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_8c27c221",
                    "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
                    "lineNumber": 635,
                    "method": "buildAnalysisPrompt",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_7b8b64d8",
                    "filePath": "src\\lib\\foreshadowing\\resolution-advisor.ts",
                    "lineNumber": 408,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_869cbbc6",
                    "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
                    "lineNumber": 357,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_869cbbc6",
                    "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
                    "lineNumber": 357,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_ca2cf1b3",
                    "filePath": "src\\lib\\generation\\engine\\chapter-generator.ts",
                    "lineNumber": 357,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_9819843c",
                    "filePath": "src\\lib\\generation\\engine.ts",
                    "lineNumber": 184,
                    "method": "generateChapter",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_c66a8107",
                    "filePath": "src\\lib\\generation\\engine.ts",
                    "lineNumber": 261,
                    "method": "generateChapter",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_bfc638e7",
                    "filePath": "src\\lib\\generation\\engine.ts",
                    "lineNumber": 263,
                    "method": "generateChapter",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_ca729a9d",
                    "filePath": "src\\lib\\learning-journey\\context-manager.ts",
                    "lineNumber": 470,
                    "method": "generateSummary",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_796b89ed",
                    "filePath": "src\\lib\\learning-journey\\context-manager.ts",
                    "lineNumber": 515,
                    "method": "generateSummary",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_63625169",
                    "filePath": "src\\lib\\learning-journey\\context-manager.ts",
                    "lineNumber": 908,
                    "method": "generateSummary",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_fa708e96",
                    "filePath": "src\\lib\\learning-journey\\context-manager.ts",
                    "lineNumber": 1031,
                    "method": "generateSummary",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_43a85937",
                    "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
                    "lineNumber": 461,
                    "method": "executeAIAnalysis",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_9bbf9fcd",
                    "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
                    "lineNumber": 543,
                    "method": "executeAIAnalysis",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_0bf1b71f",
                    "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
                    "lineNumber": 605,
                    "method": "executeAIAnalysis",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_75df9e80",
                    "filePath": "src\\lib\\learning-journey\\index.ts",
                    "lineNumber": 1225,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_75df9e80",
                    "filePath": "src\\lib\\learning-journey\\index.ts",
                    "lineNumber": 1225,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_edef0302",
                    "filePath": "src\\lib\\learning-journey\\index.ts",
                    "lineNumber": 1225,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_b821aa55",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 632,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_59aa5683",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 671,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_2c81c351",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 717,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_b821aa55",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 632,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_59aa5683",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 671,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_2c81c351",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 717,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_a643be4b",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 138,
                    "method": "performAICoherenceAnalysis",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_2f7dba2f",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 201,
                    "method": "performAIObjectiveAnalysis",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_8749b3de",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 276,
                    "method": "performAIEmotionalAnalysis",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_5f96b84e",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 622,
                    "method": "performAICoherenceAnalysis",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_a6c8c1d7",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 661,
                    "method": "performAIObjectiveAnalysis",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_503d7717",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 707,
                    "method": "performAIEmotionalAnalysis",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_01bf8aff",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 632,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_7234ed6d",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 671,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_25880c3e",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 717,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_27c6e3cd",
                    "filePath": "src\\lib\\plot\\section\\section-designer.ts",
                    "lineNumber": 165,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_fbc93dbd",
                    "filePath": "src\\lib\\plot\\section\\section-designer.ts",
                    "lineNumber": 1005,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_27c6e3cd",
                    "filePath": "src\\lib\\plot\\section\\section-designer.ts",
                    "lineNumber": 165,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_fbc93dbd",
                    "filePath": "src\\lib\\plot\\section\\section-designer.ts",
                    "lineNumber": 1005,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_c9e2a5af",
                    "filePath": "src\\lib\\plot\\section\\section-designer.ts",
                    "lineNumber": 165,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_571cb420",
                    "filePath": "src\\lib\\plot\\section\\section-designer.ts",
                    "lineNumber": 1005,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  }
                ],
                "count": 95,
                "severity": "high"
              },
              {
                "pattern": "type:string>",
                "calls": [
                  {
                    "callId": "call_769936d4",
                    "filePath": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
                    "lineNumber": 51,
                    "method": "generateText",
                    "outputType": "type_annotation"
                  },
                  {
                    "callId": "call_cced1d04",
                    "filePath": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
                    "lineNumber": 166,
                    "method": "generateText",
                    "outputType": "type_annotation"
                  },
                  {
                    "callId": "call_12be75a9",
                    "filePath": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
                    "lineNumber": 154,
                    "method": "generateContent",
                    "outputType": "type_annotation"
                  },
                  {
                    "callId": "call_815968e8",
                    "filePath": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
                    "lineNumber": 166,
                    "method": "generateText",
                    "outputType": "type_annotation"
                  },
                  {
                    "callId": "call_9c35b55d",
                    "filePath": "src\\lib\\analysis\\adapters\\interfaces.ts",
                    "lineNumber": 21,
                    "method": "generateText",
                    "outputType": "type_annotation"
                  },
                  {
                    "callId": "call_4da878fb",
                    "filePath": "src\\lib\\generation\\gemini-client.ts",
                    "lineNumber": 248,
                    "method": "generateText",
                    "outputType": "type_annotation"
                  },
                  {
                    "callId": "call_59370f58",
                    "filePath": "src\\lib\\generation\\gemini-client.ts",
                    "lineNumber": 376,
                    "method": "executeGeminiRequest",
                    "outputType": "type_annotation"
                  },
                  {
                    "callId": "call_a225d13e",
                    "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
                    "lineNumber": 1030,
                    "method": "generateText",
                    "outputType": "type_annotation"
                  },
                  {
                    "callId": "call_a225d13e",
                    "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
                    "lineNumber": 1030,
                    "method": "generateText",
                    "outputType": "type_annotation"
                  },
                  {
                    "callId": "call_e0f3f264",
                    "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
                    "lineNumber": 1028,
                    "method": "executeAIAnalysis",
                    "outputType": "type_annotation"
                  },
                  {
                    "callId": "call_40dce312",
                    "filePath": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
                    "lineNumber": 1030,
                    "method": "generateText",
                    "outputType": "type_annotation"
                  }
                ],
                "count": 11,
                "severity": "high"
              },
              {
                "pattern": "type:ChapterAnalysis>",
                "calls": [
                  {
                    "callId": "call_5eb04109",
                    "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
                    "lineNumber": 468,
                    "method": "analyzeCharacter",
                    "outputType": "type_annotation"
                  },
                  {
                    "callId": "call_edfc52ac",
                    "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                    "lineNumber": 791,
                    "method": "generateText",
                    "outputType": "type_annotation"
                  },
                  {
                    "callId": "call_61ed4d09",
                    "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                    "lineNumber": 791,
                    "method": "generateText",
                    "outputType": "type_annotation"
                  }
                ],
                "count": 3,
                "severity": "medium"
              },
              {
                "pattern": "novel:title",
                "calls": [
                  {
                    "callId": "call_5eb04109",
                    "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
                    "lineNumber": 468,
                    "method": "analyzeCharacter",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_1948d757",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "lineNumber": 390,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_1948d757",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "lineNumber": 390,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_580712e8",
                    "filePath": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
                    "lineNumber": 390,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_1f3e5a77",
                    "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                    "lineNumber": 881,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_3e476d9e",
                    "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                    "lineNumber": 881,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_ca729a9d",
                    "filePath": "src\\lib\\learning-journey\\context-manager.ts",
                    "lineNumber": 470,
                    "method": "generateSummary",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_796b89ed",
                    "filePath": "src\\lib\\learning-journey\\context-manager.ts",
                    "lineNumber": 515,
                    "method": "generateSummary",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_63625169",
                    "filePath": "src\\lib\\learning-journey\\context-manager.ts",
                    "lineNumber": 908,
                    "method": "generateSummary",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_fa708e96",
                    "filePath": "src\\lib\\learning-journey\\context-manager.ts",
                    "lineNumber": 1031,
                    "method": "generateSummary",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_b821aa55",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 632,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_59aa5683",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 671,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_2c81c351",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 717,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_71c3a3c1",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 773,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_b821aa55",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 632,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_59aa5683",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 671,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_2c81c351",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 717,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_71c3a3c1",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 773,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_5f96b84e",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 622,
                    "method": "performAICoherenceAnalysis",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_a6c8c1d7",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 661,
                    "method": "performAIObjectiveAnalysis",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_503d7717",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 707,
                    "method": "performAIEmotionalAnalysis",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_01bf8aff",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 632,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_7234ed6d",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 671,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_25880c3e",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 717,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_5414a8ea",
                    "filePath": "src\\lib\\plot\\section\\section-analyzer.ts",
                    "lineNumber": 773,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_fbc93dbd",
                    "filePath": "src\\lib\\plot\\section\\section-designer.ts",
                    "lineNumber": 1005,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_fbc93dbd",
                    "filePath": "src\\lib\\plot\\section\\section-designer.ts",
                    "lineNumber": 1005,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_571cb420",
                    "filePath": "src\\lib\\plot\\section\\section-designer.ts",
                    "lineNumber": 1005,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  }
                ],
                "count": 28,
                "severity": "high"
              },
              {
                "pattern": "novel:scene",
                "calls": [
                  {
                    "callId": "call_5eb04109",
                    "filePath": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
                    "lineNumber": 468,
                    "method": "analyzeCharacter",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_1f3e5a77",
                    "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                    "lineNumber": 881,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_3e476d9e",
                    "filePath": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
                    "lineNumber": 881,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_f85b10f3",
                    "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
                    "lineNumber": 342,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_ef390022",
                    "filePath": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
                    "lineNumber": 342,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_63625169",
                    "filePath": "src\\lib\\learning-journey\\context-manager.ts",
                    "lineNumber": 908,
                    "method": "generateSummary",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_27c6e3cd",
                    "filePath": "src\\lib\\plot\\section\\section-designer.ts",
                    "lineNumber": 165,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_27c6e3cd",
                    "filePath": "src\\lib\\plot\\section\\section-designer.ts",
                    "lineNumber": 165,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  },
                  {
                    "callId": "call_c9e2a5af",
                    "filePath": "src\\lib\\plot\\section\\section-designer.ts",
                    "lineNumber": 165,
                    "method": "generateText",
                    "outputType": "novel_structure"
                  }
                ],
                "count": 9,
                "severity": "high"
              }
            ],
            "implementationGuide": [
              "共通型定義ファイルの作成",
              "レスポンスパーサーの統一",
              "バリデーション機能の実装"
            ]
          },
          {
            "type": "HIGH_FREQUENCY_METHODS",
            "severity": "MEDIUM",
            "priority": 4,
            "description": "高頻度で使用されているAIメソッドが検出されました",
            "suggestion": "キャッシュシステムまたはバッチ処理の実装を検討してください",
            "impact": "API呼び出し削減、レスポンス速度向上、コスト削減",
            "details": [
              [
                "generateText",
                187
              ],
              [
                "generateContent",
                16
              ]
            ],
            "implementationGuide": [
              "レスポンスキャッシュシステムの実装",
              "バッチ処理による効率化",
              "リクエスト重複除去機能の追加"
            ]
          }
        ],
        "timeframe": "3ヶ月以内"
      },
      "phase4_longTerm": {
        "title": "長期的に検討すべき項目",
        "items": [
          {
            "type": "GENRE_CONSISTENCY",
            "severity": "LOW",
            "priority": 6,
            "description": "複数のジャンルが混在している可能性があります",
            "suggestion": "ジャンル別にプロンプトテンプレートを分離することを検討してください",
            "impact": "生成内容の一貫性向上",
            "details": {
              "detectedGenres": [
                "SF",
                "ファンタジー",
                "ミステリー",
                "ロマンス",
                "ホラー",
                "アクション",
                "fantasy",
                "mystery",
                "romance",
                "horror"
              ]
            }
          }
        ],
        "timeframe": "6ヶ月以内"
      }
    },
    "quickWins": [
      {
        "title": "完全に重複するAI呼び出しが検出されました",
        "effort": "low",
        "impact": "high",
        "estimatedTime": "1-2時間",
        "steps": [
          "重複コードの特定",
          "共通関数の作成",
          "リファクタリング実行"
        ]
      },
      {
        "title": "重複または類似のプロンプトが多数検出されました",
        "effort": "low",
        "impact": "high",
        "estimatedTime": "1-2時間",
        "steps": [
          "共通プロンプトテンプレートファイルの作成",
          "パラメータ化されたプロンプト関数の実装",
          "プロンプトバリデーション機能の追加"
        ]
      }
    ]
  },
  "appendix": {
    "glossary": {
      "AI呼び出し": "AIサービス（OpenAI、Anthropic、Geminiなど）のAPIを呼び出すコード",
      "プロンプト": "AIに送信する指示文やクエリ",
      "重複パターン": "同じまたは類似の処理を行う複数のコード箇所",
      "セマンティック分析": "コードの意味的な内容を分析する手法",
      "テンプレートリテラル": "JavaScriptの文字列テンプレート機能（バッククォートで囲まれた文字列）",
      "複雑度": "コードやプロンプトの理解しやすさや処理の難易度",
      "小説特有要素": "小説生成に特化したキーワードや処理パターン"
    },
    "methodReference": [
      {
        "method": "generateChapter",
        "description": "小説の章を生成するメソッド",
        "usageCount": 4,
        "commonPurposes": [
          "生成",
          "generate"
        ],
        "exampleUsage": {
          "file": "src\\app\\api\\generation\\chapter\\route.ts",
          "line": 233,
          "context": "const chapter = await generationEngine.generateChapter(chapterNumber, requestData);"
        }
      },
      {
        "method": "generateText",
        "description": "テキスト生成を行うメソッド",
        "usageCount": 187,
        "commonPurposes": [
          "生成",
          "generate",
          "create",
          "分析",
          "構築",
          "build",
          "作成",
          "analyze",
          "評価",
          "判断",
          "設計",
          "design"
        ],
        "exampleUsage": {
          "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
          "line": 51,
          "context": "async generateText("
        }
      },
      {
        "method": "generateContent",
        "description": "コンテンツ生成を行うメソッド",
        "usageCount": 16,
        "commonPurposes": [
          "生成",
          "分析",
          "generate",
          "設計"
        ],
        "exampleUsage": {
          "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
          "line": 154,
          "context": "async generateContent("
        }
      },
      {
        "method": "analyzeCharacter",
        "description": "analyzeCharacterの詳細な説明は不明",
        "usageCount": 10,
        "commonPurposes": [
          "作成",
          "分析",
          "generate",
          "create",
          "analyze",
          "生成"
        ],
        "exampleUsage": {
          "file": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
          "line": 468,
          "context": "const characterAnalysis = await this.characterAnalysisService.analyzeCharacter(content, chapterNumber, context);"
        }
      },
      {
        "method": "analyzeStyle",
        "description": "analyzeStyleの詳細な説明は不明",
        "usageCount": 4,
        "commonPurposes": [
          "分析",
          "analyze",
          "生成",
          "generate"
        ],
        "exampleUsage": {
          "file": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
          "line": 820,
          "context": "this.styleAnalysisService.analyzeStyle(content),"
        }
      },
      {
        "method": "buildAnalysisPrompt",
        "description": "buildAnalysisPromptの詳細な説明は不明",
        "usageCount": 2,
        "commonPurposes": [
          "分析",
          "評価",
          "構築",
          "generate",
          "evaluate",
          "build"
        ],
        "exampleUsage": {
          "file": "src\\lib\\foreshadowing\\resolution-advisor.ts",
          "line": 400,
          "context": "const prompt = this.buildAnalysisPrompt("
        }
      },
      {
        "method": "validateApiKey",
        "description": "validateApiKeyの詳細な説明は不明",
        "usageCount": 4,
        "commonPurposes": [
          "生成",
          "分析"
        ],
        "exampleUsage": {
          "file": "src\\lib\\generation\\engine\\chapter-generator.ts",
          "line": 914,
          "context": "const apiKeyValid = await this.geminiClient.validateApiKey();"
        }
      },
      {
        "method": "setModelMap",
        "description": "setModelMapの詳細な説明は不明",
        "usageCount": 3,
        "commonPurposes": [],
        "exampleUsage": {
          "file": "src\\lib\\generation\\engine.ts",
          "line": 72,
          "context": "this.geminiClient.setModelMap(params.generation.models);"
        }
      },
      {
        "method": "getModelInfo",
        "description": "getModelInfoの詳細な説明は不明",
        "usageCount": 3,
        "commonPurposes": [],
        "exampleUsage": {
          "file": "src\\lib\\generation\\engine.ts",
          "line": 108,
          "context": "const modelInfo = this.geminiClient.getModelInfo();"
        }
      },
      {
        "method": "generateStory",
        "description": "generateStoryの詳細な説明は不明",
        "usageCount": 1,
        "commonPurposes": [
          "生成",
          "generate"
        ],
        "exampleUsage": {
          "file": "src\\lib\\generation\\gemini-client.ts",
          "line": 726,
          "context": "* async function generateStory() {"
        }
      },
      {
        "method": "executeGeminiRequest",
        "description": "executeGeminiRequestの詳細な説明は不明",
        "usageCount": 3,
        "commonPurposes": [
          "生成",
          "generate"
        ],
        "exampleUsage": {
          "file": "src\\lib\\generation\\gemini-client.ts",
          "line": 319,
          "context": "() => this.executeGeminiRequest(selectedModel, prompt, genOptions),"
        }
      },
      {
        "method": "generateSummary",
        "description": "generateSummaryの詳細な説明は不明",
        "usageCount": 5,
        "commonPurposes": [
          "generate",
          "分析",
          "create",
          "analyze",
          "生成"
        ],
        "exampleUsage": {
          "file": "src\\lib\\learning-journey\\context-manager.ts",
          "line": 470,
          "context": "this.generateSummary(chapterData.chapter.content),"
        }
      },
      {
        "method": "executeAIAnalysis",
        "description": "executeAIAnalysisの詳細な説明は不明",
        "usageCount": 4,
        "commonPurposes": [
          "分析",
          "create",
          "生成",
          "generate",
          "analyze"
        ],
        "exampleUsage": {
          "file": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
          "line": 461,
          "context": "const response = await this.executeAIAnalysis(prompt, {"
        }
      },
      {
        "method": "prompt",
        "description": "promptの詳細な説明は不明",
        "usageCount": 1,
        "commonPurposes": [],
        "exampleUsage": {
          "file": "src\\lib\\learning-journey\\index.ts",
          "line": 1611,
          "context": "get prompt(): PromptGenerator {"
        }
      },
      {
        "method": "performAICoherenceAnalysis",
        "description": "performAICoherenceAnalysisの詳細な説明は不明",
        "usageCount": 2,
        "commonPurposes": [
          "分析",
          "generate",
          "analyze",
          "build"
        ],
        "exampleUsage": {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 138,
          "context": "const aiAnalysisResult = await this.performAICoherenceAnalysis("
        }
      },
      {
        "method": "performAIObjectiveAnalysis",
        "description": "performAIObjectiveAnalysisの詳細な説明は不明",
        "usageCount": 2,
        "commonPurposes": [
          "分析",
          "generate",
          "analyze",
          "build"
        ],
        "exampleUsage": {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 201,
          "context": "const aiAnalysisResult = await this.performAIObjectiveAnalysis("
        }
      },
      {
        "method": "performAIEmotionalAnalysis",
        "description": "performAIEmotionalAnalysisの詳細な説明は不明",
        "usageCount": 2,
        "commonPurposes": [
          "分析",
          "generate",
          "analyze",
          "build"
        ],
        "exampleUsage": {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 276,
          "context": "const aiAnalysisResult = await this.performAIEmotionalAnalysis("
        }
      },
      {
        "method": "performAIImprovementAnalysis",
        "description": "performAIImprovementAnalysisの詳細な説明は不明",
        "usageCount": 2,
        "commonPurposes": [
          "生成",
          "generate",
          "analyze",
          "分析",
          "build"
        ],
        "exampleUsage": {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 354,
          "context": "const aiSuggestions = await this.performAIImprovementAnalysis("
        }
      }
    ],
    "bestPractices": {
      "codeOrganization": [
        "AI呼び出しロジックを専用のサービスクラスに分離する",
        "共通のプロンプトテンプレートを作成し再利用する",
        "エラーハンドリングを統一する",
        "レスポンスの型定義を明確にする"
      ],
      "promptDesign": [
        "プロンプトは明確で具体的にする",
        "コンテキストを適切に設定する",
        "システムプロンプトを活用する",
        "プロンプトのバージョン管理を行う"
      ],
      "performance": [
        "レスポンスキャッシュを実装する",
        "バッチ処理で効率化を図る",
        "不要な重複呼び出しを削除する",
        "適切なパラメータ設定を使用する"
      ],
      "novelGeneration": [
        "ジャンル別にプロンプトテンプレートを分ける",
        "キャラクター一貫性を保つ仕組みを作る",
        "ストーリーの流れを管理するシステムを構築する",
        "生成内容の品質チェック機能を実装する"
      ],
      "maintenance": [
        "AI呼び出しの使用状況を定期的に監視する",
        "プロンプトの効果を測定し改善する",
        "新しいAIモデルへの対応を計画する",
        "ドキュメントを最新状態に保つ"
      ]
    }
  }
}
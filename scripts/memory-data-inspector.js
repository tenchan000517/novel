#!/usr/bin/env node

/**
 * üî¨ Ë®òÊÜ∂ÈöéÂ±§ÂÆü„Éá„Éº„ÇøÂÜÖÂÆπË™øÊüª„Çπ„ÇØ„É™„Éó„Éà
 * ÂêÑË®òÊÜ∂ÈöéÂ±§„Å´ÂÆüÈöõ„Å´‰øùÂ≠ò„Åï„Çå„Å¶„ÅÑ„Çã„Ç≠„É£„É©„ÇØ„Çø„Éº„Éá„Éº„Çø„ÇíË™øÊüª
 */

const fs = require('fs');
const path = require('path');

console.log('üî¨ Ë®òÊÜ∂ÈöéÂ±§ÂÆü„Éá„Éº„ÇøÂÜÖÂÆπË™øÊüª');
console.log('===========================');

// ============================================================================
// STEP 1: ÂêÑË®òÊÜ∂ÈöéÂ±§„ÅÆ„Éá„Éº„Çø„Éï„Ç°„Ç§„É´Áô∫Ë¶ã„ÉªË™øÊüª
// ============================================================================

console.log('\nüìä STEP 1: Ë®òÊÜ∂ÈöéÂ±§„Éá„Éº„Çø„Éï„Ç°„Ç§„É´„ÅÆÁô∫Ë¶ã');
console.log('=======================================');

const memoryDataPaths = [
    // Áü≠ÊúüË®òÊÜ∂Èñ¢ÈÄ£
    { 
        layer: 'SHORT_TERM',
        paths: [
            'data/memory/short-term',
            'data/short-term-memory',
            'short-term-memory',
            'memory/short-term'
        ]
    },
    // ‰∏≠ÊúüË®òÊÜ∂Èñ¢ÈÄ£
    {
        layer: 'MID_TERM', 
        paths: [
            'data/memory/mid-term',
            'data/mid-term-memory',
            'mid-term-memory',
            'memory/mid-term'
        ]
    },
    // Èï∑ÊúüË®òÊÜ∂Èñ¢ÈÄ£
    {
        layer: 'LONG_TERM',
        paths: [
            'data/memory/long-term',
            'data/long-term-memory', 
            'long-term-memory',
            'memory/long-term'
        ]
    }
];

function findMemoryDataFiles() {
    const foundFiles = [];

    memoryDataPaths.forEach(layerConfig => {
        layerConfig.paths.forEach(searchPath => {
            if (fs.existsSync(searchPath)) {
                try {
                    const stat = fs.statSync(searchPath);
                    if (stat.isDirectory()) {
                        const files = scanDirectoryForData(searchPath);
                        files.forEach(file => {
                            foundFiles.push({
                                layer: layerConfig.layer,
                                file: file,
                                basePath: searchPath
                            });
                        });
                    }
                } catch (error) {
                    console.log(`‚ö†Ô∏è ${searchPath}„ÅÆ„Ç¢„ÇØ„Çª„Çπ„Ç®„É©„Éº: ${error.message}`);
                }
            }
        });
    });

    return foundFiles;
}

function scanDirectoryForData(dirPath, depth = 0) {
    const files = [];
    
    if (depth > 3) return files; // Ê∑±„ÅïÂà∂Èôê
    
    try {
        const items = fs.readdirSync(dirPath);
        
        items.forEach(item => {
            const fullPath = path.join(dirPath, item);
            const stat = fs.statSync(fullPath);
            
            if (stat.isDirectory()) {
                files.push(...scanDirectoryForData(fullPath, depth + 1));
            } else if (item.endsWith('.json') || item.endsWith('.yaml') || item.endsWith('.yml')) {
                files.push(fullPath);
            }
        });
    } catch (error) {
        // „Ç®„É©„Éº„ÅØÁÑ°Ë¶ñ
    }
    
    return files;
}

const memoryFiles = findMemoryDataFiles();

console.log(`üìÑ ${memoryFiles.length}ÂÄã„ÅÆ„É°„É¢„É™„Éá„Éº„Çø„Éï„Ç°„Ç§„É´„ÇíÁô∫Ë¶ã:`);

const layerGroups = memoryFiles.reduce((acc, file) => {
    if (!acc[file.layer]) acc[file.layer] = [];
    acc[file.layer].push(file);
    return acc;
}, {});

Object.entries(layerGroups).forEach(([layer, files]) => {
    console.log(`\nüíæ ${layer}: ${files.length}ÂÄã„ÅÆ„Éï„Ç°„Ç§„É´`);
    files.forEach(file => {
        console.log(`   üìÅ ${file.file}`);
    });
});

// ============================================================================
// STEP 2: ÂêÑ„Éï„Ç°„Ç§„É´„ÅÆ„Ç≠„É£„É©„ÇØ„Çø„Éº„Éá„Éº„ÇøÂÜÖÂÆπÂàÜÊûê
// ============================================================================

console.log('\nüîç STEP 2: „Ç≠„É£„É©„ÇØ„Çø„Éº„Éá„Éº„ÇøÂÜÖÂÆπ„ÅÆË©≥Á¥∞ÂàÜÊûê');
console.log('==========================================');

function analyzeCharacterDataInFiles() {
    const analysisResults = [];

    memoryFiles.forEach(fileInfo => {
        try {
            console.log(`\nüî¨ ÂàÜÊûê‰∏≠: ${path.basename(fileInfo.file)}`);
            
            const content = fs.readFileSync(fileInfo.file, 'utf8');
            let data;
            
            if (fileInfo.file.endsWith('.json')) {
                data = JSON.parse(content);
            } else {
                // YAML „ÅÆÁ∞°Êòì„Éë„Éº„ÇπÔºàjs-yaml„ÅåÂà©Áî®ÂèØËÉΩ„Å™Â†¥Âêà„ÅÆ„ÅøÔºâ
                try {
                    const yaml = require('js-yaml');
                    data = yaml.load(content);
                } catch (yamlError) {
                    console.log(`   ‚ö†Ô∏è YAMLËß£Êûê„Çπ„Ç≠„ÉÉ„ÉóÔºàjs-yaml„ÅåÂøÖË¶ÅÔºâ`);
                    return;
                }
            }

            const characterAnalysis = analyzeDataForCharacters(data, fileInfo);
            
            if (characterAnalysis.hasCharacterData) {
                analysisResults.push(characterAnalysis);
            }
            
        } catch (error) {
            console.log(`   ‚ùå ÂàÜÊûê„Ç®„É©„Éº: ${error.message}`);
        }
    });

    return analysisResults;
}

function analyzeDataForCharacters(data, fileInfo) {
    const analysis = {
        file: fileInfo.file,
        layer: fileInfo.layer,
        hasCharacterData: false,
        characterCount: 0,
        dataStructure: {},
        characterExamples: [],
        dataTypes: new Set()
    };

    function scanForCharacters(obj, path = '') {
        if (!obj || typeof obj !== 'object') return;

        Object.entries(obj).forEach(([key, value]) => {
            const currentPath = path ? `${path}.${key}` : key;
            
            // „Ç≠„É£„É©„ÇØ„Çø„ÉºÈñ¢ÈÄ£„Éá„Éº„Çø„ÅÆÊ§úÂá∫
            if (key.toLowerCase().includes('character') || 
                key.toLowerCase().includes('sato') ||
                key.toLowerCase().includes('suzuki') ||
                key.toLowerCase().includes('takahashi') ||
                key.toLowerCase().includes('nakamura') ||
                key.toLowerCase().includes('yamada')) {
                
                analysis.hasCharacterData = true;
                analysis.characterCount++;
                
                if (analysis.characterExamples.length < 3) {
                    analysis.characterExamples.push({
                        path: currentPath,
                        sample: JSON.stringify(value, null, 2).substring(0, 200) + '...'
                    });
                }
            }

            // „Éá„Éº„ÇøÂûã„ÅÆË®òÈå≤
            if (value !== null) {
                analysis.dataTypes.add(typeof value);
                if (Array.isArray(value)) {
                    analysis.dataTypes.add('array');
                }
            }

            // ÂÜçÂ∏∞ÁöÑ„Çπ„Ç≠„É£„É≥
            if (typeof value === 'object' && value !== null) {
                scanForCharacters(value, currentPath);
            }
        });
    }

    // „Éá„Éº„ÇøÊßãÈÄ†„ÅÆÂàÜÊûê
    if (Array.isArray(data)) {
        analysis.dataStructure.type = 'array';
        analysis.dataStructure.length = data.length;
        if (data.length > 0) {
            scanForCharacters(data[0], '[0]');
        }
    } else if (typeof data === 'object' && data !== null) {
        analysis.dataStructure.type = 'object';
        analysis.dataStructure.topLevelKeys = Object.keys(data);
        scanForCharacters(data);
    }

    analysis.dataTypes = Array.from(analysis.dataTypes);
    
    return analysis;
}

const characterDataAnalysis = analyzeCharacterDataInFiles();

console.log(`\nüìä „Ç≠„É£„É©„ÇØ„Çø„Éº„Éá„Éº„Çø„ÇíÂê´„ÇÄ„Éï„Ç°„Ç§„É´: ${characterDataAnalysis.length}ÂÄã`);

characterDataAnalysis.forEach(analysis => {
    console.log(`\nüìÑ ${path.basename(analysis.file)} [${analysis.layer}]:`);
    console.log(`   „Ç≠„É£„É©„ÇØ„Çø„ÉºÈñ¢ÈÄ£„Ç®„É≥„Éà„É™: ${analysis.characterCount}ÂÄã`);
    console.log(`   „Éá„Éº„ÇøÊßãÈÄ†: ${analysis.dataStructure.type}`);
    console.log(`   „Éá„Éº„ÇøÂûã: ${analysis.dataTypes.join(', ')}`);
    
    if (analysis.dataStructure.topLevelKeys) {
        console.log(`   „Éà„ÉÉ„Éó„É¨„Éô„É´„Ç≠„Éº: ${analysis.dataStructure.topLevelKeys.slice(0, 5).join(', ')}`);
    }
    
    if (analysis.characterExamples.length > 0) {
        console.log('   „Ç≠„É£„É©„ÇØ„Çø„Éº„Éá„Éº„Çø‰æã:');
        analysis.characterExamples.forEach(example => {
            console.log(`     ${example.path}:`);
            console.log(`       ${example.sample}`);
        });
    }
});

// ============================================================================
// STEP 3: „Éá„Éº„Çø„ÅÆÊõ¥Êñ∞È†ªÂ∫¶„ÉªÊ∞∏Á∂öÂåñ„Éë„Çø„Éº„É≥ÂàÜÊûê
// ============================================================================

console.log('\nüìà STEP 3: „Éá„Éº„ÇøÊõ¥Êñ∞È†ªÂ∫¶„ÉªÊ∞∏Á∂öÂåñ„Éë„Çø„Éº„É≥ÂàÜÊûê');
console.log('============================================');

function analyzeDataPersistencePatterns() {
    const patterns = [];

    characterDataAnalysis.forEach(analysis => {
        try {
            const stat = fs.statSync(analysis.file);
            const modifiedTime = stat.mtime;
            const createdTime = stat.birthtime || stat.ctime;
            const fileSize = stat.size;
            
            patterns.push({
                file: path.basename(analysis.file),
                layer: analysis.layer,
                lastModified: modifiedTime.toISOString(),
                created: createdTime.toISOString(),
                sizeBytes: fileSize,
                characterCount: analysis.characterCount,
                ageInDays: Math.floor((Date.now() - modifiedTime.getTime()) / (1000 * 60 * 60 * 24))
            });
        } catch (error) {
            console.log(`‚ö†Ô∏è ${analysis.file}„ÅÆÁµ±Ë®àÂèñÂæó„Ç®„É©„Éº: ${error.message}`);
        }
    });

    return patterns;
}

const persistencePatterns = analyzeDataPersistencePatterns();

console.log('„Éï„Ç°„Ç§„É´Êõ¥Êñ∞„Éë„Çø„Éº„É≥ÂàÜÊûê:');
persistencePatterns
    .sort((a, b) => new Date(b.lastModified).getTime() - new Date(a.lastModified).getTime())
    .forEach(pattern => {
        console.log(`\nüìÅ ${pattern.file} [${pattern.layer}]:`);
        console.log(`   ÊúÄÁµÇÊõ¥Êñ∞: ${pattern.lastModified} (${pattern.ageInDays}Êó•Ââç)`);
        console.log(`   „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫: ${pattern.sizeBytes} bytes`);
        console.log(`   „Ç≠„É£„É©„ÇØ„Çø„ÉºÊï∞: ${pattern.characterCount}`);
    });

// ============================================================================
// STEP 4: Ë®òÊÜ∂ÈöéÂ±§Èñì„ÅÆ„Éá„Éº„ÇøÈáçË§á„ÉªÊï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
// ============================================================================

console.log('\nüîÑ STEP 4: Ë®òÊÜ∂ÈöéÂ±§Èñì„ÅÆ„Éá„Éº„ÇøÈáçË§á„ÉªÊï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØ');
console.log('=============================================');

function checkDataConsistencyAcrossLayers() {
    const characterDataByLayer = {};
    
    // ÂêÑÂ±§„ÅÆ„Ç≠„É£„É©„ÇØ„Çø„Éº„Éá„Éº„Çø„ÇíÂèéÈõÜ
    characterDataAnalysis.forEach(analysis => {
        if (!characterDataByLayer[analysis.layer]) {
            characterDataByLayer[analysis.layer] = [];
        }
        
        characterDataByLayer[analysis.layer].push({
            file: analysis.file,
            characterCount: analysis.characterCount,
            examples: analysis.characterExamples
        });
    });

    const consistencyReport = {
        layersWithData: Object.keys(characterDataByLayer),
        totalCharacterEntries: 0,
        potentialDuplicates: [],
        missingLayers: []
    };

    // ÂêÑÂ±§„ÅÆÁâπÂæ¥ÂàÜÊûê
    Object.entries(characterDataByLayer).forEach(([layer, data]) => {
        const totalEntries = data.reduce((sum, file) => sum + file.characterCount, 0);
        consistencyReport.totalCharacterEntries += totalEntries;
        
        console.log(`\nüìä ${layer}Â±§:`);
        console.log(`   „Éï„Ç°„Ç§„É´Êï∞: ${data.length}`);
        console.log(`   Á∑è„Ç≠„É£„É©„ÇØ„Çø„Éº„Ç®„É≥„Éà„É™: ${totalEntries}`);
        
        data.forEach(fileData => {
            console.log(`     üìÑ ${path.basename(fileData.file)}: ${fileData.characterCount}„Ç®„É≥„Éà„É™`);
        });
    });

    // ÊúüÂæÖ„Åï„Çå„ÇãË®òÊÜ∂ÈöéÂ±§„ÅÆÁ¢∫Ë™ç
    const expectedLayers = ['SHORT_TERM', 'MID_TERM', 'LONG_TERM'];
    const missingLayers = expectedLayers.filter(layer => !characterDataByLayer[layer]);
    
    if (missingLayers.length > 0) {
        console.log(`\n‚ö†Ô∏è „Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑË®òÊÜ∂ÈöéÂ±§: ${missingLayers.join(', ')}`);
        consistencyReport.missingLayers = missingLayers;
    }

    return consistencyReport;
}

const consistencyReport = checkDataConsistencyAcrossLayers();

// ============================================================================
// STEP 5: Á∑èÂêàË©ï‰æ°„Å®Êé®Â•®‰∫ãÈ†Ö
// ============================================================================

console.log('\nüìã STEP 5: Á∑èÂêàË©ï‰æ°„Å®Êé®Â•®‰∫ãÈ†Ö');
console.log('=============================');

console.log('\nüéØ Ë™øÊüªÁµêÊûú„Çµ„Éû„É™„Éº:');
console.log(`üíæ Áô∫Ë¶ã„Åï„Çå„Åü„É°„É¢„É™„Éï„Ç°„Ç§„É´: ${memoryFiles.length}ÂÄã`);
console.log(`üé≠ „Ç≠„É£„É©„ÇØ„Çø„Éº„Éá„Éº„Çø„ÇíÂê´„ÇÄ„Éï„Ç°„Ç§„É´: ${characterDataAnalysis.length}ÂÄã`);
console.log(`üìä „Éá„Éº„Çø„ÇíÊåÅ„Å§Ë®òÊÜ∂ÈöéÂ±§: ${consistencyReport.layersWithData.join(', ')}`);
console.log(`üìà Á∑è„Ç≠„É£„É©„ÇØ„Çø„Éº„Ç®„É≥„Éà„É™Êï∞: ${consistencyReport.totalCharacterEntries}`);

console.log('\nüîç Ë®≠Ë®à‰∏ä„ÅÆÂïèÈ°åÁÇπ:');
if (consistencyReport.missingLayers.length > 0) {
    console.log(`‚ùå „Éá„Éº„Çø„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„ÇãË®òÊÜ∂ÈöéÂ±§: ${consistencyReport.missingLayers.join(', ')}`);
}

if (characterDataAnalysis.length === 0) {
    console.log('‚ùå Ë®òÊÜ∂ÈöéÂ±§„Å´„Ç≠„É£„É©„ÇØ„Çø„Éº„Éá„Éº„Çø„ÅåÂÖ®„Åè‰øùÂ≠ò„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ');
    console.log('   ‚Üí CharacterManager„ÅåË®òÊÜ∂ÈöéÂ±§„Å®ÈÄ£Êê∫„Åó„Å¶„ÅÑ„Å™„ÅÑÂèØËÉΩÊÄß');
}

if (characterDataAnalysis.length > 0) {
    const recentFiles = persistencePatterns.filter(p => p.ageInDays < 7);
    console.log(`‚úÖ ÊúÄËøëÊõ¥Êñ∞„Åï„Çå„Åü„Éï„Ç°„Ç§„É´: ${recentFiles.length}ÂÄã`);
    
    if (recentFiles.length === 0) {
        console.log('‚ö†Ô∏è ÂÖ®„Å¶„ÅÆ„É°„É¢„É™„Éï„Ç°„Ç§„É´„Åå1ÈÄ±Èñì‰ª•‰∏äÊõ¥Êñ∞„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ');
        console.log('   ‚Üí Ë®òÊÜ∂„Ç∑„Çπ„ÉÜ„É†„ÅåÂãï‰Ωú„Åó„Å¶„ÅÑ„Å™„ÅÑÂèØËÉΩÊÄß');
    }
}

console.log('\nüõ†Ô∏è Ê¨°„Å´ÂÆüË°å„Åô„Åπ„ÅçË™øÊüª:');
console.log('1. CharacterManager„ÅåÂÆüÈöõ„Å´MemoryManager„Å®ÈÄ£Êê∫„Åó„Å¶„ÅÑ„Çã„Åã„ÅÆÁ¢∫Ë™ç');
console.log('2. Á´†Âá¶ÁêÜÊôÇ„Å´„Ç≠„É£„É©„ÇØ„Çø„Éº„Éá„Éº„Çø„ÅåÂêÑË®òÊÜ∂ÈöéÂ±§„Å´ÊµÅ„Çå„Å¶„ÅÑ„Çã„Åã„ÅÆÁ¢∫Ë™ç');
console.log('3. Ë®òÊÜ∂ÈöéÂ±§„Ç∑„Çπ„ÉÜ„É†„ÅåÊ≠£Â∏∏„Å´ÂàùÊúüÂåñ„ÉªÂãï‰Ωú„Åó„Å¶„ÅÑ„Çã„Åã„ÅÆÁ¢∫Ë™ç');
console.log('4. YAML„Éï„Ç°„Ç§„É´„Å®Ë®òÊÜ∂ÈöéÂ±§„ÅÆÂΩπÂâ≤ÂàÜÊãÖ„ÅåÊ≠£„Åó„ÅèË®≠Ë®à„Åï„Çå„Å¶„ÅÑ„Çã„Åã„ÅÆÁ¢∫Ë™ç');

console.log('\n‚úÖ Ë®òÊÜ∂ÈöéÂ±§ÂÆü„Éá„Éº„ÇøÂÜÖÂÆπË™øÊüªÂÆå‰∫Ü');
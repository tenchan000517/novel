{
  "executionSummary": {
    "timestamp": "2025-06-04T11:49:57.897Z",
    "systemAnalyzed": "TYPE_DEFINITION_SYSTEM",
    "totalTypes": 573,
    "duplicatedTypes": 38,
    "systemComplexity": "TYPE_SYSTEM_ENTERPRISE_LEVEL",
    "optimizationPotential": "REVOLUTIONARY_TYPE_SYSTEM_OPTIMIZATION_POTENTIAL"
  },
  "criticalFindings": {
    "typeDuplication": "SIGNIFICANT_TYPE_DUPLICATION_DISCOVERED",
    "systemFragmentation": "TYPE_SYSTEM_FRAGMENTATION_IDENTIFIED",
    "dataModelInconsistency": "DATA_MODEL_INCONSISTENCY_FOUND",
    "integrationOpportunities": "MAJOR_INTEGRATION_OPPORTUNITIES_IDENTIFIED"
  },
  "transformationOpportunities": {
    "typeConsolidation": "MAJOR_TYPE_CONSOLIDATION_OPPORTUNITY",
    "dataModelUnification": "DATA_MODEL_UNIFICATION_POTENTIAL",
    "systemIntegration": "SYSTEM_INTEGRATION_THROUGH_TYPES",
    "storageOptimization": "STORAGE_OPTIMIZATION_THROUGH_TYPE_DESIGN"
  },
  "strategicRecommendations": {
    "immediateActions": [
      "ELIMINATE_EXACT_TYPE_DUPLICATES",
      "STANDARDIZE_TYPE_NAMING_CONVENTIONS",
      "CREATE_SHARED_TYPE_DEFINITIONS",
      "OPTIMIZE_IMPORT_STRUCTURES"
    ],
    "mediumTermGoals": [
      "IMPLEMENT_UNIFIED_TYPE_SYSTEM",
      "OPTIMIZE_DATA_MODEL_DESIGN",
      "ENHANCE_SYSTEM_TYPE_INTEGRATION",
      "ESTABLISH_TYPE_GOVERNANCE"
    ],
    "longTermVision": [
      "ACHIEVE_TYPE_SYSTEM_EXCELLENCE",
      "CREATE_PERFECT_DATA_MODEL_HARMONY",
      "IMPLEMENT_REVOLUTIONARY_TYPE_ARCHITECTURE",
      "ESTABLISH_TYPE_SYSTEM_AS_COMPETITIVE_ADVANTAGE"
    ]
  },
  "results": {
    "systemOverview": {
      "totalTypeFiles": 37,
      "totalTypes": 17,
      "totalInterfaces": 556,
      "duplicatedTypes": 38,
      "systemComplexity": "TYPE_SYSTEM_ENTERPRISE_LEVEL",
      "architectureType": "DISTRIBUTED_TYPE_SYSTEM"
    },
    "typeFileAnalysis": {
      "components\\shared\\index.ts": {
        "filePath": "components\\shared\\index.ts",
        "fileSize": 265,
        "system": "unknown",
        "module": "shared",
        "interfaces": {},
        "types": {},
        "enums": {},
        "imports": [],
        "exports": [],
        "inlineTypes": [],
        "generics": [],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": []
      },
      "components\\ui\\index.ts": {
        "filePath": "components\\ui\\index.ts",
        "fileSize": 293,
        "system": "unknown",
        "module": "ui",
        "interfaces": {},
        "types": {},
        "enums": {},
        "imports": [],
        "exports": [],
        "inlineTypes": [],
        "generics": [],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": []
      },
      "lib\\analysis\\adapters\\interfaces.ts": {
        "filePath": "lib\\analysis\\adapters\\interfaces.ts",
        "fileSize": 1899,
        "system": "analysis",
        "module": "analysis/adapters",
        "interfaces": {
          "IGeminiAdapter": {
            "name": "IGeminiAdapter",
            "body": "/**\r\n     * テキスト生成リクエストを実行\r\n     * \r\n     * @param prompt 生成プロンプト\r\n     * @param options 生成オプション\r\n     * @returns 生成されたテキスト\r\n     */\r\n    generateText(\r\n      prompt: string,\r\n      options?: {\r\n        temperature?: number;\r\n        targetLength?: number;\r\n        purpose?: string;\r\n        responseFormat?: string;\r\n        useCache?: boolean;\r\n        overrides?: any;",
            "properties": {
              "prompt": {
                "name": "prompt",
                "type": "string",
                "optional": false
              },
              "options": {
                "name": "options",
                "type": "{",
                "optional": true
              },
              "temperature": {
                "name": "temperature",
                "type": "number",
                "optional": true
              },
              "targetLength": {
                "name": "targetLength",
                "type": "number",
                "optional": true
              },
              "purpose": {
                "name": "purpose",
                "type": "string",
                "optional": true
              },
              "responseFormat": {
                "name": "responseFormat",
                "type": "string",
                "optional": true
              },
              "useCache": {
                "name": "useCache",
                "type": "boolean",
                "optional": true
              },
              "overrides": {
                "name": "overrides",
                "type": "any",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 13
          }
        },
        "types": {},
        "enums": {},
        "imports": [],
        "exports": [
          "IGeminiAdapter"
        ],
        "inlineTypes": [
          {
            "definition": ": {\r\n        temperature?: number;\r\n        targetLength?: number;\r\n        purpose?: string;\r\n        responseFormat?: string;\r\n        useCache?: boolean;\r\n        overrides?: any;\r\n      }",
            "lineNumber": 23
          },
          {
            "definition": ": {\r\n        temperature?: number;\r\n        targetLength?: number;\r\n        purpose?: string;\r\n        responseFormat?: string;\r\n        useCache?: boolean;\r\n        overrides?: any;\r\n      }",
            "lineNumber": 42
          },
          {
            "definition": ": {\r\n      modelMap?: Record<string, string>;\r\n      maxRetries?: number;\r\n      defaultModel?: string;\r\n    }",
            "lineNumber": 71
          }
        ],
        "generics": [
          "string",
          "string, string"
        ],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": []
      },
      "lib\\analysis\\coordinators\\interfaces.ts": {
        "filePath": "lib\\analysis\\coordinators\\interfaces.ts",
        "fileSize": 15095,
        "system": "analysis",
        "module": "analysis/coordinators",
        "interfaces": {
          "BaseCoordinatorOptions": {
            "name": "BaseCoordinatorOptions",
            "body": "/** キャッシュを有効にするか */\r\n  enableCache?: boolean;\r\n  /** 並列処理を有効にするか */\r\n  enableParallelProcessing?: boolean;\r\n  /** 詳細ログを有効にするか */\r\n  enableDetailedLogging?: boolean;",
            "properties": {
              "enableCache": {
                "name": "enableCache",
                "type": "boolean",
                "optional": true
              },
              "enableParallelProcessing": {
                "name": "enableParallelProcessing",
                "type": "boolean",
                "optional": true
              },
              "enableDetailedLogging": {
                "name": "enableDetailedLogging",
                "type": "boolean",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 30
          },
          "BaseMetadata": {
            "name": "BaseMetadata",
            "body": "/** 処理タイムスタンプ */\r\n  timestamp: string;\r\n  /** 使用されたサービス一覧 */\r\n  servicesUsed: string[];\r\n  /** 処理時間（ミリ秒） */\r\n  processingTime: number;\r\n  /** キャッシュヒット率 */\r\n  cacheHitRate: number;",
            "properties": {
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              },
              "servicesUsed": {
                "name": "servicesUsed",
                "type": "string[]",
                "optional": false
              },
              "processingTime": {
                "name": "processingTime",
                "type": "number",
                "optional": false
              },
              "cacheHitRate": {
                "name": "cacheHitRate",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 43
          },
          "CacheableCoordinator": {
            "name": "CacheableCoordinator",
            "body": "/** キャッシュをクリアする */\r\n  clearCache(): void;",
            "properties": {},
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 58
          },
          "AnalysisCoordinatorOptions": {
            "name": "AnalysisCoordinatorOptions",
            "body": "/** 統合最適化を有効にするか */\r\n  optimizeForIntegration?: boolean;",
            "properties": {
              "optimizeForIntegration": {
                "name": "optimizeForIntegration",
                "type": "boolean",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 71
          },
          "IntegratedAnalysisResult": {
            "name": "IntegratedAnalysisResult",
            "body": "// 基本章分析\r\n  chapterAnalysis: ChapterAnalysis;\r\n\r\n  // テーマ分析\r\n  themeAnalysis: ThemeResonanceAnalysis;\r\n  foreshadowingProcessing: {\r\n    resolvedForeshadowing: any[];\r\n    generatedCount: number;\r\n    totalActive: number;",
            "properties": {
              "chapterAnalysis": {
                "name": "chapterAnalysis",
                "type": "ChapterAnalysis",
                "optional": false
              },
              "themeAnalysis": {
                "name": "themeAnalysis",
                "type": "ThemeResonanceAnalysis",
                "optional": false
              },
              "foreshadowingProcessing": {
                "name": "foreshadowingProcessing",
                "type": "{",
                "optional": false
              },
              "resolvedForeshadowing": {
                "name": "resolvedForeshadowing",
                "type": "any[]",
                "optional": false
              },
              "generatedCount": {
                "name": "generatedCount",
                "type": "number",
                "optional": false
              },
              "totalActive": {
                "name": "totalActive",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 80
          },
          "AnalysisMetadata": {
            "name": "AnalysisMetadata",
            "body": "/** 分析タイムスタンプ */\r\n  analysisTimestamp: string;",
            "properties": {
              "analysisTimestamp": {
                "name": "analysisTimestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 121
          },
          "SceneStructureAnalysis": {
            "name": "SceneStructureAnalysis",
            "body": "typeDistribution: {\r\n    [sceneType: string]: number;",
            "properties": {
              "typeDistribution": {
                "name": "typeDistribution",
                "type": "{",
                "optional": false
              },
              "sceneType": {
                "name": "sceneType",
                "type": "string]: number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 130
          },
          "SceneRecommendation": {
            "name": "SceneRecommendation",
            "body": "id: string;\r\n  type: string;\r\n  title: string;\r\n  description: string;\r\n  priority: 'high' | 'medium' | 'low';\r\n  estimatedImpact: number;",
            "properties": {
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "priority": {
                "name": "priority",
                "type": "'high' | 'medium' | 'low'",
                "optional": false
              },
              "estimatedImpact": {
                "name": "estimatedImpact",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 151
          },
          "LiteraryInspiration": {
            "name": "LiteraryInspiration",
            "body": "plotTechniques: LiteraryTechnique[];\r\n  characterTechniques: LiteraryTechnique[];\r\n  atmosphereTechniques: LiteraryTechnique[];",
            "properties": {
              "plotTechniques": {
                "name": "plotTechniques",
                "type": "LiteraryTechnique[]",
                "optional": false
              },
              "characterTechniques": {
                "name": "characterTechniques",
                "type": "LiteraryTechnique[]",
                "optional": false
              },
              "atmosphereTechniques": {
                "name": "atmosphereTechniques",
                "type": "LiteraryTechnique[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 164
          },
          "LiteraryTechnique": {
            "name": "LiteraryTechnique",
            "body": "technique: string;\r\n  description: string;\r\n  example: string;\r\n  reference: string;",
            "properties": {
              "technique": {
                "name": "technique",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "example": {
                "name": "example",
                "type": "string",
                "optional": false
              },
              "reference": {
                "name": "reference",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 174
          },
          "IAnalysisCoordinator": {
            "name": "IAnalysisCoordinator",
            "body": "/**\r\n   * 包括的章分析を実行する\r\n   * \r\n   * @param content 章の内容\r\n   * @param chapterNumber 章番号\r\n   * @param context 生成コンテキスト\r\n   * @returns 統合分析結果\r\n   */\r\n  analyzeChapter(\r\n    content: string,\r\n    chapterNumber: number,\r\n    context: GenerationContext\r\n  ): Promise<IntegratedAnalysisResult>;",
            "properties": {
              "content": {
                "name": "content",
                "type": "string",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "context": {
                "name": "context",
                "type": "GenerationContext",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": true,
            "lineNumber": 185
          },
          "OptimizationCoordinatorOptions": {
            "name": "OptimizationCoordinatorOptions",
            "body": "/** カテゴリごとの最大推奨数 */\r\n  maxRecommendationsPerCategory?: number;\r\n  /** 優先順位付け戦略 */\r\n  prioritizationStrategy?: 'impact' | 'effort' | 'balanced';\r\n  /** 矛盾解決を有効にするか */\r\n  enableConflictResolution?: boolean;\r\n  /** 相乗効果検出を有効にするか */\r\n  enableSynergyDetection?: boolean;",
            "properties": {
              "maxRecommendationsPerCategory": {
                "name": "maxRecommendationsPerCategory",
                "type": "number",
                "optional": true
              },
              "prioritizationStrategy": {
                "name": "prioritizationStrategy",
                "type": "'impact' | 'effort' | 'balanced'",
                "optional": true
              },
              "enableConflictResolution": {
                "name": "enableConflictResolution",
                "type": "boolean",
                "optional": true
              },
              "enableSynergyDetection": {
                "name": "enableSynergyDetection",
                "type": "boolean",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 209
          },
          "PrioritizedSuggestion": {
            "name": "PrioritizedSuggestion",
            "body": "id: string;\r\n  category: 'theme' | 'style' | 'character' | 'tension' | 'integrated';\r\n  title: string;\r\n  description: string;\r\n  implementation: string;\r\n  priority: 'high' | 'medium' | 'low';\r\n  impact: number; // 0-1\r\n  effort: number; // 0-1\r\n  dependencies: string[];\r\n  relatedSuggestions: string[];",
            "properties": {
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "category": {
                "name": "category",
                "type": "'theme' | 'style' | 'character' | 'tension' | 'integrated'",
                "optional": false
              },
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "implementation": {
                "name": "implementation",
                "type": "string",
                "optional": false
              },
              "priority": {
                "name": "priority",
                "type": "'high' | 'medium' | 'low'",
                "optional": false
              },
              "impact": {
                "name": "impact",
                "type": "number",
                "optional": false
              },
              "effort": {
                "name": "effort",
                "type": "number",
                "optional": false
              },
              "dependencies": {
                "name": "dependencies",
                "type": "string[]",
                "optional": false
              },
              "relatedSuggestions": {
                "name": "relatedSuggestions",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 224
          },
          "ConflictResolution": {
            "name": "ConflictResolution",
            "body": "conflictType: 'contradiction' | 'redundancy' | 'resource_conflict';\r\n  description: string;\r\n  conflictingSuggestions: string[];\r\n  resolution: string;\r\n  recommendedAction: string;",
            "properties": {
              "conflictType": {
                "name": "conflictType",
                "type": "'contradiction' | 'redundancy' | 'resource_conflict'",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "conflictingSuggestions": {
                "name": "conflictingSuggestions",
                "type": "string[]",
                "optional": false
              },
              "resolution": {
                "name": "resolution",
                "type": "string",
                "optional": false
              },
              "recommendedAction": {
                "name": "recommendedAction",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 241
          },
          "ImplementationStep": {
            "name": "ImplementationStep",
            "body": "step: number;\r\n  phase: 'preparation' | 'core_implementation' | 'refinement' | 'validation';\r\n  suggestions: string[];\r\n  description: string;\r\n  estimatedEffort: 'low' | 'medium' | 'high';",
            "properties": {
              "step": {
                "name": "step",
                "type": "number",
                "optional": false
              },
              "phase": {
                "name": "phase",
                "type": "'preparation' | 'core_implementation' | 'refinement' | 'validation'",
                "optional": false
              },
              "suggestions": {
                "name": "suggestions",
                "type": "string[]",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "estimatedEffort": {
                "name": "estimatedEffort",
                "type": "'low' | 'medium' | 'high'",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 253
          },
          "SynergyOpportunity": {
            "name": "SynergyOpportunity",
            "body": "title: string;\r\n  description: string;\r\n  involvedSuggestions: string[];\r\n  synergisticBenefit: string;\r\n  implementationApproach: string;",
            "properties": {
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "involvedSuggestions": {
                "name": "involvedSuggestions",
                "type": "string[]",
                "optional": false
              },
              "synergisticBenefit": {
                "name": "synergisticBenefit",
                "type": "string",
                "optional": false
              },
              "implementationApproach": {
                "name": "implementationApproach",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 265
          },
          "IntegratedRecommendations": {
            "name": "IntegratedRecommendations",
            "body": "prioritizedSuggestions: PrioritizedSuggestion[];\r\n  conflictResolutions: ConflictResolution[];\r\n  implementationOrder: ImplementationStep[];\r\n  synergisticOpportunities: SynergyOpportunity[];",
            "properties": {
              "prioritizedSuggestions": {
                "name": "prioritizedSuggestions",
                "type": "PrioritizedSuggestion[]",
                "optional": false
              },
              "conflictResolutions": {
                "name": "conflictResolutions",
                "type": "ConflictResolution[]",
                "optional": false
              },
              "implementationOrder": {
                "name": "implementationOrder",
                "type": "ImplementationStep[]",
                "optional": false
              },
              "synergisticOpportunities": {
                "name": "synergisticOpportunities",
                "type": "SynergyOpportunity[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 277
          },
          "ThemeOptimization": {
            "name": "ThemeOptimization",
            "body": "themeEnhancements: ThemeEnhancement[];\r\n  literaryInspirations: LiteraryInspiration;\r\n  symbolicElements: SymbolicElement[];\r\n  foreshadowingOpportunities: ForeshadowingOpportunity[];\r\n  literaryTechniques: LiteraryTechnique[];",
            "properties": {
              "themeEnhancements": {
                "name": "themeEnhancements",
                "type": "ThemeEnhancement[]",
                "optional": false
              },
              "literaryInspirations": {
                "name": "literaryInspirations",
                "type": "LiteraryInspiration",
                "optional": false
              },
              "symbolicElements": {
                "name": "symbolicElements",
                "type": "SymbolicElement[]",
                "optional": false
              },
              "foreshadowingOpportunities": {
                "name": "foreshadowingOpportunities",
                "type": "ForeshadowingOpportunity[]",
                "optional": false
              },
              "literaryTechniques": {
                "name": "literaryTechniques",
                "type": "LiteraryTechnique[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 288
          },
          "StyleOptimization": {
            "name": "StyleOptimization",
            "body": "styleGuidance: StyleGuidance;\r\n  expressionAlternatives: ExpressionAlternatives;\r\n  subjectPatternOptimization: SubjectPatternOptimization;\r\n  structureRecommendations: StructureRecommendation[];\r\n  repetitionAlternatives: RepetitionAlternative[];",
            "properties": {
              "styleGuidance": {
                "name": "styleGuidance",
                "type": "StyleGuidance",
                "optional": false
              },
              "expressionAlternatives": {
                "name": "expressionAlternatives",
                "type": "ExpressionAlternatives",
                "optional": false
              },
              "subjectPatternOptimization": {
                "name": "subjectPatternOptimization",
                "type": "SubjectPatternOptimization",
                "optional": false
              },
              "structureRecommendations": {
                "name": "structureRecommendations",
                "type": "StructureRecommendation[]",
                "optional": false
              },
              "repetitionAlternatives": {
                "name": "repetitionAlternatives",
                "type": "RepetitionAlternative[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 300
          },
          "CharacterOptimization": {
            "name": "CharacterOptimization",
            "body": "depthRecommendations: { [characterId: string]: DepthRecommendation[]",
            "properties": {
              "depthRecommendations": {
                "name": "depthRecommendations",
                "type": "{ [characterId: string]: DepthRecommendation[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 312
          },
          "TensionOptimization": {
            "name": "TensionOptimization",
            "body": "tensionPacingRecommendation: TensionPacingRecommendation;\r\n  tensionOptimizationSuggestions: string[];\r\n  tensionCurve: TensionCurvePoint[];\r\n  climaxRecommendation: {\r\n    climaxChapter: number;\r\n    secondaryClimaxChapters: number[];\r\n    reason: string;",
            "properties": {
              "tensionPacingRecommendation": {
                "name": "tensionPacingRecommendation",
                "type": "TensionPacingRecommendation",
                "optional": false
              },
              "tensionOptimizationSuggestions": {
                "name": "tensionOptimizationSuggestions",
                "type": "string[]",
                "optional": false
              },
              "tensionCurve": {
                "name": "tensionCurve",
                "type": "TensionCurvePoint[]",
                "optional": false
              },
              "climaxRecommendation": {
                "name": "climaxRecommendation",
                "type": "{",
                "optional": false
              },
              "climaxChapter": {
                "name": "climaxChapter",
                "type": "number",
                "optional": false
              },
              "secondaryClimaxChapters": {
                "name": "secondaryClimaxChapters",
                "type": "number[]",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 322
          },
          "OptimizationMetadata": {
            "name": "OptimizationMetadata",
            "body": "/** 最適化タイムスタンプ */\r\n  optimizationTimestamp: string;\r\n  /** 総推奨数 */\r\n  totalRecommendations: number;\r\n  /** 高優先度数 */\r\n  highPriorityCount: number;\r\n  /** 中優先度数 */\r\n  mediumPriorityCount: number;\r\n  /** 低優先度数 */\r\n  lowPriorityCount: number;",
            "properties": {
              "optimizationTimestamp": {
                "name": "optimizationTimestamp",
                "type": "string",
                "optional": false
              },
              "totalRecommendations": {
                "name": "totalRecommendations",
                "type": "number",
                "optional": false
              },
              "highPriorityCount": {
                "name": "highPriorityCount",
                "type": "number",
                "optional": false
              },
              "mediumPriorityCount": {
                "name": "mediumPriorityCount",
                "type": "number",
                "optional": false
              },
              "lowPriorityCount": {
                "name": "lowPriorityCount",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 337
          },
          "IntegratedOptimizationResult": {
            "name": "IntegratedOptimizationResult",
            "body": "// テーマ最適化\r\n  themeOptimization: ThemeOptimization;\r\n\r\n  // 文体最適化\r\n  styleOptimization: StyleOptimization;\r\n\r\n  // キャラクター最適化\r\n  characterOptimization: CharacterOptimization;\r\n\r\n  // テンション最適化\r\n  tensionOptimization: TensionOptimization;\r\n\r\n  // 統合推奨\r\n  integratedRecommendations: IntegratedRecommendations;\r\n\r\n  // メタデータ\r\n  optimizationMetadata: OptimizationMetadata;",
            "properties": {
              "themeOptimization": {
                "name": "themeOptimization",
                "type": "ThemeOptimization",
                "optional": false
              },
              "styleOptimization": {
                "name": "styleOptimization",
                "type": "StyleOptimization",
                "optional": false
              },
              "characterOptimization": {
                "name": "characterOptimization",
                "type": "CharacterOptimization",
                "optional": false
              },
              "tensionOptimization": {
                "name": "tensionOptimization",
                "type": "TensionOptimization",
                "optional": false
              },
              "integratedRecommendations": {
                "name": "integratedRecommendations",
                "type": "IntegratedRecommendations",
                "optional": false
              },
              "optimizationMetadata": {
                "name": "optimizationMetadata",
                "type": "OptimizationMetadata",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 354
          },
          "OptimizationInput": {
            "name": "OptimizationInput",
            "body": "themeAnalysis: ThemeResonanceAnalysis;\r\n  styleAnalysis: StyleAnalysis;\r\n  expressionPatterns: ExpressionPatterns;\r\n  qualityMetrics: QualityMetrics;\r\n  characters?: Character[];\r\n  characterPsychologies?: { [id: string]: CharacterPsychology",
            "properties": {
              "themeAnalysis": {
                "name": "themeAnalysis",
                "type": "ThemeResonanceAnalysis",
                "optional": false
              },
              "styleAnalysis": {
                "name": "styleAnalysis",
                "type": "StyleAnalysis",
                "optional": false
              },
              "expressionPatterns": {
                "name": "expressionPatterns",
                "type": "ExpressionPatterns",
                "optional": false
              },
              "qualityMetrics": {
                "name": "qualityMetrics",
                "type": "QualityMetrics",
                "optional": false
              },
              "characters": {
                "name": "characters",
                "type": "Character[]",
                "optional": true
              },
              "characterPsychologies": {
                "name": "characterPsychologies",
                "type": "{ [id: string]: CharacterPsychology",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 378
          },
          "IOptimizationCoordinator": {
            "name": "IOptimizationCoordinator",
            "body": "/**\r\n   * 包括的章最適化を実行する\r\n   * \r\n   * @param content 章の内容\r\n   * @param chapterNumber 章番号\r\n   * @param context 生成コンテキスト\r\n   * @param analysisResults 分析結果\r\n   * @returns 統合最適化結果\r\n   */\r\n  optimizeChapter(\r\n    content: string,\r\n    chapterNumber: number,\r\n    context: GenerationContext,\r\n    analysisResults: OptimizationInput\r\n  ): Promise<IntegratedOptimizationResult>;",
            "properties": {
              "content": {
                "name": "content",
                "type": "string",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "context": {
                "name": "context",
                "type": "GenerationContext",
                "optional": false
              },
              "analysisResults": {
                "name": "analysisResults",
                "type": "OptimizationInput",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": true,
            "lineNumber": 391
          },
          "ThemeEnhancement": {
            "name": "ThemeEnhancement",
            "body": "theme: string;\r\n  currentStrength: number;\r\n  suggestion: string;\r\n  approach: string;\r\n  example: string;",
            "properties": {
              "theme": {
                "name": "theme",
                "type": "string",
                "optional": false
              },
              "currentStrength": {
                "name": "currentStrength",
                "type": "number",
                "optional": false
              },
              "suggestion": {
                "name": "suggestion",
                "type": "string",
                "optional": false
              },
              "approach": {
                "name": "approach",
                "type": "string",
                "optional": false
              },
              "example": {
                "name": "example",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 417
          },
          "SymbolicElement": {
            "name": "SymbolicElement",
            "body": "element: string;\r\n  meaning: string;\r\n  usage: string;\r\n  chapter: number;",
            "properties": {
              "element": {
                "name": "element",
                "type": "string",
                "optional": false
              },
              "meaning": {
                "name": "meaning",
                "type": "string",
                "optional": false
              },
              "usage": {
                "name": "usage",
                "type": "string",
                "optional": false
              },
              "chapter": {
                "name": "chapter",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 429
          },
          "ForeshadowingOpportunity": {
            "name": "ForeshadowingOpportunity",
            "body": "opportunity: string;\r\n  placement: string;\r\n  resolution: string;\r\n  impact: number;",
            "properties": {
              "opportunity": {
                "name": "opportunity",
                "type": "string",
                "optional": false
              },
              "placement": {
                "name": "placement",
                "type": "string",
                "optional": false
              },
              "resolution": {
                "name": "resolution",
                "type": "string",
                "optional": false
              },
              "impact": {
                "name": "impact",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 440
          },
          "StyleGuidance": {
            "name": "StyleGuidance",
            "body": "general: string[];\r\n  sentenceStructure: string[];\r\n  vocabulary: string[];\r\n  rhythm: string[];",
            "properties": {
              "general": {
                "name": "general",
                "type": "string[]",
                "optional": false
              },
              "sentenceStructure": {
                "name": "sentenceStructure",
                "type": "string[]",
                "optional": false
              },
              "vocabulary": {
                "name": "vocabulary",
                "type": "string[]",
                "optional": false
              },
              "rhythm": {
                "name": "rhythm",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 451
          },
          "ExpressionAlternatives": {
            "name": "ExpressionAlternatives",
            "body": "[originalExpression: string]: string[];",
            "properties": {
              "originalExpression": {
                "name": "originalExpression",
                "type": "string]: string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 462
          },
          "SubjectPatternOptimization": {
            "name": "SubjectPatternOptimization",
            "body": "score: number;\r\n  problems: string[];\r\n  suggestions: string[];",
            "properties": {
              "score": {
                "name": "score",
                "type": "number",
                "optional": false
              },
              "problems": {
                "name": "problems",
                "type": "string[]",
                "optional": false
              },
              "suggestions": {
                "name": "suggestions",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 470
          },
          "StructureRecommendation": {
            "name": "StructureRecommendation",
            "body": "aspect: string;\r\n  recommendation: string;\r\n  reason: string;\r\n  example: string;",
            "properties": {
              "aspect": {
                "name": "aspect",
                "type": "string",
                "optional": false
              },
              "recommendation": {
                "name": "recommendation",
                "type": "string",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": false
              },
              "example": {
                "name": "example",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 480
          },
          "RepetitionAlternative": {
            "name": "RepetitionAlternative",
            "body": "originalPhrase: string;\r\n  alternatives: string[];\r\n  context: string;",
            "properties": {
              "originalPhrase": {
                "name": "originalPhrase",
                "type": "string",
                "optional": false
              },
              "alternatives": {
                "name": "alternatives",
                "type": "string[]",
                "optional": false
              },
              "context": {
                "name": "context",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 491
          },
          "DepthRecommendation": {
            "name": "DepthRecommendation",
            "body": "aspect: string;\r\n  title: string;\r\n  description: string;\r\n  implementation: string;\r\n  priority: number;",
            "properties": {
              "aspect": {
                "name": "aspect",
                "type": "string",
                "optional": false
              },
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "implementation": {
                "name": "implementation",
                "type": "string",
                "optional": false
              },
              "priority": {
                "name": "priority",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 501
          },
          "CharacterDepthPrompt": {
            "name": "CharacterDepthPrompt",
            "body": "characterId: string;\r\n  focusAreas: string[];\r\n  promptText: string;\r\n  expectedOutcome: string;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "focusAreas": {
                "name": "focusAreas",
                "type": "string[]",
                "optional": false
              },
              "promptText": {
                "name": "promptText",
                "type": "string",
                "optional": false
              },
              "expectedOutcome": {
                "name": "expectedOutcome",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 513
          },
          "TensionPacingRecommendation": {
            "name": "TensionPacingRecommendation",
            "body": "tension: {\r\n    recommendedTension: number;\r\n    reason: string;\r\n    direction: 'increase' | 'decrease' | 'maintain';",
            "properties": {
              "tension": {
                "name": "tension",
                "type": "{",
                "optional": false
              },
              "recommendedTension": {
                "name": "recommendedTension",
                "type": "number",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": false
              },
              "direction": {
                "name": "direction",
                "type": "'increase' | 'decrease' | 'maintain'",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 524
          },
          "TensionCurvePoint": {
            "name": "TensionCurvePoint",
            "body": "chapter: number;\r\n  tension: number;\r\n  description: string;\r\n  keyEvents: string[];",
            "properties": {
              "chapter": {
                "name": "chapter",
                "type": "number",
                "optional": false
              },
              "tension": {
                "name": "tension",
                "type": "number",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "keyEvents": {
                "name": "keyEvents",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 540
          },
          "CoordinatorFactory": {
            "name": "CoordinatorFactory",
            "body": "/**\r\n   * 分析コーディネータを作成する\r\n   * \r\n   * @param options オプション\r\n   * @returns 分析コーディネータ\r\n   */\r\n  createAnalysisCoordinator(options?: AnalysisCoordinatorOptions): IAnalysisCoordinator;\r\n\r\n  /**\r\n   * 最適化コーディネータを作成する\r\n   * \r\n   * @param options オプション\r\n   * @returns 最適化コーディネータ\r\n   */\r\n  createOptimizationCoordinator(options?: OptimizationCoordinatorOptions): IOptimizationCoordinator;",
            "properties": {
              "options": {
                "name": "options",
                "type": "OptimizationCoordinatorOptions): IOptimizationCoordinator",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 555
          },
          "IntegratedCoordinatorService": {
            "name": "IntegratedCoordinatorService",
            "body": "/**\r\n   * 章の分析と最適化を統合実行する\r\n   * \r\n   * @param content 章の内容\r\n   * @param chapterNumber 章番号\r\n   * @param context 生成コンテキスト\r\n   * @returns 分析結果と最適化結果のペア\r\n   */\r\n  analyzeAndOptimizeChapter(\r\n    content: string,\r\n    chapterNumber: number,\r\n    context: GenerationContext\r\n  ): Promise<{\r\n    analysis: IntegratedAnalysisResult;\r\n    optimization: IntegratedOptimizationResult;",
            "properties": {
              "content": {
                "name": "content",
                "type": "string",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "context": {
                "name": "context",
                "type": "GenerationContext",
                "optional": false
              },
              "analysis": {
                "name": "analysis",
                "type": "IntegratedAnalysisResult",
                "optional": false
              },
              "optimization": {
                "name": "optimization",
                "type": "IntegratedOptimizationResult",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 582
          },
          "CoordinatorHealthCheck": {
            "name": "CoordinatorHealthCheck",
            "body": "/**\r\n   * サービスの健全性をチェックする\r\n   * \r\n   * @returns ヘルスステータス\r\n   */\r\n  checkHealth(): Promise<{\r\n    status: 'healthy' | 'degraded' | 'unhealthy';\r\n    services: {\r\n      [serviceName: string]: {\r\n        status: 'up' | 'down';\r\n        responseTime?: number;\r\n        error?: string;",
            "properties": {
              "status": {
                "name": "status",
                "type": "'up' | 'down'",
                "optional": false
              },
              "services": {
                "name": "services",
                "type": "{",
                "optional": false
              },
              "serviceName": {
                "name": "serviceName",
                "type": "string]: {",
                "optional": false
              },
              "responseTime": {
                "name": "responseTime",
                "type": "number",
                "optional": true
              },
              "error": {
                "name": "error",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 610
          }
        },
        "types": {
          "CoordinatorType": {
            "name": "CoordinatorType",
            "definition": "'analysis' | 'optimization' | 'integrated'",
            "isUnion": true,
            "isIntersection": false,
            "isGeneric": false,
            "lineNumber": 633
          },
          "ProcessingStrategy": {
            "name": "ProcessingStrategy",
            "definition": "'sequential' | 'parallel' | 'hybrid'",
            "isUnion": true,
            "isIntersection": false,
            "isGeneric": false,
            "lineNumber": 639
          },
          "CacheStrategy": {
            "name": "CacheStrategy",
            "definition": "'memory' | 'persistent' | 'distributed' | 'none'",
            "isUnion": true,
            "isIntersection": false,
            "isGeneric": false,
            "lineNumber": 645
          }
        },
        "enums": {},
        "imports": [
          {
            "types": [
              "GenerationContext",
              "ChapterAnalysis",
              "ThemeResonanceAnalysis",
              "StyleAnalysis",
              "ExpressionPatterns",
              "QualityMetrics"
            ],
            "source": "@/types/generation",
            "isTypeOnly": true
          },
          {
            "types": [
              "ReaderExperienceAnalysis"
            ],
            "source": "@/lib/analysis/services/reader/reader-experience-analysis-service",
            "isTypeOnly": false
          },
          {
            "types": [
              "CharacterAnalysisResult"
            ],
            "source": "@/lib/analysis/services/character/character-analysis-service",
            "isTypeOnly": false
          },
          {
            "types": [
              "Character",
              "CharacterPsychology"
            ],
            "source": "@/lib/characters/core/types",
            "isTypeOnly": true
          }
        ],
        "exports": [
          "BaseCoordinatorOptions",
          "BaseMetadata",
          "CacheableCoordinator",
          "AnalysisCoordinatorOptions",
          "IntegratedAnalysisResult",
          "AnalysisMetadata",
          "SceneStructureAnalysis",
          "SceneRecommendation",
          "LiteraryInspiration",
          "LiteraryTechnique",
          "IAnalysisCoordinator",
          "OptimizationCoordinatorOptions",
          "PrioritizedSuggestion",
          "ConflictResolution",
          "ImplementationStep",
          "SynergyOpportunity",
          "IntegratedRecommendations",
          "ThemeOptimization",
          "StyleOptimization",
          "CharacterOptimization",
          "TensionOptimization",
          "OptimizationMetadata",
          "IntegratedOptimizationResult",
          "OptimizationInput",
          "IOptimizationCoordinator",
          "ThemeEnhancement",
          "SymbolicElement",
          "ForeshadowingOpportunity",
          "StyleGuidance",
          "ExpressionAlternatives",
          "SubjectPatternOptimization",
          "StructureRecommendation",
          "RepetitionAlternative",
          "DepthRecommendation",
          "CharacterDepthPrompt",
          "TensionPacingRecommendation",
          "TensionCurvePoint",
          "CoordinatorFactory",
          "IntegratedCoordinatorService",
          "CoordinatorHealthCheck",
          "CoordinatorType",
          "ProcessingStrategy",
          "CacheStrategy"
        ],
        "inlineTypes": [
          {
            "definition": ": {\r\n    resolvedForeshadowing: any[];\r\n    generatedCount: number;\r\n    totalActive: number;\r\n  }",
            "lineNumber": 86
          },
          {
            "definition": ": {\r\n    [sceneType: string]: number;\r\n  }",
            "lineNumber": 131
          },
          {
            "definition": ": {\r\n    min: number;\r\n    max: number;\r\n    avg: number;\r\n    stdDev: number;\r\n  }",
            "lineNumber": 134
          },
          {
            "definition": ": {\r\n    types: { [transitionType: string]: number }",
            "lineNumber": 141
          },
          {
            "definition": ": { [characterId: string]: DepthRecommendation[] }",
            "lineNumber": 313
          },
          {
            "definition": ": { [characterId: string]: CharacterDepthPrompt }",
            "lineNumber": 315
          },
          {
            "definition": ": {\r\n    climaxChapter: number;\r\n    secondaryClimaxChapters: number[];\r\n    reason: string;\r\n  }",
            "lineNumber": 326
          },
          {
            "definition": ": { [id: string]: CharacterPsychology }",
            "lineNumber": 384
          },
          {
            "definition": ": {\r\n    recommendedTension: number;\r\n    reason: string;\r\n    direction: 'increase' | 'decrease' | 'maintain';\r\n  }",
            "lineNumber": 525
          },
          {
            "definition": ": {\r\n    recommendedPacing: number;\r\n    description: string;\r\n  }",
            "lineNumber": 530
          },
          {
            "definition": ": {\r\n      [serviceName: string]: {\r\n        status: 'up' | 'down';\r\n        responseTime?: number;\r\n        error?: string;\r\n      }",
            "lineNumber": 618
          }
        ],
        "generics": [
          "IntegratedAnalysisResult",
          "IntegratedOptimizationResult",
          "{\r\n    analysis: IntegratedAnalysisResult;\r\n    optimization: IntegratedOptimizationResult;\r\n  }",
          "{\r\n    status: 'healthy' | 'degraded' | 'unhealthy';\r\n    services: {\r\n      [serviceName: string]: {\r\n        status: 'up' | 'down';\r\n        responseTime?: number;\r\n        error?: string;\r\n      };\r\n    };\r\n    timestamp: string;\r\n  }"
        ],
        "extendedTypes": [
          "BaseCoordinatorOptions",
          "BaseMetadata",
          "CacheableCoordinator",
          "BaseCoordinatorOptions",
          "BaseMetadata",
          "CacheableCoordinator"
        ],
        "dataModelTypes": [],
        "storageRelatedTypes": [
          {
            "name": "CacheableCoordinator",
            "category": "STORAGE_RELATED",
            "definition": {
              "name": "CacheableCoordinator",
              "body": "/** キャッシュをクリアする */\r\n  clearCache(): void;",
              "properties": {},
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 58
            }
          },
          {
            "name": "CacheStrategy",
            "category": "STORAGE_RELATED",
            "definition": {
              "name": "CacheStrategy",
              "definition": "'memory' | 'persistent' | 'distributed' | 'none'",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": false,
              "lineNumber": 645
            }
          }
        ],
        "systemIntegrationTypes": [
          {
            "name": "BaseCoordinatorOptions",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "BaseCoordinatorOptions",
              "body": "/** キャッシュを有効にするか */\r\n  enableCache?: boolean;\r\n  /** 並列処理を有効にするか */\r\n  enableParallelProcessing?: boolean;\r\n  /** 詳細ログを有効にするか */\r\n  enableDetailedLogging?: boolean;",
              "properties": {
                "enableCache": {
                  "name": "enableCache",
                  "type": "boolean",
                  "optional": true
                },
                "enableParallelProcessing": {
                  "name": "enableParallelProcessing",
                  "type": "boolean",
                  "optional": true
                },
                "enableDetailedLogging": {
                  "name": "enableDetailedLogging",
                  "type": "boolean",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 30
            }
          },
          {
            "name": "CacheableCoordinator",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "CacheableCoordinator",
              "body": "/** キャッシュをクリアする */\r\n  clearCache(): void;",
              "properties": {},
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 58
            }
          },
          {
            "name": "AnalysisCoordinatorOptions",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "AnalysisCoordinatorOptions",
              "body": "/** 統合最適化を有効にするか */\r\n  optimizeForIntegration?: boolean;",
              "properties": {
                "optimizeForIntegration": {
                  "name": "optimizeForIntegration",
                  "type": "boolean",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 71
            }
          },
          {
            "name": "IAnalysisCoordinator",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "IAnalysisCoordinator",
              "body": "/**\r\n   * 包括的章分析を実行する\r\n   * \r\n   * @param content 章の内容\r\n   * @param chapterNumber 章番号\r\n   * @param context 生成コンテキスト\r\n   * @returns 統合分析結果\r\n   */\r\n  analyzeChapter(\r\n    content: string,\r\n    chapterNumber: number,\r\n    context: GenerationContext\r\n  ): Promise<IntegratedAnalysisResult>;",
              "properties": {
                "content": {
                  "name": "content",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "GenerationContext",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 185
            }
          },
          {
            "name": "OptimizationCoordinatorOptions",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "OptimizationCoordinatorOptions",
              "body": "/** カテゴリごとの最大推奨数 */\r\n  maxRecommendationsPerCategory?: number;\r\n  /** 優先順位付け戦略 */\r\n  prioritizationStrategy?: 'impact' | 'effort' | 'balanced';\r\n  /** 矛盾解決を有効にするか */\r\n  enableConflictResolution?: boolean;\r\n  /** 相乗効果検出を有効にするか */\r\n  enableSynergyDetection?: boolean;",
              "properties": {
                "maxRecommendationsPerCategory": {
                  "name": "maxRecommendationsPerCategory",
                  "type": "number",
                  "optional": true
                },
                "prioritizationStrategy": {
                  "name": "prioritizationStrategy",
                  "type": "'impact' | 'effort' | 'balanced'",
                  "optional": true
                },
                "enableConflictResolution": {
                  "name": "enableConflictResolution",
                  "type": "boolean",
                  "optional": true
                },
                "enableSynergyDetection": {
                  "name": "enableSynergyDetection",
                  "type": "boolean",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 209
            }
          },
          {
            "name": "IOptimizationCoordinator",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "IOptimizationCoordinator",
              "body": "/**\r\n   * 包括的章最適化を実行する\r\n   * \r\n   * @param content 章の内容\r\n   * @param chapterNumber 章番号\r\n   * @param context 生成コンテキスト\r\n   * @param analysisResults 分析結果\r\n   * @returns 統合最適化結果\r\n   */\r\n  optimizeChapter(\r\n    content: string,\r\n    chapterNumber: number,\r\n    context: GenerationContext,\r\n    analysisResults: OptimizationInput\r\n  ): Promise<IntegratedOptimizationResult>;",
              "properties": {
                "content": {
                  "name": "content",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "GenerationContext",
                  "optional": false
                },
                "analysisResults": {
                  "name": "analysisResults",
                  "type": "OptimizationInput",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 391
            }
          },
          {
            "name": "CoordinatorFactory",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "CoordinatorFactory",
              "body": "/**\r\n   * 分析コーディネータを作成する\r\n   * \r\n   * @param options オプション\r\n   * @returns 分析コーディネータ\r\n   */\r\n  createAnalysisCoordinator(options?: AnalysisCoordinatorOptions): IAnalysisCoordinator;\r\n\r\n  /**\r\n   * 最適化コーディネータを作成する\r\n   * \r\n   * @param options オプション\r\n   * @returns 最適化コーディネータ\r\n   */\r\n  createOptimizationCoordinator(options?: OptimizationCoordinatorOptions): IOptimizationCoordinator;",
              "properties": {
                "options": {
                  "name": "options",
                  "type": "OptimizationCoordinatorOptions): IOptimizationCoordinator",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 555
            }
          },
          {
            "name": "IntegratedCoordinatorService",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "IntegratedCoordinatorService",
              "body": "/**\r\n   * 章の分析と最適化を統合実行する\r\n   * \r\n   * @param content 章の内容\r\n   * @param chapterNumber 章番号\r\n   * @param context 生成コンテキスト\r\n   * @returns 分析結果と最適化結果のペア\r\n   */\r\n  analyzeAndOptimizeChapter(\r\n    content: string,\r\n    chapterNumber: number,\r\n    context: GenerationContext\r\n  ): Promise<{\r\n    analysis: IntegratedAnalysisResult;\r\n    optimization: IntegratedOptimizationResult;",
              "properties": {
                "content": {
                  "name": "content",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "GenerationContext",
                  "optional": false
                },
                "analysis": {
                  "name": "analysis",
                  "type": "IntegratedAnalysisResult",
                  "optional": false
                },
                "optimization": {
                  "name": "optimization",
                  "type": "IntegratedOptimizationResult",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 582
            }
          },
          {
            "name": "CoordinatorHealthCheck",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "CoordinatorHealthCheck",
              "body": "/**\r\n   * サービスの健全性をチェックする\r\n   * \r\n   * @returns ヘルスステータス\r\n   */\r\n  checkHealth(): Promise<{\r\n    status: 'healthy' | 'degraded' | 'unhealthy';\r\n    services: {\r\n      [serviceName: string]: {\r\n        status: 'up' | 'down';\r\n        responseTime?: number;\r\n        error?: string;",
              "properties": {
                "status": {
                  "name": "status",
                  "type": "'up' | 'down'",
                  "optional": false
                },
                "services": {
                  "name": "services",
                  "type": "{",
                  "optional": false
                },
                "serviceName": {
                  "name": "serviceName",
                  "type": "string]: {",
                  "optional": false
                },
                "responseTime": {
                  "name": "responseTime",
                  "type": "number",
                  "optional": true
                },
                "error": {
                  "name": "error",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 610
            }
          },
          {
            "name": "CoordinatorType",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "CoordinatorType",
              "definition": "'analysis' | 'optimization' | 'integrated'",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": false,
              "lineNumber": 633
            }
          }
        ]
      },
      "lib\\analysis\\core\\interfaces.ts": {
        "filePath": "lib\\analysis\\core\\interfaces.ts",
        "fileSize": 3131,
        "system": "analysis",
        "module": "analysis/core",
        "interfaces": {
          "SubjectPatternOptimizationRequest": {
            "name": "SubjectPatternOptimizationRequest",
            "body": "repeatedSubjects: Array<{\r\n    subject: string;\r\n    count: number;",
            "properties": {
              "repeatedSubjects": {
                "name": "repeatedSubjects",
                "type": "Array<{",
                "optional": false
              },
              "subject": {
                "name": "subject",
                "type": "string",
                "optional": false
              },
              "count": {
                "name": "count",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 23
          },
          "IStyleOptimizationService": {
            "name": "IStyleOptimizationService",
            "body": "/**\r\n   * 文体ガイダンス生成\r\n   * 文体改善のためのガイダンスを生成します\r\n   * \r\n   * @param styleAnalysis 文体分析結果\r\n   * @param context コンテキスト情報（ジャンル、テーマなど）\r\n   * @param chapterNumber 章番号\r\n   * @returns 文体ガイダンス\r\n   */\r\n  generateStyleGuidance(\r\n    chapterNumber: number,  // ← 実装に合わせる\r\n    context: any\r\n  ): Promise<StyleGuidance>;\r\n  \r\n  /**\r\n   * 代替表現提案\r\n   * 繰り返しを避けるための代替表現を提案します\r\n   * \r\n   * @param expressionPatterns 表現パターン分析結果\r\n   * @param context コンテキスト情報（ジャンル、テーマなど）\r\n   * @returns 代替表現提案\r\n   */\r\n  suggestAlternativeExpressions(\r\n    expressionPatterns: ExpressionPatterns,\r\n    context: any\r\n  ): Promise<ExpressionAlternatives>;\r\n  \r\n  /**\r\n   * 主語パターン最適化提案\r\n   * 主語の使用パターンを最適化するための提案を生成します\r\n   * \r\n   * @param subjectPatterns 主語パターン分析結果\r\n   * @param context コンテキスト情報\r\n   * @returns 主語パターン最適化提案\r\n   */\r\n  optimizeSubjectPatterns(\r\n    subjectPatterns: SubjectPatternOptimizationRequest,\r\n    context: any\r\n  ): Promise<SubjectPatternOptimization>;\r\n  \r\n  /**\r\n   * 文構造の改善提案を生成\r\n   * 文の構造を改善するための提案を生成します\r\n   * \r\n   * @param styleAnalysis 文体分析結果\r\n   * @param context コンテキスト情報\r\n   * @returns 文構造改善提案\r\n   */\r\n  generateStructureRecommendations(\r\n    styleAnalysis: StyleAnalysis,\r\n    context: any\r\n  ): Promise<StructureRecommendation[]>;\r\n  \r\n  /**\r\n   * 繰り返し表現の代替提案を生成\r\n   * 繰り返し使用されている表現の代替案を提案します\r\n   * \r\n   * @param repetitions 繰り返し表現のリスト\r\n   * @param context コンテキスト情報\r\n   * @returns 繰り返し表現の代替提案\r\n   */\r\n  generateRepetitionAlternatives(\r\n    repetitions: string[],\r\n    context: any\r\n  ): Promise<RepetitionAlternative[]>;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "context": {
                "name": "context",
                "type": "any",
                "optional": false
              },
              "expressionPatterns": {
                "name": "expressionPatterns",
                "type": "ExpressionPatterns",
                "optional": false
              },
              "subjectPatterns": {
                "name": "subjectPatterns",
                "type": "SubjectPatternOptimizationRequest",
                "optional": false
              },
              "styleAnalysis": {
                "name": "styleAnalysis",
                "type": "StyleAnalysis",
                "optional": false
              },
              "repetitions": {
                "name": "repetitions",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 37
          },
          "ICacheStorage": {
            "name": "ICacheStorage",
            "body": "/**\r\n   * キャッシュに値を設定\r\n   * @param key キー\r\n   * @param value 値\r\n   * @param ttl 有効期限（ミリ秒）\r\n   */\r\n  set<T>(key: string | number, value: T, ttl?: number): void;\r\n  \r\n  /**\r\n   * キャッシュから値を取得\r\n   * @param key キー\r\n   * @returns キャッシュ値（存在しないかExpireしている場合はnull）\r\n   */\r\n  get<T>(key: string | number): T | null;\r\n  \r\n  /**\r\n   * キャッシュから項目を削除\r\n   * @param key キー\r\n   * @returns 削除成功時はtrue\r\n   */\r\n  delete(key: string | number): boolean;\r\n  \r\n  /**\r\n   * キャッシュをクリア\r\n   */\r\n  clear(): void;\r\n  \r\n  /**\r\n   * 指定したプレフィックスを持つキーのエントリをすべて削除\r\n   * @param prefix キープレフィックス\r\n   */\r\n  deleteByPrefix(prefix: string): void;\r\n  \r\n  /**\r\n   * 期限切れのエントリを削除\r\n   */\r\n  removeExpired(): void;\r\n  \r\n  /**\r\n   * キャッシュの数を取得\r\n   * @returns キャッシュエントリ数\r\n   */\r\n  size(): number;",
            "properties": {
              "key": {
                "name": "key",
                "type": "string | number): boolean",
                "optional": false
              },
              "value": {
                "name": "value",
                "type": "T",
                "optional": false
              },
              "ttl": {
                "name": "ttl",
                "type": "number): void",
                "optional": true
              },
              "prefix": {
                "name": "prefix",
                "type": "string): void",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 109
          }
        },
        "types": {},
        "enums": {},
        "imports": [
          {
            "types": [
              "StyleGuidance",
              "ExpressionAlternatives",
              "StyleAnalysis",
              "ExpressionPatterns"
            ],
            "source": "@/types/generation",
            "isTypeOnly": true
          },
          {
            "types": [
              "SubjectPatternOptimization",
              "StructureRecommendation",
              "RepetitionAlternative"
            ],
            "source": "./types",
            "isTypeOnly": true
          }
        ],
        "exports": [
          "SubjectPatternOptimizationRequest",
          "IStyleOptimizationService",
          "ICacheStorage"
        ],
        "inlineTypes": [],
        "generics": [
          "{\r\n    subject: string;\r\n    count: number;\r\n  }",
          "StyleGuidance",
          "ExpressionAlternatives",
          "SubjectPatternOptimization",
          "StructureRecommendation[]",
          "RepetitionAlternative[]",
          "T"
        ],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [
          {
            "name": "ICacheStorage",
            "category": "STORAGE_RELATED",
            "definition": {
              "name": "ICacheStorage",
              "body": "/**\r\n   * キャッシュに値を設定\r\n   * @param key キー\r\n   * @param value 値\r\n   * @param ttl 有効期限（ミリ秒）\r\n   */\r\n  set<T>(key: string | number, value: T, ttl?: number): void;\r\n  \r\n  /**\r\n   * キャッシュから値を取得\r\n   * @param key キー\r\n   * @returns キャッシュ値（存在しないかExpireしている場合はnull）\r\n   */\r\n  get<T>(key: string | number): T | null;\r\n  \r\n  /**\r\n   * キャッシュから項目を削除\r\n   * @param key キー\r\n   * @returns 削除成功時はtrue\r\n   */\r\n  delete(key: string | number): boolean;\r\n  \r\n  /**\r\n   * キャッシュをクリア\r\n   */\r\n  clear(): void;\r\n  \r\n  /**\r\n   * 指定したプレフィックスを持つキーのエントリをすべて削除\r\n   * @param prefix キープレフィックス\r\n   */\r\n  deleteByPrefix(prefix: string): void;\r\n  \r\n  /**\r\n   * 期限切れのエントリを削除\r\n   */\r\n  removeExpired(): void;\r\n  \r\n  /**\r\n   * キャッシュの数を取得\r\n   * @returns キャッシュエントリ数\r\n   */\r\n  size(): number;",
              "properties": {
                "key": {
                  "name": "key",
                  "type": "string | number): boolean",
                  "optional": false
                },
                "value": {
                  "name": "value",
                  "type": "T",
                  "optional": false
                },
                "ttl": {
                  "name": "ttl",
                  "type": "number): void",
                  "optional": true
                },
                "prefix": {
                  "name": "prefix",
                  "type": "string): void",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 109
            }
          }
        ],
        "systemIntegrationTypes": [
          {
            "name": "IStyleOptimizationService",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "IStyleOptimizationService",
              "body": "/**\r\n   * 文体ガイダンス生成\r\n   * 文体改善のためのガイダンスを生成します\r\n   * \r\n   * @param styleAnalysis 文体分析結果\r\n   * @param context コンテキスト情報（ジャンル、テーマなど）\r\n   * @param chapterNumber 章番号\r\n   * @returns 文体ガイダンス\r\n   */\r\n  generateStyleGuidance(\r\n    chapterNumber: number,  // ← 実装に合わせる\r\n    context: any\r\n  ): Promise<StyleGuidance>;\r\n  \r\n  /**\r\n   * 代替表現提案\r\n   * 繰り返しを避けるための代替表現を提案します\r\n   * \r\n   * @param expressionPatterns 表現パターン分析結果\r\n   * @param context コンテキスト情報（ジャンル、テーマなど）\r\n   * @returns 代替表現提案\r\n   */\r\n  suggestAlternativeExpressions(\r\n    expressionPatterns: ExpressionPatterns,\r\n    context: any\r\n  ): Promise<ExpressionAlternatives>;\r\n  \r\n  /**\r\n   * 主語パターン最適化提案\r\n   * 主語の使用パターンを最適化するための提案を生成します\r\n   * \r\n   * @param subjectPatterns 主語パターン分析結果\r\n   * @param context コンテキスト情報\r\n   * @returns 主語パターン最適化提案\r\n   */\r\n  optimizeSubjectPatterns(\r\n    subjectPatterns: SubjectPatternOptimizationRequest,\r\n    context: any\r\n  ): Promise<SubjectPatternOptimization>;\r\n  \r\n  /**\r\n   * 文構造の改善提案を生成\r\n   * 文の構造を改善するための提案を生成します\r\n   * \r\n   * @param styleAnalysis 文体分析結果\r\n   * @param context コンテキスト情報\r\n   * @returns 文構造改善提案\r\n   */\r\n  generateStructureRecommendations(\r\n    styleAnalysis: StyleAnalysis,\r\n    context: any\r\n  ): Promise<StructureRecommendation[]>;\r\n  \r\n  /**\r\n   * 繰り返し表現の代替提案を生成\r\n   * 繰り返し使用されている表現の代替案を提案します\r\n   * \r\n   * @param repetitions 繰り返し表現のリスト\r\n   * @param context コンテキスト情報\r\n   * @returns 繰り返し表現の代替提案\r\n   */\r\n  generateRepetitionAlternatives(\r\n    repetitions: string[],\r\n    context: any\r\n  ): Promise<RepetitionAlternative[]>;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "any",
                  "optional": false
                },
                "expressionPatterns": {
                  "name": "expressionPatterns",
                  "type": "ExpressionPatterns",
                  "optional": false
                },
                "subjectPatterns": {
                  "name": "subjectPatterns",
                  "type": "SubjectPatternOptimizationRequest",
                  "optional": false
                },
                "styleAnalysis": {
                  "name": "styleAnalysis",
                  "type": "StyleAnalysis",
                  "optional": false
                },
                "repetitions": {
                  "name": "repetitions",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 37
            }
          }
        ]
      },
      "lib\\analysis\\core\\types.ts": {
        "filePath": "lib\\analysis\\core\\types.ts",
        "fileSize": 9056,
        "system": "analysis",
        "module": "analysis/core",
        "interfaces": {
          "SubjectPatternOptimization": {
            "name": "SubjectPatternOptimization",
            "body": "/** 主語多様性スコア（0-1、高いほど多様） */\r\n    score: number;\r\n    /** 主語パターンの問題点リスト */\r\n    problems: string[];\r\n    /** 改善提案リスト */\r\n    suggestions: string[];",
            "properties": {
              "score": {
                "name": "score",
                "type": "number",
                "optional": false
              },
              "problems": {
                "name": "problems",
                "type": "string[]",
                "optional": false
              },
              "suggestions": {
                "name": "suggestions",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 11
          },
          "StructureRecommendation": {
            "name": "StructureRecommendation",
            "body": "/** 改善のタイプ（バリエーション、リズム、修飾語、主述関係など） */\r\n    type: string;\r\n    /** 現在の文体における問題や改善点 */\r\n    issue: string;\r\n    /** 具体的な改善アイデア */\r\n    suggestion: string;\r\n    /** 改善例 */\r\n    example: {\r\n      /** 改善前の例 */\r\n      before: string;\r\n      /** 改善後の例 */\r\n      after: string;",
            "properties": {
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "issue": {
                "name": "issue",
                "type": "string",
                "optional": false
              },
              "suggestion": {
                "name": "suggestion",
                "type": "string",
                "optional": false
              },
              "example": {
                "name": "example",
                "type": "{",
                "optional": false
              },
              "before": {
                "name": "before",
                "type": "string",
                "optional": false
              },
              "after": {
                "name": "after",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 24
          },
          "RepetitionAlternative": {
            "name": "RepetitionAlternative",
            "body": "/** 元の表現 */\r\n    original: string;\r\n    /** 代替表現のリスト */\r\n    alternatives: string[];\r\n    /** 表現が使われる一般的な文脈 */\r\n    context: string;",
            "properties": {
              "original": {
                "name": "original",
                "type": "string",
                "optional": false
              },
              "alternatives": {
                "name": "alternatives",
                "type": "string[]",
                "optional": false
              },
              "context": {
                "name": "context",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 44
          },
          "ThemeResonanceAnalysis": {
            "name": "ThemeResonanceAnalysis",
            "body": "/**\r\n     * 各テーマの分析情報\r\n     */\r\n    themes?: {\r\n      [themeName: string]: {\r\n        /**\r\n         * 明示的な言及（テキスト内の直接的な表現）\r\n         */\r\n        explicitMentions?: string[];\r\n        \r\n        /**\r\n         * 暗示的な表現（テキスト内の間接的な表現）\r\n         */\r\n        implicitExpressions?: string[];\r\n        \r\n        /**\r\n         * テーマの強度（0-1）\r\n         */\r\n        strength?: number;\r\n        \r\n        /**\r\n         * テーマの表現方法\r\n         */\r\n        expressionMethods?: string[];\r\n        \r\n        /**\r\n         * 関連するテーマ\r\n         */\r\n        relatedThemes?: string[];",
            "properties": {
              "themes": {
                "name": "themes",
                "type": "{",
                "optional": true
              },
              "themeName": {
                "name": "themeName",
                "type": "string]: {",
                "optional": false
              },
              "explicitMentions": {
                "name": "explicitMentions",
                "type": "string[]",
                "optional": true
              },
              "implicitExpressions": {
                "name": "implicitExpressions",
                "type": "string[]",
                "optional": true
              },
              "strength": {
                "name": "strength",
                "type": "number",
                "optional": true
              },
              "expressionMethods": {
                "name": "expressionMethods",
                "type": "string[]",
                "optional": true
              },
              "relatedThemes": {
                "name": "relatedThemes",
                "type": "string[]",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 63
          },
          "ThemeEnhancement": {
            "name": "ThemeEnhancement",
            "body": "/**\r\n     * テーマ名\r\n     */\r\n    theme: string;\r\n    \r\n    /**\r\n     * 現在の強度（0-1）\r\n     */\r\n    currentStrength?: number;\r\n    \r\n    /**\r\n     * 具体的な改善提案\r\n     */\r\n    suggestion: string;\r\n    \r\n    /**\r\n     * 使用するアプローチ（象徴、対比、メタファーなど）\r\n     */\r\n    approach?: string;\r\n    \r\n    /**\r\n     * 具体例\r\n     */\r\n    example?: string;\r\n    \r\n    /**\r\n     * 期待される効果\r\n     */\r\n    impact?: string;",
            "properties": {
              "theme": {
                "name": "theme",
                "type": "string",
                "optional": false
              },
              "currentStrength": {
                "name": "currentStrength",
                "type": "number",
                "optional": true
              },
              "suggestion": {
                "name": "suggestion",
                "type": "string",
                "optional": false
              },
              "approach": {
                "name": "approach",
                "type": "string",
                "optional": true
              },
              "example": {
                "name": "example",
                "type": "string",
                "optional": true
              },
              "impact": {
                "name": "impact",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 132
          },
          "LiteraryTechnique": {
            "name": "LiteraryTechnique",
            "body": "/**\r\n     * 技法名\r\n     */\r\n    techniqueName: string;\r\n    \r\n    /**\r\n     * 技法の説明\r\n     */\r\n    description: string;\r\n    \r\n    /**\r\n     * 具体的な使用例\r\n     */\r\n    example: string;\r\n    \r\n    /**\r\n     * 期待される効果\r\n     */\r\n    effect: string;\r\n    \r\n    /**\r\n     * 適切なジャンル\r\n     */\r\n    suitableGenres: string[];\r\n    \r\n    /**\r\n     * テーマとの関連性（0-1）\r\n     */\r\n    themeRelevance: number;",
            "properties": {
              "techniqueName": {
                "name": "techniqueName",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "example": {
                "name": "example",
                "type": "string",
                "optional": false
              },
              "effect": {
                "name": "effect",
                "type": "string",
                "optional": false
              },
              "suitableGenres": {
                "name": "suitableGenres",
                "type": "string[]",
                "optional": false
              },
              "themeRelevance": {
                "name": "themeRelevance",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 167
          },
          "LiteraryInspiration": {
            "name": "LiteraryInspiration",
            "body": "/**\r\n     * プロット技法\r\n     */\r\n    plotTechniques: {\r\n      /**\r\n       * 技法名\r\n       */\r\n      technique: string;\r\n      \r\n      /**\r\n       * 技法の説明\r\n       */\r\n      description: string;\r\n      \r\n      /**\r\n       * 具体的な適用例\r\n       */\r\n      example: string;\r\n      \r\n      /**\r\n       * 参考となる使用例\r\n       */\r\n      reference: string;",
            "properties": {
              "plotTechniques": {
                "name": "plotTechniques",
                "type": "{",
                "optional": false
              },
              "technique": {
                "name": "technique",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "example": {
                "name": "example",
                "type": "string",
                "optional": false
              },
              "reference": {
                "name": "reference",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 202
          },
          "SymbolicElement": {
            "name": "SymbolicElement",
            "body": "/**\r\n     * 関連するテーマ\r\n     */\r\n    theme: string;\r\n    \r\n    /**\r\n     * 象徴の名前/種類\r\n     */\r\n    symbolName: string;\r\n    \r\n    /**\r\n     * 象徴の説明\r\n     */\r\n    description: string;\r\n    \r\n    /**\r\n     * 物語での使用方法\r\n     */\r\n    usage: string;\r\n    \r\n    /**\r\n     * 期待される効果\r\n     */\r\n    effect: string;\r\n    \r\n    /**\r\n     * 使用時の注意点\r\n     */\r\n    caution: string;",
            "properties": {
              "theme": {
                "name": "theme",
                "type": "string",
                "optional": false
              },
              "symbolName": {
                "name": "symbolName",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "usage": {
                "name": "usage",
                "type": "string",
                "optional": false
              },
              "effect": {
                "name": "effect",
                "type": "string",
                "optional": false
              },
              "caution": {
                "name": "caution",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 252
          },
          "ForeshadowingOpportunity": {
            "name": "ForeshadowingOpportunity",
            "body": "/**\r\n     * 伏線要素の説明\r\n     */\r\n    element: string;\r\n    \r\n    /**\r\n     * テキスト内の位置の説明\r\n     */\r\n    textPosition: string;\r\n    \r\n    /**\r\n     * 将来の展開での活用方法\r\n     */\r\n    possibleDevelopments: string[];\r\n    \r\n    /**\r\n     * 推奨される解決章\r\n     */\r\n    suggestedResolutionChapter: number;\r\n    \r\n    /**\r\n     * 関連するテーマ\r\n     */\r\n    relatedTheme: string;\r\n    \r\n    /**\r\n     * 重要度（0-1）\r\n     */\r\n    importance: number;",
            "properties": {
              "element": {
                "name": "element",
                "type": "string",
                "optional": false
              },
              "textPosition": {
                "name": "textPosition",
                "type": "string",
                "optional": false
              },
              "possibleDevelopments": {
                "name": "possibleDevelopments",
                "type": "string[]",
                "optional": false
              },
              "suggestedResolutionChapter": {
                "name": "suggestedResolutionChapter",
                "type": "number",
                "optional": false
              },
              "relatedTheme": {
                "name": "relatedTheme",
                "type": "string",
                "optional": false
              },
              "importance": {
                "name": "importance",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 287
          },
          "ThemeEnhancementRequest": {
            "name": "ThemeEnhancementRequest",
            "body": "/**\r\n     * テーマ分析結果\r\n     */\r\n    themeAnalysis: ThemeResonanceAnalysis;\r\n    \r\n    /**\r\n     * 章番号\r\n     */\r\n    chapterNumber: number;\r\n    \r\n    /**\r\n     * コンテキスト情報\r\n     */\r\n    context: any;\r\n    \r\n    /**\r\n     * ジャンル\r\n     */\r\n    genre: string;\r\n    \r\n    /**\r\n     * ストーリーフェーズ\r\n     */\r\n    storyPhase: string;",
            "properties": {
              "themeAnalysis": {
                "name": "themeAnalysis",
                "type": "ThemeResonanceAnalysis",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "context": {
                "name": "context",
                "type": "any",
                "optional": false
              },
              "genre": {
                "name": "genre",
                "type": "string",
                "optional": false
              },
              "storyPhase": {
                "name": "storyPhase",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 322
          },
          "LiteraryTechniqueRequest": {
            "name": "LiteraryTechniqueRequest",
            "body": "/**\r\n     * 章番号\r\n     */\r\n    chapterNumber: number;\r\n    \r\n    /**\r\n     * 世界設定\r\n     */\r\n    worldSettings: string;\r\n    \r\n    /**\r\n     * テーマ設定\r\n     */\r\n    themeSettings: string;\r\n    \r\n    /**\r\n     * ジャンル\r\n     */\r\n    genre: string;\r\n    \r\n    /**\r\n     * 総章数\r\n     */\r\n    totalChapters: number;\r\n    \r\n    /**\r\n     * テンション値（0-1）\r\n     */\r\n    tension: number;\r\n    \r\n    /**\r\n     * ストーリーフェーズ\r\n     */\r\n    storyPhase: string;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "worldSettings": {
                "name": "worldSettings",
                "type": "string",
                "optional": false
              },
              "themeSettings": {
                "name": "themeSettings",
                "type": "string",
                "optional": false
              },
              "genre": {
                "name": "genre",
                "type": "string",
                "optional": false
              },
              "totalChapters": {
                "name": "totalChapters",
                "type": "number",
                "optional": false
              },
              "tension": {
                "name": "tension",
                "type": "number",
                "optional": false
              },
              "storyPhase": {
                "name": "storyPhase",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 352
          },
          "ExpressionUsage": {
            "name": "ExpressionUsage",
            "body": "expression: string;            // 表現テキスト\r\n    count: number;                 // 使用回数\r\n    firstUsedInChapter: number;    // 初めて使用されたチャプター番号\r\n    lastUsedInChapter: number;     // 最後に使用されたチャプター番号\r\n    chapters: number[];            // 使用されたチャプター番号のリスト\r\n    contexts?: string[];           // 使用コンテキスト例\r\n    category?: 'DESCRIPTION' | 'DIALOGUE' | 'ACTION' | 'TRANSITION'; // 表現カテゴリ",
            "properties": {
              "expression": {
                "name": "expression",
                "type": "string",
                "optional": false
              },
              "count": {
                "name": "count",
                "type": "number",
                "optional": false
              },
              "firstUsedInChapter": {
                "name": "firstUsedInChapter",
                "type": "number",
                "optional": false
              },
              "lastUsedInChapter": {
                "name": "lastUsedInChapter",
                "type": "number",
                "optional": false
              },
              "chapters": {
                "name": "chapters",
                "type": "number[]",
                "optional": false
              },
              "contexts": {
                "name": "contexts",
                "type": "string[]",
                "optional": true
              },
              "category": {
                "name": "category",
                "type": "'DESCRIPTION' | 'DIALOGUE' | 'ACTION' | 'TRANSITION'",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 389
          },
          "ExpressionUsageResult": {
            "name": "ExpressionUsageResult",
            "body": "newExpressions: string[];     // 新しく追跡された表現\r\n    repeatedExpressions: string[]; // 繰り返された表現\r\n    totalTracked: number;         // 追跡された表現の総数\r\n    diversityScore: number;       // 多様性スコア (0-1)",
            "properties": {
              "newExpressions": {
                "name": "newExpressions",
                "type": "string[]",
                "optional": false
              },
              "repeatedExpressions": {
                "name": "repeatedExpressions",
                "type": "string[]",
                "optional": false
              },
              "totalTracked": {
                "name": "totalTracked",
                "type": "number",
                "optional": false
              },
              "diversityScore": {
                "name": "diversityScore",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 399
          },
          "ForeshadowingElement": {
            "name": "ForeshadowingElement",
            "body": "id: string;\r\n  description: string;\r\n  chapter_introduced: number;\r\n  urgency: 'low' | 'medium' | 'high';\r\n  potential_resolution?: string;\r\n  resolved?: boolean;\r\n  resolution_chapter?: number;\r\n  resolution_description?: string;",
            "properties": {
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "chapter_introduced": {
                "name": "chapter_introduced",
                "type": "number",
                "optional": false
              },
              "urgency": {
                "name": "urgency",
                "type": "'low' | 'medium' | 'high'",
                "optional": false
              },
              "potential_resolution": {
                "name": "potential_resolution",
                "type": "string",
                "optional": true
              },
              "resolved": {
                "name": "resolved",
                "type": "boolean",
                "optional": true
              },
              "resolution_chapter": {
                "name": "resolution_chapter",
                "type": "number",
                "optional": true
              },
              "resolution_description": {
                "name": "resolution_description",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 409
          },
          "SymbolismAnalysis": {
            "name": "SymbolismAnalysis",
            "body": "symbols: Array<{\r\n    symbol: string;\r\n    occurrences?: string[];\r\n    meaning?: string;\r\n    thematicConnection?: string;",
            "properties": {
              "symbols": {
                "name": "symbols",
                "type": "Array<{",
                "optional": false
              },
              "symbol": {
                "name": "symbol",
                "type": "string",
                "optional": false
              },
              "occurrences": {
                "name": "occurrences",
                "type": "string[]",
                "optional": true
              },
              "meaning": {
                "name": "meaning",
                "type": "string",
                "optional": true
              },
              "thematicConnection": {
                "name": "thematicConnection",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 423
          },
          "ThemePresenceVisualization": {
            "name": "ThemePresenceVisualization",
            "body": "presenceMap: Array<{\r\n    position: number;\r\n    strength: number;",
            "properties": {
              "presenceMap": {
                "name": "presenceMap",
                "type": "Array<{",
                "optional": false
              },
              "position": {
                "name": "position",
                "type": "number",
                "optional": false
              },
              "strength": {
                "name": "strength",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 451
          },
          "ThemeElementResonance": {
            "name": "ThemeElementResonance",
            "body": "relevance: number;\r\n  suggestions: string[];\r\n  symbolicPotential: string;",
            "properties": {
              "relevance": {
                "name": "relevance",
                "type": "number",
                "optional": false
              },
              "suggestions": {
                "name": "suggestions",
                "type": "string[]",
                "optional": false
              },
              "symbolicPotential": {
                "name": "symbolicPotential",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 466
          },
          "ThemeConsistencyAnalysis": {
            "name": "ThemeConsistencyAnalysis",
            "body": "consistencyScore: number;\r\n  strengthByChapter: number[];\r\n  developmentPattern: string;\r\n  weakPoints: Array<{\r\n    chapter: number;\r\n    issue: string;",
            "properties": {
              "consistencyScore": {
                "name": "consistencyScore",
                "type": "number",
                "optional": false
              },
              "strengthByChapter": {
                "name": "strengthByChapter",
                "type": "number[]",
                "optional": false
              },
              "developmentPattern": {
                "name": "developmentPattern",
                "type": "string",
                "optional": false
              },
              "weakPoints": {
                "name": "weakPoints",
                "type": "Array<{",
                "optional": false
              },
              "chapter": {
                "name": "chapter",
                "type": "number",
                "optional": false
              },
              "issue": {
                "name": "issue",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 475
          },
          "ThemeImageryMapping": {
            "name": "ThemeImageryMapping",
            "body": "dominantSymbols: Array<{\r\n    name: string;\r\n    occurrenceCount: number;\r\n    chapterOccurrences: number[];\r\n    meanings: string[];",
            "properties": {
              "dominantSymbols": {
                "name": "dominantSymbols",
                "type": "Array<{",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "occurrenceCount": {
                "name": "occurrenceCount",
                "type": "number",
                "optional": false
              },
              "chapterOccurrences": {
                "name": "chapterOccurrences",
                "type": "number[]",
                "optional": false
              },
              "meanings": {
                "name": "meanings",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 489
          },
          "MotifTrackingResult": {
            "name": "MotifTrackingResult",
            "body": "motif: string;\r\n  occurrencesByChapter: Array<{\r\n    chapter: number;\r\n    occurrenceCount: number;\r\n    significance: number;\r\n    examples: string[];\r\n    usage: string;\r\n    meaning: string;",
            "properties": {
              "motif": {
                "name": "motif",
                "type": "string",
                "optional": false
              },
              "occurrencesByChapter": {
                "name": "occurrencesByChapter",
                "type": "Array<{",
                "optional": false
              },
              "chapter": {
                "name": "chapter",
                "type": "number",
                "optional": false
              },
              "occurrenceCount": {
                "name": "occurrenceCount",
                "type": "number",
                "optional": false
              },
              "significance": {
                "name": "significance",
                "type": "number",
                "optional": false
              },
              "examples": {
                "name": "examples",
                "type": "string[]",
                "optional": false
              },
              "usage": {
                "name": "usage",
                "type": "string",
                "optional": false
              },
              "meaning": {
                "name": "meaning",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 513
          }
        },
        "types": {},
        "enums": {},
        "imports": [],
        "exports": [
          "SubjectPatternOptimization",
          "StructureRecommendation",
          "RepetitionAlternative",
          "ThemeResonanceAnalysis",
          "ThemeEnhancement",
          "LiteraryTechnique",
          "LiteraryInspiration",
          "SymbolicElement",
          "ForeshadowingOpportunity",
          "ThemeEnhancementRequest",
          "LiteraryTechniqueRequest",
          "ExpressionUsage",
          "ExpressionUsageResult",
          "ForeshadowingElement",
          "SymbolismAnalysis",
          "ThemePresenceVisualization",
          "ThemeElementResonance",
          "ThemeConsistencyAnalysis",
          "ThemeImageryMapping",
          "MotifTrackingResult"
        ],
        "inlineTypes": [
          {
            "definition": ": {\r\n      /** 改善前の例 */\r\n      before: string;\r\n      /** 改善後の例 */\r\n      after: string;\r\n    }",
            "lineNumber": 32
          },
          {
            "definition": ": {\r\n      [themeName: string]: {\r\n        /**\r\n         * 明示的な言及（テキスト内の直接的な表現）\r\n         */\r\n        explicitMentions?: string[];\r\n        \r\n        /**\r\n         * 暗示的な表現（テキスト内の間接的な表現）\r\n         */\r\n        implicitExpressions?: string[];\r\n        \r\n        /**\r\n         * テーマの強度（0-1）\r\n         */\r\n        strength?: number;\r\n        \r\n        /**\r\n         * テーマの表現方法\r\n         */\r\n        expressionMethods?: string[];\r\n        \r\n        /**\r\n         * 関連するテーマ\r\n         */\r\n        relatedThemes?: string[];\r\n      }",
            "lineNumber": 67
          },
          {
            "definition": ": {\r\n      [key: string]: {\r\n        /**\r\n         * 緊張関係にあるテーマのペア\r\n         */\r\n        themes: [string, string];\r\n        \r\n        /**\r\n         * 緊張の強度（0-1）\r\n         */\r\n        tensionLevel: number;\r\n        \r\n        /**\r\n         * 緊張の性質の説明\r\n         */\r\n        description?: string;\r\n      }",
            "lineNumber": 109
          },
          {
            "definition": ": {\r\n      /**\r\n       * 技法名\r\n       */\r\n      technique: string;\r\n      \r\n      /**\r\n       * 技法の説明\r\n       */\r\n      description: string;\r\n      \r\n      /**\r\n       * 具体的な適用例\r\n       */\r\n      example: string;\r\n      \r\n      /**\r\n       * 参考となる使用例\r\n       */\r\n      reference: string;\r\n    }",
            "lineNumber": 206
          },
          {
            "definition": ": {\r\n      technique: string;\r\n      description: string;\r\n      example: string;\r\n      reference: string;\r\n    }",
            "lineNumber": 231
          },
          {
            "definition": ": {\r\n      technique: string;\r\n      description: string;\r\n      example: string;\r\n      reference: string;\r\n    }",
            "lineNumber": 241
          }
        ],
        "generics": [
          "{\r\n    symbol: string;\r\n    occurrences?: string[];\r\n    meaning?: string;\r\n    thematicConnection?: string;\r\n  }",
          "{\r\n    motif: string;\r\n    occurrences?: string[];\r\n    significance?: string;\r\n  }",
          "{\r\n    expression?: string;\r\n    context?: string;\r\n    interpretation?: string;\r\n  }",
          "{\r\n    expression?: string;\r\n    context?: string;\r\n    effect?: string;\r\n  }",
          "{\r\n    position: number;\r\n    strength: number;\r\n  }",
          "{\r\n    position: number;\r\n    excerpt: string;\r\n  }",
          "{\r\n    chapter: number;\r\n    issue: string;\r\n  }",
          "{\r\n    name: string;\r\n    occurrenceCount: number;\r\n    chapterOccurrences: number[];\r\n    meanings: string[];\r\n  }",
          "{\r\n    name: string;\r\n    occurrenceCount: number;\r\n    chapterOccurrences: number[];\r\n    significances: string[];\r\n  }",
          "{\r\n    name: string;\r\n    elements: string[];\r\n    thematicImplication: string;\r\n  }",
          "{\r\n    chapter: number;\r\n    occurrenceCount: number;\r\n    significance: number;\r\n    examples: string[];\r\n    usage: string;\r\n    meaning: string;\r\n  }"
        ],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": []
      },
      "lib\\analysis\\enhancement\\character\\interfaces.ts": {
        "filePath": "lib\\analysis\\enhancement\\character\\interfaces.ts",
        "fileSize": 6083,
        "system": "analysis",
        "module": "analysis/enhancement/character",
        "interfaces": {
          "DepthRecommendation": {
            "name": "DepthRecommendation",
            "body": "type: 'consistency' | 'arc' | 'motivation' | 'relationship' | 'contrast' | 'genre'; // 推奨タイプ\r\n    title: string;       // 推奨タイトル\r\n    description: string; // 詳細説明\r\n    implementation: string; // 実装方法のヒント\r\n    priority: number;    // 優先度 (0-1)",
            "properties": {
              "type": {
                "name": "type",
                "type": "'consistency' | 'arc' | 'motivation' | 'relationship' | 'contrast' | 'genre'",
                "optional": false
              },
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "implementation": {
                "name": "implementation",
                "type": "string",
                "optional": false
              },
              "priority": {
                "name": "priority",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 13
          },
          "CharacterArcRecommendation": {
            "name": "CharacterArcRecommendation",
            "body": "title: string;       // 推奨タイトル\r\n    description: string; // 詳細説明\r\n    suggestion: string;  // 具体的な提案\r\n    arcPhase: string;    // アークフェーズ\r\n    importance: number;  // 重要度 (0-1)",
            "properties": {
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "suggestion": {
                "name": "suggestion",
                "type": "string",
                "optional": false
              },
              "arcPhase": {
                "name": "arcPhase",
                "type": "string",
                "optional": false
              },
              "importance": {
                "name": "importance",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 24
          },
          "ConsistencyAnalysis": {
            "name": "ConsistencyAnalysis",
            "body": "overallConsistency: number; // 全体的な一貫性スコア (0-1)\r\n    issues: Array<{            // 問題点\r\n        aspect: string;        // 問題のある側面\r\n        description: string;   // 問題の説明",
            "properties": {
              "overallConsistency": {
                "name": "overallConsistency",
                "type": "number",
                "optional": false
              },
              "issues": {
                "name": "issues",
                "type": "Array<{            // 問題点",
                "optional": false
              },
              "aspect": {
                "name": "aspect",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 35
          },
          "MotivationEnhancement": {
            "name": "MotivationEnhancement",
            "body": "title: string;       // 推奨タイトル\r\n    description: string; // 詳細説明\r\n    implementation: string; // 実装方法\r\n    priority: number;    // 優先度 (0-1)",
            "properties": {
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "implementation": {
                "name": "implementation",
                "type": "string",
                "optional": false
              },
              "priority": {
                "name": "priority",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 56
          },
          "RelationshipDynamicRecommendation": {
            "name": "RelationshipDynamicRecommendation",
            "body": "title: string;       // 推奨タイトル\r\n    description: string; // 詳細説明\r\n    implementation: string; // 実装方法\r\n    priority: number;    // 優先度 (0-1)\r\n    targetCharacterId: string | null; // 対象キャラクターID",
            "properties": {
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "implementation": {
                "name": "implementation",
                "type": "string",
                "optional": false
              },
              "priority": {
                "name": "priority",
                "type": "number",
                "optional": false
              },
              "targetCharacterId": {
                "name": "targetCharacterId",
                "type": "string | null",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 66
          },
          "ContrastRecommendation": {
            "name": "ContrastRecommendation",
            "body": "title: string;       // 推奨タイトル\r\n    description: string; // 詳細説明\r\n    implementation: string; // 実装方法\r\n    priority: number;    // 優先度 (0-1)",
            "properties": {
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "implementation": {
                "name": "implementation",
                "type": "string",
                "optional": false
              },
              "priority": {
                "name": "priority",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 77
          },
          "CharacterDepthPrompt": {
            "name": "CharacterDepthPrompt",
            "body": "characterId: string;      // キャラクターID\r\n    characterName: string;    // キャラクター名\r\n    focusAreas: string;       // 焦点を当てるべき領域\r\n    implementationSuggestions: string; // 実装提案\r\n    psychologicalInsight: string; // 心理的洞察",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "characterName": {
                "name": "characterName",
                "type": "string",
                "optional": false
              },
              "focusAreas": {
                "name": "focusAreas",
                "type": "string",
                "optional": false
              },
              "implementationSuggestions": {
                "name": "implementationSuggestions",
                "type": "string",
                "optional": false
              },
              "psychologicalInsight": {
                "name": "psychologicalInsight",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 87
          },
          "ICharacterDepthService": {
            "name": "ICharacterDepthService",
            "body": "/**\r\n     * キャラクター深化推奨の生成\r\n     * キャラクターの心理分析に基づく深化推奨を生成します\r\n     * \r\n     * @param character キャラクター\r\n     * @param psychology キャラクター心理情報\r\n     * @param chapterNumber 章番号（コンテキスト用）\r\n     * @returns 深化推奨の配列\r\n     */\r\n    generateDepthRecommendations(\r\n        character: Character, \r\n        psychology: CharacterPsychology, \r\n        chapterNumber: number\r\n    ): Promise<DepthRecommendation[]>;\r\n    \r\n    /**\r\n     * キャラクターの一貫性分析\r\n     * 心理プロファイルや履歴に基づいて一貫性を評価します\r\n     * \r\n     * @param character キャラクター\r\n     * @param psychology 心理情報\r\n     * @param chapterNumber 現在の章番号\r\n     * @returns 一貫性分析結果\r\n     */\r\n    analyzeCharacterConsistency(\r\n        character: Character, \r\n        psychology: CharacterPsychology,\r\n        chapterNumber: number\r\n    ): Promise<ConsistencyAnalysis>;\r\n    \r\n    /**\r\n     * キャラクターの動機付け強化推奨\r\n     * キャラクターの動機の深化と説得力向上を図る\r\n     * \r\n     * @param character キャラクター\r\n     * @param psychology 心理情報\r\n     * @returns 動機強化推奨\r\n     */\r\n    enhanceCharacterMotivations(\r\n        character: Character, \r\n        psychology: CharacterPsychology\r\n    ): Promise<MotivationEnhancement[]>;\r\n    \r\n    /**\r\n     * キャラクターアークの最適化推奨\r\n     * 現在のストーリー位置でのキャラクター成長を最適化\r\n     * \r\n     * @param character キャラクター\r\n     * @param psychology 心理情報\r\n     * @param chapterNumber 章番号\r\n     * @returns アーク最適化推奨\r\n     */\r\n    optimizeCharacterArcs(\r\n        character: Character, \r\n        psychology: CharacterPsychology,\r\n        chapterNumber: number\r\n    ): Promise<CharacterArcRecommendation[]>;\r\n    \r\n    /**\r\n     * 関係性ダイナミクス推奨の生成\r\n     * キャラクター間の関係性を深化・最適化する推奨\r\n     * \r\n     * @param character キャラクター\r\n     * @param chapterNumber 章番号\r\n     * @returns 関係性推奨\r\n     */\r\n    suggestRelationshipDynamics(\r\n        character: Character,\r\n        chapterNumber: number\r\n    ): Promise<RelationshipDynamicRecommendation[]>;\r\n    \r\n    /**\r\n     * コントラスト推奨の生成\r\n     * キャラクターの独自性を際立たせる推奨\r\n     * \r\n     * @param character キャラクター\r\n     * @param chapterNumber 章番号\r\n     * @returns コントラスト推奨\r\n     */\r\n    generateContrastRecommendations(\r\n        character: Character,\r\n        chapterNumber: number\r\n    ): Promise<ContrastRecommendation[]>;\r\n    \r\n    /**\r\n     * 複数キャラクターの深化推奨生成\r\n     * 同一章に登場する複数キャラクターの深化推奨\r\n     * \r\n     * @param characters キャラクター配列\r\n     * @param chapterNumber 章番号\r\n     * @param limit 最大推奨数\r\n     * @returns キャラクターIDごとの深化推奨\r\n     */\r\n    generateMultipleCharacterRecommendations(\r\n        characters: Character[],\r\n        chapterNumber: number,\r\n        limit?: number\r\n    ): Promise<{[characterId: string]: DepthRecommendation[]",
            "properties": {
              "character": {
                "name": "character",
                "type": "Character",
                "optional": false
              },
              "psychology": {
                "name": "psychology",
                "type": "CharacterPsychology",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "characters": {
                "name": "characters",
                "type": "Character[]",
                "optional": false
              },
              "limit": {
                "name": "limit",
                "type": "number",
                "optional": true
              },
              "characterId": {
                "name": "characterId",
                "type": "string]: DepthRecommendation[]",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 98
          }
        },
        "types": {},
        "enums": {},
        "imports": [
          {
            "types": [
              "Character",
              "CharacterPsychology"
            ],
            "source": "@/lib/characters/core/types",
            "isTypeOnly": true
          }
        ],
        "exports": [
          "DepthRecommendation",
          "CharacterArcRecommendation",
          "ConsistencyAnalysis",
          "MotivationEnhancement",
          "RelationshipDynamicRecommendation",
          "ContrastRecommendation",
          "CharacterDepthPrompt",
          "ICharacterDepthService"
        ],
        "inlineTypes": [],
        "generics": [
          "{            // 問題点\r\n        aspect: string;        // 問題のある側面\r\n        description: string;   // 問題の説明\r\n    }",
          "{         // 強み\r\n        aspect: string;        // 強みのある側面\r\n        description: string;   // 強みの説明\r\n    }",
          "{   // 推奨事項\r\n        title: string;         // 推奨タイトル\r\n        description: string;   // 詳細説明\r\n        implementation: string; // 実装方法\r\n        severity: string;      // 重要度 ('high', 'medium', 'low')\r\n    }",
          "DepthRecommendation[]",
          "ConsistencyAnalysis",
          "MotivationEnhancement[]",
          "CharacterArcRecommendation[]",
          "RelationshipDynamicRecommendation[]",
          "ContrastRecommendation[]",
          "{[characterId: string]: DepthRecommendation[]}",
          "CharacterDepthPrompt | null",
          "string[]"
        ],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": [
          {
            "name": "ICharacterDepthService",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "ICharacterDepthService",
              "body": "/**\r\n     * キャラクター深化推奨の生成\r\n     * キャラクターの心理分析に基づく深化推奨を生成します\r\n     * \r\n     * @param character キャラクター\r\n     * @param psychology キャラクター心理情報\r\n     * @param chapterNumber 章番号（コンテキスト用）\r\n     * @returns 深化推奨の配列\r\n     */\r\n    generateDepthRecommendations(\r\n        character: Character, \r\n        psychology: CharacterPsychology, \r\n        chapterNumber: number\r\n    ): Promise<DepthRecommendation[]>;\r\n    \r\n    /**\r\n     * キャラクターの一貫性分析\r\n     * 心理プロファイルや履歴に基づいて一貫性を評価します\r\n     * \r\n     * @param character キャラクター\r\n     * @param psychology 心理情報\r\n     * @param chapterNumber 現在の章番号\r\n     * @returns 一貫性分析結果\r\n     */\r\n    analyzeCharacterConsistency(\r\n        character: Character, \r\n        psychology: CharacterPsychology,\r\n        chapterNumber: number\r\n    ): Promise<ConsistencyAnalysis>;\r\n    \r\n    /**\r\n     * キャラクターの動機付け強化推奨\r\n     * キャラクターの動機の深化と説得力向上を図る\r\n     * \r\n     * @param character キャラクター\r\n     * @param psychology 心理情報\r\n     * @returns 動機強化推奨\r\n     */\r\n    enhanceCharacterMotivations(\r\n        character: Character, \r\n        psychology: CharacterPsychology\r\n    ): Promise<MotivationEnhancement[]>;\r\n    \r\n    /**\r\n     * キャラクターアークの最適化推奨\r\n     * 現在のストーリー位置でのキャラクター成長を最適化\r\n     * \r\n     * @param character キャラクター\r\n     * @param psychology 心理情報\r\n     * @param chapterNumber 章番号\r\n     * @returns アーク最適化推奨\r\n     */\r\n    optimizeCharacterArcs(\r\n        character: Character, \r\n        psychology: CharacterPsychology,\r\n        chapterNumber: number\r\n    ): Promise<CharacterArcRecommendation[]>;\r\n    \r\n    /**\r\n     * 関係性ダイナミクス推奨の生成\r\n     * キャラクター間の関係性を深化・最適化する推奨\r\n     * \r\n     * @param character キャラクター\r\n     * @param chapterNumber 章番号\r\n     * @returns 関係性推奨\r\n     */\r\n    suggestRelationshipDynamics(\r\n        character: Character,\r\n        chapterNumber: number\r\n    ): Promise<RelationshipDynamicRecommendation[]>;\r\n    \r\n    /**\r\n     * コントラスト推奨の生成\r\n     * キャラクターの独自性を際立たせる推奨\r\n     * \r\n     * @param character キャラクター\r\n     * @param chapterNumber 章番号\r\n     * @returns コントラスト推奨\r\n     */\r\n    generateContrastRecommendations(\r\n        character: Character,\r\n        chapterNumber: number\r\n    ): Promise<ContrastRecommendation[]>;\r\n    \r\n    /**\r\n     * 複数キャラクターの深化推奨生成\r\n     * 同一章に登場する複数キャラクターの深化推奨\r\n     * \r\n     * @param characters キャラクター配列\r\n     * @param chapterNumber 章番号\r\n     * @param limit 最大推奨数\r\n     * @returns キャラクターIDごとの深化推奨\r\n     */\r\n    generateMultipleCharacterRecommendations(\r\n        characters: Character[],\r\n        chapterNumber: number,\r\n        limit?: number\r\n    ): Promise<{[characterId: string]: DepthRecommendation[]",
              "properties": {
                "character": {
                  "name": "character",
                  "type": "Character",
                  "optional": false
                },
                "psychology": {
                  "name": "psychology",
                  "type": "CharacterPsychology",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "characters": {
                  "name": "characters",
                  "type": "Character[]",
                  "optional": false
                },
                "limit": {
                  "name": "limit",
                  "type": "number",
                  "optional": true
                },
                "characterId": {
                  "name": "characterId",
                  "type": "string]: DepthRecommendation[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 98
            }
          }
        ]
      },
      "lib\\analysis\\enhancement\\style\\interfaces.ts": {
        "filePath": "lib\\analysis\\enhancement\\style\\interfaces.ts",
        "fileSize": 5186,
        "system": "analysis",
        "module": "analysis/enhancement/style",
        "interfaces": {
          "SubjectPatternOptimizationRequest": {
            "name": "SubjectPatternOptimizationRequest",
            "body": "/** 繰り返されている主語のパターン */\r\n  repeatedSubjects: Array<{\r\n    /** 主語 */\r\n    subject: string;\r\n    /** 繰り返し回数 */\r\n    count: number;",
            "properties": {
              "repeatedSubjects": {
                "name": "repeatedSubjects",
                "type": "Array<{",
                "optional": false
              },
              "subject": {
                "name": "subject",
                "type": "string",
                "optional": false
              },
              "count": {
                "name": "count",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 26
          },
          "IStyleOptimizationService": {
            "name": "IStyleOptimizationService",
            "body": "/**\r\n   * 文体ガイダンス生成\r\n   * 文体改善のためのガイダンスを生成します\r\n   * \r\n   * @param chapterNumber 章番号\r\n   * @param context コンテキスト情報（ジャンル、テーマなど）\r\n   * @returns 文体ガイダンス\r\n   */\r\n  generateStyleGuidance(\r\n    chapterNumber: number,\r\n    context: any\r\n  ): Promise<StyleGuidance>;\r\n\r\n  /**\r\n   * 代替表現提案\r\n   * 繰り返しを避けるための代替表現を提案します\r\n   * \r\n   * @param expressionPatterns 表現パターン分析結果\r\n   * @param context コンテキスト情報（ジャンル、テーマなど）\r\n   * @returns 代替表現提案\r\n   */\r\n  suggestAlternativeExpressions(\r\n    expressionPatterns: ExpressionPatterns,\r\n    context: any\r\n  ): Promise<ExpressionAlternatives>;\r\n\r\n  /**\r\n   * 主語パターン最適化提案\r\n   * 主語の使用パターンを最適化するための提案を生成します\r\n   * \r\n   * @param subjectPatterns 主語パターン分析結果\r\n   * @param context コンテキスト情報\r\n   * @returns 主語パターン最適化提案\r\n   */\r\n  optimizeSubjectPatterns(\r\n    subjectPatterns: SubjectPatternOptimizationRequest,\r\n    context: any\r\n  ): Promise<SubjectPatternOptimization>;\r\n\r\n  /**\r\n   * 文構造の改善提案を生成\r\n   * 文の構造を改善するための提案を生成します\r\n   * \r\n   * @param styleAnalysis 文体分析結果\r\n   * @param context コンテキスト情報\r\n   * @returns 文構造改善提案\r\n   */\r\n  generateStructureRecommendations(\r\n    styleAnalysis: StyleAnalysis,\r\n    context: any\r\n  ): Promise<StructureRecommendation[]>;\r\n\r\n  /**\r\n   * 繰り返し表現の代替提案を生成\r\n   * 繰り返し使用されている表現の代替案を提案します\r\n   * \r\n   * @param repetitions 繰り返し表現のリスト\r\n   * @param context コンテキスト情報\r\n   * @returns 繰り返し表現の代替提案\r\n   */\r\n  generateRepetitionAlternatives(\r\n    repetitions: string[],\r\n    context: any\r\n  ): Promise<RepetitionAlternative[]>;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "context": {
                "name": "context",
                "type": "any",
                "optional": false
              },
              "expressionPatterns": {
                "name": "expressionPatterns",
                "type": "ExpressionPatterns",
                "optional": false
              },
              "subjectPatterns": {
                "name": "subjectPatterns",
                "type": "SubjectPatternOptimizationRequest",
                "optional": false
              },
              "styleAnalysis": {
                "name": "styleAnalysis",
                "type": "StyleAnalysis",
                "optional": false
              },
              "repetitions": {
                "name": "repetitions",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 44
          },
          "StyleOptimizationContext": {
            "name": "StyleOptimizationContext",
            "body": "/** ジャンル */\r\n  genre?: string;\r\n  /** テーマ */\r\n  theme?: string;\r\n  /** テンション値（0-1） */\r\n  tension?: number;\r\n  /** ペーシング値（0-1） */\r\n  pacing?: number;\r\n  /** ターゲット読者層 */\r\n  targetAudience?: string;\r\n  /** 文体の方向性 */\r\n  styleDirection?: 'formal' | 'casual' | 'literary' | 'commercial';\r\n  /** 追加の制約やガイドライン */\r\n  constraints?: string[];",
            "properties": {
              "genre": {
                "name": "genre",
                "type": "string",
                "optional": true
              },
              "theme": {
                "name": "theme",
                "type": "string",
                "optional": true
              },
              "tension": {
                "name": "tension",
                "type": "number",
                "optional": true
              },
              "pacing": {
                "name": "pacing",
                "type": "number",
                "optional": true
              },
              "targetAudience": {
                "name": "targetAudience",
                "type": "string",
                "optional": true
              },
              "styleDirection": {
                "name": "styleDirection",
                "type": "'formal' | 'casual' | 'literary' | 'commercial'",
                "optional": true
              },
              "constraints": {
                "name": "constraints",
                "type": "string[]",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 114
          },
          "StyleOptimizationOptions": {
            "name": "StyleOptimizationOptions",
            "body": "/** AI分析を使用するかどうか */\r\n  useAIAnalysis?: boolean;\r\n  /** 詳細レベル（1-3、高いほど詳細） */\r\n  detailLevel?: number;\r\n  /** キャッシュを使用するかどうか */\r\n  useCache?: boolean;\r\n  /** 最大提案数 */\r\n  maxSuggestions?: number;\r\n  /** 分析対象となる最小文字数 */\r\n  minContentLength?: number;",
            "properties": {
              "useAIAnalysis": {
                "name": "useAIAnalysis",
                "type": "boolean",
                "optional": true
              },
              "detailLevel": {
                "name": "detailLevel",
                "type": "number",
                "optional": true
              },
              "useCache": {
                "name": "useCache",
                "type": "boolean",
                "optional": true
              },
              "maxSuggestions": {
                "name": "maxSuggestions",
                "type": "number",
                "optional": true
              },
              "minContentLength": {
                "name": "minContentLength",
                "type": "number",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 134
          },
          "StyleOptimizationResult": {
            "name": "StyleOptimizationResult",
            "body": "/** 文体ガイダンス */\r\n  styleGuidance?: StyleGuidance;\r\n  /** 代替表現提案 */\r\n  expressionAlternatives?: ExpressionAlternatives;\r\n  /** 主語パターン最適化 */\r\n  subjectOptimization?: SubjectPatternOptimization;\r\n  /** 文構造改善提案 */\r\n  structureRecommendations?: StructureRecommendation[];\r\n  /** 繰り返し表現代替案 */\r\n  repetitionAlternatives?: RepetitionAlternative[];\r\n  /** 処理にかかった時間（ミリ秒） */\r\n  processingTime?: number;\r\n  /** 使用されたキャッシュ数 */\r\n  cacheHits?: number;",
            "properties": {
              "styleGuidance": {
                "name": "styleGuidance",
                "type": "StyleGuidance",
                "optional": true
              },
              "expressionAlternatives": {
                "name": "expressionAlternatives",
                "type": "ExpressionAlternatives",
                "optional": true
              },
              "subjectOptimization": {
                "name": "subjectOptimization",
                "type": "SubjectPatternOptimization",
                "optional": true
              },
              "structureRecommendations": {
                "name": "structureRecommendations",
                "type": "StructureRecommendation[]",
                "optional": true
              },
              "repetitionAlternatives": {
                "name": "repetitionAlternatives",
                "type": "RepetitionAlternative[]",
                "optional": true
              },
              "processingTime": {
                "name": "processingTime",
                "type": "number",
                "optional": true
              },
              "cacheHits": {
                "name": "cacheHits",
                "type": "number",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 150
          },
          "BulkOptimizationRequest": {
            "name": "BulkOptimizationRequest",
            "body": "/** 章番号 */\r\n  chapterNumber: number;\r\n  /** 文体分析結果 */\r\n  styleAnalysis: StyleAnalysis;\r\n  /** 表現パターン */\r\n  expressionPatterns: ExpressionPatterns;\r\n  /** 主語パターン分析結果 */\r\n  subjectPatterns: SubjectPatternOptimizationRequest;\r\n  /** 繰り返し表現リスト */\r\n  repetitions: string[];\r\n  /** コンテキスト情報 */\r\n  context: StyleOptimizationContext;\r\n  /** オプション */\r\n  options?: StyleOptimizationOptions;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "styleAnalysis": {
                "name": "styleAnalysis",
                "type": "StyleAnalysis",
                "optional": false
              },
              "expressionPatterns": {
                "name": "expressionPatterns",
                "type": "ExpressionPatterns",
                "optional": false
              },
              "subjectPatterns": {
                "name": "subjectPatterns",
                "type": "SubjectPatternOptimizationRequest",
                "optional": false
              },
              "repetitions": {
                "name": "repetitions",
                "type": "string[]",
                "optional": false
              },
              "context": {
                "name": "context",
                "type": "StyleOptimizationContext",
                "optional": false
              },
              "options": {
                "name": "options",
                "type": "StyleOptimizationOptions",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 170
          },
          "IStyleOptimizationServiceExtended": {
            "name": "IStyleOptimizationServiceExtended",
            "body": "/**\r\n   * 一括最適化処理\r\n   * 複数の最適化機能を一度に実行します\r\n   * \r\n   * @param request 一括最適化リクエスト\r\n   * @returns 最適化結果\r\n   */\r\n  bulkOptimize?(request: BulkOptimizationRequest): Promise<StyleOptimizationResult>;\r\n\r\n  /**\r\n   * 最適化履歴の取得\r\n   * 過去の最適化結果を取得します\r\n   * \r\n   * @param chapterNumber 章番号\r\n   * @param limit 取得件数制限\r\n   * @returns 最適化履歴\r\n   */\r\n  getOptimizationHistory?(chapterNumber: number, limit?: number): Promise<StyleOptimizationResult[]>;\r\n\r\n  /**\r\n   * キャッシュのクリア\r\n   * 指定した章または全体のキャッシュを削除します\r\n   * \r\n   * @param chapterNumber 章番号（省略時は全体）\r\n   */\r\n  clearCache?(chapterNumber?: number): Promise<void>;\r\n\r\n  /**\r\n   * サービスの健全性チェック\r\n   * サービスが正常に動作しているかチェックします\r\n   * \r\n   * @returns 健全性チェック結果\r\n   */\r\n  healthCheck?(): Promise<{\r\n    status: 'healthy' | 'degraded' | 'unhealthy';\r\n    details: {\r\n      cacheStatus: string;\r\n      aiServiceStatus: string;\r\n      lastOptimizationTime?: number;",
            "properties": {
              "request": {
                "name": "request",
                "type": "BulkOptimizationRequest): Promise<StyleOptimizationResult>",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number): Promise<void>",
                "optional": true
              },
              "limit": {
                "name": "limit",
                "type": "number): Promise<StyleOptimizationResult[]>",
                "optional": true
              },
              "status": {
                "name": "status",
                "type": "'healthy' | 'degraded' | 'unhealthy'",
                "optional": false
              },
              "details": {
                "name": "details",
                "type": "{",
                "optional": false
              },
              "cacheStatus": {
                "name": "cacheStatus",
                "type": "string",
                "optional": false
              },
              "aiServiceStatus": {
                "name": "aiServiceStatus",
                "type": "string",
                "optional": false
              },
              "lastOptimizationTime": {
                "name": "lastOptimizationTime",
                "type": "number",
                "optional": true
              }
            },
            "isGeneric": true,
            "extendsOther": true,
            "lineNumber": 190
          }
        },
        "types": {},
        "enums": {},
        "imports": [
          {
            "types": [
              "StyleGuidance",
              "ExpressionAlternatives",
              "StyleAnalysis",
              "ExpressionPatterns"
            ],
            "source": "@/types/generation",
            "isTypeOnly": true
          },
          {
            "types": [
              "SubjectPatternOptimization",
              "StructureRecommendation",
              "RepetitionAlternative"
            ],
            "source": "@/lib/analysis/core/types",
            "isTypeOnly": true
          }
        ],
        "exports": [
          "SubjectPatternOptimizationRequest",
          "IStyleOptimizationService",
          "StyleOptimizationContext",
          "StyleOptimizationOptions",
          "StyleOptimizationResult",
          "BulkOptimizationRequest",
          "IStyleOptimizationServiceExtended"
        ],
        "inlineTypes": [
          {
            "definition": ": {\r\n      cacheStatus: string;\r\n      aiServiceStatus: string;\r\n      lastOptimizationTime?: number;\r\n    }",
            "lineNumber": 226
          }
        ],
        "generics": [
          "{\r\n    /** 主語 */\r\n    subject: string;\r\n    /** 繰り返し回数 */\r\n    count: number;\r\n  }",
          "StyleGuidance",
          "ExpressionAlternatives",
          "SubjectPatternOptimization",
          "StructureRecommendation[]",
          "RepetitionAlternative[]",
          "StyleOptimizationResult",
          "StyleOptimizationResult[]",
          "void",
          "{\r\n    status: 'healthy' | 'degraded' | 'unhealthy';\r\n    details: {\r\n      cacheStatus: string;\r\n      aiServiceStatus: string;\r\n      lastOptimizationTime?: number;\r\n    };\r\n  }"
        ],
        "extendedTypes": [
          "IStyleOptimizationService"
        ],
        "dataModelTypes": [],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": [
          {
            "name": "IStyleOptimizationService",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "IStyleOptimizationService",
              "body": "/**\r\n   * 文体ガイダンス生成\r\n   * 文体改善のためのガイダンスを生成します\r\n   * \r\n   * @param chapterNumber 章番号\r\n   * @param context コンテキスト情報（ジャンル、テーマなど）\r\n   * @returns 文体ガイダンス\r\n   */\r\n  generateStyleGuidance(\r\n    chapterNumber: number,\r\n    context: any\r\n  ): Promise<StyleGuidance>;\r\n\r\n  /**\r\n   * 代替表現提案\r\n   * 繰り返しを避けるための代替表現を提案します\r\n   * \r\n   * @param expressionPatterns 表現パターン分析結果\r\n   * @param context コンテキスト情報（ジャンル、テーマなど）\r\n   * @returns 代替表現提案\r\n   */\r\n  suggestAlternativeExpressions(\r\n    expressionPatterns: ExpressionPatterns,\r\n    context: any\r\n  ): Promise<ExpressionAlternatives>;\r\n\r\n  /**\r\n   * 主語パターン最適化提案\r\n   * 主語の使用パターンを最適化するための提案を生成します\r\n   * \r\n   * @param subjectPatterns 主語パターン分析結果\r\n   * @param context コンテキスト情報\r\n   * @returns 主語パターン最適化提案\r\n   */\r\n  optimizeSubjectPatterns(\r\n    subjectPatterns: SubjectPatternOptimizationRequest,\r\n    context: any\r\n  ): Promise<SubjectPatternOptimization>;\r\n\r\n  /**\r\n   * 文構造の改善提案を生成\r\n   * 文の構造を改善するための提案を生成します\r\n   * \r\n   * @param styleAnalysis 文体分析結果\r\n   * @param context コンテキスト情報\r\n   * @returns 文構造改善提案\r\n   */\r\n  generateStructureRecommendations(\r\n    styleAnalysis: StyleAnalysis,\r\n    context: any\r\n  ): Promise<StructureRecommendation[]>;\r\n\r\n  /**\r\n   * 繰り返し表現の代替提案を生成\r\n   * 繰り返し使用されている表現の代替案を提案します\r\n   * \r\n   * @param repetitions 繰り返し表現のリスト\r\n   * @param context コンテキスト情報\r\n   * @returns 繰り返し表現の代替提案\r\n   */\r\n  generateRepetitionAlternatives(\r\n    repetitions: string[],\r\n    context: any\r\n  ): Promise<RepetitionAlternative[]>;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "any",
                  "optional": false
                },
                "expressionPatterns": {
                  "name": "expressionPatterns",
                  "type": "ExpressionPatterns",
                  "optional": false
                },
                "subjectPatterns": {
                  "name": "subjectPatterns",
                  "type": "SubjectPatternOptimizationRequest",
                  "optional": false
                },
                "styleAnalysis": {
                  "name": "styleAnalysis",
                  "type": "StyleAnalysis",
                  "optional": false
                },
                "repetitions": {
                  "name": "repetitions",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 44
            }
          },
          {
            "name": "IStyleOptimizationServiceExtended",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "IStyleOptimizationServiceExtended",
              "body": "/**\r\n   * 一括最適化処理\r\n   * 複数の最適化機能を一度に実行します\r\n   * \r\n   * @param request 一括最適化リクエスト\r\n   * @returns 最適化結果\r\n   */\r\n  bulkOptimize?(request: BulkOptimizationRequest): Promise<StyleOptimizationResult>;\r\n\r\n  /**\r\n   * 最適化履歴の取得\r\n   * 過去の最適化結果を取得します\r\n   * \r\n   * @param chapterNumber 章番号\r\n   * @param limit 取得件数制限\r\n   * @returns 最適化履歴\r\n   */\r\n  getOptimizationHistory?(chapterNumber: number, limit?: number): Promise<StyleOptimizationResult[]>;\r\n\r\n  /**\r\n   * キャッシュのクリア\r\n   * 指定した章または全体のキャッシュを削除します\r\n   * \r\n   * @param chapterNumber 章番号（省略時は全体）\r\n   */\r\n  clearCache?(chapterNumber?: number): Promise<void>;\r\n\r\n  /**\r\n   * サービスの健全性チェック\r\n   * サービスが正常に動作しているかチェックします\r\n   * \r\n   * @returns 健全性チェック結果\r\n   */\r\n  healthCheck?(): Promise<{\r\n    status: 'healthy' | 'degraded' | 'unhealthy';\r\n    details: {\r\n      cacheStatus: string;\r\n      aiServiceStatus: string;\r\n      lastOptimizationTime?: number;",
              "properties": {
                "request": {
                  "name": "request",
                  "type": "BulkOptimizationRequest): Promise<StyleOptimizationResult>",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number): Promise<void>",
                  "optional": true
                },
                "limit": {
                  "name": "limit",
                  "type": "number): Promise<StyleOptimizationResult[]>",
                  "optional": true
                },
                "status": {
                  "name": "status",
                  "type": "'healthy' | 'degraded' | 'unhealthy'",
                  "optional": false
                },
                "details": {
                  "name": "details",
                  "type": "{",
                  "optional": false
                },
                "cacheStatus": {
                  "name": "cacheStatus",
                  "type": "string",
                  "optional": false
                },
                "aiServiceStatus": {
                  "name": "aiServiceStatus",
                  "type": "string",
                  "optional": false
                },
                "lastOptimizationTime": {
                  "name": "lastOptimizationTime",
                  "type": "number",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 190
            }
          }
        ]
      },
      "lib\\analysis\\enhancement\\tension\\interfaces.ts": {
        "filePath": "lib\\analysis\\enhancement\\tension\\interfaces.ts",
        "fileSize": 2590,
        "system": "analysis",
        "module": "analysis/enhancement/tension",
        "interfaces": {
          "TensionRecommendation": {
            "name": "TensionRecommendation",
            "body": "/** 推奨テンション値 (0-1) */\r\n  recommendedTension: number;\r\n  /** 推奨理由 */\r\n  reason: string;\r\n  /** 方向性 */\r\n  direction: \"increase\" | \"decrease\" | \"maintain\" | \"establish\";",
            "properties": {
              "recommendedTension": {
                "name": "recommendedTension",
                "type": "number",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": false
              },
              "direction": {
                "name": "direction",
                "type": "\"increase\" | \"decrease\" | \"maintain\" | \"establish\"",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 11
          },
          "PacingRecommendation": {
            "name": "PacingRecommendation",
            "body": "/** 推奨ペーシング値 (0-1) */\r\n  recommendedPacing: number;\r\n  /** 説明 */\r\n  description: string;",
            "properties": {
              "recommendedPacing": {
                "name": "recommendedPacing",
                "type": "number",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 23
          },
          "TensionPacingRecommendation": {
            "name": "TensionPacingRecommendation",
            "body": "/** テンション推奨 */\r\n  tension: TensionRecommendation;\r\n  /** ペーシング推奨 */\r\n  pacing: PacingRecommendation;",
            "properties": {
              "tension": {
                "name": "tension",
                "type": "TensionRecommendation",
                "optional": false
              },
              "pacing": {
                "name": "pacing",
                "type": "PacingRecommendation",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 33
          },
          "StoryEvent": {
            "name": "StoryEvent",
            "body": "/** イベントタイプ */\r\n  type: string;\r\n  /** 重要度 (0-1) */\r\n  significance: number;\r\n  /** 追加情報 */\r\n  details?: any;",
            "properties": {
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "significance": {
                "name": "significance",
                "type": "number",
                "optional": false
              },
              "details": {
                "name": "details",
                "type": "any",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 43
          },
          "TensionCurvePoint": {
            "name": "TensionCurvePoint",
            "body": "/** 章番号 */\r\n  chapterNumber: number;\r\n  /** テンション値 (0-1) */\r\n  tension: number;\r\n  /** 説明 */\r\n  description?: string;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "tension": {
                "name": "tension",
                "type": "number",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 55
          },
          "NarrativeArcInfo": {
            "name": "NarrativeArcInfo",
            "body": "/** 現在のアーク番号 */\r\n  currentArcNumber: number;\r\n  /** アークの開始章 */\r\n  arcStartChapter: number;\r\n  /** アークの終了章（予測） */\r\n  arcEndChapter: number;\r\n  /** アーク内での位置 (0-1) */\r\n  positionInArc: number;\r\n  /** アークのテーマ */\r\n  arcTheme?: string;",
            "properties": {
              "currentArcNumber": {
                "name": "currentArcNumber",
                "type": "number",
                "optional": false
              },
              "arcStartChapter": {
                "name": "arcStartChapter",
                "type": "number",
                "optional": false
              },
              "arcEndChapter": {
                "name": "arcEndChapter",
                "type": "number",
                "optional": false
              },
              "positionInArc": {
                "name": "positionInArc",
                "type": "number",
                "optional": false
              },
              "arcTheme": {
                "name": "arcTheme",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 67
          },
          "ITensionOptimizationService": {
            "name": "ITensionOptimizationService",
            "body": "/**\r\n   * サービスの初期化\r\n   */\r\n  initialize(): Promise<void>;\r\n  \r\n  /**\r\n   * テンション・ペーシング推奨を取得\r\n   * @param chapterNumber 章番号\r\n   * @param genre ジャンル（オプショナル）\r\n   * @param options 追加オプション（オプショナル）\r\n   */\r\n  getTensionPacingRecommendation(\r\n    chapterNumber: number,\r\n    genre?: string,\r\n    options?: any\r\n  ): Promise<TensionPacingRecommendation>;\r\n  \r\n  /**\r\n   * テンション最適化提案を生成\r\n   * @param chapterNumber 章番号\r\n   * @param currentTension 現在のテンション値\r\n   */\r\n  generateTensionOptimizationSuggestions(\r\n    chapterNumber: number,\r\n    currentTension: number\r\n  ): Promise<string[]>;\r\n  \r\n  /**\r\n   * テンション曲線を生成\r\n   * @param totalChapters 総章数\r\n   * @param genre ジャンル（オプショナル）\r\n   */\r\n  generateTensionCurve(\r\n    totalChapters: number,\r\n    genre?: string\r\n  ): Promise<TensionCurvePoint[]>;\r\n  \r\n  /**\r\n   * クライマックス配置の推奨を取得\r\n   * @param totalChapters 総章数\r\n   * @param genre ジャンル（オプショナル）\r\n   */\r\n  recommendClimax(\r\n    totalChapters: number,\r\n    genre?: string\r\n  ): Promise<{\r\n    climaxChapter: number;\r\n    secondaryClimaxChapters: number[];\r\n    reason: string;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "genre": {
                "name": "genre",
                "type": "string",
                "optional": true
              },
              "options": {
                "name": "options",
                "type": "any",
                "optional": true
              },
              "currentTension": {
                "name": "currentTension",
                "type": "number",
                "optional": false
              },
              "totalChapters": {
                "name": "totalChapters",
                "type": "number",
                "optional": false
              },
              "climaxChapter": {
                "name": "climaxChapter",
                "type": "number",
                "optional": false
              },
              "secondaryClimaxChapters": {
                "name": "secondaryClimaxChapters",
                "type": "number[]",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 83
          }
        },
        "types": {},
        "enums": {},
        "imports": [],
        "exports": [
          "TensionRecommendation",
          "PacingRecommendation",
          "TensionPacingRecommendation",
          "StoryEvent",
          "TensionCurvePoint",
          "NarrativeArcInfo",
          "ITensionOptimizationService"
        ],
        "inlineTypes": [],
        "generics": [
          "void",
          "TensionPacingRecommendation",
          "string[]",
          "TensionCurvePoint[]",
          "{\r\n    climaxChapter: number;\r\n    secondaryClimaxChapters: number[];\r\n    reason: string;\r\n  }"
        ],
        "extendedTypes": [],
        "dataModelTypes": [
          {
            "name": "NarrativeArcInfo",
            "category": "DATA_MODEL",
            "definition": {
              "name": "NarrativeArcInfo",
              "body": "/** 現在のアーク番号 */\r\n  currentArcNumber: number;\r\n  /** アークの開始章 */\r\n  arcStartChapter: number;\r\n  /** アークの終了章（予測） */\r\n  arcEndChapter: number;\r\n  /** アーク内での位置 (0-1) */\r\n  positionInArc: number;\r\n  /** アークのテーマ */\r\n  arcTheme?: string;",
              "properties": {
                "currentArcNumber": {
                  "name": "currentArcNumber",
                  "type": "number",
                  "optional": false
                },
                "arcStartChapter": {
                  "name": "arcStartChapter",
                  "type": "number",
                  "optional": false
                },
                "arcEndChapter": {
                  "name": "arcEndChapter",
                  "type": "number",
                  "optional": false
                },
                "positionInArc": {
                  "name": "positionInArc",
                  "type": "number",
                  "optional": false
                },
                "arcTheme": {
                  "name": "arcTheme",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 67
            }
          }
        ],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": [
          {
            "name": "ITensionOptimizationService",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "ITensionOptimizationService",
              "body": "/**\r\n   * サービスの初期化\r\n   */\r\n  initialize(): Promise<void>;\r\n  \r\n  /**\r\n   * テンション・ペーシング推奨を取得\r\n   * @param chapterNumber 章番号\r\n   * @param genre ジャンル（オプショナル）\r\n   * @param options 追加オプション（オプショナル）\r\n   */\r\n  getTensionPacingRecommendation(\r\n    chapterNumber: number,\r\n    genre?: string,\r\n    options?: any\r\n  ): Promise<TensionPacingRecommendation>;\r\n  \r\n  /**\r\n   * テンション最適化提案を生成\r\n   * @param chapterNumber 章番号\r\n   * @param currentTension 現在のテンション値\r\n   */\r\n  generateTensionOptimizationSuggestions(\r\n    chapterNumber: number,\r\n    currentTension: number\r\n  ): Promise<string[]>;\r\n  \r\n  /**\r\n   * テンション曲線を生成\r\n   * @param totalChapters 総章数\r\n   * @param genre ジャンル（オプショナル）\r\n   */\r\n  generateTensionCurve(\r\n    totalChapters: number,\r\n    genre?: string\r\n  ): Promise<TensionCurvePoint[]>;\r\n  \r\n  /**\r\n   * クライマックス配置の推奨を取得\r\n   * @param totalChapters 総章数\r\n   * @param genre ジャンル（オプショナル）\r\n   */\r\n  recommendClimax(\r\n    totalChapters: number,\r\n    genre?: string\r\n  ): Promise<{\r\n    climaxChapter: number;\r\n    secondaryClimaxChapters: number[];\r\n    reason: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "genre": {
                  "name": "genre",
                  "type": "string",
                  "optional": true
                },
                "options": {
                  "name": "options",
                  "type": "any",
                  "optional": true
                },
                "currentTension": {
                  "name": "currentTension",
                  "type": "number",
                  "optional": false
                },
                "totalChapters": {
                  "name": "totalChapters",
                  "type": "number",
                  "optional": false
                },
                "climaxChapter": {
                  "name": "climaxChapter",
                  "type": "number",
                  "optional": false
                },
                "secondaryClimaxChapters": {
                  "name": "secondaryClimaxChapters",
                  "type": "number[]",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 83
            }
          }
        ]
      },
      "lib\\analysis\\enhancement\\theme\\interfaces.ts": {
        "filePath": "lib\\analysis\\enhancement\\theme\\interfaces.ts",
        "fileSize": 1954,
        "system": "analysis",
        "module": "analysis/enhancement/theme",
        "interfaces": {
          "IThemeEnhancementService": {
            "name": "IThemeEnhancementService",
            "body": "/**\r\n   * 初期化\r\n   */\r\n  initialize(): Promise<void>;\r\n  \r\n  /**\r\n   * テーマ強化提案の生成\r\n   * テーマ分析結果に基づいて、テーマをより効果的に表現するための提案を生成します。\r\n   * \r\n   * @param themeAnalysis テーマ分析結果\r\n   * @param chapterNumber 章番号\r\n   * @param context コンテキスト情報（任意）\r\n   * @returns テーマ強化提案の配列\r\n   */\r\n  generateThemeEnhancements(\r\n    themeAnalysis: ThemeResonanceAnalysis,\r\n    chapterNumber: number,\r\n    context?: any\r\n  ): Promise<ThemeEnhancement[]>;\r\n  \r\n  /**\r\n   * 文学的技法提案の生成\r\n   * 文学的技法の活用提案を生成します。\r\n   * \r\n   * @param context コンテキスト情報\r\n   * @param chapterNumber 章番号\r\n   * @returns 文学的技法提案\r\n   */\r\n  generateLiteraryInspirations(\r\n    context: any,\r\n    chapterNumber: number\r\n  ): Promise<LiteraryInspiration>;\r\n  \r\n  /**\r\n   * 象徴要素の提案生成\r\n   * テーマを強化するための象徴要素を提案します。\r\n   * \r\n   * @param themes テーマ配列\r\n   * @param chapterNumber 章番号\r\n   * @param genre ジャンル\r\n   * @returns 象徴要素の提案\r\n   */\r\n  suggestSymbolicElements(\r\n    themes: string[],\r\n    chapterNumber: number,\r\n    genre?: string\r\n  ): Promise<SymbolicElement[]>;\r\n  \r\n  /**\r\n   * 伏線機会の検出\r\n   * テキスト内の伏線設置機会を検出します。\r\n   * \r\n   * @param content テキスト内容\r\n   * @param chapterNumber 章番号\r\n   * @param themes テーマ配列\r\n   * @returns 伏線機会の配列\r\n   */\r\n  detectForeshadowingOpportunities(\r\n    content: string,\r\n    chapterNumber: number,\r\n    themes: string[]\r\n  ): Promise<ForeshadowingOpportunity[]>;",
            "properties": {
              "themeAnalysis": {
                "name": "themeAnalysis",
                "type": "ThemeResonanceAnalysis",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "context": {
                "name": "context",
                "type": "any",
                "optional": false
              },
              "themes": {
                "name": "themes",
                "type": "string[]",
                "optional": false
              },
              "genre": {
                "name": "genre",
                "type": "string",
                "optional": true
              },
              "content": {
                "name": "content",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 25
          }
        },
        "types": {},
        "enums": {},
        "imports": [
          {
            "types": [
              "ThemeEnhancement",
              "LiteraryInspiration",
              "ThemeResonanceAnalysis",
              "SymbolicElement",
              "ForeshadowingOpportunity"
            ],
            "source": "../../core/types",
            "isTypeOnly": true
          }
        ],
        "exports": [
          "IThemeEnhancementService"
        ],
        "inlineTypes": [],
        "generics": [
          "void",
          "ThemeEnhancement[]",
          "LiteraryInspiration",
          "SymbolicElement[]",
          "ForeshadowingOpportunity[]"
        ],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": [
          {
            "name": "IThemeEnhancementService",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "IThemeEnhancementService",
              "body": "/**\r\n   * 初期化\r\n   */\r\n  initialize(): Promise<void>;\r\n  \r\n  /**\r\n   * テーマ強化提案の生成\r\n   * テーマ分析結果に基づいて、テーマをより効果的に表現するための提案を生成します。\r\n   * \r\n   * @param themeAnalysis テーマ分析結果\r\n   * @param chapterNumber 章番号\r\n   * @param context コンテキスト情報（任意）\r\n   * @returns テーマ強化提案の配列\r\n   */\r\n  generateThemeEnhancements(\r\n    themeAnalysis: ThemeResonanceAnalysis,\r\n    chapterNumber: number,\r\n    context?: any\r\n  ): Promise<ThemeEnhancement[]>;\r\n  \r\n  /**\r\n   * 文学的技法提案の生成\r\n   * 文学的技法の活用提案を生成します。\r\n   * \r\n   * @param context コンテキスト情報\r\n   * @param chapterNumber 章番号\r\n   * @returns 文学的技法提案\r\n   */\r\n  generateLiteraryInspirations(\r\n    context: any,\r\n    chapterNumber: number\r\n  ): Promise<LiteraryInspiration>;\r\n  \r\n  /**\r\n   * 象徴要素の提案生成\r\n   * テーマを強化するための象徴要素を提案します。\r\n   * \r\n   * @param themes テーマ配列\r\n   * @param chapterNumber 章番号\r\n   * @param genre ジャンル\r\n   * @returns 象徴要素の提案\r\n   */\r\n  suggestSymbolicElements(\r\n    themes: string[],\r\n    chapterNumber: number,\r\n    genre?: string\r\n  ): Promise<SymbolicElement[]>;\r\n  \r\n  /**\r\n   * 伏線機会の検出\r\n   * テキスト内の伏線設置機会を検出します。\r\n   * \r\n   * @param content テキスト内容\r\n   * @param chapterNumber 章番号\r\n   * @param themes テーマ配列\r\n   * @returns 伏線機会の配列\r\n   */\r\n  detectForeshadowingOpportunities(\r\n    content: string,\r\n    chapterNumber: number,\r\n    themes: string[]\r\n  ): Promise<ForeshadowingOpportunity[]>;",
              "properties": {
                "themeAnalysis": {
                  "name": "themeAnalysis",
                  "type": "ThemeResonanceAnalysis",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "any",
                  "optional": false
                },
                "themes": {
                  "name": "themes",
                  "type": "string[]",
                  "optional": false
                },
                "genre": {
                  "name": "genre",
                  "type": "string",
                  "optional": true
                },
                "content": {
                  "name": "content",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 25
            }
          }
        ]
      },
      "lib\\analysis\\services\\chapter\\interfaces.ts": {
        "filePath": "lib\\analysis\\services\\chapter\\interfaces.ts",
        "fileSize": 2538,
        "system": "analysis",
        "module": "analysis/services/chapter",
        "interfaces": {
          "IChapterAnalysisService": {
            "name": "IChapterAnalysisService",
            "body": "/**\r\n   * 章の内容を総合的に分析\r\n   * \r\n   * キャラクター登場、テーマ出現、伏線要素、品質メトリクスなどを\r\n   * 包括的に分析します。結果はキャッシュされます。\r\n   * \r\n   * @param {string",
            "properties": {},
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 29
          }
        },
        "types": {},
        "enums": {},
        "imports": [
          {
            "types": [
              "GenerationContext",
              "ChapterAnalysis",
              "CharacterAppearance",
              "ThemeOccurrence",
              "ForeshadowingElement",
              "QualityMetrics",
              "Scene"
            ],
            "source": "@/types/generation",
            "isTypeOnly": true
          }
        ],
        "exports": [
          "IChapterAnalysisService"
        ],
        "inlineTypes": [],
        "generics": [
          "ChapterAnalysis",
          "QualityMetrics",
          "Scene[]",
          "CharacterAppearance[]",
          "string[]"
        ],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": [
          {
            "name": "IChapterAnalysisService",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "IChapterAnalysisService",
              "body": "/**\r\n   * 章の内容を総合的に分析\r\n   * \r\n   * キャラクター登場、テーマ出現、伏線要素、品質メトリクスなどを\r\n   * 包括的に分析します。結果はキャッシュされます。\r\n   * \r\n   * @param {string",
              "properties": {},
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 29
            }
          }
        ]
      },
      "lib\\analysis\\services\\character\\interfaces.ts": {
        "filePath": "lib\\analysis\\services\\character\\interfaces.ts",
        "fileSize": 3391,
        "system": "analysis",
        "module": "analysis/services/character",
        "interfaces": {
          "ICharacterAnalysisService": {
            "name": "ICharacterAnalysisService",
            "body": "/**\r\n   * キャラクターの総合分析\r\n   * キャラクターの現在の状態、変化、関係性を分析します\r\n   * \r\n   * @param {string",
            "properties": {},
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 16
          }
        },
        "types": {},
        "enums": {},
        "imports": [
          {
            "types": [
              "Character",
              "CharacterPsychology",
              "ValidationResult",
              "RelationshipResponse",
              "RelationshipAnalysis"
            ],
            "source": "@/lib/characters/core/types",
            "isTypeOnly": true
          },
          {
            "types": [
              "CharacterAppearance"
            ],
            "source": "@/types/generation",
            "isTypeOnly": true
          },
          {
            "types": [
              "Chapter"
            ],
            "source": "@/types/chapters",
            "isTypeOnly": true
          }
        ],
        "exports": [
          "ICharacterAnalysisService"
        ],
        "inlineTypes": [],
        "generics": [
          "any",
          "CharacterPsychology | null",
          "{[id: string]: CharacterPsychology}",
          "RelationshipResponse",
          "RelationshipAnalysis",
          "Character[]",
          "ValidationResult",
          "string[]",
          "CharacterAppearance[]"
        ],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": [
          {
            "name": "ICharacterAnalysisService",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "ICharacterAnalysisService",
              "body": "/**\r\n   * キャラクターの総合分析\r\n   * キャラクターの現在の状態、変化、関係性を分析します\r\n   * \r\n   * @param {string",
              "properties": {},
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 16
            }
          }
        ]
      },
      "lib\\analysis\\services\\narrative\\interfaces.ts": {
        "filePath": "lib\\analysis\\services\\narrative\\interfaces.ts",
        "fileSize": 4860,
        "system": "analysis",
        "module": "analysis/services/narrative",
        "interfaces": {
          "GenerationContext": {
            "name": "GenerationContext",
            "body": "/** 世界設定 */\n  worldSettings?: string;\n  /** 章番号 */\n  chapterNumber: number;\n  /** 総章数 */\n  totalChapters?: number;\n  /** ジャンル */\n  genre?: string;\n  /** その他の任意のプロパティ */\n  [key: string]: any;",
            "properties": {
              "worldSettings": {
                "name": "worldSettings",
                "type": "string",
                "optional": true
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "totalChapters": {
                "name": "totalChapters",
                "type": "number",
                "optional": true
              },
              "genre": {
                "name": "genre",
                "type": "string",
                "optional": true
              },
              "key": {
                "name": "key",
                "type": "string]: any",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 29
          },
          "NarrativeAnalysisOptions": {
            "name": "NarrativeAnalysisOptions",
            "body": "/** Gemini APIクライアント */\n  geminiClient?: GeminiClient;\n  /** ジャンル */\n  genre?: string;",
            "properties": {
              "geminiClient": {
                "name": "geminiClient",
                "type": "GeminiClient",
                "optional": true
              },
              "genre": {
                "name": "genre",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 46
          },
          "INarrativeAnalysisService": {
            "name": "INarrativeAnalysisService",
            "body": "/**\n   * シーン構造を分析\n   * @param lastChapters 分析対象の章数\n   * @returns シーン構造分析結果\n   */\n  analyzeSceneStructure(lastChapters?: number): Promise<SceneStructureAnalysis>;\n\n  /**\n   * シーン推奨を生成\n   * @param chapterNumber 章番号\n   * @returns シーン推奨の配列\n   */\n  generateSceneRecommendations(chapterNumber: number): Promise<SceneRecommendation[]>;\n\n  /**\n   * 文学的インスピレーションを生成\n   * @param context コンテキスト情報\n   * @param chapterNumber 章番号\n   * @returns 文学的インスピレーション\n   */\n  generateLiteraryInspirations(\n    context: GenerationContext,\n    chapterNumber: number\n  ): Promise<LiteraryInspiration>;\n\n  /**\n   * すべてのターニングポイントを取得\n   * @returns ターニングポイントの配列\n   */\n  getTurningPoints(): TurningPoint[];\n\n  /**\n   * 特定の章のターニングポイントを取得\n   * @param chapterNumber 章番号\n   * @returns ターニングポイント（存在しない場合はnull）\n   */\n  getTurningPointForChapter(chapterNumber: number): TurningPoint | null;\n\n  /**\n   * ジャンルを設定\n   * @param genre ジャンル\n   */\n  setGenre(genre: string): void;\n\n  /**\n   * 現在のジャンルを取得\n   * @returns ジャンル\n   */\n  getGenre(): string;\n\n  /**\n   * 現在のテンションレベルを取得\n   * @returns テンションレベル（0-10）\n   */\n  getCurrentTensionLevel(): number;\n\n  /**\n   * 章の要約を取得\n   * @param chapterNumber 章番号\n   * @returns 要約テキスト（存在しない場合はnull）\n   */\n  getChapterSummary(chapterNumber: number): string | null;",
            "properties": {
              "lastChapters": {
                "name": "lastChapters",
                "type": "number): Promise<SceneStructureAnalysis>",
                "optional": true
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number): string | null",
                "optional": false
              },
              "context": {
                "name": "context",
                "type": "GenerationContext",
                "optional": false
              },
              "genre": {
                "name": "genre",
                "type": "string): void",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 60
          },
          "INarrativeAnalysisServiceFactory": {
            "name": "INarrativeAnalysisServiceFactory",
            "body": "/**\n   * 物語分析サービスのインスタンスを作成\n   * @param options 設定オプション\n   * @returns 物語分析サービスのインスタンス\n   */\n  createNarrativeAnalysisService(options?: NarrativeAnalysisOptions): INarrativeAnalysisService;",
            "properties": {
              "options": {
                "name": "options",
                "type": "NarrativeAnalysisOptions): INarrativeAnalysisService",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 130
          },
          "ISceneStructureOptimizer": {
            "name": "ISceneStructureOptimizer",
            "body": "/**\n   * シーン構造分析\n   * @param chapters 分析対象の章配列\n   * @returns シーン構造分析結果\n   */\n  analyzeSceneStructure(chapters: Chapter[]): SceneStructureAnalysis;\n  \n  /**\n   * シーン推奨生成\n   * @param analysis シーン構造分析結果\n   * @param chapterNumber 対象章番号\n   * @returns シーン推奨の配列\n   */\n  generateSceneRecommendations(\n    analysis: SceneStructureAnalysis, \n    chapterNumber: number\n  ): Promise<SceneRecommendation[]>;",
            "properties": {
              "chapters": {
                "name": "chapters",
                "type": "Chapter[]): SceneStructureAnalysis",
                "optional": false
              },
              "analysis": {
                "name": "analysis",
                "type": "SceneStructureAnalysis",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 143
          },
          "ILiteraryComparisonSystem": {
            "name": "ILiteraryComparisonSystem",
            "body": "/**\n   * 文学的インスピレーションを生成する\n   * @param context 生成コンテキスト\n   * @param chapterNumber 章番号\n   * @returns 文学的インスピレーション\n   */\n  generateLiteraryInspirations(\n    context: GenerationContext,\n    chapterNumber: number\n  ): Promise<LiteraryInspiration>;\n  \n  /**\n   * ジャンルと参考作品から特定の文学的テクニックの詳細を取得する\n   * @param genre ジャンル\n   * @param techniqueType テクニックの種類（'plot', 'character', 'atmosphere'）\n   * @param techniqueName テクニック名\n   * @returns テクニックの詳細\n   */\n  getTechniqueDetails(\n    genre: string,\n    techniqueType: 'plot' | 'character' | 'atmosphere',\n    techniqueName: string\n  ): Promise<any | null>;\n  \n  /**\n   * 物語の現在の状態に基づいて関連する文学作品を推薦する\n   * @param context 生成コンテキスト\n   * @param currentThemes 現在のテーマ（配列）\n   * @returns 推薦作品とその関連性\n   */\n  recommendRelatedWorks(\n    context: GenerationContext,\n    currentThemes: string[]\n  ): Promise<Array<{ title: string, author: string, relevance: string",
            "properties": {
              "context": {
                "name": "context",
                "type": "GenerationContext",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "genre": {
                "name": "genre",
                "type": "string",
                "optional": false
              },
              "techniqueType": {
                "name": "techniqueType",
                "type": "'plot' | 'character' | 'atmosphere'",
                "optional": false
              },
              "techniqueName": {
                "name": "techniqueName",
                "type": "string",
                "optional": false
              },
              "currentThemes": {
                "name": "currentThemes",
                "type": "string[]",
                "optional": false
              },
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "author": {
                "name": "author",
                "type": "string",
                "optional": false
              },
              "relevance": {
                "name": "relevance",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 167
          }
        },
        "types": {},
        "enums": {},
        "imports": [
          {
            "types": [
              "Chapter"
            ],
            "source": "@/types/chapters",
            "isTypeOnly": true
          },
          {
            "types": [
              "NarrativeState",
              "NarrativeStateInfo",
              "TurningPoint",
              "StateTransition",
              "StagnationDetectionResult",
              "EmotionalCurvePoint"
            ],
            "source": "@/lib/memory/long-term/types",
            "isTypeOnly": true
          },
          {
            "types": [
              "SceneStructureAnalysis",
              "SceneRecommendation",
              "LiteraryInspiration"
            ],
            "source": "@/types/generation",
            "isTypeOnly": true
          },
          {
            "types": [
              "GeminiClient"
            ],
            "source": "@/lib/generation/gemini-client",
            "isTypeOnly": false
          }
        ],
        "exports": [
          "GenerationContext",
          "NarrativeAnalysisOptions",
          "INarrativeAnalysisService",
          "INarrativeAnalysisServiceFactory",
          "ISceneStructureOptimizer",
          "ILiteraryComparisonSystem"
        ],
        "inlineTypes": [],
        "generics": [
          "SceneStructureAnalysis",
          "SceneRecommendation[]",
          "LiteraryInspiration",
          "any | null",
          "Array<{ title: string, author: string, relevance: string }",
          "{ approaches: string[], examples: string[] }"
        ],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": [
          {
            "name": "INarrativeAnalysisService",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "INarrativeAnalysisService",
              "body": "/**\n   * シーン構造を分析\n   * @param lastChapters 分析対象の章数\n   * @returns シーン構造分析結果\n   */\n  analyzeSceneStructure(lastChapters?: number): Promise<SceneStructureAnalysis>;\n\n  /**\n   * シーン推奨を生成\n   * @param chapterNumber 章番号\n   * @returns シーン推奨の配列\n   */\n  generateSceneRecommendations(chapterNumber: number): Promise<SceneRecommendation[]>;\n\n  /**\n   * 文学的インスピレーションを生成\n   * @param context コンテキスト情報\n   * @param chapterNumber 章番号\n   * @returns 文学的インスピレーション\n   */\n  generateLiteraryInspirations(\n    context: GenerationContext,\n    chapterNumber: number\n  ): Promise<LiteraryInspiration>;\n\n  /**\n   * すべてのターニングポイントを取得\n   * @returns ターニングポイントの配列\n   */\n  getTurningPoints(): TurningPoint[];\n\n  /**\n   * 特定の章のターニングポイントを取得\n   * @param chapterNumber 章番号\n   * @returns ターニングポイント（存在しない場合はnull）\n   */\n  getTurningPointForChapter(chapterNumber: number): TurningPoint | null;\n\n  /**\n   * ジャンルを設定\n   * @param genre ジャンル\n   */\n  setGenre(genre: string): void;\n\n  /**\n   * 現在のジャンルを取得\n   * @returns ジャンル\n   */\n  getGenre(): string;\n\n  /**\n   * 現在のテンションレベルを取得\n   * @returns テンションレベル（0-10）\n   */\n  getCurrentTensionLevel(): number;\n\n  /**\n   * 章の要約を取得\n   * @param chapterNumber 章番号\n   * @returns 要約テキスト（存在しない場合はnull）\n   */\n  getChapterSummary(chapterNumber: number): string | null;",
              "properties": {
                "lastChapters": {
                  "name": "lastChapters",
                  "type": "number): Promise<SceneStructureAnalysis>",
                  "optional": true
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number): string | null",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "GenerationContext",
                  "optional": false
                },
                "genre": {
                  "name": "genre",
                  "type": "string): void",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 60
            }
          },
          {
            "name": "INarrativeAnalysisServiceFactory",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "INarrativeAnalysisServiceFactory",
              "body": "/**\n   * 物語分析サービスのインスタンスを作成\n   * @param options 設定オプション\n   * @returns 物語分析サービスのインスタンス\n   */\n  createNarrativeAnalysisService(options?: NarrativeAnalysisOptions): INarrativeAnalysisService;",
              "properties": {
                "options": {
                  "name": "options",
                  "type": "NarrativeAnalysisOptions): INarrativeAnalysisService",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 130
            }
          }
        ]
      },
      "lib\\analysis\\services\\reader\\interfaces.ts": {
        "filePath": "lib\\analysis\\services\\reader\\interfaces.ts",
        "fileSize": 3219,
        "system": "analysis",
        "module": "analysis/services/reader",
        "interfaces": {
          "Chapter": {
            "name": "Chapter",
            "body": "chapterNumber: number;\r\n  title: string;\r\n  content: string;\r\n  scenes?: Scene[];",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "content": {
                "name": "content",
                "type": "string",
                "optional": false
              },
              "scenes": {
                "name": "scenes",
                "type": "Scene[]",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 7
          },
          "Scene": {
            "name": "Scene",
            "body": "id: string;\r\n  type: string;\r\n  title: string;\r\n  startPosition: number;\r\n  endPosition: number;\r\n  characters: string[];\r\n  summary: string;",
            "properties": {
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "startPosition": {
                "name": "startPosition",
                "type": "number",
                "optional": false
              },
              "endPosition": {
                "name": "endPosition",
                "type": "number",
                "optional": false
              },
              "characters": {
                "name": "characters",
                "type": "string[]",
                "optional": false
              },
              "summary": {
                "name": "summary",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 14
          },
          "ReaderExperienceAnalysis": {
            "name": "ReaderExperienceAnalysis",
            "body": "/** 興味維持度 (1-10) */\r\n  interestRetention: number;\r\n  /** 感情移入度 (1-10) */\r\n  empathy: number;\r\n  /** 理解度 (1-10) */\r\n  clarity: number;\r\n  /** 意外性 (1-10) */\r\n  unexpectedness: number;\r\n  /** 続きへの期待度 (1-10) */\r\n  anticipation: number;\r\n  /** 総合スコア (1-10) */\r\n  overallScore: number;\r\n  /** 弱点 */\r\n  weakPoints: Array<{\r\n    point: string;\r\n    suggestion?: string;",
            "properties": {
              "interestRetention": {
                "name": "interestRetention",
                "type": "number",
                "optional": false
              },
              "empathy": {
                "name": "empathy",
                "type": "number",
                "optional": false
              },
              "clarity": {
                "name": "clarity",
                "type": "number",
                "optional": false
              },
              "unexpectedness": {
                "name": "unexpectedness",
                "type": "number",
                "optional": false
              },
              "anticipation": {
                "name": "anticipation",
                "type": "number",
                "optional": false
              },
              "overallScore": {
                "name": "overallScore",
                "type": "number",
                "optional": false
              },
              "weakPoints": {
                "name": "weakPoints",
                "type": "Array<{",
                "optional": false
              },
              "point": {
                "name": "point",
                "type": "string",
                "optional": false
              },
              "suggestion": {
                "name": "suggestion",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 25
          },
          "AnalyzeReaderExperienceRequest": {
            "name": "AnalyzeReaderExperienceRequest",
            "body": "chapter: Chapter;\r\n  previousChapters?: Chapter[];",
            "properties": {
              "chapter": {
                "name": "chapter",
                "type": "Chapter",
                "optional": false
              },
              "previousChapters": {
                "name": "previousChapters",
                "type": "Chapter[]",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 50
          },
          "AnalyzeReaderExperienceResponse": {
            "name": "AnalyzeReaderExperienceResponse",
            "body": "analysis: ReaderExperienceAnalysis;",
            "properties": {
              "analysis": {
                "name": "analysis",
                "type": "ReaderExperienceAnalysis",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 55
          },
          "GenerateImprovementsRequest": {
            "name": "GenerateImprovementsRequest",
            "body": "analysis: ReaderExperienceAnalysis;",
            "properties": {
              "analysis": {
                "name": "analysis",
                "type": "ReaderExperienceAnalysis",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 60
          },
          "GenerateImprovementsResponse": {
            "name": "GenerateImprovementsResponse",
            "body": "improvements: string[];",
            "properties": {
              "improvements": {
                "name": "improvements",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 64
          },
          "GenerateSceneImprovementsRequest": {
            "name": "GenerateSceneImprovementsRequest",
            "body": "chapter: Chapter;\r\n  analysis: ReaderExperienceAnalysis;",
            "properties": {
              "chapter": {
                "name": "chapter",
                "type": "Chapter",
                "optional": false
              },
              "analysis": {
                "name": "analysis",
                "type": "ReaderExperienceAnalysis",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 69
          },
          "GenerateSceneImprovementsResponse": {
            "name": "GenerateSceneImprovementsResponse",
            "body": "sceneImprovements: {\r\n    [sceneId: string]: string[];",
            "properties": {
              "sceneImprovements": {
                "name": "sceneImprovements",
                "type": "{",
                "optional": false
              },
              "sceneId": {
                "name": "sceneId",
                "type": "string]: string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 74
          },
          "GetGenreExpectationsRequest": {
            "name": "GetGenreExpectationsRequest",
            "body": "genre: string;\r\n  chapterNumber: number;\r\n  totalChapters?: number;",
            "properties": {
              "genre": {
                "name": "genre",
                "type": "string",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "totalChapters": {
                "name": "totalChapters",
                "type": "number",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 81
          },
          "GetGenreExpectationsResponse": {
            "name": "GetGenreExpectationsResponse",
            "body": "expectations: string[];",
            "properties": {
              "expectations": {
                "name": "expectations",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 87
          },
          "AnalyzeForReaderTypeRequest": {
            "name": "AnalyzeForReaderTypeRequest",
            "body": "chapter: Chapter;\r\n  readerType: 'casual' | 'critical' | 'genre' | 'emotional';",
            "properties": {
              "chapter": {
                "name": "chapter",
                "type": "Chapter",
                "optional": false
              },
              "readerType": {
                "name": "readerType",
                "type": "'casual' | 'critical' | 'genre' | 'emotional'",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 92
          },
          "AnalyzeForReaderTypeResponse": {
            "name": "AnalyzeForReaderTypeResponse",
            "body": "recommendations: string[];",
            "properties": {
              "recommendations": {
                "name": "recommendations",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 97
          },
          "ExtractScenesRequest": {
            "name": "ExtractScenesRequest",
            "body": "content: string;\r\n  options?: {\r\n    minSceneLength?: number;\r\n    detectCharacters?: boolean;",
            "properties": {
              "content": {
                "name": "content",
                "type": "string",
                "optional": false
              },
              "options": {
                "name": "options",
                "type": "{",
                "optional": true
              },
              "minSceneLength": {
                "name": "minSceneLength",
                "type": "number",
                "optional": true
              },
              "detectCharacters": {
                "name": "detectCharacters",
                "type": "boolean",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 102
          },
          "ExtractScenesResponse": {
            "name": "ExtractScenesResponse",
            "body": "scenes: Scene[];",
            "properties": {
              "scenes": {
                "name": "scenes",
                "type": "Scene[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 110
          },
          "ErrorResponse": {
            "name": "ErrorResponse",
            "body": "error: {\r\n    code: string;\r\n    message: string;\r\n    details?: string;",
            "properties": {
              "error": {
                "name": "error",
                "type": "{",
                "optional": false
              },
              "code": {
                "name": "code",
                "type": "string",
                "optional": false
              },
              "message": {
                "name": "message",
                "type": "string",
                "optional": false
              },
              "details": {
                "name": "details",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 115
          },
          "NovelAISystemAPI": {
            "name": "NovelAISystemAPI",
            "body": "// 読者体験分析\r\n  analyzeReaderExperience(\r\n    request: AnalyzeReaderExperienceRequest\r\n  ): Promise<AnalyzeReaderExperienceResponse>;\r\n  \r\n  // 改善提案生成\r\n  generateImprovements(\r\n    request: GenerateImprovementsRequest\r\n  ): Promise<GenerateImprovementsResponse>;\r\n  \r\n  // シーン改善提案生成\r\n  generateSceneImprovements(\r\n    request: GenerateSceneImprovementsRequest\r\n  ): Promise<GenerateSceneImprovementsResponse>;\r\n  \r\n  // ジャンル期待分析\r\n  getGenreExpectations(\r\n    request: GetGenreExpectationsRequest\r\n  ): Promise<GetGenreExpectationsResponse>;\r\n  \r\n  // 読者タイプ分析\r\n  analyzeForReaderType(\r\n    request: AnalyzeForReaderTypeRequest\r\n  ): Promise<AnalyzeForReaderTypeResponse>;\r\n  \r\n  // シーン抽出\r\n  extractScenes(\r\n    request: ExtractScenesRequest\r\n  ): Promise<ExtractScenesResponse>;",
            "properties": {
              "request": {
                "name": "request",
                "type": "ExtractScenesRequest",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 124
          }
        },
        "types": {},
        "enums": {},
        "imports": [],
        "exports": [
          "Chapter",
          "Scene",
          "ReaderExperienceAnalysis",
          "AnalyzeReaderExperienceRequest",
          "AnalyzeReaderExperienceResponse",
          "GenerateImprovementsRequest",
          "GenerateImprovementsResponse",
          "GenerateSceneImprovementsRequest",
          "GenerateSceneImprovementsResponse",
          "GetGenreExpectationsRequest",
          "GetGenreExpectationsResponse",
          "AnalyzeForReaderTypeRequest",
          "AnalyzeForReaderTypeResponse",
          "ExtractScenesRequest",
          "ExtractScenesResponse",
          "ErrorResponse",
          "NovelAISystemAPI"
        ],
        "inlineTypes": [
          {
            "definition": ": {\r\n    [sceneId: string]: string[];\r\n  }",
            "lineNumber": 75
          },
          {
            "definition": ": {\r\n    minSceneLength?: number;\r\n    detectCharacters?: boolean;\r\n  }",
            "lineNumber": 104
          },
          {
            "definition": ": {\r\n    code: string;\r\n    message: string;\r\n    details?: string;\r\n  }",
            "lineNumber": 116
          }
        ],
        "generics": [
          "{\r\n    point: string;\r\n    suggestion?: string;\r\n  }",
          "AnalyzeReaderExperienceResponse",
          "GenerateImprovementsResponse",
          "GenerateSceneImprovementsResponse",
          "GetGenreExpectationsResponse",
          "AnalyzeForReaderTypeResponse",
          "ExtractScenesResponse"
        ],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": []
      },
      "lib\\analysis\\services\\style\\interfaces.ts": {
        "filePath": "lib\\analysis\\services\\style\\interfaces.ts",
        "fileSize": 1943,
        "system": "analysis",
        "module": "analysis/services/style",
        "interfaces": {
          "SubjectPatternAnalysis": {
            "name": "SubjectPatternAnalysis",
            "body": "repeatedSubjects: RepeatedSubjectPattern[];\r\n  subjectDiversityScore: number;\r\n  suggestions: string[];",
            "properties": {
              "repeatedSubjects": {
                "name": "repeatedSubjects",
                "type": "RepeatedSubjectPattern[]",
                "optional": false
              },
              "subjectDiversityScore": {
                "name": "subjectDiversityScore",
                "type": "number",
                "optional": false
              },
              "suggestions": {
                "name": "suggestions",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 19
          },
          "RepeatedSubjectPattern": {
            "name": "RepeatedSubjectPattern",
            "body": "subject: string;\r\n  count: number;\r\n  startIndex: number;\r\n  endIndex: number;",
            "properties": {
              "subject": {
                "name": "subject",
                "type": "string",
                "optional": false
              },
              "count": {
                "name": "count",
                "type": "number",
                "optional": false
              },
              "startIndex": {
                "name": "startIndex",
                "type": "number",
                "optional": false
              },
              "endIndex": {
                "name": "endIndex",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 28
          },
          "IStyleAnalysisService": {
            "name": "IStyleAnalysisService",
            "body": "/**\r\n   * 初期化\r\n   * サービスの初期化処理を行います\r\n   */\r\n  initialize(): Promise<void>;\r\n\r\n  /**\r\n   * 文体分析\r\n   * テキストの文体特性を分析します\r\n   * \r\n   * @param content テキスト内容\r\n   * @returns 文体分析結果\r\n   */\r\n  analyzeStyle(content: string): Promise<StyleAnalysis>;\r\n\r\n  /**\r\n   * 表現パターン分析\r\n   * テキストの表現パターンを分析します\r\n   * \r\n   * @param content テキスト内容\r\n   * @returns 表現パターン分析結果\r\n   */\r\n  analyzeExpressionPatterns(content: string): Promise<ExpressionPatterns>;\r\n\r\n  /**\r\n   * 主語パターン分析\r\n   * テキストの主語使用パターンを分析します\r\n   * \r\n   * @param content テキスト内容\r\n   * @returns 主語パターン分析結果\r\n   */\r\n  analyzeSubjectPatterns(content: string): Promise<SubjectPatternAnalysis>;\r\n\r\n  /**\r\n   * 表現分析\r\n   * テキスト内の特徴的な表現パターン、繰り返し使用されている表現などを\r\n   * 検出し分析します。\r\n   * \r\n   * @param content テキスト内容\r\n   * @returns 分析結果\r\n   */\r\n  analyzeExpressions(content: string): Promise<ExpressionUsageResult>;\r\n\r\n  /**\r\n   * スタイル改善提案の生成\r\n   * \r\n   * 章分析結果に基づいてスタイル改善の提案を生成します\r\n   * \r\n   * @param analysis 章分析結果\r\n   * @param chapterNumber 章番号\r\n   * @returns 改善提案の配列\r\n   */\r\n  generateStyleImprovementSuggestions?(analysis: any, chapterNumber: number): Promise<string[]>;",
            "properties": {
              "content": {
                "name": "content",
                "type": "string): Promise<ExpressionUsageResult>",
                "optional": false
              },
              "analysis": {
                "name": "analysis",
                "type": "any",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number): Promise<string[]>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 39
          }
        },
        "types": {},
        "enums": {},
        "imports": [
          {
            "types": [
              "StyleAnalysis",
              "StyleGuidance",
              "ExpressionPatterns",
              "ExpressionAlternatives"
            ],
            "source": "@/types/generation",
            "isTypeOnly": true
          },
          {
            "types": [
              "ExpressionUsageResult"
            ],
            "source": "@/lib/analysis/core/types",
            "isTypeOnly": true
          }
        ],
        "exports": [
          "SubjectPatternAnalysis",
          "RepeatedSubjectPattern",
          "IStyleAnalysisService"
        ],
        "inlineTypes": [],
        "generics": [
          "void",
          "StyleAnalysis",
          "ExpressionPatterns",
          "SubjectPatternAnalysis",
          "ExpressionUsageResult",
          "string[]"
        ],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": [
          {
            "name": "IStyleAnalysisService",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "IStyleAnalysisService",
              "body": "/**\r\n   * 初期化\r\n   * サービスの初期化処理を行います\r\n   */\r\n  initialize(): Promise<void>;\r\n\r\n  /**\r\n   * 文体分析\r\n   * テキストの文体特性を分析します\r\n   * \r\n   * @param content テキスト内容\r\n   * @returns 文体分析結果\r\n   */\r\n  analyzeStyle(content: string): Promise<StyleAnalysis>;\r\n\r\n  /**\r\n   * 表現パターン分析\r\n   * テキストの表現パターンを分析します\r\n   * \r\n   * @param content テキスト内容\r\n   * @returns 表現パターン分析結果\r\n   */\r\n  analyzeExpressionPatterns(content: string): Promise<ExpressionPatterns>;\r\n\r\n  /**\r\n   * 主語パターン分析\r\n   * テキストの主語使用パターンを分析します\r\n   * \r\n   * @param content テキスト内容\r\n   * @returns 主語パターン分析結果\r\n   */\r\n  analyzeSubjectPatterns(content: string): Promise<SubjectPatternAnalysis>;\r\n\r\n  /**\r\n   * 表現分析\r\n   * テキスト内の特徴的な表現パターン、繰り返し使用されている表現などを\r\n   * 検出し分析します。\r\n   * \r\n   * @param content テキスト内容\r\n   * @returns 分析結果\r\n   */\r\n  analyzeExpressions(content: string): Promise<ExpressionUsageResult>;\r\n\r\n  /**\r\n   * スタイル改善提案の生成\r\n   * \r\n   * 章分析結果に基づいてスタイル改善の提案を生成します\r\n   * \r\n   * @param analysis 章分析結果\r\n   * @param chapterNumber 章番号\r\n   * @returns 改善提案の配列\r\n   */\r\n  generateStyleImprovementSuggestions?(analysis: any, chapterNumber: number): Promise<string[]>;",
              "properties": {
                "content": {
                  "name": "content",
                  "type": "string): Promise<ExpressionUsageResult>",
                  "optional": false
                },
                "analysis": {
                  "name": "analysis",
                  "type": "any",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number): Promise<string[]>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 39
            }
          }
        ]
      },
      "lib\\analysis\\services\\theme\\interfaces.ts": {
        "filePath": "lib\\analysis\\services\\theme\\interfaces.ts",
        "fileSize": 4531,
        "system": "analysis",
        "module": "analysis/services/theme",
        "interfaces": {
          "IThemeAnalysisService": {
            "name": "IThemeAnalysisService",
            "body": "/**\r\n   * テーマ共鳴分析を実行\r\n   * テキスト内のテーマ表現を分析し、各テーマの強度や表現方法を評価します\r\n   * \r\n   * @param content 分析対象のテキスト\r\n   * @param themes テーマの配列\r\n   * @returns テーマ共鳴分析結果\r\n   */\r\n  analyzeThemeResonance(content: string, themes: string[]): Promise<ThemeResonanceAnalysis>;\r\n\r\n  /**\r\n   * 伏線処理を実行\r\n   * 章の内容から伏線を検出、追跡、生成します\r\n   * \r\n   * @param content 章コンテンツ\r\n   * @param chapterNumber 章番号\r\n   * @returns 処理結果\r\n   */\r\n  processForeshadowing(content: string, chapterNumber: number): Promise<{\r\n    resolvedForeshadowing: ForeshadowingElement[];\r\n    generatedCount: number;\r\n    totalActive: number;",
            "properties": {
              "content": {
                "name": "content",
                "type": "string",
                "optional": false
              },
              "themes": {
                "name": "themes",
                "type": "string[]): Promise<ThemeResonanceAnalysis>",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number): Promise<{",
                "optional": false
              },
              "resolvedForeshadowing": {
                "name": "resolvedForeshadowing",
                "type": "ForeshadowingElement[]",
                "optional": false
              },
              "generatedCount": {
                "name": "generatedCount",
                "type": "number",
                "optional": false
              },
              "totalActive": {
                "name": "totalActive",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 26
          },
          "IThemeAnalysisServiceFactory": {
            "name": "IThemeAnalysisServiceFactory",
            "body": "/**\r\n   * テーマ分析サービスのインスタンスを作成\r\n   * @returns テーマ分析サービスのインスタンス\r\n   */\r\n  createThemeAnalysisService(): IThemeAnalysisService;",
            "properties": {},
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 146
          },
          "IMemoryManager": {
            "name": "IMemoryManager",
            "body": "/**\r\n   * 長期記憶を取得\r\n   * @returns 長期記憶へのアクセスオブジェクト\r\n   */\r\n  getLongTermMemory(): any;\r\n\r\n  /**\r\n   * 物語の状態を取得\r\n   * @param chapterNumber 章番号\r\n   * @returns 物語の状態オブジェクト\r\n   */\r\n  getNarrativeState(chapterNumber: number): Promise<any>;\r\n\r\n  /**\r\n   * 最近の章のメモリを取得\r\n   * @param startChapter 開始章番号\r\n   * @param count 取得する章数\r\n   * @returns 章のメモリ配列\r\n   */\r\n  getRecentChapterMemories(startChapter: number, count: number): Promise<any[]>;\r\n\r\n  /**\r\n   * 現在のアークを取得\r\n   * @param chapterNumber 章番号\r\n   * @returns 現在のアーク情報\r\n   */\r\n  getCurrentArc(chapterNumber: number): Promise<any>;\r\n\r\n  /**\r\n   * 伏線状態を更新\r\n   * @param resolvedForeshadowing 解決された伏線の配列\r\n   * @param chapterNumber 章番号\r\n   * @returns 更新完了後に解決するPromise\r\n   */\r\n  updateForeshadowingStatus(resolvedForeshadowing: any[], chapterNumber: number): Promise<void>;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number): Promise<void>",
                "optional": false
              },
              "startChapter": {
                "name": "startChapter",
                "type": "number",
                "optional": false
              },
              "count": {
                "name": "count",
                "type": "number): Promise<any[]>",
                "optional": false
              },
              "resolvedForeshadowing": {
                "name": "resolvedForeshadowing",
                "type": "any[]",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 158
          }
        },
        "types": {},
        "enums": {},
        "imports": [
          {
            "types": [
              "ThemeResonanceAnalysis",
              "ThemeEnhancement",
              "ForeshadowingElement",
              "SymbolismAnalysis",
              "ThemePresenceVisualization",
              "ThemeElementResonance",
              "ThemeConsistencyAnalysis",
              "ThemeImageryMapping",
              "MotifTrackingResult"
            ],
            "source": "../../core/types",
            "isTypeOnly": true
          }
        ],
        "exports": [
          "IThemeAnalysisService",
          "IThemeAnalysisServiceFactory",
          "IMemoryManager"
        ],
        "inlineTypes": [],
        "generics": [
          "ThemeResonanceAnalysis",
          "{\r\n    resolvedForeshadowing: ForeshadowingElement[];\r\n    generatedCount: number;\r\n    totalActive: number;\r\n  }",
          "ForeshadowingElement[]",
          "ThemePresenceVisualization",
          "ThemeElementResonance",
          "SymbolismAnalysis",
          "ThemeConsistencyAnalysis",
          "ThemeImageryMapping",
          "MotifTrackingResult",
          "void",
          "any",
          "any[]"
        ],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": [
          {
            "name": "IThemeAnalysisService",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "IThemeAnalysisService",
              "body": "/**\r\n   * テーマ共鳴分析を実行\r\n   * テキスト内のテーマ表現を分析し、各テーマの強度や表現方法を評価します\r\n   * \r\n   * @param content 分析対象のテキスト\r\n   * @param themes テーマの配列\r\n   * @returns テーマ共鳴分析結果\r\n   */\r\n  analyzeThemeResonance(content: string, themes: string[]): Promise<ThemeResonanceAnalysis>;\r\n\r\n  /**\r\n   * 伏線処理を実行\r\n   * 章の内容から伏線を検出、追跡、生成します\r\n   * \r\n   * @param content 章コンテンツ\r\n   * @param chapterNumber 章番号\r\n   * @returns 処理結果\r\n   */\r\n  processForeshadowing(content: string, chapterNumber: number): Promise<{\r\n    resolvedForeshadowing: ForeshadowingElement[];\r\n    generatedCount: number;\r\n    totalActive: number;",
              "properties": {
                "content": {
                  "name": "content",
                  "type": "string",
                  "optional": false
                },
                "themes": {
                  "name": "themes",
                  "type": "string[]): Promise<ThemeResonanceAnalysis>",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number): Promise<{",
                  "optional": false
                },
                "resolvedForeshadowing": {
                  "name": "resolvedForeshadowing",
                  "type": "ForeshadowingElement[]",
                  "optional": false
                },
                "generatedCount": {
                  "name": "generatedCount",
                  "type": "number",
                  "optional": false
                },
                "totalActive": {
                  "name": "totalActive",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 26
            }
          },
          {
            "name": "IThemeAnalysisServiceFactory",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "IThemeAnalysisServiceFactory",
              "body": "/**\r\n   * テーマ分析サービスのインスタンスを作成\r\n   * @returns テーマ分析サービスのインスタンス\r\n   */\r\n  createThemeAnalysisService(): IThemeAnalysisService;",
              "properties": {},
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 146
            }
          },
          {
            "name": "IMemoryManager",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "IMemoryManager",
              "body": "/**\r\n   * 長期記憶を取得\r\n   * @returns 長期記憶へのアクセスオブジェクト\r\n   */\r\n  getLongTermMemory(): any;\r\n\r\n  /**\r\n   * 物語の状態を取得\r\n   * @param chapterNumber 章番号\r\n   * @returns 物語の状態オブジェクト\r\n   */\r\n  getNarrativeState(chapterNumber: number): Promise<any>;\r\n\r\n  /**\r\n   * 最近の章のメモリを取得\r\n   * @param startChapter 開始章番号\r\n   * @param count 取得する章数\r\n   * @returns 章のメモリ配列\r\n   */\r\n  getRecentChapterMemories(startChapter: number, count: number): Promise<any[]>;\r\n\r\n  /**\r\n   * 現在のアークを取得\r\n   * @param chapterNumber 章番号\r\n   * @returns 現在のアーク情報\r\n   */\r\n  getCurrentArc(chapterNumber: number): Promise<any>;\r\n\r\n  /**\r\n   * 伏線状態を更新\r\n   * @param resolvedForeshadowing 解決された伏線の配列\r\n   * @param chapterNumber 章番号\r\n   * @returns 更新完了後に解決するPromise\r\n   */\r\n  updateForeshadowingStatus(resolvedForeshadowing: any[], chapterNumber: number): Promise<void>;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number): Promise<void>",
                  "optional": false
                },
                "startChapter": {
                  "name": "startChapter",
                  "type": "number",
                  "optional": false
                },
                "count": {
                  "name": "count",
                  "type": "number): Promise<any[]>",
                  "optional": false
                },
                "resolvedForeshadowing": {
                  "name": "resolvedForeshadowing",
                  "type": "any[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 158
            }
          }
        ]
      },
      "lib\\characters\\core\\interfaces.ts": {
        "filePath": "lib\\characters\\core\\interfaces.ts",
        "fileSize": 20922,
        "system": "characters",
        "module": "characters/core",
        "interfaces": {
          "ICharacterRepository": {
            "name": "ICharacterRepository",
            "body": "/**\r\n     * IDによるキャラクター取得\r\n     * @param id キャラクターID\r\n     * @returns キャラクターオブジェクトまたはnull\r\n     */\r\n    getCharacterById(id: string): Promise<Character | null>;\r\n  \r\n    /**\r\n     * 名前によるキャラクター取得\r\n     * @param name キャラクター名\r\n     * @returns キャラクターオブジェクトまたはnull\r\n     */\r\n    getCharacterByName(name: string): Promise<Character | null>;\r\n  \r\n    /**\r\n     * すべてのキャラクター取得\r\n     * @returns キャラクターの配列\r\n     */\r\n    getAllCharacters(): Promise<Character[]>;\r\n  \r\n    /**\r\n     * キャラクターの保存\r\n     * @param character 保存するキャラクター\r\n     */\r\n    saveCharacter(character: Character): Promise<void>;\r\n  \r\n    /**\r\n     * キャラクターの更新\r\n     * @param id キャラクターID\r\n     * @param updates 更新データ\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    updateCharacter(id: string, updates: Partial<CharacterData>): Promise<Character>;\r\n  \r\n    /**\r\n     * キャラクター状態の保存\r\n     * @param id キャラクターID\r\n     * @param state 保存する状態\r\n     */\r\n    saveCharacterState(id: string, state: CharacterState): Promise<void>;\r\n  \r\n    /**\r\n     * キャラクタープロパティの部分更新\r\n     * @param id キャラクターID\r\n     * @param path プロパティパス（ドット区切り）\r\n     * @param value 新しい値\r\n     */\r\n    updateCharacterProperty(id: string, path: string, value: any): Promise<void>;\r\n  \r\n    /**\r\n     * 特定のタイプのキャラクターのみ取得\r\n     * @param type キャラクタータイプ\r\n     * @returns 指定タイプのキャラクター配列\r\n     */\r\n    getCharactersByType(type: CharacterType): Promise<Character[]>;\r\n  \r\n    /**\r\n     * アクティブなキャラクターのみ取得\r\n     * @returns アクティブなキャラクターの配列\r\n     */\r\n    getActiveCharacters(): Promise<Character[]>;",
            "properties": {
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string): Promise<Character | null>",
                "optional": false
              },
              "character": {
                "name": "character",
                "type": "Character): Promise<void>",
                "optional": false
              },
              "updates": {
                "name": "updates",
                "type": "Partial<CharacterData>): Promise<Character>",
                "optional": false
              },
              "state": {
                "name": "state",
                "type": "CharacterState): Promise<void>",
                "optional": false
              },
              "path": {
                "name": "path",
                "type": "string",
                "optional": false
              },
              "value": {
                "name": "value",
                "type": "any): Promise<void>",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "CharacterType): Promise<Character[]>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 35
          },
          "IRelationshipRepository": {
            "name": "IRelationshipRepository",
            "body": "/**\r\n     * 2キャラクター間の関係性取得\r\n     * @param char1Id 1人目のキャラクターID\r\n     * @param char2Id 2人目のキャラクターID\r\n     * @returns 関係性オブジェクトまたはnull\r\n     */\r\n    getRelationship(char1Id: string, char2Id: string): Promise<Relationship | null>;\r\n  \r\n    /**\r\n     * 関係性の保存\r\n     * @param char1Id 1人目のキャラクターID\r\n     * @param char2Id 2人目のキャラクターID\r\n     * @param relationship 保存する関係性\r\n     */\r\n    saveRelationship(char1Id: string, char2Id: string, relationship: Relationship): Promise<void>;\r\n  \r\n    /**\r\n     * すべての関係性データ取得\r\n     * @returns 関係性データの配列\r\n     */\r\n    getAllRelationships(): Promise<Relationship[]>;\r\n  \r\n    /**\r\n     * キャラクターの全関係性取得\r\n     * @param characterId キャラクターID\r\n     * @returns そのキャラクターが関わる全関係性\r\n     */\r\n    getCharacterRelationships(characterId: string): Promise<RelationshipResponse>;\r\n  \r\n    /**\r\n     * 関係グラフの保存\r\n     * @param graphData 関係グラフデータ\r\n     */\r\n    saveRelationshipGraph(graphData: any): Promise<void>;\r\n  \r\n    /**\r\n     * 関係グラフの取得\r\n     * @returns 関係グラフデータ\r\n     */\r\n    getRelationshipGraph(): Promise<any>;",
            "properties": {
              "char1Id": {
                "name": "char1Id",
                "type": "string",
                "optional": false
              },
              "char2Id": {
                "name": "char2Id",
                "type": "string",
                "optional": false
              },
              "relationship": {
                "name": "relationship",
                "type": "Relationship): Promise<void>",
                "optional": false
              },
              "characterId": {
                "name": "characterId",
                "type": "string): Promise<RelationshipResponse>",
                "optional": false
              },
              "graphData": {
                "name": "graphData",
                "type": "any): Promise<void>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 103
          },
          "IParameterRepository": {
            "name": "IParameterRepository",
            "body": "/**\r\n     * キャラクターパラメータの取得\r\n     * @param characterId キャラクターID\r\n     * @returns パラメータの配列\r\n     */\r\n    getCharacterParameters(characterId: string): Promise<CharacterParameter[]>;\r\n  \r\n    /**\r\n     * キャラクターパラメータの保存\r\n     * @param characterId キャラクターID\r\n     * @param parameters 保存するパラメータ配列\r\n     */\r\n    saveCharacterParameters(characterId: string, parameters: CharacterParameter[]): Promise<void>;\r\n  \r\n    /**\r\n     * パラメータ定義の取得\r\n     * @returns パラメータ定義の配列\r\n     */\r\n    getParameterDefinitions(): Promise<CharacterParameter[]>;\r\n  \r\n    /**\r\n     * パラメータ定義の保存\r\n     * @param definitions 保存するパラメータ定義\r\n     */\r\n    saveParameterDefinitions(definitions: CharacterParameter[]): Promise<void>;\r\n  \r\n    /**\r\n     * 単一パラメータ値の更新\r\n     * @param characterId キャラクターID\r\n     * @param parameterId パラメータID\r\n     * @param value 新しい値\r\n     */\r\n    updateParameterValue(characterId: string, parameterId: string, value: number): Promise<void>;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "parameters": {
                "name": "parameters",
                "type": "CharacterParameter[]): Promise<void>",
                "optional": false
              },
              "definitions": {
                "name": "definitions",
                "type": "CharacterParameter[]): Promise<void>",
                "optional": false
              },
              "parameterId": {
                "name": "parameterId",
                "type": "string",
                "optional": false
              },
              "value": {
                "name": "value",
                "type": "number): Promise<void>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 150
          },
          "ISkillRepository": {
            "name": "ISkillRepository",
            "body": "/**\r\n     * キャラクタースキルの取得\r\n     * @param characterId キャラクターID\r\n     * @returns スキルの配列\r\n     */\r\n    getCharacterSkills(characterId: string): Promise<Skill[]>;\r\n  \r\n    /**\r\n     * キャラクタースキルの保存\r\n     * @param characterId キャラクターID\r\n     * @param skills 保存するスキル配列\r\n     */\r\n    saveCharacterSkills(characterId: string, skills: Skill[]): Promise<void>;\r\n  \r\n    /**\r\n     * スキル定義の取得\r\n     * @returns スキル定義の配列\r\n     */\r\n    getSkillDefinitions(): Promise<Skill[]>;\r\n  \r\n    /**\r\n     * スキル定義の保存\r\n     * @param definitions 保存するスキル定義\r\n     */\r\n    saveSkillDefinitions(definitions: Skill[]): Promise<void>;\r\n  \r\n    /**\r\n     * スキルレベルの更新\r\n     * @param characterId キャラクターID\r\n     * @param skillId スキルID\r\n     * @param level 新しいレベル\r\n     */\r\n    updateSkillLevel(characterId: string, skillId: string, level: number): Promise<void>;\r\n  \r\n    /**\r\n     * スキル習熟度の更新\r\n     * @param characterId キャラクターID\r\n     * @param skillId スキルID\r\n     * @param proficiency 新しい習熟度\r\n     */\r\n    updateSkillProficiency(characterId: string, skillId: string, proficiency: number): Promise<void>;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "skills": {
                "name": "skills",
                "type": "Skill[]): Promise<void>",
                "optional": false
              },
              "definitions": {
                "name": "definitions",
                "type": "Skill[]): Promise<void>",
                "optional": false
              },
              "skillId": {
                "name": "skillId",
                "type": "string",
                "optional": false
              },
              "level": {
                "name": "level",
                "type": "number): Promise<void>",
                "optional": false
              },
              "proficiency": {
                "name": "proficiency",
                "type": "number): Promise<void>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 190
          },
          "IGrowthPlanRepository": {
            "name": "IGrowthPlanRepository",
            "body": "/**\r\n     * 成長計画の取得\r\n     * @param id 成長計画ID\r\n     * @returns 成長計画\r\n     */\r\n    getGrowthPlanById(id: string): Promise<GrowthPlan | null>;\r\n  \r\n    /**\r\n     * キャラクターの成長計画取得\r\n     * @param characterId キャラクターID\r\n     * @returns 成長計画の配列\r\n     */\r\n    getGrowthPlansByCharacterId(characterId: string): Promise<GrowthPlan[]>;\r\n  \r\n    /**\r\n     * 成長計画の保存\r\n     * @param plan 保存する成長計画\r\n     */\r\n    saveGrowthPlan(plan: GrowthPlan): Promise<void>;\r\n  \r\n    /**\r\n     * 成長計画の更新\r\n     * @param id 成長計画ID\r\n     * @param updates 更新データ\r\n     */\r\n    updateGrowthPlan(id: string, updates: Partial<GrowthPlan>): Promise<void>;\r\n  \r\n    /**\r\n     * 成長計画の削除\r\n     * @param id 成長計画ID\r\n     */\r\n    deleteGrowthPlan(id: string): Promise<void>;",
            "properties": {
              "id": {
                "name": "id",
                "type": "string): Promise<void>",
                "optional": false
              },
              "characterId": {
                "name": "characterId",
                "type": "string): Promise<GrowthPlan[]>",
                "optional": false
              },
              "plan": {
                "name": "plan",
                "type": "GrowthPlan): Promise<void>",
                "optional": false
              },
              "updates": {
                "name": "updates",
                "type": "Partial<GrowthPlan>): Promise<void>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 238
          },
          "ICharacterService": {
            "name": "ICharacterService",
            "body": "/**\r\n     * キャラクター作成\r\n     * @param data キャラクターデータ\r\n     * @returns 作成されたキャラクター\r\n     */\r\n    createCharacter(data: CharacterData): Promise<Character>;\r\n  \r\n    /**\r\n     * キャラクター取得\r\n     * @param id キャラクターID\r\n     * @returns キャラクターオブジェクトまたはnull\r\n     */\r\n    getCharacter(id: string): Promise<Character | null>;\r\n  \r\n    /**\r\n     * キャラクター更新\r\n     * @param id キャラクターID\r\n     * @param updates 更新データ\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    updateCharacter(id: string, updates: Partial<CharacterData>): Promise<Character>;\r\n  \r\n    /**\r\n     * キャラクター登場記録\r\n     * @param id キャラクターID\r\n     * @param chapterNumber 章番号\r\n     * @param summary 概要\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    recordAppearance(id: string, chapterNumber: number, summary: string): Promise<Character>;\r\n  \r\n    /**\r\n     * インタラクション記録\r\n     * @param id キャラクターID\r\n     * @param targetId 対象キャラクターID\r\n     * @param type インタラクションタイプ\r\n     * @param data 追加データ\r\n     */\r\n    recordInteraction(id: string, targetId: string, type: string, data: any): Promise<void>;\r\n  \r\n    /**\r\n     * キャラクター発展処理\r\n     * @param id キャラクターID\r\n     * @param events 章イベント配列\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    processCharacterDevelopment(id: string, events: ChapterEvent[]): Promise<Character>;\r\n  \r\n    /**\r\n     * キャラクター設定の検証\r\n     * @param character キャラクター\r\n     * @returns 検証結果\r\n     */\r\n    validateCharacter(character: Character): Promise<ValidationResult>;\r\n  \r\n    /**\r\n     * キャラクター状態の更新\r\n     * @param id キャラクターID\r\n     * @param state 新しい状態\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    updateCharacterState(id: string, state: Partial<CharacterState>): Promise<Character>;",
            "properties": {
              "data": {
                "name": "data",
                "type": "any): Promise<void>",
                "optional": false
              },
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "updates": {
                "name": "updates",
                "type": "Partial<CharacterData>): Promise<Character>",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "summary": {
                "name": "summary",
                "type": "string): Promise<Character>",
                "optional": false
              },
              "targetId": {
                "name": "targetId",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "events": {
                "name": "events",
                "type": "ChapterEvent[]): Promise<Character>",
                "optional": false
              },
              "character": {
                "name": "character",
                "type": "Character): Promise<ValidationResult>",
                "optional": false
              },
              "state": {
                "name": "state",
                "type": "Partial<CharacterState>): Promise<Character>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 277
          },
          "IDetectionService": {
            "name": "IDetectionService",
            "body": "/**\r\n     * コンテンツ内のキャラクター検出\r\n     * @param content 検索対象のコンテンツ\r\n     * @returns 検出されたキャラクターの配列\r\n     */\r\n    detectCharactersInContent(content: string): Promise<Character[]>;\r\n  \r\n    /**\r\n     * キャラクターの台詞抽出\r\n     * @param character キャラクター\r\n     * @param content 抽出対象のコンテンツ\r\n     * @returns 抽出された台詞の配列\r\n     */\r\n    extractCharacterDialog(character: Character, content: string): Promise<string[]>;\r\n  \r\n    /**\r\n     * キャラクターへの言及検出\r\n     * @param character キャラクター\r\n     * @param content 検出対象のコンテンツ\r\n     * @returns 言及テキストの配列\r\n     */\r\n    detectCharacterMentions(character: Character, content: string): Promise<string[]>;\r\n  \r\n    /**\r\n     * キャラクター登場確認\r\n     * @param characterId キャラクターID\r\n     * @param content 確認対象のコンテンツ\r\n     * @returns 登場しているかどうか\r\n     */\r\n    verifyCharacterAppearance(characterId: string, content: string): Promise<boolean>;\r\n  \r\n    /**\r\n     * コンテンツ内のインタラクション検出\r\n     * @param content 検出対象のコンテンツ\r\n     * @returns 検出されたインタラクション情報\r\n     */\r\n    detectInteractions(content: string): Promise<any[]>;",
            "properties": {
              "content": {
                "name": "content",
                "type": "string): Promise<any[]>",
                "optional": false
              },
              "character": {
                "name": "character",
                "type": "Character",
                "optional": false
              },
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 346
          },
          "IEvolutionService": {
            "name": "IEvolutionService",
            "body": "/**\r\n     * キャラクター発展処理\r\n     * @param character キャラクター\r\n     * @param events 章イベント配列\r\n     * @returns キャラクター発展情報\r\n     */\r\n    processCharacterDevelopment(character: Character, events: ChapterEvent[]): Promise<CharacterDevelopment>;\r\n  \r\n    /**\r\n     * 発展経路生成\r\n     * @param character キャラクター\r\n     * @returns 発展経路\r\n     */\r\n    generateDevelopmentPath(character: Character): Promise<DevelopmentPath>;\r\n  \r\n    /**\r\n     * 成長計画適用\r\n     * @param characterId キャラクターID\r\n     * @param chapterNumber 章番号\r\n     * @returns 成長結果\r\n     */\r\n    applyGrowthPlan(characterId: string, chapterNumber: number): Promise<GrowthResult>;\r\n  \r\n    /**\r\n     * 発展段階評価\r\n     * @param currentStage 現在の段階\r\n     * @param development 発展情報\r\n     * @param type 評価タイプ\r\n     * @returns 新しい発展段階\r\n     */\r\n    evaluateDevelopmentStage(currentStage: number, development: CharacterDevelopment, type: string): number;\r\n  \r\n    /**\r\n     * 次のマイルストーン推定\r\n     * @param characterId キャラクターID\r\n     * @returns 次のマイルストーン情報\r\n     */\r\n    predictNextMilestone(characterId: string): Promise<any>;",
            "properties": {
              "character": {
                "name": "character",
                "type": "Character): Promise<DevelopmentPath>",
                "optional": false
              },
              "events": {
                "name": "events",
                "type": "ChapterEvent[]): Promise<CharacterDevelopment>",
                "optional": false
              },
              "characterId": {
                "name": "characterId",
                "type": "string): Promise<any>",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number): Promise<GrowthResult>",
                "optional": false
              },
              "currentStage": {
                "name": "currentStage",
                "type": "number",
                "optional": false
              },
              "development": {
                "name": "development",
                "type": "CharacterDevelopment",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "string): number",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 390
          },
          "IPsychologyService": {
            "name": "IPsychologyService",
            "body": "/**\r\n     * キャラクター心理分析\r\n     * @param character キャラクター\r\n     * @param recentEvents 最近のイベント配列\r\n     * @returns キャラクター心理情報\r\n     */\r\n    analyzeCharacterPsychology(character: Character, recentEvents: any[]): Promise<CharacterPsychology>;\r\n  \r\n    /**\r\n     * 関係性心理分析\r\n     * @param characters キャラクター配列\r\n     * @returns キャラクター間の心理的態度マップ\r\n     */\r\n    analyzeRelationshipPsychology(characters: Character[]): Promise<Map<string, Map<string, any>>>;\r\n  \r\n    /**\r\n     * 行動予測\r\n     * @param character キャラクター\r\n     * @param psychology 心理情報\r\n     * @param situations 状況配列\r\n     * @returns 予測される行動情報\r\n     */\r\n    predictBehaviors(character: Character, psychology: CharacterPsychology, situations: string[]): Promise<any>;\r\n  \r\n    /**\r\n     * 感情変化のシミュレーション\r\n     * @param characterId キャラクターID\r\n     * @param event イベント情報\r\n     * @returns 感情変化予測\r\n     */\r\n    simulateEmotionalResponse(characterId: string, event: any): Promise<any>;",
            "properties": {
              "character": {
                "name": "character",
                "type": "Character",
                "optional": false
              },
              "recentEvents": {
                "name": "recentEvents",
                "type": "any[]): Promise<CharacterPsychology>",
                "optional": false
              },
              "characters": {
                "name": "characters",
                "type": "Character[]): Promise<Map<string",
                "optional": false
              },
              "psychology": {
                "name": "psychology",
                "type": "CharacterPsychology",
                "optional": false
              },
              "situations": {
                "name": "situations",
                "type": "string[]): Promise<any>",
                "optional": false
              },
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "event": {
                "name": "event",
                "type": "any): Promise<any>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 435
          },
          "IRelationshipService": {
            "name": "IRelationshipService",
            "body": "/**\r\n     * 関係性更新\r\n     * @param char1Id 1人目のキャラクターID\r\n     * @param char2Id 2人目のキャラクターID\r\n     * @param type 関係性タイプ\r\n     * @param strength 関係性の強さ\r\n     */\r\n    updateRelationship(char1Id: string, char2Id: string, type: string, strength: number): Promise<void>;\r\n  \r\n    /**\r\n     * 関連キャラクター取得\r\n     * @param characterId キャラクターID\r\n     * @returns 関連するキャラクターIDの配列\r\n     */\r\n    getConnectedCharacters(characterId: string): Promise<string[]>;\r\n  \r\n    /**\r\n     * キャラクター関係性取得\r\n     * @param characterId キャラクターID\r\n     * @returns 関係性の配列\r\n     */\r\n    getCharacterRelationships(characterId: string): Promise<RelationshipResponse>;\r\n  \r\n    /**\r\n     * 関係性動態分析\r\n     * @returns 関係性分析結果\r\n     */\r\n    analyzeRelationshipDynamics(): Promise<RelationshipAnalysis>;\r\n  \r\n    /**\r\n     * 関係性クラスター検出\r\n     * @returns キャラクタークラスターの配列\r\n     */\r\n    detectRelationshipClusters(): Promise<CharacterCluster[]>;\r\n  \r\n    /**\r\n     * 対立関係検出\r\n     * @returns 対立関係情報の配列\r\n     */\r\n    detectTensions(): Promise<any[]>;",
            "properties": {
              "char1Id": {
                "name": "char1Id",
                "type": "string",
                "optional": false
              },
              "char2Id": {
                "name": "char2Id",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "strength": {
                "name": "strength",
                "type": "number): Promise<void>",
                "optional": false
              },
              "characterId": {
                "name": "characterId",
                "type": "string): Promise<RelationshipResponse>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 473
          },
          "IParameterService": {
            "name": "IParameterService",
            "body": "/**\r\n     * キャラクターパラメータ初期化\r\n     * @param characterId キャラクターID\r\n     * @param defaultValue デフォルト値\r\n     * @returns 初期化されたパラメータ配列\r\n     */\r\n    initializeCharacterParameters(characterId: string, defaultValue: number): Promise<CharacterParameter[]>;\r\n  \r\n    /**\r\n     * キャラクターパラメータ取得\r\n     * @param characterId キャラクターID\r\n     * @returns パラメータの配列\r\n     */\r\n    getCharacterParameters(characterId: string): Promise<CharacterParameter[]>;\r\n  \r\n    /**\r\n     * パラメータ値設定\r\n     * @param characterId キャラクターID\r\n     * @param parameterId パラメータID\r\n     * @param value 新しい値\r\n     * @returns 更新されたパラメータまたはnull\r\n     */\r\n    setParameterValue(characterId: string, parameterId: string, value: number): Promise<CharacterParameter | null>;\r\n  \r\n    /**\r\n     * パラメータ修正\r\n     * @param characterId キャラクターID\r\n     * @param parameterId パラメータID\r\n     * @param delta 変化量\r\n     * @returns 更新されたパラメータまたはnull\r\n     */\r\n    modifyParameter(characterId: string, parameterId: string, delta: number): Promise<CharacterParameter | null>;\r\n  \r\n    /**\r\n     * カテゴリ別パラメータ取得\r\n     * @param characterId キャラクターID\r\n     * @param category カテゴリ\r\n     * @returns パラメータの配列\r\n     */\r\n    getParametersByCategory(characterId: string, category: string): Promise<CharacterParameter[]>;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "defaultValue": {
                "name": "defaultValue",
                "type": "number): Promise<CharacterParameter[]>",
                "optional": false
              },
              "parameterId": {
                "name": "parameterId",
                "type": "string",
                "optional": false
              },
              "value": {
                "name": "value",
                "type": "number): Promise<CharacterParameter | null>",
                "optional": false
              },
              "delta": {
                "name": "delta",
                "type": "number): Promise<CharacterParameter | null>",
                "optional": false
              },
              "category": {
                "name": "category",
                "type": "string): Promise<CharacterParameter[]>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 520
          },
          "ISkillService": {
            "name": "ISkillService",
            "body": "/**\r\n     * キャラクタースキル取得\r\n     * @param characterId キャラクターID\r\n     * @returns スキルの配列\r\n     */\r\n    getCharacterSkills(characterId: string): Promise<Skill[]>;\r\n  \r\n    /**\r\n     * スキル取得\r\n     * @param characterId キャラクターID\r\n     * @param skillId スキルID\r\n     * @returns スキルまたはnull\r\n     */\r\n    acquireSkill(characterId: string, skillId: string, forced?: boolean): Promise<boolean>;\r\n  \r\n    /**\r\n     * スキルレベル更新\r\n     * @param characterId キャラクターID\r\n     * @param skillId スキルID\r\n     * @param newLevel 新しいレベル\r\n     * @returns 成功したかどうか\r\n     */\r\n    updateSkillLevel(characterId: string, skillId: string, newLevel: number): Promise<boolean>;\r\n  \r\n    /**\r\n     * 習熟度増加\r\n     * @param characterId キャラクターID\r\n     * @param skillId スキルID\r\n     * @param amount 増加量\r\n     * @returns 成功したかどうか\r\n     */\r\n    increaseProficiency(characterId: string, skillId: string, amount: number): Promise<boolean>;\r\n  \r\n    /**\r\n     * スキル習得要件確認\r\n     * @param characterId キャラクターID\r\n     * @param skillId スキルID\r\n     * @returns 要件を満たすかどうか\r\n     */\r\n    checkSkillRequirements(characterId: string, skillId: string): Promise<boolean>;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "skillId": {
                "name": "skillId",
                "type": "string): Promise<boolean>",
                "optional": false
              },
              "forced": {
                "name": "forced",
                "type": "boolean): Promise<boolean>",
                "optional": true
              },
              "newLevel": {
                "name": "newLevel",
                "type": "number): Promise<boolean>",
                "optional": false
              },
              "amount": {
                "name": "amount",
                "type": "number): Promise<boolean>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 567
          },
          "ICharacterAnalyzer": {
            "name": "ICharacterAnalyzer",
            "body": "/**\r\n     * 変化検出\r\n     * @param baseState 基本状態\r\n     * @param currentState 現在状態\r\n     * @returns 検出された差分\r\n     */\r\n    detectChanges(baseState: any, currentState: any): CharacterDiff;\r\n  \r\n    /**\r\n     * 変化分類\r\n     * @param characterDiff キャラクター差分\r\n     * @param plotContext プロット文脈\r\n     * @returns 分類された差分\r\n     */\r\n    classifyChanges(characterDiff: CharacterDiff, plotContext?: PlotContext): Promise<CharacterDiff>;\r\n  \r\n    /**\r\n     * アクション検証\r\n     * @param character キャラクター\r\n     * @param proposedAction 提案されたアクション\r\n     * @param context 文脈\r\n     * @returns 検証結果\r\n     */\r\n    validateAction(character: Character, proposedAction: string, context: string): Promise<ValidationResult>;\r\n  \r\n    /**\r\n     * 履歴との比較\r\n     * @param character キャラクター\r\n     * @param proposedAction 提案されたアクション\r\n     * @returns 一貫性スコア\r\n     */\r\n    compareWithHistory(character: Character, proposedAction: string): Promise<number>;",
            "properties": {
              "baseState": {
                "name": "baseState",
                "type": "any",
                "optional": false
              },
              "currentState": {
                "name": "currentState",
                "type": "any): CharacterDiff",
                "optional": false
              },
              "characterDiff": {
                "name": "characterDiff",
                "type": "CharacterDiff",
                "optional": false
              },
              "plotContext": {
                "name": "plotContext",
                "type": "PlotContext): Promise<CharacterDiff>",
                "optional": true
              },
              "character": {
                "name": "character",
                "type": "Character",
                "optional": false
              },
              "proposedAction": {
                "name": "proposedAction",
                "type": "string): Promise<number>",
                "optional": false
              },
              "context": {
                "name": "context",
                "type": "string): Promise<ValidationResult>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 614
          },
          "ITimingAnalyzer": {
            "name": "ITimingAnalyzer",
            "body": "/**\r\n     * タイミング推奨取得\r\n     * @param character キャラクター\r\n     * @param storyContext ストーリー文脈\r\n     * @returns タイミング推奨\r\n     */\r\n    getTimingRecommendation(character: Character, storyContext: StoryContext): Promise<TimingRecommendation>;\r\n  \r\n    /**\r\n     * タイミング要因分析\r\n     * @param character キャラクター\r\n     * @param context 文脈\r\n     * @returns タイミング分析結果\r\n     */\r\n    analyzeTimingFactors(character: Character, context: StoryContext): Promise<any>;",
            "properties": {
              "character": {
                "name": "character",
                "type": "Character",
                "optional": false
              },
              "storyContext": {
                "name": "storyContext",
                "type": "StoryContext): Promise<TimingRecommendation>",
                "optional": false
              },
              "context": {
                "name": "context",
                "type": "StoryContext): Promise<any>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 653
          },
          "IRelationshipAnalyzer": {
            "name": "IRelationshipAnalyzer",
            "body": "/**\r\n     * クラスター検出\r\n     * @returns キャラクタークラスターの配列\r\n     */\r\n    detectClusters(): Promise<CharacterCluster[]>;\r\n  \r\n    /**\r\n     * 対立検出\r\n     * @returns 関係性対立の配列\r\n     */\r\n    detectTensions(): Promise<any[]>;\r\n  \r\n    /**\r\n     * 関係性発展追跡\r\n     * @returns 発展情報\r\n     */\r\n    trackRelationshipDevelopments(): Promise<any[]>;\r\n  \r\n    /**\r\n     * 視覚化データ生成\r\n     * @returns 視覚化データ\r\n     */\r\n    generateVisualizationData(): Promise<any>;",
            "properties": {},
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 675
          },
          "ICharacterGenerator": {
            "name": "ICharacterGenerator",
            "body": "/**\r\n     * テンプレートからの生成\r\n     * @param template キャラクターテンプレート\r\n     * @param params パラメータ\r\n     * @returns 動的キャラクター\r\n     */\r\n    generateFromTemplate(template: CharacterTemplate, params: any): Promise<DynamicCharacter>;\r\n  \r\n    /**\r\n     * バックストーリー生成\r\n     * @param character 動的キャラクター\r\n     * @param worldContext 世界観文脈\r\n     * @returns バックストーリーテキスト\r\n     */\r\n    generateBackstory(character: DynamicCharacter, worldContext: any): Promise<string>;\r\n  \r\n    /**\r\n     * 関係性作成\r\n     * @param character 動的キャラクター\r\n     * @param existingCharacters 既存キャラクター配列\r\n     * @returns 生成された関係性の配列\r\n     */\r\n    createRelationships(character: DynamicCharacter, existingCharacters: Character[]): Promise<Relationship[]>;",
            "properties": {
              "template": {
                "name": "template",
                "type": "CharacterTemplate",
                "optional": false
              },
              "params": {
                "name": "params",
                "type": "any): Promise<DynamicCharacter>",
                "optional": false
              },
              "character": {
                "name": "character",
                "type": "DynamicCharacter",
                "optional": false
              },
              "worldContext": {
                "name": "worldContext",
                "type": "any): Promise<string>",
                "optional": false
              },
              "existingCharacters": {
                "name": "existingCharacters",
                "type": "Character[]): Promise<Relationship[]>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 705
          },
          "ITemplateProvider": {
            "name": "ITemplateProvider",
            "body": "/**\r\n     * テンプレート取得\r\n     * @param id テンプレートID\r\n     * @returns キャラクターテンプレート\r\n     */\r\n    getTemplateById(id: string): Promise<CharacterTemplate>;\r\n  \r\n    /**\r\n     * テンプレート結合\r\n     * @param archetype アーキタイプ\r\n     * @param role 役割\r\n     * @returns 結合されたテンプレート\r\n     */\r\n    combineTemplates(archetype: string, role: string): Promise<CharacterTemplate>;\r\n  \r\n    /**\r\n     * すべてのテンプレート取得\r\n     * @returns テンプレートの配列\r\n     */\r\n    getAllTemplates(): Promise<CharacterTemplate[]>;",
            "properties": {
              "id": {
                "name": "id",
                "type": "string): Promise<CharacterTemplate>",
                "optional": false
              },
              "archetype": {
                "name": "archetype",
                "type": "string",
                "optional": false
              },
              "role": {
                "name": "role",
                "type": "string): Promise<CharacterTemplate>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 735
          },
          "IEventBus": {
            "name": "IEventBus",
            "body": "/**\r\n     * イベント発行\r\n     * @param eventType イベントタイプ\r\n     * @param data イベントデータ\r\n     */\r\n    publish(eventType: string, data: any): void;\r\n  \r\n    /**\r\n     * イベント購読\r\n     * @param eventType イベントタイプ\r\n     * @param callback コールバック関数\r\n     * @returns 購読解除用の関数\r\n     */\r\n    subscribe(eventType: string, callback: (data: any) => void): EventSubscription;\r\n  \r\n    /**\r\n     * 購読解除\r\n     * @param subscription 購読情報\r\n     */\r\n    unsubscribe(subscription: EventSubscription): void;",
            "properties": {
              "eventType": {
                "name": "eventType",
                "type": "string",
                "optional": false
              },
              "data": {
                "name": "data",
                "type": "any): void",
                "optional": false
              },
              "callback": {
                "name": "callback",
                "type": "(data: any) => void): EventSubscription",
                "optional": false
              },
              "subscription": {
                "name": "subscription",
                "type": "EventSubscription): void",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 762
          },
          "ICharacterManager": {
            "name": "ICharacterManager",
            "body": "/**\r\n     * キャラクター作成\r\n     * @param data キャラクターデータ\r\n     * @returns 作成されたキャラクター\r\n     */\r\n    createCharacter(data: CharacterData): Promise<Character>;\r\n  \r\n    /**\r\n     * キャラクター取得\r\n     * @param id キャラクターID\r\n     * @returns キャラクター\r\n     */\r\n    getCharacter(id: string): Promise<Character | null>;\r\n  \r\n    /**\r\n     * キャラクター更新\r\n     * @param id キャラクターID\r\n     * @param data 更新データ\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    updateCharacter(id: string, data: Partial<CharacterData>): Promise<Character>;\r\n  \r\n    /**\r\n     * すべてのキャラクター取得\r\n     * @returns キャラクターの配列\r\n     */\r\n    getAllCharacters(): Promise<Character[]>;\r\n  \r\n    /**\r\n     * コンテンツ内のキャラクター検出\r\n     * @param content 検出対象のコンテンツ\r\n     * @returns 検出されたキャラクターの配列\r\n     */\r\n    detectCharactersInContent(content: string): Promise<Character[]>;\r\n  \r\n    /**\r\n     * キャラクター発展処理\r\n     * @param id キャラクターID\r\n     * @param events 章イベント配列\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    processCharacterDevelopment(id: string, events: ChapterEvent[]): Promise<Character>;\r\n  \r\n    /**\r\n     * 関係性更新\r\n     * @param char1Id 1人目のキャラクターID\r\n     * @param char2Id 2人目のキャラクターID\r\n     * @param type 関係性タイプ\r\n     * @param strength 関係性の強さ\r\n     */\r\n    updateRelationship(char1Id: string, char2Id: string, type: string, strength: number): Promise<void>;\r\n  \r\n    // /**\r\n    //  * キャラクター分析\r\n    //  * @param id キャラクターID\r\n    //  * @returns 分析結果\r\n    //  */\r\n    // analyzeCharacter(id: string): Promise<any>;",
            "properties": {
              "data": {
                "name": "data",
                "type": "Partial<CharacterData>): Promise<Character>",
                "optional": false
              },
              "id": {
                "name": "id",
                "type": "string): Promise<any>",
                "optional": false
              },
              "content": {
                "name": "content",
                "type": "string): Promise<Character[]>",
                "optional": false
              },
              "events": {
                "name": "events",
                "type": "ChapterEvent[]): Promise<Character>",
                "optional": false
              },
              "char1Id": {
                "name": "char1Id",
                "type": "string",
                "optional": false
              },
              "char2Id": {
                "name": "char2Id",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "strength": {
                "name": "strength",
                "type": "number): Promise<void>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 789
          }
        },
        "types": {},
        "enums": {},
        "imports": [
          {
            "types": [
              "Character",
              "CharacterData",
              "CharacterParameter",
              "CharacterState",
              "CharacterType",
              "ChapterEvent",
              "CharacterPsychology",
              "CharacterDevelopment",
              "DevelopmentPath",
              "GrowthPlan",
              "GrowthResult",
              "PlotContext",
              "Relationship",
              "RelationshipAnalysis",
              "CharacterDiff",
              "Skill",
              "TimingRecommendation",
              "StoryContext",
              "ValidationResult",
              "DynamicCharacter",
              "CharacterTemplate",
              "CharacterCluster",
              "EventSubscription",
              "RelationshipResponse"
            ],
            "source": "./types",
            "isTypeOnly": true
          }
        ],
        "exports": [
          "ICharacterRepository",
          "IRelationshipRepository",
          "IParameterRepository",
          "ISkillRepository",
          "IGrowthPlanRepository",
          "ICharacterService",
          "IDetectionService",
          "IEvolutionService",
          "IPsychologyService",
          "IRelationshipService",
          "IParameterService",
          "ISkillService",
          "ICharacterAnalyzer",
          "ITimingAnalyzer",
          "IRelationshipAnalyzer",
          "ICharacterGenerator",
          "ITemplateProvider",
          "IEventBus",
          "ICharacterManager"
        ],
        "inlineTypes": [],
        "generics": [
          "Character | null",
          "Character[]",
          "void",
          "CharacterData",
          "Character",
          "Relationship | null",
          "Relationship[]",
          "RelationshipResponse",
          "any",
          "CharacterParameter[]",
          "Skill[]",
          "GrowthPlan | null",
          "GrowthPlan[]",
          "GrowthPlan",
          "ValidationResult",
          "CharacterState",
          "string[]",
          "boolean",
          "any[]",
          "CharacterDevelopment",
          "DevelopmentPath",
          "GrowthResult",
          "CharacterPsychology",
          "Map<string, Map<string, any",
          "RelationshipAnalysis",
          "CharacterCluster[]",
          "CharacterParameter | null",
          "CharacterDiff",
          "number",
          "TimingRecommendation",
          "DynamicCharacter",
          "string",
          "CharacterTemplate",
          "CharacterTemplate[]"
        ],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": [
          {
            "name": "ICharacterService",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "ICharacterService",
              "body": "/**\r\n     * キャラクター作成\r\n     * @param data キャラクターデータ\r\n     * @returns 作成されたキャラクター\r\n     */\r\n    createCharacter(data: CharacterData): Promise<Character>;\r\n  \r\n    /**\r\n     * キャラクター取得\r\n     * @param id キャラクターID\r\n     * @returns キャラクターオブジェクトまたはnull\r\n     */\r\n    getCharacter(id: string): Promise<Character | null>;\r\n  \r\n    /**\r\n     * キャラクター更新\r\n     * @param id キャラクターID\r\n     * @param updates 更新データ\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    updateCharacter(id: string, updates: Partial<CharacterData>): Promise<Character>;\r\n  \r\n    /**\r\n     * キャラクター登場記録\r\n     * @param id キャラクターID\r\n     * @param chapterNumber 章番号\r\n     * @param summary 概要\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    recordAppearance(id: string, chapterNumber: number, summary: string): Promise<Character>;\r\n  \r\n    /**\r\n     * インタラクション記録\r\n     * @param id キャラクターID\r\n     * @param targetId 対象キャラクターID\r\n     * @param type インタラクションタイプ\r\n     * @param data 追加データ\r\n     */\r\n    recordInteraction(id: string, targetId: string, type: string, data: any): Promise<void>;\r\n  \r\n    /**\r\n     * キャラクター発展処理\r\n     * @param id キャラクターID\r\n     * @param events 章イベント配列\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    processCharacterDevelopment(id: string, events: ChapterEvent[]): Promise<Character>;\r\n  \r\n    /**\r\n     * キャラクター設定の検証\r\n     * @param character キャラクター\r\n     * @returns 検証結果\r\n     */\r\n    validateCharacter(character: Character): Promise<ValidationResult>;\r\n  \r\n    /**\r\n     * キャラクター状態の更新\r\n     * @param id キャラクターID\r\n     * @param state 新しい状態\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    updateCharacterState(id: string, state: Partial<CharacterState>): Promise<Character>;",
              "properties": {
                "data": {
                  "name": "data",
                  "type": "any): Promise<void>",
                  "optional": false
                },
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "updates": {
                  "name": "updates",
                  "type": "Partial<CharacterData>): Promise<Character>",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "summary": {
                  "name": "summary",
                  "type": "string): Promise<Character>",
                  "optional": false
                },
                "targetId": {
                  "name": "targetId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "events": {
                  "name": "events",
                  "type": "ChapterEvent[]): Promise<Character>",
                  "optional": false
                },
                "character": {
                  "name": "character",
                  "type": "Character): Promise<ValidationResult>",
                  "optional": false
                },
                "state": {
                  "name": "state",
                  "type": "Partial<CharacterState>): Promise<Character>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 277
            }
          },
          {
            "name": "IDetectionService",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "IDetectionService",
              "body": "/**\r\n     * コンテンツ内のキャラクター検出\r\n     * @param content 検索対象のコンテンツ\r\n     * @returns 検出されたキャラクターの配列\r\n     */\r\n    detectCharactersInContent(content: string): Promise<Character[]>;\r\n  \r\n    /**\r\n     * キャラクターの台詞抽出\r\n     * @param character キャラクター\r\n     * @param content 抽出対象のコンテンツ\r\n     * @returns 抽出された台詞の配列\r\n     */\r\n    extractCharacterDialog(character: Character, content: string): Promise<string[]>;\r\n  \r\n    /**\r\n     * キャラクターへの言及検出\r\n     * @param character キャラクター\r\n     * @param content 検出対象のコンテンツ\r\n     * @returns 言及テキストの配列\r\n     */\r\n    detectCharacterMentions(character: Character, content: string): Promise<string[]>;\r\n  \r\n    /**\r\n     * キャラクター登場確認\r\n     * @param characterId キャラクターID\r\n     * @param content 確認対象のコンテンツ\r\n     * @returns 登場しているかどうか\r\n     */\r\n    verifyCharacterAppearance(characterId: string, content: string): Promise<boolean>;\r\n  \r\n    /**\r\n     * コンテンツ内のインタラクション検出\r\n     * @param content 検出対象のコンテンツ\r\n     * @returns 検出されたインタラクション情報\r\n     */\r\n    detectInteractions(content: string): Promise<any[]>;",
              "properties": {
                "content": {
                  "name": "content",
                  "type": "string): Promise<any[]>",
                  "optional": false
                },
                "character": {
                  "name": "character",
                  "type": "Character",
                  "optional": false
                },
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 346
            }
          },
          {
            "name": "IEvolutionService",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "IEvolutionService",
              "body": "/**\r\n     * キャラクター発展処理\r\n     * @param character キャラクター\r\n     * @param events 章イベント配列\r\n     * @returns キャラクター発展情報\r\n     */\r\n    processCharacterDevelopment(character: Character, events: ChapterEvent[]): Promise<CharacterDevelopment>;\r\n  \r\n    /**\r\n     * 発展経路生成\r\n     * @param character キャラクター\r\n     * @returns 発展経路\r\n     */\r\n    generateDevelopmentPath(character: Character): Promise<DevelopmentPath>;\r\n  \r\n    /**\r\n     * 成長計画適用\r\n     * @param characterId キャラクターID\r\n     * @param chapterNumber 章番号\r\n     * @returns 成長結果\r\n     */\r\n    applyGrowthPlan(characterId: string, chapterNumber: number): Promise<GrowthResult>;\r\n  \r\n    /**\r\n     * 発展段階評価\r\n     * @param currentStage 現在の段階\r\n     * @param development 発展情報\r\n     * @param type 評価タイプ\r\n     * @returns 新しい発展段階\r\n     */\r\n    evaluateDevelopmentStage(currentStage: number, development: CharacterDevelopment, type: string): number;\r\n  \r\n    /**\r\n     * 次のマイルストーン推定\r\n     * @param characterId キャラクターID\r\n     * @returns 次のマイルストーン情報\r\n     */\r\n    predictNextMilestone(characterId: string): Promise<any>;",
              "properties": {
                "character": {
                  "name": "character",
                  "type": "Character): Promise<DevelopmentPath>",
                  "optional": false
                },
                "events": {
                  "name": "events",
                  "type": "ChapterEvent[]): Promise<CharacterDevelopment>",
                  "optional": false
                },
                "characterId": {
                  "name": "characterId",
                  "type": "string): Promise<any>",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number): Promise<GrowthResult>",
                  "optional": false
                },
                "currentStage": {
                  "name": "currentStage",
                  "type": "number",
                  "optional": false
                },
                "development": {
                  "name": "development",
                  "type": "CharacterDevelopment",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string): number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 390
            }
          },
          {
            "name": "IPsychologyService",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "IPsychologyService",
              "body": "/**\r\n     * キャラクター心理分析\r\n     * @param character キャラクター\r\n     * @param recentEvents 最近のイベント配列\r\n     * @returns キャラクター心理情報\r\n     */\r\n    analyzeCharacterPsychology(character: Character, recentEvents: any[]): Promise<CharacterPsychology>;\r\n  \r\n    /**\r\n     * 関係性心理分析\r\n     * @param characters キャラクター配列\r\n     * @returns キャラクター間の心理的態度マップ\r\n     */\r\n    analyzeRelationshipPsychology(characters: Character[]): Promise<Map<string, Map<string, any>>>;\r\n  \r\n    /**\r\n     * 行動予測\r\n     * @param character キャラクター\r\n     * @param psychology 心理情報\r\n     * @param situations 状況配列\r\n     * @returns 予測される行動情報\r\n     */\r\n    predictBehaviors(character: Character, psychology: CharacterPsychology, situations: string[]): Promise<any>;\r\n  \r\n    /**\r\n     * 感情変化のシミュレーション\r\n     * @param characterId キャラクターID\r\n     * @param event イベント情報\r\n     * @returns 感情変化予測\r\n     */\r\n    simulateEmotionalResponse(characterId: string, event: any): Promise<any>;",
              "properties": {
                "character": {
                  "name": "character",
                  "type": "Character",
                  "optional": false
                },
                "recentEvents": {
                  "name": "recentEvents",
                  "type": "any[]): Promise<CharacterPsychology>",
                  "optional": false
                },
                "characters": {
                  "name": "characters",
                  "type": "Character[]): Promise<Map<string",
                  "optional": false
                },
                "psychology": {
                  "name": "psychology",
                  "type": "CharacterPsychology",
                  "optional": false
                },
                "situations": {
                  "name": "situations",
                  "type": "string[]): Promise<any>",
                  "optional": false
                },
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "event": {
                  "name": "event",
                  "type": "any): Promise<any>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 435
            }
          },
          {
            "name": "IRelationshipService",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "IRelationshipService",
              "body": "/**\r\n     * 関係性更新\r\n     * @param char1Id 1人目のキャラクターID\r\n     * @param char2Id 2人目のキャラクターID\r\n     * @param type 関係性タイプ\r\n     * @param strength 関係性の強さ\r\n     */\r\n    updateRelationship(char1Id: string, char2Id: string, type: string, strength: number): Promise<void>;\r\n  \r\n    /**\r\n     * 関連キャラクター取得\r\n     * @param characterId キャラクターID\r\n     * @returns 関連するキャラクターIDの配列\r\n     */\r\n    getConnectedCharacters(characterId: string): Promise<string[]>;\r\n  \r\n    /**\r\n     * キャラクター関係性取得\r\n     * @param characterId キャラクターID\r\n     * @returns 関係性の配列\r\n     */\r\n    getCharacterRelationships(characterId: string): Promise<RelationshipResponse>;\r\n  \r\n    /**\r\n     * 関係性動態分析\r\n     * @returns 関係性分析結果\r\n     */\r\n    analyzeRelationshipDynamics(): Promise<RelationshipAnalysis>;\r\n  \r\n    /**\r\n     * 関係性クラスター検出\r\n     * @returns キャラクタークラスターの配列\r\n     */\r\n    detectRelationshipClusters(): Promise<CharacterCluster[]>;\r\n  \r\n    /**\r\n     * 対立関係検出\r\n     * @returns 対立関係情報の配列\r\n     */\r\n    detectTensions(): Promise<any[]>;",
              "properties": {
                "char1Id": {
                  "name": "char1Id",
                  "type": "string",
                  "optional": false
                },
                "char2Id": {
                  "name": "char2Id",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "strength": {
                  "name": "strength",
                  "type": "number): Promise<void>",
                  "optional": false
                },
                "characterId": {
                  "name": "characterId",
                  "type": "string): Promise<RelationshipResponse>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 473
            }
          },
          {
            "name": "IParameterService",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "IParameterService",
              "body": "/**\r\n     * キャラクターパラメータ初期化\r\n     * @param characterId キャラクターID\r\n     * @param defaultValue デフォルト値\r\n     * @returns 初期化されたパラメータ配列\r\n     */\r\n    initializeCharacterParameters(characterId: string, defaultValue: number): Promise<CharacterParameter[]>;\r\n  \r\n    /**\r\n     * キャラクターパラメータ取得\r\n     * @param characterId キャラクターID\r\n     * @returns パラメータの配列\r\n     */\r\n    getCharacterParameters(characterId: string): Promise<CharacterParameter[]>;\r\n  \r\n    /**\r\n     * パラメータ値設定\r\n     * @param characterId キャラクターID\r\n     * @param parameterId パラメータID\r\n     * @param value 新しい値\r\n     * @returns 更新されたパラメータまたはnull\r\n     */\r\n    setParameterValue(characterId: string, parameterId: string, value: number): Promise<CharacterParameter | null>;\r\n  \r\n    /**\r\n     * パラメータ修正\r\n     * @param characterId キャラクターID\r\n     * @param parameterId パラメータID\r\n     * @param delta 変化量\r\n     * @returns 更新されたパラメータまたはnull\r\n     */\r\n    modifyParameter(characterId: string, parameterId: string, delta: number): Promise<CharacterParameter | null>;\r\n  \r\n    /**\r\n     * カテゴリ別パラメータ取得\r\n     * @param characterId キャラクターID\r\n     * @param category カテゴリ\r\n     * @returns パラメータの配列\r\n     */\r\n    getParametersByCategory(characterId: string, category: string): Promise<CharacterParameter[]>;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "defaultValue": {
                  "name": "defaultValue",
                  "type": "number): Promise<CharacterParameter[]>",
                  "optional": false
                },
                "parameterId": {
                  "name": "parameterId",
                  "type": "string",
                  "optional": false
                },
                "value": {
                  "name": "value",
                  "type": "number): Promise<CharacterParameter | null>",
                  "optional": false
                },
                "delta": {
                  "name": "delta",
                  "type": "number): Promise<CharacterParameter | null>",
                  "optional": false
                },
                "category": {
                  "name": "category",
                  "type": "string): Promise<CharacterParameter[]>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 520
            }
          },
          {
            "name": "ISkillService",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "ISkillService",
              "body": "/**\r\n     * キャラクタースキル取得\r\n     * @param characterId キャラクターID\r\n     * @returns スキルの配列\r\n     */\r\n    getCharacterSkills(characterId: string): Promise<Skill[]>;\r\n  \r\n    /**\r\n     * スキル取得\r\n     * @param characterId キャラクターID\r\n     * @param skillId スキルID\r\n     * @returns スキルまたはnull\r\n     */\r\n    acquireSkill(characterId: string, skillId: string, forced?: boolean): Promise<boolean>;\r\n  \r\n    /**\r\n     * スキルレベル更新\r\n     * @param characterId キャラクターID\r\n     * @param skillId スキルID\r\n     * @param newLevel 新しいレベル\r\n     * @returns 成功したかどうか\r\n     */\r\n    updateSkillLevel(characterId: string, skillId: string, newLevel: number): Promise<boolean>;\r\n  \r\n    /**\r\n     * 習熟度増加\r\n     * @param characterId キャラクターID\r\n     * @param skillId スキルID\r\n     * @param amount 増加量\r\n     * @returns 成功したかどうか\r\n     */\r\n    increaseProficiency(characterId: string, skillId: string, amount: number): Promise<boolean>;\r\n  \r\n    /**\r\n     * スキル習得要件確認\r\n     * @param characterId キャラクターID\r\n     * @param skillId スキルID\r\n     * @returns 要件を満たすかどうか\r\n     */\r\n    checkSkillRequirements(characterId: string, skillId: string): Promise<boolean>;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "skillId": {
                  "name": "skillId",
                  "type": "string): Promise<boolean>",
                  "optional": false
                },
                "forced": {
                  "name": "forced",
                  "type": "boolean): Promise<boolean>",
                  "optional": true
                },
                "newLevel": {
                  "name": "newLevel",
                  "type": "number): Promise<boolean>",
                  "optional": false
                },
                "amount": {
                  "name": "amount",
                  "type": "number): Promise<boolean>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 567
            }
          },
          {
            "name": "ICharacterManager",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "ICharacterManager",
              "body": "/**\r\n     * キャラクター作成\r\n     * @param data キャラクターデータ\r\n     * @returns 作成されたキャラクター\r\n     */\r\n    createCharacter(data: CharacterData): Promise<Character>;\r\n  \r\n    /**\r\n     * キャラクター取得\r\n     * @param id キャラクターID\r\n     * @returns キャラクター\r\n     */\r\n    getCharacter(id: string): Promise<Character | null>;\r\n  \r\n    /**\r\n     * キャラクター更新\r\n     * @param id キャラクターID\r\n     * @param data 更新データ\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    updateCharacter(id: string, data: Partial<CharacterData>): Promise<Character>;\r\n  \r\n    /**\r\n     * すべてのキャラクター取得\r\n     * @returns キャラクターの配列\r\n     */\r\n    getAllCharacters(): Promise<Character[]>;\r\n  \r\n    /**\r\n     * コンテンツ内のキャラクター検出\r\n     * @param content 検出対象のコンテンツ\r\n     * @returns 検出されたキャラクターの配列\r\n     */\r\n    detectCharactersInContent(content: string): Promise<Character[]>;\r\n  \r\n    /**\r\n     * キャラクター発展処理\r\n     * @param id キャラクターID\r\n     * @param events 章イベント配列\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    processCharacterDevelopment(id: string, events: ChapterEvent[]): Promise<Character>;\r\n  \r\n    /**\r\n     * 関係性更新\r\n     * @param char1Id 1人目のキャラクターID\r\n     * @param char2Id 2人目のキャラクターID\r\n     * @param type 関係性タイプ\r\n     * @param strength 関係性の強さ\r\n     */\r\n    updateRelationship(char1Id: string, char2Id: string, type: string, strength: number): Promise<void>;\r\n  \r\n    // /**\r\n    //  * キャラクター分析\r\n    //  * @param id キャラクターID\r\n    //  * @returns 分析結果\r\n    //  */\r\n    // analyzeCharacter(id: string): Promise<any>;",
              "properties": {
                "data": {
                  "name": "data",
                  "type": "Partial<CharacterData>): Promise<Character>",
                  "optional": false
                },
                "id": {
                  "name": "id",
                  "type": "string): Promise<any>",
                  "optional": false
                },
                "content": {
                  "name": "content",
                  "type": "string): Promise<Character[]>",
                  "optional": false
                },
                "events": {
                  "name": "events",
                  "type": "ChapterEvent[]): Promise<Character>",
                  "optional": false
                },
                "char1Id": {
                  "name": "char1Id",
                  "type": "string",
                  "optional": false
                },
                "char2Id": {
                  "name": "char2Id",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "strength": {
                  "name": "strength",
                  "type": "number): Promise<void>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 789
            }
          }
        ]
      },
      "lib\\characters\\core\\types.ts": {
        "filePath": "lib\\characters\\core\\types.ts",
        "fileSize": 27991,
        "system": "characters",
        "module": "characters/core",
        "interfaces": {
          "PersonalityTraits": {
            "name": "PersonalityTraits",
            "body": "/** 特性のリスト（例: \"勇敢\", \"慎重\", \"明るい\"など） */\r\n    traits: string[];\r\n\r\n    /** 言葉使いや話し方のパターン */\r\n    speechPatterns?: string[];\r\n\r\n    /** 特徴的な癖や習慣 */\r\n    quirks?: string[];\r\n\r\n    /** 重要視する価値観 */\r\n    values?: string[];\r\n\r\n    /** 動的な性格特性（発展処理で使用） */\r\n    [key: string]: any;",
            "properties": {
              "traits": {
                "name": "traits",
                "type": "string[]",
                "optional": false
              },
              "speechPatterns": {
                "name": "speechPatterns",
                "type": "string[]",
                "optional": true
              },
              "quirks": {
                "name": "quirks",
                "type": "string[]",
                "optional": true
              },
              "values": {
                "name": "values",
                "type": "string[]",
                "optional": true
              },
              "key": {
                "name": "key",
                "type": "string]: any",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 36
          },
          "Appearance": {
            "name": "Appearance",
            "body": "/** 物理的特徴の説明 */\r\n    physicalDescription: string;\r\n\r\n    /** 特徴的な衣装や装飾品 */\r\n    clothing: string;\r\n\r\n    /** 際立った特徴 */\r\n    distinguishingFeatures: string[];",
            "properties": {
              "physicalDescription": {
                "name": "physicalDescription",
                "type": "string",
                "optional": false
              },
              "clothing": {
                "name": "clothing",
                "type": "string",
                "optional": false
              },
              "distinguishingFeatures": {
                "name": "distinguishingFeatures",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 56
          },
          "Backstory": {
            "name": "Backstory",
            "body": "/** 背景の概要 */\r\n    summary: string;\r\n\r\n    /** 重要な過去の出来事 */\r\n    significantEvents: string[];\r\n\r\n    /** 過去のトラウマや影響を受けた出来事 */\r\n    trauma?: string[];\r\n\r\n    /** 生い立ちに関する情報 */\r\n    origin?: string;\r\n\r\n    /** 詳細な歴史 (昇格時に生成) */\r\n    detailedHistory?: string;\r\n\r\n    /** 動機 (昇格時に生成) */\r\n    motivations?: string;\r\n\r\n    /** 秘密 (昇格時に生成) */\r\n    secrets?: string;",
            "properties": {
              "summary": {
                "name": "summary",
                "type": "string",
                "optional": false
              },
              "significantEvents": {
                "name": "significantEvents",
                "type": "string[]",
                "optional": false
              },
              "trauma": {
                "name": "trauma",
                "type": "string[]",
                "optional": true
              },
              "origin": {
                "name": "origin",
                "type": "string",
                "optional": true
              },
              "detailedHistory": {
                "name": "detailedHistory",
                "type": "string",
                "optional": true
              },
              "motivations": {
                "name": "motivations",
                "type": "string",
                "optional": true
              },
              "secrets": {
                "name": "secrets",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 70
          },
          "Relationship": {
            "name": "Relationship",
            "body": "/** 関係のある相手のキャラクターID */\r\n    targetId: string;\r\n\r\n    /** 関係を持つ相手の名前 */\r\n    targetName?: string;\r\n\r\n    /** 関係の種類 */\r\n    type: RelationshipType;\r\n\r\n    /** 関係の強さ（0-1） */\r\n    strength: number;\r\n\r\n    /** 関係の説明 */\r\n    description?: string;\r\n\r\n    /** 最後のインタラクション */\r\n    lastInteraction?: Date;\r\n\r\n    /** 関係の履歴 */\r\n    history?: any[];",
            "properties": {
              "targetId": {
                "name": "targetId",
                "type": "string",
                "optional": false
              },
              "targetName": {
                "name": "targetName",
                "type": "string",
                "optional": true
              },
              "type": {
                "name": "type",
                "type": "RelationshipType",
                "optional": false
              },
              "strength": {
                "name": "strength",
                "type": "number",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": true
              },
              "lastInteraction": {
                "name": "lastInteraction",
                "type": "Date",
                "optional": true
              },
              "history": {
                "name": "history",
                "type": "any[]",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 96
          },
          "CharacterAppearance": {
            "name": "CharacterAppearance",
            "body": "chapterNumber: number;\r\n    timestamp: Date;\r\n    significance: number;\r\n    summary?: string;\r\n    emotionalImpact?: number;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "Date",
                "optional": false
              },
              "significance": {
                "name": "significance",
                "type": "number",
                "optional": false
              },
              "summary": {
                "name": "summary",
                "type": "string",
                "optional": true
              },
              "emotionalImpact": {
                "name": "emotionalImpact",
                "type": "number",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 122
          },
          "Interaction": {
            "name": "Interaction",
            "body": "chapterNumber: number;\r\n    targetCharacterId: string;\r\n    type: string;\r\n    description: string;\r\n    impact: number;\r\n    timestamp: Date;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "targetCharacterId": {
                "name": "targetCharacterId",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "impact": {
                "name": "impact",
                "type": "number",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "Date",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 133
          },
          "DevelopmentMilestone": {
            "name": "DevelopmentMilestone",
            "body": "stage: number;\r\n    description: string;\r\n    achievedAt?: Date;\r\n    chapterNumber?: number;",
            "properties": {
              "stage": {
                "name": "stage",
                "type": "number",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "achievedAt": {
                "name": "achievedAt",
                "type": "Date",
                "optional": true
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 145
          },
          "CharacterHistory": {
            "name": "CharacterHistory",
            "body": "appearances: CharacterAppearance[];\r\n    interactions: Interaction[];\r\n    developmentPath: DevelopmentMilestone[];",
            "properties": {
              "appearances": {
                "name": "appearances",
                "type": "CharacterAppearance[]",
                "optional": false
              },
              "interactions": {
                "name": "interactions",
                "type": "Interaction[]",
                "optional": false
              },
              "developmentPath": {
                "name": "developmentPath",
                "type": "DevelopmentMilestone[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 155
          },
          "CharacterState": {
            "name": "CharacterState",
            "body": "isActive: boolean;\r\n    relationships?: Relationship[];\r\n    developmentStage: number;\r\n    lastAppearance: number | null;\r\n    emotionalState: EmotionalState;\r\n    summary?: string;\r\n    significance?: number;\r\n    hasDialogue?: boolean;\r\n    changes?: CharacterChangeInfo[];\r\n    development: string;\r\n    isDeceased?: boolean;              // 死亡状態\r\n    maritalStatus?: string;            // 結婚状態\r\n    spouseId?: string | null;          // 配偶者ID\r\n    parentIds?: string[];              // 親キャラクターID\r\n    childrenIds?: string[];            // 子キャラクターID\r\n    skills?: string[];                 // 習得スキル\r\n    location?: string;                 // 現在地\r\n    lastStateChange?: {                // 最終状態変化\r\n        type: string;\r\n        chapterNumber: number;\r\n        description: string;",
            "properties": {
              "isActive": {
                "name": "isActive",
                "type": "boolean",
                "optional": false
              },
              "relationships": {
                "name": "relationships",
                "type": "Relationship[]",
                "optional": true
              },
              "developmentStage": {
                "name": "developmentStage",
                "type": "number",
                "optional": false
              },
              "lastAppearance": {
                "name": "lastAppearance",
                "type": "number | null",
                "optional": false
              },
              "emotionalState": {
                "name": "emotionalState",
                "type": "EmotionalState",
                "optional": false
              },
              "summary": {
                "name": "summary",
                "type": "string",
                "optional": true
              },
              "significance": {
                "name": "significance",
                "type": "number",
                "optional": true
              },
              "hasDialogue": {
                "name": "hasDialogue",
                "type": "boolean",
                "optional": true
              },
              "changes": {
                "name": "changes",
                "type": "CharacterChangeInfo[]",
                "optional": true
              },
              "development": {
                "name": "development",
                "type": "string",
                "optional": false
              },
              "isDeceased": {
                "name": "isDeceased",
                "type": "boolean",
                "optional": true
              },
              "maritalStatus": {
                "name": "maritalStatus",
                "type": "string",
                "optional": true
              },
              "spouseId": {
                "name": "spouseId",
                "type": "string | null",
                "optional": true
              },
              "parentIds": {
                "name": "parentIds",
                "type": "string[]",
                "optional": true
              },
              "childrenIds": {
                "name": "childrenIds",
                "type": "string[]",
                "optional": true
              },
              "skills": {
                "name": "skills",
                "type": "string[]",
                "optional": true
              },
              "location": {
                "name": "location",
                "type": "string",
                "optional": true
              },
              "lastStateChange": {
                "name": "lastStateChange",
                "type": "{                // 最終状態変化",
                "optional": true
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 164
          },
          "CharacterChangeInfo": {
            "name": "CharacterChangeInfo",
            "body": "attribute: string;\r\n    previousValue: any;\r\n    currentValue: any;\r\n    classification?: {\r\n        type: string;\r\n        scope: string;\r\n        confidence: number;\r\n        explanation: string;\r\n        narrativeSignificance?: number;",
            "properties": {
              "attribute": {
                "name": "attribute",
                "type": "string",
                "optional": false
              },
              "previousValue": {
                "name": "previousValue",
                "type": "any",
                "optional": false
              },
              "currentValue": {
                "name": "currentValue",
                "type": "any",
                "optional": false
              },
              "classification": {
                "name": "classification",
                "type": "{",
                "optional": true
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "scope": {
                "name": "scope",
                "type": "string",
                "optional": false
              },
              "confidence": {
                "name": "confidence",
                "type": "number",
                "optional": false
              },
              "explanation": {
                "name": "explanation",
                "type": "string",
                "optional": false
              },
              "narrativeSignificance": {
                "name": "narrativeSignificance",
                "type": "number",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 242
          },
          "PromotionRecord": {
            "name": "PromotionRecord",
            "body": "fromType: CharacterType;\r\n    toType: CharacterType;\r\n    timestamp: Date;\r\n    reason?: string;",
            "properties": {
              "fromType": {
                "name": "fromType",
                "type": "CharacterType",
                "optional": false
              },
              "toType": {
                "name": "toType",
                "type": "CharacterType",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "Date",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 258
          },
          "CharacterMetadata": {
            "name": "CharacterMetadata",
            "body": "createdAt: Date;\r\n    lastUpdated: Date;\r\n    version?: number;\r\n    tags?: string[];\r\n    /** 永続的イベント履歴 */\r\n    persistentEvents?: Array<{\r\n        type: string;\r\n        chapterNumber: number;\r\n        description: string;",
            "properties": {
              "createdAt": {
                "name": "createdAt",
                "type": "Date",
                "optional": false
              },
              "lastUpdated": {
                "name": "lastUpdated",
                "type": "Date",
                "optional": false
              },
              "version": {
                "name": "version",
                "type": "number",
                "optional": true
              },
              "tags": {
                "name": "tags",
                "type": "string[]",
                "optional": true
              },
              "persistentEvents": {
                "name": "persistentEvents",
                "type": "Array<{",
                "optional": true
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 268
          },
          "Skill": {
            "name": "Skill",
            "body": "id: string;\r\n    name: string;\r\n    description: string;\r\n    level: number;         // 0: 未習得, 1-5: 初級〜伝説級\r\n    requiredParameters: Array<{\r\n        parameterId: string;\r\n        minValue: number;    // このパラメータの最小必要値",
            "properties": {
              "0": {
                "name": "0",
                "type": "未習得",
                "optional": false
              },
              "5": {
                "name": "5",
                "type": "初級〜伝説級",
                "optional": false
              },
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "level": {
                "name": "level",
                "type": "number",
                "optional": false
              },
              "requiredParameters": {
                "name": "requiredParameters",
                "type": "Array<{",
                "optional": false
              },
              "parameterId": {
                "name": "parameterId",
                "type": "string",
                "optional": false
              },
              "minValue": {
                "name": "minValue",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 284
          },
          "GrowthPlan": {
            "name": "GrowthPlan",
            "body": "id: string;\r\n    characterId: string;\r\n    name: string;\r\n    description: string;\r\n    targetParameters: Array<{\r\n        parameterId: string;\r\n        targetValue: number;\r\n        priority: number;    // 1-10 優先度",
            "properties": {
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "targetParameters": {
                "name": "targetParameters",
                "type": "Array<{",
                "optional": false
              },
              "parameterId": {
                "name": "parameterId",
                "type": "string",
                "optional": false
              },
              "targetValue": {
                "name": "targetValue",
                "type": "number",
                "optional": false
              },
              "priority": {
                "name": "priority",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 306
          },
          "GrowthPhase": {
            "name": "GrowthPhase",
            "body": "id: string;\r\n    name: string;\r\n    description: string;\r\n    stageRequirement: number;   // 必要発展段階\r\n    chapterEstimate: [number, number]; // 予想章範囲\r\n    parameterChanges: Array<{\r\n        parameterId: string;\r\n        change: number;      // 変化量",
            "properties": {
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "stageRequirement": {
                "name": "stageRequirement",
                "type": "number",
                "optional": false
              },
              "chapterEstimate": {
                "name": "chapterEstimate",
                "type": "[number",
                "optional": false
              },
              "parameterChanges": {
                "name": "parameterChanges",
                "type": "Array<{",
                "optional": false
              },
              "parameterId": {
                "name": "parameterId",
                "type": "string",
                "optional": false
              },
              "change": {
                "name": "change",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 329
          },
          "CharacterParameter": {
            "name": "CharacterParameter",
            "body": "id: string;\r\n    name: string;\r\n    description: string;\r\n    value: number;         // 現在値（0-100）\r\n    growth: number;        // 成長率\r\n    category: ParameterCategory;\r\n    tags: string[];        // タグ（「戦闘」「ビジネス」「対人」など）",
            "properties": {
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "value": {
                "name": "value",
                "type": "number",
                "optional": false
              },
              "growth": {
                "name": "growth",
                "type": "number",
                "optional": false
              },
              "category": {
                "name": "category",
                "type": "ParameterCategory",
                "optional": false
              },
              "tags": {
                "name": "tags",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 347
          },
          "MentalGrowthState": {
            "name": "MentalGrowthState",
            "body": "traumas: Array<{\r\n        id: string;\r\n        description: string;\r\n        resolved: boolean;\r\n        resolutionChapter?: number;",
            "properties": {
              "traumas": {
                "name": "traumas",
                "type": "Array<{",
                "optional": false
              },
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "resolved": {
                "name": "resolved",
                "type": "boolean",
                "optional": false
              },
              "resolutionChapter": {
                "name": "resolutionChapter",
                "type": "number",
                "optional": true
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 365
          },
          "Character": {
            "name": "Character",
            "body": "/** 一意のキャラクターID */\r\n    id: string;\r\n\r\n    /** キャラクター名 */\r\n    name: string;\r\n\r\n    /** ショートネーム配列 */\r\n    shortNames: string[];\r\n\r\n    /** 他キャラからの呼称 */\r\n    nicknames?: Record<string, string[]>;\r\n\r\n    /** キャラクターの説明 */\r\n    description: string;\r\n\r\n    /** キャラクターの種類 */\r\n    type: CharacterType;\r\n\r\n    /** キャラクターの重要度 (0-1) */\r\n    significance?: number;\r\n\r\n    /** キャラクターの役割 */\r\n    role?: CharacterRole;\r\n\r\n    /** キャラクターの目標 */\r\n    goals?: string[];\r\n\r\n    /** キャラクターの初登場章 */\r\n    firstAppearance?: number;\r\n\r\n    /** 性格特性 */\r\n    personality?: PersonalityTraits;\r\n\r\n    /** 外見 */\r\n    appearance?: Appearance;\r\n\r\n    /** 背景設定 */\r\n    backstory?: Backstory;\r\n\r\n    /** 他キャラクターとの関係性 */\r\n    relationships?: Relationship[];\r\n\r\n    /** キャラクターの状態 */\r\n    state: CharacterState;\r\n\r\n    /** キャラクターの現在の状態 */\r\n    currentState?: string;\r\n\r\n    /** キャラクターの感情状態 */\r\n    emotionalState?: string;\r\n\r\n    /** キャラクターの履歴 */\r\n    history: CharacterHistory;\r\n\r\n    /** 昇格履歴 */\r\n    promotionHistory?: PromotionRecord[];\r\n\r\n    /** メタデータ */\r\n    metadata: CharacterMetadata;\r\n\r\n    /** 心理情報 - フェーズ1: 深層キャラクター心理モデル */\r\n    psychology?: CharacterPsychology;",
            "properties": {
              "1": {
                "name": "1",
                "type": "深層キャラクター心理モデル */",
                "optional": false
              },
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "shortNames": {
                "name": "shortNames",
                "type": "string[]",
                "optional": false
              },
              "nicknames": {
                "name": "nicknames",
                "type": "Record<string",
                "optional": true
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "CharacterType",
                "optional": false
              },
              "significance": {
                "name": "significance",
                "type": "number",
                "optional": true
              },
              "role": {
                "name": "role",
                "type": "CharacterRole",
                "optional": true
              },
              "goals": {
                "name": "goals",
                "type": "string[]",
                "optional": true
              },
              "firstAppearance": {
                "name": "firstAppearance",
                "type": "number",
                "optional": true
              },
              "personality": {
                "name": "personality",
                "type": "PersonalityTraits",
                "optional": true
              },
              "appearance": {
                "name": "appearance",
                "type": "Appearance",
                "optional": true
              },
              "backstory": {
                "name": "backstory",
                "type": "Backstory",
                "optional": true
              },
              "relationships": {
                "name": "relationships",
                "type": "Relationship[]",
                "optional": true
              },
              "state": {
                "name": "state",
                "type": "CharacterState",
                "optional": false
              },
              "currentState": {
                "name": "currentState",
                "type": "string",
                "optional": true
              },
              "emotionalState": {
                "name": "emotionalState",
                "type": "string",
                "optional": true
              },
              "history": {
                "name": "history",
                "type": "CharacterHistory",
                "optional": false
              },
              "promotionHistory": {
                "name": "promotionHistory",
                "type": "PromotionRecord[]",
                "optional": true
              },
              "metadata": {
                "name": "metadata",
                "type": "CharacterMetadata",
                "optional": false
              },
              "psychology": {
                "name": "psychology",
                "type": "CharacterPsychology",
                "optional": true
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 390
          },
          "RelationshipResponse": {
            "name": "RelationshipResponse",
            "body": "relationships: Relationship[];",
            "properties": {
              "relationships": {
                "name": "relationships",
                "type": "Relationship[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 455
          },
          "ImmutableCharacterData": {
            "name": "ImmutableCharacterData",
            "body": "name: string;\r\n    shortNames: string[];\r\n    description: string;\r\n    appearance?: Appearance;\r\n    backstory?: Backstory;",
            "properties": {
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "shortNames": {
                "name": "shortNames",
                "type": "string[]",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "appearance": {
                "name": "appearance",
                "type": "Appearance",
                "optional": true
              },
              "backstory": {
                "name": "backstory",
                "type": "Backstory",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 462
          },
          "MutableCharacterData": {
            "name": "MutableCharacterData",
            "body": "type: CharacterType;\r\n    role?: CharacterRole;\r\n    personality?: PersonalityTraits;\r\n    nicknames?: Record<string, string[]>;\r\n    goals?: string[];\r\n    relationships?: Relationship[];\r\n    state: Partial<CharacterState>;\r\n    currentState?: string;\r\n    emotionalState?: string;",
            "properties": {
              "type": {
                "name": "type",
                "type": "CharacterType",
                "optional": false
              },
              "role": {
                "name": "role",
                "type": "CharacterRole",
                "optional": true
              },
              "personality": {
                "name": "personality",
                "type": "PersonalityTraits",
                "optional": true
              },
              "nicknames": {
                "name": "nicknames",
                "type": "Record<string",
                "optional": true
              },
              "goals": {
                "name": "goals",
                "type": "string[]",
                "optional": true
              },
              "relationships": {
                "name": "relationships",
                "type": "Relationship[]",
                "optional": true
              },
              "state": {
                "name": "state",
                "type": "Partial<CharacterState>",
                "optional": false
              },
              "currentState": {
                "name": "currentState",
                "type": "string",
                "optional": true
              },
              "emotionalState": {
                "name": "emotionalState",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 473
          },
          "CharacterData": {
            "name": "CharacterData",
            "body": "metadata?: {\r\n        tags?: string[];",
            "properties": {
              "metadata": {
                "name": "metadata",
                "type": "{",
                "optional": true
              },
              "tags": {
                "name": "tags",
                "type": "string[]",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 489
          },
          "CharacterMetrics": {
            "name": "CharacterMetrics",
            "body": "appearances: number;\r\n    interactions: number;\r\n    plotRelevance: number;\r\n    characterDevelopment: number;\r\n    readerEngagement: number;",
            "properties": {
              "appearances": {
                "name": "appearances",
                "type": "number",
                "optional": false
              },
              "interactions": {
                "name": "interactions",
                "type": "number",
                "optional": false
              },
              "plotRelevance": {
                "name": "plotRelevance",
                "type": "number",
                "optional": false
              },
              "characterDevelopment": {
                "name": "characterDevelopment",
                "type": "number",
                "optional": false
              },
              "readerEngagement": {
                "name": "readerEngagement",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 498
          },
          "PromotionEvaluation": {
            "name": "PromotionEvaluation",
            "body": "/** 昇格の適格性 */\r\n    eligible: boolean;\r\n\r\n    /** 目標キャラクタータイプ */\r\n    targetType: CharacterType | null;\r\n\r\n    /** 昇格スコア */\r\n    score: number;\r\n\r\n    /** 評価レコメンデーション */\r\n    recommendation: string;",
            "properties": {
              "eligible": {
                "name": "eligible",
                "type": "boolean",
                "optional": false
              },
              "targetType": {
                "name": "targetType",
                "type": "CharacterType | null",
                "optional": false
              },
              "score": {
                "name": "score",
                "type": "number",
                "optional": false
              },
              "recommendation": {
                "name": "recommendation",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 509
          },
          "CharacterCluster": {
            "name": "CharacterCluster",
            "body": "// 基本プロパティ\r\n    id: string;\r\n    members: string[];\r\n    dominantRelation: RelationshipType;\r\n    cohesion: number;\r\n\r\n    // 🆕 記憶階層システム統合プロパティ\r\n    memorySystemValidated: boolean;     // 記憶システムでの検証済みフラグ\r\n    crossLevelConsistency: number;      // クロスレベル整合性スコア (0-1)\r\n    lastAnalyzed: string;               // 最終分析日時（ISO文字列）\r\n\r\n    // オプショナル拡張プロパティ\r\n    memberNames?: string[];             // メンバー名のリスト\r\n    clusterStrength?: number;           // クラスター結束強度 (0-1)\r\n    memoryLevelDistribution?: Record<MemoryLevel, number>;  // 記憶レベル分布\r\n    evolutionHistory?: Array<{         // クラスター変遷履歴\r\n        timestamp: string;\r\n        membershipChanges: {\r\n            added: string[];\r\n            removed: string[];",
            "properties": {
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "members": {
                "name": "members",
                "type": "string[]",
                "optional": false
              },
              "dominantRelation": {
                "name": "dominantRelation",
                "type": "RelationshipType",
                "optional": false
              },
              "cohesion": {
                "name": "cohesion",
                "type": "number",
                "optional": false
              },
              "memorySystemValidated": {
                "name": "memorySystemValidated",
                "type": "boolean",
                "optional": false
              },
              "crossLevelConsistency": {
                "name": "crossLevelConsistency",
                "type": "number",
                "optional": false
              },
              "lastAnalyzed": {
                "name": "lastAnalyzed",
                "type": "string",
                "optional": false
              },
              "memberNames": {
                "name": "memberNames",
                "type": "string[]",
                "optional": true
              },
              "clusterStrength": {
                "name": "clusterStrength",
                "type": "number",
                "optional": true
              },
              "memoryLevelDistribution": {
                "name": "memoryLevelDistribution",
                "type": "Record<MemoryLevel",
                "optional": true
              },
              "evolutionHistory": {
                "name": "evolutionHistory",
                "type": "Array<{         // クラスター変遷履歴",
                "optional": true
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              },
              "membershipChanges": {
                "name": "membershipChanges",
                "type": "{",
                "optional": false
              },
              "added": {
                "name": "added",
                "type": "string[]",
                "optional": false
              },
              "removed": {
                "name": "removed",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 526
          },
          "RelationshipTension": {
            "name": "RelationshipTension",
            "body": "// 基本プロパティ\r\n    characters: [string, string];\r\n    type: RelationshipType;\r\n    intensity: number;\r\n    description: string;\r\n\r\n    // 🆕 記憶階層システム統合プロパティ\r\n    characterNames: [string, string];  // キャラクター名のペア\r\n    memorySystemValidated: boolean;    // 記憶システムでの検証済みフラグ\r\n    lastAnalyzed: string;              // 最終分析日時（ISO文字列）\r\n    stabilityTrend: 'stable' | 'increasing' | 'decreasing' | 'volatile';  // 安定性傾向\r\n\r\n    // オプショナル拡張プロパティ\r\n    crossLevelConsistency?: number;    // クロスレベル整合性スコア (0-1)\r\n    memoryLevel?: MemoryLevel;         // 主要存在記憶レベル\r\n    systemConfidence?: number;         // システム信頼度 (0-1)\r\n    relatedEvents?: Array<{           // 関連イベント履歴\r\n        chapterNumber: number;\r\n        description: string;\r\n        impact: number;\r\n        timestamp: string;",
            "properties": {
              "characters": {
                "name": "characters",
                "type": "[string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "RelationshipType",
                "optional": false
              },
              "intensity": {
                "name": "intensity",
                "type": "number",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "characterNames": {
                "name": "characterNames",
                "type": "[string",
                "optional": false
              },
              "memorySystemValidated": {
                "name": "memorySystemValidated",
                "type": "boolean",
                "optional": false
              },
              "lastAnalyzed": {
                "name": "lastAnalyzed",
                "type": "string",
                "optional": false
              },
              "stabilityTrend": {
                "name": "stabilityTrend",
                "type": "'stable' | 'increasing' | 'decreasing' | 'volatile'",
                "optional": false
              },
              "crossLevelConsistency": {
                "name": "crossLevelConsistency",
                "type": "number",
                "optional": true
              },
              "memoryLevel": {
                "name": "memoryLevel",
                "type": "MemoryLevel",
                "optional": true
              },
              "systemConfidence": {
                "name": "systemConfidence",
                "type": "number",
                "optional": true
              },
              "relatedEvents": {
                "name": "relatedEvents",
                "type": "Array<{           // 関連イベント履歴",
                "optional": true
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "impact": {
                "name": "impact",
                "type": "number",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 579
          },
          "RelationshipNetworkAnalysis": {
            "name": "RelationshipNetworkAnalysis",
            "body": "totalRelationships: number;\r\n    networkDensity: number;\r\n    averageConnectivity: number;\r\n    centralCharacters: Array<{\r\n        characterId: string;\r\n        characterName: string;\r\n        connectivityScore: number;\r\n        influenceRank: number;",
            "properties": {
              "totalRelationships": {
                "name": "totalRelationships",
                "type": "number",
                "optional": false
              },
              "networkDensity": {
                "name": "networkDensity",
                "type": "number",
                "optional": false
              },
              "averageConnectivity": {
                "name": "averageConnectivity",
                "type": "number",
                "optional": false
              },
              "centralCharacters": {
                "name": "centralCharacters",
                "type": "Array<{",
                "optional": false
              },
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "characterName": {
                "name": "characterName",
                "type": "string",
                "optional": false
              },
              "connectivityScore": {
                "name": "connectivityScore",
                "type": "number",
                "optional": false
              },
              "influenceRank": {
                "name": "influenceRank",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 615
          },
          "RelationshipAnalysis": {
            "name": "RelationshipAnalysis",
            "body": "clusters: CharacterCluster[];\r\n    tensions: RelationshipTension[];\r\n    developments: any[];\r\n    visualData: any;\r\n\r\n    // 🆕 記憶階層システム統合情報（新規追加）\r\n    networkAnalysis?: RelationshipNetworkAnalysis;\r\n    analysisTimestamp?: Date;\r\n    confidence?: number;\r\n    memorySystemValidated?: boolean;\r\n    systemHealthScore?: number;\r\n    crossMemoryLevelConsistency?: number;",
            "properties": {
              "clusters": {
                "name": "clusters",
                "type": "CharacterCluster[]",
                "optional": false
              },
              "tensions": {
                "name": "tensions",
                "type": "RelationshipTension[]",
                "optional": false
              },
              "developments": {
                "name": "developments",
                "type": "any[]",
                "optional": false
              },
              "visualData": {
                "name": "visualData",
                "type": "any",
                "optional": false
              },
              "networkAnalysis": {
                "name": "networkAnalysis",
                "type": "RelationshipNetworkAnalysis",
                "optional": true
              },
              "analysisTimestamp": {
                "name": "analysisTimestamp",
                "type": "Date",
                "optional": true
              },
              "confidence": {
                "name": "confidence",
                "type": "number",
                "optional": true
              },
              "memorySystemValidated": {
                "name": "memorySystemValidated",
                "type": "boolean",
                "optional": true
              },
              "systemHealthScore": {
                "name": "systemHealthScore",
                "type": "number",
                "optional": true
              },
              "crossMemoryLevelConsistency": {
                "name": "crossMemoryLevelConsistency",
                "type": "number",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 639
          },
          "DevelopmentImpact": {
            "name": "DevelopmentImpact",
            "body": "personality: Record<string, number>;\r\n    relationships: Record<string, { change: number; reason: string",
            "properties": {
              "personality": {
                "name": "personality",
                "type": "Record<string",
                "optional": false
              },
              "relationships": {
                "name": "relationships",
                "type": "Record<string",
                "optional": false
              },
              "change": {
                "name": "change",
                "type": "number",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 657
          },
          "CharacterDevelopment": {
            "name": "CharacterDevelopment",
            "body": "personalityChanges: Record<string, number>;\r\n    relationshipChanges: Record<string, { change: number; reason: string",
            "properties": {
              "personalityChanges": {
                "name": "personalityChanges",
                "type": "Record<string",
                "optional": false
              },
              "relationshipChanges": {
                "name": "relationshipChanges",
                "type": "Record<string",
                "optional": false
              },
              "change": {
                "name": "change",
                "type": "number",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 668
          },
          "DevelopmentPath": {
            "name": "DevelopmentPath",
            "body": "milestones: Milestone[];\r\n    growthEvents: GrowthEvent[];\r\n    transformationArcs: TransformationArc[];\r\n    phase: DevelopmentPathPhase;\r\n    targetStage: number;\r\n    currentStage: number;\r\n    estimatedCompletionChapter: number;",
            "properties": {
              "milestones": {
                "name": "milestones",
                "type": "Milestone[]",
                "optional": false
              },
              "growthEvents": {
                "name": "growthEvents",
                "type": "GrowthEvent[]",
                "optional": false
              },
              "transformationArcs": {
                "name": "transformationArcs",
                "type": "TransformationArc[]",
                "optional": false
              },
              "phase": {
                "name": "phase",
                "type": "DevelopmentPathPhase",
                "optional": false
              },
              "targetStage": {
                "name": "targetStage",
                "type": "number",
                "optional": false
              },
              "currentStage": {
                "name": "currentStage",
                "type": "number",
                "optional": false
              },
              "estimatedCompletionChapter": {
                "name": "estimatedCompletionChapter",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 684
          },
          "GrowthResult": {
            "name": "GrowthResult",
            "body": "/** 成長計画ID */\r\n    planId: string;\r\n    /** 適用されたキャラクターID */\r\n    characterId: string;\r\n    /** 成長前のキャラクター状態 */\r\n    beforeState: Partial<CharacterState>;\r\n    /** 成長後のキャラクター状態 */\r\n    afterState: Partial<CharacterState>;\r\n    /** パラメータ変化 */\r\n    parameterChanges: Record<string, { before: number, after: number",
            "properties": {
              "planId": {
                "name": "planId",
                "type": "string",
                "optional": false
              },
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "beforeState": {
                "name": "beforeState",
                "type": "Partial<CharacterState>",
                "optional": false
              },
              "afterState": {
                "name": "afterState",
                "type": "Partial<CharacterState>",
                "optional": false
              },
              "parameterChanges": {
                "name": "parameterChanges",
                "type": "Record<string",
                "optional": false
              },
              "before": {
                "name": "before",
                "type": "number",
                "optional": false
              },
              "after": {
                "name": "after",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 697
          },
          "ChapterEvent": {
            "name": "ChapterEvent",
            "body": "id: string;\r\n    type: string;\r\n    subType?: string;\r\n    description?: string;\r\n    affectedCharacters: string[];\r\n    relatedCharacters?: string[];\r\n    intensity?: number;\r\n    outcome?: 'SUCCESS' | 'FAILURE' | 'NEUTRAL';\r\n    skillArea?: string;\r\n    additionalData?: {\r\n        relatedSkills?: string[];\r\n        masteryLevel?: number;\r\n        [key: string]: any;",
            "properties": {
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "subType": {
                "name": "subType",
                "type": "string",
                "optional": true
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": true
              },
              "affectedCharacters": {
                "name": "affectedCharacters",
                "type": "string[]",
                "optional": false
              },
              "relatedCharacters": {
                "name": "relatedCharacters",
                "type": "string[]",
                "optional": true
              },
              "intensity": {
                "name": "intensity",
                "type": "number",
                "optional": true
              },
              "outcome": {
                "name": "outcome",
                "type": "'SUCCESS' | 'FAILURE' | 'NEUTRAL'",
                "optional": true
              },
              "skillArea": {
                "name": "skillArea",
                "type": "string",
                "optional": true
              },
              "additionalData": {
                "name": "additionalData",
                "type": "{",
                "optional": true
              },
              "relatedSkills": {
                "name": "relatedSkills",
                "type": "string[]",
                "optional": true
              },
              "masteryLevel": {
                "name": "masteryLevel",
                "type": "number",
                "optional": true
              },
              "key": {
                "name": "key",
                "type": "string]: any",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 721
          },
          "TimingFactor": {
            "name": "TimingFactor",
            "body": "type: 'PLOT_RELEVANCE' | 'CHARACTER_DEVELOPMENT' | 'NARRATIVE_PACING' | 'READER_EXPECTATIONS';\r\n    score: number;\r\n    impact: 'LOW' | 'MEDIUM' | 'HIGH';\r\n    description: string;",
            "properties": {
              "type": {
                "name": "type",
                "type": "'PLOT_RELEVANCE' | 'CHARACTER_DEVELOPMENT' | 'NARRATIVE_PACING' | 'READER_EXPECTATIONS'",
                "optional": false
              },
              "score": {
                "name": "score",
                "type": "number",
                "optional": false
              },
              "impact": {
                "name": "impact",
                "type": "'LOW' | 'MEDIUM' | 'HIGH'",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 741
          },
          "TimingAnalysis": {
            "name": "TimingAnalysis",
            "body": "optimalChapter: number;\r\n    significance: 'LOW' | 'MEDIUM' | 'HIGH';\r\n    score: number;\r\n    reason: string;\r\n    factors: TimingFactor[];\r\n    alternatives: number[];\r\n    preparation: string[];",
            "properties": {
              "optimalChapter": {
                "name": "optimalChapter",
                "type": "number",
                "optional": false
              },
              "significance": {
                "name": "significance",
                "type": "'LOW' | 'MEDIUM' | 'HIGH'",
                "optional": false
              },
              "score": {
                "name": "score",
                "type": "number",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": false
              },
              "factors": {
                "name": "factors",
                "type": "TimingFactor[]",
                "optional": false
              },
              "alternatives": {
                "name": "alternatives",
                "type": "number[]",
                "optional": false
              },
              "preparation": {
                "name": "preparation",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 751
          },
          "TimingRecommendation": {
            "name": "TimingRecommendation",
            "body": "recommendedChapter: number;\r\n    significance: 'LOW' | 'MEDIUM' | 'HIGH';\r\n    reason: string;\r\n    alternatives: number[];\r\n    preparationNeeded: string[];",
            "properties": {
              "recommendedChapter": {
                "name": "recommendedChapter",
                "type": "number",
                "optional": false
              },
              "significance": {
                "name": "significance",
                "type": "'LOW' | 'MEDIUM' | 'HIGH'",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": false
              },
              "alternatives": {
                "name": "alternatives",
                "type": "number[]",
                "optional": false
              },
              "preparationNeeded": {
                "name": "preparationNeeded",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 764
          },
          "StoryContext": {
            "name": "StoryContext",
            "body": "currentChapter: number;\r\n    totalChapters: number;\r\n    plotPoints: any[];\r\n    storyPacing?: string;\r\n    currentArc?: {\r\n        name: string;\r\n        theme: string;\r\n        approximateChapters: [number, number];",
            "properties": {
              "currentChapter": {
                "name": "currentChapter",
                "type": "number",
                "optional": false
              },
              "totalChapters": {
                "name": "totalChapters",
                "type": "number",
                "optional": false
              },
              "plotPoints": {
                "name": "plotPoints",
                "type": "any[]",
                "optional": false
              },
              "storyPacing": {
                "name": "storyPacing",
                "type": "string",
                "optional": true
              },
              "currentArc": {
                "name": "currentArc",
                "type": "{",
                "optional": true
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "theme": {
                "name": "theme",
                "type": "string",
                "optional": false
              },
              "approximateChapters": {
                "name": "approximateChapters",
                "type": "[number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 775
          },
          "TransformationArc": {
            "name": "TransformationArc",
            "body": "type: ArcType;\r\n    description: string;\r\n    theme: string;\r\n    beginStage: number;\r\n    peakStage: number;\r\n    resolutionStage: number;\r\n    keyPoints: string[];",
            "properties": {
              "type": {
                "name": "type",
                "type": "ArcType",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "theme": {
                "name": "theme",
                "type": "string",
                "optional": false
              },
              "beginStage": {
                "name": "beginStage",
                "type": "number",
                "optional": false
              },
              "peakStage": {
                "name": "peakStage",
                "type": "number",
                "optional": false
              },
              "resolutionStage": {
                "name": "resolutionStage",
                "type": "number",
                "optional": false
              },
              "keyPoints": {
                "name": "keyPoints",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 807
          },
          "GrowthEvent": {
            "name": "GrowthEvent",
            "body": "type: string;\r\n    targetChapter: number;\r\n    description: string;\r\n    significance: number;\r\n    triggers: string[];\r\n    outcomes: string[];\r\n    completed: boolean;",
            "properties": {
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "targetChapter": {
                "name": "targetChapter",
                "type": "number",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "significance": {
                "name": "significance",
                "type": "number",
                "optional": false
              },
              "triggers": {
                "name": "triggers",
                "type": "string[]",
                "optional": false
              },
              "outcomes": {
                "name": "outcomes",
                "type": "string[]",
                "optional": false
              },
              "completed": {
                "name": "completed",
                "type": "boolean",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 820
          },
          "Milestone": {
            "name": "Milestone",
            "body": "stage: number;\r\n    description: string;\r\n    requirements: any;\r\n    estimatedChapter: number;\r\n    achieved: boolean;",
            "properties": {
              "stage": {
                "name": "stage",
                "type": "number",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "requirements": {
                "name": "requirements",
                "type": "any",
                "optional": false
              },
              "estimatedChapter": {
                "name": "estimatedChapter",
                "type": "number",
                "optional": false
              },
              "achieved": {
                "name": "achieved",
                "type": "boolean",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 833
          },
          "ChangeClassification": {
            "name": "ChangeClassification",
            "body": "/** 変化のタイプ */\r\n    type: ChangeType;\r\n    /** 変化の影響範囲 */\r\n    scope: ChangeScope;\r\n    /** 分類の確信度（0-1） */\r\n    confidence: number;\r\n    /** 分類の説明 */\r\n    explanation: string;\r\n    /** プロット上の重要度（0-1）*/\r\n    narrativeSignificance?: number;",
            "properties": {
              "type": {
                "name": "type",
                "type": "ChangeType",
                "optional": false
              },
              "scope": {
                "name": "scope",
                "type": "ChangeScope",
                "optional": false
              },
              "confidence": {
                "name": "confidence",
                "type": "number",
                "optional": false
              },
              "explanation": {
                "name": "explanation",
                "type": "string",
                "optional": false
              },
              "narrativeSignificance": {
                "name": "narrativeSignificance",
                "type": "number",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 857
          },
          "CharacterChange": {
            "name": "CharacterChange",
            "body": "/** 変化した属性名 */\r\n    attribute: string;\r\n    /** 変化前の値 */\r\n    previousValue: any;\r\n    /** 変化後の値 */\r\n    currentValue: any;\r\n    /** 変化の分類（分類後に設定） */\r\n    classification?: ChangeClassification;",
            "properties": {
              "attribute": {
                "name": "attribute",
                "type": "string",
                "optional": false
              },
              "previousValue": {
                "name": "previousValue",
                "type": "any",
                "optional": false
              },
              "currentValue": {
                "name": "currentValue",
                "type": "any",
                "optional": false
              },
              "classification": {
                "name": "classification",
                "type": "ChangeClassification",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 873
          },
          "CharacterDiff": {
            "name": "CharacterDiff",
            "body": "/** キャラクター名 */\r\n    name: string;\r\n    /** キャラクターID */\r\n    id: string;\r\n    /** 最後の登場チャプター */\r\n    lastAppearance?: number;\r\n    /** 現在の発展段階 */\r\n    developmentStage?: number;\r\n    /** 検出された変化のリスト */\r\n    changes: CharacterChange[];",
            "properties": {
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "lastAppearance": {
                "name": "lastAppearance",
                "type": "number",
                "optional": true
              },
              "developmentStage": {
                "name": "developmentStage",
                "type": "number",
                "optional": true
              },
              "changes": {
                "name": "changes",
                "type": "CharacterChange[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 887
          },
          "PlotContext": {
            "name": "PlotContext",
            "body": "/** 最近のチャプター要約 */\r\n    recentSummaries: string;\r\n    /** 重要イベント */\r\n    keyEvents: string[];\r\n    /** 現在のアーク情報 */\r\n    currentArc?: string;\r\n    /** テーマ情報 */\r\n    themes?: string[];",
            "properties": {
              "recentSummaries": {
                "name": "recentSummaries",
                "type": "string",
                "optional": false
              },
              "keyEvents": {
                "name": "keyEvents",
                "type": "string[]",
                "optional": false
              },
              "currentArc": {
                "name": "currentArc",
                "type": "string",
                "optional": true
              },
              "themes": {
                "name": "themes",
                "type": "string[]",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 903
          },
          "CharacterTemplate": {
            "name": "CharacterTemplate",
            "body": "id: string;\r\n    name: string;\r\n    description?: string;\r\n    personality?: {\r\n        traits?: string[];\r\n        values?: string[];\r\n        quirks?: string[];",
            "properties": {
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": true
              },
              "personality": {
                "name": "personality",
                "type": "{",
                "optional": true
              },
              "traits": {
                "name": "traits",
                "type": "string[]",
                "optional": true
              },
              "values": {
                "name": "values",
                "type": "string[]",
                "optional": true
              },
              "quirks": {
                "name": "quirks",
                "type": "string[]",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 917
          },
          "DynamicCharacter": {
            "name": "DynamicCharacter",
            "body": "// 特別なプロパティが必要な場合は追加\r\n    generationMetadata?: {\r\n        template?: string;\r\n        generatedAt: Date;\r\n        parameters?: any;",
            "properties": {
              "generationMetadata": {
                "name": "generationMetadata",
                "type": "{",
                "optional": true
              },
              "template": {
                "name": "template",
                "type": "string",
                "optional": true
              },
              "generatedAt": {
                "name": "generatedAt",
                "type": "Date",
                "optional": false
              },
              "parameters": {
                "name": "parameters",
                "type": "any",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 943
          },
          "NarrativeState": {
            "name": "NarrativeState",
            "body": "theme?: string;\r\n    tone?: string;\r\n    setting?: string;\r\n    arc?: string;\r\n    pacing?: string;",
            "properties": {
              "theme": {
                "name": "theme",
                "type": "string",
                "optional": true
              },
              "tone": {
                "name": "tone",
                "type": "string",
                "optional": true
              },
              "setting": {
                "name": "setting",
                "type": "string",
                "optional": true
              },
              "arc": {
                "name": "arc",
                "type": "string",
                "optional": true
              },
              "pacing": {
                "name": "pacing",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 955
          },
          "NarrativeContext": {
            "name": "NarrativeContext",
            "body": "/** 物語のペース */\r\n    pacing: string;\r\n    /** 現在のアーク名 */\r\n    arc: string;\r\n    /** 現在のテーマ */\r\n    theme: string;\r\n    /** その他の物語状態情報 */\r\n    [key: string]: any;",
            "properties": {
              "pacing": {
                "name": "pacing",
                "type": "string",
                "optional": false
              },
              "arc": {
                "name": "arc",
                "type": "string",
                "optional": false
              },
              "theme": {
                "name": "theme",
                "type": "string",
                "optional": false
              },
              "key": {
                "name": "key",
                "type": "string]: any",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 967
          },
          "CharacterRecommendation": {
            "name": "CharacterRecommendation",
            "body": "/** キャラクターID */\r\n    id: string;\r\n    /** キャラクター名 */\r\n    name: string;\r\n    /** 推奨理由 */\r\n    reason: string;",
            "properties": {
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 981
          },
          "ChapterCharacterRecommendations": {
            "name": "ChapterCharacterRecommendations",
            "body": "/** メインキャラクター */\r\n    mainCharacters: CharacterRecommendation[];\r\n    /** サポートキャラクター */\r\n    supportingCharacters: CharacterRecommendation[];\r\n    /** 背景キャラクター */\r\n    backgroundCharacters: CharacterRecommendation[];",
            "properties": {
              "mainCharacters": {
                "name": "mainCharacters",
                "type": "CharacterRecommendation[]",
                "optional": false
              },
              "supportingCharacters": {
                "name": "supportingCharacters",
                "type": "CharacterRecommendation[]",
                "optional": false
              },
              "backgroundCharacters": {
                "name": "backgroundCharacters",
                "type": "CharacterRecommendation[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 993
          },
          "CharacterPsychology": {
            "name": "CharacterPsychology",
            "body": "/** 現在の欲求 */\r\n    currentDesires: string[];\r\n\r\n    /** 現在の恐れ */\r\n    currentFears: string[];\r\n\r\n    /** 内的葛藤 */\r\n    internalConflicts: string[];\r\n\r\n    /** 感情状態（感情名:強度） */\r\n    emotionalState: { [key: string]: number",
            "properties": {
              "currentDesires": {
                "name": "currentDesires",
                "type": "string[]",
                "optional": false
              },
              "currentFears": {
                "name": "currentFears",
                "type": "string[]",
                "optional": false
              },
              "internalConflicts": {
                "name": "internalConflicts",
                "type": "string[]",
                "optional": false
              },
              "emotionalState": {
                "name": "emotionalState",
                "type": "{ [key: string]: number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1005
          },
          "RelationshipAttitude": {
            "name": "RelationshipAttitude",
            "body": "/** 感情（信頼、疑念、愛情など） */\r\n    attitude: string;\r\n\r\n    /** 強度（0-1） */\r\n    intensity: number;\r\n\r\n    /** 変化しつつあるか */\r\n    isDynamic: boolean;\r\n\r\n    /** 最近の変化の説明 */\r\n    recentChange: string;\r\n\r\n    // 🔧 記憶階層システム統合要素\r\n    /** 記憶システムから得られた洞察 */\r\n    memorySystemInsights?: string[];\r\n\r\n    /** 記憶システムで検証済みかどうか */\r\n    memorySystemValidated?: boolean;",
            "properties": {
              "attitude": {
                "name": "attitude",
                "type": "string",
                "optional": false
              },
              "intensity": {
                "name": "intensity",
                "type": "number",
                "optional": false
              },
              "isDynamic": {
                "name": "isDynamic",
                "type": "boolean",
                "optional": false
              },
              "recentChange": {
                "name": "recentChange",
                "type": "string",
                "optional": false
              },
              "memorySystemInsights": {
                "name": "memorySystemInsights",
                "type": "string[]",
                "optional": true
              },
              "memorySystemValidated": {
                "name": "memorySystemValidated",
                "type": "boolean",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1035
          },
          "PsychologyAnalysisResult": {
            "name": "PsychologyAnalysisResult",
            "body": "success: boolean;\r\n    characterId: string;\r\n    psychology: CharacterPsychology;\r\n    confidence: number;\r\n    processingTime: number;\r\n    memorySystemValidated: boolean;\r\n    learningDataStored: boolean;\r\n    qualityScore: number;\r\n    warnings: string[];\r\n    recommendations: string[];",
            "properties": {
              "success": {
                "name": "success",
                "type": "boolean",
                "optional": false
              },
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "psychology": {
                "name": "psychology",
                "type": "CharacterPsychology",
                "optional": false
              },
              "confidence": {
                "name": "confidence",
                "type": "number",
                "optional": false
              },
              "processingTime": {
                "name": "processingTime",
                "type": "number",
                "optional": false
              },
              "memorySystemValidated": {
                "name": "memorySystemValidated",
                "type": "boolean",
                "optional": false
              },
              "learningDataStored": {
                "name": "learningDataStored",
                "type": "boolean",
                "optional": false
              },
              "qualityScore": {
                "name": "qualityScore",
                "type": "number",
                "optional": false
              },
              "warnings": {
                "name": "warnings",
                "type": "string[]",
                "optional": false
              },
              "recommendations": {
                "name": "recommendations",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1059
          },
          "BehaviorPredictionResult": {
            "name": "BehaviorPredictionResult",
            "body": "success: boolean;\r\n    characterId: string;\r\n    predictions: Record<string, string>;\r\n    confidence: number;\r\n    memoryContextUsed: boolean;\r\n    psychologyBased: boolean;\r\n    recommendations: string[];",
            "properties": {
              "success": {
                "name": "success",
                "type": "boolean",
                "optional": false
              },
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "predictions": {
                "name": "predictions",
                "type": "Record<string",
                "optional": false
              },
              "confidence": {
                "name": "confidence",
                "type": "number",
                "optional": false
              },
              "memoryContextUsed": {
                "name": "memoryContextUsed",
                "type": "boolean",
                "optional": false
              },
              "psychologyBased": {
                "name": "psychologyBased",
                "type": "boolean",
                "optional": false
              },
              "recommendations": {
                "name": "recommendations",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 1075
          },
          "EmotionalSimulationResult": {
            "name": "EmotionalSimulationResult",
            "body": "success: boolean;\r\n    characterId: string;\r\n    dominantEmotion: string;\r\n    emotionalResponses: Record<string, number>;\r\n    explanation: string;\r\n    memorySystemIntegrated: boolean;\r\n    confidence: number;",
            "properties": {
              "success": {
                "name": "success",
                "type": "boolean",
                "optional": false
              },
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "dominantEmotion": {
                "name": "dominantEmotion",
                "type": "string",
                "optional": false
              },
              "emotionalResponses": {
                "name": "emotionalResponses",
                "type": "Record<string",
                "optional": false
              },
              "explanation": {
                "name": "explanation",
                "type": "string",
                "optional": false
              },
              "memorySystemIntegrated": {
                "name": "memorySystemIntegrated",
                "type": "boolean",
                "optional": false
              },
              "confidence": {
                "name": "confidence",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 1088
          },
          "PsychologyPerformanceMetrics": {
            "name": "PsychologyPerformanceMetrics",
            "body": "totalAnalyses: number;\r\n    successfulAnalyses: number;\r\n    failedAnalyses: number;\r\n    averageProcessingTime: number;\r\n    memorySystemHits: number;\r\n    cacheEfficiencyRate: number;\r\n    lastOptimization: string;",
            "properties": {
              "totalAnalyses": {
                "name": "totalAnalyses",
                "type": "number",
                "optional": false
              },
              "successfulAnalyses": {
                "name": "successfulAnalyses",
                "type": "number",
                "optional": false
              },
              "failedAnalyses": {
                "name": "failedAnalyses",
                "type": "number",
                "optional": false
              },
              "averageProcessingTime": {
                "name": "averageProcessingTime",
                "type": "number",
                "optional": false
              },
              "memorySystemHits": {
                "name": "memorySystemHits",
                "type": "number",
                "optional": false
              },
              "cacheEfficiencyRate": {
                "name": "cacheEfficiencyRate",
                "type": "number",
                "optional": false
              },
              "lastOptimization": {
                "name": "lastOptimization",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1101
          },
          "ChapterEmotionAnalysis": {
            "name": "ChapterEmotionAnalysis",
            "body": "/** 感情的次元の分析 */\r\n    emotionalDimensions: {\r\n        /** 希望と絶望の間の感情的変移 */\r\n        hopeVsDespair: EmotionalProgression;\r\n        /** 安心と緊張の間の感情的変移 */\r\n        comfortVsTension: EmotionalProgression;\r\n        /** 喜びと悲しみの間の感情的変移 */\r\n        joyVsSadness: EmotionalProgression;\r\n        /** 共感と孤立の間の感情的変移 */\r\n        empathyVsIsolation: EmotionalProgression;\r\n        /** 好奇心と無関心の間の感情的変移 */\r\n        curiosityVsIndifference: EmotionalProgression;",
            "properties": {
              "emotionalDimensions": {
                "name": "emotionalDimensions",
                "type": "{",
                "optional": false
              },
              "hopeVsDespair": {
                "name": "hopeVsDespair",
                "type": "EmotionalProgression",
                "optional": false
              },
              "comfortVsTension": {
                "name": "comfortVsTension",
                "type": "EmotionalProgression",
                "optional": false
              },
              "joyVsSadness": {
                "name": "joyVsSadness",
                "type": "EmotionalProgression",
                "optional": false
              },
              "empathyVsIsolation": {
                "name": "empathyVsIsolation",
                "type": "EmotionalProgression",
                "optional": false
              },
              "curiosityVsIndifference": {
                "name": "curiosityVsIndifference",
                "type": "EmotionalProgression",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1114
          },
          "EmotionalProgression": {
            "name": "EmotionalProgression",
            "body": "/** 開始時の感情レベル (0-10) */\r\n    start: number;\r\n    /** 中間時の感情レベル (0-10) */\r\n    middle: number;\r\n    /** 終了時の感情レベル (0-10) */\r\n    end: number;",
            "properties": {
              "start": {
                "name": "start",
                "type": "number",
                "optional": false
              },
              "middle": {
                "name": "middle",
                "type": "number",
                "optional": false
              },
              "end": {
                "name": "end",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1137
          },
          "EmotionalArcDesign": {
            "name": "EmotionalArcDesign",
            "body": "/** 推奨される感情的トーン */\r\n    recommendedTone: string;\r\n    /** 感情的な旅 */\r\n    emotionalJourney: {\r\n        /** 冒頭部の感情設計 */\r\n        opening: { dimension: string, level: number",
            "properties": {
              "recommendedTone": {
                "name": "recommendedTone",
                "type": "string",
                "optional": false
              },
              "emotionalJourney": {
                "name": "emotionalJourney",
                "type": "{",
                "optional": false
              },
              "opening": {
                "name": "opening",
                "type": "{ dimension: string",
                "optional": false
              },
              "level": {
                "name": "level",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1149
          },
          "ValidationResult": {
            "name": "ValidationResult",
            "body": "/** 有効かどうか */\r\n    isValid: boolean;\r\n    /** 信頼度スコア（0-1） */\r\n    confidenceScore: number;\r\n    /** 理由説明 */\r\n    reason: string;\r\n    /** 提案される代替アクション */\r\n    alternatives?: string[];",
            "properties": {
              "isValid": {
                "name": "isValid",
                "type": "boolean",
                "optional": false
              },
              "confidenceScore": {
                "name": "confidenceScore",
                "type": "number",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": false
              },
              "alternatives": {
                "name": "alternatives",
                "type": "string[]",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1168
          },
          "EventSubscription": {
            "name": "EventSubscription",
            "body": "/** イベントタイプ */\r\n    eventType: string;\r\n    /** 購読ID */\r\n    id: string;\r\n    /** 購読解除関数 */\r\n    unsubscribe: () => void;",
            "properties": {
              "eventType": {
                "name": "eventType",
                "type": "string",
                "optional": false
              },
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "unsubscribe": {
                "name": "unsubscribe",
                "type": "() => void",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1182
          },
          "EventData": {
            "name": "EventData",
            "body": "/** イベント発生タイムスタンプ */\r\n    timestamp: Date;\r\n    /** イベント固有データ */\r\n    [key: string]: any;",
            "properties": {
              "timestamp": {
                "name": "timestamp",
                "type": "Date",
                "optional": false
              },
              "key": {
                "name": "key",
                "type": "string]: any",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1194
          },
          "CharacterCreatedEventData": {
            "name": "CharacterCreatedEventData",
            "body": "character: Character;",
            "properties": {
              "character": {
                "name": "character",
                "type": "Character",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 1204
          },
          "CharacterUpdatedEventData": {
            "name": "CharacterUpdatedEventData",
            "body": "characterId: string;\r\n    changes: Partial<CharacterData>;\r\n    previousState?: Partial<Character>;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "changes": {
                "name": "changes",
                "type": "Partial<CharacterData>",
                "optional": false
              },
              "previousState": {
                "name": "previousState",
                "type": "Partial<Character>",
                "optional": true
              }
            },
            "isGeneric": true,
            "extendsOther": true,
            "lineNumber": 1211
          },
          "RelationshipUpdatedEventData": {
            "name": "RelationshipUpdatedEventData",
            "body": "char1Id: string;\r\n    char2Id: string;\r\n    relationship: Relationship;\r\n    previousRelationship?: Relationship;",
            "properties": {
              "char1Id": {
                "name": "char1Id",
                "type": "string",
                "optional": false
              },
              "char2Id": {
                "name": "char2Id",
                "type": "string",
                "optional": false
              },
              "relationship": {
                "name": "relationship",
                "type": "Relationship",
                "optional": false
              },
              "previousRelationship": {
                "name": "previousRelationship",
                "type": "Relationship",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 1220
          },
          "ParameterChangedEventData": {
            "name": "ParameterChangedEventData",
            "body": "characterId: string;\r\n    parameterId: string;\r\n    oldValue: number;\r\n    newValue: number;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "parameterId": {
                "name": "parameterId",
                "type": "string",
                "optional": false
              },
              "oldValue": {
                "name": "oldValue",
                "type": "number",
                "optional": false
              },
              "newValue": {
                "name": "newValue",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 1230
          },
          "SkillAcquiredEventData": {
            "name": "SkillAcquiredEventData",
            "body": "characterId: string;\r\n    skillId: string;\r\n    level: number;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "skillId": {
                "name": "skillId",
                "type": "string",
                "optional": false
              },
              "level": {
                "name": "level",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 1240
          },
          "CharacterIndexItem": {
            "name": "CharacterIndexItem",
            "body": "id: string;\r\n    name: string;\r\n    shortNames: string[];\r\n    nicknames: string[];\r\n    type: CharacterType;\r\n    isActive: boolean;\r\n    lastAppearance: number | null;\r\n    keywords: string[];",
            "properties": {
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "shortNames": {
                "name": "shortNames",
                "type": "string[]",
                "optional": false
              },
              "nicknames": {
                "name": "nicknames",
                "type": "string[]",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "CharacterType",
                "optional": false
              },
              "isActive": {
                "name": "isActive",
                "type": "boolean",
                "optional": false
              },
              "lastAppearance": {
                "name": "lastAppearance",
                "type": "number | null",
                "optional": false
              },
              "keywords": {
                "name": "keywords",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1255
          }
        },
        "types": {
          "CharacterType": {
            "name": "CharacterType",
            "definition": "'MAIN' | 'SUB' | 'MOB'",
            "isUnion": true,
            "isIntersection": false,
            "isGeneric": false,
            "lineNumber": 13
          },
          "CharacterRole": {
            "name": "CharacterRole",
            "definition": "'PROTAGONIST' | 'ANTAGONIST' | 'MENTOR' | 'ALLY' | 'RIVAL' | 'OTHER'",
            "isUnion": true,
            "isIntersection": false,
            "isGeneric": false,
            "lineNumber": 18
          },
          "EmotionalState": {
            "name": "EmotionalState",
            "definition": "'HAPPY' | 'SAD' | 'ANGRY' | 'FEARFUL' | 'NEUTRAL' | 'EXCITED' | 'CONFUSED' | 'DETERMINED' | 'CONCERNED'",
            "isUnion": true,
            "isIntersection": false,
            "isGeneric": false,
            "lineNumber": 23
          },
          "RelationshipType": {
            "name": "RelationshipType",
            "definition": "'PARENT' | 'CHILD' | 'MENTOR' | 'STUDENT' | 'LEADER' | 'FOLLOWER' |\r\n    'LOVER' | 'PROTECTOR' | 'PROTECTED' | 'FRIEND' | 'ENEMY' | 'RIVAL' |\r\n    'COLLEAGUE' | 'NEUTRAL'",
            "isUnion": true,
            "isIntersection": false,
            "isGeneric": false,
            "lineNumber": 28
          },
          "ParameterCategory": {
            "name": "ParameterCategory",
            "definition": "'PHYSICAL' | 'MENTAL' | 'SOCIAL' | 'TECHNICAL' | 'SPECIAL'",
            "isUnion": true,
            "isIntersection": false,
            "isGeneric": false,
            "lineNumber": 360
          },
          "StabilityTrend": {
            "name": "StabilityTrend",
            "definition": "'stable' | 'increasing' | 'decreasing' | 'volatile'",
            "isUnion": true,
            "isIntersection": false,
            "isGeneric": false,
            "lineNumber": 574
          },
          "DevelopmentPathPhase": {
            "name": "DevelopmentPathPhase",
            "definition": "'INTRODUCTION' | 'PROGRESSION' | 'MAJOR_TRANSFORMATION' |\r\n    'REFINEMENT' | 'MINOR_DEVELOPMENT' | 'SUPPORTING_ROLE' | 'STATIC'",
            "isUnion": true,
            "isIntersection": false,
            "isGeneric": false,
            "lineNumber": 792
          },
          "ArcType": {
            "name": "ArcType",
            "definition": "'REDEMPTION' | 'FALL' | 'GROWTH' | 'CORRUPTION' | 'DISILLUSIONMENT' |\r\n    'MATURATION' | 'EDUCATION' | 'ENLIGHTENMENT' | 'TRAGEDY' | 'REBIRTH' |\r\n    'DISCOVERY' | 'SUPPORTING' | 'PARALLEL'",
            "isUnion": true,
            "isIntersection": false,
            "isGeneric": false,
            "lineNumber": 799
          },
          "ChangeType": {
            "name": "ChangeType",
            "definition": "'GROWTH' | 'TEMPORARY' | 'CONTRADICTION'",
            "isUnion": true,
            "isIntersection": false,
            "isGeneric": false,
            "lineNumber": 847
          },
          "ChangeScope": {
            "name": "ChangeScope",
            "definition": "'CORE_PERSONALITY' | 'RELATIONSHIPS' | 'SKILLS' | 'EMOTIONAL_STATE' | 'APPEARANCE' | 'MOTIVATION'",
            "isUnion": true,
            "isIntersection": false,
            "isGeneric": false,
            "lineNumber": 852
          },
          "EventHandler": {
            "name": "EventHandler",
            "definition": "(data: T) => void | Promise<void>",
            "isUnion": true,
            "isIntersection": false,
            "isGeneric": true,
            "lineNumber": 1249
          }
        },
        "enums": {},
        "imports": [
          {
            "types": [
              "MemoryLevel",
              "MemoryRequestType"
            ],
            "source": "@/lib/memory/core/types",
            "isTypeOnly": true
          }
        ],
        "exports": [
          "CharacterType",
          "CharacterRole",
          "EmotionalState",
          "RelationshipType",
          "PersonalityTraits",
          "Appearance",
          "Backstory",
          "Relationship",
          "CharacterAppearance",
          "Interaction",
          "DevelopmentMilestone",
          "CharacterHistory",
          "CharacterState",
          "CharacterChangeInfo",
          "PromotionRecord",
          "CharacterMetadata",
          "Skill",
          "GrowthPlan",
          "GrowthPhase",
          "CharacterParameter",
          "ParameterCategory",
          "MentalGrowthState",
          "Character",
          "RelationshipResponse",
          "ImmutableCharacterData",
          "MutableCharacterData",
          "CharacterData",
          "CharacterMetrics",
          "PromotionEvaluation",
          "CharacterCluster",
          "StabilityTrend",
          "RelationshipTension",
          "RelationshipNetworkAnalysis",
          "RelationshipAnalysis",
          "DevelopmentImpact",
          "CharacterDevelopment",
          "DevelopmentPath",
          "GrowthResult",
          "ChapterEvent",
          "TimingFactor",
          "TimingAnalysis",
          "TimingRecommendation",
          "StoryContext",
          "DevelopmentPathPhase",
          "ArcType",
          "TransformationArc",
          "GrowthEvent",
          "Milestone",
          "ChangeType",
          "ChangeScope",
          "ChangeClassification",
          "CharacterChange",
          "CharacterDiff",
          "PlotContext",
          "CharacterTemplate",
          "DynamicCharacter",
          "NarrativeState",
          "NarrativeContext",
          "CharacterRecommendation",
          "ChapterCharacterRecommendations",
          "CharacterPsychology",
          "RelationshipAttitude",
          "PsychologyAnalysisResult",
          "BehaviorPredictionResult",
          "EmotionalSimulationResult",
          "PsychologyPerformanceMetrics",
          "ChapterEmotionAnalysis",
          "EmotionalProgression",
          "EmotionalArcDesign",
          "ValidationResult",
          "EventSubscription",
          "EventData",
          "CharacterCreatedEventData",
          "CharacterUpdatedEventData",
          "RelationshipUpdatedEventData",
          "ParameterChangedEventData",
          "SkillAcquiredEventData",
          "EventHandler",
          "CharacterIndexItem"
        ],
        "inlineTypes": [
          {
            "definition": ": {                // 最終状態変化\r\n        type: string;\r\n        chapterNumber: number;\r\n        description: string;\r\n    }",
            "lineNumber": 182
          },
          {
            "definition": ": {\r\n        type: string;\r\n        scope: string;\r\n        confidence: number;\r\n        explanation: string;\r\n        narrativeSignificance?: number;\r\n    }",
            "lineNumber": 246
          },
          {
            "definition": ": {\r\n        tags?: string[];\r\n    }",
            "lineNumber": 490
          },
          {
            "definition": ": {\r\n            added: string[];\r\n            removed: string[];\r\n        }",
            "lineNumber": 544
          },
          {
            "definition": ": {\r\n        centralityScores: Record<string, number>;   // 各メンバーの中心性スコア\r\n        subgroups: Array<{                          // サブグループ\r\n            members: string[];\r\n            internalCohesion: number;\r\n            relationToMainGroup: number;\r\n        }",
            "lineNumber": 553
          },
          {
            "definition": ": {\r\n        createdAt: Date;\r\n        updatedAt: Date;\r\n        version: number;\r\n        analysisSource: 'AUTO' | 'MANUAL' | 'MEMORY_INTEGRATION';\r\n        qualityScore: number;\r\n    }",
            "lineNumber": 565
          },
          {
            "definition": ": {\r\n        createdAt: Date;\r\n        updatedAt: Date;\r\n        version: number;\r\n        analysisSource: 'AUTO' | 'MANUAL' | 'MEMORY_INTEGRATION';\r\n    }",
            "lineNumber": 604
          },
          {
            "definition": ": {\r\n        from: number;\r\n        to: number;\r\n        reason: string;\r\n    }",
            "lineNumber": 674
          },
          {
            "definition": ": {\r\n        relatedSkills?: string[];\r\n        masteryLevel?: number;\r\n        [key: string]: any;\r\n    }",
            "lineNumber": 731
          },
          {
            "definition": ": {\r\n        name: string;\r\n        theme: string;\r\n        approximateChapters: [number, number];\r\n    }",
            "lineNumber": 780
          },
          {
            "definition": ": {\r\n        traits?: string[];\r\n        values?: string[];\r\n        quirks?: string[];\r\n    }",
            "lineNumber": 921
          },
          {
            "definition": ": {\r\n        template?: string;\r\n        significantEvents?: string[];\r\n        origin?: string;\r\n    }",
            "lineNumber": 926
          },
          {
            "definition": ": {\r\n        preferredEmotionalState?: EmotionalState;\r\n        initialDevelopmentStage?: number;\r\n    }",
            "lineNumber": 934
          },
          {
            "definition": ": {\r\n        template?: string;\r\n        generatedAt: Date;\r\n        parameters?: any;\r\n    }",
            "lineNumber": 945
          },
          {
            "definition": ": { [key: string]: number }",
            "lineNumber": 1016
          },
          {
            "definition": ": { [characterId: string]: RelationshipAttitude }",
            "lineNumber": 1019
          },
          {
            "definition": ": {\r\n        /** 希望と絶望の間の感情的変移 */\r\n        hopeVsDespair: EmotionalProgression;\r\n        /** 安心と緊張の間の感情的変移 */\r\n        comfortVsTension: EmotionalProgression;\r\n        /** 喜びと悲しみの間の感情的変移 */\r\n        joyVsSadness: EmotionalProgression;\r\n        /** 共感と孤立の間の感情的変移 */\r\n        empathyVsIsolation: EmotionalProgression;\r\n        /** 好奇心と無関心の間の感情的変移 */\r\n        curiosityVsIndifference: EmotionalProgression;\r\n    }",
            "lineNumber": 1116
          },
          {
            "definition": ": {\r\n        /** 冒頭部の感情設計 */\r\n        opening: { dimension: string, level: number }",
            "lineNumber": 1153
          },
          {
            "definition": ": { dimension: string, level: number }",
            "lineNumber": 1157
          },
          {
            "definition": ": { dimension: string, level: number }",
            "lineNumber": 1159
          }
        ],
        "generics": [
          "{\r\n        skillId: string;\r\n        acquired: Date;\r\n        level: number;\r\n        proficiency: number; // 0-100 習熟度\r\n    }",
          "{\r\n        phaseId: string;\r\n        startedAt: Date;\r\n        completedAt?: Date;\r\n        chapterStart: number;\r\n        chapterEnd?: number;\r\n    }",
          "{\r\n        chapter: number;\r\n        title: string;\r\n        description: string;\r\n        timestamp: string;\r\n    }",
          "{\r\n        id: string;\r\n        description: string;\r\n        severity: 'MINOR' | 'MODERATE' | 'SEVERE' | 'CRITICAL';\r\n        chapter: number;\r\n        isHealed: boolean;\r\n        timestamp: string;\r\n    }",
          "{\r\n        type: string;\r\n        description: string;\r\n        chapter: number;\r\n        isPermanent: boolean;\r\n        timestamp: string;\r\n    }",
          "{\r\n        name: string;\r\n        description: string;\r\n        acquiredInChapter: number;\r\n    }",
          "{\r\n        type: string;\r\n        chapterNumber: number;\r\n        description: string;\r\n    }",
          "{\r\n        parameterId: string;\r\n        minValue: number;    // このパラメータの最小必要値\r\n    }",
          "{\r\n        targetId: string;    // 影響するパラメータID\r\n        modifier: number;    // 修正値\r\n    }",
          "{\r\n        parameterId: string;\r\n        targetValue: number;\r\n        priority: number;    // 1-10 優先度\r\n    }",
          "{\r\n        skillId: string;\r\n        priority: number;    // 1-10 優先度\r\n        narrativeRequirement?: string; // 物語的要件（「師匠との出会い」など）\r\n    }",
          "{\r\n        parameterId: string;\r\n        change: number;      // 変化量\r\n    }",
          "{\r\n        id: string;\r\n        description: string;\r\n        resolved: boolean;\r\n        resolutionChapter?: number;\r\n    }",
          "{\r\n        id: string;\r\n        description: string;\r\n        strength: number;    // 1-10 信念の強さ\r\n        acquired: number;    // 獲得章番号\r\n    }",
          "{\r\n        trigger: string;\r\n        response: string;\r\n        intensity: number;   // 1-10 強度\r\n    }",
          "string, string[]",
          "CharacterState",
          "MemoryLevel, number",
          "{         // クラスター変遷履歴\r\n        timestamp: string;\r\n        membershipChanges: {\r\n            added: string[];\r\n            removed: string[];\r\n        };\r\n        cohesionChange: number;\r\n        reason: string;\r\n    }",
          "string, number",
          "{                          // サブグループ\r\n            members: string[];\r\n            internalCohesion: number;\r\n            relationToMainGroup: number;\r\n        }",
          "{           // 関連イベント履歴\r\n        chapterNumber: number;\r\n        description: string;\r\n        impact: number;\r\n        timestamp: string;\r\n    }",
          "{\r\n        characterId: string;\r\n        characterName: string;\r\n        connectivityScore: number;\r\n        influenceRank: number;\r\n    }",
          "{\r\n        char1Id: string;\r\n        char2Id: string;\r\n        strength: number;\r\n        type: RelationshipType;\r\n    }",
          "string, { change: number; reason: string }",
          "string, { improvement: number; reason: string }",
          "string, any",
          "string, { before: number, after: number }",
          "string, string",
          "CharacterData",
          "Character",
          "T extends EventData",
          "void"
        ],
        "extendedTypes": [
          "ImmutableCharacterData, MutableCharacterData",
          "Character",
          "EventData",
          "EventData",
          "EventData",
          "EventData",
          "EventData",
          "EventData> = (data: T) => void | Promise<void>;\r\n\r\n/**\r\n * キャラクターインデックスアイテム\r\n * 検索と検出の効率化のための軽量なキャラクター表現\r\n */\r\nexport interface CharacterIndexItem"
        ],
        "dataModelTypes": [
          {
            "name": "CharacterState",
            "category": "DATA_MODEL",
            "definition": {
              "name": "CharacterState",
              "body": "isActive: boolean;\r\n    relationships?: Relationship[];\r\n    developmentStage: number;\r\n    lastAppearance: number | null;\r\n    emotionalState: EmotionalState;\r\n    summary?: string;\r\n    significance?: number;\r\n    hasDialogue?: boolean;\r\n    changes?: CharacterChangeInfo[];\r\n    development: string;\r\n    isDeceased?: boolean;              // 死亡状態\r\n    maritalStatus?: string;            // 結婚状態\r\n    spouseId?: string | null;          // 配偶者ID\r\n    parentIds?: string[];              // 親キャラクターID\r\n    childrenIds?: string[];            // 子キャラクターID\r\n    skills?: string[];                 // 習得スキル\r\n    location?: string;                 // 現在地\r\n    lastStateChange?: {                // 最終状態変化\r\n        type: string;\r\n        chapterNumber: number;\r\n        description: string;",
              "properties": {
                "isActive": {
                  "name": "isActive",
                  "type": "boolean",
                  "optional": false
                },
                "relationships": {
                  "name": "relationships",
                  "type": "Relationship[]",
                  "optional": true
                },
                "developmentStage": {
                  "name": "developmentStage",
                  "type": "number",
                  "optional": false
                },
                "lastAppearance": {
                  "name": "lastAppearance",
                  "type": "number | null",
                  "optional": false
                },
                "emotionalState": {
                  "name": "emotionalState",
                  "type": "EmotionalState",
                  "optional": false
                },
                "summary": {
                  "name": "summary",
                  "type": "string",
                  "optional": true
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": true
                },
                "hasDialogue": {
                  "name": "hasDialogue",
                  "type": "boolean",
                  "optional": true
                },
                "changes": {
                  "name": "changes",
                  "type": "CharacterChangeInfo[]",
                  "optional": true
                },
                "development": {
                  "name": "development",
                  "type": "string",
                  "optional": false
                },
                "isDeceased": {
                  "name": "isDeceased",
                  "type": "boolean",
                  "optional": true
                },
                "maritalStatus": {
                  "name": "maritalStatus",
                  "type": "string",
                  "optional": true
                },
                "spouseId": {
                  "name": "spouseId",
                  "type": "string | null",
                  "optional": true
                },
                "parentIds": {
                  "name": "parentIds",
                  "type": "string[]",
                  "optional": true
                },
                "childrenIds": {
                  "name": "childrenIds",
                  "type": "string[]",
                  "optional": true
                },
                "skills": {
                  "name": "skills",
                  "type": "string[]",
                  "optional": true
                },
                "location": {
                  "name": "location",
                  "type": "string",
                  "optional": true
                },
                "lastStateChange": {
                  "name": "lastStateChange",
                  "type": "{                // 最終状態変化",
                  "optional": true
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 164
            }
          },
          {
            "name": "CharacterChangeInfo",
            "category": "DATA_MODEL",
            "definition": {
              "name": "CharacterChangeInfo",
              "body": "attribute: string;\r\n    previousValue: any;\r\n    currentValue: any;\r\n    classification?: {\r\n        type: string;\r\n        scope: string;\r\n        confidence: number;\r\n        explanation: string;\r\n        narrativeSignificance?: number;",
              "properties": {
                "attribute": {
                  "name": "attribute",
                  "type": "string",
                  "optional": false
                },
                "previousValue": {
                  "name": "previousValue",
                  "type": "any",
                  "optional": false
                },
                "currentValue": {
                  "name": "currentValue",
                  "type": "any",
                  "optional": false
                },
                "classification": {
                  "name": "classification",
                  "type": "{",
                  "optional": true
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "scope": {
                  "name": "scope",
                  "type": "string",
                  "optional": false
                },
                "confidence": {
                  "name": "confidence",
                  "type": "number",
                  "optional": false
                },
                "explanation": {
                  "name": "explanation",
                  "type": "string",
                  "optional": false
                },
                "narrativeSignificance": {
                  "name": "narrativeSignificance",
                  "type": "number",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 242
            }
          },
          {
            "name": "PromotionRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "PromotionRecord",
              "body": "fromType: CharacterType;\r\n    toType: CharacterType;\r\n    timestamp: Date;\r\n    reason?: string;",
              "properties": {
                "fromType": {
                  "name": "fromType",
                  "type": "CharacterType",
                  "optional": false
                },
                "toType": {
                  "name": "toType",
                  "type": "CharacterType",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "Date",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 258
            }
          },
          {
            "name": "MentalGrowthState",
            "category": "DATA_MODEL",
            "definition": {
              "name": "MentalGrowthState",
              "body": "traumas: Array<{\r\n        id: string;\r\n        description: string;\r\n        resolved: boolean;\r\n        resolutionChapter?: number;",
              "properties": {
                "traumas": {
                  "name": "traumas",
                  "type": "Array<{",
                  "optional": false
                },
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "resolved": {
                  "name": "resolved",
                  "type": "boolean",
                  "optional": false
                },
                "resolutionChapter": {
                  "name": "resolutionChapter",
                  "type": "number",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 365
            }
          },
          {
            "name": "ImmutableCharacterData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "ImmutableCharacterData",
              "body": "name: string;\r\n    shortNames: string[];\r\n    description: string;\r\n    appearance?: Appearance;\r\n    backstory?: Backstory;",
              "properties": {
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "shortNames": {
                  "name": "shortNames",
                  "type": "string[]",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "appearance": {
                  "name": "appearance",
                  "type": "Appearance",
                  "optional": true
                },
                "backstory": {
                  "name": "backstory",
                  "type": "Backstory",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 462
            }
          },
          {
            "name": "MutableCharacterData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "MutableCharacterData",
              "body": "type: CharacterType;\r\n    role?: CharacterRole;\r\n    personality?: PersonalityTraits;\r\n    nicknames?: Record<string, string[]>;\r\n    goals?: string[];\r\n    relationships?: Relationship[];\r\n    state: Partial<CharacterState>;\r\n    currentState?: string;\r\n    emotionalState?: string;",
              "properties": {
                "type": {
                  "name": "type",
                  "type": "CharacterType",
                  "optional": false
                },
                "role": {
                  "name": "role",
                  "type": "CharacterRole",
                  "optional": true
                },
                "personality": {
                  "name": "personality",
                  "type": "PersonalityTraits",
                  "optional": true
                },
                "nicknames": {
                  "name": "nicknames",
                  "type": "Record<string",
                  "optional": true
                },
                "goals": {
                  "name": "goals",
                  "type": "string[]",
                  "optional": true
                },
                "relationships": {
                  "name": "relationships",
                  "type": "Relationship[]",
                  "optional": true
                },
                "state": {
                  "name": "state",
                  "type": "Partial<CharacterState>",
                  "optional": false
                },
                "currentState": {
                  "name": "currentState",
                  "type": "string",
                  "optional": true
                },
                "emotionalState": {
                  "name": "emotionalState",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 473
            }
          },
          {
            "name": "CharacterData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "CharacterData",
              "body": "metadata?: {\r\n        tags?: string[];",
              "properties": {
                "metadata": {
                  "name": "metadata",
                  "type": "{",
                  "optional": true
                },
                "tags": {
                  "name": "tags",
                  "type": "string[]",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 489
            }
          },
          {
            "name": "NarrativeState",
            "category": "DATA_MODEL",
            "definition": {
              "name": "NarrativeState",
              "body": "theme?: string;\r\n    tone?: string;\r\n    setting?: string;\r\n    arc?: string;\r\n    pacing?: string;",
              "properties": {
                "theme": {
                  "name": "theme",
                  "type": "string",
                  "optional": true
                },
                "tone": {
                  "name": "tone",
                  "type": "string",
                  "optional": true
                },
                "setting": {
                  "name": "setting",
                  "type": "string",
                  "optional": true
                },
                "arc": {
                  "name": "arc",
                  "type": "string",
                  "optional": true
                },
                "pacing": {
                  "name": "pacing",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 955
            }
          },
          {
            "name": "EventData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "EventData",
              "body": "/** イベント発生タイムスタンプ */\r\n    timestamp: Date;\r\n    /** イベント固有データ */\r\n    [key: string]: any;",
              "properties": {
                "timestamp": {
                  "name": "timestamp",
                  "type": "Date",
                  "optional": false
                },
                "key": {
                  "name": "key",
                  "type": "string]: any",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1194
            }
          },
          {
            "name": "CharacterCreatedEventData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "CharacterCreatedEventData",
              "body": "character: Character;",
              "properties": {
                "character": {
                  "name": "character",
                  "type": "Character",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 1204
            }
          },
          {
            "name": "CharacterUpdatedEventData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "CharacterUpdatedEventData",
              "body": "characterId: string;\r\n    changes: Partial<CharacterData>;\r\n    previousState?: Partial<Character>;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "changes": {
                  "name": "changes",
                  "type": "Partial<CharacterData>",
                  "optional": false
                },
                "previousState": {
                  "name": "previousState",
                  "type": "Partial<Character>",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 1211
            }
          },
          {
            "name": "RelationshipUpdatedEventData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "RelationshipUpdatedEventData",
              "body": "char1Id: string;\r\n    char2Id: string;\r\n    relationship: Relationship;\r\n    previousRelationship?: Relationship;",
              "properties": {
                "char1Id": {
                  "name": "char1Id",
                  "type": "string",
                  "optional": false
                },
                "char2Id": {
                  "name": "char2Id",
                  "type": "string",
                  "optional": false
                },
                "relationship": {
                  "name": "relationship",
                  "type": "Relationship",
                  "optional": false
                },
                "previousRelationship": {
                  "name": "previousRelationship",
                  "type": "Relationship",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 1220
            }
          },
          {
            "name": "ParameterChangedEventData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "ParameterChangedEventData",
              "body": "characterId: string;\r\n    parameterId: string;\r\n    oldValue: number;\r\n    newValue: number;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "parameterId": {
                  "name": "parameterId",
                  "type": "string",
                  "optional": false
                },
                "oldValue": {
                  "name": "oldValue",
                  "type": "number",
                  "optional": false
                },
                "newValue": {
                  "name": "newValue",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 1230
            }
          },
          {
            "name": "SkillAcquiredEventData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "SkillAcquiredEventData",
              "body": "characterId: string;\r\n    skillId: string;\r\n    level: number;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "skillId": {
                  "name": "skillId",
                  "type": "string",
                  "optional": false
                },
                "level": {
                  "name": "level",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 1240
            }
          },
          {
            "name": "EmotionalState",
            "category": "DATA_MODEL",
            "definition": {
              "name": "EmotionalState",
              "definition": "'HAPPY' | 'SAD' | 'ANGRY' | 'FEARFUL' | 'NEUTRAL' | 'EXCITED' | 'CONFUSED' | 'DETERMINED' | 'CONCERNED'",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": false,
              "lineNumber": 23
            }
          }
        ],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": []
      },
      "lib\\characters\\events\\event-types.ts": {
        "filePath": "lib\\characters\\events\\event-types.ts",
        "fileSize": 11231,
        "system": "characters",
        "module": "characters/events",
        "interfaces": {
          "CharacterCreatedEvent": {
            "name": "CharacterCreatedEvent",
            "body": "/** 作成されたキャラクター */\r\n    character: Character;",
            "properties": {
              "character": {
                "name": "character",
                "type": "Character",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 65
          },
          "CharacterUpdatedEvent": {
            "name": "CharacterUpdatedEvent",
            "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 更新されたキャラクター */\r\n    character: Character;\r\n    /** 変更内容 */\r\n    changes: Partial<CharacterData>;\r\n    /** 更新前の状態 */\r\n    previousState?: Partial<Character>;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "character": {
                "name": "character",
                "type": "Character",
                "optional": false
              },
              "changes": {
                "name": "changes",
                "type": "Partial<CharacterData>",
                "optional": false
              },
              "previousState": {
                "name": "previousState",
                "type": "Partial<Character>",
                "optional": true
              }
            },
            "isGeneric": true,
            "extendsOther": true,
            "lineNumber": 73
          },
          "CharacterDeletedEvent": {
            "name": "CharacterDeletedEvent",
            "body": "/** 削除されたキャラクターID */\r\n    characterId: string;\r\n    /** 削除されたキャラクター名 */\r\n    characterName: string;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "characterName": {
                "name": "characterName",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 87
          },
          "CharacterPromotedEvent": {
            "name": "CharacterPromotedEvent",
            "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 元のタイプ */\r\n    fromType: string;\r\n    /** 新しいタイプ */\r\n    toType: string;\r\n    /** 昇格理由 */\r\n    reason?: string;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "fromType": {
                "name": "fromType",
                "type": "string",
                "optional": false
              },
              "toType": {
                "name": "toType",
                "type": "string",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 97
          },
          "CharacterDemotedEvent": {
            "name": "CharacterDemotedEvent",
            "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 元のタイプ */\r\n    fromType: string;\r\n    /** 新しいタイプ */\r\n    toType: string;\r\n    /** 降格理由 */\r\n    reason?: string;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "fromType": {
                "name": "fromType",
                "type": "string",
                "optional": false
              },
              "toType": {
                "name": "toType",
                "type": "string",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 111
          },
          "CharacterStateChangedEvent": {
            "name": "CharacterStateChangedEvent",
            "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 更新された状態 */\r\n    state: Partial<CharacterState>;\r\n    /** 更新前の状態 */\r\n    previousState?: Partial<CharacterState>;\r\n    /** 変更種別 */\r\n    changeType: string;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "state": {
                "name": "state",
                "type": "Partial<CharacterState>",
                "optional": false
              },
              "previousState": {
                "name": "previousState",
                "type": "Partial<CharacterState>",
                "optional": true
              },
              "changeType": {
                "name": "changeType",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": true,
            "lineNumber": 125
          },
          "CharacterAppearanceEvent": {
            "name": "CharacterAppearanceEvent",
            "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 章番号 */\r\n    chapterNumber: number;\r\n    /** 重要度 */\r\n    significance: number;\r\n    /** 概要 */\r\n    summary?: string;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "significance": {
                "name": "significance",
                "type": "number",
                "optional": false
              },
              "summary": {
                "name": "summary",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 139
          },
          "RelationshipCreatedEvent": {
            "name": "RelationshipCreatedEvent",
            "body": "/** キャラクター1のID */\r\n    char1Id: string;\r\n    /** キャラクター2のID */\r\n    char2Id: string;\r\n    /** 作成された関係性 */\r\n    relationship: Relationship;",
            "properties": {
              "char1Id": {
                "name": "char1Id",
                "type": "string",
                "optional": false
              },
              "char2Id": {
                "name": "char2Id",
                "type": "string",
                "optional": false
              },
              "relationship": {
                "name": "relationship",
                "type": "Relationship",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 155
          },
          "RelationshipUpdatedEvent": {
            "name": "RelationshipUpdatedEvent",
            "body": "/** キャラクター1のID */\r\n    char1Id: string;\r\n    /** キャラクター2のID */\r\n    char2Id: string;\r\n    /** 更新された関係性 */\r\n    relationship: Relationship;\r\n    /** 更新前の関係性 */\r\n    previousRelationship?: Relationship;",
            "properties": {
              "char1Id": {
                "name": "char1Id",
                "type": "string",
                "optional": false
              },
              "char2Id": {
                "name": "char2Id",
                "type": "string",
                "optional": false
              },
              "relationship": {
                "name": "relationship",
                "type": "Relationship",
                "optional": false
              },
              "previousRelationship": {
                "name": "previousRelationship",
                "type": "Relationship",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 167
          },
          "RelationshipDeletedEvent": {
            "name": "RelationshipDeletedEvent",
            "body": "/** キャラクター1のID */\r\n    char1Id: string;\r\n    /** キャラクター2のID */\r\n    char2Id: string;\r\n    /** 削除された関係性タイプ */\r\n    relationType: string;",
            "properties": {
              "char1Id": {
                "name": "char1Id",
                "type": "string",
                "optional": false
              },
              "char2Id": {
                "name": "char2Id",
                "type": "string",
                "optional": false
              },
              "relationType": {
                "name": "relationType",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 181
          },
          "RelationshipStrengthenedEvent": {
            "name": "RelationshipStrengthenedEvent",
            "body": "/** キャラクター1のID */\r\n    char1Id: string;\r\n    /** キャラクター2のID */\r\n    char2Id: string;\r\n    /** 関係性タイプ */\r\n    relationType: string;\r\n    /** 以前の強度 */\r\n    previousStrength: number;\r\n    /** 新しい強度 */\r\n    newStrength: number;\r\n    /** 強化の理由 */\r\n    reason?: string;",
            "properties": {
              "char1Id": {
                "name": "char1Id",
                "type": "string",
                "optional": false
              },
              "char2Id": {
                "name": "char2Id",
                "type": "string",
                "optional": false
              },
              "relationType": {
                "name": "relationType",
                "type": "string",
                "optional": false
              },
              "previousStrength": {
                "name": "previousStrength",
                "type": "number",
                "optional": false
              },
              "newStrength": {
                "name": "newStrength",
                "type": "number",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 193
          },
          "RelationshipWeakenedEvent": {
            "name": "RelationshipWeakenedEvent",
            "body": "/** キャラクター1のID */\r\n    char1Id: string;\r\n    /** キャラクター2のID */\r\n    char2Id: string;\r\n    /** 関係性タイプ */\r\n    relationType: string;\r\n    /** 以前の強度 */\r\n    previousStrength: number;\r\n    /** 新しい強度 */\r\n    newStrength: number;\r\n    /** 弱化の理由 */\r\n    reason?: string;",
            "properties": {
              "char1Id": {
                "name": "char1Id",
                "type": "string",
                "optional": false
              },
              "char2Id": {
                "name": "char2Id",
                "type": "string",
                "optional": false
              },
              "relationType": {
                "name": "relationType",
                "type": "string",
                "optional": false
              },
              "previousStrength": {
                "name": "previousStrength",
                "type": "number",
                "optional": false
              },
              "newStrength": {
                "name": "newStrength",
                "type": "number",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 211
          },
          "ParameterChangedEvent": {
            "name": "ParameterChangedEvent",
            "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** パラメータID */\r\n    parameterId: string;\r\n    /** パラメータ名 */\r\n    parameterName: string;\r\n    /** 以前の値 */\r\n    oldValue: number;\r\n    /** 新しい値 */\r\n    newValue: number;\r\n    /** 変更理由 */\r\n    reason?: string;\r\n    /** パラメータオブジェクト */\r\n    parameter?: CharacterParameter;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "parameterId": {
                "name": "parameterId",
                "type": "string",
                "optional": false
              },
              "parameterName": {
                "name": "parameterName",
                "type": "string",
                "optional": false
              },
              "oldValue": {
                "name": "oldValue",
                "type": "number",
                "optional": false
              },
              "newValue": {
                "name": "newValue",
                "type": "number",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": true
              },
              "parameter": {
                "name": "parameter",
                "type": "CharacterParameter",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 231
          },
          "SkillAcquiredEvent": {
            "name": "SkillAcquiredEvent",
            "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** スキルID */\r\n    skillId: string;\r\n    /** スキル名 */\r\n    skillName: string;\r\n    /** スキルレベル */\r\n    level: number;\r\n    /** 取得方法 */\r\n    acquisitionMethod?: string;\r\n    /** スキルオブジェクト */\r\n    skill?: Skill;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "skillId": {
                "name": "skillId",
                "type": "string",
                "optional": false
              },
              "skillName": {
                "name": "skillName",
                "type": "string",
                "optional": false
              },
              "level": {
                "name": "level",
                "type": "number",
                "optional": false
              },
              "acquisitionMethod": {
                "name": "acquisitionMethod",
                "type": "string",
                "optional": true
              },
              "skill": {
                "name": "skill",
                "type": "Skill",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 251
          },
          "SkillLevelUpEvent": {
            "name": "SkillLevelUpEvent",
            "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** スキルID */\r\n    skillId: string;\r\n    /** スキル名 */\r\n    skillName: string;\r\n    /** 以前のレベル */\r\n    oldLevel: number;\r\n    /** 新しいレベル */\r\n    newLevel: number;\r\n    /** レベルアップ理由 */\r\n    reason?: string;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "skillId": {
                "name": "skillId",
                "type": "string",
                "optional": false
              },
              "skillName": {
                "name": "skillName",
                "type": "string",
                "optional": false
              },
              "oldLevel": {
                "name": "oldLevel",
                "type": "number",
                "optional": false
              },
              "newLevel": {
                "name": "newLevel",
                "type": "number",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 269
          },
          "SkillProficiencyChangedEvent": {
            "name": "SkillProficiencyChangedEvent",
            "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** スキルID */\r\n    skillId: string;\r\n    /** 以前の習熟度 */\r\n    oldProficiency: number;\r\n    /** 新しい習熟度 */\r\n    newProficiency: number;\r\n    /** 変更理由 */\r\n    reason?: string;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "skillId": {
                "name": "skillId",
                "type": "string",
                "optional": false
              },
              "oldProficiency": {
                "name": "oldProficiency",
                "type": "number",
                "optional": false
              },
              "newProficiency": {
                "name": "newProficiency",
                "type": "number",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 287
          },
          "DevelopmentStageChangedEvent": {
            "name": "DevelopmentStageChangedEvent",
            "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 以前の段階 */\r\n    oldStage: number;\r\n    /** 新しい段階 */\r\n    newStage: number;\r\n    /** 変更理由 */\r\n    reason: string;\r\n    /** 変更の章番号 */\r\n    chapterNumber?: number;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "oldStage": {
                "name": "oldStage",
                "type": "number",
                "optional": false
              },
              "newStage": {
                "name": "newStage",
                "type": "number",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 305
          },
          "GrowthPlanStartedEvent": {
            "name": "GrowthPlanStartedEvent",
            "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 成長計画ID */\r\n    planId: string;\r\n    /** 成長計画名 */\r\n    planName: string;\r\n    /** 開始章 */\r\n    startChapter: number;\r\n    /** 成長計画オブジェクト */\r\n    plan: GrowthPlan;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "planId": {
                "name": "planId",
                "type": "string",
                "optional": false
              },
              "planName": {
                "name": "planName",
                "type": "string",
                "optional": false
              },
              "startChapter": {
                "name": "startChapter",
                "type": "number",
                "optional": false
              },
              "plan": {
                "name": "plan",
                "type": "GrowthPlan",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 321
          },
          "GrowthPlanCompletedEvent": {
            "name": "GrowthPlanCompletedEvent",
            "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 成長計画ID */\r\n    planId: string;\r\n    /** 成長計画名 */\r\n    planName: string;\r\n    /** 開始章 */\r\n    startChapter: number;\r\n    /** 完了章 */\r\n    completionChapter: number;\r\n    /** 結果の概要 */\r\n    summary: string;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "planId": {
                "name": "planId",
                "type": "string",
                "optional": false
              },
              "planName": {
                "name": "planName",
                "type": "string",
                "optional": false
              },
              "startChapter": {
                "name": "startChapter",
                "type": "number",
                "optional": false
              },
              "completionChapter": {
                "name": "completionChapter",
                "type": "number",
                "optional": false
              },
              "summary": {
                "name": "summary",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 337
          },
          "GrowthPhaseCompletedEvent": {
            "name": "GrowthPhaseCompletedEvent",
            "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 成長計画ID */\r\n    planId: string;\r\n    /** フェーズID */\r\n    phaseId: string;\r\n    /** フェーズ名 */\r\n    phaseName: string;\r\n    /** 完了章 */\r\n    chapterNumber: number;\r\n    /** 次のフェーズ */\r\n    nextPhase?: string;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "planId": {
                "name": "planId",
                "type": "string",
                "optional": false
              },
              "phaseId": {
                "name": "phaseId",
                "type": "string",
                "optional": false
              },
              "phaseName": {
                "name": "phaseName",
                "type": "string",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "nextPhase": {
                "name": "nextPhase",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 355
          },
          "MilestoneAchievedEvent": {
            "name": "MilestoneAchievedEvent",
            "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** マイルストーン段階 */\r\n    stage: number;\r\n    /** マイルストーンの説明 */\r\n    description: string;\r\n    /** 達成章 */\r\n    chapterNumber: number;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "stage": {
                "name": "stage",
                "type": "number",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 373
          },
          "CharacterAnalyzedEvent": {
            "name": "CharacterAnalyzedEvent",
            "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 分析タイプ */\r\n    analysisType: string;\r\n    /** 分析結果 */\r\n    result: any;\r\n    /** 心理分析結果 */\r\n    psychology?: CharacterPsychology;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "analysisType": {
                "name": "analysisType",
                "type": "string",
                "optional": false
              },
              "result": {
                "name": "result",
                "type": "any",
                "optional": false
              },
              "psychology": {
                "name": "psychology",
                "type": "CharacterPsychology",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 389
          },
          "RelationshipAnalyzedEvent": {
            "name": "RelationshipAnalyzedEvent",
            "body": "/** 分析タイプ */\r\n    analysisType: string;\r\n    /** 分析結果 */\r\n    result: any;\r\n    /** 対象キャラクターIDs */\r\n    characterIds?: string[];",
            "properties": {
              "analysisType": {
                "name": "analysisType",
                "type": "string",
                "optional": false
              },
              "result": {
                "name": "result",
                "type": "any",
                "optional": false
              },
              "characterIds": {
                "name": "characterIds",
                "type": "string[]",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 403
          },
          "ConsistencyViolationEvent": {
            "name": "ConsistencyViolationEvent",
            "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 違反タイプ */\r\n    violationType: string;\r\n    /** 違反の説明 */\r\n    description: string;\r\n    /** 違反の重大度 (0-1) */\r\n    severity: number;\r\n    /** 推奨される修正 */\r\n    suggestedFix?: string;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "violationType": {
                "name": "violationType",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "severity": {
                "name": "severity",
                "type": "number",
                "optional": false
              },
              "suggestedFix": {
                "name": "suggestedFix",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 415
          },
          "TimingRecommendationEvent": {
            "name": "TimingRecommendationEvent",
            "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 推奨事項 */\r\n    recommendation: TimingRecommendation;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "recommendation": {
                "name": "recommendation",
                "type": "TimingRecommendation",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 431
          },
          "EventTypeToPayloadMap": {
            "name": "EventTypeToPayloadMap",
            "body": "[EventTypes.CHARACTER_CREATED]: CharacterCreatedEvent;\r\n    [EventTypes.CHARACTER_UPDATED]: CharacterUpdatedEvent;\r\n    [EventTypes.CHARACTER_DELETED]: CharacterDeletedEvent;\r\n    [EventTypes.CHARACTER_PROMOTED]: CharacterPromotedEvent;\r\n    [EventTypes.CHARACTER_DEMOTED]: CharacterDemotedEvent;\r\n    [EventTypes.CHARACTER_STATE_CHANGED]: CharacterStateChangedEvent;\r\n    [EventTypes.CHARACTER_APPEARANCE]: CharacterAppearanceEvent;\r\n\r\n    [EventTypes.RELATIONSHIP_CREATED]: RelationshipCreatedEvent;\r\n    [EventTypes.RELATIONSHIP_UPDATED]: RelationshipUpdatedEvent;\r\n    [EventTypes.RELATIONSHIP_DELETED]: RelationshipDeletedEvent;\r\n    [EventTypes.RELATIONSHIP_STRENGTHENED]: RelationshipStrengthenedEvent;\r\n    [EventTypes.RELATIONSHIP_WEAKENED]: RelationshipWeakenedEvent;\r\n\r\n    [EventTypes.PARAMETER_CHANGED]: ParameterChangedEvent;\r\n    [EventTypes.SKILL_ACQUIRED]: SkillAcquiredEvent;\r\n    [EventTypes.SKILL_LEVEL_UP]: SkillLevelUpEvent;\r\n    [EventTypes.SKILL_PROFICIENCY_CHANGED]: SkillProficiencyChangedEvent;\r\n\r\n    [EventTypes.DEVELOPMENT_STAGE_CHANGED]: DevelopmentStageChangedEvent;\r\n    [EventTypes.GROWTH_PLAN_STARTED]: GrowthPlanStartedEvent;\r\n    [EventTypes.GROWTH_PLAN_COMPLETED]: GrowthPlanCompletedEvent;\r\n    [EventTypes.GROWTH_PHASE_COMPLETED]: GrowthPhaseCompletedEvent;\r\n    [EventTypes.MILESTONE_ACHIEVED]: MilestoneAchievedEvent;\r\n\r\n    [EventTypes.CHARACTER_ANALYZED]: CharacterAnalyzedEvent;\r\n    [EventTypes.RELATIONSHIP_ANALYZED]: RelationshipAnalyzedEvent;\r\n    [EventTypes.CONSISTENCY_VIOLATION]: ConsistencyViolationEvent;\r\n    [EventTypes.TIMING_RECOMMENDATION]: TimingRecommendationEvent;",
            "properties": {},
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 443
          },
          "EventHandlerRegistration": {
            "name": "EventHandlerRegistration",
            "body": "/** イベントタイプ */\r\n    eventType: E;\r\n    /** イベントハンドラー */\r\n    handler: TypedEventHandler<E>;\r\n    /** 優先度 */\r\n    priority: EventPriority;",
            "properties": {
              "eventType": {
                "name": "eventType",
                "type": "E",
                "optional": false
              },
              "handler": {
                "name": "handler",
                "type": "TypedEventHandler<E>",
                "optional": false
              },
              "priority": {
                "name": "priority",
                "type": "EventPriority",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": true,
            "lineNumber": 478
          }
        },
        "types": {
          "TypedEventHandler": {
            "name": "TypedEventHandler",
            "definition": "(data: EventTypeToPayloadMap[E]) => void | Promise<void>",
            "isUnion": true,
            "isIntersection": false,
            "isGeneric": true,
            "lineNumber": 514
          }
        },
        "enums": {
          "LogLevel": {
            "name": "LogLevel",
            "body": "DEBUG = 0,\r\n    INFO = 1,\r\n    WARNING = 2,\r\n    ERROR = 3,\r\n    NONE = 4",
            "values": [
              {
                "name": "DEBUG",
                "value": "0"
              },
              {
                "name": "INFO",
                "value": "1"
              },
              {
                "name": "WARNING",
                "value": "2"
              },
              {
                "name": "ERROR",
                "value": "3"
              },
              {
                "name": "NONE",
                "value": "4"
              }
            ],
            "lineNumber": 22
          },
          "EventPriority": {
            "name": "EventPriority",
            "body": "LOWEST = 0,\r\n    LOW = 1,\r\n    NORMAL = 2,\r\n    HIGH = 3,\r\n    HIGHEST = 4,\r\n    CRITICAL = 5",
            "values": [
              {
                "name": "LOWEST",
                "value": "0"
              },
              {
                "name": "LOW",
                "value": "1"
              },
              {
                "name": "NORMAL",
                "value": "2"
              },
              {
                "name": "HIGH",
                "value": "3"
              },
              {
                "name": "HIGHEST",
                "value": "4"
              },
              {
                "name": "CRITICAL",
                "value": "5"
              }
            ],
            "lineNumber": 33
          },
          "EventCategory": {
            "name": "EventCategory",
            "body": "CHARACTER = 'character',\r\n    RELATIONSHIP = 'relationship',\r\n    PARAMETER = 'parameter',\r\n    SKILL = 'skill',\r\n    DEVELOPMENT = 'development',\r\n    ANALYSIS = 'analysis'",
            "values": [
              {
                "name": "CHARACTER",
                "value": "'character'"
              },
              {
                "name": "RELATIONSHIP",
                "value": "'relationship'"
              },
              {
                "name": "PARAMETER",
                "value": "'parameter'"
              },
              {
                "name": "SKILL",
                "value": "'skill'"
              },
              {
                "name": "DEVELOPMENT",
                "value": "'development'"
              },
              {
                "name": "ANALYSIS",
                "value": "'analysis'"
              }
            ],
            "lineNumber": 51
          }
        },
        "imports": [
          {
            "types": [
              "EVENT_TYPES"
            ],
            "source": "../core/constants",
            "isTypeOnly": false
          },
          {
            "types": [
              "EventData",
              "Character",
              "CharacterData",
              "CharacterState",
              "Relationship",
              "CharacterPsychology",
              "TimingRecommendation",
              "ValidationResult",
              "CharacterParameter",
              "Skill",
              "GrowthPlan"
            ],
            "source": "../core/types",
            "isTypeOnly": true
          }
        ],
        "exports": [
          "LogLevel",
          "EventPriority",
          "const",
          "EventCategory",
          "CharacterCreatedEvent",
          "CharacterUpdatedEvent",
          "CharacterDeletedEvent",
          "CharacterPromotedEvent",
          "CharacterDemotedEvent",
          "CharacterStateChangedEvent",
          "CharacterAppearanceEvent",
          "RelationshipCreatedEvent",
          "RelationshipUpdatedEvent",
          "RelationshipDeletedEvent",
          "RelationshipStrengthenedEvent",
          "RelationshipWeakenedEvent",
          "ParameterChangedEvent",
          "SkillAcquiredEvent",
          "SkillLevelUpEvent",
          "SkillProficiencyChangedEvent",
          "DevelopmentStageChangedEvent",
          "GrowthPlanStartedEvent",
          "GrowthPlanCompletedEvent",
          "GrowthPhaseCompletedEvent",
          "MilestoneAchievedEvent",
          "CharacterAnalyzedEvent",
          "RelationshipAnalyzedEvent",
          "ConsistencyViolationEvent",
          "TimingRecommendationEvent",
          "EventTypeToPayloadMap",
          "EventHandlerRegistration",
          "EventUtils",
          "TypedEventHandler"
        ],
        "inlineTypes": [],
        "generics": [
          "CharacterData",
          "Character",
          "CharacterState",
          "E extends keyof EventTypeToPayloadMap",
          "E",
          "T",
          "any",
          "void"
        ],
        "extendedTypes": [
          "EventData",
          "EventData",
          "EventData",
          "EventData",
          "EventData",
          "EventData",
          "EventData",
          "EventData",
          "EventData",
          "EventData",
          "EventData",
          "EventData",
          "EventData",
          "EventData",
          "EventData",
          "EventData",
          "EventData",
          "EventData",
          "EventData",
          "EventData",
          "EventData",
          "EventData",
          "EventData",
          "EventData",
          "EventData",
          "keyof EventTypeToPayloadMap>",
          "keyof EventTypeToPayloadMap> =\r\n    (data: EventTypeToPayloadMap[E]) => void | Promise<void>;"
        ],
        "dataModelTypes": [
          {
            "name": "CharacterStateChangedEvent",
            "category": "DATA_MODEL",
            "definition": {
              "name": "CharacterStateChangedEvent",
              "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 更新された状態 */\r\n    state: Partial<CharacterState>;\r\n    /** 更新前の状態 */\r\n    previousState?: Partial<CharacterState>;\r\n    /** 変更種別 */\r\n    changeType: string;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "state": {
                  "name": "state",
                  "type": "Partial<CharacterState>",
                  "optional": false
                },
                "previousState": {
                  "name": "previousState",
                  "type": "Partial<CharacterState>",
                  "optional": true
                },
                "changeType": {
                  "name": "changeType",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 125
            }
          }
        ],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": []
      },
      "lib\\foreshadowing\\index.ts": {
        "filePath": "lib\\foreshadowing\\index.ts",
        "fileSize": 36469,
        "system": "foreshadowing",
        "module": "foreshadowing",
        "interfaces": {
          "UnifiedForeshadowingSystemConfig": {
            "name": "UnifiedForeshadowingSystemConfig",
            "body": "memoryManager: MemoryManager;\n    enableAdvancedResolution?: boolean;\n    enablePerformanceOptimization?: boolean;\n    enableSystemDiagnostics?: boolean;\n    maxConcurrentOperations?: number;\n    cacheOptimizationLevel?: 'low' | 'medium' | 'high';",
            "properties": {
              "memoryManager": {
                "name": "memoryManager",
                "type": "MemoryManager",
                "optional": false
              },
              "enableAdvancedResolution": {
                "name": "enableAdvancedResolution",
                "type": "boolean",
                "optional": true
              },
              "enablePerformanceOptimization": {
                "name": "enablePerformanceOptimization",
                "type": "boolean",
                "optional": true
              },
              "enableSystemDiagnostics": {
                "name": "enableSystemDiagnostics",
                "type": "boolean",
                "optional": true
              },
              "maxConcurrentOperations": {
                "name": "maxConcurrentOperations",
                "type": "number",
                "optional": true
              },
              "cacheOptimizationLevel": {
                "name": "cacheOptimizationLevel",
                "type": "'low' | 'medium' | 'high'",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 23
          },
          "UnifiedProcessingResult": {
            "name": "UnifiedProcessingResult",
            "body": "success: boolean;\n    foreshadowingResults: {\n        generatedCount: number;\n        savedCount: number;\n        resolutionSuggestions: number;",
            "properties": {
              "success": {
                "name": "success",
                "type": "boolean",
                "optional": false
              },
              "foreshadowingResults": {
                "name": "foreshadowingResults",
                "type": "{",
                "optional": false
              },
              "generatedCount": {
                "name": "generatedCount",
                "type": "number",
                "optional": false
              },
              "savedCount": {
                "name": "savedCount",
                "type": "number",
                "optional": false
              },
              "resolutionSuggestions": {
                "name": "resolutionSuggestions",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 35
          },
          "SystemDiagnosticsResult": {
            "name": "SystemDiagnosticsResult",
            "body": "overallHealth: 'HEALTHY' | 'DEGRADED' | 'CRITICAL';\n    componentHealth: {\n        engine: 'HEALTHY' | 'DEGRADED' | 'CRITICAL';\n        manager: 'HEALTHY' | 'DEGRADED' | 'CRITICAL';\n        resolutionAdvisor: 'HEALTHY' | 'DEGRADED' | 'CRITICAL';\n        memorySystem: 'HEALTHY' | 'DEGRADED' | 'CRITICAL';",
            "properties": {
              "overallHealth": {
                "name": "overallHealth",
                "type": "'HEALTHY' | 'DEGRADED' | 'CRITICAL'",
                "optional": false
              },
              "componentHealth": {
                "name": "componentHealth",
                "type": "{",
                "optional": false
              },
              "engine": {
                "name": "engine",
                "type": "'HEALTHY' | 'DEGRADED' | 'CRITICAL'",
                "optional": false
              },
              "manager": {
                "name": "manager",
                "type": "'HEALTHY' | 'DEGRADED' | 'CRITICAL'",
                "optional": false
              },
              "resolutionAdvisor": {
                "name": "resolutionAdvisor",
                "type": "'HEALTHY' | 'DEGRADED' | 'CRITICAL'",
                "optional": false
              },
              "memorySystem": {
                "name": "memorySystem",
                "type": "'HEALTHY' | 'DEGRADED' | 'CRITICAL'",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 55
          }
        },
        "types": {},
        "enums": {},
        "imports": [
          {
            "types": [
              "MemoryManager"
            ],
            "source": "@/lib/memory/core/memory-manager",
            "isTypeOnly": false
          },
          {
            "types": [
              "MemoryLevel"
            ],
            "source": "@/lib/memory/core/types",
            "isTypeOnly": true
          },
          {
            "types": [
              "createForeshadowingManager",
              "ForeshadowingManager"
            ],
            "source": "./manager",
            "isTypeOnly": false
          },
          {
            "types": [
              "createForeshadowingEngine",
              "ForeshadowingEngine"
            ],
            "source": "./engine",
            "isTypeOnly": false
          },
          {
            "types": [
              "createForeshadowingResolutionAdvisor",
              "ForeshadowingResolutionAdvisor"
            ],
            "source": "./resolution-advisor",
            "isTypeOnly": false
          },
          {
            "types": [
              "Foreshadowing"
            ],
            "source": "@/types/memory",
            "isTypeOnly": true
          },
          {
            "types": [
              "logger"
            ],
            "source": "@/lib/utils/logger",
            "isTypeOnly": false
          },
          {
            "types": [
              "logError"
            ],
            "source": "@/lib/utils/error-handler",
            "isTypeOnly": false
          }
        ],
        "exports": [
          "UnifiedForeshadowingSystem",
          "const",
          "type"
        ],
        "inlineTypes": [
          {
            "definition": ": {\n        generatedCount: number;\n        savedCount: number;\n        resolutionSuggestions: number;\n    }",
            "lineNumber": 37
          },
          {
            "definition": ": {\n        processingTime: number;\n        memorySystemIntegration: boolean;\n        cacheEfficiency: number;\n        errorRate: number;\n    }",
            "lineNumber": 42
          },
          {
            "definition": ": {\n        engine: 'HEALTHY' | 'DEGRADED' | 'CRITICAL';\n        manager: 'HEALTHY' | 'DEGRADED' | 'CRITICAL';\n        resolutionAdvisor: 'HEALTHY' | 'DEGRADED' | 'CRITICAL';\n        memorySystem: 'HEALTHY' | 'DEGRADED' | 'CRITICAL';\n    }",
            "lineNumber": 57
          },
          {
            "definition": ": {\n        totalOperations: number;\n        successRate: number;\n        averageProcessingTime: number;\n        memoryEfficiency: number;\n    }",
            "lineNumber": 63
          },
          {
            "definition": ": {\n            generateCount?: number;\n            enableResolutionSuggestions?: boolean;\n            enableAdvancedAnalysis?: boolean;\n            prioritizeMemorySystem?: boolean;\n        }",
            "lineNumber": 281
          },
          {
            "definition": ": {\n                    generatedCount: 0,\n                    savedCount: 0,\n                    resolutionSuggestions: 0\n                }",
            "lineNumber": 302
          },
          {
            "definition": ": {\n                    processingTime: 0,\n                    memorySystemIntegration: false,\n                    cacheEfficiency: 0,\n                    errorRate: 0\n                }",
            "lineNumber": 307
          },
          {
            "definition": ": {\n                    generatedCount: 0,\n                    savedCount: 0,\n                    resolutionSuggestions: 0\n                }",
            "lineNumber": 387
          },
          {
            "definition": ": {\n                    processingTime,\n                    memorySystemIntegration: false,\n                    cacheEfficiency: 0,\n                    errorRate: 1\n                }",
            "lineNumber": 392
          },
          {
            "definition": ": {\n                    engine: this.evaluateComponentHealth(engineDiagnostics),\n                    manager: this.evaluateComponentHealth(managerDiagnostics),\n                    resolutionAdvisor: 'HEALTHY', // resolutionAdvisorは診断機能が実装されていない場合\n                    memorySystem: this.evaluateMemorySystemHealth(memoryDiagnostics)\n                }",
            "lineNumber": 759
          },
          {
            "definition": ": {\n                    totalOperations: this.systemMetrics.totalOperations,\n                    successRate: this.calculateSuccessRate(),\n                    averageProcessingTime: this.systemMetrics.averageProcessingTime,\n                    memoryEfficiency: this.systemMetrics.cacheEfficiency\n                }",
            "lineNumber": 765
          },
          {
            "definition": ": {\n                    engine: 'CRITICAL',\n                    manager: 'CRITICAL',\n                    resolutionAdvisor: 'CRITICAL',\n                    memorySystem: 'CRITICAL'\n                }",
            "lineNumber": 800
          },
          {
            "definition": ": {\n                    totalOperations: this.systemMetrics.totalOperations,\n                    successRate: 0,\n                    averageProcessingTime: 0,\n                    memoryEfficiency: 0\n                }",
            "lineNumber": 806
          }
        ],
        "generics": [
          "{\n        component: string;\n        severity: 'HIGH' | 'MEDIUM' | 'LOW';\n        description: string;\n        recommendation: string;\n    }",
          "UnifiedForeshadowingSystemConfig",
          "void",
          "UnifiedProcessingResult",
          "{\n        integrated: boolean;\n        details: string[];\n    }",
          "{ success: boolean; additionalSuggestions: number }",
          "number",
          " 0.5) {\n            recommendations.push('Consider optimizing cache configuration for better performance');\n        }\n\n        if (metrics.errorRate ",
          "{ id: string, updates: Partial<Foreshadowing",
          "{\n        success: boolean;\n        totalItems: number;\n        successfulUpdates: number;\n        failedUpdates: number;\n        processingTime: number;\n        memorySystemIntegrated: boolean;\n        errors: Array<{ id: string; error: string }",
          "{ id: string; error: string }",
          "T",
          " items.length; i += batchSize) {\n            batches.push(items.slice(i, i + batchSize));\n        }\n        return batches;\n    }\n\n    /**\n     * 伏線整合性チェック - 統合版\n     * @param currentChapter 現在のチャプター番号\n     * @returns 整合性チェック結果\n     */\n    async checkForeshadowingConsistency(currentChapter: number): Promise<{\n        isConsistent: boolean;\n        totalForeshadowings: number;\n        issues: Array<{\n            id: string;\n            issue: string;\n            severity: 'HIGH' | 'MEDIUM' | 'LOW';\n            recommendation: string;\n        }",
          "string[]",
          " 0.7) {\n                    optimizations.push('Memory efficiency optimization recommended');\n                }\n            }\n\n            return optimizations;\n\n        } catch (error) {\n            logger.warn('Failed to generate system optimizations', { error });\n            return ['System optimization analysis failed'];\n        }\n    }\n\n    /**\n     * システム診断の実行 - 統合版\n     * @returns 診断結果\n     */\n    async performSystemDiagnostics(): Promise<SystemDiagnosticsResult",
          "any",
          "{\n            component: string;\n            severity: 'HIGH' | 'MEDIUM' | 'LOW';\n            description: string;\n            recommendation: string;\n        }",
          " 0.8) {\n            issues.push({\n                component: 'performance',\n                severity: 'HIGH',\n                description: `Low success rate: ${(performanceMetrics.successRate * 100).toFixed(1)}%`,\n                recommendation: 'Review error logs and optimize system configuration'\n            });\n        }\n\n        if (performanceMetrics.averageProcessingTime ",
          " 0.5) {\n            issues.push({\n                component: 'memory',\n                severity: 'MEDIUM',\n                description: `Low memory efficiency: ${(performanceMetrics.memoryEfficiency * 100).toFixed(1)}%`,\n                recommendation: 'Optimize memory usage and cache configuration'\n            });\n        }\n\n        return issues;\n    }\n\n    /**\n     * 成功率の計算\n     * @private\n     */\n    private calculateSuccessRate(): number {\n        if (this.systemMetrics.totalOperations === 0) return 1;\n        return this.systemMetrics.successfulOperations / this.systemMetrics.totalOperations;\n    }\n\n    /**\n     * パフォーマンス統計の取得\n     */\n    getPerformanceMetrics() {\n        return {\n            ...this.systemMetrics,\n            managerMetrics: this.manager.getPerformanceMetrics(),\n            engineMetrics: this.engine.getPerformanceMetrics()\n        };\n    }\n\n    /**\n     * システム最適化の実行\n     * @returns 最適化結果\n     */\n    async optimizeSystem(): Promise<{\n        success: boolean;\n        optimizations: string[];\n        performanceImprovement: number;\n        processingTime: number;\n    }",
          "Omit<UnifiedForeshadowingSystemConfig, 'memoryManager'"
        ],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [
          {
            "name": "UnifiedForeshadowingSystemConfig",
            "category": "STORAGE_RELATED",
            "definition": {
              "name": "UnifiedForeshadowingSystemConfig",
              "body": "memoryManager: MemoryManager;\n    enableAdvancedResolution?: boolean;\n    enablePerformanceOptimization?: boolean;\n    enableSystemDiagnostics?: boolean;\n    maxConcurrentOperations?: number;\n    cacheOptimizationLevel?: 'low' | 'medium' | 'high';",
              "properties": {
                "memoryManager": {
                  "name": "memoryManager",
                  "type": "MemoryManager",
                  "optional": false
                },
                "enableAdvancedResolution": {
                  "name": "enableAdvancedResolution",
                  "type": "boolean",
                  "optional": true
                },
                "enablePerformanceOptimization": {
                  "name": "enablePerformanceOptimization",
                  "type": "boolean",
                  "optional": true
                },
                "enableSystemDiagnostics": {
                  "name": "enableSystemDiagnostics",
                  "type": "boolean",
                  "optional": true
                },
                "maxConcurrentOperations": {
                  "name": "maxConcurrentOperations",
                  "type": "number",
                  "optional": true
                },
                "cacheOptimizationLevel": {
                  "name": "cacheOptimizationLevel",
                  "type": "'low' | 'medium' | 'high'",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 23
            }
          }
        ],
        "systemIntegrationTypes": []
      },
      "lib\\generation\\index.ts": {
        "filePath": "lib\\generation\\index.ts",
        "fileSize": 322,
        "system": "generation",
        "module": "generation",
        "interfaces": {},
        "types": {},
        "enums": {},
        "imports": [],
        "exports": [],
        "inlineTypes": [],
        "generics": [],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": []
      },
      "lib\\learning-journey\\index.ts": {
        "filePath": "lib\\learning-journey\\index.ts",
        "fileSize": 60763,
        "system": "learning-journey",
        "module": "learning-journey",
        "interfaces": {
          "LearningJourneySystemConfig": {
            "name": "LearningJourneySystemConfig",
            "body": "// 統合記憶システム設定\n    memorySystemIntegration: {\n        enabled: boolean;\n        maxRetries: number;\n        timeoutMs: number;\n        fallbackEnabled: boolean;",
            "properties": {
              "memorySystemIntegration": {
                "name": "memorySystemIntegration",
                "type": "{",
                "optional": false
              },
              "enabled": {
                "name": "enabled",
                "type": "boolean",
                "optional": false
              },
              "maxRetries": {
                "name": "maxRetries",
                "type": "number",
                "optional": false
              },
              "timeoutMs": {
                "name": "timeoutMs",
                "type": "number",
                "optional": false
              },
              "fallbackEnabled": {
                "name": "fallbackEnabled",
                "type": "boolean",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 78
          },
          "SystemStatistics": {
            "name": "SystemStatistics",
            "body": "initialization: {\n        totalTime: number;\n        componentsInitialized: number;\n        componentsActive: number;\n        memorySystemIntegrated: boolean;",
            "properties": {
              "initialization": {
                "name": "initialization",
                "type": "{",
                "optional": false
              },
              "totalTime": {
                "name": "totalTime",
                "type": "number",
                "optional": false
              },
              "componentsInitialized": {
                "name": "componentsInitialized",
                "type": "number",
                "optional": false
              },
              "componentsActive": {
                "name": "componentsActive",
                "type": "number",
                "optional": false
              },
              "memorySystemIntegrated": {
                "name": "memorySystemIntegrated",
                "type": "boolean",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 113
          },
          "ComponentStatus": {
            "name": "ComponentStatus",
            "body": "conceptManager: { initialized: boolean; functional: boolean;",
            "properties": {
              "conceptManager": {
                "name": "conceptManager",
                "type": "{ initialized: boolean",
                "optional": false
              },
              "functional": {
                "name": "functional",
                "type": "boolean",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 135
          },
          "StandardComponentStatus": {
            "name": "StandardComponentStatus",
            "body": "initialized: boolean;\n    functional: boolean;",
            "properties": {
              "initialized": {
                "name": "initialized",
                "type": "boolean",
                "optional": false
              },
              "functional": {
                "name": "functional",
                "type": "boolean",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 147
          },
          "LocalMemorySystemStatus": {
            "name": "LocalMemorySystemStatus",
            "body": "initialized: boolean;\n    healthy: boolean;",
            "properties": {
              "initialized": {
                "name": "initialized",
                "type": "boolean",
                "optional": false
              },
              "healthy": {
                "name": "healthy",
                "type": "boolean",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 155
          }
        },
        "types": {},
        "enums": {},
        "imports": [
          {
            "types": [
              "GeminiClient"
            ],
            "source": "@/lib/generation/gemini-client",
            "isTypeOnly": false
          },
          {
            "types": [
              "ConceptLearningManager",
              "LearningStage"
            ],
            "source": "./concept-learning-manager",
            "isTypeOnly": false
          },
          {
            "types": [
              "StoryTransformationDesigner"
            ],
            "source": "./story-transformation-designer",
            "isTypeOnly": false
          },
          {
            "types": [
              "EmotionalLearningIntegrator"
            ],
            "source": "./emotional-learning-integrator",
            "isTypeOnly": false
          },
          {
            "types": [
              "ContextManager"
            ],
            "source": "./context-manager",
            "isTypeOnly": false
          },
          {
            "types": [
              "PromptGenerator"
            ],
            "source": "./prompt-generator",
            "isTypeOnly": false
          },
          {
            "types": [
              "EventBus",
              "eventBus"
            ],
            "source": "./event-bus",
            "isTypeOnly": false
          },
          {
            "types": [
              "MemoryManager"
            ],
            "source": "@/lib/memory/core/memory-manager",
            "isTypeOnly": false
          },
          {
            "types": [
              "CharacterManager"
            ],
            "source": "@/lib/characters/manager",
            "isTypeOnly": false
          },
          {
            "types": [
              "logger"
            ],
            "source": "@/lib/utils/logger",
            "isTypeOnly": false
          },
          {
            "types": [
              "withTimeout"
            ],
            "source": "@/lib/utils/promise-utils",
            "isTypeOnly": false
          },
          {
            "types": [
              "Chapter"
            ],
            "source": "@/types/chapters",
            "isTypeOnly": true
          },
          {
            "types": [
              "SystemOperationResult",
              "MemoryLevel",
              "MemorySystemStatus as UnifiedMemorySystemStatus",
              "SystemHealth"
            ],
            "source": "@/lib/memory/core/types",
            "isTypeOnly": true
          }
        ],
        "exports": [
          "LearningJourneySystemConfig",
          "LearningJourneySystem",
          "default"
        ],
        "inlineTypes": [
          {
            "definition": ": {\n        enabled: boolean;\n        maxRetries: number;\n        timeoutMs: number;\n        fallbackEnabled: boolean;\n    }",
            "lineNumber": 80
          },
          {
            "definition": ": {\n        timeoutMs: number;\n        criticalComponentsRequired: string[];\n        allowPartialInitialization: boolean;\n    }",
            "lineNumber": 88
          },
          {
            "definition": ": {\n        enableCaching: boolean;\n        enableOptimization: boolean;\n        enableDiagnostics: boolean;\n        maxProcessingTimeMs: number;\n    }",
            "lineNumber": 95
          },
          {
            "definition": ": {\n        enableGracefulDegradation: boolean;\n        maxFailureCount: number;\n        autoRecovery: boolean;\n    }",
            "lineNumber": 103
          },
          {
            "definition": ": {\n        totalTime: number;\n        componentsInitialized: number;\n        componentsActive: number;\n        memorySystemIntegrated: boolean;\n    }",
            "lineNumber": 114
          },
          {
            "definition": ": {\n        totalOperations: number;\n        successfulOperations: number;\n        failedOperations: number;\n        averageProcessingTime: number;\n        memorySystemHits: number;\n        cacheEfficiencyRate: number;\n    }",
            "lineNumber": 120
          },
          {
            "definition": ": { initialized: boolean; functional: boolean; }",
            "lineNumber": 136
          },
          {
            "definition": ": { initialized: boolean; functional: boolean; }",
            "lineNumber": 137
          },
          {
            "definition": ": { initialized: boolean; functional: boolean; }",
            "lineNumber": 138
          },
          {
            "definition": ": { initialized: boolean; functional: boolean; }",
            "lineNumber": 139
          },
          {
            "definition": ": { initialized: boolean; functional: boolean; }",
            "lineNumber": 140
          },
          {
            "definition": ": { initialized: boolean; healthy: boolean; }",
            "lineNumber": 141
          },
          {
            "definition": ": { initialized: false, functional: false }",
            "lineNumber": 179
          },
          {
            "definition": ": { initialized: false, functional: false }",
            "lineNumber": 180
          },
          {
            "definition": ": { initialized: false, functional: false }",
            "lineNumber": 181
          },
          {
            "definition": ": { initialized: false, functional: false }",
            "lineNumber": 182
          },
          {
            "definition": ": { initialized: false, functional: false }",
            "lineNumber": 183
          },
          {
            "definition": ": { initialized: false, healthy: false }",
            "lineNumber": 184
          },
          {
            "definition": ": {\n            totalTime: 0,\n            componentsInitialized: 0,\n            componentsActive: 0,\n            memorySystemIntegrated: false\n        }",
            "lineNumber": 189
          },
          {
            "definition": ": {\n            totalOperations: 0,\n            successfulOperations: 0,\n            failedOperations: 0,\n            averageProcessingTime: 0,\n            memorySystemHits: 0,\n            cacheEfficiencyRate: 0\n        }",
            "lineNumber": 195
          },
          {
            "definition": ": {\n                enabled: true,\n                maxRetries: 3,\n                timeoutMs: 30000,\n                fallbackEnabled: true,\n                ...config?.memorySystemIntegration\n            }",
            "lineNumber": 247
          },
          {
            "definition": ": {\n                timeoutMs: 15000,\n                criticalComponentsRequired: ['conceptManager', 'promptGenerator'],\n                allowPartialInitialization: true,\n                ...config?.initialization\n            }",
            "lineNumber": 254
          },
          {
            "definition": ": {\n                enableCaching: true,\n                enableOptimization: true,\n                enableDiagnostics: true,\n                maxProcessingTimeMs: 10000,\n                ...config?.performance\n            }",
            "lineNumber": 260
          },
          {
            "definition": ": {\n                enableGracefulDegradation: true,\n                maxFailureCount: 5,\n                autoRecovery: true,\n                ...config?.errorHandling\n            }",
            "lineNumber": 267
          },
          {
            "definition": ": { min: 3000, max: 6000 }",
            "lineNumber": 747
          },
          {
            "definition": ": { title: string; content: string; summary: string; }",
            "lineNumber": 1244
          },
          {
            "definition": ": {                                     // ✅ 必須オブジェクト\n                        createdAt: new Date().toISOString(),\n                        lastModified: new Date().toISOString(),\n                        status: 'fallback_save',\n                        summary: chapterData.summary,\n                        wordCount: chapterData.content.length,\n                        estimatedReadingTime: Math.ceil(chapterData.content.length / 1000)\n                    }",
            "lineNumber": 1270
          },
          {
            "definition": ": {\n                opening: [{ dimension: '関心', level: 6 }",
            "lineNumber": 1339
          },
          {
            "definition": ": { initialized: false, functional: false }",
            "lineNumber": 1847
          },
          {
            "definition": ": { initialized: false, functional: false }",
            "lineNumber": 1848
          },
          {
            "definition": ": { initialized: false, functional: false }",
            "lineNumber": 1849
          },
          {
            "definition": ": { initialized: false, functional: false }",
            "lineNumber": 1850
          },
          {
            "definition": ": { initialized: false, functional: false }",
            "lineNumber": 1851
          },
          {
            "definition": ": { initialized: false, healthy: false }",
            "lineNumber": 1852
          }
        ],
        "generics": [
          "LearningJourneySystemConfig",
          "void",
          " Object.keys(this.componentStatus).length - 1) {\n            this.statistics.systemHealth = 'DEGRADED';\n        } else {\n            this.statistics.systemHealth = 'HEALTHY';\n        }\n\n        logger.info(`System state validated`, {\n            systemHealth: this.statistics.systemHealth,\n            availableComponents: availableComponents.length,\n            criticalMissing: missingCritical.length\n        });\n    }\n\n    /**\n     * 初期最適化の実行\n     * @private\n     */\n    private async performInitialOptimization(): Promise<void",
          "string",
          "T",
          " maxRetries) {\n            try {\n                const result = await Promise.race([\n                    operation(),\n                    new Promise<never",
          "any",
          "LearningStage",
          "any[]",
          "boolean",
          "= 3) return LearningStage.MISCONCEPTION;\n        if (chapterNumber <= 6) return LearningStage.EXPLORATION;\n        if (chapterNumber <= 9) return LearningStage.CONFLICT;\n        if (chapterNumber <= 12) return LearningStage.INSIGHT;\n        if (chapterNumber <= 15) return LearningStage.APPLICATION;\n        return LearningStage.INTEGRATION;\n    }\n\n    /**\n     * デフォルトシーン推奨を取得\n     * @private\n     */\n    private getDefaultSceneRecommendations(learningStage: LearningStage): any[] {\n        return [\n            {\n                type: 'LEARNING_SPECIFIC',\n                description: `${this.formatLearningStage(learningStage)}段階に適したシーンを含めてください`,\n                reason: `${this.formatLearningStage(learningStage)}を効果的に表現するため`\n            },\n            {\n                type: 'CHARACTER_DEVELOPMENT',\n                description: 'キャラクターの内面変化を丁寧に描写してください',\n                reason: '読者の共感を促進するため'\n            }\n        ];\n    }\n\n    /**\n     * デフォルト感情アークを取得\n     * @private\n     */\n    private getDefaultEmotionalArc(learningStage: LearningStage): any {\n        return {\n            recommendedTone: 'バランスのとれた学習のトーン',\n            emotionalJourney: {\n                opening: [{ dimension: '関心', level: 6 }],\n                development: [{ dimension: '探求', level: 7 }],\n                conclusion: [{ dimension: '理解', level: 8 }]\n            },\n            reason: `${this.formatLearningStage(learningStage)}段階に適した感情の流れ`\n        };\n    }\n\n    /**\n     * デフォルト共感ポイントを取得\n     * @private\n     */\n    private getDefaultEmpatheticPoints(learningStage: LearningStage): any[] {\n        return [\n            {\n                type: 'character',\n                position: 0.3,\n                intensity: 0.7,\n                description: 'キャラクターの内面的な葛藤'\n            },\n            {\n                type: 'realization',\n                position: 0.7,\n                intensity: 0.8,\n                description: '重要な気づきの瞬間'\n            }\n        ];\n    }\n\n    // ============================================================================\n    // ユーティリティメソッド群\n    // ============================================================================\n\n    /**\n     * 章タイトルを生成\n     * @private\n     */\n    private generateChapterTitle(section: any, chapterNumber: number): string {\n        const sectionProgress = (chapterNumber - section.startChapter) /\n            (section.endChapter - section.startChapter);\n\n        if (sectionProgress < 0.33) {\n            return `${section.title}の始まり`;\n        } else if (sectionProgress < 0.66) {\n            return `${section.title}の展開`;\n        } else {\n            return `${section.title}の転機`;\n        }\n    }\n\n    /**\n     * 前章要約を取得\n     * @private\n     */\n    private getPreviousChapterSummary(context: any, chapterNumber: number): string | undefined {\n        const previousChapter = context.recentChapters?.find(\n            (ch: any) =",
          "= 200) {\n            return content;\n        }\n\n        const sentences = content.split(/[。！？]/);\n        let summary = '';\n        \n        for (const sentence of sentences) {\n            if ((summary + sentence).length ",
          "LearningStage, string",
          "{\n        systemHealth: 'HEALTHY' | 'DEGRADED' | 'CRITICAL';\n        memorySystemStatus: UnifiedMemorySystemStatus | null;\n        componentStatus: ComponentStatus;\n        statistics: SystemStatistics;\n        recommendations: string[];\n        issues: string[];\n    }",
          " 0.8) {\n            issues.push(`Low success rate: ${(successRate * 100).toFixed(1)}%`);\n            recommendations.push('Investigate and resolve operation failures');\n        }\n\n        if (this.statistics.performance.averageProcessingTime ",
          "{\n        optimized: boolean;\n        improvements: string[];\n        processingTime: number;\n        systemHealthImproved: boolean;\n    }"
        ],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [
          {
            "name": "LearningJourneySystemConfig",
            "category": "STORAGE_RELATED",
            "definition": {
              "name": "LearningJourneySystemConfig",
              "body": "// 統合記憶システム設定\n    memorySystemIntegration: {\n        enabled: boolean;\n        maxRetries: number;\n        timeoutMs: number;\n        fallbackEnabled: boolean;",
              "properties": {
                "memorySystemIntegration": {
                  "name": "memorySystemIntegration",
                  "type": "{",
                  "optional": false
                },
                "enabled": {
                  "name": "enabled",
                  "type": "boolean",
                  "optional": false
                },
                "maxRetries": {
                  "name": "maxRetries",
                  "type": "number",
                  "optional": false
                },
                "timeoutMs": {
                  "name": "timeoutMs",
                  "type": "number",
                  "optional": false
                },
                "fallbackEnabled": {
                  "name": "fallbackEnabled",
                  "type": "boolean",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 78
            }
          }
        ],
        "systemIntegrationTypes": []
      },
      "lib\\lifecycle\\types.ts": {
        "filePath": "lib\\lifecycle\\types.ts",
        "fileSize": 0,
        "system": "lifecycle",
        "module": "lifecycle",
        "interfaces": {},
        "types": {},
        "enums": {},
        "imports": [],
        "exports": [],
        "inlineTypes": [],
        "generics": [],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": []
      },
      "lib\\memory\\core\\interfaces.ts": {
        "filePath": "lib\\memory\\core\\interfaces.ts",
        "fileSize": 13397,
        "system": "memory",
        "module": "memory/core",
        "interfaces": {
          "OperationResult": {
            "name": "OperationResult",
            "body": "// ✅ export を削除\r\n  success: boolean;\r\n  error?: string;\r\n  processingTime?: number;\r\n  metadata?: Record<string, any>;",
            "properties": {
              "success": {
                "name": "success",
                "type": "boolean",
                "optional": false
              },
              "error": {
                "name": "error",
                "type": "string",
                "optional": true
              },
              "processingTime": {
                "name": "processingTime",
                "type": "number",
                "optional": true
              },
              "metadata": {
                "name": "metadata",
                "type": "Record<string",
                "optional": true
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 18
          },
          "DiagnosticsResult": {
            "name": "DiagnosticsResult",
            "body": "// ✅ export を削除\r\n  healthy: boolean;\r\n  issues: string[];\r\n  metrics: Record<string, number>;\r\n  lastCheck: string;",
            "properties": {
              "healthy": {
                "name": "healthy",
                "type": "boolean",
                "optional": false
              },
              "issues": {
                "name": "issues",
                "type": "string[]",
                "optional": false
              },
              "metrics": {
                "name": "metrics",
                "type": "Record<string",
                "optional": false
              },
              "lastCheck": {
                "name": "lastCheck",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 28
          },
          "StatusResult": {
            "name": "StatusResult",
            "body": "// ✅ export を削除\r\n  initialized: boolean;\r\n  dataCount: number;\r\n  lastUpdate: string;\r\n  memoryUsage?: number;",
            "properties": {
              "initialized": {
                "name": "initialized",
                "type": "boolean",
                "optional": false
              },
              "dataCount": {
                "name": "dataCount",
                "type": "number",
                "optional": false
              },
              "lastUpdate": {
                "name": "lastUpdate",
                "type": "string",
                "optional": false
              },
              "memoryUsage": {
                "name": "memoryUsage",
                "type": "number",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 38
          },
          "IMemoryLayer": {
            "name": "IMemoryLayer",
            "body": "// ✅ export を削除\r\n  initialize(): Promise<void>;\r\n  addChapter(chapter: Chapter): Promise<OperationResult>;\r\n  getDiagnostics(): Promise<DiagnosticsResult>;\r\n  getStatus(): Promise<StatusResult>;\r\n  getDataSize(): Promise<number>;\r\n  save(): Promise<void>;\r\n  cleanup(): Promise<void>;\r\n  \r\n  // 追加メソッド（必要に応じて各層で実装）\r\n  getContext?(request: any): Promise<any>;\r\n  compress?(): Promise<OperationResult>;",
            "properties": {
              "chapter": {
                "name": "chapter",
                "type": "Chapter): Promise<OperationResult>",
                "optional": false
              },
              "request": {
                "name": "request",
                "type": "any): Promise<any>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 53
          },
          "IIntegrationComponent": {
            "name": "IIntegrationComponent",
            "body": "// ✅ export を削除\r\n  initialize(): Promise<void>;\r\n  getDiagnostics(): Promise<DiagnosticsResult>;\r\n  cleanup(): Promise<void>;",
            "properties": {},
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 74
          },
          "CacheStatisticsData": {
            "name": "CacheStatisticsData",
            "body": "// ✅ export を削除\r\n  hitRatio: number;\r\n  missRatio: number;\r\n  totalRequests: number;\r\n  cacheSize: number;\r\n  lastOptimization: string;\r\n  hitRate?: number; // 互換性のため\r\n  avgAccessTime?: number; // 互換性のため\r\n  memoryUsage?: {\r\n    shortTerm: number;\r\n    midTerm: number;\r\n    longTerm: number;",
            "properties": {
              "hitRatio": {
                "name": "hitRatio",
                "type": "number",
                "optional": false
              },
              "missRatio": {
                "name": "missRatio",
                "type": "number",
                "optional": false
              },
              "totalRequests": {
                "name": "totalRequests",
                "type": "number",
                "optional": false
              },
              "cacheSize": {
                "name": "cacheSize",
                "type": "number",
                "optional": false
              },
              "lastOptimization": {
                "name": "lastOptimization",
                "type": "string",
                "optional": false
              },
              "hitRate": {
                "name": "hitRate",
                "type": "number",
                "optional": true
              },
              "avgAccessTime": {
                "name": "avgAccessTime",
                "type": "number",
                "optional": true
              },
              "memoryUsage": {
                "name": "memoryUsage",
                "type": "{",
                "optional": true
              },
              "shortTerm": {
                "name": "shortTerm",
                "type": "number",
                "optional": false
              },
              "midTerm": {
                "name": "midTerm",
                "type": "number",
                "optional": false
              },
              "longTerm": {
                "name": "longTerm",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 87
          },
          "ICacheCoordinator": {
            "name": "ICacheCoordinator",
            "body": "// ✅ export を削除\r\n  invalidateChapterCache(chapterNumber: number): Promise<void>;\r\n  validateCacheHealth(): Promise<{ isHealthy: boolean; issues: string[]",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number): Promise<void>",
                "optional": false
              },
              "isHealthy": {
                "name": "isHealthy",
                "type": "boolean",
                "optional": false
              },
              "issues": {
                "name": "issues",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": true,
            "lineNumber": 106
          },
          "MemoryQuery": {
            "name": "MemoryQuery",
            "body": "// ✅ export を削除\r\n  type: 'worldSettings' | 'characterInfo' | 'chapterMemories' | 'arcMemory' | 'keyEvents' | 'search';\r\n  target?: string | number;\r\n  parameters?: Record<string, any>;\r\n  options?: {\r\n    useCache?: boolean;\r\n    forceRefresh?: boolean;\r\n    includeMetadata?: boolean;",
            "properties": {
              "type": {
                "name": "type",
                "type": "'worldSettings' | 'characterInfo' | 'chapterMemories' | 'arcMemory' | 'keyEvents' | 'search'",
                "optional": false
              },
              "target": {
                "name": "target",
                "type": "string | number",
                "optional": true
              },
              "parameters": {
                "name": "parameters",
                "type": "Record<string",
                "optional": true
              },
              "options": {
                "name": "options",
                "type": "{",
                "optional": true
              },
              "useCache": {
                "name": "useCache",
                "type": "boolean",
                "optional": true
              },
              "forceRefresh": {
                "name": "forceRefresh",
                "type": "boolean",
                "optional": true
              },
              "includeMetadata": {
                "name": "includeMetadata",
                "type": "boolean",
                "optional": true
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 128
          },
          "MemoryResult": {
            "name": "MemoryResult",
            "body": "// ✅ export を削除\r\n  success: boolean;\r\n  data: any;\r\n  source: 'cache' | 'short-term' | 'mid-term' | 'long-term' | 'unified';\r\n  timestamp: string;\r\n  metadata?: {\r\n    cacheHit: boolean;\r\n    processingTime: number;\r\n    dataFreshness: number;\r\n    conflictsResolved: string[];",
            "properties": {
              "success": {
                "name": "success",
                "type": "boolean",
                "optional": false
              },
              "data": {
                "name": "data",
                "type": "any",
                "optional": false
              },
              "source": {
                "name": "source",
                "type": "'cache' | 'short-term' | 'mid-term' | 'long-term' | 'unified'",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              },
              "metadata": {
                "name": "metadata",
                "type": "{",
                "optional": true
              },
              "cacheHit": {
                "name": "cacheHit",
                "type": "boolean",
                "optional": false
              },
              "processingTime": {
                "name": "processingTime",
                "type": "number",
                "optional": false
              },
              "dataFreshness": {
                "name": "dataFreshness",
                "type": "number",
                "optional": false
              },
              "conflictsResolved": {
                "name": "conflictsResolved",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 142
          },
          "IDuplicateResolver": {
            "name": "IDuplicateResolver",
            "body": "// ✅ export を削除\r\n  detectChapterDuplicates(chapter: Chapter): Promise<any[]>;\r\n  resolveDuplicates(duplicates: any[]): Promise<void>;\r\n  performCleanup(): Promise<{ cleaned: boolean; removedCount: number",
            "properties": {
              "chapter": {
                "name": "chapter",
                "type": "Chapter): Promise<any[]>",
                "optional": false
              },
              "duplicates": {
                "name": "duplicates",
                "type": "any[]): Promise<void>",
                "optional": false
              },
              "cleaned": {
                "name": "cleaned",
                "type": "boolean",
                "optional": false
              },
              "removedCount": {
                "name": "removedCount",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": true,
            "lineNumber": 158
          },
          "AccessStatisticsData": {
            "name": "AccessStatisticsData",
            "body": "// ✅ export を削除\r\n  totalAccesses: number;\r\n  averageAccessTime: number;\r\n  cacheHitRate: number;\r\n  consistencyScore: number;\r\n  optimizationEffectiveness: number;\r\n  performanceGain: number;\r\n  strategyDistribution: Record<string, number>;\r\n  levelDistribution: Record<string, number>;",
            "properties": {
              "totalAccesses": {
                "name": "totalAccesses",
                "type": "number",
                "optional": false
              },
              "averageAccessTime": {
                "name": "averageAccessTime",
                "type": "number",
                "optional": false
              },
              "cacheHitRate": {
                "name": "cacheHitRate",
                "type": "number",
                "optional": false
              },
              "consistencyScore": {
                "name": "consistencyScore",
                "type": "number",
                "optional": false
              },
              "optimizationEffectiveness": {
                "name": "optimizationEffectiveness",
                "type": "number",
                "optional": false
              },
              "performanceGain": {
                "name": "performanceGain",
                "type": "number",
                "optional": false
              },
              "strategyDistribution": {
                "name": "strategyDistribution",
                "type": "Record<string",
                "optional": false
              },
              "levelDistribution": {
                "name": "levelDistribution",
                "type": "Record<string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 176
          },
          "IAccessOptimizer": {
            "name": "IAccessOptimizer",
            "body": "// ✅ export を削除\r\n  optimizedAccess<T>(query: MemoryQuery, strategy?: string): Promise<any>;\r\n  getStatistics(): AccessStatisticsData;\r\n  updateConfiguration(config: any): void;",
            "properties": {
              "query": {
                "name": "query",
                "type": "MemoryQuery",
                "optional": false
              },
              "strategy": {
                "name": "strategy",
                "type": "string): Promise<any>",
                "optional": true
              },
              "config": {
                "name": "config",
                "type": "any): void",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": true,
            "lineNumber": 190
          },
          "QualityMetricsData": {
            "name": "QualityMetricsData",
            "body": "// ✅ export を削除\r\n  dataIntegrity: {\r\n    score: number;\r\n    violations: number;\r\n    lastValidation: number;\r\n    criticalIssues: string[];",
            "properties": {
              "dataIntegrity": {
                "name": "dataIntegrity",
                "type": "{",
                "optional": false
              },
              "score": {
                "name": "score",
                "type": "number",
                "optional": false
              },
              "violations": {
                "name": "violations",
                "type": "number",
                "optional": false
              },
              "lastValidation": {
                "name": "lastValidation",
                "type": "number",
                "optional": false
              },
              "criticalIssues": {
                "name": "criticalIssues",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 203
          },
          "ComprehensiveDiagnosticResult": {
            "name": "ComprehensiveDiagnosticResult",
            "body": "// ✅ export を削除\r\n  overallHealth: number;\r\n  issues: Array<{\r\n    id: string;\r\n    severity: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW';\r\n    category: 'DATA_INTEGRITY' | 'SYSTEM_STABILITY' | 'PERFORMANCE' | 'OPERATIONAL';\r\n    title: string;\r\n    description: string;\r\n    impact: string;\r\n    recommendation: string;\r\n    detectedAt: number;\r\n    component: string;\r\n    metadata: Record<string, any>;",
            "properties": {
              "overallHealth": {
                "name": "overallHealth",
                "type": "number",
                "optional": false
              },
              "issues": {
                "name": "issues",
                "type": "Array<{",
                "optional": false
              },
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "severity": {
                "name": "severity",
                "type": "'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW'",
                "optional": false
              },
              "category": {
                "name": "category",
                "type": "'DATA_INTEGRITY' | 'SYSTEM_STABILITY' | 'PERFORMANCE' | 'OPERATIONAL'",
                "optional": false
              },
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "impact": {
                "name": "impact",
                "type": "string",
                "optional": false
              },
              "recommendation": {
                "name": "recommendation",
                "type": "string",
                "optional": false
              },
              "detectedAt": {
                "name": "detectedAt",
                "type": "number",
                "optional": false
              },
              "component": {
                "name": "component",
                "type": "string",
                "optional": false
              },
              "metadata": {
                "name": "metadata",
                "type": "Record<string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 236
          },
          "IQualityAssurance": {
            "name": "IQualityAssurance",
            "body": "// ✅ export を削除\r\n  performComprehensiveDiagnostic(): Promise<ComprehensiveDiagnosticResult>;\r\n  getCurrentMetrics(): QualityMetricsData;\r\n  updateConfiguration(config: any): void;\r\n  getLastDiagnosticResult(): ComprehensiveDiagnosticResult | null;\r\n  getIssueHistory(limit?: number): any[];\r\n  generateQualityReport(periodDays?: number): Promise<any>;\r\n  stopMonitoring(): void;",
            "properties": {
              "config": {
                "name": "config",
                "type": "any): void",
                "optional": false
              },
              "limit": {
                "name": "limit",
                "type": "number): any[]",
                "optional": true
              },
              "periodDays": {
                "name": "periodDays",
                "type": "number): Promise<any>",
                "optional": true
              }
            },
            "isGeneric": true,
            "extendsOther": true,
            "lineNumber": 263
          },
          "ShortTermMemoryConfig": {
            "name": "ShortTermMemoryConfig",
            "body": "// ✅ export を削除\r\n  maxChapters: number;\r\n  cacheEnabled: boolean;",
            "properties": {
              "maxChapters": {
                "name": "maxChapters",
                "type": "number",
                "optional": false
              },
              "cacheEnabled": {
                "name": "cacheEnabled",
                "type": "boolean",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 280
          },
          "IShortTermMemory": {
            "name": "IShortTermMemory",
            "body": "// ✅ export を削除\r\n  getRecentChapters(limit?: number): Promise<any[]>;\r\n  getCurrentContext(): Promise<any>;\r\n  updateBuffers(data: any): Promise<void>;\r\n  getAnalysisResults(): Promise<any>;",
            "properties": {
              "limit": {
                "name": "limit",
                "type": "number): Promise<any[]>",
                "optional": true
              },
              "data": {
                "name": "data",
                "type": "any): Promise<void>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": true,
            "lineNumber": 288
          },
          "IMidTermMemory": {
            "name": "IMidTermMemory",
            "body": "// ✅ export を削除\r\n  getChapterSummaries(range?: { start: number; end: number",
            "properties": {
              "range": {
                "name": "range",
                "type": "{ start: number",
                "optional": true
              },
              "end": {
                "name": "end",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 302
          },
          "ILongTermMemory": {
            "name": "ILongTermMemory",
            "body": "// ✅ export を削除\r\n  getCharacterDatabase(): Promise<any>;\r\n  getWorldKnowledge(): Promise<any>;\r\n  getSystemKnowledge(): Promise<any>;\r\n  getHistoricalRecords(): Promise<any>;\r\n  addForeshadowing(foreshadowing: any): Promise<any>;\r\n  resolveForeshadowing(id: string, resolution: any): Promise<void>;\r\n  getUnresolvedForeshadowing(): Promise<any[]>;\r\n  performLearningAndImprovement(): Promise<any>;",
            "properties": {
              "foreshadowing": {
                "name": "foreshadowing",
                "type": "any): Promise<any>",
                "optional": false
              },
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "resolution": {
                "name": "resolution",
                "type": "any): Promise<void>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": true,
            "lineNumber": 318
          },
          "IUnifiedMemoryManager": {
            "name": "IUnifiedMemoryManager",
            "body": "// ✅ export を削除\r\n  // 基本操作\r\n  initialize(): Promise<void>;\r\n  addChapter(chapter: Chapter): Promise<OperationResult>;\r\n  save(): Promise<void>;\r\n  cleanup(): Promise<void>;\r\n  \r\n  // 診断・監視\r\n  performComprehensiveDiagnostic(): Promise<ComprehensiveDiagnosticResult>;\r\n  getSystemStatus(): Promise<{\r\n    shortTerm: StatusResult;\r\n    midTerm: StatusResult;\r\n    longTerm: StatusResult;\r\n    integration: StatusResult;",
            "properties": {
              "chapter": {
                "name": "chapter",
                "type": "Chapter): Promise<OperationResult>",
                "optional": false
              },
              "shortTerm": {
                "name": "shortTerm",
                "type": "StatusResult",
                "optional": false
              },
              "midTerm": {
                "name": "midTerm",
                "type": "StatusResult",
                "optional": false
              },
              "longTerm": {
                "name": "longTerm",
                "type": "StatusResult",
                "optional": false
              },
              "integration": {
                "name": "integration",
                "type": "StatusResult",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 337
          }
        },
        "types": {},
        "enums": {
          "MemoryLevel": {
            "name": "MemoryLevel",
            "body": "// ✅ enum は直接エクスポート可能\r\n  SHORT_TERM = 'short-term',\r\n  MID_TERM = 'mid-term',\r\n  LONG_TERM = 'long-term'",
            "values": [
              {
                "name": "// ✅ enum は直接エクスポート可能\r\n  SHORT_TERM",
                "value": "'short-term'"
              },
              {
                "name": "MID_TERM",
                "value": "'mid-term'"
              },
              {
                "name": "LONG_TERM",
                "value": "'long-term'"
              }
            ],
            "lineNumber": 374
          },
          "AccessStrategy": {
            "name": "AccessStrategy",
            "body": "// ✅ enum は直接エクスポート可能\r\n  CACHE_FIRST = 'cache-first',\r\n  CONSISTENCY_FIRST = 'consistency-first',\r\n  PERFORMANCE_FIRST = 'performance-first',\r\n  BALANCED = 'balanced',\r\n  PREDICTIVE = 'predictive'",
            "values": [
              {
                "name": "// ✅ enum は直接エクスポート可能\r\n  CACHE_FIRST",
                "value": "'cache-first'"
              },
              {
                "name": "CONSISTENCY_FIRST",
                "value": "'consistency-first'"
              },
              {
                "name": "PERFORMANCE_FIRST",
                "value": "'performance-first'"
              },
              {
                "name": "BALANCED",
                "value": "'balanced'"
              },
              {
                "name": "PREDICTIVE",
                "value": "'predictive'"
              }
            ],
            "lineNumber": 383
          }
        },
        "imports": [
          {
            "types": [
              "Chapter"
            ],
            "source": "@/types/chapters",
            "isTypeOnly": true
          },
          {
            "types": [
              "Character"
            ],
            "source": "@/types/characters",
            "isTypeOnly": true
          }
        ],
        "exports": [
          "MemoryLevel",
          "AccessStrategy",
          "const",
          "const",
          "function",
          "function",
          "function",
          "type"
        ],
        "inlineTypes": [
          {
            "definition": ": {\r\n    shortTerm: number;\r\n    midTerm: number;\r\n    longTerm: number;\r\n  }",
            "lineNumber": 95
          },
          {
            "definition": ": {\r\n    useCache?: boolean;\r\n    forceRefresh?: boolean;\r\n    includeMetadata?: boolean;\r\n  }",
            "lineNumber": 132
          },
          {
            "definition": ": {\r\n    cacheHit: boolean;\r\n    processingTime: number;\r\n    dataFreshness: number;\r\n    conflictsResolved: string[];\r\n  }",
            "lineNumber": 147
          },
          {
            "definition": ": {\r\n    score: number;\r\n    violations: number;\r\n    lastValidation: number;\r\n    criticalIssues: string[];\r\n  }",
            "lineNumber": 204
          },
          {
            "definition": ": {\r\n    score: number;\r\n    uptime: number;\r\n    errorRate: number;\r\n    recoveryTime: number;\r\n    crashCount: number;\r\n  }",
            "lineNumber": 210
          },
          {
            "definition": ": {\r\n    score: number;\r\n    averageResponseTime: number;\r\n    throughput: number;\r\n    resourceUtilization: number;\r\n    bottlenecks: string[];\r\n  }",
            "lineNumber": 217
          },
          {
            "definition": ": {\r\n    score: number;\r\n    automationLevel: number;\r\n    maintenanceOverhead: number;\r\n    alertAccuracy: number;\r\n    resolutionTime: number;\r\n  }",
            "lineNumber": 224
          },
          {
            "definition": ": {\r\n    improving: string[];\r\n    degrading: string[];\r\n    stable: string[];\r\n  }",
            "lineNumber": 253
          },
          {
            "definition": ": { start: number; end: number }",
            "lineNumber": 303
          }
        ],
        "generics": [
          "string, any",
          "string, number",
          "void",
          "OperationResult",
          "DiagnosticsResult",
          "StatusResult",
          "number",
          "any",
          "{ isHealthy: boolean; issues: string[] }",
          "{ optimized: boolean; improvements: string[] }",
          "CacheStatisticsData",
          "T",
          "T | null",
          "any[]",
          "{ cleaned: boolean; removedCount: number }",
          "MemoryResult",
          "{\r\n    id: string;\r\n    severity: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW';\r\n    category: 'DATA_INTEGRITY' | 'SYSTEM_STABILITY' | 'PERFORMANCE' | 'OPERATIONAL';\r\n    title: string;\r\n    description: string;\r\n    impact: string;\r\n    recommendation: string;\r\n    detectedAt: number;\r\n    component: string;\r\n    metadata: Record<string, any",
          "ComprehensiveDiagnosticResult",
          "{\r\n    shortTerm: StatusResult;\r\n    midTerm: StatusResult;\r\n    longTerm: StatusResult;\r\n    integration: StatusResult;\r\n  }",
          "QualityMetricsData"
        ],
        "extendedTypes": [
          "IIntegrationComponent",
          "IIntegrationComponent",
          "IIntegrationComponent",
          "IIntegrationComponent",
          "IMemoryLayer",
          "IMemoryLayer",
          "IMemoryLayer"
        ],
        "dataModelTypes": [
          {
            "name": "CacheStatisticsData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "CacheStatisticsData",
              "body": "// ✅ export を削除\r\n  hitRatio: number;\r\n  missRatio: number;\r\n  totalRequests: number;\r\n  cacheSize: number;\r\n  lastOptimization: string;\r\n  hitRate?: number; // 互換性のため\r\n  avgAccessTime?: number; // 互換性のため\r\n  memoryUsage?: {\r\n    shortTerm: number;\r\n    midTerm: number;\r\n    longTerm: number;",
              "properties": {
                "hitRatio": {
                  "name": "hitRatio",
                  "type": "number",
                  "optional": false
                },
                "missRatio": {
                  "name": "missRatio",
                  "type": "number",
                  "optional": false
                },
                "totalRequests": {
                  "name": "totalRequests",
                  "type": "number",
                  "optional": false
                },
                "cacheSize": {
                  "name": "cacheSize",
                  "type": "number",
                  "optional": false
                },
                "lastOptimization": {
                  "name": "lastOptimization",
                  "type": "string",
                  "optional": false
                },
                "hitRate": {
                  "name": "hitRate",
                  "type": "number",
                  "optional": true
                },
                "avgAccessTime": {
                  "name": "avgAccessTime",
                  "type": "number",
                  "optional": true
                },
                "memoryUsage": {
                  "name": "memoryUsage",
                  "type": "{",
                  "optional": true
                },
                "shortTerm": {
                  "name": "shortTerm",
                  "type": "number",
                  "optional": false
                },
                "midTerm": {
                  "name": "midTerm",
                  "type": "number",
                  "optional": false
                },
                "longTerm": {
                  "name": "longTerm",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 87
            }
          },
          {
            "name": "AccessStatisticsData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "AccessStatisticsData",
              "body": "// ✅ export を削除\r\n  totalAccesses: number;\r\n  averageAccessTime: number;\r\n  cacheHitRate: number;\r\n  consistencyScore: number;\r\n  optimizationEffectiveness: number;\r\n  performanceGain: number;\r\n  strategyDistribution: Record<string, number>;\r\n  levelDistribution: Record<string, number>;",
              "properties": {
                "totalAccesses": {
                  "name": "totalAccesses",
                  "type": "number",
                  "optional": false
                },
                "averageAccessTime": {
                  "name": "averageAccessTime",
                  "type": "number",
                  "optional": false
                },
                "cacheHitRate": {
                  "name": "cacheHitRate",
                  "type": "number",
                  "optional": false
                },
                "consistencyScore": {
                  "name": "consistencyScore",
                  "type": "number",
                  "optional": false
                },
                "optimizationEffectiveness": {
                  "name": "optimizationEffectiveness",
                  "type": "number",
                  "optional": false
                },
                "performanceGain": {
                  "name": "performanceGain",
                  "type": "number",
                  "optional": false
                },
                "strategyDistribution": {
                  "name": "strategyDistribution",
                  "type": "Record<string",
                  "optional": false
                },
                "levelDistribution": {
                  "name": "levelDistribution",
                  "type": "Record<string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 176
            }
          },
          {
            "name": "QualityMetricsData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "QualityMetricsData",
              "body": "// ✅ export を削除\r\n  dataIntegrity: {\r\n    score: number;\r\n    violations: number;\r\n    lastValidation: number;\r\n    criticalIssues: string[];",
              "properties": {
                "dataIntegrity": {
                  "name": "dataIntegrity",
                  "type": "{",
                  "optional": false
                },
                "score": {
                  "name": "score",
                  "type": "number",
                  "optional": false
                },
                "violations": {
                  "name": "violations",
                  "type": "number",
                  "optional": false
                },
                "lastValidation": {
                  "name": "lastValidation",
                  "type": "number",
                  "optional": false
                },
                "criticalIssues": {
                  "name": "criticalIssues",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 203
            }
          }
        ],
        "storageRelatedTypes": [
          {
            "name": "CacheStatisticsData",
            "category": "STORAGE_RELATED",
            "definition": {
              "name": "CacheStatisticsData",
              "body": "// ✅ export を削除\r\n  hitRatio: number;\r\n  missRatio: number;\r\n  totalRequests: number;\r\n  cacheSize: number;\r\n  lastOptimization: string;\r\n  hitRate?: number; // 互換性のため\r\n  avgAccessTime?: number; // 互換性のため\r\n  memoryUsage?: {\r\n    shortTerm: number;\r\n    midTerm: number;\r\n    longTerm: number;",
              "properties": {
                "hitRatio": {
                  "name": "hitRatio",
                  "type": "number",
                  "optional": false
                },
                "missRatio": {
                  "name": "missRatio",
                  "type": "number",
                  "optional": false
                },
                "totalRequests": {
                  "name": "totalRequests",
                  "type": "number",
                  "optional": false
                },
                "cacheSize": {
                  "name": "cacheSize",
                  "type": "number",
                  "optional": false
                },
                "lastOptimization": {
                  "name": "lastOptimization",
                  "type": "string",
                  "optional": false
                },
                "hitRate": {
                  "name": "hitRate",
                  "type": "number",
                  "optional": true
                },
                "avgAccessTime": {
                  "name": "avgAccessTime",
                  "type": "number",
                  "optional": true
                },
                "memoryUsage": {
                  "name": "memoryUsage",
                  "type": "{",
                  "optional": true
                },
                "shortTerm": {
                  "name": "shortTerm",
                  "type": "number",
                  "optional": false
                },
                "midTerm": {
                  "name": "midTerm",
                  "type": "number",
                  "optional": false
                },
                "longTerm": {
                  "name": "longTerm",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 87
            }
          },
          {
            "name": "ICacheCoordinator",
            "category": "STORAGE_RELATED",
            "definition": {
              "name": "ICacheCoordinator",
              "body": "// ✅ export を削除\r\n  invalidateChapterCache(chapterNumber: number): Promise<void>;\r\n  validateCacheHealth(): Promise<{ isHealthy: boolean; issues: string[]",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number): Promise<void>",
                  "optional": false
                },
                "isHealthy": {
                  "name": "isHealthy",
                  "type": "boolean",
                  "optional": false
                },
                "issues": {
                  "name": "issues",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 106
            }
          },
          {
            "name": "ShortTermMemoryConfig",
            "category": "STORAGE_RELATED",
            "definition": {
              "name": "ShortTermMemoryConfig",
              "body": "// ✅ export を削除\r\n  maxChapters: number;\r\n  cacheEnabled: boolean;",
              "properties": {
                "maxChapters": {
                  "name": "maxChapters",
                  "type": "number",
                  "optional": false
                },
                "cacheEnabled": {
                  "name": "cacheEnabled",
                  "type": "boolean",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 280
            }
          }
        ],
        "systemIntegrationTypes": [
          {
            "name": "IIntegrationComponent",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "IIntegrationComponent",
              "body": "// ✅ export を削除\r\n  initialize(): Promise<void>;\r\n  getDiagnostics(): Promise<DiagnosticsResult>;\r\n  cleanup(): Promise<void>;",
              "properties": {},
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 74
            }
          },
          {
            "name": "ICacheCoordinator",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "ICacheCoordinator",
              "body": "// ✅ export を削除\r\n  invalidateChapterCache(chapterNumber: number): Promise<void>;\r\n  validateCacheHealth(): Promise<{ isHealthy: boolean; issues: string[]",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number): Promise<void>",
                  "optional": false
                },
                "isHealthy": {
                  "name": "isHealthy",
                  "type": "boolean",
                  "optional": false
                },
                "issues": {
                  "name": "issues",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 106
            }
          },
          {
            "name": "IUnifiedMemoryManager",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "IUnifiedMemoryManager",
              "body": "// ✅ export を削除\r\n  // 基本操作\r\n  initialize(): Promise<void>;\r\n  addChapter(chapter: Chapter): Promise<OperationResult>;\r\n  save(): Promise<void>;\r\n  cleanup(): Promise<void>;\r\n  \r\n  // 診断・監視\r\n  performComprehensiveDiagnostic(): Promise<ComprehensiveDiagnosticResult>;\r\n  getSystemStatus(): Promise<{\r\n    shortTerm: StatusResult;\r\n    midTerm: StatusResult;\r\n    longTerm: StatusResult;\r\n    integration: StatusResult;",
              "properties": {
                "chapter": {
                  "name": "chapter",
                  "type": "Chapter): Promise<OperationResult>",
                  "optional": false
                },
                "shortTerm": {
                  "name": "shortTerm",
                  "type": "StatusResult",
                  "optional": false
                },
                "midTerm": {
                  "name": "midTerm",
                  "type": "StatusResult",
                  "optional": false
                },
                "longTerm": {
                  "name": "longTerm",
                  "type": "StatusResult",
                  "optional": false
                },
                "integration": {
                  "name": "integration",
                  "type": "StatusResult",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 337
            }
          }
        ]
      },
      "lib\\memory\\core\\types.ts": {
        "filePath": "lib\\memory\\core\\types.ts",
        "fileSize": 18656,
        "system": "memory",
        "module": "memory/core",
        "interfaces": {
          "UnifiedSearchResult": {
            "name": "UnifiedSearchResult",
            "body": "success: boolean;\n    totalResults: number;\n    processingTime: number;\n    results: Array<{\n        source: MemoryLevel;\n        type: string;\n        data: any;\n        relevance: number;\n        metadata: Record<string, any>;",
            "properties": {
              "success": {
                "name": "success",
                "type": "boolean",
                "optional": false
              },
              "totalResults": {
                "name": "totalResults",
                "type": "number",
                "optional": false
              },
              "processingTime": {
                "name": "processingTime",
                "type": "number",
                "optional": false
              },
              "results": {
                "name": "results",
                "type": "Array<{",
                "optional": false
              },
              "source": {
                "name": "source",
                "type": "MemoryLevel",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "data": {
                "name": "data",
                "type": "any",
                "optional": false
              },
              "relevance": {
                "name": "relevance",
                "type": "number",
                "optional": false
              },
              "metadata": {
                "name": "metadata",
                "type": "Record<string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 19
          },
          "SystemOperationResult": {
            "name": "SystemOperationResult",
            "body": "success: boolean;\n    operationType: string;\n    processingTime: number;\n    affectedComponents: string[];\n    details: Record<string, any>;\n    warnings: string[];\n    errors: string[];",
            "properties": {
              "success": {
                "name": "success",
                "type": "boolean",
                "optional": false
              },
              "operationType": {
                "name": "operationType",
                "type": "string",
                "optional": false
              },
              "processingTime": {
                "name": "processingTime",
                "type": "number",
                "optional": false
              },
              "affectedComponents": {
                "name": "affectedComponents",
                "type": "string[]",
                "optional": false
              },
              "details": {
                "name": "details",
                "type": "Record<string",
                "optional": false
              },
              "warnings": {
                "name": "warnings",
                "type": "string[]",
                "optional": false
              },
              "errors": {
                "name": "errors",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 36
          },
          "MemoryHierarchyConfig": {
            "name": "MemoryHierarchyConfig",
            "body": "shortTerm: {\n        maxChapters: number;\n        retentionTime: number; // milliseconds\n        cacheEnabled: boolean;",
            "properties": {
              "shortTerm": {
                "name": "shortTerm",
                "type": "{",
                "optional": false
              },
              "maxChapters": {
                "name": "maxChapters",
                "type": "number",
                "optional": false
              },
              "retentionTime": {
                "name": "retentionTime",
                "type": "number",
                "optional": false
              },
              "cacheEnabled": {
                "name": "cacheEnabled",
                "type": "boolean",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 58
          },
          "UnifiedMemoryContext": {
            "name": "UnifiedMemoryContext",
            "body": "chapterNumber: number;\n    timestamp: string;\n    \n    // Short Term Context\n    shortTerm: {\n        recentChapters: ChapterContextData[];\n        immediateCharacterStates: Map<string, CharacterState>;\n        keyPhrases: string[];\n        processingBuffers: ProcessingBuffer[];",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              },
              "shortTerm": {
                "name": "shortTerm",
                "type": "{",
                "optional": false
              },
              "recentChapters": {
                "name": "recentChapters",
                "type": "ChapterContextData[]",
                "optional": false
              },
              "immediateCharacterStates": {
                "name": "immediateCharacterStates",
                "type": "Map<string",
                "optional": false
              },
              "keyPhrases": {
                "name": "keyPhrases",
                "type": "string[]",
                "optional": false
              },
              "processingBuffers": {
                "name": "processingBuffers",
                "type": "ProcessingBuffer[]",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 79
          },
          "MemoryAccessRequest": {
            "name": "MemoryAccessRequest",
            "body": "chapterNumber: number;\n    requestType: MemoryRequestType;\n    targetLayers: MemoryLevel[];\n    filters?: MemoryAccessFilters;\n    options?: MemoryAccessOptions;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "requestType": {
                "name": "requestType",
                "type": "MemoryRequestType",
                "optional": false
              },
              "targetLayers": {
                "name": "targetLayers",
                "type": "MemoryLevel[]",
                "optional": false
              },
              "filters": {
                "name": "filters",
                "type": "MemoryAccessFilters",
                "optional": true
              },
              "options": {
                "name": "options",
                "type": "MemoryAccessOptions",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 119
          },
          "MemoryAccessResponse": {
            "name": "MemoryAccessResponse",
            "body": "success: boolean;\n    context: UnifiedMemoryContext | null;\n    fromCache: boolean;\n    processingTime: number;\n    error?: string;\n    metadata?: {\n        layersAccessed: MemoryLevel[];\n        duplicatesResolved: number;\n        cacheHits: number;",
            "properties": {
              "success": {
                "name": "success",
                "type": "boolean",
                "optional": false
              },
              "context": {
                "name": "context",
                "type": "UnifiedMemoryContext | null",
                "optional": false
              },
              "fromCache": {
                "name": "fromCache",
                "type": "boolean",
                "optional": false
              },
              "processingTime": {
                "name": "processingTime",
                "type": "number",
                "optional": false
              },
              "error": {
                "name": "error",
                "type": "string",
                "optional": true
              },
              "metadata": {
                "name": "metadata",
                "type": "{",
                "optional": true
              },
              "layersAccessed": {
                "name": "layersAccessed",
                "type": "MemoryLevel[]",
                "optional": false
              },
              "duplicatesResolved": {
                "name": "duplicatesResolved",
                "type": "number",
                "optional": false
              },
              "cacheHits": {
                "name": "cacheHits",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 130
          },
          "MemoryAccessFilters": {
            "name": "MemoryAccessFilters",
            "body": "characterIds?: string[];\n    eventTypes?: string[];\n    analysisTypes?: string[];\n    timeRange?: {\n        startChapter: number;\n        endChapter: number;",
            "properties": {
              "characterIds": {
                "name": "characterIds",
                "type": "string[]",
                "optional": true
              },
              "eventTypes": {
                "name": "eventTypes",
                "type": "string[]",
                "optional": true
              },
              "analysisTypes": {
                "name": "analysisTypes",
                "type": "string[]",
                "optional": true
              },
              "timeRange": {
                "name": "timeRange",
                "type": "{",
                "optional": true
              },
              "startChapter": {
                "name": "startChapter",
                "type": "number",
                "optional": false
              },
              "endChapter": {
                "name": "endChapter",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 158
          },
          "MemoryAccessOptions": {
            "name": "MemoryAccessOptions",
            "body": "includeCache?: boolean;\n    resolveDuplicates?: boolean;\n    optimizeAccess?: boolean;\n    deepAnalysis?: boolean;\n    compressionLevel?: number;",
            "properties": {
              "includeCache": {
                "name": "includeCache",
                "type": "boolean",
                "optional": true
              },
              "resolveDuplicates": {
                "name": "resolveDuplicates",
                "type": "boolean",
                "optional": true
              },
              "optimizeAccess": {
                "name": "optimizeAccess",
                "type": "boolean",
                "optional": true
              },
              "deepAnalysis": {
                "name": "deepAnalysis",
                "type": "boolean",
                "optional": true
              },
              "compressionLevel": {
                "name": "compressionLevel",
                "type": "number",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 175
          },
          "MemoryOperationResult": {
            "name": "MemoryOperationResult",
            "body": "success: boolean;\n    processingTime: number;\n    shortTermUpdated: boolean;\n    integrationProcessed: boolean;\n    duplicatesResolved: number;\n    error?: string;\n    metadata?: {\n        chapterNumber?: number;\n        dataSize?: number;\n        timestamp: string;",
            "properties": {
              "success": {
                "name": "success",
                "type": "boolean",
                "optional": false
              },
              "processingTime": {
                "name": "processingTime",
                "type": "number",
                "optional": false
              },
              "shortTermUpdated": {
                "name": "shortTermUpdated",
                "type": "boolean",
                "optional": false
              },
              "integrationProcessed": {
                "name": "integrationProcessed",
                "type": "boolean",
                "optional": false
              },
              "duplicatesResolved": {
                "name": "duplicatesResolved",
                "type": "number",
                "optional": false
              },
              "error": {
                "name": "error",
                "type": "string",
                "optional": true
              },
              "metadata": {
                "name": "metadata",
                "type": "{",
                "optional": true
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": true
              },
              "dataSize": {
                "name": "dataSize",
                "type": "number",
                "optional": true
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 186
          },
          "ChapterContextData": {
            "name": "ChapterContextData",
            "body": "chapter: Chapter;\n    characterStates: Map<string, CharacterState>;\n    keyPhrases: string[];\n    analysisResults: ChapterAnalysisResult[];\n    timestamp: string;",
            "properties": {
              "chapter": {
                "name": "chapter",
                "type": "Chapter",
                "optional": false
              },
              "characterStates": {
                "name": "characterStates",
                "type": "Map<string",
                "optional": false
              },
              "keyPhrases": {
                "name": "keyPhrases",
                "type": "string[]",
                "optional": false
              },
              "analysisResults": {
                "name": "analysisResults",
                "type": "ChapterAnalysisResult[]",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 207
          },
          "ProcessingBuffer": {
            "name": "ProcessingBuffer",
            "body": "id: string;\n    type: ProcessingBufferType;\n    data: any;\n    timestamp: string;\n    expiryTime: string;",
            "properties": {
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "ProcessingBufferType",
                "optional": false
              },
              "data": {
                "name": "data",
                "type": "any",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              },
              "expiryTime": {
                "name": "expiryTime",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 218
          },
          "NarrativeProgressionData": {
            "name": "NarrativeProgressionData",
            "body": "storyState: StoryStateSnapshot[];\n    chapterProgression: Map<number, ChapterProgressionRecord>;\n    arcProgression: Map<number, ArcProgressionRecord>;\n    tensionHistory: Map<number, TensionHistoryRecord>;\n    turningPointsHistory: TurningPointRecord[];",
            "properties": {
              "storyState": {
                "name": "storyState",
                "type": "StoryStateSnapshot[]",
                "optional": false
              },
              "chapterProgression": {
                "name": "chapterProgression",
                "type": "Map<number",
                "optional": false
              },
              "arcProgression": {
                "name": "arcProgression",
                "type": "Map<number",
                "optional": false
              },
              "tensionHistory": {
                "name": "tensionHistory",
                "type": "Map<number",
                "optional": false
              },
              "turningPointsHistory": {
                "name": "turningPointsHistory",
                "type": "TurningPointRecord[]",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 237
          },
          "AnalysisResultData": {
            "name": "AnalysisResultData",
            "body": "emotionalArcDesigns: Map<number, EmotionalArcDesignRecord>;\n    textAnalysisResults: Map<number, TextAnalysisResultRecord>;\n    detectionResults: Map<number, DetectionResultRecord>;\n    preGenerationResults: Map<number, PreGenerationResultRecord>;\n    postGenerationResults: Map<number, PostGenerationResultRecord>;",
            "properties": {
              "emotionalArcDesigns": {
                "name": "emotionalArcDesigns",
                "type": "Map<number",
                "optional": false
              },
              "textAnalysisResults": {
                "name": "textAnalysisResults",
                "type": "Map<number",
                "optional": false
              },
              "detectionResults": {
                "name": "detectionResults",
                "type": "Map<number",
                "optional": false
              },
              "preGenerationResults": {
                "name": "preGenerationResults",
                "type": "Map<number",
                "optional": false
              },
              "postGenerationResults": {
                "name": "postGenerationResults",
                "type": "Map<number",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 248
          },
          "CharacterEvolutionData": {
            "name": "CharacterEvolutionData",
            "body": "developmentHistory: Map<string, CharacterDevelopmentRecord[]>;\n    changeHistory: Map<string, CharacterChangeRecord[]>;\n    relationshipEvolution: Map<string, RelationshipEvolutionRecord[]>;\n    psychologyEvolution: Map<string, PsychologyEvolutionRecord[]>;",
            "properties": {
              "developmentHistory": {
                "name": "developmentHistory",
                "type": "Map<string",
                "optional": false
              },
              "changeHistory": {
                "name": "changeHistory",
                "type": "Map<string",
                "optional": false
              },
              "relationshipEvolution": {
                "name": "relationshipEvolution",
                "type": "Map<string",
                "optional": false
              },
              "psychologyEvolution": {
                "name": "psychologyEvolution",
                "type": "Map<string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 259
          },
          "SystemStatisticsData": {
            "name": "SystemStatisticsData",
            "body": "promptGenerationStats: PromptGenerationStatsRecord[];\n    templateUsageStats: TemplateUsageStatsRecord[];\n    tensionOptimizationStats: TensionOptimizationStatsRecord[];\n    componentPerformanceStats: Map<string, ComponentPerformanceStats>;\n    systemIntegrationStats: SystemIntegrationStatsRecord[];",
            "properties": {
              "promptGenerationStats": {
                "name": "promptGenerationStats",
                "type": "PromptGenerationStatsRecord[]",
                "optional": false
              },
              "templateUsageStats": {
                "name": "templateUsageStats",
                "type": "TemplateUsageStatsRecord[]",
                "optional": false
              },
              "tensionOptimizationStats": {
                "name": "tensionOptimizationStats",
                "type": "TensionOptimizationStatsRecord[]",
                "optional": false
              },
              "componentPerformanceStats": {
                "name": "componentPerformanceStats",
                "type": "Map<string",
                "optional": false
              },
              "systemIntegrationStats": {
                "name": "systemIntegrationStats",
                "type": "SystemIntegrationStatsRecord[]",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 269
          },
          "QualityMetricsData": {
            "name": "QualityMetricsData",
            "body": "chapterQualityHistory: ChapterQualityRecord[];\n    systemQualityMetrics: SystemQualityMetricsRecord[];\n    diagnosticHistory: DiagnosticHistoryRecord[];\n    systemHealthMetrics: SystemHealthMetricsRecord[];",
            "properties": {
              "chapterQualityHistory": {
                "name": "chapterQualityHistory",
                "type": "ChapterQualityRecord[]",
                "optional": false
              },
              "systemQualityMetrics": {
                "name": "systemQualityMetrics",
                "type": "SystemQualityMetricsRecord[]",
                "optional": false
              },
              "diagnosticHistory": {
                "name": "diagnosticHistory",
                "type": "DiagnosticHistoryRecord[]",
                "optional": false
              },
              "systemHealthMetrics": {
                "name": "systemHealthMetrics",
                "type": "SystemHealthMetricsRecord[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 280
          },
          "ConsolidatedSettingsData": {
            "name": "ConsolidatedSettingsData",
            "body": "worldSettingsMaster: WorldSettingsMasterRecord;\n    genreSettingsMaster: GenreSettingsMasterRecord;\n    templateMaster: TemplateMasterRecord;\n    systemConfigMaster: SystemConfigMasterRecord;",
            "properties": {
              "worldSettingsMaster": {
                "name": "worldSettingsMaster",
                "type": "WorldSettingsMasterRecord",
                "optional": false
              },
              "genreSettingsMaster": {
                "name": "genreSettingsMaster",
                "type": "GenreSettingsMasterRecord",
                "optional": false
              },
              "templateMaster": {
                "name": "templateMaster",
                "type": "TemplateMasterRecord",
                "optional": false
              },
              "systemConfigMaster": {
                "name": "systemConfigMaster",
                "type": "SystemConfigMasterRecord",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 290
          },
          "KnowledgeDatabaseData": {
            "name": "KnowledgeDatabaseData",
            "body": "characters: Map<string, CharacterMasterRecord>;\n    worldKnowledge: WorldKnowledgeDatabase;\n    conceptDefinitions: Map<string, ConceptDefinitionRecord>;\n    foreshadowingDatabase: ForeshadowingDatabase;\n    sectionDefinitions: Map<string, SectionDefinitionRecord>;",
            "properties": {
              "characters": {
                "name": "characters",
                "type": "Map<string",
                "optional": false
              },
              "worldKnowledge": {
                "name": "worldKnowledge",
                "type": "WorldKnowledgeDatabase",
                "optional": false
              },
              "conceptDefinitions": {
                "name": "conceptDefinitions",
                "type": "Map<string",
                "optional": false
              },
              "foreshadowingDatabase": {
                "name": "foreshadowingDatabase",
                "type": "ForeshadowingDatabase",
                "optional": false
              },
              "sectionDefinitions": {
                "name": "sectionDefinitions",
                "type": "Map<string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 300
          },
          "SystemKnowledgeBaseData": {
            "name": "SystemKnowledgeBaseData",
            "body": "promptGenerationPatterns: PromptGenerationPattern[];\n    effectiveTemplatePatterns: EffectiveTemplatePattern[];\n    analysisPatterns: AnalysisPattern[];\n    optimizationStrategies: OptimizationStrategy[];\n    errorPatterns: ErrorPattern[];\n    qualityImprovementStrategies: QualityImprovementStrategy[];",
            "properties": {
              "promptGenerationPatterns": {
                "name": "promptGenerationPatterns",
                "type": "PromptGenerationPattern[]",
                "optional": false
              },
              "effectiveTemplatePatterns": {
                "name": "effectiveTemplatePatterns",
                "type": "EffectiveTemplatePattern[]",
                "optional": false
              },
              "analysisPatterns": {
                "name": "analysisPatterns",
                "type": "AnalysisPattern[]",
                "optional": false
              },
              "optimizationStrategies": {
                "name": "optimizationStrategies",
                "type": "OptimizationStrategy[]",
                "optional": false
              },
              "errorPatterns": {
                "name": "errorPatterns",
                "type": "ErrorPattern[]",
                "optional": false
              },
              "qualityImprovementStrategies": {
                "name": "qualityImprovementStrategies",
                "type": "QualityImprovementStrategy[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 311
          },
          "CompletedRecordsData": {
            "name": "CompletedRecordsData",
            "body": "completedSections: Map<string, CompletedSectionRecord>;\n    completedArcs: Map<number, CompletedArcRecord>;\n    longTermEffectivenessRecords: LongTermEffectivenessRecord[];",
            "properties": {
              "completedSections": {
                "name": "completedSections",
                "type": "Map<string",
                "optional": false
              },
              "completedArcs": {
                "name": "completedArcs",
                "type": "Map<number",
                "optional": false
              },
              "longTermEffectivenessRecords": {
                "name": "longTermEffectivenessRecords",
                "type": "LongTermEffectivenessRecord[]",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 323
          },
          "ResolvedDuplicateData": {
            "name": "ResolvedDuplicateData",
            "body": "id: string;\n    type: DuplicateType;\n    originalSources: string[];\n    resolvedTo: string;\n    timestamp: string;\n    confidence: number;",
            "properties": {
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "DuplicateType",
                "optional": false
              },
              "originalSources": {
                "name": "originalSources",
                "type": "string[]",
                "optional": false
              },
              "resolvedTo": {
                "name": "resolvedTo",
                "type": "string",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              },
              "confidence": {
                "name": "confidence",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 332
          },
          "CacheStatisticsData": {
            "name": "CacheStatisticsData",
            "body": "// UnifiedAccessAPI 用プロパティ\n    hitRatio: number;\n    missRatio: number;\n    totalRequests: number;\n    cacheSize: number;\n    lastOptimization: string;\n    evictionCount: number;\n    \n    // CacheCoordinator 用プロパティ（互換性のため）\n    totalEntries?: number;\n    hitRate?: number;\n    avgAccessTime?: number;\n    memoryUsage?: {\n        shortTerm: number;\n        midTerm: number;\n        longTerm: number;",
            "properties": {
              "hitRatio": {
                "name": "hitRatio",
                "type": "number",
                "optional": false
              },
              "missRatio": {
                "name": "missRatio",
                "type": "number",
                "optional": false
              },
              "totalRequests": {
                "name": "totalRequests",
                "type": "number",
                "optional": false
              },
              "cacheSize": {
                "name": "cacheSize",
                "type": "number",
                "optional": false
              },
              "lastOptimization": {
                "name": "lastOptimization",
                "type": "string",
                "optional": false
              },
              "evictionCount": {
                "name": "evictionCount",
                "type": "number",
                "optional": false
              },
              "totalEntries": {
                "name": "totalEntries",
                "type": "number",
                "optional": true
              },
              "hitRate": {
                "name": "hitRate",
                "type": "number",
                "optional": true
              },
              "avgAccessTime": {
                "name": "avgAccessTime",
                "type": "number",
                "optional": true
              },
              "memoryUsage": {
                "name": "memoryUsage",
                "type": "{",
                "optional": true
              },
              "shortTerm": {
                "name": "shortTerm",
                "type": "number",
                "optional": false
              },
              "midTerm": {
                "name": "midTerm",
                "type": "number",
                "optional": false
              },
              "longTerm": {
                "name": "longTerm",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 352
          },
          "AccessOptimizationData": {
            "name": "AccessOptimizationData",
            "body": "optimizationType: OptimizationType;\n    before: PerformanceMetrics;\n    after: PerformanceMetrics;\n    improvement: number;\n    timestamp: string;",
            "properties": {
              "optimizationType": {
                "name": "optimizationType",
                "type": "OptimizationType",
                "optional": false
              },
              "before": {
                "name": "before",
                "type": "PerformanceMetrics",
                "optional": false
              },
              "after": {
                "name": "after",
                "type": "PerformanceMetrics",
                "optional": false
              },
              "improvement": {
                "name": "improvement",
                "type": "number",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 378
          },
          "PerformanceMetrics": {
            "name": "PerformanceMetrics",
            "body": "responseTime: number;\n    memoryUsage: number;\n    cacheHitRatio: number;\n    duplicateRatio: number;\n    compressionRatio: number;",
            "properties": {
              "responseTime": {
                "name": "responseTime",
                "type": "number",
                "optional": false
              },
              "memoryUsage": {
                "name": "memoryUsage",
                "type": "number",
                "optional": false
              },
              "cacheHitRatio": {
                "name": "cacheHitRatio",
                "type": "number",
                "optional": false
              },
              "duplicateRatio": {
                "name": "duplicateRatio",
                "type": "number",
                "optional": false
              },
              "compressionRatio": {
                "name": "compressionRatio",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 396
          },
          "MemorySystemStatus": {
            "name": "MemorySystemStatus",
            "body": "initialized: boolean;\n    lastUpdateTime: string;\n    memoryLayers: {\n        shortTerm: MemoryLayerStatus;\n        midTerm: MemoryLayerStatus;\n        longTerm: MemoryLayerStatus;",
            "properties": {
              "initialized": {
                "name": "initialized",
                "type": "boolean",
                "optional": false
              },
              "lastUpdateTime": {
                "name": "lastUpdateTime",
                "type": "string",
                "optional": false
              },
              "memoryLayers": {
                "name": "memoryLayers",
                "type": "{",
                "optional": false
              },
              "shortTerm": {
                "name": "shortTerm",
                "type": "MemoryLayerStatus",
                "optional": false
              },
              "midTerm": {
                "name": "midTerm",
                "type": "MemoryLayerStatus",
                "optional": false
              },
              "longTerm": {
                "name": "longTerm",
                "type": "MemoryLayerStatus",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 411
          },
          "MemoryLayerStatus": {
            "name": "MemoryLayerStatus",
            "body": "healthy: boolean;\n    dataCount: number;\n    lastUpdate: string;\n    storageSize: number;\n    errorCount: number;",
            "properties": {
              "healthy": {
                "name": "healthy",
                "type": "boolean",
                "optional": false
              },
              "dataCount": {
                "name": "dataCount",
                "type": "number",
                "optional": false
              },
              "lastUpdate": {
                "name": "lastUpdate",
                "type": "string",
                "optional": false
              },
              "storageSize": {
                "name": "storageSize",
                "type": "number",
                "optional": false
              },
              "errorCount": {
                "name": "errorCount",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 432
          },
          "SystemDiagnostics": {
            "name": "SystemDiagnostics",
            "body": "timestamp: string;\n    systemHealth: SystemHealth;\n    memoryLayers: {\n        shortTerm: LayerDiagnostics;\n        midTerm: LayerDiagnostics;\n        longTerm: LayerDiagnostics;",
            "properties": {
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              },
              "systemHealth": {
                "name": "systemHealth",
                "type": "SystemHealth",
                "optional": false
              },
              "memoryLayers": {
                "name": "memoryLayers",
                "type": "{",
                "optional": false
              },
              "shortTerm": {
                "name": "shortTerm",
                "type": "LayerDiagnostics",
                "optional": false
              },
              "midTerm": {
                "name": "midTerm",
                "type": "LayerDiagnostics",
                "optional": false
              },
              "longTerm": {
                "name": "longTerm",
                "type": "LayerDiagnostics",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 443
          },
          "LayerDiagnostics": {
            "name": "LayerDiagnostics",
            "body": "healthy: boolean;\n    dataIntegrity: boolean;\n    storageAccessible: boolean;\n    lastBackup: string;\n    performanceScore: number;\n    recommendations: string[];",
            "properties": {
              "healthy": {
                "name": "healthy",
                "type": "boolean",
                "optional": false
              },
              "dataIntegrity": {
                "name": "dataIntegrity",
                "type": "boolean",
                "optional": false
              },
              "storageAccessible": {
                "name": "storageAccessible",
                "type": "boolean",
                "optional": false
              },
              "lastBackup": {
                "name": "lastBackup",
                "type": "string",
                "optional": false
              },
              "performanceScore": {
                "name": "performanceScore",
                "type": "number",
                "optional": false
              },
              "recommendations": {
                "name": "recommendations",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 476
          },
          "IntegrationDiagnostics": {
            "name": "IntegrationDiagnostics",
            "body": "operational: boolean;\n    efficiency: number;\n    errorRate: number;\n    lastOptimization: string;\n    recommendations: string[];",
            "properties": {
              "operational": {
                "name": "operational",
                "type": "boolean",
                "optional": false
              },
              "efficiency": {
                "name": "efficiency",
                "type": "number",
                "optional": false
              },
              "errorRate": {
                "name": "errorRate",
                "type": "number",
                "optional": false
              },
              "lastOptimization": {
                "name": "lastOptimization",
                "type": "string",
                "optional": false
              },
              "recommendations": {
                "name": "recommendations",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 488
          },
          "ChapterAnalysisResult": {
            "name": "ChapterAnalysisResult",
            "body": "chapterNumber: number;\n    analysisType: string;\n    result: any;\n    confidence: number;\n    timestamp: string;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "analysisType": {
                "name": "analysisType",
                "type": "string",
                "optional": false
              },
              "result": {
                "name": "result",
                "type": "any",
                "optional": false
              },
              "confidence": {
                "name": "confidence",
                "type": "number",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 503
          },
          "StoryStateSnapshot": {
            "name": "StoryStateSnapshot",
            "body": "chapterNumber: number;\n    state: string;\n    timestamp: string;\n    metadata: any;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "state": {
                "name": "state",
                "type": "string",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              },
              "metadata": {
                "name": "metadata",
                "type": "any",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 514
          },
          "ChapterProgressionRecord": {
            "name": "ChapterProgressionRecord",
            "body": "chapterNumber: number;\n    progressScore: number;\n    milestones: string[];\n    timestamp: string;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "progressScore": {
                "name": "progressScore",
                "type": "number",
                "optional": false
              },
              "milestones": {
                "name": "milestones",
                "type": "string[]",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 524
          },
          "ArcProgressionRecord": {
            "name": "ArcProgressionRecord",
            "body": "arcNumber: number;\n    completionRatio: number;\n    keyEvents: string[];\n    timestamp: string;",
            "properties": {
              "arcNumber": {
                "name": "arcNumber",
                "type": "number",
                "optional": false
              },
              "completionRatio": {
                "name": "completionRatio",
                "type": "number",
                "optional": false
              },
              "keyEvents": {
                "name": "keyEvents",
                "type": "string[]",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 534
          },
          "TensionHistoryRecord": {
            "name": "TensionHistoryRecord",
            "body": "chapterNumber: number;\n    tensionLevel: number;\n    factors: string[];\n    timestamp: string;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "tensionLevel": {
                "name": "tensionLevel",
                "type": "number",
                "optional": false
              },
              "factors": {
                "name": "factors",
                "type": "string[]",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 544
          },
          "TurningPointRecord": {
            "name": "TurningPointRecord",
            "body": "chapterNumber: number;\n    description: string;\n    significance: number;\n    timestamp: string;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "significance": {
                "name": "significance",
                "type": "number",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 554
          },
          "EmotionalArcDesignRecord": {
            "name": "EmotionalArcDesignRecord",
            "body": "chapterNumber: number;\n    design: any;\n    effectiveness: number;\n    timestamp: string;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "design": {
                "name": "design",
                "type": "any",
                "optional": false
              },
              "effectiveness": {
                "name": "effectiveness",
                "type": "number",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 564
          },
          "TextAnalysisResultRecord": {
            "name": "TextAnalysisResultRecord",
            "body": "chapterNumber: number;\n    analysisResults: any;\n    processingTime: number;\n    timestamp: string;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "analysisResults": {
                "name": "analysisResults",
                "type": "any",
                "optional": false
              },
              "processingTime": {
                "name": "processingTime",
                "type": "number",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 574
          },
          "DetectionResultRecord": {
            "name": "DetectionResultRecord",
            "body": "chapterNumber: number;\n    detectedItems: any[];\n    accuracy: number;\n    timestamp: string;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "detectedItems": {
                "name": "detectedItems",
                "type": "any[]",
                "optional": false
              },
              "accuracy": {
                "name": "accuracy",
                "type": "number",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 584
          },
          "PreGenerationResultRecord": {
            "name": "PreGenerationResultRecord",
            "body": "chapterNumber: number;\n    preparationData: any;\n    qualityScore: number;\n    timestamp: string;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "preparationData": {
                "name": "preparationData",
                "type": "any",
                "optional": false
              },
              "qualityScore": {
                "name": "qualityScore",
                "type": "number",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 594
          },
          "PostGenerationResultRecord": {
            "name": "PostGenerationResultRecord",
            "body": "chapterNumber: number;\n    refinementData: any;\n    improvementScore: number;\n    timestamp: string;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "refinementData": {
                "name": "refinementData",
                "type": "any",
                "optional": false
              },
              "improvementScore": {
                "name": "improvementScore",
                "type": "number",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 604
          },
          "CharacterDevelopmentRecord": {
            "name": "CharacterDevelopmentRecord",
            "body": "characterId: string;\n    developmentPhase: string;\n    changes: any[];\n    timestamp: string;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "developmentPhase": {
                "name": "developmentPhase",
                "type": "string",
                "optional": false
              },
              "changes": {
                "name": "changes",
                "type": "any[]",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 614
          },
          "CharacterChangeRecord": {
            "name": "CharacterChangeRecord",
            "body": "characterId: string;\n    changeType: string;\n    oldValue: any;\n    newValue: any;\n    timestamp: string;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "changeType": {
                "name": "changeType",
                "type": "string",
                "optional": false
              },
              "oldValue": {
                "name": "oldValue",
                "type": "any",
                "optional": false
              },
              "newValue": {
                "name": "newValue",
                "type": "any",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 624
          },
          "RelationshipEvolutionRecord": {
            "name": "RelationshipEvolutionRecord",
            "body": "characterIds: string[];\n    relationshipType: string;\n    evolutionStage: string;\n    timestamp: string;",
            "properties": {
              "characterIds": {
                "name": "characterIds",
                "type": "string[]",
                "optional": false
              },
              "relationshipType": {
                "name": "relationshipType",
                "type": "string",
                "optional": false
              },
              "evolutionStage": {
                "name": "evolutionStage",
                "type": "string",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 635
          },
          "PsychologyEvolutionRecord": {
            "name": "PsychologyEvolutionRecord",
            "body": "characterId: string;\n    psychologyAspect: string;\n    evolution: any;\n    timestamp: string;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "psychologyAspect": {
                "name": "psychologyAspect",
                "type": "string",
                "optional": false
              },
              "evolution": {
                "name": "evolution",
                "type": "any",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 645
          },
          "PromptGenerationStatsRecord": {
            "name": "PromptGenerationStatsRecord",
            "body": "generationType: string;\n    successRate: number;\n    averageTime: number;\n    timestamp: string;",
            "properties": {
              "generationType": {
                "name": "generationType",
                "type": "string",
                "optional": false
              },
              "successRate": {
                "name": "successRate",
                "type": "number",
                "optional": false
              },
              "averageTime": {
                "name": "averageTime",
                "type": "number",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 655
          },
          "TemplateUsageStatsRecord": {
            "name": "TemplateUsageStatsRecord",
            "body": "templateId: string;\n    usageCount: number;\n    effectiveness: number;\n    timestamp: string;",
            "properties": {
              "templateId": {
                "name": "templateId",
                "type": "string",
                "optional": false
              },
              "usageCount": {
                "name": "usageCount",
                "type": "number",
                "optional": false
              },
              "effectiveness": {
                "name": "effectiveness",
                "type": "number",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 665
          },
          "TensionOptimizationStatsRecord": {
            "name": "TensionOptimizationStatsRecord",
            "body": "optimizationType: string;\n    successRate: number;\n    improvement: number;\n    timestamp: string;",
            "properties": {
              "optimizationType": {
                "name": "optimizationType",
                "type": "string",
                "optional": false
              },
              "successRate": {
                "name": "successRate",
                "type": "number",
                "optional": false
              },
              "improvement": {
                "name": "improvement",
                "type": "number",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 675
          },
          "ComponentPerformanceStats": {
            "name": "ComponentPerformanceStats",
            "body": "componentName: string;\n    responseTime: number;\n    successRate: number;\n    errorRate: number;\n    lastUpdate: string;",
            "properties": {
              "componentName": {
                "name": "componentName",
                "type": "string",
                "optional": false
              },
              "responseTime": {
                "name": "responseTime",
                "type": "number",
                "optional": false
              },
              "successRate": {
                "name": "successRate",
                "type": "number",
                "optional": false
              },
              "errorRate": {
                "name": "errorRate",
                "type": "number",
                "optional": false
              },
              "lastUpdate": {
                "name": "lastUpdate",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 685
          },
          "SystemIntegrationStatsRecord": {
            "name": "SystemIntegrationStatsRecord",
            "body": "integrationType: string;\n    efficiency: number;\n    dataVolume: number;\n    timestamp: string;",
            "properties": {
              "integrationType": {
                "name": "integrationType",
                "type": "string",
                "optional": false
              },
              "efficiency": {
                "name": "efficiency",
                "type": "number",
                "optional": false
              },
              "dataVolume": {
                "name": "dataVolume",
                "type": "number",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 696
          },
          "ChapterQualityRecord": {
            "name": "ChapterQualityRecord",
            "body": "chapterNumber: number;\n    qualityScore: number;\n    qualityFactors: any;\n    timestamp: string;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "qualityScore": {
                "name": "qualityScore",
                "type": "number",
                "optional": false
              },
              "qualityFactors": {
                "name": "qualityFactors",
                "type": "any",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 706
          },
          "SystemQualityMetricsRecord": {
            "name": "SystemQualityMetricsRecord",
            "body": "metricType: string;\n    value: number;\n    trend: string;\n    timestamp: string;",
            "properties": {
              "metricType": {
                "name": "metricType",
                "type": "string",
                "optional": false
              },
              "value": {
                "name": "value",
                "type": "number",
                "optional": false
              },
              "trend": {
                "name": "trend",
                "type": "string",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 716
          },
          "DiagnosticHistoryRecord": {
            "name": "DiagnosticHistoryRecord",
            "body": "diagnosticType: string;\n    results: any;\n    issues: string[];\n    timestamp: string;",
            "properties": {
              "diagnosticType": {
                "name": "diagnosticType",
                "type": "string",
                "optional": false
              },
              "results": {
                "name": "results",
                "type": "any",
                "optional": false
              },
              "issues": {
                "name": "issues",
                "type": "string[]",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 726
          },
          "SystemHealthMetricsRecord": {
            "name": "SystemHealthMetricsRecord",
            "body": "healthScore: number;\n    healthFactors: any;\n    recommendations: string[];\n    timestamp: string;",
            "properties": {
              "healthScore": {
                "name": "healthScore",
                "type": "number",
                "optional": false
              },
              "healthFactors": {
                "name": "healthFactors",
                "type": "any",
                "optional": false
              },
              "recommendations": {
                "name": "recommendations",
                "type": "string[]",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 736
          },
          "WorldSettingsMasterRecord": {
            "name": "WorldSettingsMasterRecord",
            "body": "consolidatedSettings: any;\n    sources: string[];\n    lastUpdate: string;",
            "properties": {
              "consolidatedSettings": {
                "name": "consolidatedSettings",
                "type": "any",
                "optional": false
              },
              "sources": {
                "name": "sources",
                "type": "string[]",
                "optional": false
              },
              "lastUpdate": {
                "name": "lastUpdate",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 745
          },
          "GenreSettingsMasterRecord": {
            "name": "GenreSettingsMasterRecord",
            "body": "consolidatedGenre: any;\n    sources: string[];\n    lastUpdate: string;",
            "properties": {
              "consolidatedGenre": {
                "name": "consolidatedGenre",
                "type": "any",
                "optional": false
              },
              "sources": {
                "name": "sources",
                "type": "string[]",
                "optional": false
              },
              "lastUpdate": {
                "name": "lastUpdate",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 751
          },
          "TemplateMasterRecord": {
            "name": "TemplateMasterRecord",
            "body": "consolidatedTemplates: any;\n    sources: string[];\n    lastUpdate: string;",
            "properties": {
              "consolidatedTemplates": {
                "name": "consolidatedTemplates",
                "type": "any",
                "optional": false
              },
              "sources": {
                "name": "sources",
                "type": "string[]",
                "optional": false
              },
              "lastUpdate": {
                "name": "lastUpdate",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 757
          },
          "SystemConfigMasterRecord": {
            "name": "SystemConfigMasterRecord",
            "body": "consolidatedConfig: any;\n    sources: string[];\n    lastUpdate: string;",
            "properties": {
              "consolidatedConfig": {
                "name": "consolidatedConfig",
                "type": "any",
                "optional": false
              },
              "sources": {
                "name": "sources",
                "type": "string[]",
                "optional": false
              },
              "lastUpdate": {
                "name": "lastUpdate",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 763
          },
          "CharacterMasterRecord": {
            "name": "CharacterMasterRecord",
            "body": "consolidatedCharacter: any;\n    sources: string[];\n    lastUpdate: string;",
            "properties": {
              "consolidatedCharacter": {
                "name": "consolidatedCharacter",
                "type": "any",
                "optional": false
              },
              "sources": {
                "name": "sources",
                "type": "string[]",
                "optional": false
              },
              "lastUpdate": {
                "name": "lastUpdate",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 769
          },
          "WorldKnowledgeDatabase": {
            "name": "WorldKnowledgeDatabase",
            "body": "knowledge: any;\n    categories: string[];\n    lastUpdate: string;",
            "properties": {
              "knowledge": {
                "name": "knowledge",
                "type": "any",
                "optional": false
              },
              "categories": {
                "name": "categories",
                "type": "string[]",
                "optional": false
              },
              "lastUpdate": {
                "name": "lastUpdate",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 775
          },
          "ConceptDefinitionRecord": {
            "name": "ConceptDefinitionRecord",
            "body": "concept: string;\n    definition: any;\n    references: string[];\n    lastUpdate: string;",
            "properties": {
              "concept": {
                "name": "concept",
                "type": "string",
                "optional": false
              },
              "definition": {
                "name": "definition",
                "type": "any",
                "optional": false
              },
              "references": {
                "name": "references",
                "type": "string[]",
                "optional": false
              },
              "lastUpdate": {
                "name": "lastUpdate",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 781
          },
          "ForeshadowingDatabase": {
            "name": "ForeshadowingDatabase",
            "body": "foreshadowing: any[];\n    categories: string[];\n    lastUpdate: string;",
            "properties": {
              "foreshadowing": {
                "name": "foreshadowing",
                "type": "any[]",
                "optional": false
              },
              "categories": {
                "name": "categories",
                "type": "string[]",
                "optional": false
              },
              "lastUpdate": {
                "name": "lastUpdate",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 788
          },
          "SectionDefinitionRecord": {
            "name": "SectionDefinitionRecord",
            "body": "sectionId: string;\n    definition: any;\n    usage: any;\n    lastUpdate: string;",
            "properties": {
              "sectionId": {
                "name": "sectionId",
                "type": "string",
                "optional": false
              },
              "definition": {
                "name": "definition",
                "type": "any",
                "optional": false
              },
              "usage": {
                "name": "usage",
                "type": "any",
                "optional": false
              },
              "lastUpdate": {
                "name": "lastUpdate",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 794
          },
          "CompletedSectionRecord": {
            "name": "CompletedSectionRecord",
            "body": "sectionId: string;\n    completionData: any;\n    effectiveness: number;\n    timestamp: string;",
            "properties": {
              "sectionId": {
                "name": "sectionId",
                "type": "string",
                "optional": false
              },
              "completionData": {
                "name": "completionData",
                "type": "any",
                "optional": false
              },
              "effectiveness": {
                "name": "effectiveness",
                "type": "number",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 801
          },
          "CompletedArcRecord": {
            "name": "CompletedArcRecord",
            "body": "arcNumber: number;\n    completionData: any;\n    effectiveness: number;\n    timestamp: string;",
            "properties": {
              "arcNumber": {
                "name": "arcNumber",
                "type": "number",
                "optional": false
              },
              "completionData": {
                "name": "completionData",
                "type": "any",
                "optional": false
              },
              "effectiveness": {
                "name": "effectiveness",
                "type": "number",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 808
          },
          "LongTermEffectivenessRecord": {
            "name": "LongTermEffectivenessRecord",
            "body": "recordType: string;\n    effectivenessData: any;\n    trends: any;\n    timestamp: string;",
            "properties": {
              "recordType": {
                "name": "recordType",
                "type": "string",
                "optional": false
              },
              "effectivenessData": {
                "name": "effectivenessData",
                "type": "any",
                "optional": false
              },
              "trends": {
                "name": "trends",
                "type": "any",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 815
          },
          "PromptGenerationPattern": {
            "name": "PromptGenerationPattern",
            "body": "patternId: string;\n    pattern: any;\n    effectiveness: number;\n    usage: any;",
            "properties": {
              "patternId": {
                "name": "patternId",
                "type": "string",
                "optional": false
              },
              "pattern": {
                "name": "pattern",
                "type": "any",
                "optional": false
              },
              "effectiveness": {
                "name": "effectiveness",
                "type": "number",
                "optional": false
              },
              "usage": {
                "name": "usage",
                "type": "any",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 824
          },
          "EffectiveTemplatePattern": {
            "name": "EffectiveTemplatePattern",
            "body": "templateId: string;\n    pattern: any;\n    effectiveness: number;\n    contexts: string[];",
            "properties": {
              "templateId": {
                "name": "templateId",
                "type": "string",
                "optional": false
              },
              "pattern": {
                "name": "pattern",
                "type": "any",
                "optional": false
              },
              "effectiveness": {
                "name": "effectiveness",
                "type": "number",
                "optional": false
              },
              "contexts": {
                "name": "contexts",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 831
          },
          "AnalysisPattern": {
            "name": "AnalysisPattern",
            "body": "analysisType: string;\n    pattern: any;\n    accuracy: number;\n    applications: string[];",
            "properties": {
              "analysisType": {
                "name": "analysisType",
                "type": "string",
                "optional": false
              },
              "pattern": {
                "name": "pattern",
                "type": "any",
                "optional": false
              },
              "accuracy": {
                "name": "accuracy",
                "type": "number",
                "optional": false
              },
              "applications": {
                "name": "applications",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 838
          },
          "OptimizationStrategy": {
            "name": "OptimizationStrategy",
            "body": "strategyId: string;\n    strategy: any;\n    effectiveness: number;\n    contexts: string[];",
            "properties": {
              "strategyId": {
                "name": "strategyId",
                "type": "string",
                "optional": false
              },
              "strategy": {
                "name": "strategy",
                "type": "any",
                "optional": false
              },
              "effectiveness": {
                "name": "effectiveness",
                "type": "number",
                "optional": false
              },
              "contexts": {
                "name": "contexts",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 845
          },
          "ErrorPattern": {
            "name": "ErrorPattern",
            "body": "errorType: string;\n    pattern: any;\n    frequency: number;\n    solutions: string[];",
            "properties": {
              "errorType": {
                "name": "errorType",
                "type": "string",
                "optional": false
              },
              "pattern": {
                "name": "pattern",
                "type": "any",
                "optional": false
              },
              "frequency": {
                "name": "frequency",
                "type": "number",
                "optional": false
              },
              "solutions": {
                "name": "solutions",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 852
          },
          "QualityImprovementStrategy": {
            "name": "QualityImprovementStrategy",
            "body": "strategyId: string;\n    strategy: any;\n    effectiveness: number;\n    applications: string[];",
            "properties": {
              "strategyId": {
                "name": "strategyId",
                "type": "string",
                "optional": false
              },
              "strategy": {
                "name": "strategy",
                "type": "any",
                "optional": false
              },
              "effectiveness": {
                "name": "effectiveness",
                "type": "number",
                "optional": false
              },
              "applications": {
                "name": "applications",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 859
          }
        },
        "types": {},
        "enums": {
          "MemoryLevel": {
            "name": "MemoryLevel",
            "body": "SHORT_TERM = 'SHORT_TERM',\n    MID_TERM = 'MID_TERM',\n    LONG_TERM = 'LONG_TERM'",
            "values": [
              {
                "name": "SHORT_TERM",
                "value": "'SHORT_TERM'"
              },
              {
                "name": "MID_TERM",
                "value": "'MID_TERM'"
              },
              {
                "name": "LONG_TERM",
                "value": "'LONG_TERM'"
              }
            ],
            "lineNumber": 49
          },
          "MemoryRequestType": {
            "name": "MemoryRequestType",
            "body": "CHAPTER_CONTEXT = 'CHAPTER_CONTEXT',\n    CHARACTER_ANALYSIS = 'CHARACTER_ANALYSIS',\n    NARRATIVE_STATE = 'NARRATIVE_STATE',\n    WORLD_KNOWLEDGE = 'WORLD_KNOWLEDGE',\n    SYSTEM_DIAGNOSTICS = 'SYSTEM_DIAGNOSTICS',\n    INTEGRATED_CONTEXT = 'INTEGRATED_CONTEXT'",
            "values": [
              {
                "name": "CHAPTER_CONTEXT",
                "value": "'CHAPTER_CONTEXT'"
              },
              {
                "name": "CHARACTER_ANALYSIS",
                "value": "'CHARACTER_ANALYSIS'"
              },
              {
                "name": "NARRATIVE_STATE",
                "value": "'NARRATIVE_STATE'"
              },
              {
                "name": "WORLD_KNOWLEDGE",
                "value": "'WORLD_KNOWLEDGE'"
              },
              {
                "name": "SYSTEM_DIAGNOSTICS",
                "value": "'SYSTEM_DIAGNOSTICS'"
              },
              {
                "name": "INTEGRATED_CONTEXT",
                "value": "'INTEGRATED_CONTEXT'"
              }
            ],
            "lineNumber": 146
          },
          "ProcessingBufferType": {
            "name": "ProcessingBufferType",
            "body": "PROMPT_GENERATION = 'PROMPT_GENERATION',\n    CONTEXT_GENERATION = 'CONTEXT_GENERATION',\n    AI_ANALYSIS = 'AI_ANALYSIS',\n    TEXT_ANALYSIS = 'TEXT_ANALYSIS',\n    CHARACTER_DETECTION = 'CHARACTER_DETECTION'",
            "values": [
              {
                "name": "PROMPT_GENERATION",
                "value": "'PROMPT_GENERATION'"
              },
              {
                "name": "CONTEXT_GENERATION",
                "value": "'CONTEXT_GENERATION'"
              },
              {
                "name": "AI_ANALYSIS",
                "value": "'AI_ANALYSIS'"
              },
              {
                "name": "TEXT_ANALYSIS",
                "value": "'TEXT_ANALYSIS'"
              },
              {
                "name": "CHARACTER_DETECTION",
                "value": "'CHARACTER_DETECTION'"
              }
            ],
            "lineNumber": 226
          },
          "DuplicateType": {
            "name": "DuplicateType",
            "body": "WORLD_SETTINGS = 'WORLD_SETTINGS',\n    CHARACTER_INFO = 'CHARACTER_INFO',\n    MEMORY_ACCESS = 'MEMORY_ACCESS',\n    GENRE_SETTINGS = 'GENRE_SETTINGS',\n    AI_ANALYSIS = 'AI_ANALYSIS'",
            "values": [
              {
                "name": "WORLD_SETTINGS",
                "value": "'WORLD_SETTINGS'"
              },
              {
                "name": "CHARACTER_INFO",
                "value": "'CHARACTER_INFO'"
              },
              {
                "name": "MEMORY_ACCESS",
                "value": "'MEMORY_ACCESS'"
              },
              {
                "name": "GENRE_SETTINGS",
                "value": "'GENRE_SETTINGS'"
              },
              {
                "name": "AI_ANALYSIS",
                "value": "'AI_ANALYSIS'"
              }
            ],
            "lineNumber": 341
          },
          "OptimizationType": {
            "name": "OptimizationType",
            "body": "CACHE_OPTIMIZATION = 'CACHE_OPTIMIZATION',\n    DUPLICATE_RESOLUTION = 'DUPLICATE_RESOLUTION',\n    ACCESS_PATTERN_OPTIMIZATION = 'ACCESS_PATTERN_OPTIMIZATION',\n    COMPRESSION_OPTIMIZATION = 'COMPRESSION_OPTIMIZATION'",
            "values": [
              {
                "name": "CACHE_OPTIMIZATION",
                "value": "'CACHE_OPTIMIZATION'"
              },
              {
                "name": "DUPLICATE_RESOLUTION",
                "value": "'DUPLICATE_RESOLUTION'"
              },
              {
                "name": "ACCESS_PATTERN_OPTIMIZATION",
                "value": "'ACCESS_PATTERN_OPTIMIZATION'"
              },
              {
                "name": "COMPRESSION_OPTIMIZATION",
                "value": "'COMPRESSION_OPTIMIZATION'"
              }
            ],
            "lineNumber": 386
          },
          "SystemHealth": {
            "name": "SystemHealth",
            "body": "HEALTHY = 'HEALTHY',\n    DEGRADED = 'DEGRADED',\n    CRITICAL = 'CRITICAL'",
            "values": [
              {
                "name": "HEALTHY",
                "value": "'HEALTHY'"
              },
              {
                "name": "DEGRADED",
                "value": "'DEGRADED'"
              },
              {
                "name": "CRITICAL",
                "value": "'CRITICAL'"
              }
            ],
            "lineNumber": 467
          }
        },
        "imports": [
          {
            "types": [
              "Chapter"
            ],
            "source": "@/types/chapters",
            "isTypeOnly": true
          },
          {
            "types": [
              "CharacterState",
              "SignificantEvent"
            ],
            "source": "@/types/memory",
            "isTypeOnly": true
          }
        ],
        "exports": [
          "UnifiedSearchResult",
          "SystemOperationResult",
          "MemoryLevel",
          "MemoryHierarchyConfig",
          "UnifiedMemoryContext",
          "MemoryAccessRequest",
          "MemoryAccessResponse",
          "MemoryRequestType",
          "MemoryAccessFilters",
          "MemoryAccessOptions",
          "MemoryOperationResult",
          "ChapterContextData",
          "ProcessingBuffer",
          "ProcessingBufferType",
          "NarrativeProgressionData",
          "AnalysisResultData",
          "CharacterEvolutionData",
          "SystemStatisticsData",
          "QualityMetricsData",
          "ConsolidatedSettingsData",
          "KnowledgeDatabaseData",
          "SystemKnowledgeBaseData",
          "CompletedRecordsData",
          "ResolvedDuplicateData",
          "DuplicateType",
          "CacheStatisticsData",
          "AccessOptimizationData",
          "OptimizationType",
          "PerformanceMetrics",
          "MemorySystemStatus",
          "MemoryLayerStatus",
          "SystemDiagnostics",
          "SystemHealth",
          "LayerDiagnostics",
          "IntegrationDiagnostics",
          "ChapterAnalysisResult",
          "StoryStateSnapshot",
          "ChapterProgressionRecord",
          "ArcProgressionRecord",
          "TensionHistoryRecord",
          "TurningPointRecord",
          "EmotionalArcDesignRecord",
          "TextAnalysisResultRecord",
          "DetectionResultRecord",
          "PreGenerationResultRecord",
          "PostGenerationResultRecord",
          "CharacterDevelopmentRecord",
          "CharacterChangeRecord",
          "RelationshipEvolutionRecord",
          "PsychologyEvolutionRecord",
          "PromptGenerationStatsRecord",
          "TemplateUsageStatsRecord",
          "TensionOptimizationStatsRecord",
          "ComponentPerformanceStats",
          "SystemIntegrationStatsRecord",
          "ChapterQualityRecord",
          "SystemQualityMetricsRecord",
          "DiagnosticHistoryRecord",
          "SystemHealthMetricsRecord",
          "WorldSettingsMasterRecord",
          "GenreSettingsMasterRecord",
          "TemplateMasterRecord",
          "SystemConfigMasterRecord",
          "CharacterMasterRecord",
          "WorldKnowledgeDatabase",
          "ConceptDefinitionRecord",
          "ForeshadowingDatabase",
          "SectionDefinitionRecord",
          "CompletedSectionRecord",
          "CompletedArcRecord",
          "LongTermEffectivenessRecord",
          "PromptGenerationPattern",
          "EffectiveTemplatePattern",
          "AnalysisPattern",
          "OptimizationStrategy",
          "ErrorPattern",
          "QualityImprovementStrategy"
        ],
        "inlineTypes": [
          {
            "definition": ": {\n        maxChapters: number;\n        retentionTime: number; // milliseconds\n        cacheEnabled: boolean;\n    }",
            "lineNumber": 59
          },
          {
            "definition": ": {\n        maxAnalysisRecords: number;\n        compressionEnabled: boolean;\n        analysisDepth: number;\n    }",
            "lineNumber": 64
          },
          {
            "definition": ": {\n        compressionThreshold: number;\n        knowledgeIntegrationEnabled: boolean;\n        permanentRetention: boolean;\n    }",
            "lineNumber": 69
          },
          {
            "definition": ": {\n        recentChapters: ChapterContextData[];\n        immediateCharacterStates: Map<string, CharacterState>;\n        keyPhrases: string[];\n        processingBuffers: ProcessingBuffer[];\n    }",
            "lineNumber": 84
          },
          {
            "definition": ": {\n        narrativeProgression: NarrativeProgressionData;\n        analysisResults: AnalysisResultData[];\n        characterEvolution: CharacterEvolutionData[];\n        systemStatistics: SystemStatisticsData;\n        qualityMetrics: QualityMetricsData;\n    }",
            "lineNumber": 92
          },
          {
            "definition": ": {\n        consolidatedSettings: ConsolidatedSettingsData;\n        knowledgeDatabase: KnowledgeDatabaseData;\n        systemKnowledgeBase: SystemKnowledgeBaseData;\n        completedRecords: CompletedRecordsData;\n    }",
            "lineNumber": 101
          },
          {
            "definition": ": {\n        resolvedDuplicates: ResolvedDuplicateData[];\n        cacheStatistics: CacheStatisticsData;\n        accessOptimizations: AccessOptimizationData[];\n    }",
            "lineNumber": 109
          },
          {
            "definition": ": {\n        layersAccessed: MemoryLevel[];\n        duplicatesResolved: number;\n        cacheHits: number;\n    }",
            "lineNumber": 136
          },
          {
            "definition": ": {\n        startChapter: number;\n        endChapter: number;\n    }",
            "lineNumber": 162
          },
          {
            "definition": ": {\n        min: number;\n        max: number;\n    }",
            "lineNumber": 166
          },
          {
            "definition": ": {\n        chapterNumber?: number;\n        dataSize?: number;\n        timestamp: string;\n    }",
            "lineNumber": 193
          },
          {
            "definition": ": {\n        shortTerm: number;\n        midTerm: number;\n        longTerm: number;\n    }",
            "lineNumber": 365
          },
          {
            "definition": ": {\n        shortTerm: MemoryLayerStatus;\n        midTerm: MemoryLayerStatus;\n        longTerm: MemoryLayerStatus;\n    }",
            "lineNumber": 414
          },
          {
            "definition": ": {\n        totalRequests: number;\n        cacheHits: number;\n        duplicatesResolved: number;\n        averageResponseTime: number;\n        lastUpdateTime: string;\n    }",
            "lineNumber": 419
          },
          {
            "definition": ": {\n        shortTerm: LayerDiagnostics;\n        midTerm: LayerDiagnostics;\n        longTerm: LayerDiagnostics;\n    }",
            "lineNumber": 446
          },
          {
            "definition": ": {\n        duplicateResolver: IntegrationDiagnostics;\n        cacheCoordinator: IntegrationDiagnostics;\n        unifiedAccessAPI: IntegrationDiagnostics;\n    }",
            "lineNumber": 451
          },
          {
            "definition": ": {\n        totalRequests: number;\n        cacheHits: number;\n        duplicatesResolved: number;\n        averageResponseTime: number;\n        lastUpdateTime: string;\n    }",
            "lineNumber": 456
          }
        ],
        "generics": [
          "{\n        source: MemoryLevel;\n        type: string;\n        data: any;\n        relevance: number;\n        metadata: Record<string, any",
          "string, any",
          "string, CharacterState",
          "number, ChapterProgressionRecord",
          "number, ArcProgressionRecord",
          "number, TensionHistoryRecord",
          "number, EmotionalArcDesignRecord",
          "number, TextAnalysisResultRecord",
          "number, DetectionResultRecord",
          "number, PreGenerationResultRecord",
          "number, PostGenerationResultRecord",
          "string, CharacterDevelopmentRecord[]",
          "string, CharacterChangeRecord[]",
          "string, RelationshipEvolutionRecord[]",
          "string, PsychologyEvolutionRecord[]",
          "string, ComponentPerformanceStats",
          "string, CharacterMasterRecord",
          "string, ConceptDefinitionRecord",
          "string, SectionDefinitionRecord",
          "string, CompletedSectionRecord",
          "number, CompletedArcRecord"
        ],
        "extendedTypes": [],
        "dataModelTypes": [
          {
            "name": "ChapterContextData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "ChapterContextData",
              "body": "chapter: Chapter;\n    characterStates: Map<string, CharacterState>;\n    keyPhrases: string[];\n    analysisResults: ChapterAnalysisResult[];\n    timestamp: string;",
              "properties": {
                "chapter": {
                  "name": "chapter",
                  "type": "Chapter",
                  "optional": false
                },
                "characterStates": {
                  "name": "characterStates",
                  "type": "Map<string",
                  "optional": false
                },
                "keyPhrases": {
                  "name": "keyPhrases",
                  "type": "string[]",
                  "optional": false
                },
                "analysisResults": {
                  "name": "analysisResults",
                  "type": "ChapterAnalysisResult[]",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 207
            }
          },
          {
            "name": "NarrativeProgressionData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "NarrativeProgressionData",
              "body": "storyState: StoryStateSnapshot[];\n    chapterProgression: Map<number, ChapterProgressionRecord>;\n    arcProgression: Map<number, ArcProgressionRecord>;\n    tensionHistory: Map<number, TensionHistoryRecord>;\n    turningPointsHistory: TurningPointRecord[];",
              "properties": {
                "storyState": {
                  "name": "storyState",
                  "type": "StoryStateSnapshot[]",
                  "optional": false
                },
                "chapterProgression": {
                  "name": "chapterProgression",
                  "type": "Map<number",
                  "optional": false
                },
                "arcProgression": {
                  "name": "arcProgression",
                  "type": "Map<number",
                  "optional": false
                },
                "tensionHistory": {
                  "name": "tensionHistory",
                  "type": "Map<number",
                  "optional": false
                },
                "turningPointsHistory": {
                  "name": "turningPointsHistory",
                  "type": "TurningPointRecord[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 237
            }
          },
          {
            "name": "AnalysisResultData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "AnalysisResultData",
              "body": "emotionalArcDesigns: Map<number, EmotionalArcDesignRecord>;\n    textAnalysisResults: Map<number, TextAnalysisResultRecord>;\n    detectionResults: Map<number, DetectionResultRecord>;\n    preGenerationResults: Map<number, PreGenerationResultRecord>;\n    postGenerationResults: Map<number, PostGenerationResultRecord>;",
              "properties": {
                "emotionalArcDesigns": {
                  "name": "emotionalArcDesigns",
                  "type": "Map<number",
                  "optional": false
                },
                "textAnalysisResults": {
                  "name": "textAnalysisResults",
                  "type": "Map<number",
                  "optional": false
                },
                "detectionResults": {
                  "name": "detectionResults",
                  "type": "Map<number",
                  "optional": false
                },
                "preGenerationResults": {
                  "name": "preGenerationResults",
                  "type": "Map<number",
                  "optional": false
                },
                "postGenerationResults": {
                  "name": "postGenerationResults",
                  "type": "Map<number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 248
            }
          },
          {
            "name": "CharacterEvolutionData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "CharacterEvolutionData",
              "body": "developmentHistory: Map<string, CharacterDevelopmentRecord[]>;\n    changeHistory: Map<string, CharacterChangeRecord[]>;\n    relationshipEvolution: Map<string, RelationshipEvolutionRecord[]>;\n    psychologyEvolution: Map<string, PsychologyEvolutionRecord[]>;",
              "properties": {
                "developmentHistory": {
                  "name": "developmentHistory",
                  "type": "Map<string",
                  "optional": false
                },
                "changeHistory": {
                  "name": "changeHistory",
                  "type": "Map<string",
                  "optional": false
                },
                "relationshipEvolution": {
                  "name": "relationshipEvolution",
                  "type": "Map<string",
                  "optional": false
                },
                "psychologyEvolution": {
                  "name": "psychologyEvolution",
                  "type": "Map<string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 259
            }
          },
          {
            "name": "SystemStatisticsData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "SystemStatisticsData",
              "body": "promptGenerationStats: PromptGenerationStatsRecord[];\n    templateUsageStats: TemplateUsageStatsRecord[];\n    tensionOptimizationStats: TensionOptimizationStatsRecord[];\n    componentPerformanceStats: Map<string, ComponentPerformanceStats>;\n    systemIntegrationStats: SystemIntegrationStatsRecord[];",
              "properties": {
                "promptGenerationStats": {
                  "name": "promptGenerationStats",
                  "type": "PromptGenerationStatsRecord[]",
                  "optional": false
                },
                "templateUsageStats": {
                  "name": "templateUsageStats",
                  "type": "TemplateUsageStatsRecord[]",
                  "optional": false
                },
                "tensionOptimizationStats": {
                  "name": "tensionOptimizationStats",
                  "type": "TensionOptimizationStatsRecord[]",
                  "optional": false
                },
                "componentPerformanceStats": {
                  "name": "componentPerformanceStats",
                  "type": "Map<string",
                  "optional": false
                },
                "systemIntegrationStats": {
                  "name": "systemIntegrationStats",
                  "type": "SystemIntegrationStatsRecord[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 269
            }
          },
          {
            "name": "QualityMetricsData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "QualityMetricsData",
              "body": "chapterQualityHistory: ChapterQualityRecord[];\n    systemQualityMetrics: SystemQualityMetricsRecord[];\n    diagnosticHistory: DiagnosticHistoryRecord[];\n    systemHealthMetrics: SystemHealthMetricsRecord[];",
              "properties": {
                "chapterQualityHistory": {
                  "name": "chapterQualityHistory",
                  "type": "ChapterQualityRecord[]",
                  "optional": false
                },
                "systemQualityMetrics": {
                  "name": "systemQualityMetrics",
                  "type": "SystemQualityMetricsRecord[]",
                  "optional": false
                },
                "diagnosticHistory": {
                  "name": "diagnosticHistory",
                  "type": "DiagnosticHistoryRecord[]",
                  "optional": false
                },
                "systemHealthMetrics": {
                  "name": "systemHealthMetrics",
                  "type": "SystemHealthMetricsRecord[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 280
            }
          },
          {
            "name": "ConsolidatedSettingsData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "ConsolidatedSettingsData",
              "body": "worldSettingsMaster: WorldSettingsMasterRecord;\n    genreSettingsMaster: GenreSettingsMasterRecord;\n    templateMaster: TemplateMasterRecord;\n    systemConfigMaster: SystemConfigMasterRecord;",
              "properties": {
                "worldSettingsMaster": {
                  "name": "worldSettingsMaster",
                  "type": "WorldSettingsMasterRecord",
                  "optional": false
                },
                "genreSettingsMaster": {
                  "name": "genreSettingsMaster",
                  "type": "GenreSettingsMasterRecord",
                  "optional": false
                },
                "templateMaster": {
                  "name": "templateMaster",
                  "type": "TemplateMasterRecord",
                  "optional": false
                },
                "systemConfigMaster": {
                  "name": "systemConfigMaster",
                  "type": "SystemConfigMasterRecord",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 290
            }
          },
          {
            "name": "KnowledgeDatabaseData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "KnowledgeDatabaseData",
              "body": "characters: Map<string, CharacterMasterRecord>;\n    worldKnowledge: WorldKnowledgeDatabase;\n    conceptDefinitions: Map<string, ConceptDefinitionRecord>;\n    foreshadowingDatabase: ForeshadowingDatabase;\n    sectionDefinitions: Map<string, SectionDefinitionRecord>;",
              "properties": {
                "characters": {
                  "name": "characters",
                  "type": "Map<string",
                  "optional": false
                },
                "worldKnowledge": {
                  "name": "worldKnowledge",
                  "type": "WorldKnowledgeDatabase",
                  "optional": false
                },
                "conceptDefinitions": {
                  "name": "conceptDefinitions",
                  "type": "Map<string",
                  "optional": false
                },
                "foreshadowingDatabase": {
                  "name": "foreshadowingDatabase",
                  "type": "ForeshadowingDatabase",
                  "optional": false
                },
                "sectionDefinitions": {
                  "name": "sectionDefinitions",
                  "type": "Map<string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 300
            }
          },
          {
            "name": "SystemKnowledgeBaseData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "SystemKnowledgeBaseData",
              "body": "promptGenerationPatterns: PromptGenerationPattern[];\n    effectiveTemplatePatterns: EffectiveTemplatePattern[];\n    analysisPatterns: AnalysisPattern[];\n    optimizationStrategies: OptimizationStrategy[];\n    errorPatterns: ErrorPattern[];\n    qualityImprovementStrategies: QualityImprovementStrategy[];",
              "properties": {
                "promptGenerationPatterns": {
                  "name": "promptGenerationPatterns",
                  "type": "PromptGenerationPattern[]",
                  "optional": false
                },
                "effectiveTemplatePatterns": {
                  "name": "effectiveTemplatePatterns",
                  "type": "EffectiveTemplatePattern[]",
                  "optional": false
                },
                "analysisPatterns": {
                  "name": "analysisPatterns",
                  "type": "AnalysisPattern[]",
                  "optional": false
                },
                "optimizationStrategies": {
                  "name": "optimizationStrategies",
                  "type": "OptimizationStrategy[]",
                  "optional": false
                },
                "errorPatterns": {
                  "name": "errorPatterns",
                  "type": "ErrorPattern[]",
                  "optional": false
                },
                "qualityImprovementStrategies": {
                  "name": "qualityImprovementStrategies",
                  "type": "QualityImprovementStrategy[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 311
            }
          },
          {
            "name": "CompletedRecordsData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "CompletedRecordsData",
              "body": "completedSections: Map<string, CompletedSectionRecord>;\n    completedArcs: Map<number, CompletedArcRecord>;\n    longTermEffectivenessRecords: LongTermEffectivenessRecord[];",
              "properties": {
                "completedSections": {
                  "name": "completedSections",
                  "type": "Map<string",
                  "optional": false
                },
                "completedArcs": {
                  "name": "completedArcs",
                  "type": "Map<number",
                  "optional": false
                },
                "longTermEffectivenessRecords": {
                  "name": "longTermEffectivenessRecords",
                  "type": "LongTermEffectivenessRecord[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 323
            }
          },
          {
            "name": "ResolvedDuplicateData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "ResolvedDuplicateData",
              "body": "id: string;\n    type: DuplicateType;\n    originalSources: string[];\n    resolvedTo: string;\n    timestamp: string;\n    confidence: number;",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "DuplicateType",
                  "optional": false
                },
                "originalSources": {
                  "name": "originalSources",
                  "type": "string[]",
                  "optional": false
                },
                "resolvedTo": {
                  "name": "resolvedTo",
                  "type": "string",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "confidence": {
                  "name": "confidence",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 332
            }
          },
          {
            "name": "CacheStatisticsData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "CacheStatisticsData",
              "body": "// UnifiedAccessAPI 用プロパティ\n    hitRatio: number;\n    missRatio: number;\n    totalRequests: number;\n    cacheSize: number;\n    lastOptimization: string;\n    evictionCount: number;\n    \n    // CacheCoordinator 用プロパティ（互換性のため）\n    totalEntries?: number;\n    hitRate?: number;\n    avgAccessTime?: number;\n    memoryUsage?: {\n        shortTerm: number;\n        midTerm: number;\n        longTerm: number;",
              "properties": {
                "hitRatio": {
                  "name": "hitRatio",
                  "type": "number",
                  "optional": false
                },
                "missRatio": {
                  "name": "missRatio",
                  "type": "number",
                  "optional": false
                },
                "totalRequests": {
                  "name": "totalRequests",
                  "type": "number",
                  "optional": false
                },
                "cacheSize": {
                  "name": "cacheSize",
                  "type": "number",
                  "optional": false
                },
                "lastOptimization": {
                  "name": "lastOptimization",
                  "type": "string",
                  "optional": false
                },
                "evictionCount": {
                  "name": "evictionCount",
                  "type": "number",
                  "optional": false
                },
                "totalEntries": {
                  "name": "totalEntries",
                  "type": "number",
                  "optional": true
                },
                "hitRate": {
                  "name": "hitRate",
                  "type": "number",
                  "optional": true
                },
                "avgAccessTime": {
                  "name": "avgAccessTime",
                  "type": "number",
                  "optional": true
                },
                "memoryUsage": {
                  "name": "memoryUsage",
                  "type": "{",
                  "optional": true
                },
                "shortTerm": {
                  "name": "shortTerm",
                  "type": "number",
                  "optional": false
                },
                "midTerm": {
                  "name": "midTerm",
                  "type": "number",
                  "optional": false
                },
                "longTerm": {
                  "name": "longTerm",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 352
            }
          },
          {
            "name": "AccessOptimizationData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "AccessOptimizationData",
              "body": "optimizationType: OptimizationType;\n    before: PerformanceMetrics;\n    after: PerformanceMetrics;\n    improvement: number;\n    timestamp: string;",
              "properties": {
                "optimizationType": {
                  "name": "optimizationType",
                  "type": "OptimizationType",
                  "optional": false
                },
                "before": {
                  "name": "before",
                  "type": "PerformanceMetrics",
                  "optional": false
                },
                "after": {
                  "name": "after",
                  "type": "PerformanceMetrics",
                  "optional": false
                },
                "improvement": {
                  "name": "improvement",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 378
            }
          },
          {
            "name": "StoryStateSnapshot",
            "category": "DATA_MODEL",
            "definition": {
              "name": "StoryStateSnapshot",
              "body": "chapterNumber: number;\n    state: string;\n    timestamp: string;\n    metadata: any;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "state": {
                  "name": "state",
                  "type": "string",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "metadata": {
                  "name": "metadata",
                  "type": "any",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 514
            }
          },
          {
            "name": "ChapterProgressionRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "ChapterProgressionRecord",
              "body": "chapterNumber: number;\n    progressScore: number;\n    milestones: string[];\n    timestamp: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "progressScore": {
                  "name": "progressScore",
                  "type": "number",
                  "optional": false
                },
                "milestones": {
                  "name": "milestones",
                  "type": "string[]",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 524
            }
          },
          {
            "name": "ArcProgressionRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "ArcProgressionRecord",
              "body": "arcNumber: number;\n    completionRatio: number;\n    keyEvents: string[];\n    timestamp: string;",
              "properties": {
                "arcNumber": {
                  "name": "arcNumber",
                  "type": "number",
                  "optional": false
                },
                "completionRatio": {
                  "name": "completionRatio",
                  "type": "number",
                  "optional": false
                },
                "keyEvents": {
                  "name": "keyEvents",
                  "type": "string[]",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 534
            }
          },
          {
            "name": "TensionHistoryRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "TensionHistoryRecord",
              "body": "chapterNumber: number;\n    tensionLevel: number;\n    factors: string[];\n    timestamp: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "tensionLevel": {
                  "name": "tensionLevel",
                  "type": "number",
                  "optional": false
                },
                "factors": {
                  "name": "factors",
                  "type": "string[]",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 544
            }
          },
          {
            "name": "TurningPointRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "TurningPointRecord",
              "body": "chapterNumber: number;\n    description: string;\n    significance: number;\n    timestamp: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 554
            }
          },
          {
            "name": "EmotionalArcDesignRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "EmotionalArcDesignRecord",
              "body": "chapterNumber: number;\n    design: any;\n    effectiveness: number;\n    timestamp: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "design": {
                  "name": "design",
                  "type": "any",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 564
            }
          },
          {
            "name": "TextAnalysisResultRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "TextAnalysisResultRecord",
              "body": "chapterNumber: number;\n    analysisResults: any;\n    processingTime: number;\n    timestamp: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "analysisResults": {
                  "name": "analysisResults",
                  "type": "any",
                  "optional": false
                },
                "processingTime": {
                  "name": "processingTime",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 574
            }
          },
          {
            "name": "DetectionResultRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "DetectionResultRecord",
              "body": "chapterNumber: number;\n    detectedItems: any[];\n    accuracy: number;\n    timestamp: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "detectedItems": {
                  "name": "detectedItems",
                  "type": "any[]",
                  "optional": false
                },
                "accuracy": {
                  "name": "accuracy",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 584
            }
          },
          {
            "name": "PreGenerationResultRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "PreGenerationResultRecord",
              "body": "chapterNumber: number;\n    preparationData: any;\n    qualityScore: number;\n    timestamp: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "preparationData": {
                  "name": "preparationData",
                  "type": "any",
                  "optional": false
                },
                "qualityScore": {
                  "name": "qualityScore",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 594
            }
          },
          {
            "name": "PostGenerationResultRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "PostGenerationResultRecord",
              "body": "chapterNumber: number;\n    refinementData: any;\n    improvementScore: number;\n    timestamp: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "refinementData": {
                  "name": "refinementData",
                  "type": "any",
                  "optional": false
                },
                "improvementScore": {
                  "name": "improvementScore",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 604
            }
          },
          {
            "name": "CharacterDevelopmentRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "CharacterDevelopmentRecord",
              "body": "characterId: string;\n    developmentPhase: string;\n    changes: any[];\n    timestamp: string;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "developmentPhase": {
                  "name": "developmentPhase",
                  "type": "string",
                  "optional": false
                },
                "changes": {
                  "name": "changes",
                  "type": "any[]",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 614
            }
          },
          {
            "name": "CharacterChangeRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "CharacterChangeRecord",
              "body": "characterId: string;\n    changeType: string;\n    oldValue: any;\n    newValue: any;\n    timestamp: string;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "changeType": {
                  "name": "changeType",
                  "type": "string",
                  "optional": false
                },
                "oldValue": {
                  "name": "oldValue",
                  "type": "any",
                  "optional": false
                },
                "newValue": {
                  "name": "newValue",
                  "type": "any",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 624
            }
          },
          {
            "name": "RelationshipEvolutionRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "RelationshipEvolutionRecord",
              "body": "characterIds: string[];\n    relationshipType: string;\n    evolutionStage: string;\n    timestamp: string;",
              "properties": {
                "characterIds": {
                  "name": "characterIds",
                  "type": "string[]",
                  "optional": false
                },
                "relationshipType": {
                  "name": "relationshipType",
                  "type": "string",
                  "optional": false
                },
                "evolutionStage": {
                  "name": "evolutionStage",
                  "type": "string",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 635
            }
          },
          {
            "name": "PsychologyEvolutionRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "PsychologyEvolutionRecord",
              "body": "characterId: string;\n    psychologyAspect: string;\n    evolution: any;\n    timestamp: string;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "psychologyAspect": {
                  "name": "psychologyAspect",
                  "type": "string",
                  "optional": false
                },
                "evolution": {
                  "name": "evolution",
                  "type": "any",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 645
            }
          },
          {
            "name": "PromptGenerationStatsRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "PromptGenerationStatsRecord",
              "body": "generationType: string;\n    successRate: number;\n    averageTime: number;\n    timestamp: string;",
              "properties": {
                "generationType": {
                  "name": "generationType",
                  "type": "string",
                  "optional": false
                },
                "successRate": {
                  "name": "successRate",
                  "type": "number",
                  "optional": false
                },
                "averageTime": {
                  "name": "averageTime",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 655
            }
          },
          {
            "name": "TemplateUsageStatsRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "TemplateUsageStatsRecord",
              "body": "templateId: string;\n    usageCount: number;\n    effectiveness: number;\n    timestamp: string;",
              "properties": {
                "templateId": {
                  "name": "templateId",
                  "type": "string",
                  "optional": false
                },
                "usageCount": {
                  "name": "usageCount",
                  "type": "number",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 665
            }
          },
          {
            "name": "TensionOptimizationStatsRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "TensionOptimizationStatsRecord",
              "body": "optimizationType: string;\n    successRate: number;\n    improvement: number;\n    timestamp: string;",
              "properties": {
                "optimizationType": {
                  "name": "optimizationType",
                  "type": "string",
                  "optional": false
                },
                "successRate": {
                  "name": "successRate",
                  "type": "number",
                  "optional": false
                },
                "improvement": {
                  "name": "improvement",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 675
            }
          },
          {
            "name": "SystemIntegrationStatsRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "SystemIntegrationStatsRecord",
              "body": "integrationType: string;\n    efficiency: number;\n    dataVolume: number;\n    timestamp: string;",
              "properties": {
                "integrationType": {
                  "name": "integrationType",
                  "type": "string",
                  "optional": false
                },
                "efficiency": {
                  "name": "efficiency",
                  "type": "number",
                  "optional": false
                },
                "dataVolume": {
                  "name": "dataVolume",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 696
            }
          },
          {
            "name": "ChapterQualityRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "ChapterQualityRecord",
              "body": "chapterNumber: number;\n    qualityScore: number;\n    qualityFactors: any;\n    timestamp: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "qualityScore": {
                  "name": "qualityScore",
                  "type": "number",
                  "optional": false
                },
                "qualityFactors": {
                  "name": "qualityFactors",
                  "type": "any",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 706
            }
          },
          {
            "name": "SystemQualityMetricsRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "SystemQualityMetricsRecord",
              "body": "metricType: string;\n    value: number;\n    trend: string;\n    timestamp: string;",
              "properties": {
                "metricType": {
                  "name": "metricType",
                  "type": "string",
                  "optional": false
                },
                "value": {
                  "name": "value",
                  "type": "number",
                  "optional": false
                },
                "trend": {
                  "name": "trend",
                  "type": "string",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 716
            }
          },
          {
            "name": "DiagnosticHistoryRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "DiagnosticHistoryRecord",
              "body": "diagnosticType: string;\n    results: any;\n    issues: string[];\n    timestamp: string;",
              "properties": {
                "diagnosticType": {
                  "name": "diagnosticType",
                  "type": "string",
                  "optional": false
                },
                "results": {
                  "name": "results",
                  "type": "any",
                  "optional": false
                },
                "issues": {
                  "name": "issues",
                  "type": "string[]",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 726
            }
          },
          {
            "name": "SystemHealthMetricsRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "SystemHealthMetricsRecord",
              "body": "healthScore: number;\n    healthFactors: any;\n    recommendations: string[];\n    timestamp: string;",
              "properties": {
                "healthScore": {
                  "name": "healthScore",
                  "type": "number",
                  "optional": false
                },
                "healthFactors": {
                  "name": "healthFactors",
                  "type": "any",
                  "optional": false
                },
                "recommendations": {
                  "name": "recommendations",
                  "type": "string[]",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 736
            }
          },
          {
            "name": "WorldSettingsMasterRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "WorldSettingsMasterRecord",
              "body": "consolidatedSettings: any;\n    sources: string[];\n    lastUpdate: string;",
              "properties": {
                "consolidatedSettings": {
                  "name": "consolidatedSettings",
                  "type": "any",
                  "optional": false
                },
                "sources": {
                  "name": "sources",
                  "type": "string[]",
                  "optional": false
                },
                "lastUpdate": {
                  "name": "lastUpdate",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 745
            }
          },
          {
            "name": "GenreSettingsMasterRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "GenreSettingsMasterRecord",
              "body": "consolidatedGenre: any;\n    sources: string[];\n    lastUpdate: string;",
              "properties": {
                "consolidatedGenre": {
                  "name": "consolidatedGenre",
                  "type": "any",
                  "optional": false
                },
                "sources": {
                  "name": "sources",
                  "type": "string[]",
                  "optional": false
                },
                "lastUpdate": {
                  "name": "lastUpdate",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 751
            }
          },
          {
            "name": "TemplateMasterRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "TemplateMasterRecord",
              "body": "consolidatedTemplates: any;\n    sources: string[];\n    lastUpdate: string;",
              "properties": {
                "consolidatedTemplates": {
                  "name": "consolidatedTemplates",
                  "type": "any",
                  "optional": false
                },
                "sources": {
                  "name": "sources",
                  "type": "string[]",
                  "optional": false
                },
                "lastUpdate": {
                  "name": "lastUpdate",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 757
            }
          },
          {
            "name": "SystemConfigMasterRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "SystemConfigMasterRecord",
              "body": "consolidatedConfig: any;\n    sources: string[];\n    lastUpdate: string;",
              "properties": {
                "consolidatedConfig": {
                  "name": "consolidatedConfig",
                  "type": "any",
                  "optional": false
                },
                "sources": {
                  "name": "sources",
                  "type": "string[]",
                  "optional": false
                },
                "lastUpdate": {
                  "name": "lastUpdate",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 763
            }
          },
          {
            "name": "CharacterMasterRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "CharacterMasterRecord",
              "body": "consolidatedCharacter: any;\n    sources: string[];\n    lastUpdate: string;",
              "properties": {
                "consolidatedCharacter": {
                  "name": "consolidatedCharacter",
                  "type": "any",
                  "optional": false
                },
                "sources": {
                  "name": "sources",
                  "type": "string[]",
                  "optional": false
                },
                "lastUpdate": {
                  "name": "lastUpdate",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 769
            }
          },
          {
            "name": "WorldKnowledgeDatabase",
            "category": "DATA_MODEL",
            "definition": {
              "name": "WorldKnowledgeDatabase",
              "body": "knowledge: any;\n    categories: string[];\n    lastUpdate: string;",
              "properties": {
                "knowledge": {
                  "name": "knowledge",
                  "type": "any",
                  "optional": false
                },
                "categories": {
                  "name": "categories",
                  "type": "string[]",
                  "optional": false
                },
                "lastUpdate": {
                  "name": "lastUpdate",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 775
            }
          },
          {
            "name": "ConceptDefinitionRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "ConceptDefinitionRecord",
              "body": "concept: string;\n    definition: any;\n    references: string[];\n    lastUpdate: string;",
              "properties": {
                "concept": {
                  "name": "concept",
                  "type": "string",
                  "optional": false
                },
                "definition": {
                  "name": "definition",
                  "type": "any",
                  "optional": false
                },
                "references": {
                  "name": "references",
                  "type": "string[]",
                  "optional": false
                },
                "lastUpdate": {
                  "name": "lastUpdate",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 781
            }
          },
          {
            "name": "ForeshadowingDatabase",
            "category": "DATA_MODEL",
            "definition": {
              "name": "ForeshadowingDatabase",
              "body": "foreshadowing: any[];\n    categories: string[];\n    lastUpdate: string;",
              "properties": {
                "foreshadowing": {
                  "name": "foreshadowing",
                  "type": "any[]",
                  "optional": false
                },
                "categories": {
                  "name": "categories",
                  "type": "string[]",
                  "optional": false
                },
                "lastUpdate": {
                  "name": "lastUpdate",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 788
            }
          },
          {
            "name": "SectionDefinitionRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "SectionDefinitionRecord",
              "body": "sectionId: string;\n    definition: any;\n    usage: any;\n    lastUpdate: string;",
              "properties": {
                "sectionId": {
                  "name": "sectionId",
                  "type": "string",
                  "optional": false
                },
                "definition": {
                  "name": "definition",
                  "type": "any",
                  "optional": false
                },
                "usage": {
                  "name": "usage",
                  "type": "any",
                  "optional": false
                },
                "lastUpdate": {
                  "name": "lastUpdate",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 794
            }
          },
          {
            "name": "CompletedSectionRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "CompletedSectionRecord",
              "body": "sectionId: string;\n    completionData: any;\n    effectiveness: number;\n    timestamp: string;",
              "properties": {
                "sectionId": {
                  "name": "sectionId",
                  "type": "string",
                  "optional": false
                },
                "completionData": {
                  "name": "completionData",
                  "type": "any",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 801
            }
          },
          {
            "name": "CompletedArcRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "CompletedArcRecord",
              "body": "arcNumber: number;\n    completionData: any;\n    effectiveness: number;\n    timestamp: string;",
              "properties": {
                "arcNumber": {
                  "name": "arcNumber",
                  "type": "number",
                  "optional": false
                },
                "completionData": {
                  "name": "completionData",
                  "type": "any",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 808
            }
          },
          {
            "name": "LongTermEffectivenessRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "LongTermEffectivenessRecord",
              "body": "recordType: string;\n    effectivenessData: any;\n    trends: any;\n    timestamp: string;",
              "properties": {
                "recordType": {
                  "name": "recordType",
                  "type": "string",
                  "optional": false
                },
                "effectivenessData": {
                  "name": "effectivenessData",
                  "type": "any",
                  "optional": false
                },
                "trends": {
                  "name": "trends",
                  "type": "any",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 815
            }
          }
        ],
        "storageRelatedTypes": [
          {
            "name": "MemoryHierarchyConfig",
            "category": "STORAGE_RELATED",
            "definition": {
              "name": "MemoryHierarchyConfig",
              "body": "shortTerm: {\n        maxChapters: number;\n        retentionTime: number; // milliseconds\n        cacheEnabled: boolean;",
              "properties": {
                "shortTerm": {
                  "name": "shortTerm",
                  "type": "{",
                  "optional": false
                },
                "maxChapters": {
                  "name": "maxChapters",
                  "type": "number",
                  "optional": false
                },
                "retentionTime": {
                  "name": "retentionTime",
                  "type": "number",
                  "optional": false
                },
                "cacheEnabled": {
                  "name": "cacheEnabled",
                  "type": "boolean",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 58
            }
          },
          {
            "name": "CacheStatisticsData",
            "category": "STORAGE_RELATED",
            "definition": {
              "name": "CacheStatisticsData",
              "body": "// UnifiedAccessAPI 用プロパティ\n    hitRatio: number;\n    missRatio: number;\n    totalRequests: number;\n    cacheSize: number;\n    lastOptimization: string;\n    evictionCount: number;\n    \n    // CacheCoordinator 用プロパティ（互換性のため）\n    totalEntries?: number;\n    hitRate?: number;\n    avgAccessTime?: number;\n    memoryUsage?: {\n        shortTerm: number;\n        midTerm: number;\n        longTerm: number;",
              "properties": {
                "hitRatio": {
                  "name": "hitRatio",
                  "type": "number",
                  "optional": false
                },
                "missRatio": {
                  "name": "missRatio",
                  "type": "number",
                  "optional": false
                },
                "totalRequests": {
                  "name": "totalRequests",
                  "type": "number",
                  "optional": false
                },
                "cacheSize": {
                  "name": "cacheSize",
                  "type": "number",
                  "optional": false
                },
                "lastOptimization": {
                  "name": "lastOptimization",
                  "type": "string",
                  "optional": false
                },
                "evictionCount": {
                  "name": "evictionCount",
                  "type": "number",
                  "optional": false
                },
                "totalEntries": {
                  "name": "totalEntries",
                  "type": "number",
                  "optional": true
                },
                "hitRate": {
                  "name": "hitRate",
                  "type": "number",
                  "optional": true
                },
                "avgAccessTime": {
                  "name": "avgAccessTime",
                  "type": "number",
                  "optional": true
                },
                "memoryUsage": {
                  "name": "memoryUsage",
                  "type": "{",
                  "optional": true
                },
                "shortTerm": {
                  "name": "shortTerm",
                  "type": "number",
                  "optional": false
                },
                "midTerm": {
                  "name": "midTerm",
                  "type": "number",
                  "optional": false
                },
                "longTerm": {
                  "name": "longTerm",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 352
            }
          },
          {
            "name": "SystemConfigMasterRecord",
            "category": "STORAGE_RELATED",
            "definition": {
              "name": "SystemConfigMasterRecord",
              "body": "consolidatedConfig: any;\n    sources: string[];\n    lastUpdate: string;",
              "properties": {
                "consolidatedConfig": {
                  "name": "consolidatedConfig",
                  "type": "any",
                  "optional": false
                },
                "sources": {
                  "name": "sources",
                  "type": "string[]",
                  "optional": false
                },
                "lastUpdate": {
                  "name": "lastUpdate",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 763
            }
          }
        ],
        "systemIntegrationTypes": [
          {
            "name": "IntegrationDiagnostics",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "IntegrationDiagnostics",
              "body": "operational: boolean;\n    efficiency: number;\n    errorRate: number;\n    lastOptimization: string;\n    recommendations: string[];",
              "properties": {
                "operational": {
                  "name": "operational",
                  "type": "boolean",
                  "optional": false
                },
                "efficiency": {
                  "name": "efficiency",
                  "type": "number",
                  "optional": false
                },
                "errorRate": {
                  "name": "errorRate",
                  "type": "number",
                  "optional": false
                },
                "lastOptimization": {
                  "name": "lastOptimization",
                  "type": "string",
                  "optional": false
                },
                "recommendations": {
                  "name": "recommendations",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 488
            }
          },
          {
            "name": "SystemIntegrationStatsRecord",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "SystemIntegrationStatsRecord",
              "body": "integrationType: string;\n    efficiency: number;\n    dataVolume: number;\n    timestamp: string;",
              "properties": {
                "integrationType": {
                  "name": "integrationType",
                  "type": "string",
                  "optional": false
                },
                "efficiency": {
                  "name": "efficiency",
                  "type": "number",
                  "optional": false
                },
                "dataVolume": {
                  "name": "dataVolume",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 696
            }
          }
        ]
      },
      "lib\\memory\\long-term\\character-database-types.ts": {
        "filePath": "lib\\memory\\long-term\\character-database-types.ts",
        "fileSize": 12695,
        "system": "memory",
        "module": "memory/long-term",
        "interfaces": {
          "CharacterMasterRecord": {
            "name": "CharacterMasterRecord",
            "body": "// 基本情報（統合済み）\r\n  id: string;\r\n  name: string;\r\n  type: CharacterType;\r\n  description: string;\r\n  \r\n  // 統合メタデータ\r\n  masterVersion: string;\r\n  consolidatedFrom: ConsolidationSource[];\r\n  lastConsolidated: string;\r\n  conflictResolutions: CharacterConflictResolution[];\r\n  \r\n  // 拡張情報\r\n  personality: CharacterPersonality;\r\n  backstory: CharacterBackstory;\r\n  relationships: CharacterRelationship[];\r\n  state: ExtendedCharacterState;\r\n  \r\n  // 履歴情報\r\n  developmentHistory: CharacterDevelopmentRecord[];\r\n  appearanceHistory: CharacterAppearanceRecord[];\r\n  changeHistory: CharacterChangeRecord[];\r\n  \r\n  // 統計情報\r\n  statistics: CharacterStatistics;\r\n  \r\n  // フォーマット済みデータ\r\n  formattedData: FormattedCharacterData;\r\n  \r\n  // メタデータ\r\n  metadata: CharacterMetadata;",
            "properties": {
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "CharacterType",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "masterVersion": {
                "name": "masterVersion",
                "type": "string",
                "optional": false
              },
              "consolidatedFrom": {
                "name": "consolidatedFrom",
                "type": "ConsolidationSource[]",
                "optional": false
              },
              "lastConsolidated": {
                "name": "lastConsolidated",
                "type": "string",
                "optional": false
              },
              "conflictResolutions": {
                "name": "conflictResolutions",
                "type": "CharacterConflictResolution[]",
                "optional": false
              },
              "personality": {
                "name": "personality",
                "type": "CharacterPersonality",
                "optional": false
              },
              "backstory": {
                "name": "backstory",
                "type": "CharacterBackstory",
                "optional": false
              },
              "relationships": {
                "name": "relationships",
                "type": "CharacterRelationship[]",
                "optional": false
              },
              "state": {
                "name": "state",
                "type": "ExtendedCharacterState",
                "optional": false
              },
              "developmentHistory": {
                "name": "developmentHistory",
                "type": "CharacterDevelopmentRecord[]",
                "optional": false
              },
              "appearanceHistory": {
                "name": "appearanceHistory",
                "type": "CharacterAppearanceRecord[]",
                "optional": false
              },
              "changeHistory": {
                "name": "changeHistory",
                "type": "CharacterChangeRecord[]",
                "optional": false
              },
              "statistics": {
                "name": "statistics",
                "type": "CharacterStatistics",
                "optional": false
              },
              "formattedData": {
                "name": "formattedData",
                "type": "FormattedCharacterData",
                "optional": false
              },
              "metadata": {
                "name": "metadata",
                "type": "CharacterMetadata",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 10
          },
          "ExtendedCharacterState": {
            "name": "ExtendedCharacterState",
            "body": "// CharacterState から継承したが型を変更するプロパティ\r\n  skills: SkillRecord[]; // string[] から SkillRecord[] に変更\r\n  \r\n  // 詳細状態\r\n  detailedEmotionalState: DetailedEmotionalState;\r\n  physicalCondition: PhysicalCondition;\r\n  mentalCondition: MentalCondition;\r\n  socialStatus: SocialStatus;\r\n  \r\n  // 能力・知識\r\n  abilities: AbilityRecord[];\r\n  knowledge: KnowledgeRecord[];\r\n  \r\n  // 所有・リソース\r\n  possessions: PossessionRecord[];\r\n  resources: ResourceRecord[];\r\n  obligations: ObligationRecord[];\r\n  \r\n  // 目標・動機\r\n  currentGoals: GoalRecord[];\r\n  motivations: MotivationRecord[];\r\n  conflicts: ConflictRecord[];",
            "properties": {
              "skills": {
                "name": "skills",
                "type": "SkillRecord[]",
                "optional": false
              },
              "detailedEmotionalState": {
                "name": "detailedEmotionalState",
                "type": "DetailedEmotionalState",
                "optional": false
              },
              "physicalCondition": {
                "name": "physicalCondition",
                "type": "PhysicalCondition",
                "optional": false
              },
              "mentalCondition": {
                "name": "mentalCondition",
                "type": "MentalCondition",
                "optional": false
              },
              "socialStatus": {
                "name": "socialStatus",
                "type": "SocialStatus",
                "optional": false
              },
              "abilities": {
                "name": "abilities",
                "type": "AbilityRecord[]",
                "optional": false
              },
              "knowledge": {
                "name": "knowledge",
                "type": "KnowledgeRecord[]",
                "optional": false
              },
              "possessions": {
                "name": "possessions",
                "type": "PossessionRecord[]",
                "optional": false
              },
              "resources": {
                "name": "resources",
                "type": "ResourceRecord[]",
                "optional": false
              },
              "obligations": {
                "name": "obligations",
                "type": "ObligationRecord[]",
                "optional": false
              },
              "currentGoals": {
                "name": "currentGoals",
                "type": "GoalRecord[]",
                "optional": false
              },
              "motivations": {
                "name": "motivations",
                "type": "MotivationRecord[]",
                "optional": false
              },
              "conflicts": {
                "name": "conflicts",
                "type": "ConflictRecord[]",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": true,
            "lineNumber": 49
          },
          "ConsolidationSource": {
            "name": "ConsolidationSource",
            "body": "source: 'CharacterManager' | 'WorldKnowledge' | 'StorageFiles' | 'Manual';\r\n  sourceId: string;\r\n  lastUpdated: string;\r\n  priority: number;\r\n  reliability: number;",
            "properties": {
              "source": {
                "name": "source",
                "type": "'CharacterManager' | 'WorldKnowledge' | 'StorageFiles' | 'Manual'",
                "optional": false
              },
              "sourceId": {
                "name": "sourceId",
                "type": "string",
                "optional": false
              },
              "lastUpdated": {
                "name": "lastUpdated",
                "type": "string",
                "optional": false
              },
              "priority": {
                "name": "priority",
                "type": "number",
                "optional": false
              },
              "reliability": {
                "name": "reliability",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 77
          },
          "CharacterConflictResolution": {
            "name": "CharacterConflictResolution",
            "body": "conflictType: 'description' | 'type' | 'personality' | 'backstory' | 'state';\r\n  sourceA: string;\r\n  sourceB: string;\r\n  conflictData: any;\r\n  resolution: any;\r\n  resolutionMethod: 'auto' | 'priority' | 'merge' | 'manual';\r\n  resolvedAt: string;\r\n  resolvedBy: string;",
            "properties": {
              "conflictType": {
                "name": "conflictType",
                "type": "'description' | 'type' | 'personality' | 'backstory' | 'state'",
                "optional": false
              },
              "sourceA": {
                "name": "sourceA",
                "type": "string",
                "optional": false
              },
              "sourceB": {
                "name": "sourceB",
                "type": "string",
                "optional": false
              },
              "conflictData": {
                "name": "conflictData",
                "type": "any",
                "optional": false
              },
              "resolution": {
                "name": "resolution",
                "type": "any",
                "optional": false
              },
              "resolutionMethod": {
                "name": "resolutionMethod",
                "type": "'auto' | 'priority' | 'merge' | 'manual'",
                "optional": false
              },
              "resolvedAt": {
                "name": "resolvedAt",
                "type": "string",
                "optional": false
              },
              "resolvedBy": {
                "name": "resolvedBy",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 88
          },
          "CharacterPersonality": {
            "name": "CharacterPersonality",
            "body": "traits: string[];\r\n  coreValues: string[];\r\n  motivations: string[];\r\n  fears: string[];\r\n  habits: string[];\r\n  speechPatterns: string[];\r\n  emotionalRange: EmotionalRange;\r\n  socialBehavior: SocialBehavior;",
            "properties": {
              "traits": {
                "name": "traits",
                "type": "string[]",
                "optional": false
              },
              "coreValues": {
                "name": "coreValues",
                "type": "string[]",
                "optional": false
              },
              "motivations": {
                "name": "motivations",
                "type": "string[]",
                "optional": false
              },
              "fears": {
                "name": "fears",
                "type": "string[]",
                "optional": false
              },
              "habits": {
                "name": "habits",
                "type": "string[]",
                "optional": false
              },
              "speechPatterns": {
                "name": "speechPatterns",
                "type": "string[]",
                "optional": false
              },
              "emotionalRange": {
                "name": "emotionalRange",
                "type": "EmotionalRange",
                "optional": false
              },
              "socialBehavior": {
                "name": "socialBehavior",
                "type": "SocialBehavior",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 102
          },
          "EmotionalRange": {
            "name": "EmotionalRange",
            "body": "dominant: string;\r\n  secondary: string[];\r\n  triggers: Record<string, string[]>;\r\n  expressions: Record<string, string[]>;",
            "properties": {
              "dominant": {
                "name": "dominant",
                "type": "string",
                "optional": false
              },
              "secondary": {
                "name": "secondary",
                "type": "string[]",
                "optional": false
              },
              "triggers": {
                "name": "triggers",
                "type": "Record<string",
                "optional": false
              },
              "expressions": {
                "name": "expressions",
                "type": "Record<string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 116
          },
          "SocialBehavior": {
            "name": "SocialBehavior",
            "body": "leadership: number; // 0-10\r\n  cooperation: number; // 0-10\r\n  empathy: number; // 0-10\r\n  assertiveness: number; // 0-10\r\n  socialEnergy: number; // 0-10",
            "properties": {
              "leadership": {
                "name": "leadership",
                "type": "number",
                "optional": false
              },
              "cooperation": {
                "name": "cooperation",
                "type": "number",
                "optional": false
              },
              "empathy": {
                "name": "empathy",
                "type": "number",
                "optional": false
              },
              "assertiveness": {
                "name": "assertiveness",
                "type": "number",
                "optional": false
              },
              "socialEnergy": {
                "name": "socialEnergy",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 126
          },
          "CharacterBackstory": {
            "name": "CharacterBackstory",
            "body": "summary: string;\r\n  keyEvents: BackstoryEvent[];\r\n  significantRelationships: SignificantRelationship[];\r\n  formativeExperiences: FormativeExperience[];\r\n  secrets: string[];\r\n  regrets: string[];\r\n  achievements: string[];",
            "properties": {
              "summary": {
                "name": "summary",
                "type": "string",
                "optional": false
              },
              "keyEvents": {
                "name": "keyEvents",
                "type": "BackstoryEvent[]",
                "optional": false
              },
              "significantRelationships": {
                "name": "significantRelationships",
                "type": "SignificantRelationship[]",
                "optional": false
              },
              "formativeExperiences": {
                "name": "formativeExperiences",
                "type": "FormativeExperience[]",
                "optional": false
              },
              "secrets": {
                "name": "secrets",
                "type": "string[]",
                "optional": false
              },
              "regrets": {
                "name": "regrets",
                "type": "string[]",
                "optional": false
              },
              "achievements": {
                "name": "achievements",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 137
          },
          "BackstoryEvent": {
            "name": "BackstoryEvent",
            "body": "eventId: string;\r\n  title: string;\r\n  description: string;\r\n  ageAtEvent?: number;\r\n  impact: number; // 0-10\r\n  eventType: 'trauma' | 'achievement' | 'relationship' | 'loss' | 'discovery' | 'other';\r\n  relatedCharacters: string[];",
            "properties": {
              "eventId": {
                "name": "eventId",
                "type": "string",
                "optional": false
              },
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "ageAtEvent": {
                "name": "ageAtEvent",
                "type": "number",
                "optional": true
              },
              "impact": {
                "name": "impact",
                "type": "number",
                "optional": false
              },
              "eventType": {
                "name": "eventType",
                "type": "'trauma' | 'achievement' | 'relationship' | 'loss' | 'discovery' | 'other'",
                "optional": false
              },
              "relatedCharacters": {
                "name": "relatedCharacters",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 150
          },
          "SignificantRelationship": {
            "name": "SignificantRelationship",
            "body": "relationshipId: string;\r\n  targetCharacterId: string;\r\n  targetCharacterName: string;\r\n  relationshipType: string;\r\n  description: string;\r\n  intensity: number; // 0-10\r\n  duration: string;\r\n  status: 'active' | 'ended' | 'complicated' | 'dormant';\r\n  keyMoments: string[];",
            "properties": {
              "relationshipId": {
                "name": "relationshipId",
                "type": "string",
                "optional": false
              },
              "targetCharacterId": {
                "name": "targetCharacterId",
                "type": "string",
                "optional": false
              },
              "targetCharacterName": {
                "name": "targetCharacterName",
                "type": "string",
                "optional": false
              },
              "relationshipType": {
                "name": "relationshipType",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "intensity": {
                "name": "intensity",
                "type": "number",
                "optional": false
              },
              "duration": {
                "name": "duration",
                "type": "string",
                "optional": false
              },
              "status": {
                "name": "status",
                "type": "'active' | 'ended' | 'complicated' | 'dormant'",
                "optional": false
              },
              "keyMoments": {
                "name": "keyMoments",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 163
          },
          "FormativeExperience": {
            "name": "FormativeExperience",
            "body": "experienceId: string;\r\n  title: string;\r\n  description: string;\r\n  ageRange: string;\r\n  lessonsLearned: string[];\r\n  skillsGained: string[];\r\n  traitsFormed: string[];\r\n  impact: number; // 0-10",
            "properties": {
              "experienceId": {
                "name": "experienceId",
                "type": "string",
                "optional": false
              },
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "ageRange": {
                "name": "ageRange",
                "type": "string",
                "optional": false
              },
              "lessonsLearned": {
                "name": "lessonsLearned",
                "type": "string[]",
                "optional": false
              },
              "skillsGained": {
                "name": "skillsGained",
                "type": "string[]",
                "optional": false
              },
              "traitsFormed": {
                "name": "traitsFormed",
                "type": "string[]",
                "optional": false
              },
              "impact": {
                "name": "impact",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 178
          },
          "CharacterRelationship": {
            "name": "CharacterRelationship",
            "body": "relationshipId: string;\r\n  targetCharacterId: string;\r\n  targetCharacterName: string;\r\n  relationshipType: string;\r\n  currentStatus: RelationshipStatus;\r\n  history: RelationshipHistoryEntry[];\r\n  dynamics: RelationshipDynamics;\r\n  metadata: RelationshipMetadata;",
            "properties": {
              "relationshipId": {
                "name": "relationshipId",
                "type": "string",
                "optional": false
              },
              "targetCharacterId": {
                "name": "targetCharacterId",
                "type": "string",
                "optional": false
              },
              "targetCharacterName": {
                "name": "targetCharacterName",
                "type": "string",
                "optional": false
              },
              "relationshipType": {
                "name": "relationshipType",
                "type": "string",
                "optional": false
              },
              "currentStatus": {
                "name": "currentStatus",
                "type": "RelationshipStatus",
                "optional": false
              },
              "history": {
                "name": "history",
                "type": "RelationshipHistoryEntry[]",
                "optional": false
              },
              "dynamics": {
                "name": "dynamics",
                "type": "RelationshipDynamics",
                "optional": false
              },
              "metadata": {
                "name": "metadata",
                "type": "RelationshipMetadata",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 192
          },
          "RelationshipStatus": {
            "name": "RelationshipStatus",
            "body": "status: 'positive' | 'negative' | 'neutral' | 'complex';\r\n  intensity: number; // 0-10\r\n  trust: number; // 0-10\r\n  understanding: number; // 0-10\r\n  conflict: number; // 0-10\r\n  dependency: number; // 0-10\r\n  lastInteraction: string;",
            "properties": {
              "status": {
                "name": "status",
                "type": "'positive' | 'negative' | 'neutral' | 'complex'",
                "optional": false
              },
              "intensity": {
                "name": "intensity",
                "type": "number",
                "optional": false
              },
              "trust": {
                "name": "trust",
                "type": "number",
                "optional": false
              },
              "understanding": {
                "name": "understanding",
                "type": "number",
                "optional": false
              },
              "conflict": {
                "name": "conflict",
                "type": "number",
                "optional": false
              },
              "dependency": {
                "name": "dependency",
                "type": "number",
                "optional": false
              },
              "lastInteraction": {
                "name": "lastInteraction",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 206
          },
          "RelationshipHistoryEntry": {
            "name": "RelationshipHistoryEntry",
            "body": "entryId: string;\r\n  chapterNumber: number;\r\n  event: string;\r\n  impact: number;\r\n  statusChange: Partial<RelationshipStatus>;\r\n  timestamp: string;",
            "properties": {
              "entryId": {
                "name": "entryId",
                "type": "string",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "event": {
                "name": "event",
                "type": "string",
                "optional": false
              },
              "impact": {
                "name": "impact",
                "type": "number",
                "optional": false
              },
              "statusChange": {
                "name": "statusChange",
                "type": "Partial<RelationshipStatus>",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 219
          },
          "RelationshipDynamics": {
            "name": "RelationshipDynamics",
            "body": "powerBalance: number; // -10 to 10 (negative = other has power)\r\n  emotionalConnection: number; // 0-10\r\n  commonGoals: string[];\r\n  conflictSources: string[];\r\n  interactionPatterns: string[];\r\n  growthPotential: number; // 0-10",
            "properties": {
              "powerBalance": {
                "name": "powerBalance",
                "type": "number",
                "optional": false
              },
              "emotionalConnection": {
                "name": "emotionalConnection",
                "type": "number",
                "optional": false
              },
              "commonGoals": {
                "name": "commonGoals",
                "type": "string[]",
                "optional": false
              },
              "conflictSources": {
                "name": "conflictSources",
                "type": "string[]",
                "optional": false
              },
              "interactionPatterns": {
                "name": "interactionPatterns",
                "type": "string[]",
                "optional": false
              },
              "growthPotential": {
                "name": "growthPotential",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 231
          },
          "RelationshipMetadata": {
            "name": "RelationshipMetadata",
            "body": "established: string;\r\n  lastUpdated: string;\r\n  significance: number; // 0-10\r\n  narrativeRole: string;\r\n  tags: string[];",
            "properties": {
              "established": {
                "name": "established",
                "type": "string",
                "optional": false
              },
              "lastUpdated": {
                "name": "lastUpdated",
                "type": "string",
                "optional": false
              },
              "significance": {
                "name": "significance",
                "type": "number",
                "optional": false
              },
              "narrativeRole": {
                "name": "narrativeRole",
                "type": "string",
                "optional": false
              },
              "tags": {
                "name": "tags",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 243
          },
          "DetailedEmotionalState": {
            "name": "DetailedEmotionalState",
            "body": "primary: string;\r\n  secondary: string[];\r\n  intensity: number; // 0-10\r\n  stability: number; // 0-10\r\n  triggers: string[];\r\n  coping: string[];\r\n  lastChange: string;\r\n  influences: EmotionalInfluence[];",
            "properties": {
              "primary": {
                "name": "primary",
                "type": "string",
                "optional": false
              },
              "secondary": {
                "name": "secondary",
                "type": "string[]",
                "optional": false
              },
              "intensity": {
                "name": "intensity",
                "type": "number",
                "optional": false
              },
              "stability": {
                "name": "stability",
                "type": "number",
                "optional": false
              },
              "triggers": {
                "name": "triggers",
                "type": "string[]",
                "optional": false
              },
              "coping": {
                "name": "coping",
                "type": "string[]",
                "optional": false
              },
              "lastChange": {
                "name": "lastChange",
                "type": "string",
                "optional": false
              },
              "influences": {
                "name": "influences",
                "type": "EmotionalInfluence[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 254
          },
          "EmotionalInfluence": {
            "name": "EmotionalInfluence",
            "body": "source: string;\r\n  type: 'character' | 'event' | 'environment' | 'internal';\r\n  impact: number; // -10 to 10\r\n  duration: 'temporary' | 'ongoing' | 'permanent';",
            "properties": {
              "source": {
                "name": "source",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'character' | 'event' | 'environment' | 'internal'",
                "optional": false
              },
              "impact": {
                "name": "impact",
                "type": "number",
                "optional": false
              },
              "duration": {
                "name": "duration",
                "type": "'temporary' | 'ongoing' | 'permanent'",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 268
          },
          "PhysicalCondition": {
            "name": "PhysicalCondition",
            "body": "health: number; // 0-10\r\n  energy: number; // 0-10\r\n  fitness: number; // 0-10\r\n  injuries: InjuryRecord[];\r\n  disabilities: DisabilityRecord[];\r\n  appearance: AppearanceRecord;",
            "properties": {
              "health": {
                "name": "health",
                "type": "number",
                "optional": false
              },
              "energy": {
                "name": "energy",
                "type": "number",
                "optional": false
              },
              "fitness": {
                "name": "fitness",
                "type": "number",
                "optional": false
              },
              "injuries": {
                "name": "injuries",
                "type": "InjuryRecord[]",
                "optional": false
              },
              "disabilities": {
                "name": "disabilities",
                "type": "DisabilityRecord[]",
                "optional": false
              },
              "appearance": {
                "name": "appearance",
                "type": "AppearanceRecord",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 278
          },
          "MentalCondition": {
            "name": "MentalCondition",
            "body": "clarity: number; // 0-10\r\n  focus: number; // 0-10\r\n  stress: number; // 0-10\r\n  confidence: number; // 0-10\r\n  mentalIssues: MentalIssueRecord[];\r\n  copingMechanisms: string[];",
            "properties": {
              "clarity": {
                "name": "clarity",
                "type": "number",
                "optional": false
              },
              "focus": {
                "name": "focus",
                "type": "number",
                "optional": false
              },
              "stress": {
                "name": "stress",
                "type": "number",
                "optional": false
              },
              "confidence": {
                "name": "confidence",
                "type": "number",
                "optional": false
              },
              "mentalIssues": {
                "name": "mentalIssues",
                "type": "MentalIssueRecord[]",
                "optional": false
              },
              "copingMechanisms": {
                "name": "copingMechanisms",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 290
          },
          "SocialStatus": {
            "name": "SocialStatus",
            "body": "reputation: number; // 0-10\r\n  influence: number; // 0-10\r\n  connections: number; // 0-10\r\n  socialCircles: string[];\r\n  roles: SocialRole[];\r\n  responsibilities: string[];",
            "properties": {
              "reputation": {
                "name": "reputation",
                "type": "number",
                "optional": false
              },
              "influence": {
                "name": "influence",
                "type": "number",
                "optional": false
              },
              "connections": {
                "name": "connections",
                "type": "number",
                "optional": false
              },
              "socialCircles": {
                "name": "socialCircles",
                "type": "string[]",
                "optional": false
              },
              "roles": {
                "name": "roles",
                "type": "SocialRole[]",
                "optional": false
              },
              "responsibilities": {
                "name": "responsibilities",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 302
          },
          "SkillRecord": {
            "name": "SkillRecord",
            "body": "skillId: string;\r\n  name: string;\r\n  level: number; // 0-10\r\n  experience: number;\r\n  category: string;\r\n  acquiredDate: string;\r\n  lastUsed: string;\r\n  relevantSituations: string[];",
            "properties": {
              "skillId": {
                "name": "skillId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "level": {
                "name": "level",
                "type": "number",
                "optional": false
              },
              "experience": {
                "name": "experience",
                "type": "number",
                "optional": false
              },
              "category": {
                "name": "category",
                "type": "string",
                "optional": false
              },
              "acquiredDate": {
                "name": "acquiredDate",
                "type": "string",
                "optional": false
              },
              "lastUsed": {
                "name": "lastUsed",
                "type": "string",
                "optional": false
              },
              "relevantSituations": {
                "name": "relevantSituations",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 314
          },
          "AbilityRecord": {
            "name": "AbilityRecord",
            "body": "abilityId: string;\r\n  name: string;\r\n  description: string;\r\n  type: 'innate' | 'learned' | 'granted' | 'magical';\r\n  power: number; // 0-10\r\n  limitations: string[];\r\n  cost: string;\r\n  cooldown?: string;",
            "properties": {
              "abilityId": {
                "name": "abilityId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'innate' | 'learned' | 'granted' | 'magical'",
                "optional": false
              },
              "power": {
                "name": "power",
                "type": "number",
                "optional": false
              },
              "limitations": {
                "name": "limitations",
                "type": "string[]",
                "optional": false
              },
              "cost": {
                "name": "cost",
                "type": "string",
                "optional": false
              },
              "cooldown": {
                "name": "cooldown",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 328
          },
          "KnowledgeRecord": {
            "name": "KnowledgeRecord",
            "body": "knowledgeId: string;\r\n  domain: string;\r\n  description: string;\r\n  depth: number; // 0-10\r\n  breadth: number; // 0-10\r\n  source: string;\r\n  acquiredDate: string;\r\n  relevance: number; // 0-10",
            "properties": {
              "knowledgeId": {
                "name": "knowledgeId",
                "type": "string",
                "optional": false
              },
              "domain": {
                "name": "domain",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "depth": {
                "name": "depth",
                "type": "number",
                "optional": false
              },
              "breadth": {
                "name": "breadth",
                "type": "number",
                "optional": false
              },
              "source": {
                "name": "source",
                "type": "string",
                "optional": false
              },
              "acquiredDate": {
                "name": "acquiredDate",
                "type": "string",
                "optional": false
              },
              "relevance": {
                "name": "relevance",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 342
          },
          "PossessionRecord": {
            "name": "PossessionRecord",
            "body": "itemId: string;\r\n  name: string;\r\n  description: string;\r\n  value: number;\r\n  significance: number; // 0-10\r\n  condition: string;\r\n  location: string;\r\n  acquiredDate: string;",
            "properties": {
              "itemId": {
                "name": "itemId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "value": {
                "name": "value",
                "type": "number",
                "optional": false
              },
              "significance": {
                "name": "significance",
                "type": "number",
                "optional": false
              },
              "condition": {
                "name": "condition",
                "type": "string",
                "optional": false
              },
              "location": {
                "name": "location",
                "type": "string",
                "optional": false
              },
              "acquiredDate": {
                "name": "acquiredDate",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 356
          },
          "ResourceRecord": {
            "name": "ResourceRecord",
            "body": "resourceId: string;\r\n  type: 'financial' | 'social' | 'informational' | 'material' | 'time';\r\n  name: string;\r\n  amount: number;\r\n  unit: string;\r\n  availability: number; // 0-10\r\n  renewability: 'renewable' | 'finite' | 'unknown';",
            "properties": {
              "resourceId": {
                "name": "resourceId",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'financial' | 'social' | 'informational' | 'material' | 'time'",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "amount": {
                "name": "amount",
                "type": "number",
                "optional": false
              },
              "unit": {
                "name": "unit",
                "type": "string",
                "optional": false
              },
              "availability": {
                "name": "availability",
                "type": "number",
                "optional": false
              },
              "renewability": {
                "name": "renewability",
                "type": "'renewable' | 'finite' | 'unknown'",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 370
          },
          "ObligationRecord": {
            "name": "ObligationRecord",
            "body": "obligationId: string;\r\n  type: 'legal' | 'moral' | 'social' | 'personal' | 'professional';\r\n  description: string;\r\n  priority: number; // 0-10\r\n  deadline?: string;\r\n  consequences: string[];\r\n  progress: number; // 0-10 (completion)",
            "properties": {
              "obligationId": {
                "name": "obligationId",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'legal' | 'moral' | 'social' | 'personal' | 'professional'",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "priority": {
                "name": "priority",
                "type": "number",
                "optional": false
              },
              "deadline": {
                "name": "deadline",
                "type": "string",
                "optional": true
              },
              "consequences": {
                "name": "consequences",
                "type": "string[]",
                "optional": false
              },
              "progress": {
                "name": "progress",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 383
          },
          "GoalRecord": {
            "name": "GoalRecord",
            "body": "goalId: string;\r\n  title: string;\r\n  description: string;\r\n  type: 'short_term' | 'medium_term' | 'long_term' | 'life_goal';\r\n  priority: number; // 0-10\r\n  progress: number; // 0-10\r\n  deadline?: string;\r\n  obstacles: string[];\r\n  resources: string[];\r\n  dependencies: string[];",
            "properties": {
              "goalId": {
                "name": "goalId",
                "type": "string",
                "optional": false
              },
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'short_term' | 'medium_term' | 'long_term' | 'life_goal'",
                "optional": false
              },
              "priority": {
                "name": "priority",
                "type": "number",
                "optional": false
              },
              "progress": {
                "name": "progress",
                "type": "number",
                "optional": false
              },
              "deadline": {
                "name": "deadline",
                "type": "string",
                "optional": true
              },
              "obstacles": {
                "name": "obstacles",
                "type": "string[]",
                "optional": false
              },
              "resources": {
                "name": "resources",
                "type": "string[]",
                "optional": false
              },
              "dependencies": {
                "name": "dependencies",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 396
          },
          "MotivationRecord": {
            "name": "MotivationRecord",
            "body": "motivationId: string;\r\n  type: 'survival' | 'security' | 'belonging' | 'esteem' | 'self_actualization';\r\n  description: string;\r\n  intensity: number; // 0-10\r\n  source: string;\r\n  satisfactionLevel: number; // 0-10\r\n  related: string[];",
            "properties": {
              "motivationId": {
                "name": "motivationId",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'survival' | 'security' | 'belonging' | 'esteem' | 'self_actualization'",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "intensity": {
                "name": "intensity",
                "type": "number",
                "optional": false
              },
              "source": {
                "name": "source",
                "type": "string",
                "optional": false
              },
              "satisfactionLevel": {
                "name": "satisfactionLevel",
                "type": "number",
                "optional": false
              },
              "related": {
                "name": "related",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 412
          },
          "ConflictRecord": {
            "name": "ConflictRecord",
            "body": "conflictId: string;\r\n  type: 'internal' | 'interpersonal' | 'societal' | 'ideological';\r\n  description: string;\r\n  severity: number; // 0-10\r\n  parties: string[];\r\n  stakes: string[];\r\n  possibleResolutions: string[];\r\n  progress: number; // 0-10 toward resolution",
            "properties": {
              "conflictId": {
                "name": "conflictId",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'internal' | 'interpersonal' | 'societal' | 'ideological'",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "severity": {
                "name": "severity",
                "type": "number",
                "optional": false
              },
              "parties": {
                "name": "parties",
                "type": "string[]",
                "optional": false
              },
              "stakes": {
                "name": "stakes",
                "type": "string[]",
                "optional": false
              },
              "possibleResolutions": {
                "name": "possibleResolutions",
                "type": "string[]",
                "optional": false
              },
              "progress": {
                "name": "progress",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 425
          },
          "CharacterDevelopmentRecord": {
            "name": "CharacterDevelopmentRecord",
            "body": "recordId: string;\r\n  chapterNumber: number;\r\n  developmentType: 'personality' | 'skill' | 'relationship' | 'goal' | 'backstory';\r\n  description: string;\r\n  significance: number; // 0-10\r\n  impact: string[];\r\n  timestamp: string;\r\n  relatedEvents: string[];",
            "properties": {
              "recordId": {
                "name": "recordId",
                "type": "string",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "developmentType": {
                "name": "developmentType",
                "type": "'personality' | 'skill' | 'relationship' | 'goal' | 'backstory'",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "significance": {
                "name": "significance",
                "type": "number",
                "optional": false
              },
              "impact": {
                "name": "impact",
                "type": "string[]",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              },
              "relatedEvents": {
                "name": "relatedEvents",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 439
          },
          "CharacterAppearanceRecord": {
            "name": "CharacterAppearanceRecord",
            "body": "recordId: string;\r\n  chapterNumber: number;\r\n  role: 'protagonist' | 'deuteragonist' | 'supporting' | 'minor' | 'mentioned';\r\n  significance: number; // 0-10\r\n  screenTime: number; // estimated minutes/pages\r\n  interactions: string[];\r\n  impact: string;\r\n  timestamp: string;",
            "properties": {
              "recordId": {
                "name": "recordId",
                "type": "string",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "role": {
                "name": "role",
                "type": "'protagonist' | 'deuteragonist' | 'supporting' | 'minor' | 'mentioned'",
                "optional": false
              },
              "significance": {
                "name": "significance",
                "type": "number",
                "optional": false
              },
              "screenTime": {
                "name": "screenTime",
                "type": "number",
                "optional": false
              },
              "interactions": {
                "name": "interactions",
                "type": "string[]",
                "optional": false
              },
              "impact": {
                "name": "impact",
                "type": "string",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 453
          },
          "CharacterChangeRecord": {
            "name": "CharacterChangeRecord",
            "body": "recordId: string;\r\n  chapterNumber: number;\r\n  changeType: 'state' | 'personality' | 'relationship' | 'backstory' | 'metadata';\r\n  fieldChanged: string;\r\n  previousValue: any;\r\n  newValue: any;\r\n  reason: string;\r\n  source: string;\r\n  timestamp: string;\r\n  significance: number; // 0-10",
            "properties": {
              "recordId": {
                "name": "recordId",
                "type": "string",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "changeType": {
                "name": "changeType",
                "type": "'state' | 'personality' | 'relationship' | 'backstory' | 'metadata'",
                "optional": false
              },
              "fieldChanged": {
                "name": "fieldChanged",
                "type": "string",
                "optional": false
              },
              "previousValue": {
                "name": "previousValue",
                "type": "any",
                "optional": false
              },
              "newValue": {
                "name": "newValue",
                "type": "any",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": false
              },
              "source": {
                "name": "source",
                "type": "string",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              },
              "significance": {
                "name": "significance",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 467
          },
          "CharacterStatistics": {
            "name": "CharacterStatistics",
            "body": "totalAppearances: number;\r\n  totalScreenTime: number;\r\n  averageSignificance: number;\r\n  relationshipCount: number;\r\n  developmentEvents: number;\r\n  conflictInvolvement: number;\r\n  lastActivity: string;\r\n  firstAppearance: number;\r\n  peakChapter: number;\r\n  trendingTopics: string[];",
            "properties": {
              "totalAppearances": {
                "name": "totalAppearances",
                "type": "number",
                "optional": false
              },
              "totalScreenTime": {
                "name": "totalScreenTime",
                "type": "number",
                "optional": false
              },
              "averageSignificance": {
                "name": "averageSignificance",
                "type": "number",
                "optional": false
              },
              "relationshipCount": {
                "name": "relationshipCount",
                "type": "number",
                "optional": false
              },
              "developmentEvents": {
                "name": "developmentEvents",
                "type": "number",
                "optional": false
              },
              "conflictInvolvement": {
                "name": "conflictInvolvement",
                "type": "number",
                "optional": false
              },
              "lastActivity": {
                "name": "lastActivity",
                "type": "string",
                "optional": false
              },
              "firstAppearance": {
                "name": "firstAppearance",
                "type": "number",
                "optional": false
              },
              "peakChapter": {
                "name": "peakChapter",
                "type": "number",
                "optional": false
              },
              "trendingTopics": {
                "name": "trendingTopics",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 483
          },
          "FormattedCharacterData": {
            "name": "FormattedCharacterData",
            "body": "shortDescription: string;\r\n  mediumDescription: string;\r\n  longDescription: string;\r\n  personalityProfile: string;\r\n  relationshipSummary: string;\r\n  backgroundSummary: string;\r\n  currentStatusSummary: string;\r\n  developmentArc: string;\r\n  keyQuotes: string[];\r\n  characterTags: string[];\r\n  lastFormatted: string;",
            "properties": {
              "shortDescription": {
                "name": "shortDescription",
                "type": "string",
                "optional": false
              },
              "mediumDescription": {
                "name": "mediumDescription",
                "type": "string",
                "optional": false
              },
              "longDescription": {
                "name": "longDescription",
                "type": "string",
                "optional": false
              },
              "personalityProfile": {
                "name": "personalityProfile",
                "type": "string",
                "optional": false
              },
              "relationshipSummary": {
                "name": "relationshipSummary",
                "type": "string",
                "optional": false
              },
              "backgroundSummary": {
                "name": "backgroundSummary",
                "type": "string",
                "optional": false
              },
              "currentStatusSummary": {
                "name": "currentStatusSummary",
                "type": "string",
                "optional": false
              },
              "developmentArc": {
                "name": "developmentArc",
                "type": "string",
                "optional": false
              },
              "keyQuotes": {
                "name": "keyQuotes",
                "type": "string[]",
                "optional": false
              },
              "characterTags": {
                "name": "characterTags",
                "type": "string[]",
                "optional": false
              },
              "lastFormatted": {
                "name": "lastFormatted",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 499
          },
          "CharacterMetadata": {
            "name": "CharacterMetadata",
            "body": "createdAt: string;\r\n  createdBy: string;\r\n  lastUpdated: string;\r\n  updatedBy: string;\r\n  version: string;\r\n  locked: boolean;\r\n  archivalStatus: 'active' | 'archived' | 'deprecated';\r\n  importanceScore: number; // 0-10\r\n  narrativeRole: string;\r\n  tags: string[];\r\n  notes: string[];",
            "properties": {
              "createdAt": {
                "name": "createdAt",
                "type": "string",
                "optional": false
              },
              "createdBy": {
                "name": "createdBy",
                "type": "string",
                "optional": false
              },
              "lastUpdated": {
                "name": "lastUpdated",
                "type": "string",
                "optional": false
              },
              "updatedBy": {
                "name": "updatedBy",
                "type": "string",
                "optional": false
              },
              "version": {
                "name": "version",
                "type": "string",
                "optional": false
              },
              "locked": {
                "name": "locked",
                "type": "boolean",
                "optional": false
              },
              "archivalStatus": {
                "name": "archivalStatus",
                "type": "'active' | 'archived' | 'deprecated'",
                "optional": false
              },
              "importanceScore": {
                "name": "importanceScore",
                "type": "number",
                "optional": false
              },
              "narrativeRole": {
                "name": "narrativeRole",
                "type": "string",
                "optional": false
              },
              "tags": {
                "name": "tags",
                "type": "string[]",
                "optional": false
              },
              "notes": {
                "name": "notes",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 516
          },
          "InjuryRecord": {
            "name": "InjuryRecord",
            "body": "injuryId: string;\r\n  type: string;\r\n  severity: number; // 0-10\r\n  healingRate: number; // 0-10\r\n  description: string;\r\n  acquiredDate: string;\r\n  expectedHealing?: string;",
            "properties": {
              "injuryId": {
                "name": "injuryId",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "severity": {
                "name": "severity",
                "type": "number",
                "optional": false
              },
              "healingRate": {
                "name": "healingRate",
                "type": "number",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "acquiredDate": {
                "name": "acquiredDate",
                "type": "string",
                "optional": false
              },
              "expectedHealing": {
                "name": "expectedHealing",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 531
          },
          "DisabilityRecord": {
            "name": "DisabilityRecord",
            "body": "disabilityId: string;\r\n  type: string;\r\n  severity: number; // 0-10\r\n  description: string;\r\n  adaptations: string[];\r\n  impact: string[];",
            "properties": {
              "disabilityId": {
                "name": "disabilityId",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "severity": {
                "name": "severity",
                "type": "number",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "adaptations": {
                "name": "adaptations",
                "type": "string[]",
                "optional": false
              },
              "impact": {
                "name": "impact",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 541
          },
          "AppearanceRecord": {
            "name": "AppearanceRecord",
            "body": "height: string;\r\n  build: string;\r\n  hairColor: string;\r\n  eyeColor: string;\r\n  distinctiveFeatures: string[];\r\n  style: string;\r\n  mannerisms: string[];",
            "properties": {
              "height": {
                "name": "height",
                "type": "string",
                "optional": false
              },
              "build": {
                "name": "build",
                "type": "string",
                "optional": false
              },
              "hairColor": {
                "name": "hairColor",
                "type": "string",
                "optional": false
              },
              "eyeColor": {
                "name": "eyeColor",
                "type": "string",
                "optional": false
              },
              "distinctiveFeatures": {
                "name": "distinctiveFeatures",
                "type": "string[]",
                "optional": false
              },
              "style": {
                "name": "style",
                "type": "string",
                "optional": false
              },
              "mannerisms": {
                "name": "mannerisms",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 550
          },
          "MentalIssueRecord": {
            "name": "MentalIssueRecord",
            "body": "issueId: string;\r\n  type: string;\r\n  severity: number; // 0-10\r\n  description: string;\r\n  triggers: string[];\r\n  coping: string[];\r\n  professional: string[];",
            "properties": {
              "issueId": {
                "name": "issueId",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "severity": {
                "name": "severity",
                "type": "number",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "triggers": {
                "name": "triggers",
                "type": "string[]",
                "optional": false
              },
              "coping": {
                "name": "coping",
                "type": "string[]",
                "optional": false
              },
              "professional": {
                "name": "professional",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 560
          },
          "SocialRole": {
            "name": "SocialRole",
            "body": "roleId: string;\r\n  title: string;\r\n  organization: string;\r\n  responsibilities: string[];\r\n  authority: number; // 0-10\r\n  visibility: number; // 0-10",
            "properties": {
              "roleId": {
                "name": "roleId",
                "type": "string",
                "optional": false
              },
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "organization": {
                "name": "organization",
                "type": "string",
                "optional": false
              },
              "responsibilities": {
                "name": "responsibilities",
                "type": "string[]",
                "optional": false
              },
              "authority": {
                "name": "authority",
                "type": "number",
                "optional": false
              },
              "visibility": {
                "name": "visibility",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 570
          }
        },
        "types": {},
        "enums": {},
        "imports": [
          {
            "types": [
              "Character",
              "CharacterType",
              "CharacterState"
            ],
            "source": "@/types/characters",
            "isTypeOnly": true
          }
        ],
        "exports": [
          "CharacterMasterRecord",
          "ExtendedCharacterState",
          "ConsolidationSource",
          "CharacterConflictResolution",
          "CharacterPersonality",
          "EmotionalRange",
          "SocialBehavior",
          "CharacterBackstory",
          "BackstoryEvent",
          "SignificantRelationship",
          "FormativeExperience",
          "CharacterRelationship",
          "RelationshipStatus",
          "RelationshipHistoryEntry",
          "RelationshipDynamics",
          "RelationshipMetadata",
          "DetailedEmotionalState",
          "EmotionalInfluence",
          "PhysicalCondition",
          "MentalCondition",
          "SocialStatus",
          "SkillRecord",
          "AbilityRecord",
          "KnowledgeRecord",
          "PossessionRecord",
          "ResourceRecord",
          "ObligationRecord",
          "GoalRecord",
          "MotivationRecord",
          "ConflictRecord",
          "CharacterDevelopmentRecord",
          "CharacterAppearanceRecord",
          "CharacterChangeRecord",
          "CharacterStatistics",
          "FormattedCharacterData",
          "CharacterMetadata",
          "InjuryRecord",
          "DisabilityRecord",
          "AppearanceRecord",
          "MentalIssueRecord",
          "SocialRole"
        ],
        "inlineTypes": [],
        "generics": [
          "CharacterState, 'skills'",
          "string, string[]",
          "RelationshipStatus"
        ],
        "extendedTypes": [
          "Omit<CharacterState, 'skills'>"
        ],
        "dataModelTypes": [
          {
            "name": "CharacterMasterRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "CharacterMasterRecord",
              "body": "// 基本情報（統合済み）\r\n  id: string;\r\n  name: string;\r\n  type: CharacterType;\r\n  description: string;\r\n  \r\n  // 統合メタデータ\r\n  masterVersion: string;\r\n  consolidatedFrom: ConsolidationSource[];\r\n  lastConsolidated: string;\r\n  conflictResolutions: CharacterConflictResolution[];\r\n  \r\n  // 拡張情報\r\n  personality: CharacterPersonality;\r\n  backstory: CharacterBackstory;\r\n  relationships: CharacterRelationship[];\r\n  state: ExtendedCharacterState;\r\n  \r\n  // 履歴情報\r\n  developmentHistory: CharacterDevelopmentRecord[];\r\n  appearanceHistory: CharacterAppearanceRecord[];\r\n  changeHistory: CharacterChangeRecord[];\r\n  \r\n  // 統計情報\r\n  statistics: CharacterStatistics;\r\n  \r\n  // フォーマット済みデータ\r\n  formattedData: FormattedCharacterData;\r\n  \r\n  // メタデータ\r\n  metadata: CharacterMetadata;",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "CharacterType",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "masterVersion": {
                  "name": "masterVersion",
                  "type": "string",
                  "optional": false
                },
                "consolidatedFrom": {
                  "name": "consolidatedFrom",
                  "type": "ConsolidationSource[]",
                  "optional": false
                },
                "lastConsolidated": {
                  "name": "lastConsolidated",
                  "type": "string",
                  "optional": false
                },
                "conflictResolutions": {
                  "name": "conflictResolutions",
                  "type": "CharacterConflictResolution[]",
                  "optional": false
                },
                "personality": {
                  "name": "personality",
                  "type": "CharacterPersonality",
                  "optional": false
                },
                "backstory": {
                  "name": "backstory",
                  "type": "CharacterBackstory",
                  "optional": false
                },
                "relationships": {
                  "name": "relationships",
                  "type": "CharacterRelationship[]",
                  "optional": false
                },
                "state": {
                  "name": "state",
                  "type": "ExtendedCharacterState",
                  "optional": false
                },
                "developmentHistory": {
                  "name": "developmentHistory",
                  "type": "CharacterDevelopmentRecord[]",
                  "optional": false
                },
                "appearanceHistory": {
                  "name": "appearanceHistory",
                  "type": "CharacterAppearanceRecord[]",
                  "optional": false
                },
                "changeHistory": {
                  "name": "changeHistory",
                  "type": "CharacterChangeRecord[]",
                  "optional": false
                },
                "statistics": {
                  "name": "statistics",
                  "type": "CharacterStatistics",
                  "optional": false
                },
                "formattedData": {
                  "name": "formattedData",
                  "type": "FormattedCharacterData",
                  "optional": false
                },
                "metadata": {
                  "name": "metadata",
                  "type": "CharacterMetadata",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 10
            }
          },
          {
            "name": "ExtendedCharacterState",
            "category": "DATA_MODEL",
            "definition": {
              "name": "ExtendedCharacterState",
              "body": "// CharacterState から継承したが型を変更するプロパティ\r\n  skills: SkillRecord[]; // string[] から SkillRecord[] に変更\r\n  \r\n  // 詳細状態\r\n  detailedEmotionalState: DetailedEmotionalState;\r\n  physicalCondition: PhysicalCondition;\r\n  mentalCondition: MentalCondition;\r\n  socialStatus: SocialStatus;\r\n  \r\n  // 能力・知識\r\n  abilities: AbilityRecord[];\r\n  knowledge: KnowledgeRecord[];\r\n  \r\n  // 所有・リソース\r\n  possessions: PossessionRecord[];\r\n  resources: ResourceRecord[];\r\n  obligations: ObligationRecord[];\r\n  \r\n  // 目標・動機\r\n  currentGoals: GoalRecord[];\r\n  motivations: MotivationRecord[];\r\n  conflicts: ConflictRecord[];",
              "properties": {
                "skills": {
                  "name": "skills",
                  "type": "SkillRecord[]",
                  "optional": false
                },
                "detailedEmotionalState": {
                  "name": "detailedEmotionalState",
                  "type": "DetailedEmotionalState",
                  "optional": false
                },
                "physicalCondition": {
                  "name": "physicalCondition",
                  "type": "PhysicalCondition",
                  "optional": false
                },
                "mentalCondition": {
                  "name": "mentalCondition",
                  "type": "MentalCondition",
                  "optional": false
                },
                "socialStatus": {
                  "name": "socialStatus",
                  "type": "SocialStatus",
                  "optional": false
                },
                "abilities": {
                  "name": "abilities",
                  "type": "AbilityRecord[]",
                  "optional": false
                },
                "knowledge": {
                  "name": "knowledge",
                  "type": "KnowledgeRecord[]",
                  "optional": false
                },
                "possessions": {
                  "name": "possessions",
                  "type": "PossessionRecord[]",
                  "optional": false
                },
                "resources": {
                  "name": "resources",
                  "type": "ResourceRecord[]",
                  "optional": false
                },
                "obligations": {
                  "name": "obligations",
                  "type": "ObligationRecord[]",
                  "optional": false
                },
                "currentGoals": {
                  "name": "currentGoals",
                  "type": "GoalRecord[]",
                  "optional": false
                },
                "motivations": {
                  "name": "motivations",
                  "type": "MotivationRecord[]",
                  "optional": false
                },
                "conflicts": {
                  "name": "conflicts",
                  "type": "ConflictRecord[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 49
            }
          },
          {
            "name": "DetailedEmotionalState",
            "category": "DATA_MODEL",
            "definition": {
              "name": "DetailedEmotionalState",
              "body": "primary: string;\r\n  secondary: string[];\r\n  intensity: number; // 0-10\r\n  stability: number; // 0-10\r\n  triggers: string[];\r\n  coping: string[];\r\n  lastChange: string;\r\n  influences: EmotionalInfluence[];",
              "properties": {
                "primary": {
                  "name": "primary",
                  "type": "string",
                  "optional": false
                },
                "secondary": {
                  "name": "secondary",
                  "type": "string[]",
                  "optional": false
                },
                "intensity": {
                  "name": "intensity",
                  "type": "number",
                  "optional": false
                },
                "stability": {
                  "name": "stability",
                  "type": "number",
                  "optional": false
                },
                "triggers": {
                  "name": "triggers",
                  "type": "string[]",
                  "optional": false
                },
                "coping": {
                  "name": "coping",
                  "type": "string[]",
                  "optional": false
                },
                "lastChange": {
                  "name": "lastChange",
                  "type": "string",
                  "optional": false
                },
                "influences": {
                  "name": "influences",
                  "type": "EmotionalInfluence[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 254
            }
          },
          {
            "name": "SkillRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "SkillRecord",
              "body": "skillId: string;\r\n  name: string;\r\n  level: number; // 0-10\r\n  experience: number;\r\n  category: string;\r\n  acquiredDate: string;\r\n  lastUsed: string;\r\n  relevantSituations: string[];",
              "properties": {
                "skillId": {
                  "name": "skillId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "level": {
                  "name": "level",
                  "type": "number",
                  "optional": false
                },
                "experience": {
                  "name": "experience",
                  "type": "number",
                  "optional": false
                },
                "category": {
                  "name": "category",
                  "type": "string",
                  "optional": false
                },
                "acquiredDate": {
                  "name": "acquiredDate",
                  "type": "string",
                  "optional": false
                },
                "lastUsed": {
                  "name": "lastUsed",
                  "type": "string",
                  "optional": false
                },
                "relevantSituations": {
                  "name": "relevantSituations",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 314
            }
          },
          {
            "name": "AbilityRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "AbilityRecord",
              "body": "abilityId: string;\r\n  name: string;\r\n  description: string;\r\n  type: 'innate' | 'learned' | 'granted' | 'magical';\r\n  power: number; // 0-10\r\n  limitations: string[];\r\n  cost: string;\r\n  cooldown?: string;",
              "properties": {
                "abilityId": {
                  "name": "abilityId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'innate' | 'learned' | 'granted' | 'magical'",
                  "optional": false
                },
                "power": {
                  "name": "power",
                  "type": "number",
                  "optional": false
                },
                "limitations": {
                  "name": "limitations",
                  "type": "string[]",
                  "optional": false
                },
                "cost": {
                  "name": "cost",
                  "type": "string",
                  "optional": false
                },
                "cooldown": {
                  "name": "cooldown",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 328
            }
          },
          {
            "name": "KnowledgeRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "KnowledgeRecord",
              "body": "knowledgeId: string;\r\n  domain: string;\r\n  description: string;\r\n  depth: number; // 0-10\r\n  breadth: number; // 0-10\r\n  source: string;\r\n  acquiredDate: string;\r\n  relevance: number; // 0-10",
              "properties": {
                "knowledgeId": {
                  "name": "knowledgeId",
                  "type": "string",
                  "optional": false
                },
                "domain": {
                  "name": "domain",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "depth": {
                  "name": "depth",
                  "type": "number",
                  "optional": false
                },
                "breadth": {
                  "name": "breadth",
                  "type": "number",
                  "optional": false
                },
                "source": {
                  "name": "source",
                  "type": "string",
                  "optional": false
                },
                "acquiredDate": {
                  "name": "acquiredDate",
                  "type": "string",
                  "optional": false
                },
                "relevance": {
                  "name": "relevance",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 342
            }
          },
          {
            "name": "PossessionRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "PossessionRecord",
              "body": "itemId: string;\r\n  name: string;\r\n  description: string;\r\n  value: number;\r\n  significance: number; // 0-10\r\n  condition: string;\r\n  location: string;\r\n  acquiredDate: string;",
              "properties": {
                "itemId": {
                  "name": "itemId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "value": {
                  "name": "value",
                  "type": "number",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": false
                },
                "condition": {
                  "name": "condition",
                  "type": "string",
                  "optional": false
                },
                "location": {
                  "name": "location",
                  "type": "string",
                  "optional": false
                },
                "acquiredDate": {
                  "name": "acquiredDate",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 356
            }
          },
          {
            "name": "ResourceRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "ResourceRecord",
              "body": "resourceId: string;\r\n  type: 'financial' | 'social' | 'informational' | 'material' | 'time';\r\n  name: string;\r\n  amount: number;\r\n  unit: string;\r\n  availability: number; // 0-10\r\n  renewability: 'renewable' | 'finite' | 'unknown';",
              "properties": {
                "resourceId": {
                  "name": "resourceId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'financial' | 'social' | 'informational' | 'material' | 'time'",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "amount": {
                  "name": "amount",
                  "type": "number",
                  "optional": false
                },
                "unit": {
                  "name": "unit",
                  "type": "string",
                  "optional": false
                },
                "availability": {
                  "name": "availability",
                  "type": "number",
                  "optional": false
                },
                "renewability": {
                  "name": "renewability",
                  "type": "'renewable' | 'finite' | 'unknown'",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 370
            }
          },
          {
            "name": "ObligationRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "ObligationRecord",
              "body": "obligationId: string;\r\n  type: 'legal' | 'moral' | 'social' | 'personal' | 'professional';\r\n  description: string;\r\n  priority: number; // 0-10\r\n  deadline?: string;\r\n  consequences: string[];\r\n  progress: number; // 0-10 (completion)",
              "properties": {
                "obligationId": {
                  "name": "obligationId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'legal' | 'moral' | 'social' | 'personal' | 'professional'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                },
                "deadline": {
                  "name": "deadline",
                  "type": "string",
                  "optional": true
                },
                "consequences": {
                  "name": "consequences",
                  "type": "string[]",
                  "optional": false
                },
                "progress": {
                  "name": "progress",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 383
            }
          },
          {
            "name": "GoalRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "GoalRecord",
              "body": "goalId: string;\r\n  title: string;\r\n  description: string;\r\n  type: 'short_term' | 'medium_term' | 'long_term' | 'life_goal';\r\n  priority: number; // 0-10\r\n  progress: number; // 0-10\r\n  deadline?: string;\r\n  obstacles: string[];\r\n  resources: string[];\r\n  dependencies: string[];",
              "properties": {
                "goalId": {
                  "name": "goalId",
                  "type": "string",
                  "optional": false
                },
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'short_term' | 'medium_term' | 'long_term' | 'life_goal'",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                },
                "progress": {
                  "name": "progress",
                  "type": "number",
                  "optional": false
                },
                "deadline": {
                  "name": "deadline",
                  "type": "string",
                  "optional": true
                },
                "obstacles": {
                  "name": "obstacles",
                  "type": "string[]",
                  "optional": false
                },
                "resources": {
                  "name": "resources",
                  "type": "string[]",
                  "optional": false
                },
                "dependencies": {
                  "name": "dependencies",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 396
            }
          },
          {
            "name": "MotivationRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "MotivationRecord",
              "body": "motivationId: string;\r\n  type: 'survival' | 'security' | 'belonging' | 'esteem' | 'self_actualization';\r\n  description: string;\r\n  intensity: number; // 0-10\r\n  source: string;\r\n  satisfactionLevel: number; // 0-10\r\n  related: string[];",
              "properties": {
                "motivationId": {
                  "name": "motivationId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'survival' | 'security' | 'belonging' | 'esteem' | 'self_actualization'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "intensity": {
                  "name": "intensity",
                  "type": "number",
                  "optional": false
                },
                "source": {
                  "name": "source",
                  "type": "string",
                  "optional": false
                },
                "satisfactionLevel": {
                  "name": "satisfactionLevel",
                  "type": "number",
                  "optional": false
                },
                "related": {
                  "name": "related",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 412
            }
          },
          {
            "name": "ConflictRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "ConflictRecord",
              "body": "conflictId: string;\r\n  type: 'internal' | 'interpersonal' | 'societal' | 'ideological';\r\n  description: string;\r\n  severity: number; // 0-10\r\n  parties: string[];\r\n  stakes: string[];\r\n  possibleResolutions: string[];\r\n  progress: number; // 0-10 toward resolution",
              "properties": {
                "conflictId": {
                  "name": "conflictId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'internal' | 'interpersonal' | 'societal' | 'ideological'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "severity": {
                  "name": "severity",
                  "type": "number",
                  "optional": false
                },
                "parties": {
                  "name": "parties",
                  "type": "string[]",
                  "optional": false
                },
                "stakes": {
                  "name": "stakes",
                  "type": "string[]",
                  "optional": false
                },
                "possibleResolutions": {
                  "name": "possibleResolutions",
                  "type": "string[]",
                  "optional": false
                },
                "progress": {
                  "name": "progress",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 425
            }
          },
          {
            "name": "CharacterDevelopmentRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "CharacterDevelopmentRecord",
              "body": "recordId: string;\r\n  chapterNumber: number;\r\n  developmentType: 'personality' | 'skill' | 'relationship' | 'goal' | 'backstory';\r\n  description: string;\r\n  significance: number; // 0-10\r\n  impact: string[];\r\n  timestamp: string;\r\n  relatedEvents: string[];",
              "properties": {
                "recordId": {
                  "name": "recordId",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "developmentType": {
                  "name": "developmentType",
                  "type": "'personality' | 'skill' | 'relationship' | 'goal' | 'backstory'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "string[]",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "relatedEvents": {
                  "name": "relatedEvents",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 439
            }
          },
          {
            "name": "CharacterAppearanceRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "CharacterAppearanceRecord",
              "body": "recordId: string;\r\n  chapterNumber: number;\r\n  role: 'protagonist' | 'deuteragonist' | 'supporting' | 'minor' | 'mentioned';\r\n  significance: number; // 0-10\r\n  screenTime: number; // estimated minutes/pages\r\n  interactions: string[];\r\n  impact: string;\r\n  timestamp: string;",
              "properties": {
                "recordId": {
                  "name": "recordId",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "role": {
                  "name": "role",
                  "type": "'protagonist' | 'deuteragonist' | 'supporting' | 'minor' | 'mentioned'",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": false
                },
                "screenTime": {
                  "name": "screenTime",
                  "type": "number",
                  "optional": false
                },
                "interactions": {
                  "name": "interactions",
                  "type": "string[]",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "string",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 453
            }
          },
          {
            "name": "CharacterChangeRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "CharacterChangeRecord",
              "body": "recordId: string;\r\n  chapterNumber: number;\r\n  changeType: 'state' | 'personality' | 'relationship' | 'backstory' | 'metadata';\r\n  fieldChanged: string;\r\n  previousValue: any;\r\n  newValue: any;\r\n  reason: string;\r\n  source: string;\r\n  timestamp: string;\r\n  significance: number; // 0-10",
              "properties": {
                "recordId": {
                  "name": "recordId",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "changeType": {
                  "name": "changeType",
                  "type": "'state' | 'personality' | 'relationship' | 'backstory' | 'metadata'",
                  "optional": false
                },
                "fieldChanged": {
                  "name": "fieldChanged",
                  "type": "string",
                  "optional": false
                },
                "previousValue": {
                  "name": "previousValue",
                  "type": "any",
                  "optional": false
                },
                "newValue": {
                  "name": "newValue",
                  "type": "any",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                },
                "source": {
                  "name": "source",
                  "type": "string",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 467
            }
          },
          {
            "name": "FormattedCharacterData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "FormattedCharacterData",
              "body": "shortDescription: string;\r\n  mediumDescription: string;\r\n  longDescription: string;\r\n  personalityProfile: string;\r\n  relationshipSummary: string;\r\n  backgroundSummary: string;\r\n  currentStatusSummary: string;\r\n  developmentArc: string;\r\n  keyQuotes: string[];\r\n  characterTags: string[];\r\n  lastFormatted: string;",
              "properties": {
                "shortDescription": {
                  "name": "shortDescription",
                  "type": "string",
                  "optional": false
                },
                "mediumDescription": {
                  "name": "mediumDescription",
                  "type": "string",
                  "optional": false
                },
                "longDescription": {
                  "name": "longDescription",
                  "type": "string",
                  "optional": false
                },
                "personalityProfile": {
                  "name": "personalityProfile",
                  "type": "string",
                  "optional": false
                },
                "relationshipSummary": {
                  "name": "relationshipSummary",
                  "type": "string",
                  "optional": false
                },
                "backgroundSummary": {
                  "name": "backgroundSummary",
                  "type": "string",
                  "optional": false
                },
                "currentStatusSummary": {
                  "name": "currentStatusSummary",
                  "type": "string",
                  "optional": false
                },
                "developmentArc": {
                  "name": "developmentArc",
                  "type": "string",
                  "optional": false
                },
                "keyQuotes": {
                  "name": "keyQuotes",
                  "type": "string[]",
                  "optional": false
                },
                "characterTags": {
                  "name": "characterTags",
                  "type": "string[]",
                  "optional": false
                },
                "lastFormatted": {
                  "name": "lastFormatted",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 499
            }
          },
          {
            "name": "InjuryRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "InjuryRecord",
              "body": "injuryId: string;\r\n  type: string;\r\n  severity: number; // 0-10\r\n  healingRate: number; // 0-10\r\n  description: string;\r\n  acquiredDate: string;\r\n  expectedHealing?: string;",
              "properties": {
                "injuryId": {
                  "name": "injuryId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "severity": {
                  "name": "severity",
                  "type": "number",
                  "optional": false
                },
                "healingRate": {
                  "name": "healingRate",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "acquiredDate": {
                  "name": "acquiredDate",
                  "type": "string",
                  "optional": false
                },
                "expectedHealing": {
                  "name": "expectedHealing",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 531
            }
          },
          {
            "name": "DisabilityRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "DisabilityRecord",
              "body": "disabilityId: string;\r\n  type: string;\r\n  severity: number; // 0-10\r\n  description: string;\r\n  adaptations: string[];\r\n  impact: string[];",
              "properties": {
                "disabilityId": {
                  "name": "disabilityId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "severity": {
                  "name": "severity",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "adaptations": {
                  "name": "adaptations",
                  "type": "string[]",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 541
            }
          },
          {
            "name": "AppearanceRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "AppearanceRecord",
              "body": "height: string;\r\n  build: string;\r\n  hairColor: string;\r\n  eyeColor: string;\r\n  distinctiveFeatures: string[];\r\n  style: string;\r\n  mannerisms: string[];",
              "properties": {
                "height": {
                  "name": "height",
                  "type": "string",
                  "optional": false
                },
                "build": {
                  "name": "build",
                  "type": "string",
                  "optional": false
                },
                "hairColor": {
                  "name": "hairColor",
                  "type": "string",
                  "optional": false
                },
                "eyeColor": {
                  "name": "eyeColor",
                  "type": "string",
                  "optional": false
                },
                "distinctiveFeatures": {
                  "name": "distinctiveFeatures",
                  "type": "string[]",
                  "optional": false
                },
                "style": {
                  "name": "style",
                  "type": "string",
                  "optional": false
                },
                "mannerisms": {
                  "name": "mannerisms",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 550
            }
          },
          {
            "name": "MentalIssueRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "MentalIssueRecord",
              "body": "issueId: string;\r\n  type: string;\r\n  severity: number; // 0-10\r\n  description: string;\r\n  triggers: string[];\r\n  coping: string[];\r\n  professional: string[];",
              "properties": {
                "issueId": {
                  "name": "issueId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "severity": {
                  "name": "severity",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "triggers": {
                  "name": "triggers",
                  "type": "string[]",
                  "optional": false
                },
                "coping": {
                  "name": "coping",
                  "type": "string[]",
                  "optional": false
                },
                "professional": {
                  "name": "professional",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 560
            }
          }
        ],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": []
      },
      "lib\\memory\\long-term\\system-types.ts": {
        "filePath": "lib\\memory\\long-term\\system-types.ts",
        "fileSize": 30262,
        "system": "memory",
        "module": "memory/long-term",
        "interfaces": {
          "PromptGenerationPattern": {
            "name": "PromptGenerationPattern",
            "body": "patternId: string;\r\n    patternName: string;\r\n    category: 'context' | 'instruction' | 'template' | 'variable' | 'format';\r\n    description: string;\r\n\r\n    // パターン定義\r\n    pattern: string;\r\n    variables: PromptVariable[];\r\n    conditions: PromptCondition[];\r\n\r\n    // 効果測定\r\n    effectiveness: EffectivenessMetrics;\r\n    usageStatistics: UsageStatistics;\r\n\r\n    // 適用条件\r\n    applicableGenres: string[];\r\n    applicableScenarios: string[];\r\n    chapterTypes: string[];\r\n\r\n    // 学習データ\r\n    successCases: SuccessCase[];\r\n    failureCases: FailureCase[];\r\n    optimizationHistory: OptimizationRecord[];\r\n\r\n    // メタデータ\r\n    createdAt: string;\r\n    lastUsed: string;\r\n    lastOptimized: string;\r\n    version: string;\r\n    tags: string[];",
            "properties": {
              "patternId": {
                "name": "patternId",
                "type": "string",
                "optional": false
              },
              "patternName": {
                "name": "patternName",
                "type": "string",
                "optional": false
              },
              "category": {
                "name": "category",
                "type": "'context' | 'instruction' | 'template' | 'variable' | 'format'",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "pattern": {
                "name": "pattern",
                "type": "string",
                "optional": false
              },
              "variables": {
                "name": "variables",
                "type": "PromptVariable[]",
                "optional": false
              },
              "conditions": {
                "name": "conditions",
                "type": "PromptCondition[]",
                "optional": false
              },
              "effectiveness": {
                "name": "effectiveness",
                "type": "EffectivenessMetrics",
                "optional": false
              },
              "usageStatistics": {
                "name": "usageStatistics",
                "type": "UsageStatistics",
                "optional": false
              },
              "applicableGenres": {
                "name": "applicableGenres",
                "type": "string[]",
                "optional": false
              },
              "applicableScenarios": {
                "name": "applicableScenarios",
                "type": "string[]",
                "optional": false
              },
              "chapterTypes": {
                "name": "chapterTypes",
                "type": "string[]",
                "optional": false
              },
              "successCases": {
                "name": "successCases",
                "type": "SuccessCase[]",
                "optional": false
              },
              "failureCases": {
                "name": "failureCases",
                "type": "FailureCase[]",
                "optional": false
              },
              "optimizationHistory": {
                "name": "optimizationHistory",
                "type": "OptimizationRecord[]",
                "optional": false
              },
              "createdAt": {
                "name": "createdAt",
                "type": "string",
                "optional": false
              },
              "lastUsed": {
                "name": "lastUsed",
                "type": "string",
                "optional": false
              },
              "lastOptimized": {
                "name": "lastOptimized",
                "type": "string",
                "optional": false
              },
              "version": {
                "name": "version",
                "type": "string",
                "optional": false
              },
              "tags": {
                "name": "tags",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 9
          },
          "PromptVariable": {
            "name": "PromptVariable",
            "body": "variableId: string;\r\n    name: string;\r\n    type: 'string' | 'number' | 'boolean' | 'array' | 'object';\r\n    description: string;\r\n    defaultValue?: any;\r\n    constraints?: VariableConstraint[];\r\n    examples: any[];",
            "properties": {
              "variableId": {
                "name": "variableId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'string' | 'number' | 'boolean' | 'array' | 'object'",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "defaultValue": {
                "name": "defaultValue",
                "type": "any",
                "optional": true
              },
              "constraints": {
                "name": "constraints",
                "type": "VariableConstraint[]",
                "optional": true
              },
              "examples": {
                "name": "examples",
                "type": "any[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 45
          },
          "PromptCondition": {
            "name": "PromptCondition",
            "body": "conditionId: string;\r\n    type: 'genre' | 'chapter' | 'character' | 'context' | 'state';\r\n    condition: string;\r\n    weight: number;\r\n    required: boolean;",
            "properties": {
              "conditionId": {
                "name": "conditionId",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'genre' | 'chapter' | 'character' | 'context' | 'state'",
                "optional": false
              },
              "condition": {
                "name": "condition",
                "type": "string",
                "optional": false
              },
              "weight": {
                "name": "weight",
                "type": "number",
                "optional": false
              },
              "required": {
                "name": "required",
                "type": "boolean",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 58
          },
          "VariableConstraint": {
            "name": "VariableConstraint",
            "body": "type: 'range' | 'enum' | 'pattern' | 'length';\r\n    value: any;\r\n    message: string;",
            "properties": {
              "type": {
                "name": "type",
                "type": "'range' | 'enum' | 'pattern' | 'length'",
                "optional": false
              },
              "value": {
                "name": "value",
                "type": "any",
                "optional": false
              },
              "message": {
                "name": "message",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 69
          },
          "EffectivenessMetrics": {
            "name": "EffectivenessMetrics",
            "body": "qualityScore: number; // 0-10\r\n    consistency: number; // 0-10\r\n    creativity: number; // 0-10\r\n    coherence: number; // 0-10\r\n    readerEngagement: number; // 0-10\r\n    processingTime: number; // milliseconds\r\n    errorRate: number; // 0-1\r\n    revisionCount: number;\r\n    lastMeasured: string;",
            "properties": {
              "qualityScore": {
                "name": "qualityScore",
                "type": "number",
                "optional": false
              },
              "consistency": {
                "name": "consistency",
                "type": "number",
                "optional": false
              },
              "creativity": {
                "name": "creativity",
                "type": "number",
                "optional": false
              },
              "coherence": {
                "name": "coherence",
                "type": "number",
                "optional": false
              },
              "readerEngagement": {
                "name": "readerEngagement",
                "type": "number",
                "optional": false
              },
              "processingTime": {
                "name": "processingTime",
                "type": "number",
                "optional": false
              },
              "errorRate": {
                "name": "errorRate",
                "type": "number",
                "optional": false
              },
              "revisionCount": {
                "name": "revisionCount",
                "type": "number",
                "optional": false
              },
              "lastMeasured": {
                "name": "lastMeasured",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 78
          },
          "UsageStatistics": {
            "name": "UsageStatistics",
            "body": "totalUsage: number;\r\n    successfulUsage: number;\r\n    failedUsage: number;\r\n    averageQuality: number;\r\n    peakUsagePeriod: string;\r\n    trendingScore: number;\r\n    userSatisfaction: number;\r\n    performanceMetrics: PerformanceMetrics;",
            "properties": {
              "totalUsage": {
                "name": "totalUsage",
                "type": "number",
                "optional": false
              },
              "successfulUsage": {
                "name": "successfulUsage",
                "type": "number",
                "optional": false
              },
              "failedUsage": {
                "name": "failedUsage",
                "type": "number",
                "optional": false
              },
              "averageQuality": {
                "name": "averageQuality",
                "type": "number",
                "optional": false
              },
              "peakUsagePeriod": {
                "name": "peakUsagePeriod",
                "type": "string",
                "optional": false
              },
              "trendingScore": {
                "name": "trendingScore",
                "type": "number",
                "optional": false
              },
              "userSatisfaction": {
                "name": "userSatisfaction",
                "type": "number",
                "optional": false
              },
              "performanceMetrics": {
                "name": "performanceMetrics",
                "type": "PerformanceMetrics",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 93
          },
          "PerformanceMetrics": {
            "name": "PerformanceMetrics",
            "body": "averageResponseTime: number;\r\n    memoryUsage: number;\r\n    cpuUsage: number;\r\n    apiCalls: number;\r\n    cacheHitRate: number;\r\n    lastMeasured: string;",
            "properties": {
              "averageResponseTime": {
                "name": "averageResponseTime",
                "type": "number",
                "optional": false
              },
              "memoryUsage": {
                "name": "memoryUsage",
                "type": "number",
                "optional": false
              },
              "cpuUsage": {
                "name": "cpuUsage",
                "type": "number",
                "optional": false
              },
              "apiCalls": {
                "name": "apiCalls",
                "type": "number",
                "optional": false
              },
              "cacheHitRate": {
                "name": "cacheHitRate",
                "type": "number",
                "optional": false
              },
              "lastMeasured": {
                "name": "lastMeasured",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 107
          },
          "SuccessCase": {
            "name": "SuccessCase",
            "body": "caseId: string;\r\n    scenario: string;\r\n    inputParameters: Record<string, any>;\r\n    outputQuality: number;\r\n    userFeedback: string;\r\n    chapterNumber: number;\r\n    genre: string;\r\n    timestamp: string;\r\n    keyFactors: string[];",
            "properties": {
              "caseId": {
                "name": "caseId",
                "type": "string",
                "optional": false
              },
              "scenario": {
                "name": "scenario",
                "type": "string",
                "optional": false
              },
              "inputParameters": {
                "name": "inputParameters",
                "type": "Record<string",
                "optional": false
              },
              "outputQuality": {
                "name": "outputQuality",
                "type": "number",
                "optional": false
              },
              "userFeedback": {
                "name": "userFeedback",
                "type": "string",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "genre": {
                "name": "genre",
                "type": "string",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              },
              "keyFactors": {
                "name": "keyFactors",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 119
          },
          "FailureCase": {
            "name": "FailureCase",
            "body": "caseId: string;\r\n    scenario: string;\r\n    inputParameters: Record<string, any>;\r\n    errorType: string;\r\n    errorMessage: string;\r\n    rootCause: string;\r\n    chapterNumber: number;\r\n    genre: string;\r\n    timestamp: string;\r\n    resolution?: string;",
            "properties": {
              "caseId": {
                "name": "caseId",
                "type": "string",
                "optional": false
              },
              "scenario": {
                "name": "scenario",
                "type": "string",
                "optional": false
              },
              "inputParameters": {
                "name": "inputParameters",
                "type": "Record<string",
                "optional": false
              },
              "errorType": {
                "name": "errorType",
                "type": "string",
                "optional": false
              },
              "errorMessage": {
                "name": "errorMessage",
                "type": "string",
                "optional": false
              },
              "rootCause": {
                "name": "rootCause",
                "type": "string",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "genre": {
                "name": "genre",
                "type": "string",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              },
              "resolution": {
                "name": "resolution",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 134
          },
          "OptimizationRecord": {
            "name": "OptimizationRecord",
            "body": "optimizationId: string;\r\n    optimizationType: 'parameter' | 'structure' | 'logic' | 'performance';\r\n    before: any;\r\n    after: any;\r\n    reason: string;\r\n    expectedImprovement: string;\r\n    actualImprovement?: EffectivenessMetrics;\r\n    timestamp: string;\r\n    optimizedBy: string;",
            "properties": {
              "optimizationId": {
                "name": "optimizationId",
                "type": "string",
                "optional": false
              },
              "optimizationType": {
                "name": "optimizationType",
                "type": "'parameter' | 'structure' | 'logic' | 'performance'",
                "optional": false
              },
              "before": {
                "name": "before",
                "type": "any",
                "optional": false
              },
              "after": {
                "name": "after",
                "type": "any",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": false
              },
              "expectedImprovement": {
                "name": "expectedImprovement",
                "type": "string",
                "optional": false
              },
              "actualImprovement": {
                "name": "actualImprovement",
                "type": "EffectivenessMetrics",
                "optional": true
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              },
              "optimizedBy": {
                "name": "optimizedBy",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 150
          },
          "EffectiveTemplatePattern": {
            "name": "EffectiveTemplatePattern",
            "body": "templateId: string;\r\n    templateName: string;\r\n    category: string;\r\n\r\n    // テンプレート定義\r\n    structure: TemplateStructure;\r\n    sections: TemplateSection[];\r\n    placeholders: TemplatePlaceholder[];\r\n\r\n    // 効果データ\r\n    effectiveness: EffectivenessMetrics;\r\n    bestPractices: BestPractice[];\r\n    commonMistakes: CommonMistake[];\r\n\r\n    // 適用データ\r\n    applicableContexts: ApplicableContext[];\r\n    variations: TemplateVariation[];\r\n\r\n    // 学習データ\r\n    evolutionHistory: TemplateEvolution[];\r\n    feedbackData: FeedbackData[];\r\n\r\n    // メタデータ\r\n    createdAt: string;\r\n    lastUpdated: string;\r\n    maturityLevel: 'experimental' | 'tested' | 'proven' | 'deprecated';\r\n    maintainer: string;",
            "properties": {
              "templateId": {
                "name": "templateId",
                "type": "string",
                "optional": false
              },
              "templateName": {
                "name": "templateName",
                "type": "string",
                "optional": false
              },
              "category": {
                "name": "category",
                "type": "string",
                "optional": false
              },
              "structure": {
                "name": "structure",
                "type": "TemplateStructure",
                "optional": false
              },
              "sections": {
                "name": "sections",
                "type": "TemplateSection[]",
                "optional": false
              },
              "placeholders": {
                "name": "placeholders",
                "type": "TemplatePlaceholder[]",
                "optional": false
              },
              "effectiveness": {
                "name": "effectiveness",
                "type": "EffectivenessMetrics",
                "optional": false
              },
              "bestPractices": {
                "name": "bestPractices",
                "type": "BestPractice[]",
                "optional": false
              },
              "commonMistakes": {
                "name": "commonMistakes",
                "type": "CommonMistake[]",
                "optional": false
              },
              "applicableContexts": {
                "name": "applicableContexts",
                "type": "ApplicableContext[]",
                "optional": false
              },
              "variations": {
                "name": "variations",
                "type": "TemplateVariation[]",
                "optional": false
              },
              "evolutionHistory": {
                "name": "evolutionHistory",
                "type": "TemplateEvolution[]",
                "optional": false
              },
              "feedbackData": {
                "name": "feedbackData",
                "type": "FeedbackData[]",
                "optional": false
              },
              "createdAt": {
                "name": "createdAt",
                "type": "string",
                "optional": false
              },
              "lastUpdated": {
                "name": "lastUpdated",
                "type": "string",
                "optional": false
              },
              "maturityLevel": {
                "name": "maturityLevel",
                "type": "'experimental' | 'tested' | 'proven' | 'deprecated'",
                "optional": false
              },
              "maintainer": {
                "name": "maintainer",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 165
          },
          "TemplateStructure": {
            "name": "TemplateStructure",
            "body": "format: 'markdown' | 'json' | 'yaml' | 'custom';\r\n    sections: string[];\r\n    requiredFields: string[];\r\n    optionalFields: string[];\r\n    validationRules: ValidationRule[];",
            "properties": {
              "format": {
                "name": "format",
                "type": "'markdown' | 'json' | 'yaml' | 'custom'",
                "optional": false
              },
              "sections": {
                "name": "sections",
                "type": "string[]",
                "optional": false
              },
              "requiredFields": {
                "name": "requiredFields",
                "type": "string[]",
                "optional": false
              },
              "optionalFields": {
                "name": "optionalFields",
                "type": "string[]",
                "optional": false
              },
              "validationRules": {
                "name": "validationRules",
                "type": "ValidationRule[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 198
          },
          "TemplateSection": {
            "name": "TemplateSection",
            "body": "sectionId: string;\r\n    name: string;\r\n    type: 'header' | 'body' | 'footer' | 'variable' | 'conditional';\r\n    content: string;\r\n    required: boolean;\r\n    order: number;\r\n    dependencies: string[];",
            "properties": {
              "sectionId": {
                "name": "sectionId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'header' | 'body' | 'footer' | 'variable' | 'conditional'",
                "optional": false
              },
              "content": {
                "name": "content",
                "type": "string",
                "optional": false
              },
              "required": {
                "name": "required",
                "type": "boolean",
                "optional": false
              },
              "order": {
                "name": "order",
                "type": "number",
                "optional": false
              },
              "dependencies": {
                "name": "dependencies",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 209
          },
          "TemplatePlaceholder": {
            "name": "TemplatePlaceholder",
            "body": "placeholderId: string;\r\n    name: string;\r\n    type: string;\r\n    description: string;\r\n    defaultValue?: any;\r\n    transformations: PlaceholderTransformation[];",
            "properties": {
              "placeholderId": {
                "name": "placeholderId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "defaultValue": {
                "name": "defaultValue",
                "type": "any",
                "optional": true
              },
              "transformations": {
                "name": "transformations",
                "type": "PlaceholderTransformation[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 222
          },
          "PlaceholderTransformation": {
            "name": "PlaceholderTransformation",
            "body": "transformationId: string;\r\n    type: 'format' | 'filter' | 'validate' | 'enrich';\r\n    function: string;\r\n    parameters: Record<string, any>;",
            "properties": {
              "transformationId": {
                "name": "transformationId",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'format' | 'filter' | 'validate' | 'enrich'",
                "optional": false
              },
              "function": {
                "name": "function",
                "type": "string",
                "optional": false
              },
              "parameters": {
                "name": "parameters",
                "type": "Record<string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 234
          },
          "BestPractice": {
            "name": "BestPractice",
            "body": "practiceId: string;\r\n    title: string;\r\n    description: string;\r\n    category: string;\r\n    impact: number; // 0-10\r\n    evidence: Evidence[];\r\n    applicableScenarios: string[];\r\n    implementation: string;",
            "properties": {
              "practiceId": {
                "name": "practiceId",
                "type": "string",
                "optional": false
              },
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "category": {
                "name": "category",
                "type": "string",
                "optional": false
              },
              "impact": {
                "name": "impact",
                "type": "number",
                "optional": false
              },
              "evidence": {
                "name": "evidence",
                "type": "Evidence[]",
                "optional": false
              },
              "applicableScenarios": {
                "name": "applicableScenarios",
                "type": "string[]",
                "optional": false
              },
              "implementation": {
                "name": "implementation",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 244
          },
          "CommonMistake": {
            "name": "CommonMistake",
            "body": "mistakeId: string;\r\n    title: string;\r\n    description: string;\r\n    category: string;\r\n    frequency: number;\r\n    impact: number; // 0-10\r\n    prevention: string;\r\n    correction: string;\r\n    examples: MistakeExample[];",
            "properties": {
              "mistakeId": {
                "name": "mistakeId",
                "type": "string",
                "optional": false
              },
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "category": {
                "name": "category",
                "type": "string",
                "optional": false
              },
              "frequency": {
                "name": "frequency",
                "type": "number",
                "optional": false
              },
              "impact": {
                "name": "impact",
                "type": "number",
                "optional": false
              },
              "prevention": {
                "name": "prevention",
                "type": "string",
                "optional": false
              },
              "correction": {
                "name": "correction",
                "type": "string",
                "optional": false
              },
              "examples": {
                "name": "examples",
                "type": "MistakeExample[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 258
          },
          "MistakeExample": {
            "name": "MistakeExample",
            "body": "exampleId: string;\r\n    scenario: string;\r\n    incorrectApproach: string;\r\n    correctApproach: string;\r\n    explanation: string;",
            "properties": {
              "exampleId": {
                "name": "exampleId",
                "type": "string",
                "optional": false
              },
              "scenario": {
                "name": "scenario",
                "type": "string",
                "optional": false
              },
              "incorrectApproach": {
                "name": "incorrectApproach",
                "type": "string",
                "optional": false
              },
              "correctApproach": {
                "name": "correctApproach",
                "type": "string",
                "optional": false
              },
              "explanation": {
                "name": "explanation",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 273
          },
          "ApplicableContext": {
            "name": "ApplicableContext",
            "body": "contextId: string;\r\n    name: string;\r\n    description: string;\r\n    conditions: Record<string, any>;\r\n    priority: number;\r\n    effectiveness: number;",
            "properties": {
              "contextId": {
                "name": "contextId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "conditions": {
                "name": "conditions",
                "type": "Record<string",
                "optional": false
              },
              "priority": {
                "name": "priority",
                "type": "number",
                "optional": false
              },
              "effectiveness": {
                "name": "effectiveness",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 284
          },
          "TemplateVariation": {
            "name": "TemplateVariation",
            "body": "variationId: string;\r\n    name: string;\r\n    baseTemplateId: string;\r\n    differences: TemplateDifference[];\r\n    useCase: string;\r\n    effectiveness: EffectivenessMetrics;",
            "properties": {
              "variationId": {
                "name": "variationId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "baseTemplateId": {
                "name": "baseTemplateId",
                "type": "string",
                "optional": false
              },
              "differences": {
                "name": "differences",
                "type": "TemplateDifference[]",
                "optional": false
              },
              "useCase": {
                "name": "useCase",
                "type": "string",
                "optional": false
              },
              "effectiveness": {
                "name": "effectiveness",
                "type": "EffectivenessMetrics",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 296
          },
          "TemplateDifference": {
            "name": "TemplateDifference",
            "body": "differenceId: string;\r\n    type: 'addition' | 'removal' | 'modification';\r\n    field: string;\r\n    oldValue?: any;\r\n    newValue?: any;\r\n    reason: string;",
            "properties": {
              "differenceId": {
                "name": "differenceId",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'addition' | 'removal' | 'modification'",
                "optional": false
              },
              "field": {
                "name": "field",
                "type": "string",
                "optional": false
              },
              "oldValue": {
                "name": "oldValue",
                "type": "any",
                "optional": true
              },
              "newValue": {
                "name": "newValue",
                "type": "any",
                "optional": true
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 308
          },
          "TemplateEvolution": {
            "name": "TemplateEvolution",
            "body": "evolutionId: string;\r\n    version: string;\r\n    changes: TemplateChange[];\r\n    reason: string;\r\n    impact: EffectivenessMetrics;\r\n    timestamp: string;",
            "properties": {
              "evolutionId": {
                "name": "evolutionId",
                "type": "string",
                "optional": false
              },
              "version": {
                "name": "version",
                "type": "string",
                "optional": false
              },
              "changes": {
                "name": "changes",
                "type": "TemplateChange[]",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": false
              },
              "impact": {
                "name": "impact",
                "type": "EffectivenessMetrics",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 320
          },
          "TemplateChange": {
            "name": "TemplateChange",
            "body": "changeId: string;\r\n    type: 'structure' | 'content' | 'validation' | 'optimization';\r\n    description: string;\r\n    before: any;\r\n    after: any;\r\n    justification: string;",
            "properties": {
              "changeId": {
                "name": "changeId",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'structure' | 'content' | 'validation' | 'optimization'",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "before": {
                "name": "before",
                "type": "any",
                "optional": false
              },
              "after": {
                "name": "after",
                "type": "any",
                "optional": false
              },
              "justification": {
                "name": "justification",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 332
          },
          "FeedbackData": {
            "name": "FeedbackData",
            "body": "feedbackId: string;\r\n    source: 'user' | 'system' | 'ai' | 'automated';\r\n    type: 'quality' | 'usability' | 'performance' | 'bug' | 'suggestion';\r\n    rating: number; // 0-10\r\n    comment: string;\r\n    context: Record<string, any>;\r\n    timestamp: string;\r\n    actionTaken?: string;",
            "properties": {
              "feedbackId": {
                "name": "feedbackId",
                "type": "string",
                "optional": false
              },
              "source": {
                "name": "source",
                "type": "'user' | 'system' | 'ai' | 'automated'",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'quality' | 'usability' | 'performance' | 'bug' | 'suggestion'",
                "optional": false
              },
              "rating": {
                "name": "rating",
                "type": "number",
                "optional": false
              },
              "comment": {
                "name": "comment",
                "type": "string",
                "optional": false
              },
              "context": {
                "name": "context",
                "type": "Record<string",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              },
              "actionTaken": {
                "name": "actionTaken",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 344
          },
          "ValidationRule": {
            "name": "ValidationRule",
            "body": "ruleId: string;\r\n    name: string;\r\n    type: 'required' | 'format' | 'range' | 'custom';\r\n    condition: string;\r\n    errorMessage: string;\r\n    severity: 'error' | 'warning' | 'info';",
            "properties": {
              "ruleId": {
                "name": "ruleId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'required' | 'format' | 'range' | 'custom'",
                "optional": false
              },
              "condition": {
                "name": "condition",
                "type": "string",
                "optional": false
              },
              "errorMessage": {
                "name": "errorMessage",
                "type": "string",
                "optional": false
              },
              "severity": {
                "name": "severity",
                "type": "'error' | 'warning' | 'info'",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 358
          },
          "Evidence": {
            "name": "Evidence",
            "body": "evidenceId: string;\r\n    type: 'metric' | 'case_study' | 'user_feedback' | 'benchmark';\r\n    description: string;\r\n    data: any;\r\n    source: string;\r\n    reliability: number; // 0-10\r\n    timestamp: string;",
            "properties": {
              "evidenceId": {
                "name": "evidenceId",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'metric' | 'case_study' | 'user_feedback' | 'benchmark'",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "data": {
                "name": "data",
                "type": "any",
                "optional": false
              },
              "source": {
                "name": "source",
                "type": "string",
                "optional": false
              },
              "reliability": {
                "name": "reliability",
                "type": "number",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 370
          },
          "AnalysisPattern": {
            "name": "AnalysisPattern",
            "body": "patternId: string;\r\n    patternName: string;\r\n    category: 'emotional' | 'narrative' | 'character' | 'structure' | 'quality';\r\n\r\n    // パターン定義\r\n    analysisType: string;\r\n    methodology: AnalysisMethodology;\r\n    parameters: AnalysisParameter[];\r\n\r\n    // 精度データ\r\n    accuracy: AccuracyMetrics;\r\n    reliability: ReliabilityMetrics;\r\n\r\n    // 適用データ\r\n    applicableGenres: string[];\r\n    inputRequirements: InputRequirement[];\r\n    outputFormat: OutputFormat;\r\n\r\n    // 学習データ\r\n    trainingData: TrainingData[];\r\n    validationResults: ValidationResult[];\r\n\r\n    // 改善履歴\r\n    improvementHistory: ImprovementRecord[];\r\n\r\n    // メタデータ\r\n    createdAt: string;\r\n    lastTrained: string;\r\n    version: string;\r\n    status: 'active' | 'testing' | 'deprecated';",
            "properties": {
              "patternId": {
                "name": "patternId",
                "type": "string",
                "optional": false
              },
              "patternName": {
                "name": "patternName",
                "type": "string",
                "optional": false
              },
              "category": {
                "name": "category",
                "type": "'emotional' | 'narrative' | 'character' | 'structure' | 'quality'",
                "optional": false
              },
              "analysisType": {
                "name": "analysisType",
                "type": "string",
                "optional": false
              },
              "methodology": {
                "name": "methodology",
                "type": "AnalysisMethodology",
                "optional": false
              },
              "parameters": {
                "name": "parameters",
                "type": "AnalysisParameter[]",
                "optional": false
              },
              "accuracy": {
                "name": "accuracy",
                "type": "AccuracyMetrics",
                "optional": false
              },
              "reliability": {
                "name": "reliability",
                "type": "ReliabilityMetrics",
                "optional": false
              },
              "applicableGenres": {
                "name": "applicableGenres",
                "type": "string[]",
                "optional": false
              },
              "inputRequirements": {
                "name": "inputRequirements",
                "type": "InputRequirement[]",
                "optional": false
              },
              "outputFormat": {
                "name": "outputFormat",
                "type": "OutputFormat",
                "optional": false
              },
              "trainingData": {
                "name": "trainingData",
                "type": "TrainingData[]",
                "optional": false
              },
              "validationResults": {
                "name": "validationResults",
                "type": "ValidationResult[]",
                "optional": false
              },
              "improvementHistory": {
                "name": "improvementHistory",
                "type": "ImprovementRecord[]",
                "optional": false
              },
              "createdAt": {
                "name": "createdAt",
                "type": "string",
                "optional": false
              },
              "lastTrained": {
                "name": "lastTrained",
                "type": "string",
                "optional": false
              },
              "version": {
                "name": "version",
                "type": "string",
                "optional": false
              },
              "status": {
                "name": "status",
                "type": "'active' | 'testing' | 'deprecated'",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 383
          },
          "AnalysisMethodology": {
            "name": "AnalysisMethodology",
            "body": "approach: 'rule_based' | 'ml_based' | 'hybrid' | 'ai_assisted';\r\n    algorithm: string;\r\n    steps: AnalysisStep[];\r\n    dependencies: string[];\r\n    limitations: string[];",
            "properties": {
              "approach": {
                "name": "approach",
                "type": "'rule_based' | 'ml_based' | 'hybrid' | 'ai_assisted'",
                "optional": false
              },
              "algorithm": {
                "name": "algorithm",
                "type": "string",
                "optional": false
              },
              "steps": {
                "name": "steps",
                "type": "AnalysisStep[]",
                "optional": false
              },
              "dependencies": {
                "name": "dependencies",
                "type": "string[]",
                "optional": false
              },
              "limitations": {
                "name": "limitations",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 419
          },
          "AnalysisStep": {
            "name": "AnalysisStep",
            "body": "stepId: string;\r\n    name: string;\r\n    description: string;\r\n    order: number;\r\n    inputType: string;\r\n    outputType: string;\r\n    processing: ProcessingInstruction[];",
            "properties": {
              "stepId": {
                "name": "stepId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "order": {
                "name": "order",
                "type": "number",
                "optional": false
              },
              "inputType": {
                "name": "inputType",
                "type": "string",
                "optional": false
              },
              "outputType": {
                "name": "outputType",
                "type": "string",
                "optional": false
              },
              "processing": {
                "name": "processing",
                "type": "ProcessingInstruction[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 430
          },
          "ProcessingInstruction": {
            "name": "ProcessingInstruction",
            "body": "instructionId: string;\r\n    type: 'extract' | 'transform' | 'validate' | 'analyze' | 'score';\r\n    operation: string;\r\n    parameters: Record<string, any>;",
            "properties": {
              "instructionId": {
                "name": "instructionId",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'extract' | 'transform' | 'validate' | 'analyze' | 'score'",
                "optional": false
              },
              "operation": {
                "name": "operation",
                "type": "string",
                "optional": false
              },
              "parameters": {
                "name": "parameters",
                "type": "Record<string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 443
          },
          "AnalysisParameter": {
            "name": "AnalysisParameter",
            "body": "parameterId: string;\r\n    name: string;\r\n    type: string;\r\n    description: string;\r\n    defaultValue: any;\r\n    range?: any;\r\n    impact: number; // 0-10",
            "properties": {
              "parameterId": {
                "name": "parameterId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "defaultValue": {
                "name": "defaultValue",
                "type": "any",
                "optional": false
              },
              "range": {
                "name": "range",
                "type": "any",
                "optional": true
              },
              "impact": {
                "name": "impact",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 453
          },
          "AccuracyMetrics": {
            "name": "AccuracyMetrics",
            "body": "precision: number; // 0-1\r\n    recall: number; // 0-1\r\n    f1Score: number; // 0-1\r\n    accuracy: number; // 0-1\r\n    falsePositiveRate: number; // 0-1\r\n    falseNegativeRate: number; // 0-1\r\n    lastEvaluated: string;",
            "properties": {
              "precision": {
                "name": "precision",
                "type": "number",
                "optional": false
              },
              "recall": {
                "name": "recall",
                "type": "number",
                "optional": false
              },
              "f1Score": {
                "name": "f1Score",
                "type": "number",
                "optional": false
              },
              "accuracy": {
                "name": "accuracy",
                "type": "number",
                "optional": false
              },
              "falsePositiveRate": {
                "name": "falsePositiveRate",
                "type": "number",
                "optional": false
              },
              "falseNegativeRate": {
                "name": "falseNegativeRate",
                "type": "number",
                "optional": false
              },
              "lastEvaluated": {
                "name": "lastEvaluated",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 466
          },
          "ReliabilityMetrics": {
            "name": "ReliabilityMetrics",
            "body": "consistency: number; // 0-1\r\n    stability: number; // 0-1\r\n    robustness: number; // 0-1\r\n    reproducibility: number; // 0-1\r\n    confidence: number; // 0-1\r\n    variance: number;\r\n    lastEvaluated: string;",
            "properties": {
              "consistency": {
                "name": "consistency",
                "type": "number",
                "optional": false
              },
              "stability": {
                "name": "stability",
                "type": "number",
                "optional": false
              },
              "robustness": {
                "name": "robustness",
                "type": "number",
                "optional": false
              },
              "reproducibility": {
                "name": "reproducibility",
                "type": "number",
                "optional": false
              },
              "confidence": {
                "name": "confidence",
                "type": "number",
                "optional": false
              },
              "variance": {
                "name": "variance",
                "type": "number",
                "optional": false
              },
              "lastEvaluated": {
                "name": "lastEvaluated",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 479
          },
          "InputRequirement": {
            "name": "InputRequirement",
            "body": "requirementId: string;\r\n    name: string;\r\n    type: string;\r\n    required: boolean;\r\n    format: string;\r\n    validation: ValidationRule[];\r\n    examples: any[];",
            "properties": {
              "requirementId": {
                "name": "requirementId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "required": {
                "name": "required",
                "type": "boolean",
                "optional": false
              },
              "format": {
                "name": "format",
                "type": "string",
                "optional": false
              },
              "validation": {
                "name": "validation",
                "type": "ValidationRule[]",
                "optional": false
              },
              "examples": {
                "name": "examples",
                "type": "any[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 492
          },
          "OutputFormat": {
            "name": "OutputFormat",
            "body": "formatId: string;\r\n    type: string;\r\n    structure: any;\r\n    validation: ValidationRule[];\r\n    postProcessing: PostProcessingStep[];",
            "properties": {
              "formatId": {
                "name": "formatId",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "structure": {
                "name": "structure",
                "type": "any",
                "optional": false
              },
              "validation": {
                "name": "validation",
                "type": "ValidationRule[]",
                "optional": false
              },
              "postProcessing": {
                "name": "postProcessing",
                "type": "PostProcessingStep[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 505
          },
          "PostProcessingStep": {
            "name": "PostProcessingStep",
            "body": "stepId: string;\r\n    name: string;\r\n    operation: string;\r\n    parameters: Record<string, any>;\r\n    order: number;",
            "properties": {
              "stepId": {
                "name": "stepId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "operation": {
                "name": "operation",
                "type": "string",
                "optional": false
              },
              "parameters": {
                "name": "parameters",
                "type": "Record<string",
                "optional": false
              },
              "order": {
                "name": "order",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 516
          },
          "TrainingData": {
            "name": "TrainingData",
            "body": "dataId: string;\r\n    input: any;\r\n    expectedOutput: any;\r\n    actualOutput?: any;\r\n    quality: number; // 0-10\r\n    source: string;\r\n    timestamp: string;\r\n    tags: string[];",
            "properties": {
              "dataId": {
                "name": "dataId",
                "type": "string",
                "optional": false
              },
              "input": {
                "name": "input",
                "type": "any",
                "optional": false
              },
              "expectedOutput": {
                "name": "expectedOutput",
                "type": "any",
                "optional": false
              },
              "actualOutput": {
                "name": "actualOutput",
                "type": "any",
                "optional": true
              },
              "quality": {
                "name": "quality",
                "type": "number",
                "optional": false
              },
              "source": {
                "name": "source",
                "type": "string",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              },
              "tags": {
                "name": "tags",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 527
          },
          "ValidationResult": {
            "name": "ValidationResult",
            "body": "validationId: string;\r\n    testCase: string;\r\n    input: any;\r\n    expectedOutput: any;\r\n    actualOutput: any;\r\n    passed: boolean;\r\n    score: number; // 0-10\r\n    errors: string[];\r\n    timestamp: string;",
            "properties": {
              "validationId": {
                "name": "validationId",
                "type": "string",
                "optional": false
              },
              "testCase": {
                "name": "testCase",
                "type": "string",
                "optional": false
              },
              "input": {
                "name": "input",
                "type": "any",
                "optional": false
              },
              "expectedOutput": {
                "name": "expectedOutput",
                "type": "any",
                "optional": false
              },
              "actualOutput": {
                "name": "actualOutput",
                "type": "any",
                "optional": false
              },
              "passed": {
                "name": "passed",
                "type": "boolean",
                "optional": false
              },
              "score": {
                "name": "score",
                "type": "number",
                "optional": false
              },
              "errors": {
                "name": "errors",
                "type": "string[]",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 541
          },
          "ImprovementRecord": {
            "name": "ImprovementRecord",
            "body": "improvementId: string;\r\n    type: 'algorithm' | 'parameter' | 'data' | 'validation';\r\n    description: string;\r\n    before: any;\r\n    after: any;\r\n    improvement: number; // percentage\r\n    impact: AccuracyMetrics;\r\n    timestamp: string;\r\n    implementedBy: string;",
            "properties": {
              "improvementId": {
                "name": "improvementId",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'algorithm' | 'parameter' | 'data' | 'validation'",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "before": {
                "name": "before",
                "type": "any",
                "optional": false
              },
              "after": {
                "name": "after",
                "type": "any",
                "optional": false
              },
              "improvement": {
                "name": "improvement",
                "type": "number",
                "optional": false
              },
              "impact": {
                "name": "impact",
                "type": "AccuracyMetrics",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              },
              "implementedBy": {
                "name": "implementedBy",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 556
          },
          "OptimizationStrategy": {
            "name": "OptimizationStrategy",
            "body": "strategyId: string;\r\n    strategyName: string;\r\n    category: 'performance' | 'quality' | 'efficiency' | 'resource' | 'user_experience';\r\n\r\n    // 戦略定義\r\n    objective: string;\r\n    approach: OptimizationApproach;\r\n    techniques: OptimizationTechnique[];\r\n\r\n    // 効果データ\r\n    expectedBenefits: Benefit[];\r\n    measuredImpact: ImpactMeasurement[];\r\n\r\n    // 適用データ\r\n    applicableScenarios: OptimizationScenario[];\r\n    prerequisites: Prerequisite[];\r\n    constraints: OptimizationConstraint[];\r\n\r\n    // 実装データ\r\n    implementationGuide: ImplementationGuide;\r\n    rollbackPlan: RollbackPlan;\r\n\r\n    // 監視データ\r\n    monitoringMetrics: MonitoringMetric[];\r\n    alertThresholds: AlertThreshold[];\r\n\r\n    // メタデータ\r\n    createdAt: string;\r\n    lastApplied: string;\r\n    successRate: number; // 0-1\r\n    maturityLevel: 'experimental' | 'pilot' | 'production' | 'deprecated';",
            "properties": {
              "strategyId": {
                "name": "strategyId",
                "type": "string",
                "optional": false
              },
              "strategyName": {
                "name": "strategyName",
                "type": "string",
                "optional": false
              },
              "category": {
                "name": "category",
                "type": "'performance' | 'quality' | 'efficiency' | 'resource' | 'user_experience'",
                "optional": false
              },
              "objective": {
                "name": "objective",
                "type": "string",
                "optional": false
              },
              "approach": {
                "name": "approach",
                "type": "OptimizationApproach",
                "optional": false
              },
              "techniques": {
                "name": "techniques",
                "type": "OptimizationTechnique[]",
                "optional": false
              },
              "expectedBenefits": {
                "name": "expectedBenefits",
                "type": "Benefit[]",
                "optional": false
              },
              "measuredImpact": {
                "name": "measuredImpact",
                "type": "ImpactMeasurement[]",
                "optional": false
              },
              "applicableScenarios": {
                "name": "applicableScenarios",
                "type": "OptimizationScenario[]",
                "optional": false
              },
              "prerequisites": {
                "name": "prerequisites",
                "type": "Prerequisite[]",
                "optional": false
              },
              "constraints": {
                "name": "constraints",
                "type": "OptimizationConstraint[]",
                "optional": false
              },
              "implementationGuide": {
                "name": "implementationGuide",
                "type": "ImplementationGuide",
                "optional": false
              },
              "rollbackPlan": {
                "name": "rollbackPlan",
                "type": "RollbackPlan",
                "optional": false
              },
              "monitoringMetrics": {
                "name": "monitoringMetrics",
                "type": "MonitoringMetric[]",
                "optional": false
              },
              "alertThresholds": {
                "name": "alertThresholds",
                "type": "AlertThreshold[]",
                "optional": false
              },
              "createdAt": {
                "name": "createdAt",
                "type": "string",
                "optional": false
              },
              "lastApplied": {
                "name": "lastApplied",
                "type": "string",
                "optional": false
              },
              "successRate": {
                "name": "successRate",
                "type": "number",
                "optional": false
              },
              "maturityLevel": {
                "name": "maturityLevel",
                "type": "'experimental' | 'pilot' | 'production' | 'deprecated'",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 571
          },
          "OptimizationApproach": {
            "name": "OptimizationApproach",
            "body": "type: 'incremental' | 'revolutionary' | 'hybrid';\r\n    methodology: string;\r\n    phases: OptimizationPhase[];\r\n    riskLevel: 'low' | 'medium' | 'high';\r\n    timeframe: string;",
            "properties": {
              "type": {
                "name": "type",
                "type": "'incremental' | 'revolutionary' | 'hybrid'",
                "optional": false
              },
              "methodology": {
                "name": "methodology",
                "type": "string",
                "optional": false
              },
              "phases": {
                "name": "phases",
                "type": "OptimizationPhase[]",
                "optional": false
              },
              "riskLevel": {
                "name": "riskLevel",
                "type": "'low' | 'medium' | 'high'",
                "optional": false
              },
              "timeframe": {
                "name": "timeframe",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 608
          },
          "OptimizationPhase": {
            "name": "OptimizationPhase",
            "body": "phaseId: string;\r\n    name: string;\r\n    description: string;\r\n    order: number;\r\n    duration: string;\r\n    deliverables: string[];\r\n    successCriteria: string[];",
            "properties": {
              "phaseId": {
                "name": "phaseId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "order": {
                "name": "order",
                "type": "number",
                "optional": false
              },
              "duration": {
                "name": "duration",
                "type": "string",
                "optional": false
              },
              "deliverables": {
                "name": "deliverables",
                "type": "string[]",
                "optional": false
              },
              "successCriteria": {
                "name": "successCriteria",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 619
          },
          "OptimizationTechnique": {
            "name": "OptimizationTechnique",
            "body": "techniqueId: string;\r\n    name: string;\r\n    description: string;\r\n    type: string;\r\n    difficulty: number; // 0-10\r\n    effectiveness: number; // 0-10\r\n    resources: ResourceRequirement[];\r\n    steps: TechniqueStep[];",
            "properties": {
              "techniqueId": {
                "name": "techniqueId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "difficulty": {
                "name": "difficulty",
                "type": "number",
                "optional": false
              },
              "effectiveness": {
                "name": "effectiveness",
                "type": "number",
                "optional": false
              },
              "resources": {
                "name": "resources",
                "type": "ResourceRequirement[]",
                "optional": false
              },
              "steps": {
                "name": "steps",
                "type": "TechniqueStep[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 632
          },
          "TechniqueStep": {
            "name": "TechniqueStep",
            "body": "stepId: string;\r\n    name: string;\r\n    description: string;\r\n    order: number;\r\n    duration: string;\r\n    resources: string[];\r\n    outputs: string[];",
            "properties": {
              "stepId": {
                "name": "stepId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "order": {
                "name": "order",
                "type": "number",
                "optional": false
              },
              "duration": {
                "name": "duration",
                "type": "string",
                "optional": false
              },
              "resources": {
                "name": "resources",
                "type": "string[]",
                "optional": false
              },
              "outputs": {
                "name": "outputs",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 646
          },
          "ResourceRequirement": {
            "name": "ResourceRequirement",
            "body": "resourceId: string;\r\n    type: 'time' | 'memory' | 'cpu' | 'storage' | 'bandwidth' | 'human';\r\n    amount: number;\r\n    unit: string;\r\n    critical: boolean;",
            "properties": {
              "resourceId": {
                "name": "resourceId",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'time' | 'memory' | 'cpu' | 'storage' | 'bandwidth' | 'human'",
                "optional": false
              },
              "amount": {
                "name": "amount",
                "type": "number",
                "optional": false
              },
              "unit": {
                "name": "unit",
                "type": "string",
                "optional": false
              },
              "critical": {
                "name": "critical",
                "type": "boolean",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 659
          },
          "Benefit": {
            "name": "Benefit",
            "body": "benefitId: string;\r\n    type: 'performance' | 'quality' | 'cost' | 'user_satisfaction' | 'maintainability';\r\n    description: string;\r\n    quantification: string;\r\n    timeframe: string;\r\n    confidence: number; // 0-10",
            "properties": {
              "benefitId": {
                "name": "benefitId",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'performance' | 'quality' | 'cost' | 'user_satisfaction' | 'maintainability'",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "quantification": {
                "name": "quantification",
                "type": "string",
                "optional": false
              },
              "timeframe": {
                "name": "timeframe",
                "type": "string",
                "optional": false
              },
              "confidence": {
                "name": "confidence",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 670
          },
          "ImpactMeasurement": {
            "name": "ImpactMeasurement",
            "body": "measurementId: string;\r\n    metric: string;\r\n    baseline: number;\r\n    target: number;\r\n    actual: number;\r\n    improvement: number; // percentage\r\n    timestamp: string;\r\n    measurementMethod: string;",
            "properties": {
              "measurementId": {
                "name": "measurementId",
                "type": "string",
                "optional": false
              },
              "metric": {
                "name": "metric",
                "type": "string",
                "optional": false
              },
              "baseline": {
                "name": "baseline",
                "type": "number",
                "optional": false
              },
              "target": {
                "name": "target",
                "type": "number",
                "optional": false
              },
              "actual": {
                "name": "actual",
                "type": "number",
                "optional": false
              },
              "improvement": {
                "name": "improvement",
                "type": "number",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              },
              "measurementMethod": {
                "name": "measurementMethod",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 682
          },
          "OptimizationScenario": {
            "name": "OptimizationScenario",
            "body": "scenarioId: string;\r\n    name: string;\r\n    description: string;\r\n    conditions: Record<string, any>;\r\n    priority: number; // 0-10\r\n    complexity: number; // 0-10",
            "properties": {
              "scenarioId": {
                "name": "scenarioId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "conditions": {
                "name": "conditions",
                "type": "Record<string",
                "optional": false
              },
              "priority": {
                "name": "priority",
                "type": "number",
                "optional": false
              },
              "complexity": {
                "name": "complexity",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 696
          },
          "Prerequisite": {
            "name": "Prerequisite",
            "body": "prerequisiteId: string;\r\n    description: string;\r\n    type: 'technical' | 'resource' | 'organizational' | 'time';\r\n    critical: boolean;\r\n    validationMethod: string;",
            "properties": {
              "prerequisiteId": {
                "name": "prerequisiteId",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'technical' | 'resource' | 'organizational' | 'time'",
                "optional": false
              },
              "critical": {
                "name": "critical",
                "type": "boolean",
                "optional": false
              },
              "validationMethod": {
                "name": "validationMethod",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 708
          },
          "OptimizationConstraint": {
            "name": "OptimizationConstraint",
            "body": "constraintId: string;\r\n    type: 'resource' | 'time' | 'quality' | 'compatibility' | 'regulatory';\r\n    description: string;\r\n    value: any;\r\n    flexibility: number; // 0-10",
            "properties": {
              "constraintId": {
                "name": "constraintId",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'resource' | 'time' | 'quality' | 'compatibility' | 'regulatory'",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "value": {
                "name": "value",
                "type": "any",
                "optional": false
              },
              "flexibility": {
                "name": "flexibility",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 719
          },
          "ImplementationGuide": {
            "name": "ImplementationGuide",
            "body": "guideId: string;\r\n    overview: string;\r\n    detailedSteps: ImplementationStep[];\r\n    checkpoints: Checkpoint[];\r\n    troubleshooting: TroubleshootingGuide[];",
            "properties": {
              "guideId": {
                "name": "guideId",
                "type": "string",
                "optional": false
              },
              "overview": {
                "name": "overview",
                "type": "string",
                "optional": false
              },
              "detailedSteps": {
                "name": "detailedSteps",
                "type": "ImplementationStep[]",
                "optional": false
              },
              "checkpoints": {
                "name": "checkpoints",
                "type": "Checkpoint[]",
                "optional": false
              },
              "troubleshooting": {
                "name": "troubleshooting",
                "type": "TroubleshootingGuide[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 730
          },
          "ImplementationStep": {
            "name": "ImplementationStep",
            "body": "stepId: string;\r\n    name: string;\r\n    description: string;\r\n    order: number;\r\n    duration: string;\r\n    dependencies: string[];\r\n    deliverables: string[];\r\n    validationCriteria: string[];",
            "properties": {
              "stepId": {
                "name": "stepId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "order": {
                "name": "order",
                "type": "number",
                "optional": false
              },
              "duration": {
                "name": "duration",
                "type": "string",
                "optional": false
              },
              "dependencies": {
                "name": "dependencies",
                "type": "string[]",
                "optional": false
              },
              "deliverables": {
                "name": "deliverables",
                "type": "string[]",
                "optional": false
              },
              "validationCriteria": {
                "name": "validationCriteria",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 741
          },
          "Checkpoint": {
            "name": "Checkpoint",
            "body": "checkpointId: string;\r\n    name: string;\r\n    description: string;\r\n    order: number;\r\n    criteria: string[];\r\n    actions: CheckpointAction[];",
            "properties": {
              "checkpointId": {
                "name": "checkpointId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "order": {
                "name": "order",
                "type": "number",
                "optional": false
              },
              "criteria": {
                "name": "criteria",
                "type": "string[]",
                "optional": false
              },
              "actions": {
                "name": "actions",
                "type": "CheckpointAction[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 755
          },
          "CheckpointAction": {
            "name": "CheckpointAction",
            "body": "actionId: string;\r\n    condition: string;\r\n    action: string;\r\n    severity: 'info' | 'warning' | 'error' | 'critical';",
            "properties": {
              "actionId": {
                "name": "actionId",
                "type": "string",
                "optional": false
              },
              "condition": {
                "name": "condition",
                "type": "string",
                "optional": false
              },
              "action": {
                "name": "action",
                "type": "string",
                "optional": false
              },
              "severity": {
                "name": "severity",
                "type": "'info' | 'warning' | 'error' | 'critical'",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 767
          },
          "TroubleshootingGuide": {
            "name": "TroubleshootingGuide",
            "body": "guideId: string;\r\n    problem: string;\r\n    symptoms: string[];\r\n    diagnosis: DiagnosisStep[];\r\n    solutions: Solution[];",
            "properties": {
              "guideId": {
                "name": "guideId",
                "type": "string",
                "optional": false
              },
              "problem": {
                "name": "problem",
                "type": "string",
                "optional": false
              },
              "symptoms": {
                "name": "symptoms",
                "type": "string[]",
                "optional": false
              },
              "diagnosis": {
                "name": "diagnosis",
                "type": "DiagnosisStep[]",
                "optional": false
              },
              "solutions": {
                "name": "solutions",
                "type": "Solution[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 777
          },
          "DiagnosisStep": {
            "name": "DiagnosisStep",
            "body": "stepId: string;\r\n    description: string;\r\n    method: string;\r\n    expectedResult: string;\r\n    order: number;",
            "properties": {
              "stepId": {
                "name": "stepId",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "method": {
                "name": "method",
                "type": "string",
                "optional": false
              },
              "expectedResult": {
                "name": "expectedResult",
                "type": "string",
                "optional": false
              },
              "order": {
                "name": "order",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 788
          },
          "Solution": {
            "name": "Solution",
            "body": "solutionId: string;\r\n    description: string;\r\n    steps: string[];\r\n    difficulty: number; // 0-10\r\n    timeRequired: string;\r\n    successRate: number; // 0-1",
            "properties": {
              "solutionId": {
                "name": "solutionId",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "steps": {
                "name": "steps",
                "type": "string[]",
                "optional": false
              },
              "difficulty": {
                "name": "difficulty",
                "type": "number",
                "optional": false
              },
              "timeRequired": {
                "name": "timeRequired",
                "type": "string",
                "optional": false
              },
              "successRate": {
                "name": "successRate",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 799
          },
          "RollbackPlan": {
            "name": "RollbackPlan",
            "body": "planId: string;\r\n    description: string;\r\n    triggers: RollbackTrigger[];\r\n    steps: RollbackStep[];\r\n    timeRequired: string;\r\n    dataRecovery: DataRecoveryPlan;",
            "properties": {
              "planId": {
                "name": "planId",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "triggers": {
                "name": "triggers",
                "type": "RollbackTrigger[]",
                "optional": false
              },
              "steps": {
                "name": "steps",
                "type": "RollbackStep[]",
                "optional": false
              },
              "timeRequired": {
                "name": "timeRequired",
                "type": "string",
                "optional": false
              },
              "dataRecovery": {
                "name": "dataRecovery",
                "type": "DataRecoveryPlan",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 811
          },
          "RollbackTrigger": {
            "name": "RollbackTrigger",
            "body": "triggerId: string;\r\n    condition: string;\r\n    threshold: any;\r\n    severity: 'low' | 'medium' | 'high' | 'critical';\r\n    autoTrigger: boolean;",
            "properties": {
              "triggerId": {
                "name": "triggerId",
                "type": "string",
                "optional": false
              },
              "condition": {
                "name": "condition",
                "type": "string",
                "optional": false
              },
              "threshold": {
                "name": "threshold",
                "type": "any",
                "optional": false
              },
              "severity": {
                "name": "severity",
                "type": "'low' | 'medium' | 'high' | 'critical'",
                "optional": false
              },
              "autoTrigger": {
                "name": "autoTrigger",
                "type": "boolean",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 823
          },
          "RollbackStep": {
            "name": "RollbackStep",
            "body": "stepId: string;\r\n    description: string;\r\n    order: number;\r\n    duration: string;\r\n    validation: string[];",
            "properties": {
              "stepId": {
                "name": "stepId",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "order": {
                "name": "order",
                "type": "number",
                "optional": false
              },
              "duration": {
                "name": "duration",
                "type": "string",
                "optional": false
              },
              "validation": {
                "name": "validation",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 834
          },
          "DataRecoveryPlan": {
            "name": "DataRecoveryPlan",
            "body": "planId: string;\r\n    description: string;\r\n    backupStrategy: string;\r\n    recoverySteps: string[];\r\n    timeRequired: string;\r\n    dataIntegrityChecks: string[];",
            "properties": {
              "planId": {
                "name": "planId",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "backupStrategy": {
                "name": "backupStrategy",
                "type": "string",
                "optional": false
              },
              "recoverySteps": {
                "name": "recoverySteps",
                "type": "string[]",
                "optional": false
              },
              "timeRequired": {
                "name": "timeRequired",
                "type": "string",
                "optional": false
              },
              "dataIntegrityChecks": {
                "name": "dataIntegrityChecks",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 845
          },
          "MonitoringMetric": {
            "name": "MonitoringMetric",
            "body": "metricId: string;\r\n    name: string;\r\n    description: string;\r\n    type: 'counter' | 'gauge' | 'histogram' | 'timer';\r\n    unit: string;\r\n    frequency: string;\r\n    threshold: MetricThreshold;",
            "properties": {
              "metricId": {
                "name": "metricId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'counter' | 'gauge' | 'histogram' | 'timer'",
                "optional": false
              },
              "unit": {
                "name": "unit",
                "type": "string",
                "optional": false
              },
              "frequency": {
                "name": "frequency",
                "type": "string",
                "optional": false
              },
              "threshold": {
                "name": "threshold",
                "type": "MetricThreshold",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 857
          },
          "MetricThreshold": {
            "name": "MetricThreshold",
            "body": "warning: number;\r\n    critical: number;\r\n    operator: 'gt' | 'lt' | 'eq' | 'ne' | 'gte' | 'lte';",
            "properties": {
              "warning": {
                "name": "warning",
                "type": "number",
                "optional": false
              },
              "critical": {
                "name": "critical",
                "type": "number",
                "optional": false
              },
              "operator": {
                "name": "operator",
                "type": "'gt' | 'lt' | 'eq' | 'ne' | 'gte' | 'lte'",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 870
          },
          "AlertThreshold": {
            "name": "AlertThreshold",
            "body": "thresholdId: string;\r\n    metric: string;\r\n    condition: string;\r\n    value: number;\r\n    severity: 'info' | 'warning' | 'error' | 'critical';\r\n    action: string;\r\n    cooldown: string;",
            "properties": {
              "thresholdId": {
                "name": "thresholdId",
                "type": "string",
                "optional": false
              },
              "metric": {
                "name": "metric",
                "type": "string",
                "optional": false
              },
              "condition": {
                "name": "condition",
                "type": "string",
                "optional": false
              },
              "value": {
                "name": "value",
                "type": "number",
                "optional": false
              },
              "severity": {
                "name": "severity",
                "type": "'info' | 'warning' | 'error' | 'critical'",
                "optional": false
              },
              "action": {
                "name": "action",
                "type": "string",
                "optional": false
              },
              "cooldown": {
                "name": "cooldown",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 879
          },
          "ErrorPattern": {
            "name": "ErrorPattern",
            "body": "patternId: string;\r\n    patternName: string;\r\n    category: 'generation' | 'analysis' | 'storage' | 'integration' | 'validation';\r\n\r\n    // パターン定義\r\n    errorType: string;\r\n    symptoms: ErrorSymptom[];\r\n    rootCauses: RootCause[];\r\n\r\n    // 発生データ\r\n    frequency: FrequencyData;\r\n    severity: SeverityData;\r\n    impact: ErrorImpact;\r\n\r\n    // 検出データ\r\n    detectionMethods: DetectionMethod[];\r\n    earlyWarnings: EarlyWarning[];\r\n\r\n    // 解決データ\r\n    solutions: ErrorSolution[];\r\n    preventionMeasures: PreventionMeasure[];\r\n\r\n    // 履歴データ\r\n    occurrenceHistory: ErrorOccurrence[];\r\n    resolutionHistory: ErrorResolution[];\r\n\r\n    // メタデータ\r\n    firstDetected: string;\r\n    lastOccurred: string;\r\n    status: 'active' | 'resolved' | 'monitoring' | 'archived';",
            "properties": {
              "patternId": {
                "name": "patternId",
                "type": "string",
                "optional": false
              },
              "patternName": {
                "name": "patternName",
                "type": "string",
                "optional": false
              },
              "category": {
                "name": "category",
                "type": "'generation' | 'analysis' | 'storage' | 'integration' | 'validation'",
                "optional": false
              },
              "errorType": {
                "name": "errorType",
                "type": "string",
                "optional": false
              },
              "symptoms": {
                "name": "symptoms",
                "type": "ErrorSymptom[]",
                "optional": false
              },
              "rootCauses": {
                "name": "rootCauses",
                "type": "RootCause[]",
                "optional": false
              },
              "frequency": {
                "name": "frequency",
                "type": "FrequencyData",
                "optional": false
              },
              "severity": {
                "name": "severity",
                "type": "SeverityData",
                "optional": false
              },
              "impact": {
                "name": "impact",
                "type": "ErrorImpact",
                "optional": false
              },
              "detectionMethods": {
                "name": "detectionMethods",
                "type": "DetectionMethod[]",
                "optional": false
              },
              "earlyWarnings": {
                "name": "earlyWarnings",
                "type": "EarlyWarning[]",
                "optional": false
              },
              "solutions": {
                "name": "solutions",
                "type": "ErrorSolution[]",
                "optional": false
              },
              "preventionMeasures": {
                "name": "preventionMeasures",
                "type": "PreventionMeasure[]",
                "optional": false
              },
              "occurrenceHistory": {
                "name": "occurrenceHistory",
                "type": "ErrorOccurrence[]",
                "optional": false
              },
              "resolutionHistory": {
                "name": "resolutionHistory",
                "type": "ErrorResolution[]",
                "optional": false
              },
              "firstDetected": {
                "name": "firstDetected",
                "type": "string",
                "optional": false
              },
              "lastOccurred": {
                "name": "lastOccurred",
                "type": "string",
                "optional": false
              },
              "status": {
                "name": "status",
                "type": "'active' | 'resolved' | 'monitoring' | 'archived'",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 892
          },
          "ErrorSymptom": {
            "name": "ErrorSymptom",
            "body": "symptomId: string;\r\n    description: string;\r\n    severity: number; // 0-10\r\n    frequency: number; // 0-1\r\n    observable: boolean;\r\n    measurable: boolean;\r\n    indicators: string[];",
            "properties": {
              "symptomId": {
                "name": "symptomId",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "severity": {
                "name": "severity",
                "type": "number",
                "optional": false
              },
              "frequency": {
                "name": "frequency",
                "type": "number",
                "optional": false
              },
              "observable": {
                "name": "observable",
                "type": "boolean",
                "optional": false
              },
              "measurable": {
                "name": "measurable",
                "type": "boolean",
                "optional": false
              },
              "indicators": {
                "name": "indicators",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 928
          },
          "RootCause": {
            "name": "RootCause",
            "body": "causeId: string;\r\n    description: string;\r\n    category: 'code' | 'data' | 'configuration' | 'environment' | 'user' | 'system';\r\n    probability: number; // 0-1\r\n    evidence: string[];\r\n    dependencies: string[];",
            "properties": {
              "causeId": {
                "name": "causeId",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "category": {
                "name": "category",
                "type": "'code' | 'data' | 'configuration' | 'environment' | 'user' | 'system'",
                "optional": false
              },
              "probability": {
                "name": "probability",
                "type": "number",
                "optional": false
              },
              "evidence": {
                "name": "evidence",
                "type": "string[]",
                "optional": false
              },
              "dependencies": {
                "name": "dependencies",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 941
          },
          "FrequencyData": {
            "name": "FrequencyData",
            "body": "occurrencesPerDay: number;\r\n    occurrencesPerWeek: number;\r\n    occurrencesPerMonth: number;\r\n    peakTimes: string[];\r\n    trends: TrendData[];",
            "properties": {
              "occurrencesPerDay": {
                "name": "occurrencesPerDay",
                "type": "number",
                "optional": false
              },
              "occurrencesPerWeek": {
                "name": "occurrencesPerWeek",
                "type": "number",
                "optional": false
              },
              "occurrencesPerMonth": {
                "name": "occurrencesPerMonth",
                "type": "number",
                "optional": false
              },
              "peakTimes": {
                "name": "peakTimes",
                "type": "string[]",
                "optional": false
              },
              "trends": {
                "name": "trends",
                "type": "TrendData[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 953
          },
          "TrendData": {
            "name": "TrendData",
            "body": "period: string;\r\n    direction: 'increasing' | 'decreasing' | 'stable' | 'volatile';\r\n    changeRate: number; // percentage\r\n    confidence: number; // 0-1",
            "properties": {
              "period": {
                "name": "period",
                "type": "string",
                "optional": false
              },
              "direction": {
                "name": "direction",
                "type": "'increasing' | 'decreasing' | 'stable' | 'volatile'",
                "optional": false
              },
              "changeRate": {
                "name": "changeRate",
                "type": "number",
                "optional": false
              },
              "confidence": {
                "name": "confidence",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 964
          },
          "SeverityData": {
            "name": "SeverityData",
            "body": "userImpact: number; // 0-10\r\n    systemImpact: number; // 0-10\r\n    businessImpact: number; // 0-10\r\n    recoveryDifficulty: number; // 0-10\r\n    overallSeverity: number; // 0-10",
            "properties": {
              "userImpact": {
                "name": "userImpact",
                "type": "number",
                "optional": false
              },
              "systemImpact": {
                "name": "systemImpact",
                "type": "number",
                "optional": false
              },
              "businessImpact": {
                "name": "businessImpact",
                "type": "number",
                "optional": false
              },
              "recoveryDifficulty": {
                "name": "recoveryDifficulty",
                "type": "number",
                "optional": false
              },
              "overallSeverity": {
                "name": "overallSeverity",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 974
          },
          "ErrorImpact": {
            "name": "ErrorImpact",
            "body": "impactId: string;\r\n    type: 'performance' | 'quality' | 'availability' | 'data' | 'user_experience';\r\n    description: string;\r\n    quantification: string;\r\n    duration: string;\r\n    scope: string;",
            "properties": {
              "impactId": {
                "name": "impactId",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'performance' | 'quality' | 'availability' | 'data' | 'user_experience'",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "quantification": {
                "name": "quantification",
                "type": "string",
                "optional": false
              },
              "duration": {
                "name": "duration",
                "type": "string",
                "optional": false
              },
              "scope": {
                "name": "scope",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 985
          },
          "DetectionMethod": {
            "name": "DetectionMethod",
            "body": "methodId: string;\r\n    name: string;\r\n    type: 'automated' | 'manual' | 'user_reported' | 'monitoring';\r\n    description: string;\r\n    accuracy: number; // 0-1\r\n    latency: string;\r\n    cost: number;\r\n    implementation: string;",
            "properties": {
              "methodId": {
                "name": "methodId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'automated' | 'manual' | 'user_reported' | 'monitoring'",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "accuracy": {
                "name": "accuracy",
                "type": "number",
                "optional": false
              },
              "latency": {
                "name": "latency",
                "type": "string",
                "optional": false
              },
              "cost": {
                "name": "cost",
                "type": "number",
                "optional": false
              },
              "implementation": {
                "name": "implementation",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 997
          },
          "EarlyWarning": {
            "name": "EarlyWarning",
            "body": "warningId: string;\r\n    name: string;\r\n    description: string;\r\n    indicators: string[];\r\n    threshold: any;\r\n    leadTime: string;\r\n    accuracy: number; // 0-1",
            "properties": {
              "warningId": {
                "name": "warningId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "indicators": {
                "name": "indicators",
                "type": "string[]",
                "optional": false
              },
              "threshold": {
                "name": "threshold",
                "type": "any",
                "optional": false
              },
              "leadTime": {
                "name": "leadTime",
                "type": "string",
                "optional": false
              },
              "accuracy": {
                "name": "accuracy",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1011
          },
          "ErrorSolution": {
            "name": "ErrorSolution",
            "body": "solutionId: string;\r\n    name: string;\r\n    description: string;\r\n    type: 'immediate' | 'workaround' | 'permanent' | 'preventive';\r\n    steps: SolutionStep[];\r\n    effectiveness: number; // 0-1\r\n    complexity: number; // 0-10\r\n    timeRequired: string;\r\n    resources: string[];",
            "properties": {
              "solutionId": {
                "name": "solutionId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'immediate' | 'workaround' | 'permanent' | 'preventive'",
                "optional": false
              },
              "steps": {
                "name": "steps",
                "type": "SolutionStep[]",
                "optional": false
              },
              "effectiveness": {
                "name": "effectiveness",
                "type": "number",
                "optional": false
              },
              "complexity": {
                "name": "complexity",
                "type": "number",
                "optional": false
              },
              "timeRequired": {
                "name": "timeRequired",
                "type": "string",
                "optional": false
              },
              "resources": {
                "name": "resources",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1024
          },
          "SolutionStep": {
            "name": "SolutionStep",
            "body": "stepId: string;\r\n    description: string;\r\n    order: number;\r\n    duration: string;\r\n    validation: string;\r\n    rollback?: string;",
            "properties": {
              "stepId": {
                "name": "stepId",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "order": {
                "name": "order",
                "type": "number",
                "optional": false
              },
              "duration": {
                "name": "duration",
                "type": "string",
                "optional": false
              },
              "validation": {
                "name": "validation",
                "type": "string",
                "optional": false
              },
              "rollback": {
                "name": "rollback",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1039
          },
          "PreventionMeasure": {
            "name": "PreventionMeasure",
            "body": "measureId: string;\r\n    name: string;\r\n    description: string;\r\n    type: 'process' | 'technical' | 'training' | 'monitoring';\r\n    implementation: string;\r\n    effectiveness: number; // 0-1\r\n    cost: number;\r\n    maintenance: string;",
            "properties": {
              "measureId": {
                "name": "measureId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'process' | 'technical' | 'training' | 'monitoring'",
                "optional": false
              },
              "implementation": {
                "name": "implementation",
                "type": "string",
                "optional": false
              },
              "effectiveness": {
                "name": "effectiveness",
                "type": "number",
                "optional": false
              },
              "cost": {
                "name": "cost",
                "type": "number",
                "optional": false
              },
              "maintenance": {
                "name": "maintenance",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1051
          },
          "ErrorOccurrence": {
            "name": "ErrorOccurrence",
            "body": "occurrenceId: string;\r\n    timestamp: string;\r\n    context: Record<string, any>;\r\n    symptoms: string[];\r\n    severity: number; // 0-10\r\n    impact: string;\r\n    detectionMethod: string;\r\n    timeToDetection: string;\r\n    resolved: boolean;\r\n    resolutionTime?: string;",
            "properties": {
              "occurrenceId": {
                "name": "occurrenceId",
                "type": "string",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              },
              "context": {
                "name": "context",
                "type": "Record<string",
                "optional": false
              },
              "symptoms": {
                "name": "symptoms",
                "type": "string[]",
                "optional": false
              },
              "severity": {
                "name": "severity",
                "type": "number",
                "optional": false
              },
              "impact": {
                "name": "impact",
                "type": "string",
                "optional": false
              },
              "detectionMethod": {
                "name": "detectionMethod",
                "type": "string",
                "optional": false
              },
              "timeToDetection": {
                "name": "timeToDetection",
                "type": "string",
                "optional": false
              },
              "resolved": {
                "name": "resolved",
                "type": "boolean",
                "optional": false
              },
              "resolutionTime": {
                "name": "resolutionTime",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 1065
          },
          "ErrorResolution": {
            "name": "ErrorResolution",
            "body": "resolutionId: string;\r\n    occurrenceId: string;\r\n    timestamp: string;\r\n    method: string;\r\n    steps: string[];\r\n    timeRequired: string;\r\n    effectiveness: number; // 0-1\r\n    followUp: string[];\r\n    preventionImplemented: boolean;",
            "properties": {
              "resolutionId": {
                "name": "resolutionId",
                "type": "string",
                "optional": false
              },
              "occurrenceId": {
                "name": "occurrenceId",
                "type": "string",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              },
              "method": {
                "name": "method",
                "type": "string",
                "optional": false
              },
              "steps": {
                "name": "steps",
                "type": "string[]",
                "optional": false
              },
              "timeRequired": {
                "name": "timeRequired",
                "type": "string",
                "optional": false
              },
              "effectiveness": {
                "name": "effectiveness",
                "type": "number",
                "optional": false
              },
              "followUp": {
                "name": "followUp",
                "type": "string[]",
                "optional": false
              },
              "preventionImplemented": {
                "name": "preventionImplemented",
                "type": "boolean",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1081
          },
          "QualityImprovementStrategy": {
            "name": "QualityImprovementStrategy",
            "body": "strategyId: string;\r\n    strategyName: string;\r\n    category: 'content' | 'process' | 'system' | 'user_experience' | 'performance';\r\n\r\n    // 戦略定義\r\n    objective: string;\r\n    scope: string;\r\n    approach: QualityApproach;\r\n\r\n    // 品質指標\r\n    qualityMetrics: QualityMetric[];\r\n    targetLevels: QualityTarget[];\r\n\r\n    // 改善手法\r\n    techniques: QualityTechnique[];\r\n    tools: QualityTool[];\r\n\r\n    // 実装計画\r\n    implementationPlan: QualityImplementationPlan;\r\n    milestones: QualityMilestone[];\r\n\r\n    // 測定・監視\r\n    measurementFramework: MeasurementFramework;\r\n    continuousImprovement: ContinuousImprovementPlan;\r\n\r\n    // メタデータ\r\n    createdAt: string;\r\n    lastReviewed: string;\r\n    status: 'draft' | 'approved' | 'active' | 'completed' | 'suspended';\r\n    owner: string;",
            "properties": {
              "strategyId": {
                "name": "strategyId",
                "type": "string",
                "optional": false
              },
              "strategyName": {
                "name": "strategyName",
                "type": "string",
                "optional": false
              },
              "category": {
                "name": "category",
                "type": "'content' | 'process' | 'system' | 'user_experience' | 'performance'",
                "optional": false
              },
              "objective": {
                "name": "objective",
                "type": "string",
                "optional": false
              },
              "scope": {
                "name": "scope",
                "type": "string",
                "optional": false
              },
              "approach": {
                "name": "approach",
                "type": "QualityApproach",
                "optional": false
              },
              "qualityMetrics": {
                "name": "qualityMetrics",
                "type": "QualityMetric[]",
                "optional": false
              },
              "targetLevels": {
                "name": "targetLevels",
                "type": "QualityTarget[]",
                "optional": false
              },
              "techniques": {
                "name": "techniques",
                "type": "QualityTechnique[]",
                "optional": false
              },
              "tools": {
                "name": "tools",
                "type": "QualityTool[]",
                "optional": false
              },
              "implementationPlan": {
                "name": "implementationPlan",
                "type": "QualityImplementationPlan",
                "optional": false
              },
              "milestones": {
                "name": "milestones",
                "type": "QualityMilestone[]",
                "optional": false
              },
              "measurementFramework": {
                "name": "measurementFramework",
                "type": "MeasurementFramework",
                "optional": false
              },
              "continuousImprovement": {
                "name": "continuousImprovement",
                "type": "ContinuousImprovementPlan",
                "optional": false
              },
              "createdAt": {
                "name": "createdAt",
                "type": "string",
                "optional": false
              },
              "lastReviewed": {
                "name": "lastReviewed",
                "type": "string",
                "optional": false
              },
              "status": {
                "name": "status",
                "type": "'draft' | 'approved' | 'active' | 'completed' | 'suspended'",
                "optional": false
              },
              "owner": {
                "name": "owner",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1096
          },
          "QualityApproach": {
            "name": "QualityApproach",
            "body": "methodology: string;\r\n    principles: string[];\r\n    phases: QualityPhase[];\r\n    stakeholders: string[];\r\n    governance: string;",
            "properties": {
              "methodology": {
                "name": "methodology",
                "type": "string",
                "optional": false
              },
              "principles": {
                "name": "principles",
                "type": "string[]",
                "optional": false
              },
              "phases": {
                "name": "phases",
                "type": "QualityPhase[]",
                "optional": false
              },
              "stakeholders": {
                "name": "stakeholders",
                "type": "string[]",
                "optional": false
              },
              "governance": {
                "name": "governance",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1132
          },
          "QualityPhase": {
            "name": "QualityPhase",
            "body": "phaseId: string;\r\n    name: string;\r\n    description: string;\r\n    order: number;\r\n    duration: string;\r\n    objectives: string[];\r\n    deliverables: string[];\r\n    exitCriteria: string[];",
            "properties": {
              "phaseId": {
                "name": "phaseId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "order": {
                "name": "order",
                "type": "number",
                "optional": false
              },
              "duration": {
                "name": "duration",
                "type": "string",
                "optional": false
              },
              "objectives": {
                "name": "objectives",
                "type": "string[]",
                "optional": false
              },
              "deliverables": {
                "name": "deliverables",
                "type": "string[]",
                "optional": false
              },
              "exitCriteria": {
                "name": "exitCriteria",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1143
          },
          "QualityMetric": {
            "name": "QualityMetric",
            "body": "metricId: string;\r\n    name: string;\r\n    description: string;\r\n    type: 'quantitative' | 'qualitative';\r\n    unit: string;\r\n    formula?: string;\r\n    dataSource: string;\r\n    frequency: string;\r\n    benchmark: number;",
            "properties": {
              "metricId": {
                "name": "metricId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'quantitative' | 'qualitative'",
                "optional": false
              },
              "unit": {
                "name": "unit",
                "type": "string",
                "optional": false
              },
              "formula": {
                "name": "formula",
                "type": "string",
                "optional": true
              },
              "dataSource": {
                "name": "dataSource",
                "type": "string",
                "optional": false
              },
              "frequency": {
                "name": "frequency",
                "type": "string",
                "optional": false
              },
              "benchmark": {
                "name": "benchmark",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1157
          },
          "QualityTarget": {
            "name": "QualityTarget",
            "body": "targetId: string;\r\n    metricId: string;\r\n    baseline: number;\r\n    target: number;\r\n    timeframe: string;\r\n    priority: number; // 0-10\r\n    feasibility: number; // 0-10",
            "properties": {
              "targetId": {
                "name": "targetId",
                "type": "string",
                "optional": false
              },
              "metricId": {
                "name": "metricId",
                "type": "string",
                "optional": false
              },
              "baseline": {
                "name": "baseline",
                "type": "number",
                "optional": false
              },
              "target": {
                "name": "target",
                "type": "number",
                "optional": false
              },
              "timeframe": {
                "name": "timeframe",
                "type": "string",
                "optional": false
              },
              "priority": {
                "name": "priority",
                "type": "number",
                "optional": false
              },
              "feasibility": {
                "name": "feasibility",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1172
          },
          "QualityTechnique": {
            "name": "QualityTechnique",
            "body": "techniqueId: string;\r\n    name: string;\r\n    description: string;\r\n    category: string;\r\n    applicability: string[];\r\n    effectiveness: number; // 0-10\r\n    complexity: number; // 0-10\r\n    resources: string[];\r\n    steps: string[];",
            "properties": {
              "techniqueId": {
                "name": "techniqueId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "category": {
                "name": "category",
                "type": "string",
                "optional": false
              },
              "applicability": {
                "name": "applicability",
                "type": "string[]",
                "optional": false
              },
              "effectiveness": {
                "name": "effectiveness",
                "type": "number",
                "optional": false
              },
              "complexity": {
                "name": "complexity",
                "type": "number",
                "optional": false
              },
              "resources": {
                "name": "resources",
                "type": "string[]",
                "optional": false
              },
              "steps": {
                "name": "steps",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1185
          },
          "QualityTool": {
            "name": "QualityTool",
            "body": "toolId: string;\r\n    name: string;\r\n    description: string;\r\n    type: 'measurement' | 'analysis' | 'improvement' | 'monitoring';\r\n    capabilities: string[];\r\n    limitations: string[];\r\n    integration: string[];\r\n    cost: string;",
            "properties": {
              "toolId": {
                "name": "toolId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'measurement' | 'analysis' | 'improvement' | 'monitoring'",
                "optional": false
              },
              "capabilities": {
                "name": "capabilities",
                "type": "string[]",
                "optional": false
              },
              "limitations": {
                "name": "limitations",
                "type": "string[]",
                "optional": false
              },
              "integration": {
                "name": "integration",
                "type": "string[]",
                "optional": false
              },
              "cost": {
                "name": "cost",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1200
          },
          "QualityImplementationPlan": {
            "name": "QualityImplementationPlan",
            "body": "planId: string;\r\n    overview: string;\r\n    phases: ImplementationPhase[];\r\n    resources: ResourceAllocation[];\r\n    timeline: Timeline;\r\n    risks: Risk[];\r\n    dependencies: Dependency[];",
            "properties": {
              "planId": {
                "name": "planId",
                "type": "string",
                "optional": false
              },
              "overview": {
                "name": "overview",
                "type": "string",
                "optional": false
              },
              "phases": {
                "name": "phases",
                "type": "ImplementationPhase[]",
                "optional": false
              },
              "resources": {
                "name": "resources",
                "type": "ResourceAllocation[]",
                "optional": false
              },
              "timeline": {
                "name": "timeline",
                "type": "Timeline",
                "optional": false
              },
              "risks": {
                "name": "risks",
                "type": "Risk[]",
                "optional": false
              },
              "dependencies": {
                "name": "dependencies",
                "type": "Dependency[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1214
          },
          "ImplementationPhase": {
            "name": "ImplementationPhase",
            "body": "phaseId: string;\r\n    name: string;\r\n    description: string;\r\n    order: number;\r\n    startDate: string;\r\n    endDate: string;\r\n    activities: Activity[];\r\n    deliverables: string[];\r\n    successCriteria: string[];",
            "properties": {
              "phaseId": {
                "name": "phaseId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "order": {
                "name": "order",
                "type": "number",
                "optional": false
              },
              "startDate": {
                "name": "startDate",
                "type": "string",
                "optional": false
              },
              "endDate": {
                "name": "endDate",
                "type": "string",
                "optional": false
              },
              "activities": {
                "name": "activities",
                "type": "Activity[]",
                "optional": false
              },
              "deliverables": {
                "name": "deliverables",
                "type": "string[]",
                "optional": false
              },
              "successCriteria": {
                "name": "successCriteria",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1227
          },
          "Activity": {
            "name": "Activity",
            "body": "activityId: string;\r\n    name: string;\r\n    description: string;\r\n    duration: string;\r\n    dependencies: string[];\r\n    resources: string[];\r\n    owner: string;\r\n    status: 'not_started' | 'in_progress' | 'completed' | 'blocked';",
            "properties": {
              "activityId": {
                "name": "activityId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "duration": {
                "name": "duration",
                "type": "string",
                "optional": false
              },
              "dependencies": {
                "name": "dependencies",
                "type": "string[]",
                "optional": false
              },
              "resources": {
                "name": "resources",
                "type": "string[]",
                "optional": false
              },
              "owner": {
                "name": "owner",
                "type": "string",
                "optional": false
              },
              "status": {
                "name": "status",
                "type": "'not_started' | 'in_progress' | 'completed' | 'blocked'",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1242
          },
          "ResourceAllocation": {
            "name": "ResourceAllocation",
            "body": "resourceType: string;\r\n    amount: number;\r\n    unit: string;\r\n    timeframe: string;\r\n    justification: string;",
            "properties": {
              "resourceType": {
                "name": "resourceType",
                "type": "string",
                "optional": false
              },
              "amount": {
                "name": "amount",
                "type": "number",
                "optional": false
              },
              "unit": {
                "name": "unit",
                "type": "string",
                "optional": false
              },
              "timeframe": {
                "name": "timeframe",
                "type": "string",
                "optional": false
              },
              "justification": {
                "name": "justification",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1256
          },
          "Timeline": {
            "name": "Timeline",
            "body": "startDate: string;\r\n    endDate: string;\r\n    keyMilestones: string[];\r\n    criticalPath: string[];\r\n    bufferTime: string;",
            "properties": {
              "startDate": {
                "name": "startDate",
                "type": "string",
                "optional": false
              },
              "endDate": {
                "name": "endDate",
                "type": "string",
                "optional": false
              },
              "keyMilestones": {
                "name": "keyMilestones",
                "type": "string[]",
                "optional": false
              },
              "criticalPath": {
                "name": "criticalPath",
                "type": "string[]",
                "optional": false
              },
              "bufferTime": {
                "name": "bufferTime",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1267
          },
          "Risk": {
            "name": "Risk",
            "body": "riskId: string;\r\n    description: string;\r\n    category: string;\r\n    probability: number; // 0-1\r\n    impact: number; // 0-10\r\n    mitigation: string[];\r\n    contingency: string[];\r\n    owner: string;",
            "properties": {
              "riskId": {
                "name": "riskId",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "category": {
                "name": "category",
                "type": "string",
                "optional": false
              },
              "probability": {
                "name": "probability",
                "type": "number",
                "optional": false
              },
              "impact": {
                "name": "impact",
                "type": "number",
                "optional": false
              },
              "mitigation": {
                "name": "mitigation",
                "type": "string[]",
                "optional": false
              },
              "contingency": {
                "name": "contingency",
                "type": "string[]",
                "optional": false
              },
              "owner": {
                "name": "owner",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1278
          },
          "Dependency": {
            "name": "Dependency",
            "body": "dependencyId: string;\r\n    type: 'internal' | 'external';\r\n    description: string;\r\n    source: string;\r\n    target: string;\r\n    criticality: number; // 0-10\r\n    status: string;",
            "properties": {
              "dependencyId": {
                "name": "dependencyId",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'internal' | 'external'",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "source": {
                "name": "source",
                "type": "string",
                "optional": false
              },
              "target": {
                "name": "target",
                "type": "string",
                "optional": false
              },
              "criticality": {
                "name": "criticality",
                "type": "number",
                "optional": false
              },
              "status": {
                "name": "status",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1292
          },
          "QualityMilestone": {
            "name": "QualityMilestone",
            "body": "milestoneId: string;\r\n    name: string;\r\n    description: string;\r\n    targetDate: string;\r\n    criteria: string[];\r\n    metrics: string[];\r\n    status: 'pending' | 'achieved' | 'missed' | 'at_risk';",
            "properties": {
              "milestoneId": {
                "name": "milestoneId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "targetDate": {
                "name": "targetDate",
                "type": "string",
                "optional": false
              },
              "criteria": {
                "name": "criteria",
                "type": "string[]",
                "optional": false
              },
              "metrics": {
                "name": "metrics",
                "type": "string[]",
                "optional": false
              },
              "status": {
                "name": "status",
                "type": "'pending' | 'achieved' | 'missed' | 'at_risk'",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1305
          },
          "MeasurementFramework": {
            "name": "MeasurementFramework",
            "body": "frameworkId: string;\r\n    approach: string;\r\n    dataCollection: DataCollectionMethod[];\r\n    analysis: AnalysisMethod[];\r\n    reporting: ReportingMethod[];\r\n    governance: MeasurementGovernance;",
            "properties": {
              "frameworkId": {
                "name": "frameworkId",
                "type": "string",
                "optional": false
              },
              "approach": {
                "name": "approach",
                "type": "string",
                "optional": false
              },
              "dataCollection": {
                "name": "dataCollection",
                "type": "DataCollectionMethod[]",
                "optional": false
              },
              "analysis": {
                "name": "analysis",
                "type": "AnalysisMethod[]",
                "optional": false
              },
              "reporting": {
                "name": "reporting",
                "type": "ReportingMethod[]",
                "optional": false
              },
              "governance": {
                "name": "governance",
                "type": "MeasurementGovernance",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1318
          },
          "DataCollectionMethod": {
            "name": "DataCollectionMethod",
            "body": "methodId: string;\r\n    name: string;\r\n    description: string;\r\n    type: 'automated' | 'manual' | 'survey' | 'observation';\r\n    frequency: string;\r\n    dataPoints: string[];\r\n    quality: number; // 0-10",
            "properties": {
              "methodId": {
                "name": "methodId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'automated' | 'manual' | 'survey' | 'observation'",
                "optional": false
              },
              "frequency": {
                "name": "frequency",
                "type": "string",
                "optional": false
              },
              "dataPoints": {
                "name": "dataPoints",
                "type": "string[]",
                "optional": false
              },
              "quality": {
                "name": "quality",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1330
          },
          "AnalysisMethod": {
            "name": "AnalysisMethod",
            "body": "methodId: string;\r\n    name: string;\r\n    description: string;\r\n    type: 'statistical' | 'trend' | 'comparative' | 'predictive';\r\n    tools: string[];\r\n    outputs: string[];",
            "properties": {
              "methodId": {
                "name": "methodId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'statistical' | 'trend' | 'comparative' | 'predictive'",
                "optional": false
              },
              "tools": {
                "name": "tools",
                "type": "string[]",
                "optional": false
              },
              "outputs": {
                "name": "outputs",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1343
          },
          "ReportingMethod": {
            "name": "ReportingMethod",
            "body": "methodId: string;\r\n    name: string;\r\n    description: string;\r\n    format: string;\r\n    frequency: string;\r\n    audience: string[];\r\n    content: string[];",
            "properties": {
              "methodId": {
                "name": "methodId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "format": {
                "name": "format",
                "type": "string",
                "optional": false
              },
              "frequency": {
                "name": "frequency",
                "type": "string",
                "optional": false
              },
              "audience": {
                "name": "audience",
                "type": "string[]",
                "optional": false
              },
              "content": {
                "name": "content",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1355
          },
          "MeasurementGovernance": {
            "name": "MeasurementGovernance",
            "body": "roles: Role[];\r\n    responsibilities: Responsibility[];\r\n    processes: Process[];\r\n    standards: Standard[];",
            "properties": {
              "roles": {
                "name": "roles",
                "type": "Role[]",
                "optional": false
              },
              "responsibilities": {
                "name": "responsibilities",
                "type": "Responsibility[]",
                "optional": false
              },
              "processes": {
                "name": "processes",
                "type": "Process[]",
                "optional": false
              },
              "standards": {
                "name": "standards",
                "type": "Standard[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1368
          },
          "Role": {
            "name": "Role",
            "body": "roleId: string;\r\n    name: string;\r\n    description: string;\r\n    responsibilities: string[];\r\n    qualifications: string[];",
            "properties": {
              "roleId": {
                "name": "roleId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "responsibilities": {
                "name": "responsibilities",
                "type": "string[]",
                "optional": false
              },
              "qualifications": {
                "name": "qualifications",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1378
          },
          "Responsibility": {
            "name": "Responsibility",
            "body": "responsibilityId: string;\r\n    description: string;\r\n    owner: string;\r\n    scope: string;\r\n    frequency: string;",
            "properties": {
              "responsibilityId": {
                "name": "responsibilityId",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "owner": {
                "name": "owner",
                "type": "string",
                "optional": false
              },
              "scope": {
                "name": "scope",
                "type": "string",
                "optional": false
              },
              "frequency": {
                "name": "frequency",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1389
          },
          "Process": {
            "name": "Process",
            "body": "processId: string;\r\n    name: string;\r\n    description: string;\r\n    steps: ProcessStep[];\r\n    inputs: string[];\r\n    outputs: string[];\r\n    controls: string[];",
            "properties": {
              "processId": {
                "name": "processId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "steps": {
                "name": "steps",
                "type": "ProcessStep[]",
                "optional": false
              },
              "inputs": {
                "name": "inputs",
                "type": "string[]",
                "optional": false
              },
              "outputs": {
                "name": "outputs",
                "type": "string[]",
                "optional": false
              },
              "controls": {
                "name": "controls",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1400
          },
          "ProcessStep": {
            "name": "ProcessStep",
            "body": "stepId: string;\r\n    name: string;\r\n    description: string;\r\n    order: number;\r\n    duration: string;\r\n    owner: string;\r\n    inputs: string[];\r\n    outputs: string[];",
            "properties": {
              "stepId": {
                "name": "stepId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "order": {
                "name": "order",
                "type": "number",
                "optional": false
              },
              "duration": {
                "name": "duration",
                "type": "string",
                "optional": false
              },
              "owner": {
                "name": "owner",
                "type": "string",
                "optional": false
              },
              "inputs": {
                "name": "inputs",
                "type": "string[]",
                "optional": false
              },
              "outputs": {
                "name": "outputs",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1413
          },
          "Standard": {
            "name": "Standard",
            "body": "standardId: string;\r\n    name: string;\r\n    description: string;\r\n    version: string;\r\n    applicability: string[];\r\n    requirements: string[];\r\n    compliance: string;",
            "properties": {
              "standardId": {
                "name": "standardId",
                "type": "string",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "version": {
                "name": "version",
                "type": "string",
                "optional": false
              },
              "applicability": {
                "name": "applicability",
                "type": "string[]",
                "optional": false
              },
              "requirements": {
                "name": "requirements",
                "type": "string[]",
                "optional": false
              },
              "compliance": {
                "name": "compliance",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1427
          },
          "ContinuousImprovementPlan": {
            "name": "ContinuousImprovementPlan",
            "body": "planId: string;\r\n    cycle: 'PDCA' | 'DMAIC' | 'custom';\r\n    frequency: string;\r\n    reviewProcess: ReviewProcess;\r\n    improvementActions: ImprovementAction[];\r\n    learningCapture: LearningCapture;",
            "properties": {
              "planId": {
                "name": "planId",
                "type": "string",
                "optional": false
              },
              "cycle": {
                "name": "cycle",
                "type": "'PDCA' | 'DMAIC' | 'custom'",
                "optional": false
              },
              "frequency": {
                "name": "frequency",
                "type": "string",
                "optional": false
              },
              "reviewProcess": {
                "name": "reviewProcess",
                "type": "ReviewProcess",
                "optional": false
              },
              "improvementActions": {
                "name": "improvementActions",
                "type": "ImprovementAction[]",
                "optional": false
              },
              "learningCapture": {
                "name": "learningCapture",
                "type": "LearningCapture",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1440
          },
          "ReviewProcess": {
            "name": "ReviewProcess",
            "body": "processId: string;\r\n    frequency: string;\r\n    participants: string[];\r\n    agenda: string[];\r\n    outputs: string[];\r\n    followUp: string[];",
            "properties": {
              "processId": {
                "name": "processId",
                "type": "string",
                "optional": false
              },
              "frequency": {
                "name": "frequency",
                "type": "string",
                "optional": false
              },
              "participants": {
                "name": "participants",
                "type": "string[]",
                "optional": false
              },
              "agenda": {
                "name": "agenda",
                "type": "string[]",
                "optional": false
              },
              "outputs": {
                "name": "outputs",
                "type": "string[]",
                "optional": false
              },
              "followUp": {
                "name": "followUp",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1452
          },
          "ImprovementAction": {
            "name": "ImprovementAction",
            "body": "actionId: string;\r\n    description: string;\r\n    priority: number; // 0-10\r\n    effort: string;\r\n    impact: string;\r\n    owner: string;\r\n    dueDate: string;\r\n    status: string;",
            "properties": {
              "actionId": {
                "name": "actionId",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "priority": {
                "name": "priority",
                "type": "number",
                "optional": false
              },
              "effort": {
                "name": "effort",
                "type": "string",
                "optional": false
              },
              "impact": {
                "name": "impact",
                "type": "string",
                "optional": false
              },
              "owner": {
                "name": "owner",
                "type": "string",
                "optional": false
              },
              "dueDate": {
                "name": "dueDate",
                "type": "string",
                "optional": false
              },
              "status": {
                "name": "status",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1464
          },
          "LearningCapture": {
            "name": "LearningCapture",
            "body": "method: string;\r\n    frequency: string;\r\n    documentation: string[];\r\n    sharing: string[];\r\n    application: string[];",
            "properties": {
              "method": {
                "name": "method",
                "type": "string",
                "optional": false
              },
              "frequency": {
                "name": "frequency",
                "type": "string",
                "optional": false
              },
              "documentation": {
                "name": "documentation",
                "type": "string[]",
                "optional": false
              },
              "sharing": {
                "name": "sharing",
                "type": "string[]",
                "optional": false
              },
              "application": {
                "name": "application",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 1478
          }
        },
        "types": {},
        "enums": {},
        "imports": [],
        "exports": [
          "PromptGenerationPattern",
          "PromptVariable",
          "PromptCondition",
          "VariableConstraint",
          "EffectivenessMetrics",
          "UsageStatistics",
          "PerformanceMetrics",
          "SuccessCase",
          "FailureCase",
          "OptimizationRecord",
          "EffectiveTemplatePattern",
          "TemplateStructure",
          "TemplateSection",
          "TemplatePlaceholder",
          "PlaceholderTransformation",
          "BestPractice",
          "CommonMistake",
          "MistakeExample",
          "ApplicableContext",
          "TemplateVariation",
          "TemplateDifference",
          "TemplateEvolution",
          "TemplateChange",
          "FeedbackData",
          "ValidationRule",
          "Evidence",
          "AnalysisPattern",
          "AnalysisMethodology",
          "AnalysisStep",
          "ProcessingInstruction",
          "AnalysisParameter",
          "AccuracyMetrics",
          "ReliabilityMetrics",
          "InputRequirement",
          "OutputFormat",
          "PostProcessingStep",
          "TrainingData",
          "ValidationResult",
          "ImprovementRecord",
          "OptimizationStrategy",
          "OptimizationApproach",
          "OptimizationPhase",
          "OptimizationTechnique",
          "TechniqueStep",
          "ResourceRequirement",
          "Benefit",
          "ImpactMeasurement",
          "OptimizationScenario",
          "Prerequisite",
          "OptimizationConstraint",
          "ImplementationGuide",
          "ImplementationStep",
          "Checkpoint",
          "CheckpointAction",
          "TroubleshootingGuide",
          "DiagnosisStep",
          "Solution",
          "RollbackPlan",
          "RollbackTrigger",
          "RollbackStep",
          "DataRecoveryPlan",
          "MonitoringMetric",
          "MetricThreshold",
          "AlertThreshold",
          "ErrorPattern",
          "ErrorSymptom",
          "RootCause",
          "FrequencyData",
          "TrendData",
          "SeverityData",
          "ErrorImpact",
          "DetectionMethod",
          "EarlyWarning",
          "ErrorSolution",
          "SolutionStep",
          "PreventionMeasure",
          "ErrorOccurrence",
          "ErrorResolution",
          "QualityImprovementStrategy",
          "QualityApproach",
          "QualityPhase",
          "QualityMetric",
          "QualityTarget",
          "QualityTechnique",
          "QualityTool",
          "QualityImplementationPlan",
          "ImplementationPhase",
          "Activity",
          "ResourceAllocation",
          "Timeline",
          "Risk",
          "Dependency",
          "QualityMilestone",
          "MeasurementFramework",
          "DataCollectionMethod",
          "AnalysisMethod",
          "ReportingMethod",
          "MeasurementGovernance",
          "Role",
          "Responsibility",
          "Process",
          "ProcessStep",
          "Standard",
          "ContinuousImprovementPlan",
          "ReviewProcess",
          "ImprovementAction",
          "LearningCapture"
        ],
        "inlineTypes": [],
        "generics": [
          "string, any"
        ],
        "extendedTypes": [],
        "dataModelTypes": [
          {
            "name": "OptimizationRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "OptimizationRecord",
              "body": "optimizationId: string;\r\n    optimizationType: 'parameter' | 'structure' | 'logic' | 'performance';\r\n    before: any;\r\n    after: any;\r\n    reason: string;\r\n    expectedImprovement: string;\r\n    actualImprovement?: EffectivenessMetrics;\r\n    timestamp: string;\r\n    optimizedBy: string;",
              "properties": {
                "optimizationId": {
                  "name": "optimizationId",
                  "type": "string",
                  "optional": false
                },
                "optimizationType": {
                  "name": "optimizationType",
                  "type": "'parameter' | 'structure' | 'logic' | 'performance'",
                  "optional": false
                },
                "before": {
                  "name": "before",
                  "type": "any",
                  "optional": false
                },
                "after": {
                  "name": "after",
                  "type": "any",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                },
                "expectedImprovement": {
                  "name": "expectedImprovement",
                  "type": "string",
                  "optional": false
                },
                "actualImprovement": {
                  "name": "actualImprovement",
                  "type": "EffectivenessMetrics",
                  "optional": true
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "optimizedBy": {
                  "name": "optimizedBy",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 150
            }
          },
          {
            "name": "FeedbackData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "FeedbackData",
              "body": "feedbackId: string;\r\n    source: 'user' | 'system' | 'ai' | 'automated';\r\n    type: 'quality' | 'usability' | 'performance' | 'bug' | 'suggestion';\r\n    rating: number; // 0-10\r\n    comment: string;\r\n    context: Record<string, any>;\r\n    timestamp: string;\r\n    actionTaken?: string;",
              "properties": {
                "feedbackId": {
                  "name": "feedbackId",
                  "type": "string",
                  "optional": false
                },
                "source": {
                  "name": "source",
                  "type": "'user' | 'system' | 'ai' | 'automated'",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'quality' | 'usability' | 'performance' | 'bug' | 'suggestion'",
                  "optional": false
                },
                "rating": {
                  "name": "rating",
                  "type": "number",
                  "optional": false
                },
                "comment": {
                  "name": "comment",
                  "type": "string",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "Record<string",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "actionTaken": {
                  "name": "actionTaken",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 344
            }
          },
          {
            "name": "TrainingData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "TrainingData",
              "body": "dataId: string;\r\n    input: any;\r\n    expectedOutput: any;\r\n    actualOutput?: any;\r\n    quality: number; // 0-10\r\n    source: string;\r\n    timestamp: string;\r\n    tags: string[];",
              "properties": {
                "dataId": {
                  "name": "dataId",
                  "type": "string",
                  "optional": false
                },
                "input": {
                  "name": "input",
                  "type": "any",
                  "optional": false
                },
                "expectedOutput": {
                  "name": "expectedOutput",
                  "type": "any",
                  "optional": false
                },
                "actualOutput": {
                  "name": "actualOutput",
                  "type": "any",
                  "optional": true
                },
                "quality": {
                  "name": "quality",
                  "type": "number",
                  "optional": false
                },
                "source": {
                  "name": "source",
                  "type": "string",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "tags": {
                  "name": "tags",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 527
            }
          },
          {
            "name": "ImprovementRecord",
            "category": "DATA_MODEL",
            "definition": {
              "name": "ImprovementRecord",
              "body": "improvementId: string;\r\n    type: 'algorithm' | 'parameter' | 'data' | 'validation';\r\n    description: string;\r\n    before: any;\r\n    after: any;\r\n    improvement: number; // percentage\r\n    impact: AccuracyMetrics;\r\n    timestamp: string;\r\n    implementedBy: string;",
              "properties": {
                "improvementId": {
                  "name": "improvementId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'algorithm' | 'parameter' | 'data' | 'validation'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "before": {
                  "name": "before",
                  "type": "any",
                  "optional": false
                },
                "after": {
                  "name": "after",
                  "type": "any",
                  "optional": false
                },
                "improvement": {
                  "name": "improvement",
                  "type": "number",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "AccuracyMetrics",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "implementedBy": {
                  "name": "implementedBy",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 556
            }
          },
          {
            "name": "DataRecoveryPlan",
            "category": "DATA_MODEL",
            "definition": {
              "name": "DataRecoveryPlan",
              "body": "planId: string;\r\n    description: string;\r\n    backupStrategy: string;\r\n    recoverySteps: string[];\r\n    timeRequired: string;\r\n    dataIntegrityChecks: string[];",
              "properties": {
                "planId": {
                  "name": "planId",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "backupStrategy": {
                  "name": "backupStrategy",
                  "type": "string",
                  "optional": false
                },
                "recoverySteps": {
                  "name": "recoverySteps",
                  "type": "string[]",
                  "optional": false
                },
                "timeRequired": {
                  "name": "timeRequired",
                  "type": "string",
                  "optional": false
                },
                "dataIntegrityChecks": {
                  "name": "dataIntegrityChecks",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 845
            }
          },
          {
            "name": "FrequencyData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "FrequencyData",
              "body": "occurrencesPerDay: number;\r\n    occurrencesPerWeek: number;\r\n    occurrencesPerMonth: number;\r\n    peakTimes: string[];\r\n    trends: TrendData[];",
              "properties": {
                "occurrencesPerDay": {
                  "name": "occurrencesPerDay",
                  "type": "number",
                  "optional": false
                },
                "occurrencesPerWeek": {
                  "name": "occurrencesPerWeek",
                  "type": "number",
                  "optional": false
                },
                "occurrencesPerMonth": {
                  "name": "occurrencesPerMonth",
                  "type": "number",
                  "optional": false
                },
                "peakTimes": {
                  "name": "peakTimes",
                  "type": "string[]",
                  "optional": false
                },
                "trends": {
                  "name": "trends",
                  "type": "TrendData[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 953
            }
          },
          {
            "name": "TrendData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "TrendData",
              "body": "period: string;\r\n    direction: 'increasing' | 'decreasing' | 'stable' | 'volatile';\r\n    changeRate: number; // percentage\r\n    confidence: number; // 0-1",
              "properties": {
                "period": {
                  "name": "period",
                  "type": "string",
                  "optional": false
                },
                "direction": {
                  "name": "direction",
                  "type": "'increasing' | 'decreasing' | 'stable' | 'volatile'",
                  "optional": false
                },
                "changeRate": {
                  "name": "changeRate",
                  "type": "number",
                  "optional": false
                },
                "confidence": {
                  "name": "confidence",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 964
            }
          },
          {
            "name": "SeverityData",
            "category": "DATA_MODEL",
            "definition": {
              "name": "SeverityData",
              "body": "userImpact: number; // 0-10\r\n    systemImpact: number; // 0-10\r\n    businessImpact: number; // 0-10\r\n    recoveryDifficulty: number; // 0-10\r\n    overallSeverity: number; // 0-10",
              "properties": {
                "userImpact": {
                  "name": "userImpact",
                  "type": "number",
                  "optional": false
                },
                "systemImpact": {
                  "name": "systemImpact",
                  "type": "number",
                  "optional": false
                },
                "businessImpact": {
                  "name": "businessImpact",
                  "type": "number",
                  "optional": false
                },
                "recoveryDifficulty": {
                  "name": "recoveryDifficulty",
                  "type": "number",
                  "optional": false
                },
                "overallSeverity": {
                  "name": "overallSeverity",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 974
            }
          },
          {
            "name": "DataCollectionMethod",
            "category": "DATA_MODEL",
            "definition": {
              "name": "DataCollectionMethod",
              "body": "methodId: string;\r\n    name: string;\r\n    description: string;\r\n    type: 'automated' | 'manual' | 'survey' | 'observation';\r\n    frequency: string;\r\n    dataPoints: string[];\r\n    quality: number; // 0-10",
              "properties": {
                "methodId": {
                  "name": "methodId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'automated' | 'manual' | 'survey' | 'observation'",
                  "optional": false
                },
                "frequency": {
                  "name": "frequency",
                  "type": "string",
                  "optional": false
                },
                "dataPoints": {
                  "name": "dataPoints",
                  "type": "string[]",
                  "optional": false
                },
                "quality": {
                  "name": "quality",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1330
            }
          }
        ],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": []
      },
      "lib\\memory\\long-term\\types.ts": {
        "filePath": "lib\\memory\\long-term\\types.ts",
        "fileSize": 17804,
        "system": "memory",
        "module": "memory/long-term",
        "interfaces": {
          "ManagerConstructorOptions": {
            "name": "ManagerConstructorOptions",
            "body": "geminiClient?: GeminiClient;",
            "properties": {
              "geminiClient": {
                "name": "geminiClient",
                "type": "GeminiClient",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 97
          },
          "UpdateOptions": {
            "name": "UpdateOptions",
            "body": "genre?: string;\r\n    totalChapters?: number;\r\n    currentArcNumber?: number;",
            "properties": {
              "genre": {
                "name": "genre",
                "type": "string",
                "optional": true
              },
              "totalChapters": {
                "name": "totalChapters",
                "type": "number",
                "optional": true
              },
              "currentArcNumber": {
                "name": "currentArcNumber",
                "type": "number",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 105
          },
          "IManager": {
            "name": "IManager",
            "body": "initialize(): Promise<void>;\r\n    updateFromChapter(chapter: Chapter, options?: UpdateOptions): Promise<void>;\r\n    save(): Promise<void>;",
            "properties": {
              "chapter": {
                "name": "chapter",
                "type": "Chapter",
                "optional": false
              },
              "options": {
                "name": "options",
                "type": "UpdateOptions): Promise<void>",
                "optional": true
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 115
          },
          "NarrativeStateInfo": {
            "name": "NarrativeStateInfo",
            "body": "state: NarrativeState;\r\n    tensionLevel: number;\r\n    stagnationDetected: boolean;\r\n    suggestedNextState?: NarrativeState;\r\n    duration: number;\r\n    location: string;\r\n    timeOfDay: string;\r\n    weather: string;\r\n    presentCharacters: string[];\r\n    genre: string;\r\n    \r\n    // 内部状態\r\n    currentArcNumber: number;\r\n    currentTheme: string;\r\n    arcStartChapter: number;\r\n    arcEndChapter: number;\r\n    arcCompleted: boolean;\r\n    turningPoints: TurningPoint[];\r\n    \r\n    // 指標情報\r\n    metrics?: NarrativeMetrics;\r\n    totalChapters?: number;\r\n    \r\n    // 進行情報\r\n    progressionInstruction?: string;",
            "properties": {
              "state": {
                "name": "state",
                "type": "NarrativeState",
                "optional": false
              },
              "tensionLevel": {
                "name": "tensionLevel",
                "type": "number",
                "optional": false
              },
              "stagnationDetected": {
                "name": "stagnationDetected",
                "type": "boolean",
                "optional": false
              },
              "suggestedNextState": {
                "name": "suggestedNextState",
                "type": "NarrativeState",
                "optional": true
              },
              "duration": {
                "name": "duration",
                "type": "number",
                "optional": false
              },
              "location": {
                "name": "location",
                "type": "string",
                "optional": false
              },
              "timeOfDay": {
                "name": "timeOfDay",
                "type": "string",
                "optional": false
              },
              "weather": {
                "name": "weather",
                "type": "string",
                "optional": false
              },
              "presentCharacters": {
                "name": "presentCharacters",
                "type": "string[]",
                "optional": false
              },
              "genre": {
                "name": "genre",
                "type": "string",
                "optional": false
              },
              "currentArcNumber": {
                "name": "currentArcNumber",
                "type": "number",
                "optional": false
              },
              "currentTheme": {
                "name": "currentTheme",
                "type": "string",
                "optional": false
              },
              "arcStartChapter": {
                "name": "arcStartChapter",
                "type": "number",
                "optional": false
              },
              "arcEndChapter": {
                "name": "arcEndChapter",
                "type": "number",
                "optional": false
              },
              "arcCompleted": {
                "name": "arcCompleted",
                "type": "boolean",
                "optional": false
              },
              "turningPoints": {
                "name": "turningPoints",
                "type": "TurningPoint[]",
                "optional": false
              },
              "metrics": {
                "name": "metrics",
                "type": "NarrativeMetrics",
                "optional": true
              },
              "totalChapters": {
                "name": "totalChapters",
                "type": "number",
                "optional": true
              },
              "progressionInstruction": {
                "name": "progressionInstruction",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 129
          },
          "StateTransition": {
            "name": "StateTransition",
            "body": "fromState: NarrativeState;\r\n    toState: NarrativeState;\r\n    chapter: number;\r\n    timestamp: string;\r\n    keyEvent?: string;",
            "properties": {
              "fromState": {
                "name": "fromState",
                "type": "NarrativeState",
                "optional": false
              },
              "toState": {
                "name": "toState",
                "type": "NarrativeState",
                "optional": false
              },
              "chapter": {
                "name": "chapter",
                "type": "number",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              },
              "keyEvent": {
                "name": "keyEvent",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 161
          },
          "StagnationDetectionResult": {
            "name": "StagnationDetectionResult",
            "body": "detected: boolean;\r\n    cause: string;\r\n    score: number;\r\n    severity: 'LOW' | 'MEDIUM' | 'HIGH';\r\n    recommendations: string[];",
            "properties": {
              "detected": {
                "name": "detected",
                "type": "boolean",
                "optional": false
              },
              "cause": {
                "name": "cause",
                "type": "string",
                "optional": false
              },
              "score": {
                "name": "score",
                "type": "number",
                "optional": false
              },
              "severity": {
                "name": "severity",
                "type": "'LOW' | 'MEDIUM' | 'HIGH'",
                "optional": false
              },
              "recommendations": {
                "name": "recommendations",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 173
          },
          "TurningPoint": {
            "name": "TurningPoint",
            "body": "chapter: number;\r\n    description: string;\r\n    significance: number;\r\n    timestamp?: string;",
            "properties": {
              "chapter": {
                "name": "chapter",
                "type": "number",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "significance": {
                "name": "significance",
                "type": "number",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 185
          },
          "CharacterProgress": {
            "name": "CharacterProgress",
            "body": "name: string;\r\n    firstAppearance: number;\r\n    lastAppearance: number;\r\n    appearanceCount: number;\r\n    developmentPoints: {\r\n        chapter: number;\r\n        event: string;\r\n        timestamp: string;",
            "properties": {
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "firstAppearance": {
                "name": "firstAppearance",
                "type": "number",
                "optional": false
              },
              "lastAppearance": {
                "name": "lastAppearance",
                "type": "number",
                "optional": false
              },
              "appearanceCount": {
                "name": "appearanceCount",
                "type": "number",
                "optional": false
              },
              "developmentPoints": {
                "name": "developmentPoints",
                "type": "{",
                "optional": false
              },
              "chapter": {
                "name": "chapter",
                "type": "number",
                "optional": false
              },
              "event": {
                "name": "event",
                "type": "string",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 200
          },
          "CharacterChangeInfo": {
            "name": "CharacterChangeInfo",
            "body": "attribute: string;\r\n    previousValue: any;\r\n    currentValue: any;\r\n    classification?: {\r\n        type: string;\r\n        scope: string;\r\n        confidence: number;\r\n        explanation: string;\r\n        narrativeSignificance?: number;",
            "properties": {
              "attribute": {
                "name": "attribute",
                "type": "string",
                "optional": false
              },
              "previousValue": {
                "name": "previousValue",
                "type": "any",
                "optional": false
              },
              "currentValue": {
                "name": "currentValue",
                "type": "any",
                "optional": false
              },
              "classification": {
                "name": "classification",
                "type": "{",
                "optional": true
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "scope": {
                "name": "scope",
                "type": "string",
                "optional": false
              },
              "confidence": {
                "name": "confidence",
                "type": "number",
                "optional": false
              },
              "explanation": {
                "name": "explanation",
                "type": "string",
                "optional": false
              },
              "narrativeSignificance": {
                "name": "narrativeSignificance",
                "type": "number",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 216
          },
          "ChapterSummary": {
            "name": "ChapterSummary",
            "body": "chapterNumber: number;\r\n    summary: string;\r\n    timestamp: string;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "summary": {
                "name": "summary",
                "type": "string",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 237
          },
          "ChapterMemory": {
            "name": "ChapterMemory",
            "body": "chapter: number;\r\n    summary: string;\r\n    key_events?: KeyEvent[];\r\n    character_states?: CharacterState[];\r\n    timestamp: string;\r\n    emotional_impact: number;\r\n    plot_significance: number;\r\n    foreshadowing?: Foreshadowing[];\r\n    resolved_foreshadowing?: {\r\n        id: string;\r\n        description: string;\r\n        resolution: string;",
            "properties": {
              "chapter": {
                "name": "chapter",
                "type": "number",
                "optional": false
              },
              "summary": {
                "name": "summary",
                "type": "string",
                "optional": false
              },
              "key_events": {
                "name": "key_events",
                "type": "KeyEvent[]",
                "optional": true
              },
              "character_states": {
                "name": "character_states",
                "type": "CharacterState[]",
                "optional": true
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              },
              "emotional_impact": {
                "name": "emotional_impact",
                "type": "number",
                "optional": false
              },
              "plot_significance": {
                "name": "plot_significance",
                "type": "number",
                "optional": false
              },
              "foreshadowing": {
                "name": "foreshadowing",
                "type": "Foreshadowing[]",
                "optional": true
              },
              "resolved_foreshadowing": {
                "name": "resolved_foreshadowing",
                "type": "{",
                "optional": true
              },
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "resolution": {
                "name": "resolution",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 247
          },
          "KeyEvent": {
            "name": "KeyEvent",
            "body": "event: string;\r\n    chapter: number;\r\n    significance: number;\r\n    location?: string;\r\n    characters?: string[];",
            "properties": {
              "event": {
                "name": "event",
                "type": "string",
                "optional": false
              },
              "chapter": {
                "name": "chapter",
                "type": "number",
                "optional": false
              },
              "significance": {
                "name": "significance",
                "type": "number",
                "optional": false
              },
              "location": {
                "name": "location",
                "type": "string",
                "optional": true
              },
              "characters": {
                "name": "characters",
                "type": "string[]",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 269
          },
          "CharacterState": {
            "name": "CharacterState",
            "body": "name: string;\r\n    mood?: string;\r\n    development?: string;\r\n    relationships?: Relationship[];",
            "properties": {
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "mood": {
                "name": "mood",
                "type": "string",
                "optional": true
              },
              "development": {
                "name": "development",
                "type": "string",
                "optional": true
              },
              "relationships": {
                "name": "relationships",
                "type": "Relationship[]",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 281
          },
          "Relationship": {
            "name": "Relationship",
            "body": "character: string;\r\n    relation: string;\r\n    trust_level?: number;",
            "properties": {
              "character": {
                "name": "character",
                "type": "string",
                "optional": false
              },
              "relation": {
                "name": "relation",
                "type": "string",
                "optional": false
              },
              "trust_level": {
                "name": "trust_level",
                "type": "number",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 292
          },
          "EmotionalCurvePoint": {
            "name": "EmotionalCurvePoint",
            "body": "chapter: number;\r\n    tension: number;\r\n    emotion: string;\r\n    event?: string;",
            "properties": {
              "chapter": {
                "name": "chapter",
                "type": "number",
                "optional": false
              },
              "tension": {
                "name": "tension",
                "type": "number",
                "optional": false
              },
              "emotion": {
                "name": "emotion",
                "type": "string",
                "optional": false
              },
              "event": {
                "name": "event",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 306
          },
          "ChapterEmotionAnalysis": {
            "name": "ChapterEmotionAnalysis",
            "body": "emotionalDimensions: {\r\n        hopeVsDespair: { start: number, middle: number, end: number",
            "properties": {
              "emotionalDimensions": {
                "name": "emotionalDimensions",
                "type": "{",
                "optional": false
              },
              "hopeVsDespair": {
                "name": "hopeVsDespair",
                "type": "{ start: number",
                "optional": false
              },
              "middle": {
                "name": "middle",
                "type": "number",
                "optional": false
              },
              "end": {
                "name": "end",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 317
          },
          "EmotionalArcDesign": {
            "name": "EmotionalArcDesign",
            "body": "recommendedTone: string;\r\n    emotionalJourney: {\r\n        opening: { dimension: string; level: number",
            "properties": {
              "recommendedTone": {
                "name": "recommendedTone",
                "type": "string",
                "optional": false
              },
              "emotionalJourney": {
                "name": "emotionalJourney",
                "type": "{",
                "optional": false
              },
              "opening": {
                "name": "opening",
                "type": "{ dimension: string",
                "optional": false
              },
              "level": {
                "name": "level",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 333
          },
          "TensionRecommendation": {
            "name": "TensionRecommendation",
            "body": "recommendedTension: number;\r\n    reason: string;\r\n    direction: \"increase\" | \"decrease\" | \"maintain\" | \"establish\";",
            "properties": {
              "recommendedTension": {
                "name": "recommendedTension",
                "type": "number",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": false
              },
              "direction": {
                "name": "direction",
                "type": "\"increase\" | \"decrease\" | \"maintain\" | \"establish\"",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 347
          },
          "PacingRecommendation": {
            "name": "PacingRecommendation",
            "body": "recommendedPacing: number;\r\n    description: string;",
            "properties": {
              "recommendedPacing": {
                "name": "recommendedPacing",
                "type": "number",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 357
          },
          "TensionPacingRecommendation": {
            "name": "TensionPacingRecommendation",
            "body": "tension: TensionRecommendation;\r\n    pacing: PacingRecommendation;",
            "properties": {
              "tension": {
                "name": "tension",
                "type": "TensionRecommendation",
                "optional": false
              },
              "pacing": {
                "name": "pacing",
                "type": "PacingRecommendation",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 366
          },
          "Foreshadowing": {
            "name": "Foreshadowing",
            "body": "id: string;\r\n    description: string;\r\n    chapter_introduced: number;\r\n    potential_resolution?: string;\r\n    resolved: boolean;\r\n    resolution_chapter?: number;\r\n    resolution_description?: string;\r\n    significance?: number;\r\n    urgency: string;\r\n    context?: string;\r\n    plannedResolution?: number;\r\n    createdTimestamp: string;\r\n    updatedTimestamp: string;\r\n    relatedCharacters?: string[];\r\n    relatedElements?: string[];\r\n    evaluation?: ForeshadowingEvaluation;\r\n    introductionMethod?: string;\r\n    metadata?: {\r\n        type: string;\r\n        conceptName: string;\r\n        characterId: string;\r\n        fromStage: string;\r\n        toStage: string;\r\n        transformationCatalyst: string;",
            "properties": {
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "chapter_introduced": {
                "name": "chapter_introduced",
                "type": "number",
                "optional": false
              },
              "potential_resolution": {
                "name": "potential_resolution",
                "type": "string",
                "optional": true
              },
              "resolved": {
                "name": "resolved",
                "type": "boolean",
                "optional": false
              },
              "resolution_chapter": {
                "name": "resolution_chapter",
                "type": "number",
                "optional": true
              },
              "resolution_description": {
                "name": "resolution_description",
                "type": "string",
                "optional": true
              },
              "significance": {
                "name": "significance",
                "type": "number",
                "optional": true
              },
              "urgency": {
                "name": "urgency",
                "type": "string",
                "optional": false
              },
              "context": {
                "name": "context",
                "type": "string",
                "optional": true
              },
              "plannedResolution": {
                "name": "plannedResolution",
                "type": "number",
                "optional": true
              },
              "createdTimestamp": {
                "name": "createdTimestamp",
                "type": "string",
                "optional": false
              },
              "updatedTimestamp": {
                "name": "updatedTimestamp",
                "type": "string",
                "optional": false
              },
              "relatedCharacters": {
                "name": "relatedCharacters",
                "type": "string[]",
                "optional": true
              },
              "relatedElements": {
                "name": "relatedElements",
                "type": "string[]",
                "optional": true
              },
              "evaluation": {
                "name": "evaluation",
                "type": "ForeshadowingEvaluation",
                "optional": true
              },
              "introductionMethod": {
                "name": "introductionMethod",
                "type": "string",
                "optional": true
              },
              "metadata": {
                "name": "metadata",
                "type": "{",
                "optional": true
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "conceptName": {
                "name": "conceptName",
                "type": "string",
                "optional": false
              },
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "fromStage": {
                "name": "fromStage",
                "type": "string",
                "optional": false
              },
              "toStage": {
                "name": "toStage",
                "type": "string",
                "optional": false
              },
              "transformationCatalyst": {
                "name": "transformationCatalyst",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 379
          },
          "ForeshadowingEvaluation": {
            "name": "ForeshadowingEvaluation",
            "body": "integrationScore: number;\r\n    narrativeRelevance: number;\r\n    subtlety: number;\r\n    payoffPotential: number;",
            "properties": {
              "integrationScore": {
                "name": "integrationScore",
                "type": "number",
                "optional": false
              },
              "narrativeRelevance": {
                "name": "narrativeRelevance",
                "type": "number",
                "optional": false
              },
              "subtlety": {
                "name": "subtlety",
                "type": "number",
                "optional": false
              },
              "payoffPotential": {
                "name": "payoffPotential",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 411
          },
          "ForeshadowingMethodSuggestion": {
            "name": "ForeshadowingMethodSuggestion",
            "body": "method: string;\r\n    description: string;\r\n    suitability: number;",
            "properties": {
              "method": {
                "name": "method",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "suitability": {
                "name": "suitability",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 422
          },
          "ArcMemory": {
            "name": "ArcMemory",
            "body": "number: number;\r\n    arc_name?: string;\r\n    theme: string;\r\n    themes?: string[];\r\n    chapter_range: { start: number; end: number",
            "properties": {
              "number": {
                "name": "number",
                "type": "number",
                "optional": false
              },
              "arc_name": {
                "name": "arc_name",
                "type": "string",
                "optional": true
              },
              "theme": {
                "name": "theme",
                "type": "string",
                "optional": false
              },
              "themes": {
                "name": "themes",
                "type": "string[]",
                "optional": true
              },
              "chapter_range": {
                "name": "chapter_range",
                "type": "{ start: number",
                "optional": false
              },
              "end": {
                "name": "end",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 436
          },
          "CompressedMemory": {
            "name": "CompressedMemory",
            "body": "timeframe: { start: number; end: number",
            "properties": {
              "timeframe": {
                "name": "timeframe",
                "type": "{ start: number",
                "optional": false
              },
              "end": {
                "name": "end",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 456
          },
          "NarrativeMetrics": {
            "name": "NarrativeMetrics",
            "body": "pacing: number;\r\n    complexity: number;\r\n    novelty: number;\r\n    coherence: number;\r\n    characterFocus: Record<string, number>;\r\n    emotionalTone: string;",
            "properties": {
              "pacing": {
                "name": "pacing",
                "type": "number",
                "optional": false
              },
              "complexity": {
                "name": "complexity",
                "type": "number",
                "optional": false
              },
              "novelty": {
                "name": "novelty",
                "type": "number",
                "optional": false
              },
              "coherence": {
                "name": "coherence",
                "type": "number",
                "optional": false
              },
              "characterFocus": {
                "name": "characterFocus",
                "type": "Record<string",
                "optional": false
              },
              "emotionalTone": {
                "name": "emotionalTone",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 477
          },
          "ThemeResonanceAnalysis": {
            "name": "ThemeResonanceAnalysis",
            "body": "strength: number;\r\n    dominantExpressions: string[];\r\n    resonanceHistory?: {\r\n        chapter: number;\r\n        strength: number;\r\n        dominantExpressions: string[];",
            "properties": {
              "strength": {
                "name": "strength",
                "type": "number",
                "optional": false
              },
              "dominantExpressions": {
                "name": "dominantExpressions",
                "type": "string[]",
                "optional": false
              },
              "resonanceHistory": {
                "name": "resonanceHistory",
                "type": "{",
                "optional": true
              },
              "chapter": {
                "name": "chapter",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 490
          },
          "SignificantEvent": {
            "name": "SignificantEvent",
            "body": "id: string;\r\n    chapterNumber: number;\r\n    description: string;\r\n    involvedCharacters: string[];\r\n    location: string;\r\n    type: string;\r\n    significance: number;\r\n    consequence?: string;\r\n    relatedEvents?: string[];\r\n    timestamp?: string;\r\n    isPersistent?: boolean;\r\n    isResolved?: boolean;\r\n    resolvedInChapter?: number;\r\n    primaryCharacterId?: string;\r\n    relatedElements?: string[];\r\n    affectedAttributes?: string[];\r\n    relatedGrowthPhaseId?: string;\r\n    relatedEventPlanId?: string;\r\n    parameterChanges?: Array<{\r\n        characterId: string;\r\n        parameterId: string;\r\n        previousValue: number;\r\n        newValue: number;",
            "properties": {
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "involvedCharacters": {
                "name": "involvedCharacters",
                "type": "string[]",
                "optional": false
              },
              "location": {
                "name": "location",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "significance": {
                "name": "significance",
                "type": "number",
                "optional": false
              },
              "consequence": {
                "name": "consequence",
                "type": "string",
                "optional": true
              },
              "relatedEvents": {
                "name": "relatedEvents",
                "type": "string[]",
                "optional": true
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": true
              },
              "isPersistent": {
                "name": "isPersistent",
                "type": "boolean",
                "optional": true
              },
              "isResolved": {
                "name": "isResolved",
                "type": "boolean",
                "optional": true
              },
              "resolvedInChapter": {
                "name": "resolvedInChapter",
                "type": "number",
                "optional": true
              },
              "primaryCharacterId": {
                "name": "primaryCharacterId",
                "type": "string",
                "optional": true
              },
              "relatedElements": {
                "name": "relatedElements",
                "type": "string[]",
                "optional": true
              },
              "affectedAttributes": {
                "name": "affectedAttributes",
                "type": "string[]",
                "optional": true
              },
              "relatedGrowthPhaseId": {
                "name": "relatedGrowthPhaseId",
                "type": "string",
                "optional": true
              },
              "relatedEventPlanId": {
                "name": "relatedEventPlanId",
                "type": "string",
                "optional": true
              },
              "parameterChanges": {
                "name": "parameterChanges",
                "type": "Array<{",
                "optional": true
              },
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "parameterId": {
                "name": "parameterId",
                "type": "string",
                "optional": false
              },
              "previousValue": {
                "name": "previousValue",
                "type": "number",
                "optional": false
              },
              "newValue": {
                "name": "newValue",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 508
          },
          "BusinessEvent": {
            "name": "BusinessEvent",
            "body": "title: string;\r\n    chapterNumber: number;\r\n    description: string;\r\n    impact?: string;\r\n    involvedParties?: string[];",
            "properties": {
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "impact": {
                "name": "impact",
                "type": "string",
                "optional": true
              },
              "involvedParties": {
                "name": "involvedParties",
                "type": "string[]",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 550
          },
          "BusinessStoryEvent": {
            "name": "BusinessStoryEvent",
            "body": "type: BusinessEventType;\r\n    significance: number;\r\n    details?: any;",
            "properties": {
              "type": {
                "name": "type",
                "type": "BusinessEventType",
                "optional": false
              },
              "significance": {
                "name": "significance",
                "type": "number",
                "optional": false
              },
              "details": {
                "name": "details",
                "type": "any",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 562
          },
          "NarrativeMemoryStatus": {
            "name": "NarrativeMemoryStatus",
            "body": "initialized: boolean;\r\n    summaryCount: number;\r\n    currentState: NarrativeState;\r\n    lastUpdateTime: string | null;",
            "properties": {
              "initialized": {
                "name": "initialized",
                "type": "boolean",
                "optional": false
              },
              "summaryCount": {
                "name": "summaryCount",
                "type": "number",
                "optional": false
              },
              "currentState": {
                "name": "currentState",
                "type": "NarrativeState",
                "optional": false
              },
              "lastUpdateTime": {
                "name": "lastUpdateTime",
                "type": "string | null",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 594
          },
          "MemorySystemStatus": {
            "name": "MemorySystemStatus",
            "body": "initialized: boolean;\r\n    shortTerm: {\r\n        entryCount: number;\r\n        lastUpdateTime: string | null;",
            "properties": {
              "initialized": {
                "name": "initialized",
                "type": "boolean",
                "optional": false
              },
              "shortTerm": {
                "name": "shortTerm",
                "type": "{",
                "optional": false
              },
              "entryCount": {
                "name": "entryCount",
                "type": "number",
                "optional": false
              },
              "lastUpdateTime": {
                "name": "lastUpdateTime",
                "type": "string | null",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 605
          },
          "EmotionLearningSyncMetrics": {
            "name": "EmotionLearningSyncMetrics",
            "body": "alignmentScore: number;\r\n    emotionalResonance: number;\r\n    learningEffectiveness: number;\r\n    narrativeCoherence: number;",
            "properties": {
              "alignmentScore": {
                "name": "alignmentScore",
                "type": "number",
                "optional": false
              },
              "emotionalResonance": {
                "name": "emotionalResonance",
                "type": "number",
                "optional": false
              },
              "learningEffectiveness": {
                "name": "learningEffectiveness",
                "type": "number",
                "optional": false
              },
              "narrativeCoherence": {
                "name": "narrativeCoherence",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 630
          },
          "QueryOptions": {
            "name": "QueryOptions",
            "body": "limit?: number;\r\n    minSignificance?: number;\r\n    includeResolved?: boolean;\r\n    sortBy?: 'significance' | 'time';\r\n    isPersistent?: boolean;",
            "properties": {
              "limit": {
                "name": "limit",
                "type": "number",
                "optional": true
              },
              "minSignificance": {
                "name": "minSignificance",
                "type": "number",
                "optional": true
              },
              "includeResolved": {
                "name": "includeResolved",
                "type": "boolean",
                "optional": true
              },
              "sortBy": {
                "name": "sortBy",
                "type": "'significance' | 'time'",
                "optional": true
              },
              "isPersistent": {
                "name": "isPersistent",
                "type": "boolean",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 656
          },
          "SearchOptions": {
            "name": "SearchOptions",
            "body": "limit?: number;\r\n    minRelevance?: number;\r\n    memoryTypes?: string[];\r\n    includeMeta?: boolean;",
            "properties": {
              "limit": {
                "name": "limit",
                "type": "number",
                "optional": true
              },
              "minRelevance": {
                "name": "minRelevance",
                "type": "number",
                "optional": true
              },
              "memoryTypes": {
                "name": "memoryTypes",
                "type": "string[]",
                "optional": true
              },
              "includeMeta": {
                "name": "includeMeta",
                "type": "boolean",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 668
          },
          "Memory": {
            "name": "Memory",
            "body": "type: MemoryType;\r\n    content: string;\r\n    priority: number;\r\n    metadata?: any;",
            "properties": {
              "type": {
                "name": "type",
                "type": "MemoryType",
                "optional": false
              },
              "content": {
                "name": "content",
                "type": "string",
                "optional": false
              },
              "priority": {
                "name": "priority",
                "type": "number",
                "optional": false
              },
              "metadata": {
                "name": "metadata",
                "type": "any",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 689
          },
          "SearchResult": {
            "name": "SearchResult",
            "body": "memory: Memory;\r\n    relevance: number;\r\n    matches: string[];",
            "properties": {
              "memory": {
                "name": "memory",
                "type": "Memory",
                "optional": false
              },
              "relevance": {
                "name": "relevance",
                "type": "number",
                "optional": false
              },
              "matches": {
                "name": "matches",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 700
          }
        },
        "types": {
          "MemoryType": {
            "name": "MemoryType",
            "definition": "'SHORT_TERM' | 'MID_TERM' | 'LONG_TERM'",
            "isUnion": true,
            "isIntersection": false,
            "isGeneric": false,
            "lineNumber": 683
          }
        },
        "enums": {
          "NarrativeState": {
            "name": "NarrativeState",
            "body": "// 共通状態\r\n    INTRODUCTION = 'INTRODUCTION',\r\n    DAILY_LIFE = 'DAILY_LIFE',\r\n    JOURNEY = 'JOURNEY',\r\n    INVESTIGATION = 'INVESTIGATION',\r\n    PRE_BATTLE = 'PRE_BATTLE',\r\n    BATTLE = 'BATTLE',\r\n    POST_BATTLE = 'POST_BATTLE',\r\n    TRAINING = 'TRAINING',\r\n    REVELATION = 'REVELATION',\r\n    DILEMMA = 'DILEMMA',\r\n    RESOLUTION = 'RESOLUTION',\r\n    CLOSURE = 'CLOSURE',\r\n\r\n    // ビジネスジャンル特有の状態\r\n    BUSINESS_MEETING = 'BUSINESS_MEETING',\r\n    PRODUCT_DEVELOPMENT = 'PRODUCT_DEVELOPMENT',\r\n    PITCH_PRESENTATION = 'PITCH_PRESENTATION',\r\n    MARKET_RESEARCH = 'MARKET_RESEARCH',\r\n    TEAM_BUILDING = 'TEAM_BUILDING',\r\n    FUNDING_ROUND = 'FUNDING_ROUND',\r\n    BUSINESS_PIVOT = 'BUSINESS_PIVOT',\r\n    CUSTOMER_DISCOVERY = 'CUSTOMER_DISCOVERY',\r\n    PRODUCT_LAUNCH = 'PRODUCT_LAUNCH',\r\n    \r\n    // 追加のビジネス特化状態\r\n    MARKET_COMPETITION = 'MARKET_COMPETITION',\r\n    STRATEGIC_PREPARATION = 'STRATEGIC_PREPARATION',\r\n    PERFORMANCE_REVIEW = 'PERFORMANCE_REVIEW',\r\n    BUSINESS_DEVELOPMENT = 'BUSINESS_DEVELOPMENT',\r\n    SKILL_DEVELOPMENT = 'SKILL_DEVELOPMENT',\r\n    FINANCIAL_CHALLENGE = 'FINANCIAL_CHALLENGE',\r\n    EXPANSION_PHASE = 'EXPANSION_PHASE',\r\n    ACQUISITION_NEGOTIATION = 'ACQUISITION_NEGOTIATION',\r\n    CULTURE_BUILDING = 'CULTURE_BUILDING',\r\n    CRISIS_MANAGEMENT = 'CRISIS_MANAGEMENT',\r\n    MARKET_ENTRY = 'MARKET_ENTRY',\r\n    REGULATORY_COMPLIANCE = 'REGULATORY_COMPLIANCE',\r\n    PARTNERSHIP_DEVELOPMENT = 'PARTNERSHIP_DEVELOPMENT',\r\n    MARKET_SCALING = 'MARKET_SCALING',",
            "values": [
              {
                "name": "// 共通状態\r\n    INTRODUCTION",
                "value": "'INTRODUCTION'"
              },
              {
                "name": "DAILY_LIFE",
                "value": "'DAILY_LIFE'"
              },
              {
                "name": "JOURNEY",
                "value": "'JOURNEY'"
              },
              {
                "name": "INVESTIGATION",
                "value": "'INVESTIGATION'"
              },
              {
                "name": "PRE_BATTLE",
                "value": "'PRE_BATTLE'"
              },
              {
                "name": "BATTLE",
                "value": "'BATTLE'"
              },
              {
                "name": "POST_BATTLE",
                "value": "'POST_BATTLE'"
              },
              {
                "name": "TRAINING",
                "value": "'TRAINING'"
              },
              {
                "name": "REVELATION",
                "value": "'REVELATION'"
              },
              {
                "name": "DILEMMA",
                "value": "'DILEMMA'"
              },
              {
                "name": "RESOLUTION",
                "value": "'RESOLUTION'"
              },
              {
                "name": "CLOSURE",
                "value": "'CLOSURE'"
              },
              {
                "name": "// ビジネスジャンル特有の状態\r\n    BUSINESS_MEETING",
                "value": "'BUSINESS_MEETING'"
              },
              {
                "name": "PRODUCT_DEVELOPMENT",
                "value": "'PRODUCT_DEVELOPMENT'"
              },
              {
                "name": "PITCH_PRESENTATION",
                "value": "'PITCH_PRESENTATION'"
              },
              {
                "name": "MARKET_RESEARCH",
                "value": "'MARKET_RESEARCH'"
              },
              {
                "name": "TEAM_BUILDING",
                "value": "'TEAM_BUILDING'"
              },
              {
                "name": "FUNDING_ROUND",
                "value": "'FUNDING_ROUND'"
              },
              {
                "name": "BUSINESS_PIVOT",
                "value": "'BUSINESS_PIVOT'"
              },
              {
                "name": "CUSTOMER_DISCOVERY",
                "value": "'CUSTOMER_DISCOVERY'"
              },
              {
                "name": "PRODUCT_LAUNCH",
                "value": "'PRODUCT_LAUNCH'"
              },
              {
                "name": "// 追加のビジネス特化状態\r\n    MARKET_COMPETITION",
                "value": "'MARKET_COMPETITION'"
              },
              {
                "name": "STRATEGIC_PREPARATION",
                "value": "'STRATEGIC_PREPARATION'"
              },
              {
                "name": "PERFORMANCE_REVIEW",
                "value": "'PERFORMANCE_REVIEW'"
              },
              {
                "name": "BUSINESS_DEVELOPMENT",
                "value": "'BUSINESS_DEVELOPMENT'"
              },
              {
                "name": "SKILL_DEVELOPMENT",
                "value": "'SKILL_DEVELOPMENT'"
              },
              {
                "name": "FINANCIAL_CHALLENGE",
                "value": "'FINANCIAL_CHALLENGE'"
              },
              {
                "name": "EXPANSION_PHASE",
                "value": "'EXPANSION_PHASE'"
              },
              {
                "name": "ACQUISITION_NEGOTIATION",
                "value": "'ACQUISITION_NEGOTIATION'"
              },
              {
                "name": "CULTURE_BUILDING",
                "value": "'CULTURE_BUILDING'"
              },
              {
                "name": "CRISIS_MANAGEMENT",
                "value": "'CRISIS_MANAGEMENT'"
              },
              {
                "name": "MARKET_ENTRY",
                "value": "'MARKET_ENTRY'"
              },
              {
                "name": "REGULATORY_COMPLIANCE",
                "value": "'REGULATORY_COMPLIANCE'"
              },
              {
                "name": "PARTNERSHIP_DEVELOPMENT",
                "value": "'PARTNERSHIP_DEVELOPMENT'"
              },
              {
                "name": "MARKET_SCALING",
                "value": "'MARKET_SCALING'"
              }
            ],
            "lineNumber": 18
          },
          "BusinessGrowthPhase": {
            "name": "BusinessGrowthPhase",
            "body": "IDEA = \"IDEA_PHASE\",\r\n    VALIDATION = \"VALIDATION_PHASE\",\r\n    EARLY_TRACTION = \"EARLY_TRACTION\",\r\n    SCALE = \"SCALE_PHASE\",\r\n    EXPANSION = \"EXPANSION_PHASE\",\r\n    MATURITY = \"MATURITY_PHASE\"",
            "values": [
              {
                "name": "IDEA",
                "value": "\"IDEA_PHASE\""
              },
              {
                "name": "VALIDATION",
                "value": "\"VALIDATION_PHASE\""
              },
              {
                "name": "EARLY_TRACTION",
                "value": "\"EARLY_TRACTION\""
              },
              {
                "name": "SCALE",
                "value": "\"SCALE_PHASE\""
              },
              {
                "name": "EXPANSION",
                "value": "\"EXPANSION_PHASE\""
              },
              {
                "name": "MATURITY",
                "value": "\"MATURITY_PHASE\""
              }
            ],
            "lineNumber": 65
          },
          "PersistentEventType": {
            "name": "PersistentEventType",
            "body": "DEATH = 'DEATH',\r\n    MARRIAGE = 'MARRIAGE',\r\n    BIRTH = 'BIRTH',\r\n    PROMOTION = 'PROMOTION',\r\n    SKILL_ACQUISITION = 'SKILL_ACQUISITION',\r\n    MAJOR_INJURY = 'MAJOR_INJURY',\r\n    TRANSFORMATION = 'TRANSFORMATION',\r\n    RELOCATION = 'RELOCATION'",
            "values": [
              {
                "name": "DEATH",
                "value": "'DEATH'"
              },
              {
                "name": "MARRIAGE",
                "value": "'MARRIAGE'"
              },
              {
                "name": "BIRTH",
                "value": "'BIRTH'"
              },
              {
                "name": "PROMOTION",
                "value": "'PROMOTION'"
              },
              {
                "name": "SKILL_ACQUISITION",
                "value": "'SKILL_ACQUISITION'"
              },
              {
                "name": "MAJOR_INJURY",
                "value": "'MAJOR_INJURY'"
              },
              {
                "name": "TRANSFORMATION",
                "value": "'TRANSFORMATION'"
              },
              {
                "name": "RELOCATION",
                "value": "'RELOCATION'"
              }
            ],
            "lineNumber": 78
          },
          "BusinessEventType": {
            "name": "BusinessEventType",
            "body": "FUNDING_ROUND = \"funding_round\",\r\n    PRODUCT_LAUNCH = \"product_launch\",\r\n    PIVOT = \"pivot\",\r\n    TEAM_CONFLICT = \"team_conflict\",\r\n    EXPANSION = \"expansion\",\r\n    ACQUISITION = \"acquisition\",\r\n    MARKET_ENTRY = \"market_entry\",\r\n    COMPETITION = \"competition\",\r\n    REGULATORY_CHALLENGE = \"regulatory_challenge\",\r\n    FINANCIAL_CRISIS = \"financial_crisis\",\r\n    LEADERSHIP_CHANGE = \"leadership_change\"",
            "values": [
              {
                "name": "FUNDING_ROUND",
                "value": "\"funding_round\""
              },
              {
                "name": "PRODUCT_LAUNCH",
                "value": "\"product_launch\""
              },
              {
                "name": "PIVOT",
                "value": "\"pivot\""
              },
              {
                "name": "TEAM_CONFLICT",
                "value": "\"team_conflict\""
              },
              {
                "name": "EXPANSION",
                "value": "\"expansion\""
              },
              {
                "name": "ACQUISITION",
                "value": "\"acquisition\""
              },
              {
                "name": "MARKET_ENTRY",
                "value": "\"market_entry\""
              },
              {
                "name": "COMPETITION",
                "value": "\"competition\""
              },
              {
                "name": "REGULATORY_CHALLENGE",
                "value": "\"regulatory_challenge\""
              },
              {
                "name": "FINANCIAL_CRISIS",
                "value": "\"financial_crisis\""
              },
              {
                "name": "LEADERSHIP_CHANGE",
                "value": "\"leadership_change\""
              }
            ],
            "lineNumber": 572
          },
          "LearningStage": {
            "name": "LearningStage",
            "body": "INTRODUCTION = 'INTRODUCTION',\r\n    DEVELOPMENT = 'DEVELOPMENT',\r\n    MASTERY = 'MASTERY',\r\n    APPLICATION = 'APPLICATION'",
            "values": [
              {
                "name": "INTRODUCTION",
                "value": "'INTRODUCTION'"
              },
              {
                "name": "DEVELOPMENT",
                "value": "'DEVELOPMENT'"
              },
              {
                "name": "MASTERY",
                "value": "'MASTERY'"
              },
              {
                "name": "APPLICATION",
                "value": "'APPLICATION'"
              }
            ],
            "lineNumber": 641
          }
        },
        "imports": [
          {
            "types": [
              "Chapter"
            ],
            "source": "@/types/chapters",
            "isTypeOnly": true
          },
          {
            "types": [
              "GeminiClient"
            ],
            "source": "@/lib/generation/gemini-client",
            "isTypeOnly": false
          }
        ],
        "exports": [
          "NarrativeState",
          "BusinessGrowthPhase",
          "PersistentEventType",
          "ManagerConstructorOptions",
          "UpdateOptions",
          "IManager",
          "NarrativeStateInfo",
          "StateTransition",
          "StagnationDetectionResult",
          "TurningPoint",
          "CharacterProgress",
          "CharacterChangeInfo",
          "ChapterSummary",
          "ChapterMemory",
          "KeyEvent",
          "CharacterState",
          "Relationship",
          "EmotionalCurvePoint",
          "ChapterEmotionAnalysis",
          "EmotionalArcDesign",
          "TensionRecommendation",
          "PacingRecommendation",
          "TensionPacingRecommendation",
          "Foreshadowing",
          "ForeshadowingEvaluation",
          "ForeshadowingMethodSuggestion",
          "ArcMemory",
          "CompressedMemory",
          "NarrativeMetrics",
          "ThemeResonanceAnalysis",
          "SignificantEvent",
          "BusinessEvent",
          "BusinessStoryEvent",
          "BusinessEventType",
          "NarrativeMemoryStatus",
          "MemorySystemStatus",
          "EmotionLearningSyncMetrics",
          "LearningStage",
          "QueryOptions",
          "SearchOptions",
          "MemoryType",
          "Memory",
          "SearchResult"
        ],
        "inlineTypes": [
          {
            "definition": ": {\r\n        chapter: number;\r\n        event: string;\r\n        timestamp: string;\r\n    }",
            "lineNumber": 205
          },
          {
            "definition": ": {\r\n        type: string;\r\n        scope: string;\r\n        confidence: number;\r\n        explanation: string;\r\n        narrativeSignificance?: number;\r\n    }",
            "lineNumber": 220
          },
          {
            "definition": ": {\r\n        id: string;\r\n        description: string;\r\n        resolution: string;\r\n    }",
            "lineNumber": 256
          },
          {
            "definition": ": {\r\n        hopeVsDespair: { start: number, middle: number, end: number }",
            "lineNumber": 318
          },
          {
            "definition": ": { start: number, middle: number, end: number }",
            "lineNumber": 320
          },
          {
            "definition": ": { start: number, middle: number, end: number }",
            "lineNumber": 321
          },
          {
            "definition": ": { start: number, middle: number, end: number }",
            "lineNumber": 322
          },
          {
            "definition": ": { start: number, middle: number, end: number }",
            "lineNumber": 323
          },
          {
            "definition": ": {\r\n        opening: { dimension: string; level: number }",
            "lineNumber": 335
          },
          {
            "definition": ": { dimension: string; level: number }",
            "lineNumber": 337
          },
          {
            "definition": ": { dimension: string; level: number }",
            "lineNumber": 338
          },
          {
            "definition": ": {\r\n        type: string;\r\n        conceptName: string;\r\n        characterId: string;\r\n        fromStage: string;\r\n        toStage: string;\r\n        transformationCatalyst: string;\r\n    }",
            "lineNumber": 397
          },
          {
            "definition": ": { start: number; end: number }",
            "lineNumber": 441
          },
          {
            "definition": ": { start: number; end: number }",
            "lineNumber": 457
          },
          {
            "definition": ": {\r\n        start: string;\r\n        peak: string;\r\n        end: string;\r\n        dominantEmotion: string;\r\n    }",
            "lineNumber": 461
          },
          {
            "definition": ": {\r\n        chapter: number;\r\n        strength: number;\r\n        dominantExpressions: string[];\r\n    }",
            "lineNumber": 493
          },
          {
            "definition": ": {\r\n        entryCount: number;\r\n        lastUpdateTime: string | null;\r\n    }",
            "lineNumber": 607
          },
          {
            "definition": ": {\r\n        entryCount: number;\r\n        lastUpdateTime: string | null;\r\n        currentArc: { number: number; name: string }",
            "lineNumber": 611
          },
          {
            "definition": ": {\r\n        initialized: boolean;\r\n        lastCompressionTime: string | null;\r\n    }",
            "lineNumber": 616
          }
        ],
        "generics": [
          "void",
          "string, number",
          "{\r\n        characterId: string;\r\n        parameterId: string;\r\n        previousValue: number;\r\n        newValue: number;\r\n    }",
          "{\r\n        characterId: string;\r\n        skillId: string;\r\n        level: number;\r\n    }",
          "{\r\n        characterId: string;\r\n        aspect: string;\r\n        description: string;\r\n        value?: any;\r\n    }"
        ],
        "extendedTypes": [],
        "dataModelTypes": [
          {
            "name": "NarrativeStateInfo",
            "category": "DATA_MODEL",
            "definition": {
              "name": "NarrativeStateInfo",
              "body": "state: NarrativeState;\r\n    tensionLevel: number;\r\n    stagnationDetected: boolean;\r\n    suggestedNextState?: NarrativeState;\r\n    duration: number;\r\n    location: string;\r\n    timeOfDay: string;\r\n    weather: string;\r\n    presentCharacters: string[];\r\n    genre: string;\r\n    \r\n    // 内部状態\r\n    currentArcNumber: number;\r\n    currentTheme: string;\r\n    arcStartChapter: number;\r\n    arcEndChapter: number;\r\n    arcCompleted: boolean;\r\n    turningPoints: TurningPoint[];\r\n    \r\n    // 指標情報\r\n    metrics?: NarrativeMetrics;\r\n    totalChapters?: number;\r\n    \r\n    // 進行情報\r\n    progressionInstruction?: string;",
              "properties": {
                "state": {
                  "name": "state",
                  "type": "NarrativeState",
                  "optional": false
                },
                "tensionLevel": {
                  "name": "tensionLevel",
                  "type": "number",
                  "optional": false
                },
                "stagnationDetected": {
                  "name": "stagnationDetected",
                  "type": "boolean",
                  "optional": false
                },
                "suggestedNextState": {
                  "name": "suggestedNextState",
                  "type": "NarrativeState",
                  "optional": true
                },
                "duration": {
                  "name": "duration",
                  "type": "number",
                  "optional": false
                },
                "location": {
                  "name": "location",
                  "type": "string",
                  "optional": false
                },
                "timeOfDay": {
                  "name": "timeOfDay",
                  "type": "string",
                  "optional": false
                },
                "weather": {
                  "name": "weather",
                  "type": "string",
                  "optional": false
                },
                "presentCharacters": {
                  "name": "presentCharacters",
                  "type": "string[]",
                  "optional": false
                },
                "genre": {
                  "name": "genre",
                  "type": "string",
                  "optional": false
                },
                "currentArcNumber": {
                  "name": "currentArcNumber",
                  "type": "number",
                  "optional": false
                },
                "currentTheme": {
                  "name": "currentTheme",
                  "type": "string",
                  "optional": false
                },
                "arcStartChapter": {
                  "name": "arcStartChapter",
                  "type": "number",
                  "optional": false
                },
                "arcEndChapter": {
                  "name": "arcEndChapter",
                  "type": "number",
                  "optional": false
                },
                "arcCompleted": {
                  "name": "arcCompleted",
                  "type": "boolean",
                  "optional": false
                },
                "turningPoints": {
                  "name": "turningPoints",
                  "type": "TurningPoint[]",
                  "optional": false
                },
                "metrics": {
                  "name": "metrics",
                  "type": "NarrativeMetrics",
                  "optional": true
                },
                "totalChapters": {
                  "name": "totalChapters",
                  "type": "number",
                  "optional": true
                },
                "progressionInstruction": {
                  "name": "progressionInstruction",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 129
            }
          },
          {
            "name": "StateTransition",
            "category": "DATA_MODEL",
            "definition": {
              "name": "StateTransition",
              "body": "fromState: NarrativeState;\r\n    toState: NarrativeState;\r\n    chapter: number;\r\n    timestamp: string;\r\n    keyEvent?: string;",
              "properties": {
                "fromState": {
                  "name": "fromState",
                  "type": "NarrativeState",
                  "optional": false
                },
                "toState": {
                  "name": "toState",
                  "type": "NarrativeState",
                  "optional": false
                },
                "chapter": {
                  "name": "chapter",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "keyEvent": {
                  "name": "keyEvent",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 161
            }
          },
          {
            "name": "CharacterChangeInfo",
            "category": "DATA_MODEL",
            "definition": {
              "name": "CharacterChangeInfo",
              "body": "attribute: string;\r\n    previousValue: any;\r\n    currentValue: any;\r\n    classification?: {\r\n        type: string;\r\n        scope: string;\r\n        confidence: number;\r\n        explanation: string;\r\n        narrativeSignificance?: number;",
              "properties": {
                "attribute": {
                  "name": "attribute",
                  "type": "string",
                  "optional": false
                },
                "previousValue": {
                  "name": "previousValue",
                  "type": "any",
                  "optional": false
                },
                "currentValue": {
                  "name": "currentValue",
                  "type": "any",
                  "optional": false
                },
                "classification": {
                  "name": "classification",
                  "type": "{",
                  "optional": true
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "scope": {
                  "name": "scope",
                  "type": "string",
                  "optional": false
                },
                "confidence": {
                  "name": "confidence",
                  "type": "number",
                  "optional": false
                },
                "explanation": {
                  "name": "explanation",
                  "type": "string",
                  "optional": false
                },
                "narrativeSignificance": {
                  "name": "narrativeSignificance",
                  "type": "number",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 216
            }
          },
          {
            "name": "CharacterState",
            "category": "DATA_MODEL",
            "definition": {
              "name": "CharacterState",
              "body": "name: string;\r\n    mood?: string;\r\n    development?: string;\r\n    relationships?: Relationship[];",
              "properties": {
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "mood": {
                  "name": "mood",
                  "type": "string",
                  "optional": true
                },
                "development": {
                  "name": "development",
                  "type": "string",
                  "optional": true
                },
                "relationships": {
                  "name": "relationships",
                  "type": "Relationship[]",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 281
            }
          }
        ],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": [
          {
            "name": "ManagerConstructorOptions",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "ManagerConstructorOptions",
              "body": "geminiClient?: GeminiClient;",
              "properties": {
                "geminiClient": {
                  "name": "geminiClient",
                  "type": "GeminiClient",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 97
            }
          },
          {
            "name": "IManager",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "IManager",
              "body": "initialize(): Promise<void>;\r\n    updateFromChapter(chapter: Chapter, options?: UpdateOptions): Promise<void>;\r\n    save(): Promise<void>;",
              "properties": {
                "chapter": {
                  "name": "chapter",
                  "type": "Chapter",
                  "optional": false
                },
                "options": {
                  "name": "options",
                  "type": "UpdateOptions): Promise<void>",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 115
            }
          }
        ]
      },
      "lib\\parameters\\index.ts": {
        "filePath": "lib\\parameters\\index.ts",
        "fileSize": 589,
        "system": "parameters",
        "module": "parameters",
        "interfaces": {},
        "types": {},
        "enums": {},
        "imports": [],
        "exports": [
          "type",
          "type"
        ],
        "inlineTypes": [],
        "generics": [],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": []
      },
      "lib\\parameters\\types.ts": {
        "filePath": "lib\\parameters\\types.ts",
        "fileSize": 2071,
        "system": "parameters",
        "module": "parameters",
        "interfaces": {
          "IParameterManager": {
            "name": "IParameterManager",
            "body": "/**\r\n   * 初期化処理を実行\r\n   * 各種ファイルの読み込みとデータの準備を行う\r\n   */\r\n  initialize(): Promise<void>;\r\n  \r\n  /**\r\n   * 現在のパラメータを取得\r\n   * @returns 現在のパラメータのコピー\r\n   */\r\n  getParameters(): SystemParameters;\r\n  \r\n  /**\r\n   * 指定されたファイルからパラメータを読み込む\r\n   * @param filePath パラメータファイルのパス\r\n   * @returns 読み込まれたパラメータ\r\n   */\r\n  loadParameters(filePath: string): Promise<SystemParameters>;\r\n  \r\n  /**\r\n   * 現在のパラメータをファイルに保存\r\n   * @param filePath 保存先ファイルパス（省略時はデフォルト）\r\n   * @returns 保存成功時にtrue\r\n   */\r\n  saveParameters(filePath?: string): Promise<boolean>;\r\n  \r\n  /**\r\n   * JSONテキストからパラメータをインポート\r\n   * @param jsonContent JSONテキスト\r\n   * @returns インポート成功時にtrue\r\n   */\r\n  importParameters(jsonContent: string): Promise<boolean>;\r\n  \r\n  /**\r\n   * 現在のパラメータをJSON形式にエクスポート\r\n   * @returns エクスポートされたJSONテキスト\r\n   */\r\n  exportParameters(): string;\r\n  \r\n  /**\r\n   * 単一パラメータの値を更新\r\n   * @param path パラメータのパス（ドット区切り）\r\n   * @param value 新しい値\r\n   */\r\n  updateParameter(path: string, value: any): void;\r\n  \r\n  /**\r\n   * すべてのパラメータをデフォルト値にリセット\r\n   */\r\n  resetToDefaults(): void;\r\n  \r\n  /**\r\n   * 指定されたプリセットを適用\r\n   * @param presetName プリセット名\r\n   * @returns 適用成功時にtrue\r\n   */\r\n  applyPreset(presetName: string): boolean;\r\n  \r\n  /**\r\n   * 現在のパラメータをプリセットとして保存\r\n   * @param name プリセット名\r\n   * @param description プリセットの説明\r\n   * @returns 保存成功時にtrue\r\n   */\r\n  saveAsPreset(name: string, description?: string): Promise<boolean>;\r\n  \r\n  /**\r\n   * 利用可能なプリセット名の一覧を取得\r\n   * @returns プリセット名の配列\r\n   */\r\n  getPresets(): string[];\r\n  \r\n  /**\r\n   * 利用可能なプリセットの詳細情報を取得\r\n   * @returns プリセット情報の配列\r\n   */\r\n  getPresetDetails(): ParameterPreset[];\r\n  \r\n  /**\r\n   * パラメータ変更イベントの購読\r\n   * @param callback 変更通知を受け取るコールバック関数\r\n   */\r\n  onParameterChanged(callback: (path: string, value: any) => void): void;\r\n  \r\n  /**\r\n   * パラメータ変更リスナーの削除\r\n   * @param callback 削除するコールバック関数\r\n   */\r\n  removeParameterChangedListener(callback: (path: string, value: any) => void): void;",
            "properties": {
              "filePath": {
                "name": "filePath",
                "type": "string): Promise<boolean>",
                "optional": true
              },
              "jsonContent": {
                "name": "jsonContent",
                "type": "string): Promise<boolean>",
                "optional": false
              },
              "path": {
                "name": "path",
                "type": "string",
                "optional": false
              },
              "value": {
                "name": "value",
                "type": "any) => void): void",
                "optional": false
              },
              "presetName": {
                "name": "presetName",
                "type": "string): boolean",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string): Promise<boolean>",
                "optional": true
              },
              "callback": {
                "name": "callback",
                "type": "(path: string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 7
          }
        },
        "types": {},
        "enums": {},
        "imports": [
          {
            "types": [
              "SystemParameters",
              "ParameterPreset"
            ],
            "source": "../../types/parameters",
            "isTypeOnly": true
          }
        ],
        "exports": [
          "IParameterManager"
        ],
        "inlineTypes": [],
        "generics": [
          "void",
          "SystemParameters",
          "boolean"
        ],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": [
          {
            "name": "IParameterManager",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "IParameterManager",
              "body": "/**\r\n   * 初期化処理を実行\r\n   * 各種ファイルの読み込みとデータの準備を行う\r\n   */\r\n  initialize(): Promise<void>;\r\n  \r\n  /**\r\n   * 現在のパラメータを取得\r\n   * @returns 現在のパラメータのコピー\r\n   */\r\n  getParameters(): SystemParameters;\r\n  \r\n  /**\r\n   * 指定されたファイルからパラメータを読み込む\r\n   * @param filePath パラメータファイルのパス\r\n   * @returns 読み込まれたパラメータ\r\n   */\r\n  loadParameters(filePath: string): Promise<SystemParameters>;\r\n  \r\n  /**\r\n   * 現在のパラメータをファイルに保存\r\n   * @param filePath 保存先ファイルパス（省略時はデフォルト）\r\n   * @returns 保存成功時にtrue\r\n   */\r\n  saveParameters(filePath?: string): Promise<boolean>;\r\n  \r\n  /**\r\n   * JSONテキストからパラメータをインポート\r\n   * @param jsonContent JSONテキスト\r\n   * @returns インポート成功時にtrue\r\n   */\r\n  importParameters(jsonContent: string): Promise<boolean>;\r\n  \r\n  /**\r\n   * 現在のパラメータをJSON形式にエクスポート\r\n   * @returns エクスポートされたJSONテキスト\r\n   */\r\n  exportParameters(): string;\r\n  \r\n  /**\r\n   * 単一パラメータの値を更新\r\n   * @param path パラメータのパス（ドット区切り）\r\n   * @param value 新しい値\r\n   */\r\n  updateParameter(path: string, value: any): void;\r\n  \r\n  /**\r\n   * すべてのパラメータをデフォルト値にリセット\r\n   */\r\n  resetToDefaults(): void;\r\n  \r\n  /**\r\n   * 指定されたプリセットを適用\r\n   * @param presetName プリセット名\r\n   * @returns 適用成功時にtrue\r\n   */\r\n  applyPreset(presetName: string): boolean;\r\n  \r\n  /**\r\n   * 現在のパラメータをプリセットとして保存\r\n   * @param name プリセット名\r\n   * @param description プリセットの説明\r\n   * @returns 保存成功時にtrue\r\n   */\r\n  saveAsPreset(name: string, description?: string): Promise<boolean>;\r\n  \r\n  /**\r\n   * 利用可能なプリセット名の一覧を取得\r\n   * @returns プリセット名の配列\r\n   */\r\n  getPresets(): string[];\r\n  \r\n  /**\r\n   * 利用可能なプリセットの詳細情報を取得\r\n   * @returns プリセット情報の配列\r\n   */\r\n  getPresetDetails(): ParameterPreset[];\r\n  \r\n  /**\r\n   * パラメータ変更イベントの購読\r\n   * @param callback 変更通知を受け取るコールバック関数\r\n   */\r\n  onParameterChanged(callback: (path: string, value: any) => void): void;\r\n  \r\n  /**\r\n   * パラメータ変更リスナーの削除\r\n   * @param callback 削除するコールバック関数\r\n   */\r\n  removeParameterChangedListener(callback: (path: string, value: any) => void): void;",
              "properties": {
                "filePath": {
                  "name": "filePath",
                  "type": "string): Promise<boolean>",
                  "optional": true
                },
                "jsonContent": {
                  "name": "jsonContent",
                  "type": "string): Promise<boolean>",
                  "optional": false
                },
                "path": {
                  "name": "path",
                  "type": "string",
                  "optional": false
                },
                "value": {
                  "name": "value",
                  "type": "any) => void): void",
                  "optional": false
                },
                "presetName": {
                  "name": "presetName",
                  "type": "string): boolean",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string): Promise<boolean>",
                  "optional": true
                },
                "callback": {
                  "name": "callback",
                  "type": "(path: string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 7
            }
          }
        ]
      },
      "lib\\plot\\bridge-types.ts": {
        "filePath": "lib\\plot\\bridge-types.ts",
        "fileSize": 3882,
        "system": "plot",
        "module": "plot",
        "interfaces": {
          "ChapterDirectives": {
            "name": "ChapterDirectives",
            "body": "chapterGoal: string;              // 章の目標\r\n  requiredPlotElements: string[];   // 必須のプロット要素\r\n  currentLocation: string;          // 現在の場所\r\n  currentSituation: string;         // 現在の状況\r\n  activeCharacters: CharacterState[]; // 活動中のキャラクター\r\n  worldElementsFocus: string[];     // 焦点を当てる世界設定要素\r\n  thematicFocus: string[];          // 焦点を当てるテーマ的要素\r\n  suggestedScenes?: string[];       // 提案されるシーン（オプション）\r\n  narrativeState?: NarrativeStateInfo; // 物語状態情報\r\n  tension?: number;                 // 緊張度 (1-10)\r\n  emotionalGoal?: string;           // 感情的目標\r\n  emotionalCurve?: EmotionalCurvePoint[]; // 感情曲線",
            "properties": {
              "chapterGoal": {
                "name": "chapterGoal",
                "type": "string",
                "optional": false
              },
              "requiredPlotElements": {
                "name": "requiredPlotElements",
                "type": "string[]",
                "optional": false
              },
              "currentLocation": {
                "name": "currentLocation",
                "type": "string",
                "optional": false
              },
              "currentSituation": {
                "name": "currentSituation",
                "type": "string",
                "optional": false
              },
              "activeCharacters": {
                "name": "activeCharacters",
                "type": "CharacterState[]",
                "optional": false
              },
              "worldElementsFocus": {
                "name": "worldElementsFocus",
                "type": "string[]",
                "optional": false
              },
              "thematicFocus": {
                "name": "thematicFocus",
                "type": "string[]",
                "optional": false
              },
              "suggestedScenes": {
                "name": "suggestedScenes",
                "type": "string[]",
                "optional": true
              },
              "narrativeState": {
                "name": "narrativeState",
                "type": "NarrativeStateInfo",
                "optional": true
              },
              "tension": {
                "name": "tension",
                "type": "number",
                "optional": true
              },
              "emotionalGoal": {
                "name": "emotionalGoal",
                "type": "string",
                "optional": true
              },
              "emotionalCurve": {
                "name": "emotionalCurve",
                "type": "EmotionalCurvePoint[]",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 9
          },
          "CharacterState": {
            "name": "CharacterState",
            "body": "name: string;                     // キャラクター名\r\n  currentState: string;             // 現在の状態\r\n  role: string;                     // 章での役割\r\n  goals?: string[];                 // 目標\r\n  conflicts?: string[];             // 葛藤\r\n  relationshipFocus?: string[];     // 焦点を当てる関係性\r\n  development?: string;             // 発展方向",
            "properties": {
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "currentState": {
                "name": "currentState",
                "type": "string",
                "optional": false
              },
              "role": {
                "name": "role",
                "type": "string",
                "optional": false
              },
              "goals": {
                "name": "goals",
                "type": "string[]",
                "optional": true
              },
              "conflicts": {
                "name": "conflicts",
                "type": "string[]",
                "optional": true
              },
              "relationshipFocus": {
                "name": "relationshipFocus",
                "type": "string[]",
                "optional": true
              },
              "development": {
                "name": "development",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 28
          },
          "LocationInfo": {
            "name": "LocationInfo",
            "body": "name: string;                     // 場所の名前\r\n  description: string;              // 場所の説明\r\n  atmosphere: string;               // 雰囲気\r\n  significance: string;             // 重要性",
            "properties": {
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "atmosphere": {
                "name": "atmosphere",
                "type": "string",
                "optional": false
              },
              "significance": {
                "name": "significance",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 42
          },
          "ThematicElement": {
            "name": "ThematicElement",
            "body": "theme: string;                    // テーマ\r\n  expression: string;               // 表現方法\r\n  significance: string;             // 重要性",
            "properties": {
              "theme": {
                "name": "theme",
                "type": "string",
                "optional": false
              },
              "expression": {
                "name": "expression",
                "type": "string",
                "optional": false
              },
              "significance": {
                "name": "significance",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 53
          },
          "StoryGenerationContext": {
            "name": "StoryGenerationContext",
            "body": "chapterNumber: number;            // 章番号\r\n  plotElements: {                   // プロット要素\r\n    concrete: any;                  // 具体的プロット\r\n    abstract: any;                  // 抽象的プロット\r\n    midTerm?: any;                  // 中期プロット",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "plotElements": {
                "name": "plotElements",
                "type": "{                   // プロット要素",
                "optional": false
              },
              "concrete": {
                "name": "concrete",
                "type": "any",
                "optional": false
              },
              "abstract": {
                "name": "abstract",
                "type": "any",
                "optional": false
              },
              "midTerm": {
                "name": "midTerm",
                "type": "any",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 63
          },
          "BridgeAnalysisResult": {
            "name": "BridgeAnalysisResult",
            "body": "plotProgressAlignment: number;     // プロット進行の一致度 (0-1)\r\n  suggestedAdjustments: string[];    // 提案される調整\r\n  keyElementsForNext: string[];      // 次に重要な要素\r\n  narrativeDirection: string;        // 物語の方向性\r\n  tensionProjection: number;         // 緊張度の予測 (1-10)\r\n  continuityElements?: string[];     // 継続性を保つべき要素\r\n  recommendedPacing?: string;        // 推奨されるペース",
            "properties": {
              "plotProgressAlignment": {
                "name": "plotProgressAlignment",
                "type": "number",
                "optional": false
              },
              "suggestedAdjustments": {
                "name": "suggestedAdjustments",
                "type": "string[]",
                "optional": false
              },
              "keyElementsForNext": {
                "name": "keyElementsForNext",
                "type": "string[]",
                "optional": false
              },
              "narrativeDirection": {
                "name": "narrativeDirection",
                "type": "string",
                "optional": false
              },
              "tensionProjection": {
                "name": "tensionProjection",
                "type": "number",
                "optional": false
              },
              "continuityElements": {
                "name": "continuityElements",
                "type": "string[]",
                "optional": true
              },
              "recommendedPacing": {
                "name": "recommendedPacing",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 93
          },
          "PromptElements": {
            "name": "PromptElements",
            "body": "CHAPTER_GOAL: string;\r\n  REQUIRED_PLOT_ELEMENTS: string;\r\n  CURRENT_LOCATION: string;\r\n  CURRENT_SITUATION: string;\r\n  ACTIVE_CHARACTERS: string;\r\n  WORLD_ELEMENTS_FOCUS: string;\r\n  THEMATIC_FOCUS: string;\r\n  [key: string]: string;            // インデックスシグネチャでその他のプレースホルダーにも対応",
            "properties": {
              "CHAPTER_GOAL": {
                "name": "CHAPTER_GOAL",
                "type": "string",
                "optional": false
              },
              "REQUIRED_PLOT_ELEMENTS": {
                "name": "REQUIRED_PLOT_ELEMENTS",
                "type": "string",
                "optional": false
              },
              "CURRENT_LOCATION": {
                "name": "CURRENT_LOCATION",
                "type": "string",
                "optional": false
              },
              "CURRENT_SITUATION": {
                "name": "CURRENT_SITUATION",
                "type": "string",
                "optional": false
              },
              "ACTIVE_CHARACTERS": {
                "name": "ACTIVE_CHARACTERS",
                "type": "string",
                "optional": false
              },
              "WORLD_ELEMENTS_FOCUS": {
                "name": "WORLD_ELEMENTS_FOCUS",
                "type": "string",
                "optional": false
              },
              "THEMATIC_FOCUS": {
                "name": "THEMATIC_FOCUS",
                "type": "string",
                "optional": false
              },
              "key": {
                "name": "key",
                "type": "string]: string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 107
          },
          "PlotProgressInfo": {
            "name": "PlotProgressInfo",
            "body": "completedElements: string[];      // 完了したプロット要素\r\n  pendingElements: string[];        // 未完了のプロット要素\r\n  progressPercentage: number;       // 進行度割合 (0-1)\r\n  currentFocus: string;             // 現在の焦点\r\n  nextMilestone?: string;           // 次のマイルストーン",
            "properties": {
              "completedElements": {
                "name": "completedElements",
                "type": "string[]",
                "optional": false
              },
              "pendingElements": {
                "name": "pendingElements",
                "type": "string[]",
                "optional": false
              },
              "progressPercentage": {
                "name": "progressPercentage",
                "type": "number",
                "optional": false
              },
              "currentFocus": {
                "name": "currentFocus",
                "type": "string",
                "optional": false
              },
              "nextMilestone": {
                "name": "nextMilestone",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 122
          }
        },
        "types": {},
        "enums": {},
        "imports": [
          {
            "types": [
              "KeyEvent"
            ],
            "source": "@/types/memory",
            "isTypeOnly": true
          },
          {
            "types": [
              "NarrativeStateInfo",
              "EmotionalCurvePoint"
            ],
            "source": "@/lib/memory/long-term/types",
            "isTypeOnly": true
          }
        ],
        "exports": [
          "ChapterDirectives",
          "CharacterState",
          "LocationInfo",
          "ThematicElement",
          "StoryGenerationContext",
          "BridgeAnalysisResult",
          "PromptElements",
          "PlotProgressInfo"
        ],
        "inlineTypes": [
          {
            "definition": ": {                   // プロット要素\r\n    concrete: any;                  // 具体的プロット\r\n    abstract: any;                  // 抽象的プロット\r\n    midTerm?: any;                  // 中期プロット\r\n  }",
            "lineNumber": 65
          },
          {
            "definition": ": {\r\n    shortTerm: {\r\n      recentChapters: any[];\r\n      currentChapter: any;\r\n      importantEvents: KeyEvent[]; // KeyEvent型を使用\r\n    }",
            "lineNumber": 70
          },
          {
            "definition": ": {\r\n      currentArc: any;\r\n    }",
            "lineNumber": 76
          },
          {
            "definition": ": {\r\n      summaries: any[];\r\n    }",
            "lineNumber": 79
          }
        ],
        "generics": [],
        "extendedTypes": [],
        "dataModelTypes": [
          {
            "name": "CharacterState",
            "category": "DATA_MODEL",
            "definition": {
              "name": "CharacterState",
              "body": "name: string;                     // キャラクター名\r\n  currentState: string;             // 現在の状態\r\n  role: string;                     // 章での役割\r\n  goals?: string[];                 // 目標\r\n  conflicts?: string[];             // 葛藤\r\n  relationshipFocus?: string[];     // 焦点を当てる関係性\r\n  development?: string;             // 発展方向",
              "properties": {
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "currentState": {
                  "name": "currentState",
                  "type": "string",
                  "optional": false
                },
                "role": {
                  "name": "role",
                  "type": "string",
                  "optional": false
                },
                "goals": {
                  "name": "goals",
                  "type": "string[]",
                  "optional": true
                },
                "conflicts": {
                  "name": "conflicts",
                  "type": "string[]",
                  "optional": true
                },
                "relationshipFocus": {
                  "name": "relationshipFocus",
                  "type": "string[]",
                  "optional": true
                },
                "development": {
                  "name": "development",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 28
            }
          },
          {
            "name": "LocationInfo",
            "category": "DATA_MODEL",
            "definition": {
              "name": "LocationInfo",
              "body": "name: string;                     // 場所の名前\r\n  description: string;              // 場所の説明\r\n  atmosphere: string;               // 雰囲気\r\n  significance: string;             // 重要性",
              "properties": {
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "atmosphere": {
                  "name": "atmosphere",
                  "type": "string",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 42
            }
          },
          {
            "name": "PlotProgressInfo",
            "category": "DATA_MODEL",
            "definition": {
              "name": "PlotProgressInfo",
              "body": "completedElements: string[];      // 完了したプロット要素\r\n  pendingElements: string[];        // 未完了のプロット要素\r\n  progressPercentage: number;       // 進行度割合 (0-1)\r\n  currentFocus: string;             // 現在の焦点\r\n  nextMilestone?: string;           // 次のマイルストーン",
              "properties": {
                "completedElements": {
                  "name": "completedElements",
                  "type": "string[]",
                  "optional": false
                },
                "pendingElements": {
                  "name": "pendingElements",
                  "type": "string[]",
                  "optional": false
                },
                "progressPercentage": {
                  "name": "progressPercentage",
                  "type": "number",
                  "optional": false
                },
                "currentFocus": {
                  "name": "currentFocus",
                  "type": "string",
                  "optional": false
                },
                "nextMilestone": {
                  "name": "nextMilestone",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 122
            }
          }
        ],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": [
          {
            "name": "BridgeAnalysisResult",
            "category": "SYSTEM_INTEGRATION",
            "definition": {
              "name": "BridgeAnalysisResult",
              "body": "plotProgressAlignment: number;     // プロット進行の一致度 (0-1)\r\n  suggestedAdjustments: string[];    // 提案される調整\r\n  keyElementsForNext: string[];      // 次に重要な要素\r\n  narrativeDirection: string;        // 物語の方向性\r\n  tensionProjection: number;         // 緊張度の予測 (1-10)\r\n  continuityElements?: string[];     // 継続性を保つべき要素\r\n  recommendedPacing?: string;        // 推奨されるペース",
              "properties": {
                "plotProgressAlignment": {
                  "name": "plotProgressAlignment",
                  "type": "number",
                  "optional": false
                },
                "suggestedAdjustments": {
                  "name": "suggestedAdjustments",
                  "type": "string[]",
                  "optional": false
                },
                "keyElementsForNext": {
                  "name": "keyElementsForNext",
                  "type": "string[]",
                  "optional": false
                },
                "narrativeDirection": {
                  "name": "narrativeDirection",
                  "type": "string",
                  "optional": false
                },
                "tensionProjection": {
                  "name": "tensionProjection",
                  "type": "number",
                  "optional": false
                },
                "continuityElements": {
                  "name": "continuityElements",
                  "type": "string[]",
                  "optional": true
                },
                "recommendedPacing": {
                  "name": "recommendedPacing",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 93
            }
          }
        ]
      },
      "lib\\plot\\index.ts": {
        "filePath": "lib\\plot\\index.ts",
        "fileSize": 8841,
        "system": "plot",
        "module": "plot",
        "interfaces": {},
        "types": {},
        "enums": {},
        "imports": [
          {
            "types": [
              "MemoryManager"
            ],
            "source": "@/lib/memory/core/memory-manager",
            "isTypeOnly": false
          },
          {
            "types": [
              "PlotManager",
              "createPlotManager",
              "getPlotManagerInstance",
              "type PlotManagerConfig"
            ],
            "source": "./manager",
            "isTypeOnly": true
          }
        ],
        "exports": [
          "function",
          "async",
          "const",
          "function",
          "function",
          "async"
        ],
        "inlineTypes": [
          {
            "definition": ": {\n    hasGlobalMemoryManager: boolean;\n    hasGlobalPlotManagerInstance: boolean;\n    initializationStatus: string;\n    isInitialized: boolean;\n}",
            "lineNumber": 240
          }
        ],
        "generics": [
          "PlotManager",
          "{ consistent: boolean; issues: any[] }"
        ],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": []
      },
      "lib\\plot\\section\\index.ts": {
        "filePath": "lib\\plot\\section\\index.ts",
        "fileSize": 40266,
        "system": "plot",
        "module": "plot/section",
        "interfaces": {
          "SectionSystemConfig": {
            "name": "SectionSystemConfig",
            "body": "// 記憶システム統合設定\n    memorySystem: {\n        useIntegration: boolean;\n        enableCaching: boolean;\n        enableOptimization: boolean;\n        enableQualityAssurance: boolean;\n        enableAutoBackup: boolean;\n        fallbackToLocalAnalysis: boolean;",
            "properties": {
              "memorySystem": {
                "name": "memorySystem",
                "type": "{",
                "optional": false
              },
              "useIntegration": {
                "name": "useIntegration",
                "type": "boolean",
                "optional": false
              },
              "enableCaching": {
                "name": "enableCaching",
                "type": "boolean",
                "optional": false
              },
              "enableOptimization": {
                "name": "enableOptimization",
                "type": "boolean",
                "optional": false
              },
              "enableQualityAssurance": {
                "name": "enableQualityAssurance",
                "type": "boolean",
                "optional": false
              },
              "enableAutoBackup": {
                "name": "enableAutoBackup",
                "type": "boolean",
                "optional": false
              },
              "fallbackToLocalAnalysis": {
                "name": "fallbackToLocalAnalysis",
                "type": "boolean",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 61
          },
          "SectionSystemDiagnostics": {
            "name": "SectionSystemDiagnostics",
            "body": "healthy: boolean;\n    systemVersion: string;\n    components: {\n        sectionPlotManager: ComponentStatus;\n        sectionDesigner: ComponentStatus;\n        sectionAnalyzer: ComponentStatus;\n        sectionBridge: ComponentStatus;\n        memorySystem: ComponentStatus;",
            "properties": {
              "healthy": {
                "name": "healthy",
                "type": "boolean",
                "optional": false
              },
              "systemVersion": {
                "name": "systemVersion",
                "type": "string",
                "optional": false
              },
              "components": {
                "name": "components",
                "type": "{",
                "optional": false
              },
              "sectionPlotManager": {
                "name": "sectionPlotManager",
                "type": "ComponentStatus",
                "optional": false
              },
              "sectionDesigner": {
                "name": "sectionDesigner",
                "type": "ComponentStatus",
                "optional": false
              },
              "sectionAnalyzer": {
                "name": "sectionAnalyzer",
                "type": "ComponentStatus",
                "optional": false
              },
              "sectionBridge": {
                "name": "sectionBridge",
                "type": "ComponentStatus",
                "optional": false
              },
              "memorySystem": {
                "name": "memorySystem",
                "type": "ComponentStatus",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 101
          },
          "ComponentStatus": {
            "name": "ComponentStatus",
            "body": "initialized: boolean;\n    healthy: boolean;\n    lastActivity: string;\n    errorCount: number;\n    operationCount: number;\n    averageResponseTime: number;",
            "properties": {
              "initialized": {
                "name": "initialized",
                "type": "boolean",
                "optional": false
              },
              "healthy": {
                "name": "healthy",
                "type": "boolean",
                "optional": false
              },
              "lastActivity": {
                "name": "lastActivity",
                "type": "string",
                "optional": false
              },
              "errorCount": {
                "name": "errorCount",
                "type": "number",
                "optional": false
              },
              "operationCount": {
                "name": "operationCount",
                "type": "number",
                "optional": false
              },
              "averageResponseTime": {
                "name": "averageResponseTime",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 120
          },
          "PerformanceMetrics": {
            "name": "PerformanceMetrics",
            "body": "totalOperations: number;\n    successfulOperations: number;\n    failedOperations: number;\n    averageProcessingTime: number;\n    memorySystemHits: number;\n    cacheEfficiencyRate: number;\n    qualityScore: number;",
            "properties": {
              "totalOperations": {
                "name": "totalOperations",
                "type": "number",
                "optional": false
              },
              "successfulOperations": {
                "name": "successfulOperations",
                "type": "number",
                "optional": false
              },
              "failedOperations": {
                "name": "failedOperations",
                "type": "number",
                "optional": false
              },
              "averageProcessingTime": {
                "name": "averageProcessingTime",
                "type": "number",
                "optional": false
              },
              "memorySystemHits": {
                "name": "memorySystemHits",
                "type": "number",
                "optional": false
              },
              "cacheEfficiencyRate": {
                "name": "cacheEfficiencyRate",
                "type": "number",
                "optional": false
              },
              "qualityScore": {
                "name": "qualityScore",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 132
          }
        },
        "types": {},
        "enums": {},
        "imports": [
          {
            "types": [
              "logger"
            ],
            "source": "@/lib/utils/logger",
            "isTypeOnly": false
          },
          {
            "types": [
              "logError"
            ],
            "source": "@/lib/utils/error-handler",
            "isTypeOnly": false
          },
          {
            "types": [
              "MemoryManager",
              "MemoryManagerConfig"
            ],
            "source": "@/lib/memory/core/memory-manager",
            "isTypeOnly": false
          },
          {
            "types": [
              "MemoryLevel",
              "SystemOperationResult",
              "MemorySystemStatus"
            ],
            "source": "@/lib/memory/core/types",
            "isTypeOnly": true
          },
          {
            "types": [
              "GeminiClient"
            ],
            "source": "@/lib/generation/gemini-client",
            "isTypeOnly": false
          },
          {
            "types": [],
            "source": "@/lib/learning-journey",
            "isTypeOnly": false
          }
        ],
        "exports": [
          "type",
          "SectionSystemConfig",
          "SectionSystemDiagnostics",
          "ComponentStatus",
          "PerformanceMetrics",
          "async",
          "async",
          "async",
          "async",
          "async",
          "async",
          "async",
          "async",
          "default"
        ],
        "inlineTypes": [
          {
            "definition": ": {\n        useIntegration: boolean;\n        enableCaching: boolean;\n        enableOptimization: boolean;\n        enableQualityAssurance: boolean;\n        enableAutoBackup: boolean;\n        fallbackToLocalAnalysis: boolean;\n    }",
            "lineNumber": 63
          },
          {
            "definition": ": {\n        maxAnalysisRetries: number;\n        analysisTimeout: number;\n        contextTimeout: number;\n        enableMetricsCollection: boolean;\n        enableDiagnostics: boolean;\n    }",
            "lineNumber": 73
          },
          {
            "definition": ": {\n        enableAdvancedPrompts: boolean;\n        useContextualGeneration: boolean;\n        enableIterativeRefinement: boolean;\n        maxGenerationAttempts: number;\n    }",
            "lineNumber": 82
          },
          {
            "definition": ": {\n        enableValidation: boolean;\n        enableConsistencyChecks: boolean;\n        enableContentAnalysis: boolean;\n        qualityThreshold: number;\n    }",
            "lineNumber": 90
          },
          {
            "definition": ": {\n        sectionPlotManager: ComponentStatus;\n        sectionDesigner: ComponentStatus;\n        sectionAnalyzer: ComponentStatus;\n        sectionBridge: ComponentStatus;\n        memorySystem: ComponentStatus;\n    }",
            "lineNumber": 104
          },
          {
            "definition": ": {\n                useIntegration: true,\n                enableCaching: true,\n                enableOptimization: true,\n                enableQualityAssurance: true,\n                enableAutoBackup: true,\n                fallbackToLocalAnalysis: true\n            }",
            "lineNumber": 160
          },
          {
            "definition": ": {\n                maxAnalysisRetries: 3,\n                analysisTimeout: 30000,\n                contextTimeout: 15000,\n                enableMetricsCollection: true,\n                enableDiagnostics: true\n            }",
            "lineNumber": 168
          },
          {
            "definition": ": {\n                enableAdvancedPrompts: true,\n                useContextualGeneration: true,\n                enableIterativeRefinement: true,\n                maxGenerationAttempts: 3\n            }",
            "lineNumber": 175
          },
          {
            "definition": ": {\n                enableValidation: true,\n                enableConsistencyChecks: true,\n                enableContentAnalysis: true,\n                qualityThreshold: 0.8\n            }",
            "lineNumber": 181
          },
          {
            "definition": ": {\n                    maxChapters: 15,\n                    cacheEnabled: this.config.memorySystem.enableCaching,\n                    autoCleanupEnabled: true,\n                    cleanupIntervalMinutes: 30,\n                    maxRetentionHours: 72\n                }",
            "lineNumber": 283
          },
          {
            "definition": ": {\n                    maxAnalysisResults: 200,\n                    enableEvolutionTracking: true,\n                    enableProgressionAnalysis: true,\n                    qualityThreshold: this.config.qualityAssurance.qualityThreshold,\n                    enableCrossComponentAnalysis: true,\n                    enableRealTimeQualityMonitoring: this.config.performance.enableMetricsCollection,\n                    enablePerformanceOptimization: this.config.memorySystem.enableOptimization\n                }",
            "lineNumber": 290
          },
          {
            "definition": ": {\n                    enableAutoLearning: true,\n                    consolidationInterval: 60,\n                    archiveOldData: true,\n                    enablePredictiveAnalysis: true,\n                    qualityThreshold: this.config.qualityAssurance.qualityThreshold\n                }",
            "lineNumber": 299
          },
          {
            "definition": ": {\n                    sizeLimit: 100 * 1024 * 1024, // 100MB\n                    entryLimit: 10000,\n                    cleanupInterval: 30 * 60 * 1000 // 30分\n                }",
            "lineNumber": 311
          },
          {
            "definition": ": {\n                    enablePredictiveAccess: true,\n                    enableConsistencyValidation: this.config.qualityAssurance.enableConsistencyChecks,\n                    enablePerformanceMonitoring: this.config.performance.enableMetricsCollection\n                }",
            "lineNumber": 316
          },
          {
            "definition": ": {\n                    enableRealTimeMonitoring: true,\n                    enablePredictiveAnalysis: true,\n                    enableAutomaticRecovery: true,\n                    checkInterval: 5 * 60 * 1000, // 5分\n                    alertThresholds: {\n                        dataIntegrity: 0.95,\n                        systemStability: 0.90,\n                        performance: 0.85,\n                        operationalEfficiency: 0.80\n                    }",
            "lineNumber": 321
          },
          {
            "definition": ": {\n                    enabled: this.config.memorySystem.enableAutoBackup,\n                    schedule: {\n                        fullBackupInterval: 24 * 60 * 60 * 1000, // 24時間\n                        incrementalInterval: 4 * 60 * 60 * 1000,  // 4時間\n                        maxBackupCount: 10,\n                        retentionDays: 30\n                    }",
            "lineNumber": 333
          },
          {
            "definition": ": {\n                        enabled: true,\n                        level: 6\n                    }",
            "lineNumber": 341
          },
          {
            "definition": ": {\n                ...defaultConfig.shortTermConfig,\n                ...(customConfig.shortTermConfig || {}",
            "lineNumber": 560
          },
          {
            "definition": ": {\n                ...defaultConfig.midTermConfig,\n                ...(customConfig.midTermConfig || {}",
            "lineNumber": 564
          },
          {
            "definition": ": {\n                ...defaultConfig.longTermConfig,\n                ...(customConfig.longTermConfig || {}",
            "lineNumber": 568
          },
          {
            "definition": ": {\n                ...defaultConfig.cacheSettings,\n                ...(customConfig.cacheSettings || {}",
            "lineNumber": 572
          },
          {
            "definition": ": {\n                ...defaultConfig.optimizationSettings,\n                ...(customConfig.optimizationSettings || {}",
            "lineNumber": 576
          },
          {
            "definition": ": {\n                ...defaultConfig.qualityAssurance,\n                ...(customConfig.qualityAssurance || {}",
            "lineNumber": 580
          },
          {
            "definition": ": {\n                ...defaultConfig.backup,\n                ...(customConfig.backup || {}",
            "lineNumber": 584
          },
          {
            "definition": ": {\n                    ...this.config.memorySystem,\n                    ...(newConfig.memorySystem || {}",
            "lineNumber": 719
          },
          {
            "definition": ": {\n                    ...this.config.performance,\n                    ...(newConfig.performance || {}",
            "lineNumber": 723
          },
          {
            "definition": ": {\n                    ...this.config.aiGeneration,\n                    ...(newConfig.aiGeneration || {}",
            "lineNumber": 727
          },
          {
            "definition": ": {\n                    ...this.config.qualityAssurance,\n                    ...(newConfig.qualityAssurance || {}",
            "lineNumber": 731
          },
          {
            "definition": ": {\n                    sectionPlotManager: this.componentStatuses.get('sectionPlotManager') || this.getDefaultComponentStatus(),\n                    sectionDesigner: this.componentStatuses.get('sectionDesigner') || this.getDefaultComponentStatus(),\n                    sectionAnalyzer: this.componentStatuses.get('sectionAnalyzer') || this.getDefaultComponentStatus(),\n                    sectionBridge: this.componentStatuses.get('sectionBridge') || this.getDefaultComponentStatus(),\n                    memorySystem: this.componentStatuses.get('memoryManager') || this.getDefaultComponentStatus()\n                }",
            "lineNumber": 795
          },
          {
            "definition": ": { ...this.performanceMetrics }",
            "lineNumber": 803
          },
          {
            "definition": ": {\n                    sectionPlotManager: this.getDefaultComponentStatus(),\n                    sectionDesigner: this.getDefaultComponentStatus(),\n                    sectionAnalyzer: this.getDefaultComponentStatus(),\n                    sectionBridge: this.getDefaultComponentStatus(),\n                    memorySystem: this.getDefaultComponentStatus()\n                }",
            "lineNumber": 824
          },
          {
            "definition": ": { ...this.performanceMetrics }",
            "lineNumber": 832
          }
        ],
        "generics": [
          "void",
          "string, ComponentStatus",
          "SectionSystemConfig",
          "MemoryManagerConfig",
          "any",
          "MemoryManager | null",
          "boolean",
          "SectionSystemDiagnostics",
          "SystemOperationResult",
          " 0.8) {\n            recommendations.push('Performance quality below threshold - consider optimization');\n        }\n\n        if (this.performanceMetrics.cacheEfficiencyRate < 0.5) {\n            recommendations.push('Low cache efficiency - review caching strategy');\n        }\n\n        if (recommendations.length === 0) {\n            recommendations.push('System operating optimally');\n            recommendations.push('Continue regular monitoring and maintenance');\n        }\n\n        return recommendations;\n    }\n\n    /**\n     * デフォルトコンポーネント状態の取得\n     * @private\n     */\n    private getDefaultComponentStatus(): ComponentStatus {\n        return {\n            initialized: false,\n            healthy: false,\n            lastActivity: new Date().toISOString(),\n            errorCount: 0,\n            operationCount: 0,\n            averageResponseTime: 0\n        };\n    }\n\n    /**\n     * 初期化の確認\n     * @private\n     */\n    private async ensureInitialized(): Promise<void",
          "SectionSystemManager"
        ],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [
          {
            "name": "SectionSystemConfig",
            "category": "STORAGE_RELATED",
            "definition": {
              "name": "SectionSystemConfig",
              "body": "// 記憶システム統合設定\n    memorySystem: {\n        useIntegration: boolean;\n        enableCaching: boolean;\n        enableOptimization: boolean;\n        enableQualityAssurance: boolean;\n        enableAutoBackup: boolean;\n        fallbackToLocalAnalysis: boolean;",
              "properties": {
                "memorySystem": {
                  "name": "memorySystem",
                  "type": "{",
                  "optional": false
                },
                "useIntegration": {
                  "name": "useIntegration",
                  "type": "boolean",
                  "optional": false
                },
                "enableCaching": {
                  "name": "enableCaching",
                  "type": "boolean",
                  "optional": false
                },
                "enableOptimization": {
                  "name": "enableOptimization",
                  "type": "boolean",
                  "optional": false
                },
                "enableQualityAssurance": {
                  "name": "enableQualityAssurance",
                  "type": "boolean",
                  "optional": false
                },
                "enableAutoBackup": {
                  "name": "enableAutoBackup",
                  "type": "boolean",
                  "optional": false
                },
                "fallbackToLocalAnalysis": {
                  "name": "fallbackToLocalAnalysis",
                  "type": "boolean",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 61
            }
          }
        ],
        "systemIntegrationTypes": []
      },
      "lib\\plot\\section\\types.ts": {
        "filePath": "lib\\plot\\section\\types.ts",
        "fileSize": 9235,
        "system": "plot",
        "module": "plot/section",
        "interfaces": {
          "SectionPlot": {
            "name": "SectionPlot",
            "body": "/** セクションの一意識別子 */\r\n  id: string;\r\n  \r\n  /** 章の範囲 */\r\n  chapterRange: {\r\n    start: number;\r\n    end: number;",
            "properties": {
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "chapterRange": {
                "name": "chapterRange",
                "type": "{",
                "optional": false
              },
              "start": {
                "name": "start",
                "type": "number",
                "optional": false
              },
              "end": {
                "name": "end",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 14
          },
          "SectionPlotParams": {
            "name": "SectionPlotParams",
            "body": "/** タイトル */\r\n  title: string;\r\n  \r\n  /** 章の範囲 */\r\n  chapterRange: {\r\n    start: number;\r\n    end: number;",
            "properties": {
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "chapterRange": {
                "name": "chapterRange",
                "type": "{",
                "optional": false
              },
              "start": {
                "name": "start",
                "type": "number",
                "optional": false
              },
              "end": {
                "name": "end",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 47
          },
          "SectionStructure": {
            "name": "SectionStructure",
            "body": "/** セクションID */\r\n  id: string;\r\n  \r\n  /** セクションタイトル */\r\n  title: string;\r\n  \r\n  /** セクション番号 */\r\n  number: number;\r\n  \r\n  /** 章範囲 */\r\n  chapterRange: {\r\n    start: number;\r\n    end: number;",
            "properties": {
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "number": {
                "name": "number",
                "type": "number",
                "optional": false
              },
              "chapterRange": {
                "name": "chapterRange",
                "type": "{",
                "optional": false
              },
              "start": {
                "name": "start",
                "type": "number",
                "optional": false
              },
              "end": {
                "name": "end",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 86
          },
          "LearningJourneyDesign": {
            "name": "LearningJourneyDesign",
            "body": "/** 主要概念 */\r\n  mainConcept: string;\r\n  \r\n  /** 副次的概念 */\r\n  secondaryConcepts: string[];\r\n  \r\n  /** 中心となる学習段階 */\r\n  primaryLearningStage: LearningStage;\r\n  \r\n  /** 副次的学習段階 */\r\n  secondaryLearningStages: LearningStage[];\r\n  \r\n  /** 学習目標 */\r\n  learningObjectives: {\r\n    /** 認知的目標 */\r\n    cognitive: string;\r\n    \r\n    /** 感情的目標 */\r\n    affective: string;\r\n    \r\n    /** 行動的目標 */\r\n    behavioral: string;",
            "properties": {
              "mainConcept": {
                "name": "mainConcept",
                "type": "string",
                "optional": false
              },
              "secondaryConcepts": {
                "name": "secondaryConcepts",
                "type": "string[]",
                "optional": false
              },
              "primaryLearningStage": {
                "name": "primaryLearningStage",
                "type": "LearningStage",
                "optional": false
              },
              "secondaryLearningStages": {
                "name": "secondaryLearningStages",
                "type": "LearningStage[]",
                "optional": false
              },
              "learningObjectives": {
                "name": "learningObjectives",
                "type": "{",
                "optional": false
              },
              "cognitive": {
                "name": "cognitive",
                "type": "string",
                "optional": false
              },
              "affective": {
                "name": "affective",
                "type": "string",
                "optional": false
              },
              "behavioral": {
                "name": "behavioral",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 119
          },
          "EmotionalCurvePoint": {
            "name": "EmotionalCurvePoint",
            "body": "chapter: number;\r\n    emotion: string;\r\n    tension: number;",
            "properties": {
              "chapter": {
                "name": "chapter",
                "type": "number",
                "optional": false
              },
              "emotion": {
                "name": "emotion",
                "type": "string",
                "optional": false
              },
              "tension": {
                "name": "tension",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 172
          },
          "EmotionalDesign": {
            "name": "EmotionalDesign",
            "body": "/** 感情の弧 */\r\n  emotionalArc: {\r\n    /** 開始時のトーン */\r\n    opening: EmotionalTone;\r\n    \r\n    /** 中間点のトーン */\r\n    midpoint: EmotionalTone;\r\n    \r\n    /** 結末のトーン */\r\n    conclusion: EmotionalTone;",
            "properties": {
              "emotionalArc": {
                "name": "emotionalArc",
                "type": "{",
                "optional": false
              },
              "opening": {
                "name": "opening",
                "type": "EmotionalTone",
                "optional": false
              },
              "midpoint": {
                "name": "midpoint",
                "type": "EmotionalTone",
                "optional": false
              },
              "conclusion": {
                "name": "conclusion",
                "type": "EmotionalTone",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 182
          },
          "CharacterDesign": {
            "name": "CharacterDesign",
            "body": "/** 主要キャラクター */\r\n  mainCharacters: string[];\r\n  \r\n  /** キャラクターの役割 */\r\n  characterRoles: Record<string, {\r\n    /** 学習における役割 */\r\n    learningRole: 'mentor' | 'challenger' | 'reflector' | 'supporter';\r\n    \r\n    /** 物語機能 */\r\n    narrativeFunction: string;",
            "properties": {
              "mainCharacters": {
                "name": "mainCharacters",
                "type": "string[]",
                "optional": false
              },
              "characterRoles": {
                "name": "characterRoles",
                "type": "Record<string",
                "optional": false
              },
              "learningRole": {
                "name": "learningRole",
                "type": "'mentor' | 'challenger' | 'reflector' | 'supporter'",
                "optional": false
              },
              "narrativeFunction": {
                "name": "narrativeFunction",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 230
          },
          "NarrativeStructureDesign": {
            "name": "NarrativeStructureDesign",
            "body": "/** 重要シーン */\r\n  keyScenes: Array<{\r\n    /** 説明 */\r\n    description: string;\r\n    \r\n    /** 目的 */\r\n    purpose: string;\r\n    \r\n    /** 相対位置 */\r\n    relativePosition: number;\r\n    \r\n    /** 学習との関連 */\r\n    learningConnection: string;",
            "properties": {
              "keyScenes": {
                "name": "keyScenes",
                "type": "Array<{",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "purpose": {
                "name": "purpose",
                "type": "string",
                "optional": false
              },
              "relativePosition": {
                "name": "relativePosition",
                "type": "number",
                "optional": false
              },
              "learningConnection": {
                "name": "learningConnection",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 278
          },
          "MetaInformation": {
            "name": "MetaInformation",
            "body": "/** 作成日時 */\r\n  created: string;\r\n  \r\n  /** 最終更新日時 */\r\n  lastModified: string;\r\n  \r\n  /** バージョン */\r\n  version: number;\r\n  \r\n  /** 編集者メモ */\r\n  editorNotes: string;\r\n  \r\n  /** 生成に使用したプロンプト */\r\n  generationPrompts: string[];\r\n  \r\n  /** 全体ストーリーとの関係 */\r\n  relationToOverallStory: string;",
            "properties": {
              "created": {
                "name": "created",
                "type": "string",
                "optional": false
              },
              "lastModified": {
                "name": "lastModified",
                "type": "string",
                "optional": false
              },
              "version": {
                "name": "version",
                "type": "number",
                "optional": false
              },
              "editorNotes": {
                "name": "editorNotes",
                "type": "string",
                "optional": false
              },
              "generationPrompts": {
                "name": "generationPrompts",
                "type": "string[]",
                "optional": false
              },
              "relationToOverallStory": {
                "name": "relationToOverallStory",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 341
          },
          "CoherenceAnalysis": {
            "name": "CoherenceAnalysis",
            "body": "/** 全体的な一貫性スコア (0-10) */\r\n  overallScore: number;\r\n  \r\n  /** 問題のある領域 */\r\n  problematicAreas: Array<{\r\n    /** 問題の種類 */\r\n    type: 'theme' | 'character' | 'plot' | 'setting' | 'tone';\r\n    \r\n    /** 説明 */\r\n    description: string;\r\n    \r\n    /** 深刻度 (0-10) */\r\n    severity: number;",
            "properties": {
              "overallScore": {
                "name": "overallScore",
                "type": "number",
                "optional": false
              },
              "problematicAreas": {
                "name": "problematicAreas",
                "type": "Array<{",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "'theme' | 'character' | 'plot' | 'setting' | 'tone'",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "severity": {
                "name": "severity",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 371
          },
          "ObjectiveProgress": {
            "name": "ObjectiveProgress",
            "body": "/** 認知的目標の達成度 (0-1) */\r\n  cognitiveProgress: number;\r\n  \r\n  /** 感情的目標の達成度 (0-1) */\r\n  affectiveProgress: number;\r\n  \r\n  /** 行動的目標の達成度 (0-1) */\r\n  behavioralProgress: number;\r\n  \r\n  /** 具体的な例 */\r\n  examples: Array<{\r\n    /** 目標タイプ */\r\n    objectiveType: 'cognitive' | 'affective' | 'behavioral';\r\n    \r\n    /** 例の説明 */\r\n    description: string;\r\n    \r\n    /** 章番号 */\r\n    chapterNumber: number;",
            "properties": {
              "cognitiveProgress": {
                "name": "cognitiveProgress",
                "type": "number",
                "optional": false
              },
              "affectiveProgress": {
                "name": "affectiveProgress",
                "type": "number",
                "optional": false
              },
              "behavioralProgress": {
                "name": "behavioralProgress",
                "type": "number",
                "optional": false
              },
              "examples": {
                "name": "examples",
                "type": "Array<{",
                "optional": false
              },
              "objectiveType": {
                "name": "objectiveType",
                "type": "'cognitive' | 'affective' | 'behavioral'",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 395
          },
          "EmotionalArcProgress": {
            "name": "EmotionalArcProgress",
            "body": "/** 全体的な実現度 (0-1) */\r\n  overallRealization: number;\r\n  \r\n  /** 感情的弧の段階ごとの実現度 */\r\n  stageRealization: {\r\n    /** 開始部分の実現度 (0-1) */\r\n    opening: number;\r\n    \r\n    /** 中間点の実現度 (0-1) */\r\n    midpoint: number;\r\n    \r\n    /** 結末部分の実現度 (0-1) */\r\n    conclusion: number;",
            "properties": {
              "overallRealization": {
                "name": "overallRealization",
                "type": "number",
                "optional": false
              },
              "stageRealization": {
                "name": "stageRealization",
                "type": "{",
                "optional": false
              },
              "opening": {
                "name": "opening",
                "type": "number",
                "optional": false
              },
              "midpoint": {
                "name": "midpoint",
                "type": "number",
                "optional": false
              },
              "conclusion": {
                "name": "conclusion",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 425
          },
          "ImprovementSuggestion": {
            "name": "ImprovementSuggestion",
            "body": "/** 改善領域 */\r\n  area: 'theme' | 'character' | 'learning' | 'emotion' | 'plot' | 'pacing';\r\n  \r\n  /** 提案内容 */\r\n  suggestion: string;\r\n  \r\n  /** 対象章範囲 */\r\n  targetChapters: number[];\r\n  \r\n  /** 優先度 (1-5) */\r\n  priority: number;",
            "properties": {
              "area": {
                "name": "area",
                "type": "'theme' | 'character' | 'learning' | 'emotion' | 'plot' | 'pacing'",
                "optional": false
              },
              "suggestion": {
                "name": "suggestion",
                "type": "string",
                "optional": false
              },
              "targetChapters": {
                "name": "targetChapters",
                "type": "number[]",
                "optional": false
              },
              "priority": {
                "name": "priority",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 485
          },
          "ChapterOutline": {
            "name": "ChapterOutline",
            "body": "/** 章番号 */\r\n  chapterNumber: number;\r\n  \r\n  /** タイトル */\r\n  title: string;\r\n  \r\n  /** 概要 */\r\n  summary: string;\r\n  \r\n  /** 学習段階 */\r\n  learningStage: LearningStage;\r\n  \r\n  /** 感情トーン */\r\n  emotionalTone: EmotionalTone;\r\n  \r\n  /** 重要イベント */\r\n  keyEvents: string[];",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "summary": {
                "name": "summary",
                "type": "string",
                "optional": false
              },
              "learningStage": {
                "name": "learningStage",
                "type": "LearningStage",
                "optional": false
              },
              "emotionalTone": {
                "name": "emotionalTone",
                "type": "EmotionalTone",
                "optional": false
              },
              "keyEvents": {
                "name": "keyEvents",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 503
          }
        },
        "types": {
          "EmotionalTone": {
            "name": "EmotionalTone",
            "definition": "string",
            "isUnion": false,
            "isIntersection": false,
            "isGeneric": false,
            "lineNumber": 365
          }
        },
        "enums": {},
        "imports": [
          {
            "types": [
              "LearningStage"
            ],
            "source": "@/lib/learning-journey/concept-learning-manager",
            "isTypeOnly": false
          }
        ],
        "exports": [
          "SectionPlot",
          "SectionPlotParams",
          "SectionStructure",
          "LearningJourneyDesign",
          "EmotionalCurvePoint",
          "EmotionalDesign",
          "CharacterDesign",
          "NarrativeStructureDesign",
          "MetaInformation",
          "EmotionalTone",
          "CoherenceAnalysis",
          "ObjectiveProgress",
          "EmotionalArcProgress",
          "ImprovementSuggestion",
          "ChapterOutline"
        ],
        "inlineTypes": [
          {
            "definition": ": {\r\n    start: number;\r\n    end: number;\r\n  }",
            "lineNumber": 19
          },
          {
            "definition": ": {\r\n    start: number;\r\n    end: number;\r\n  }",
            "lineNumber": 52
          },
          {
            "definition": ": {\r\n    start: number;\r\n    end: number;\r\n  }",
            "lineNumber": 97
          },
          {
            "definition": ": {\r\n    /** 認知的目標 */\r\n    cognitive: string;\r\n    \r\n    /** 感情的目標 */\r\n    affective: string;\r\n    \r\n    /** 行動的目標 */\r\n    behavioral: string;\r\n  }",
            "lineNumber": 133
          },
          {
            "definition": ": {\r\n    /** 初期状態 */\r\n    startingState: string;\r\n    \r\n    /** 乗り越える課題 */\r\n    challenges: string[];\r\n    \r\n    /** 得るべき洞察 */\r\n    insights: string[];\r\n    \r\n    /** 終着点 */\r\n    endState: string;\r\n  }",
            "lineNumber": 145
          },
          {
            "definition": ": {\r\n    /** 使用するメタファー */\r\n    metaphors: string[];\r\n    \r\n    /** 具体的な状況 */\r\n    situations: string[];\r\n    \r\n    /** 対話テーマ */\r\n    dialogueThemes: string[];\r\n  }",
            "lineNumber": 160
          },
          {
            "definition": ": {\r\n    /** 開始時のトーン */\r\n    opening: EmotionalTone;\r\n    \r\n    /** 中間点のトーン */\r\n    midpoint: EmotionalTone;\r\n    \r\n    /** 結末のトーン */\r\n    conclusion: EmotionalTone;\r\n  }",
            "lineNumber": 184
          },
          {
            "definition": ": {\r\n    /** 相対位置 */\r\n    relativePosition: number;\r\n    \r\n    /** タイプ */\r\n    type: 'intellectual' | 'emotional' | 'moral' | 'transformative';\r\n    \r\n    /** 説明 */\r\n    description: string;\r\n  }",
            "lineNumber": 208
          },
          {
            "definition": ": {\r\n    /** 前セクションとの接続 */\r\n    previous: string;\r\n    \r\n    /** 次セクションとの接続 */\r\n    next: string;\r\n  }",
            "lineNumber": 328
          },
          {
            "definition": ": {\r\n    /** 開始部分の実現度 (0-1) */\r\n    opening: number;\r\n    \r\n    /** 中間点の実現度 (0-1) */\r\n    midpoint: number;\r\n    \r\n    /** 結末部分の実現度 (0-1) */\r\n    conclusion: number;\r\n  }",
            "lineNumber": 430
          },
          {
            "definition": ": {\r\n      /** 相対位置 */\r\n      relativePosition: number;\r\n      \r\n      /** 強度 */\r\n      intensity: number;\r\n      \r\n      /** 説明 */\r\n      description: string;\r\n    }",
            "lineNumber": 444
          },
          {
            "definition": ": {\r\n      /** 実際の章 */\r\n      chapter: number;\r\n      \r\n      /** 実際の強度 */\r\n      intensity: number;\r\n      \r\n      /** 実際の説明 */\r\n      description: string;\r\n    }",
            "lineNumber": 456
          },
          {
            "definition": ": {\r\n    /** 実現されたか */\r\n    realized: boolean;\r\n    \r\n    /** 実際の章 */\r\n    actualChapter?: number;\r\n    \r\n    /** 説明 */\r\n    description?: string;\r\n  }",
            "lineNumber": 469
          }
        ],
        "generics": [
          "{\r\n    /** 相対位置（0-1） */\r\n    relativePosition: number;\r\n    \r\n    /** 強度（0-1） */\r\n    intensity: number;\r\n    \r\n    /** 説明 */\r\n    description: string;\r\n  }",
          "string, {\r\n    /** 学習における役割 */\r\n    learningRole: 'mentor' | 'challenger' | 'reflector' | 'supporter';\r\n    \r\n    /** 物語機能 */\r\n    narrativeFunction: string;\r\n  }",
          "{\r\n    /** 関係するキャラクター */\r\n    characters: [string, string];\r\n    \r\n    /** 初期関係性 */\r\n    startingDynamic: string;\r\n    \r\n    /** 発展プロセス */\r\n    evolution: string;\r\n    \r\n    /** 最終関係性 */\r\n    endDynamic: string;\r\n  }",
          "string, {\r\n    /** 初期状態 */\r\n    startingState: string;\r\n    \r\n    /** 内的障害 */\r\n    internalObstacles: string[];\r\n    \r\n    /** 成長の瞬間 */\r\n    growthMoments: string[];\r\n    \r\n    /** 最終状態 */\r\n    endState: string;\r\n  }",
          "{\r\n    /** 説明 */\r\n    description: string;\r\n    \r\n    /** 目的 */\r\n    purpose: string;\r\n    \r\n    /** 相対位置 */\r\n    relativePosition: number;\r\n    \r\n    /** 学習との関連 */\r\n    learningConnection: string;\r\n  }",
          "{\r\n    /** 説明 */\r\n    description: string;\r\n    \r\n    /** 影響 */\r\n    impact: string;\r\n    \r\n    /** 相対位置 */\r\n    relativePosition: number;\r\n  }",
          "{\r\n    /** スレッド名 */\r\n    thread: string;\r\n    \r\n    /** 発展プロセス */\r\n    development: string;\r\n  }",
          "{\r\n    /** 要素 */\r\n    element: string;\r\n    \r\n    /** 設置ポイント */\r\n    plantingPoint: number;\r\n    \r\n    /** 回収予定セクション */\r\n    payoffSection?: number;\r\n  }",
          "{\r\n    /** 問題の種類 */\r\n    type: 'theme' | 'character' | 'plot' | 'setting' | 'tone';\r\n    \r\n    /** 説明 */\r\n    description: string;\r\n    \r\n    /** 深刻度 (0-10) */\r\n    severity: number;\r\n  }",
          "{\r\n    /** 目標タイプ */\r\n    objectiveType: 'cognitive' | 'affective' | 'behavioral';\r\n    \r\n    /** 例の説明 */\r\n    description: string;\r\n    \r\n    /** 章番号 */\r\n    chapterNumber: number;\r\n  }",
          "{\r\n    /** 計画された緊張ポイント */\r\n    planned: {\r\n      /** 相対位置 */\r\n      relativePosition: number;\r\n      \r\n      /** 強度 */\r\n      intensity: number;\r\n      \r\n      /** 説明 */\r\n      description: string;\r\n    };\r\n    \r\n    /** 実際の緊張ポイント */\r\n    actual: {\r\n      /** 実際の章 */\r\n      chapter: number;\r\n      \r\n      /** 実際の強度 */\r\n      intensity: number;\r\n      \r\n      /** 実際の説明 */\r\n      description: string;\r\n    } | null;\r\n  }"
        ],
        "extendedTypes": [],
        "dataModelTypes": [
          {
            "name": "MetaInformation",
            "category": "DATA_MODEL",
            "definition": {
              "name": "MetaInformation",
              "body": "/** 作成日時 */\r\n  created: string;\r\n  \r\n  /** 最終更新日時 */\r\n  lastModified: string;\r\n  \r\n  /** バージョン */\r\n  version: number;\r\n  \r\n  /** 編集者メモ */\r\n  editorNotes: string;\r\n  \r\n  /** 生成に使用したプロンプト */\r\n  generationPrompts: string[];\r\n  \r\n  /** 全体ストーリーとの関係 */\r\n  relationToOverallStory: string;",
              "properties": {
                "created": {
                  "name": "created",
                  "type": "string",
                  "optional": false
                },
                "lastModified": {
                  "name": "lastModified",
                  "type": "string",
                  "optional": false
                },
                "version": {
                  "name": "version",
                  "type": "number",
                  "optional": false
                },
                "editorNotes": {
                  "name": "editorNotes",
                  "type": "string",
                  "optional": false
                },
                "generationPrompts": {
                  "name": "generationPrompts",
                  "type": "string[]",
                  "optional": false
                },
                "relationToOverallStory": {
                  "name": "relationToOverallStory",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 341
            }
          }
        ],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": []
      },
      "lib\\plot\\types.ts": {
        "filePath": "lib\\plot\\types.ts",
        "fileSize": 4330,
        "system": "plot",
        "module": "plot",
        "interfaces": {
          "ConcretePlotPoint": {
            "name": "ConcretePlotPoint",
            "body": "chapterRange: [number, number];    // 適用チャプター範囲\r\n    title: string;                     // プロットタイトル\r\n    summary: string;                   // 概要\r\n\r\n    // 追加するフィールド\r\n    phase?: string;                    // 物語フェーズ\r\n    storyArc?: string;                 // このプロットが属するストーリーアーク\r\n    storyGoal?: string;                // この範囲での物語目標\r\n    mustHaveOutcome?: string;          // 必ず達成すべき結果\r\n\r\n    keyEvents: string[];               // 重要イベント\r\n    characterFocus: string[];          // 注目キャラクター\r\n    requiredElements: string[];        // 必須要素\r\n    foreshadowing?: string[];          // 伏線（オプション）",
            "properties": {
              "chapterRange": {
                "name": "chapterRange",
                "type": "[number",
                "optional": false
              },
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "summary": {
                "name": "summary",
                "type": "string",
                "optional": false
              },
              "phase": {
                "name": "phase",
                "type": "string",
                "optional": true
              },
              "storyArc": {
                "name": "storyArc",
                "type": "string",
                "optional": true
              },
              "storyGoal": {
                "name": "storyGoal",
                "type": "string",
                "optional": true
              },
              "mustHaveOutcome": {
                "name": "mustHaveOutcome",
                "type": "string",
                "optional": true
              },
              "keyEvents": {
                "name": "keyEvents",
                "type": "string[]",
                "optional": false
              },
              "characterFocus": {
                "name": "characterFocus",
                "type": "string[]",
                "optional": false
              },
              "requiredElements": {
                "name": "requiredElements",
                "type": "string[]",
                "optional": false
              },
              "foreshadowing": {
                "name": "foreshadowing",
                "type": "string[]",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 18
          },
          "AbstractPlotGuideline": {
            "name": "AbstractPlotGuideline",
            "body": "phase: string;                     // 物語のフェーズ\r\n    theme: string;                     // テーマ\r\n    emotionalTone: string;             // 感情的トーン\r\n\r\n    // 追加するフィールド\r\n    thematicMessage?: string;          // このフェーズで伝えたいメッセージ\r\n    phasePurpose?: string;             // このフェーズの目的\r\n\r\n    potentialDirections: string[];     // 可能性のある方向性\r\n    prohibitedElements: string[];      // 避けるべき要素\r\n    chapterRange?: [number, number];   // 適用チャプター範囲（オプション）\r\n    keyCharacters?: string[];          // 焦点を当てるキャラクター（オプション）",
            "properties": {
              "phase": {
                "name": "phase",
                "type": "string",
                "optional": false
              },
              "theme": {
                "name": "theme",
                "type": "string",
                "optional": false
              },
              "emotionalTone": {
                "name": "emotionalTone",
                "type": "string",
                "optional": false
              },
              "thematicMessage": {
                "name": "thematicMessage",
                "type": "string",
                "optional": true
              },
              "phasePurpose": {
                "name": "phasePurpose",
                "type": "string",
                "optional": true
              },
              "potentialDirections": {
                "name": "potentialDirections",
                "type": "string[]",
                "optional": false
              },
              "prohibitedElements": {
                "name": "prohibitedElements",
                "type": "string[]",
                "optional": false
              },
              "chapterRange": {
                "name": "chapterRange",
                "type": "[number",
                "optional": true
              },
              "keyCharacters": {
                "name": "keyCharacters",
                "type": "string[]",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 38
          },
          "MediumPlot": {
            "name": "MediumPlot",
            "body": "title: string;\r\n    description: string;\r\n    version: number;\r\n    sections: any[];\r\n    learning_elements: {\r\n      name: string;\r\n      description: string;\r\n      section: number;",
            "properties": {
              "title": {
                "name": "title",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "version": {
                "name": "version",
                "type": "number",
                "optional": false
              },
              "sections": {
                "name": "sections",
                "type": "any[]",
                "optional": false
              },
              "learning_elements": {
                "name": "learning_elements",
                "type": "{",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "section": {
                "name": "section",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 56
          },
          "HierarchicalConsistencyResult": {
            "name": "HierarchicalConsistencyResult",
            "body": "consistent: boolean;\r\n    guidance: string;\r\n    issues: Array<{\r\n        level: 'concrete' | 'midTerm' | 'abstract';\r\n        memoryType: 'short' | 'mid' | 'long';\r\n        description: string;\r\n        severity: \"LOW\" | \"MEDIUM\" | \"HIGH\";\r\n        suggestion: string;",
            "properties": {
              "consistent": {
                "name": "consistent",
                "type": "boolean",
                "optional": false
              },
              "guidance": {
                "name": "guidance",
                "type": "string",
                "optional": false
              },
              "issues": {
                "name": "issues",
                "type": "Array<{",
                "optional": false
              },
              "level": {
                "name": "level",
                "type": "'concrete' | 'midTerm' | 'abstract'",
                "optional": false
              },
              "memoryType": {
                "name": "memoryType",
                "type": "'short' | 'mid' | 'long'",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "severity": {
                "name": "severity",
                "type": "\"LOW\" | \"MEDIUM\" | \"HIGH\"",
                "optional": false
              },
              "suggestion": {
                "name": "suggestion",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 77
          },
          "PlotStrategy": {
            "name": "PlotStrategy",
            "body": "globalStrategy: {\r\n        preferredMode: \"concrete\" | \"abstract\" | \"mixed\";\r\n        abstractRatio: number;         // 0-1の間の値\r\n        plotComplexity: \"low\" | \"medium\" | \"high\";",
            "properties": {
              "globalStrategy": {
                "name": "globalStrategy",
                "type": "{",
                "optional": false
              },
              "preferredMode": {
                "name": "preferredMode",
                "type": "\"concrete\" | \"abstract\" | \"mixed\"",
                "optional": false
              },
              "abstractRatio": {
                "name": "abstractRatio",
                "type": "number",
                "optional": false
              },
              "plotComplexity": {
                "name": "plotComplexity",
                "type": "\"low\" | \"medium\" | \"high\"",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 92
          },
          "PlotContext": {
            "name": "PlotContext",
            "body": "mode: PlotMode;                    // 現在のプロットモード\r\n    modeInstructions: string;          // モードに応じた指示\r\n    currentArc: {                      // 現在のアーク情報\r\n        name: string;\r\n        theme: string;\r\n        approximateChapters: [number, number];",
            "properties": {
              "mode": {
                "name": "mode",
                "type": "PlotMode",
                "optional": false
              },
              "modeInstructions": {
                "name": "modeInstructions",
                "type": "string",
                "optional": false
              },
              "currentArc": {
                "name": "currentArc",
                "type": "{                      // 現在のアーク情報",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "theme": {
                "name": "theme",
                "type": "string",
                "optional": false
              },
              "approximateChapters": {
                "name": "approximateChapters",
                "type": "[number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 113
          },
          "WorldSettings": {
            "name": "WorldSettings",
            "body": "description: string;\r\n    regions?: any[];\r\n    history?: any[];\r\n    rules?: any[];\r\n    genre?: string;\r\n\r\n    magicSystem?: any;\r\n    technology?: any;\r\n    socialSystem?: any;\r\n    supernatural?: any[];\r\n    uniqueElements?: any[];\r\n    \r\n    // ビジネスジャンル向けの追加フィールド\r\n    businessSystem?: {\r\n        description?: string;\r\n        rules?: string[];\r\n        [key: string]: any;",
            "properties": {
              "description": {
                "name": "description",
                "type": "string",
                "optional": true
              },
              "regions": {
                "name": "regions",
                "type": "any[]",
                "optional": true
              },
              "history": {
                "name": "history",
                "type": "any[]",
                "optional": true
              },
              "rules": {
                "name": "rules",
                "type": "string[]",
                "optional": true
              },
              "genre": {
                "name": "genre",
                "type": "string",
                "optional": true
              },
              "magicSystem": {
                "name": "magicSystem",
                "type": "any",
                "optional": true
              },
              "technology": {
                "name": "technology",
                "type": "any",
                "optional": true
              },
              "socialSystem": {
                "name": "socialSystem",
                "type": "any",
                "optional": true
              },
              "supernatural": {
                "name": "supernatural",
                "type": "any[]",
                "optional": true
              },
              "uniqueElements": {
                "name": "uniqueElements",
                "type": "any[]",
                "optional": true
              },
              "businessSystem": {
                "name": "businessSystem",
                "type": "{",
                "optional": true
              },
              "key": {
                "name": "key",
                "type": "string]: any",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 128
          },
          "ThemeSettings": {
            "name": "ThemeSettings",
            "body": "description: string;\r\n    mainThemes?: string[];\r\n    subThemes?: string[];\r\n    evolution?: any[];\r\n    implementation?: any;\r\n    oppositions?: any[];\r\n    message?: any;\r\n    conclusion?: any;\r\n    customFields?: any;",
            "properties": {
              "description": {
                "name": "description",
                "type": "string",
                "optional": false
              },
              "mainThemes": {
                "name": "mainThemes",
                "type": "string[]",
                "optional": true
              },
              "subThemes": {
                "name": "subThemes",
                "type": "string[]",
                "optional": true
              },
              "evolution": {
                "name": "evolution",
                "type": "any[]",
                "optional": true
              },
              "implementation": {
                "name": "implementation",
                "type": "any",
                "optional": true
              },
              "oppositions": {
                "name": "oppositions",
                "type": "any[]",
                "optional": true
              },
              "message": {
                "name": "message",
                "type": "any",
                "optional": true
              },
              "conclusion": {
                "name": "conclusion",
                "type": "any",
                "optional": true
              },
              "customFields": {
                "name": "customFields",
                "type": "any",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 155
          },
          "FormattedWorldAndTheme": {
            "name": "FormattedWorldAndTheme",
            "body": "worldSettings: string;\r\n    theme: string;\r\n    worldSettingsDetailed?: WorldSettings;\r\n    themeSettingsDetailed?: ThemeSettings;",
            "properties": {
              "worldSettings": {
                "name": "worldSettings",
                "type": "string",
                "optional": false
              },
              "theme": {
                "name": "theme",
                "type": "string",
                "optional": false
              },
              "worldSettingsDetailed": {
                "name": "worldSettingsDetailed",
                "type": "WorldSettings",
                "optional": true
              },
              "themeSettingsDetailed": {
                "name": "themeSettingsDetailed",
                "type": "ThemeSettings",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 170
          }
        },
        "types": {},
        "enums": {
          "PlotMode": {
            "name": "PlotMode",
            "body": "CONCRETE = \"CONCRETE\",  // 具体的プロット\r\n    MIDTERM = \"MIDTERM\",\r\n    ABSTRACT = \"ABSTRACT\", // 抽象的プロット\r\n    HYBRID = \"HYBRID\",     // ハイブリッド\r\n    TRANSITION_TO_ABSTRACT = \"TRANSITION_TO_ABSTRACT\", // 具体→抽象への移行\r\n    TRANSITION_TO_CONCRETE = \"TRANSITION_TO_CONCRETE\"  // 抽象→具体への移行",
            "values": [
              {
                "name": "CONCRETE",
                "value": "\"CONCRETE\""
              },
              {
                "name": "// 具体的プロット\r\n    MIDTERM",
                "value": "\"MIDTERM\""
              },
              {
                "name": "ABSTRACT",
                "value": "\"ABSTRACT\""
              },
              {
                "name": "// 抽象的プロット\r\n    HYBRID",
                "value": "\"HYBRID\""
              },
              {
                "name": "// ハイブリッド\r\n    TRANSITION_TO_ABSTRACT",
                "value": "\"TRANSITION_TO_ABSTRACT\""
              },
              {
                "name": "// 具体→抽象への移行\r\n    TRANSITION_TO_CONCRETE",
                "value": "\"TRANSITION_TO_CONCRETE\"  // 抽象→具体への移行"
              }
            ],
            "lineNumber": 6
          }
        },
        "imports": [],
        "exports": [
          "PlotMode",
          "ConcretePlotPoint",
          "AbstractPlotGuideline",
          "MediumPlot",
          "HierarchicalConsistencyResult",
          "PlotStrategy",
          "PlotContext",
          "WorldSettings",
          "ThemeSettings",
          "FormattedWorldAndTheme"
        ],
        "inlineTypes": [
          {
            "definition": ": {\r\n      name: string;\r\n      description: string;\r\n      section: number;\r\n    }",
            "lineNumber": 61
          },
          {
            "definition": ": {\r\n      version: number;\r\n      author: string;\r\n      creation_date: string;\r\n      description: string;\r\n    }",
            "lineNumber": 66
          },
          {
            "definition": ": {\r\n        preferredMode: \"concrete\" | \"abstract\" | \"mixed\";\r\n        abstractRatio: number;         // 0-1の間の値\r\n        plotComplexity: \"low\" | \"medium\" | \"high\";\r\n    }",
            "lineNumber": 93
          },
          {
            "definition": ": {                      // 現在のアーク情報\r\n        name: string;\r\n        theme: string;\r\n        approximateChapters: [number, number];\r\n    }",
            "lineNumber": 116
          },
          {
            "definition": ": {\r\n        description?: string;\r\n        rules?: string[];\r\n        [key: string]: any;\r\n    }",
            "lineNumber": 142
          }
        ],
        "generics": [
          "{\r\n        level: 'concrete' | 'midTerm' | 'abstract';\r\n        memoryType: 'short' | 'mid' | 'long';\r\n        description: string;\r\n        severity: \"LOW\" | \"MEDIUM\" | \"HIGH\";\r\n        suggestion: string;\r\n    }",
          "{\r\n        chapterRange: [number, number];\r\n        mode: PlotMode;\r\n        reason: string;\r\n    }",
          "{\r\n        arcName: string;\r\n        strategy: string;\r\n        notes: string;\r\n    }"
        ],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": []
      },
      "lib\\storage\\index.ts": {
        "filePath": "lib\\storage\\index.ts",
        "fileSize": 10188,
        "system": "storage",
        "module": "storage",
        "interfaces": {},
        "types": {},
        "enums": {},
        "imports": [
          {
            "types": [
              "StorageProvider",
              "GitHubStorageOptions",
              "LocalStorageOptions",
              "FileMetadata"
            ],
            "source": "./types",
            "isTypeOnly": true
          },
          {
            "types": [
              "GitHubStorageProvider"
            ],
            "source": "./github-storage",
            "isTypeOnly": false
          },
          {
            "types": [
              "LocalStorageProvider"
            ],
            "source": "./local-storage",
            "isTypeOnly": false
          },
          {
            "types": [
              "EnhancedLocalStorageProvider"
            ],
            "source": "./enhanced-storage",
            "isTypeOnly": false
          },
          {
            "types": [
              "logger"
            ],
            "source": "../utils/logger",
            "isTypeOnly": false
          },
          {
            "types": [
              "ChapterStorageService"
            ],
            "source": "./chapter-storage",
            "isTypeOnly": false
          },
          {
            "types": [
              "storageProvider"
            ],
            "source": "@/lib/storage",
            "isTypeOnly": false
          },
          {
            "types": [
              "chapterStorage"
            ],
            "source": "@/lib/storage",
            "isTypeOnly": false
          },
          {
            "types": [
              "storageProvider"
            ],
            "source": "@/lib/storage",
            "isTypeOnly": false
          },
          {
            "types": [
              "storageProvider",
              "EnhancedLocalStorageProvider"
            ],
            "source": "@/lib/storage",
            "isTypeOnly": false
          }
        ],
        "exports": [
          "type",
          "function",
          "const",
          "const"
        ],
        "inlineTypes": [],
        "generics": [],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [],
        "systemIntegrationTypes": []
      },
      "lib\\storage\\types.ts": {
        "filePath": "lib\\storage\\types.ts",
        "fileSize": 12703,
        "system": "storage",
        "module": "storage",
        "interfaces": {
          "FileMetadata": {
            "name": "FileMetadata",
            "body": "/**\r\n     * ファイルパス\r\n     * \r\n     * ストレージプロバイダーのベースディレクトリからの相対パスです。\r\n     * \r\n     * @type {string",
            "properties": {},
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 42
          },
          "StorageProvider": {
            "name": "StorageProvider",
            "body": "/**\r\n     * ファイルを読み込みます\r\n     * \r\n     * 指定されたパスのファイルを読み込み、その内容を文字列として返します。\r\n     * ファイルが存在しない場合は例外をスローします。\r\n     * \r\n     * @param {string",
            "properties": {},
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 116
          },
          "GitHubStorageOptions": {
            "name": "GitHubStorageOptions",
            "body": "/**\r\n     * GitHubパーソナルアクセストークン\r\n     * \r\n     * GitHub APIにアクセスするための認証トークンです。\r\n     * リポジトリの読み書き権限が必要です。\r\n     * \r\n     * @type {string",
            "properties": {},
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 373
          },
          "LocalStorageOptions": {
            "name": "LocalStorageOptions",
            "body": "/**\r\n     * ベースディレクトリパス\r\n     * \r\n     * すべてのファイル操作の基準となるディレクトリパスです。\r\n     * すべてのファイルパスはこのディレクトリからの相対パスとして解釈されます。\r\n     * \r\n     * @type {string",
            "properties": {},
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 441
          }
        },
        "types": {},
        "enums": {},
        "imports": [],
        "exports": [
          "FileMetadata",
          "StorageProvider",
          "GitHubStorageOptions",
          "LocalStorageOptions"
        ],
        "inlineTypes": [],
        "generics": [
          "string",
          "void",
          "string[]",
          "boolean",
          "FileMetadata | null"
        ],
        "extendedTypes": [],
        "dataModelTypes": [],
        "storageRelatedTypes": [
          {
            "name": "StorageProvider",
            "category": "STORAGE_RELATED",
            "definition": {
              "name": "StorageProvider",
              "body": "/**\r\n     * ファイルを読み込みます\r\n     * \r\n     * 指定されたパスのファイルを読み込み、その内容を文字列として返します。\r\n     * ファイルが存在しない場合は例外をスローします。\r\n     * \r\n     * @param {string",
              "properties": {},
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 116
            }
          },
          {
            "name": "GitHubStorageOptions",
            "category": "STORAGE_RELATED",
            "definition": {
              "name": "GitHubStorageOptions",
              "body": "/**\r\n     * GitHubパーソナルアクセストークン\r\n     * \r\n     * GitHub APIにアクセスするための認証トークンです。\r\n     * リポジトリの読み書き権限が必要です。\r\n     * \r\n     * @type {string",
              "properties": {},
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 373
            }
          },
          {
            "name": "LocalStorageOptions",
            "category": "STORAGE_RELATED",
            "definition": {
              "name": "LocalStorageOptions",
              "body": "/**\r\n     * ベースディレクトリパス\r\n     * \r\n     * すべてのファイル操作の基準となるディレクトリパスです。\r\n     * すべてのファイルパスはこのディレクトリからの相対パスとして解釈されます。\r\n     * \r\n     * @type {string",
              "properties": {},
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 441
            }
          }
        ],
        "systemIntegrationTypes": []
      }
    },
    "typeDefinitions": {
      "unknown": {},
      "analysis": {
        "IGeminiAdapter": [
          {
            "type": "interface",
            "file": "lib\\analysis\\adapters\\interfaces.ts",
            "definition": {
              "name": "IGeminiAdapter",
              "body": "/**\r\n     * テキスト生成リクエストを実行\r\n     * \r\n     * @param prompt 生成プロンプト\r\n     * @param options 生成オプション\r\n     * @returns 生成されたテキスト\r\n     */\r\n    generateText(\r\n      prompt: string,\r\n      options?: {\r\n        temperature?: number;\r\n        targetLength?: number;\r\n        purpose?: string;\r\n        responseFormat?: string;\r\n        useCache?: boolean;\r\n        overrides?: any;",
              "properties": {
                "prompt": {
                  "name": "prompt",
                  "type": "string",
                  "optional": false
                },
                "options": {
                  "name": "options",
                  "type": "{",
                  "optional": true
                },
                "temperature": {
                  "name": "temperature",
                  "type": "number",
                  "optional": true
                },
                "targetLength": {
                  "name": "targetLength",
                  "type": "number",
                  "optional": true
                },
                "purpose": {
                  "name": "purpose",
                  "type": "string",
                  "optional": true
                },
                "responseFormat": {
                  "name": "responseFormat",
                  "type": "string",
                  "optional": true
                },
                "useCache": {
                  "name": "useCache",
                  "type": "boolean",
                  "optional": true
                },
                "overrides": {
                  "name": "overrides",
                  "type": "any",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 13
            },
            "system": "analysis",
            "module": "analysis/adapters"
          }
        ],
        "BaseCoordinatorOptions": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "BaseCoordinatorOptions",
              "body": "/** キャッシュを有効にするか */\r\n  enableCache?: boolean;\r\n  /** 並列処理を有効にするか */\r\n  enableParallelProcessing?: boolean;\r\n  /** 詳細ログを有効にするか */\r\n  enableDetailedLogging?: boolean;",
              "properties": {
                "enableCache": {
                  "name": "enableCache",
                  "type": "boolean",
                  "optional": true
                },
                "enableParallelProcessing": {
                  "name": "enableParallelProcessing",
                  "type": "boolean",
                  "optional": true
                },
                "enableDetailedLogging": {
                  "name": "enableDetailedLogging",
                  "type": "boolean",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 30
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "BaseMetadata": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "BaseMetadata",
              "body": "/** 処理タイムスタンプ */\r\n  timestamp: string;\r\n  /** 使用されたサービス一覧 */\r\n  servicesUsed: string[];\r\n  /** 処理時間（ミリ秒） */\r\n  processingTime: number;\r\n  /** キャッシュヒット率 */\r\n  cacheHitRate: number;",
              "properties": {
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "servicesUsed": {
                  "name": "servicesUsed",
                  "type": "string[]",
                  "optional": false
                },
                "processingTime": {
                  "name": "processingTime",
                  "type": "number",
                  "optional": false
                },
                "cacheHitRate": {
                  "name": "cacheHitRate",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 43
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "CacheableCoordinator": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "CacheableCoordinator",
              "body": "/** キャッシュをクリアする */\r\n  clearCache(): void;",
              "properties": {},
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 58
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "AnalysisCoordinatorOptions": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "AnalysisCoordinatorOptions",
              "body": "/** 統合最適化を有効にするか */\r\n  optimizeForIntegration?: boolean;",
              "properties": {
                "optimizeForIntegration": {
                  "name": "optimizeForIntegration",
                  "type": "boolean",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 71
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "IntegratedAnalysisResult": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "IntegratedAnalysisResult",
              "body": "// 基本章分析\r\n  chapterAnalysis: ChapterAnalysis;\r\n\r\n  // テーマ分析\r\n  themeAnalysis: ThemeResonanceAnalysis;\r\n  foreshadowingProcessing: {\r\n    resolvedForeshadowing: any[];\r\n    generatedCount: number;\r\n    totalActive: number;",
              "properties": {
                "chapterAnalysis": {
                  "name": "chapterAnalysis",
                  "type": "ChapterAnalysis",
                  "optional": false
                },
                "themeAnalysis": {
                  "name": "themeAnalysis",
                  "type": "ThemeResonanceAnalysis",
                  "optional": false
                },
                "foreshadowingProcessing": {
                  "name": "foreshadowingProcessing",
                  "type": "{",
                  "optional": false
                },
                "resolvedForeshadowing": {
                  "name": "resolvedForeshadowing",
                  "type": "any[]",
                  "optional": false
                },
                "generatedCount": {
                  "name": "generatedCount",
                  "type": "number",
                  "optional": false
                },
                "totalActive": {
                  "name": "totalActive",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 80
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "AnalysisMetadata": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "AnalysisMetadata",
              "body": "/** 分析タイムスタンプ */\r\n  analysisTimestamp: string;",
              "properties": {
                "analysisTimestamp": {
                  "name": "analysisTimestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 121
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "SceneStructureAnalysis": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "SceneStructureAnalysis",
              "body": "typeDistribution: {\r\n    [sceneType: string]: number;",
              "properties": {
                "typeDistribution": {
                  "name": "typeDistribution",
                  "type": "{",
                  "optional": false
                },
                "sceneType": {
                  "name": "sceneType",
                  "type": "string]: number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 130
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "SceneRecommendation": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "SceneRecommendation",
              "body": "id: string;\r\n  type: string;\r\n  title: string;\r\n  description: string;\r\n  priority: 'high' | 'medium' | 'low';\r\n  estimatedImpact: number;",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "'high' | 'medium' | 'low'",
                  "optional": false
                },
                "estimatedImpact": {
                  "name": "estimatedImpact",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 151
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "LiteraryInspiration": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "LiteraryInspiration",
              "body": "plotTechniques: LiteraryTechnique[];\r\n  characterTechniques: LiteraryTechnique[];\r\n  atmosphereTechniques: LiteraryTechnique[];",
              "properties": {
                "plotTechniques": {
                  "name": "plotTechniques",
                  "type": "LiteraryTechnique[]",
                  "optional": false
                },
                "characterTechniques": {
                  "name": "characterTechniques",
                  "type": "LiteraryTechnique[]",
                  "optional": false
                },
                "atmosphereTechniques": {
                  "name": "atmosphereTechniques",
                  "type": "LiteraryTechnique[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 164
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "LiteraryInspiration",
              "body": "/**\r\n     * プロット技法\r\n     */\r\n    plotTechniques: {\r\n      /**\r\n       * 技法名\r\n       */\r\n      technique: string;\r\n      \r\n      /**\r\n       * 技法の説明\r\n       */\r\n      description: string;\r\n      \r\n      /**\r\n       * 具体的な適用例\r\n       */\r\n      example: string;\r\n      \r\n      /**\r\n       * 参考となる使用例\r\n       */\r\n      reference: string;",
              "properties": {
                "plotTechniques": {
                  "name": "plotTechniques",
                  "type": "{",
                  "optional": false
                },
                "technique": {
                  "name": "technique",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "example": {
                  "name": "example",
                  "type": "string",
                  "optional": false
                },
                "reference": {
                  "name": "reference",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 202
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "LiteraryTechnique": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "LiteraryTechnique",
              "body": "technique: string;\r\n  description: string;\r\n  example: string;\r\n  reference: string;",
              "properties": {
                "technique": {
                  "name": "technique",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "example": {
                  "name": "example",
                  "type": "string",
                  "optional": false
                },
                "reference": {
                  "name": "reference",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 174
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "LiteraryTechnique",
              "body": "/**\r\n     * 技法名\r\n     */\r\n    techniqueName: string;\r\n    \r\n    /**\r\n     * 技法の説明\r\n     */\r\n    description: string;\r\n    \r\n    /**\r\n     * 具体的な使用例\r\n     */\r\n    example: string;\r\n    \r\n    /**\r\n     * 期待される効果\r\n     */\r\n    effect: string;\r\n    \r\n    /**\r\n     * 適切なジャンル\r\n     */\r\n    suitableGenres: string[];\r\n    \r\n    /**\r\n     * テーマとの関連性（0-1）\r\n     */\r\n    themeRelevance: number;",
              "properties": {
                "techniqueName": {
                  "name": "techniqueName",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "example": {
                  "name": "example",
                  "type": "string",
                  "optional": false
                },
                "effect": {
                  "name": "effect",
                  "type": "string",
                  "optional": false
                },
                "suitableGenres": {
                  "name": "suitableGenres",
                  "type": "string[]",
                  "optional": false
                },
                "themeRelevance": {
                  "name": "themeRelevance",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 167
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "IAnalysisCoordinator": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "IAnalysisCoordinator",
              "body": "/**\r\n   * 包括的章分析を実行する\r\n   * \r\n   * @param content 章の内容\r\n   * @param chapterNumber 章番号\r\n   * @param context 生成コンテキスト\r\n   * @returns 統合分析結果\r\n   */\r\n  analyzeChapter(\r\n    content: string,\r\n    chapterNumber: number,\r\n    context: GenerationContext\r\n  ): Promise<IntegratedAnalysisResult>;",
              "properties": {
                "content": {
                  "name": "content",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "GenerationContext",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 185
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "OptimizationCoordinatorOptions": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "OptimizationCoordinatorOptions",
              "body": "/** カテゴリごとの最大推奨数 */\r\n  maxRecommendationsPerCategory?: number;\r\n  /** 優先順位付け戦略 */\r\n  prioritizationStrategy?: 'impact' | 'effort' | 'balanced';\r\n  /** 矛盾解決を有効にするか */\r\n  enableConflictResolution?: boolean;\r\n  /** 相乗効果検出を有効にするか */\r\n  enableSynergyDetection?: boolean;",
              "properties": {
                "maxRecommendationsPerCategory": {
                  "name": "maxRecommendationsPerCategory",
                  "type": "number",
                  "optional": true
                },
                "prioritizationStrategy": {
                  "name": "prioritizationStrategy",
                  "type": "'impact' | 'effort' | 'balanced'",
                  "optional": true
                },
                "enableConflictResolution": {
                  "name": "enableConflictResolution",
                  "type": "boolean",
                  "optional": true
                },
                "enableSynergyDetection": {
                  "name": "enableSynergyDetection",
                  "type": "boolean",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 209
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "PrioritizedSuggestion": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "PrioritizedSuggestion",
              "body": "id: string;\r\n  category: 'theme' | 'style' | 'character' | 'tension' | 'integrated';\r\n  title: string;\r\n  description: string;\r\n  implementation: string;\r\n  priority: 'high' | 'medium' | 'low';\r\n  impact: number; // 0-1\r\n  effort: number; // 0-1\r\n  dependencies: string[];\r\n  relatedSuggestions: string[];",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "category": {
                  "name": "category",
                  "type": "'theme' | 'style' | 'character' | 'tension' | 'integrated'",
                  "optional": false
                },
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "implementation": {
                  "name": "implementation",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "'high' | 'medium' | 'low'",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "number",
                  "optional": false
                },
                "effort": {
                  "name": "effort",
                  "type": "number",
                  "optional": false
                },
                "dependencies": {
                  "name": "dependencies",
                  "type": "string[]",
                  "optional": false
                },
                "relatedSuggestions": {
                  "name": "relatedSuggestions",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 224
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "ConflictResolution": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "ConflictResolution",
              "body": "conflictType: 'contradiction' | 'redundancy' | 'resource_conflict';\r\n  description: string;\r\n  conflictingSuggestions: string[];\r\n  resolution: string;\r\n  recommendedAction: string;",
              "properties": {
                "conflictType": {
                  "name": "conflictType",
                  "type": "'contradiction' | 'redundancy' | 'resource_conflict'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "conflictingSuggestions": {
                  "name": "conflictingSuggestions",
                  "type": "string[]",
                  "optional": false
                },
                "resolution": {
                  "name": "resolution",
                  "type": "string",
                  "optional": false
                },
                "recommendedAction": {
                  "name": "recommendedAction",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 241
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "ImplementationStep": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "ImplementationStep",
              "body": "step: number;\r\n  phase: 'preparation' | 'core_implementation' | 'refinement' | 'validation';\r\n  suggestions: string[];\r\n  description: string;\r\n  estimatedEffort: 'low' | 'medium' | 'high';",
              "properties": {
                "step": {
                  "name": "step",
                  "type": "number",
                  "optional": false
                },
                "phase": {
                  "name": "phase",
                  "type": "'preparation' | 'core_implementation' | 'refinement' | 'validation'",
                  "optional": false
                },
                "suggestions": {
                  "name": "suggestions",
                  "type": "string[]",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "estimatedEffort": {
                  "name": "estimatedEffort",
                  "type": "'low' | 'medium' | 'high'",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 253
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "SynergyOpportunity": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "SynergyOpportunity",
              "body": "title: string;\r\n  description: string;\r\n  involvedSuggestions: string[];\r\n  synergisticBenefit: string;\r\n  implementationApproach: string;",
              "properties": {
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "involvedSuggestions": {
                  "name": "involvedSuggestions",
                  "type": "string[]",
                  "optional": false
                },
                "synergisticBenefit": {
                  "name": "synergisticBenefit",
                  "type": "string",
                  "optional": false
                },
                "implementationApproach": {
                  "name": "implementationApproach",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 265
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "IntegratedRecommendations": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "IntegratedRecommendations",
              "body": "prioritizedSuggestions: PrioritizedSuggestion[];\r\n  conflictResolutions: ConflictResolution[];\r\n  implementationOrder: ImplementationStep[];\r\n  synergisticOpportunities: SynergyOpportunity[];",
              "properties": {
                "prioritizedSuggestions": {
                  "name": "prioritizedSuggestions",
                  "type": "PrioritizedSuggestion[]",
                  "optional": false
                },
                "conflictResolutions": {
                  "name": "conflictResolutions",
                  "type": "ConflictResolution[]",
                  "optional": false
                },
                "implementationOrder": {
                  "name": "implementationOrder",
                  "type": "ImplementationStep[]",
                  "optional": false
                },
                "synergisticOpportunities": {
                  "name": "synergisticOpportunities",
                  "type": "SynergyOpportunity[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 277
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "ThemeOptimization": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "ThemeOptimization",
              "body": "themeEnhancements: ThemeEnhancement[];\r\n  literaryInspirations: LiteraryInspiration;\r\n  symbolicElements: SymbolicElement[];\r\n  foreshadowingOpportunities: ForeshadowingOpportunity[];\r\n  literaryTechniques: LiteraryTechnique[];",
              "properties": {
                "themeEnhancements": {
                  "name": "themeEnhancements",
                  "type": "ThemeEnhancement[]",
                  "optional": false
                },
                "literaryInspirations": {
                  "name": "literaryInspirations",
                  "type": "LiteraryInspiration",
                  "optional": false
                },
                "symbolicElements": {
                  "name": "symbolicElements",
                  "type": "SymbolicElement[]",
                  "optional": false
                },
                "foreshadowingOpportunities": {
                  "name": "foreshadowingOpportunities",
                  "type": "ForeshadowingOpportunity[]",
                  "optional": false
                },
                "literaryTechniques": {
                  "name": "literaryTechniques",
                  "type": "LiteraryTechnique[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 288
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "StyleOptimization": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "StyleOptimization",
              "body": "styleGuidance: StyleGuidance;\r\n  expressionAlternatives: ExpressionAlternatives;\r\n  subjectPatternOptimization: SubjectPatternOptimization;\r\n  structureRecommendations: StructureRecommendation[];\r\n  repetitionAlternatives: RepetitionAlternative[];",
              "properties": {
                "styleGuidance": {
                  "name": "styleGuidance",
                  "type": "StyleGuidance",
                  "optional": false
                },
                "expressionAlternatives": {
                  "name": "expressionAlternatives",
                  "type": "ExpressionAlternatives",
                  "optional": false
                },
                "subjectPatternOptimization": {
                  "name": "subjectPatternOptimization",
                  "type": "SubjectPatternOptimization",
                  "optional": false
                },
                "structureRecommendations": {
                  "name": "structureRecommendations",
                  "type": "StructureRecommendation[]",
                  "optional": false
                },
                "repetitionAlternatives": {
                  "name": "repetitionAlternatives",
                  "type": "RepetitionAlternative[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 300
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "CharacterOptimization": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "CharacterOptimization",
              "body": "depthRecommendations: { [characterId: string]: DepthRecommendation[]",
              "properties": {
                "depthRecommendations": {
                  "name": "depthRecommendations",
                  "type": "{ [characterId: string]: DepthRecommendation[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 312
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "TensionOptimization": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "TensionOptimization",
              "body": "tensionPacingRecommendation: TensionPacingRecommendation;\r\n  tensionOptimizationSuggestions: string[];\r\n  tensionCurve: TensionCurvePoint[];\r\n  climaxRecommendation: {\r\n    climaxChapter: number;\r\n    secondaryClimaxChapters: number[];\r\n    reason: string;",
              "properties": {
                "tensionPacingRecommendation": {
                  "name": "tensionPacingRecommendation",
                  "type": "TensionPacingRecommendation",
                  "optional": false
                },
                "tensionOptimizationSuggestions": {
                  "name": "tensionOptimizationSuggestions",
                  "type": "string[]",
                  "optional": false
                },
                "tensionCurve": {
                  "name": "tensionCurve",
                  "type": "TensionCurvePoint[]",
                  "optional": false
                },
                "climaxRecommendation": {
                  "name": "climaxRecommendation",
                  "type": "{",
                  "optional": false
                },
                "climaxChapter": {
                  "name": "climaxChapter",
                  "type": "number",
                  "optional": false
                },
                "secondaryClimaxChapters": {
                  "name": "secondaryClimaxChapters",
                  "type": "number[]",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 322
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "OptimizationMetadata": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "OptimizationMetadata",
              "body": "/** 最適化タイムスタンプ */\r\n  optimizationTimestamp: string;\r\n  /** 総推奨数 */\r\n  totalRecommendations: number;\r\n  /** 高優先度数 */\r\n  highPriorityCount: number;\r\n  /** 中優先度数 */\r\n  mediumPriorityCount: number;\r\n  /** 低優先度数 */\r\n  lowPriorityCount: number;",
              "properties": {
                "optimizationTimestamp": {
                  "name": "optimizationTimestamp",
                  "type": "string",
                  "optional": false
                },
                "totalRecommendations": {
                  "name": "totalRecommendations",
                  "type": "number",
                  "optional": false
                },
                "highPriorityCount": {
                  "name": "highPriorityCount",
                  "type": "number",
                  "optional": false
                },
                "mediumPriorityCount": {
                  "name": "mediumPriorityCount",
                  "type": "number",
                  "optional": false
                },
                "lowPriorityCount": {
                  "name": "lowPriorityCount",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 337
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "IntegratedOptimizationResult": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "IntegratedOptimizationResult",
              "body": "// テーマ最適化\r\n  themeOptimization: ThemeOptimization;\r\n\r\n  // 文体最適化\r\n  styleOptimization: StyleOptimization;\r\n\r\n  // キャラクター最適化\r\n  characterOptimization: CharacterOptimization;\r\n\r\n  // テンション最適化\r\n  tensionOptimization: TensionOptimization;\r\n\r\n  // 統合推奨\r\n  integratedRecommendations: IntegratedRecommendations;\r\n\r\n  // メタデータ\r\n  optimizationMetadata: OptimizationMetadata;",
              "properties": {
                "themeOptimization": {
                  "name": "themeOptimization",
                  "type": "ThemeOptimization",
                  "optional": false
                },
                "styleOptimization": {
                  "name": "styleOptimization",
                  "type": "StyleOptimization",
                  "optional": false
                },
                "characterOptimization": {
                  "name": "characterOptimization",
                  "type": "CharacterOptimization",
                  "optional": false
                },
                "tensionOptimization": {
                  "name": "tensionOptimization",
                  "type": "TensionOptimization",
                  "optional": false
                },
                "integratedRecommendations": {
                  "name": "integratedRecommendations",
                  "type": "IntegratedRecommendations",
                  "optional": false
                },
                "optimizationMetadata": {
                  "name": "optimizationMetadata",
                  "type": "OptimizationMetadata",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 354
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "OptimizationInput": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "OptimizationInput",
              "body": "themeAnalysis: ThemeResonanceAnalysis;\r\n  styleAnalysis: StyleAnalysis;\r\n  expressionPatterns: ExpressionPatterns;\r\n  qualityMetrics: QualityMetrics;\r\n  characters?: Character[];\r\n  characterPsychologies?: { [id: string]: CharacterPsychology",
              "properties": {
                "themeAnalysis": {
                  "name": "themeAnalysis",
                  "type": "ThemeResonanceAnalysis",
                  "optional": false
                },
                "styleAnalysis": {
                  "name": "styleAnalysis",
                  "type": "StyleAnalysis",
                  "optional": false
                },
                "expressionPatterns": {
                  "name": "expressionPatterns",
                  "type": "ExpressionPatterns",
                  "optional": false
                },
                "qualityMetrics": {
                  "name": "qualityMetrics",
                  "type": "QualityMetrics",
                  "optional": false
                },
                "characters": {
                  "name": "characters",
                  "type": "Character[]",
                  "optional": true
                },
                "characterPsychologies": {
                  "name": "characterPsychologies",
                  "type": "{ [id: string]: CharacterPsychology",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 378
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "IOptimizationCoordinator": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "IOptimizationCoordinator",
              "body": "/**\r\n   * 包括的章最適化を実行する\r\n   * \r\n   * @param content 章の内容\r\n   * @param chapterNumber 章番号\r\n   * @param context 生成コンテキスト\r\n   * @param analysisResults 分析結果\r\n   * @returns 統合最適化結果\r\n   */\r\n  optimizeChapter(\r\n    content: string,\r\n    chapterNumber: number,\r\n    context: GenerationContext,\r\n    analysisResults: OptimizationInput\r\n  ): Promise<IntegratedOptimizationResult>;",
              "properties": {
                "content": {
                  "name": "content",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "GenerationContext",
                  "optional": false
                },
                "analysisResults": {
                  "name": "analysisResults",
                  "type": "OptimizationInput",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 391
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "ThemeEnhancement": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "ThemeEnhancement",
              "body": "theme: string;\r\n  currentStrength: number;\r\n  suggestion: string;\r\n  approach: string;\r\n  example: string;",
              "properties": {
                "theme": {
                  "name": "theme",
                  "type": "string",
                  "optional": false
                },
                "currentStrength": {
                  "name": "currentStrength",
                  "type": "number",
                  "optional": false
                },
                "suggestion": {
                  "name": "suggestion",
                  "type": "string",
                  "optional": false
                },
                "approach": {
                  "name": "approach",
                  "type": "string",
                  "optional": false
                },
                "example": {
                  "name": "example",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 417
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "ThemeEnhancement",
              "body": "/**\r\n     * テーマ名\r\n     */\r\n    theme: string;\r\n    \r\n    /**\r\n     * 現在の強度（0-1）\r\n     */\r\n    currentStrength?: number;\r\n    \r\n    /**\r\n     * 具体的な改善提案\r\n     */\r\n    suggestion: string;\r\n    \r\n    /**\r\n     * 使用するアプローチ（象徴、対比、メタファーなど）\r\n     */\r\n    approach?: string;\r\n    \r\n    /**\r\n     * 具体例\r\n     */\r\n    example?: string;\r\n    \r\n    /**\r\n     * 期待される効果\r\n     */\r\n    impact?: string;",
              "properties": {
                "theme": {
                  "name": "theme",
                  "type": "string",
                  "optional": false
                },
                "currentStrength": {
                  "name": "currentStrength",
                  "type": "number",
                  "optional": true
                },
                "suggestion": {
                  "name": "suggestion",
                  "type": "string",
                  "optional": false
                },
                "approach": {
                  "name": "approach",
                  "type": "string",
                  "optional": true
                },
                "example": {
                  "name": "example",
                  "type": "string",
                  "optional": true
                },
                "impact": {
                  "name": "impact",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 132
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "SymbolicElement": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "SymbolicElement",
              "body": "element: string;\r\n  meaning: string;\r\n  usage: string;\r\n  chapter: number;",
              "properties": {
                "element": {
                  "name": "element",
                  "type": "string",
                  "optional": false
                },
                "meaning": {
                  "name": "meaning",
                  "type": "string",
                  "optional": false
                },
                "usage": {
                  "name": "usage",
                  "type": "string",
                  "optional": false
                },
                "chapter": {
                  "name": "chapter",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 429
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "SymbolicElement",
              "body": "/**\r\n     * 関連するテーマ\r\n     */\r\n    theme: string;\r\n    \r\n    /**\r\n     * 象徴の名前/種類\r\n     */\r\n    symbolName: string;\r\n    \r\n    /**\r\n     * 象徴の説明\r\n     */\r\n    description: string;\r\n    \r\n    /**\r\n     * 物語での使用方法\r\n     */\r\n    usage: string;\r\n    \r\n    /**\r\n     * 期待される効果\r\n     */\r\n    effect: string;\r\n    \r\n    /**\r\n     * 使用時の注意点\r\n     */\r\n    caution: string;",
              "properties": {
                "theme": {
                  "name": "theme",
                  "type": "string",
                  "optional": false
                },
                "symbolName": {
                  "name": "symbolName",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "usage": {
                  "name": "usage",
                  "type": "string",
                  "optional": false
                },
                "effect": {
                  "name": "effect",
                  "type": "string",
                  "optional": false
                },
                "caution": {
                  "name": "caution",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 252
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "ForeshadowingOpportunity": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "ForeshadowingOpportunity",
              "body": "opportunity: string;\r\n  placement: string;\r\n  resolution: string;\r\n  impact: number;",
              "properties": {
                "opportunity": {
                  "name": "opportunity",
                  "type": "string",
                  "optional": false
                },
                "placement": {
                  "name": "placement",
                  "type": "string",
                  "optional": false
                },
                "resolution": {
                  "name": "resolution",
                  "type": "string",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 440
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "ForeshadowingOpportunity",
              "body": "/**\r\n     * 伏線要素の説明\r\n     */\r\n    element: string;\r\n    \r\n    /**\r\n     * テキスト内の位置の説明\r\n     */\r\n    textPosition: string;\r\n    \r\n    /**\r\n     * 将来の展開での活用方法\r\n     */\r\n    possibleDevelopments: string[];\r\n    \r\n    /**\r\n     * 推奨される解決章\r\n     */\r\n    suggestedResolutionChapter: number;\r\n    \r\n    /**\r\n     * 関連するテーマ\r\n     */\r\n    relatedTheme: string;\r\n    \r\n    /**\r\n     * 重要度（0-1）\r\n     */\r\n    importance: number;",
              "properties": {
                "element": {
                  "name": "element",
                  "type": "string",
                  "optional": false
                },
                "textPosition": {
                  "name": "textPosition",
                  "type": "string",
                  "optional": false
                },
                "possibleDevelopments": {
                  "name": "possibleDevelopments",
                  "type": "string[]",
                  "optional": false
                },
                "suggestedResolutionChapter": {
                  "name": "suggestedResolutionChapter",
                  "type": "number",
                  "optional": false
                },
                "relatedTheme": {
                  "name": "relatedTheme",
                  "type": "string",
                  "optional": false
                },
                "importance": {
                  "name": "importance",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 287
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "StyleGuidance": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "StyleGuidance",
              "body": "general: string[];\r\n  sentenceStructure: string[];\r\n  vocabulary: string[];\r\n  rhythm: string[];",
              "properties": {
                "general": {
                  "name": "general",
                  "type": "string[]",
                  "optional": false
                },
                "sentenceStructure": {
                  "name": "sentenceStructure",
                  "type": "string[]",
                  "optional": false
                },
                "vocabulary": {
                  "name": "vocabulary",
                  "type": "string[]",
                  "optional": false
                },
                "rhythm": {
                  "name": "rhythm",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 451
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "ExpressionAlternatives": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "ExpressionAlternatives",
              "body": "[originalExpression: string]: string[];",
              "properties": {
                "originalExpression": {
                  "name": "originalExpression",
                  "type": "string]: string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 462
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "SubjectPatternOptimization": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "SubjectPatternOptimization",
              "body": "score: number;\r\n  problems: string[];\r\n  suggestions: string[];",
              "properties": {
                "score": {
                  "name": "score",
                  "type": "number",
                  "optional": false
                },
                "problems": {
                  "name": "problems",
                  "type": "string[]",
                  "optional": false
                },
                "suggestions": {
                  "name": "suggestions",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 470
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "SubjectPatternOptimization",
              "body": "/** 主語多様性スコア（0-1、高いほど多様） */\r\n    score: number;\r\n    /** 主語パターンの問題点リスト */\r\n    problems: string[];\r\n    /** 改善提案リスト */\r\n    suggestions: string[];",
              "properties": {
                "score": {
                  "name": "score",
                  "type": "number",
                  "optional": false
                },
                "problems": {
                  "name": "problems",
                  "type": "string[]",
                  "optional": false
                },
                "suggestions": {
                  "name": "suggestions",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 11
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "StructureRecommendation": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "StructureRecommendation",
              "body": "aspect: string;\r\n  recommendation: string;\r\n  reason: string;\r\n  example: string;",
              "properties": {
                "aspect": {
                  "name": "aspect",
                  "type": "string",
                  "optional": false
                },
                "recommendation": {
                  "name": "recommendation",
                  "type": "string",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                },
                "example": {
                  "name": "example",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 480
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "StructureRecommendation",
              "body": "/** 改善のタイプ（バリエーション、リズム、修飾語、主述関係など） */\r\n    type: string;\r\n    /** 現在の文体における問題や改善点 */\r\n    issue: string;\r\n    /** 具体的な改善アイデア */\r\n    suggestion: string;\r\n    /** 改善例 */\r\n    example: {\r\n      /** 改善前の例 */\r\n      before: string;\r\n      /** 改善後の例 */\r\n      after: string;",
              "properties": {
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "issue": {
                  "name": "issue",
                  "type": "string",
                  "optional": false
                },
                "suggestion": {
                  "name": "suggestion",
                  "type": "string",
                  "optional": false
                },
                "example": {
                  "name": "example",
                  "type": "{",
                  "optional": false
                },
                "before": {
                  "name": "before",
                  "type": "string",
                  "optional": false
                },
                "after": {
                  "name": "after",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 24
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "RepetitionAlternative": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "RepetitionAlternative",
              "body": "originalPhrase: string;\r\n  alternatives: string[];\r\n  context: string;",
              "properties": {
                "originalPhrase": {
                  "name": "originalPhrase",
                  "type": "string",
                  "optional": false
                },
                "alternatives": {
                  "name": "alternatives",
                  "type": "string[]",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 491
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "RepetitionAlternative",
              "body": "/** 元の表現 */\r\n    original: string;\r\n    /** 代替表現のリスト */\r\n    alternatives: string[];\r\n    /** 表現が使われる一般的な文脈 */\r\n    context: string;",
              "properties": {
                "original": {
                  "name": "original",
                  "type": "string",
                  "optional": false
                },
                "alternatives": {
                  "name": "alternatives",
                  "type": "string[]",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 44
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "DepthRecommendation": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "DepthRecommendation",
              "body": "aspect: string;\r\n  title: string;\r\n  description: string;\r\n  implementation: string;\r\n  priority: number;",
              "properties": {
                "aspect": {
                  "name": "aspect",
                  "type": "string",
                  "optional": false
                },
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "implementation": {
                  "name": "implementation",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 501
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
            "definition": {
              "name": "DepthRecommendation",
              "body": "type: 'consistency' | 'arc' | 'motivation' | 'relationship' | 'contrast' | 'genre'; // 推奨タイプ\r\n    title: string;       // 推奨タイトル\r\n    description: string; // 詳細説明\r\n    implementation: string; // 実装方法のヒント\r\n    priority: number;    // 優先度 (0-1)",
              "properties": {
                "type": {
                  "name": "type",
                  "type": "'consistency' | 'arc' | 'motivation' | 'relationship' | 'contrast' | 'genre'",
                  "optional": false
                },
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "implementation": {
                  "name": "implementation",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 13
            },
            "system": "analysis",
            "module": "analysis/enhancement/character"
          }
        ],
        "CharacterDepthPrompt": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "CharacterDepthPrompt",
              "body": "characterId: string;\r\n  focusAreas: string[];\r\n  promptText: string;\r\n  expectedOutcome: string;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "focusAreas": {
                  "name": "focusAreas",
                  "type": "string[]",
                  "optional": false
                },
                "promptText": {
                  "name": "promptText",
                  "type": "string",
                  "optional": false
                },
                "expectedOutcome": {
                  "name": "expectedOutcome",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 513
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
            "definition": {
              "name": "CharacterDepthPrompt",
              "body": "characterId: string;      // キャラクターID\r\n    characterName: string;    // キャラクター名\r\n    focusAreas: string;       // 焦点を当てるべき領域\r\n    implementationSuggestions: string; // 実装提案\r\n    psychologicalInsight: string; // 心理的洞察",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "characterName": {
                  "name": "characterName",
                  "type": "string",
                  "optional": false
                },
                "focusAreas": {
                  "name": "focusAreas",
                  "type": "string",
                  "optional": false
                },
                "implementationSuggestions": {
                  "name": "implementationSuggestions",
                  "type": "string",
                  "optional": false
                },
                "psychologicalInsight": {
                  "name": "psychologicalInsight",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 87
            },
            "system": "analysis",
            "module": "analysis/enhancement/character"
          }
        ],
        "TensionPacingRecommendation": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "TensionPacingRecommendation",
              "body": "tension: {\r\n    recommendedTension: number;\r\n    reason: string;\r\n    direction: 'increase' | 'decrease' | 'maintain';",
              "properties": {
                "tension": {
                  "name": "tension",
                  "type": "{",
                  "optional": false
                },
                "recommendedTension": {
                  "name": "recommendedTension",
                  "type": "number",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                },
                "direction": {
                  "name": "direction",
                  "type": "'increase' | 'decrease' | 'maintain'",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 524
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\tension\\interfaces.ts",
            "definition": {
              "name": "TensionPacingRecommendation",
              "body": "/** テンション推奨 */\r\n  tension: TensionRecommendation;\r\n  /** ペーシング推奨 */\r\n  pacing: PacingRecommendation;",
              "properties": {
                "tension": {
                  "name": "tension",
                  "type": "TensionRecommendation",
                  "optional": false
                },
                "pacing": {
                  "name": "pacing",
                  "type": "PacingRecommendation",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 33
            },
            "system": "analysis",
            "module": "analysis/enhancement/tension"
          }
        ],
        "TensionCurvePoint": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "TensionCurvePoint",
              "body": "chapter: number;\r\n  tension: number;\r\n  description: string;\r\n  keyEvents: string[];",
              "properties": {
                "chapter": {
                  "name": "chapter",
                  "type": "number",
                  "optional": false
                },
                "tension": {
                  "name": "tension",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "keyEvents": {
                  "name": "keyEvents",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 540
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\tension\\interfaces.ts",
            "definition": {
              "name": "TensionCurvePoint",
              "body": "/** 章番号 */\r\n  chapterNumber: number;\r\n  /** テンション値 (0-1) */\r\n  tension: number;\r\n  /** 説明 */\r\n  description?: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "tension": {
                  "name": "tension",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 55
            },
            "system": "analysis",
            "module": "analysis/enhancement/tension"
          }
        ],
        "CoordinatorFactory": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "CoordinatorFactory",
              "body": "/**\r\n   * 分析コーディネータを作成する\r\n   * \r\n   * @param options オプション\r\n   * @returns 分析コーディネータ\r\n   */\r\n  createAnalysisCoordinator(options?: AnalysisCoordinatorOptions): IAnalysisCoordinator;\r\n\r\n  /**\r\n   * 最適化コーディネータを作成する\r\n   * \r\n   * @param options オプション\r\n   * @returns 最適化コーディネータ\r\n   */\r\n  createOptimizationCoordinator(options?: OptimizationCoordinatorOptions): IOptimizationCoordinator;",
              "properties": {
                "options": {
                  "name": "options",
                  "type": "OptimizationCoordinatorOptions): IOptimizationCoordinator",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 555
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "IntegratedCoordinatorService": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "IntegratedCoordinatorService",
              "body": "/**\r\n   * 章の分析と最適化を統合実行する\r\n   * \r\n   * @param content 章の内容\r\n   * @param chapterNumber 章番号\r\n   * @param context 生成コンテキスト\r\n   * @returns 分析結果と最適化結果のペア\r\n   */\r\n  analyzeAndOptimizeChapter(\r\n    content: string,\r\n    chapterNumber: number,\r\n    context: GenerationContext\r\n  ): Promise<{\r\n    analysis: IntegratedAnalysisResult;\r\n    optimization: IntegratedOptimizationResult;",
              "properties": {
                "content": {
                  "name": "content",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "GenerationContext",
                  "optional": false
                },
                "analysis": {
                  "name": "analysis",
                  "type": "IntegratedAnalysisResult",
                  "optional": false
                },
                "optimization": {
                  "name": "optimization",
                  "type": "IntegratedOptimizationResult",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 582
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "CoordinatorHealthCheck": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "CoordinatorHealthCheck",
              "body": "/**\r\n   * サービスの健全性をチェックする\r\n   * \r\n   * @returns ヘルスステータス\r\n   */\r\n  checkHealth(): Promise<{\r\n    status: 'healthy' | 'degraded' | 'unhealthy';\r\n    services: {\r\n      [serviceName: string]: {\r\n        status: 'up' | 'down';\r\n        responseTime?: number;\r\n        error?: string;",
              "properties": {
                "status": {
                  "name": "status",
                  "type": "'up' | 'down'",
                  "optional": false
                },
                "services": {
                  "name": "services",
                  "type": "{",
                  "optional": false
                },
                "serviceName": {
                  "name": "serviceName",
                  "type": "string]: {",
                  "optional": false
                },
                "responseTime": {
                  "name": "responseTime",
                  "type": "number",
                  "optional": true
                },
                "error": {
                  "name": "error",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 610
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "CoordinatorType": [
          {
            "type": "type",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "CoordinatorType",
              "definition": "'analysis' | 'optimization' | 'integrated'",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": false,
              "lineNumber": 633
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "ProcessingStrategy": [
          {
            "type": "type",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "ProcessingStrategy",
              "definition": "'sequential' | 'parallel' | 'hybrid'",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": false,
              "lineNumber": 639
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "CacheStrategy": [
          {
            "type": "type",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "CacheStrategy",
              "definition": "'memory' | 'persistent' | 'distributed' | 'none'",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": false,
              "lineNumber": 645
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          }
        ],
        "SubjectPatternOptimizationRequest": [
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\interfaces.ts",
            "definition": {
              "name": "SubjectPatternOptimizationRequest",
              "body": "repeatedSubjects: Array<{\r\n    subject: string;\r\n    count: number;",
              "properties": {
                "repeatedSubjects": {
                  "name": "repeatedSubjects",
                  "type": "Array<{",
                  "optional": false
                },
                "subject": {
                  "name": "subject",
                  "type": "string",
                  "optional": false
                },
                "count": {
                  "name": "count",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 23
            },
            "system": "analysis",
            "module": "analysis/core"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\style\\interfaces.ts",
            "definition": {
              "name": "SubjectPatternOptimizationRequest",
              "body": "/** 繰り返されている主語のパターン */\r\n  repeatedSubjects: Array<{\r\n    /** 主語 */\r\n    subject: string;\r\n    /** 繰り返し回数 */\r\n    count: number;",
              "properties": {
                "repeatedSubjects": {
                  "name": "repeatedSubjects",
                  "type": "Array<{",
                  "optional": false
                },
                "subject": {
                  "name": "subject",
                  "type": "string",
                  "optional": false
                },
                "count": {
                  "name": "count",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 26
            },
            "system": "analysis",
            "module": "analysis/enhancement/style"
          }
        ],
        "IStyleOptimizationService": [
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\interfaces.ts",
            "definition": {
              "name": "IStyleOptimizationService",
              "body": "/**\r\n   * 文体ガイダンス生成\r\n   * 文体改善のためのガイダンスを生成します\r\n   * \r\n   * @param styleAnalysis 文体分析結果\r\n   * @param context コンテキスト情報（ジャンル、テーマなど）\r\n   * @param chapterNumber 章番号\r\n   * @returns 文体ガイダンス\r\n   */\r\n  generateStyleGuidance(\r\n    chapterNumber: number,  // ← 実装に合わせる\r\n    context: any\r\n  ): Promise<StyleGuidance>;\r\n  \r\n  /**\r\n   * 代替表現提案\r\n   * 繰り返しを避けるための代替表現を提案します\r\n   * \r\n   * @param expressionPatterns 表現パターン分析結果\r\n   * @param context コンテキスト情報（ジャンル、テーマなど）\r\n   * @returns 代替表現提案\r\n   */\r\n  suggestAlternativeExpressions(\r\n    expressionPatterns: ExpressionPatterns,\r\n    context: any\r\n  ): Promise<ExpressionAlternatives>;\r\n  \r\n  /**\r\n   * 主語パターン最適化提案\r\n   * 主語の使用パターンを最適化するための提案を生成します\r\n   * \r\n   * @param subjectPatterns 主語パターン分析結果\r\n   * @param context コンテキスト情報\r\n   * @returns 主語パターン最適化提案\r\n   */\r\n  optimizeSubjectPatterns(\r\n    subjectPatterns: SubjectPatternOptimizationRequest,\r\n    context: any\r\n  ): Promise<SubjectPatternOptimization>;\r\n  \r\n  /**\r\n   * 文構造の改善提案を生成\r\n   * 文の構造を改善するための提案を生成します\r\n   * \r\n   * @param styleAnalysis 文体分析結果\r\n   * @param context コンテキスト情報\r\n   * @returns 文構造改善提案\r\n   */\r\n  generateStructureRecommendations(\r\n    styleAnalysis: StyleAnalysis,\r\n    context: any\r\n  ): Promise<StructureRecommendation[]>;\r\n  \r\n  /**\r\n   * 繰り返し表現の代替提案を生成\r\n   * 繰り返し使用されている表現の代替案を提案します\r\n   * \r\n   * @param repetitions 繰り返し表現のリスト\r\n   * @param context コンテキスト情報\r\n   * @returns 繰り返し表現の代替提案\r\n   */\r\n  generateRepetitionAlternatives(\r\n    repetitions: string[],\r\n    context: any\r\n  ): Promise<RepetitionAlternative[]>;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "any",
                  "optional": false
                },
                "expressionPatterns": {
                  "name": "expressionPatterns",
                  "type": "ExpressionPatterns",
                  "optional": false
                },
                "subjectPatterns": {
                  "name": "subjectPatterns",
                  "type": "SubjectPatternOptimizationRequest",
                  "optional": false
                },
                "styleAnalysis": {
                  "name": "styleAnalysis",
                  "type": "StyleAnalysis",
                  "optional": false
                },
                "repetitions": {
                  "name": "repetitions",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 37
            },
            "system": "analysis",
            "module": "analysis/core"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\style\\interfaces.ts",
            "definition": {
              "name": "IStyleOptimizationService",
              "body": "/**\r\n   * 文体ガイダンス生成\r\n   * 文体改善のためのガイダンスを生成します\r\n   * \r\n   * @param chapterNumber 章番号\r\n   * @param context コンテキスト情報（ジャンル、テーマなど）\r\n   * @returns 文体ガイダンス\r\n   */\r\n  generateStyleGuidance(\r\n    chapterNumber: number,\r\n    context: any\r\n  ): Promise<StyleGuidance>;\r\n\r\n  /**\r\n   * 代替表現提案\r\n   * 繰り返しを避けるための代替表現を提案します\r\n   * \r\n   * @param expressionPatterns 表現パターン分析結果\r\n   * @param context コンテキスト情報（ジャンル、テーマなど）\r\n   * @returns 代替表現提案\r\n   */\r\n  suggestAlternativeExpressions(\r\n    expressionPatterns: ExpressionPatterns,\r\n    context: any\r\n  ): Promise<ExpressionAlternatives>;\r\n\r\n  /**\r\n   * 主語パターン最適化提案\r\n   * 主語の使用パターンを最適化するための提案を生成します\r\n   * \r\n   * @param subjectPatterns 主語パターン分析結果\r\n   * @param context コンテキスト情報\r\n   * @returns 主語パターン最適化提案\r\n   */\r\n  optimizeSubjectPatterns(\r\n    subjectPatterns: SubjectPatternOptimizationRequest,\r\n    context: any\r\n  ): Promise<SubjectPatternOptimization>;\r\n\r\n  /**\r\n   * 文構造の改善提案を生成\r\n   * 文の構造を改善するための提案を生成します\r\n   * \r\n   * @param styleAnalysis 文体分析結果\r\n   * @param context コンテキスト情報\r\n   * @returns 文構造改善提案\r\n   */\r\n  generateStructureRecommendations(\r\n    styleAnalysis: StyleAnalysis,\r\n    context: any\r\n  ): Promise<StructureRecommendation[]>;\r\n\r\n  /**\r\n   * 繰り返し表現の代替提案を生成\r\n   * 繰り返し使用されている表現の代替案を提案します\r\n   * \r\n   * @param repetitions 繰り返し表現のリスト\r\n   * @param context コンテキスト情報\r\n   * @returns 繰り返し表現の代替提案\r\n   */\r\n  generateRepetitionAlternatives(\r\n    repetitions: string[],\r\n    context: any\r\n  ): Promise<RepetitionAlternative[]>;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "any",
                  "optional": false
                },
                "expressionPatterns": {
                  "name": "expressionPatterns",
                  "type": "ExpressionPatterns",
                  "optional": false
                },
                "subjectPatterns": {
                  "name": "subjectPatterns",
                  "type": "SubjectPatternOptimizationRequest",
                  "optional": false
                },
                "styleAnalysis": {
                  "name": "styleAnalysis",
                  "type": "StyleAnalysis",
                  "optional": false
                },
                "repetitions": {
                  "name": "repetitions",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 44
            },
            "system": "analysis",
            "module": "analysis/enhancement/style"
          }
        ],
        "ICacheStorage": [
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\interfaces.ts",
            "definition": {
              "name": "ICacheStorage",
              "body": "/**\r\n   * キャッシュに値を設定\r\n   * @param key キー\r\n   * @param value 値\r\n   * @param ttl 有効期限（ミリ秒）\r\n   */\r\n  set<T>(key: string | number, value: T, ttl?: number): void;\r\n  \r\n  /**\r\n   * キャッシュから値を取得\r\n   * @param key キー\r\n   * @returns キャッシュ値（存在しないかExpireしている場合はnull）\r\n   */\r\n  get<T>(key: string | number): T | null;\r\n  \r\n  /**\r\n   * キャッシュから項目を削除\r\n   * @param key キー\r\n   * @returns 削除成功時はtrue\r\n   */\r\n  delete(key: string | number): boolean;\r\n  \r\n  /**\r\n   * キャッシュをクリア\r\n   */\r\n  clear(): void;\r\n  \r\n  /**\r\n   * 指定したプレフィックスを持つキーのエントリをすべて削除\r\n   * @param prefix キープレフィックス\r\n   */\r\n  deleteByPrefix(prefix: string): void;\r\n  \r\n  /**\r\n   * 期限切れのエントリを削除\r\n   */\r\n  removeExpired(): void;\r\n  \r\n  /**\r\n   * キャッシュの数を取得\r\n   * @returns キャッシュエントリ数\r\n   */\r\n  size(): number;",
              "properties": {
                "key": {
                  "name": "key",
                  "type": "string | number): boolean",
                  "optional": false
                },
                "value": {
                  "name": "value",
                  "type": "T",
                  "optional": false
                },
                "ttl": {
                  "name": "ttl",
                  "type": "number): void",
                  "optional": true
                },
                "prefix": {
                  "name": "prefix",
                  "type": "string): void",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 109
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "ThemeResonanceAnalysis": [
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "ThemeResonanceAnalysis",
              "body": "/**\r\n     * 各テーマの分析情報\r\n     */\r\n    themes?: {\r\n      [themeName: string]: {\r\n        /**\r\n         * 明示的な言及（テキスト内の直接的な表現）\r\n         */\r\n        explicitMentions?: string[];\r\n        \r\n        /**\r\n         * 暗示的な表現（テキスト内の間接的な表現）\r\n         */\r\n        implicitExpressions?: string[];\r\n        \r\n        /**\r\n         * テーマの強度（0-1）\r\n         */\r\n        strength?: number;\r\n        \r\n        /**\r\n         * テーマの表現方法\r\n         */\r\n        expressionMethods?: string[];\r\n        \r\n        /**\r\n         * 関連するテーマ\r\n         */\r\n        relatedThemes?: string[];",
              "properties": {
                "themes": {
                  "name": "themes",
                  "type": "{",
                  "optional": true
                },
                "themeName": {
                  "name": "themeName",
                  "type": "string]: {",
                  "optional": false
                },
                "explicitMentions": {
                  "name": "explicitMentions",
                  "type": "string[]",
                  "optional": true
                },
                "implicitExpressions": {
                  "name": "implicitExpressions",
                  "type": "string[]",
                  "optional": true
                },
                "strength": {
                  "name": "strength",
                  "type": "number",
                  "optional": true
                },
                "expressionMethods": {
                  "name": "expressionMethods",
                  "type": "string[]",
                  "optional": true
                },
                "relatedThemes": {
                  "name": "relatedThemes",
                  "type": "string[]",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 63
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "ThemeEnhancementRequest": [
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "ThemeEnhancementRequest",
              "body": "/**\r\n     * テーマ分析結果\r\n     */\r\n    themeAnalysis: ThemeResonanceAnalysis;\r\n    \r\n    /**\r\n     * 章番号\r\n     */\r\n    chapterNumber: number;\r\n    \r\n    /**\r\n     * コンテキスト情報\r\n     */\r\n    context: any;\r\n    \r\n    /**\r\n     * ジャンル\r\n     */\r\n    genre: string;\r\n    \r\n    /**\r\n     * ストーリーフェーズ\r\n     */\r\n    storyPhase: string;",
              "properties": {
                "themeAnalysis": {
                  "name": "themeAnalysis",
                  "type": "ThemeResonanceAnalysis",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "any",
                  "optional": false
                },
                "genre": {
                  "name": "genre",
                  "type": "string",
                  "optional": false
                },
                "storyPhase": {
                  "name": "storyPhase",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 322
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "LiteraryTechniqueRequest": [
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "LiteraryTechniqueRequest",
              "body": "/**\r\n     * 章番号\r\n     */\r\n    chapterNumber: number;\r\n    \r\n    /**\r\n     * 世界設定\r\n     */\r\n    worldSettings: string;\r\n    \r\n    /**\r\n     * テーマ設定\r\n     */\r\n    themeSettings: string;\r\n    \r\n    /**\r\n     * ジャンル\r\n     */\r\n    genre: string;\r\n    \r\n    /**\r\n     * 総章数\r\n     */\r\n    totalChapters: number;\r\n    \r\n    /**\r\n     * テンション値（0-1）\r\n     */\r\n    tension: number;\r\n    \r\n    /**\r\n     * ストーリーフェーズ\r\n     */\r\n    storyPhase: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "worldSettings": {
                  "name": "worldSettings",
                  "type": "string",
                  "optional": false
                },
                "themeSettings": {
                  "name": "themeSettings",
                  "type": "string",
                  "optional": false
                },
                "genre": {
                  "name": "genre",
                  "type": "string",
                  "optional": false
                },
                "totalChapters": {
                  "name": "totalChapters",
                  "type": "number",
                  "optional": false
                },
                "tension": {
                  "name": "tension",
                  "type": "number",
                  "optional": false
                },
                "storyPhase": {
                  "name": "storyPhase",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 352
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "ExpressionUsage": [
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "ExpressionUsage",
              "body": "expression: string;            // 表現テキスト\r\n    count: number;                 // 使用回数\r\n    firstUsedInChapter: number;    // 初めて使用されたチャプター番号\r\n    lastUsedInChapter: number;     // 最後に使用されたチャプター番号\r\n    chapters: number[];            // 使用されたチャプター番号のリスト\r\n    contexts?: string[];           // 使用コンテキスト例\r\n    category?: 'DESCRIPTION' | 'DIALOGUE' | 'ACTION' | 'TRANSITION'; // 表現カテゴリ",
              "properties": {
                "expression": {
                  "name": "expression",
                  "type": "string",
                  "optional": false
                },
                "count": {
                  "name": "count",
                  "type": "number",
                  "optional": false
                },
                "firstUsedInChapter": {
                  "name": "firstUsedInChapter",
                  "type": "number",
                  "optional": false
                },
                "lastUsedInChapter": {
                  "name": "lastUsedInChapter",
                  "type": "number",
                  "optional": false
                },
                "chapters": {
                  "name": "chapters",
                  "type": "number[]",
                  "optional": false
                },
                "contexts": {
                  "name": "contexts",
                  "type": "string[]",
                  "optional": true
                },
                "category": {
                  "name": "category",
                  "type": "'DESCRIPTION' | 'DIALOGUE' | 'ACTION' | 'TRANSITION'",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 389
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "ExpressionUsageResult": [
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "ExpressionUsageResult",
              "body": "newExpressions: string[];     // 新しく追跡された表現\r\n    repeatedExpressions: string[]; // 繰り返された表現\r\n    totalTracked: number;         // 追跡された表現の総数\r\n    diversityScore: number;       // 多様性スコア (0-1)",
              "properties": {
                "newExpressions": {
                  "name": "newExpressions",
                  "type": "string[]",
                  "optional": false
                },
                "repeatedExpressions": {
                  "name": "repeatedExpressions",
                  "type": "string[]",
                  "optional": false
                },
                "totalTracked": {
                  "name": "totalTracked",
                  "type": "number",
                  "optional": false
                },
                "diversityScore": {
                  "name": "diversityScore",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 399
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "ForeshadowingElement": [
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "ForeshadowingElement",
              "body": "id: string;\r\n  description: string;\r\n  chapter_introduced: number;\r\n  urgency: 'low' | 'medium' | 'high';\r\n  potential_resolution?: string;\r\n  resolved?: boolean;\r\n  resolution_chapter?: number;\r\n  resolution_description?: string;",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "chapter_introduced": {
                  "name": "chapter_introduced",
                  "type": "number",
                  "optional": false
                },
                "urgency": {
                  "name": "urgency",
                  "type": "'low' | 'medium' | 'high'",
                  "optional": false
                },
                "potential_resolution": {
                  "name": "potential_resolution",
                  "type": "string",
                  "optional": true
                },
                "resolved": {
                  "name": "resolved",
                  "type": "boolean",
                  "optional": true
                },
                "resolution_chapter": {
                  "name": "resolution_chapter",
                  "type": "number",
                  "optional": true
                },
                "resolution_description": {
                  "name": "resolution_description",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 409
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "SymbolismAnalysis": [
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "SymbolismAnalysis",
              "body": "symbols: Array<{\r\n    symbol: string;\r\n    occurrences?: string[];\r\n    meaning?: string;\r\n    thematicConnection?: string;",
              "properties": {
                "symbols": {
                  "name": "symbols",
                  "type": "Array<{",
                  "optional": false
                },
                "symbol": {
                  "name": "symbol",
                  "type": "string",
                  "optional": false
                },
                "occurrences": {
                  "name": "occurrences",
                  "type": "string[]",
                  "optional": true
                },
                "meaning": {
                  "name": "meaning",
                  "type": "string",
                  "optional": true
                },
                "thematicConnection": {
                  "name": "thematicConnection",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 423
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "ThemePresenceVisualization": [
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "ThemePresenceVisualization",
              "body": "presenceMap: Array<{\r\n    position: number;\r\n    strength: number;",
              "properties": {
                "presenceMap": {
                  "name": "presenceMap",
                  "type": "Array<{",
                  "optional": false
                },
                "position": {
                  "name": "position",
                  "type": "number",
                  "optional": false
                },
                "strength": {
                  "name": "strength",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 451
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "ThemeElementResonance": [
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "ThemeElementResonance",
              "body": "relevance: number;\r\n  suggestions: string[];\r\n  symbolicPotential: string;",
              "properties": {
                "relevance": {
                  "name": "relevance",
                  "type": "number",
                  "optional": false
                },
                "suggestions": {
                  "name": "suggestions",
                  "type": "string[]",
                  "optional": false
                },
                "symbolicPotential": {
                  "name": "symbolicPotential",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 466
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "ThemeConsistencyAnalysis": [
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "ThemeConsistencyAnalysis",
              "body": "consistencyScore: number;\r\n  strengthByChapter: number[];\r\n  developmentPattern: string;\r\n  weakPoints: Array<{\r\n    chapter: number;\r\n    issue: string;",
              "properties": {
                "consistencyScore": {
                  "name": "consistencyScore",
                  "type": "number",
                  "optional": false
                },
                "strengthByChapter": {
                  "name": "strengthByChapter",
                  "type": "number[]",
                  "optional": false
                },
                "developmentPattern": {
                  "name": "developmentPattern",
                  "type": "string",
                  "optional": false
                },
                "weakPoints": {
                  "name": "weakPoints",
                  "type": "Array<{",
                  "optional": false
                },
                "chapter": {
                  "name": "chapter",
                  "type": "number",
                  "optional": false
                },
                "issue": {
                  "name": "issue",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 475
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "ThemeImageryMapping": [
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "ThemeImageryMapping",
              "body": "dominantSymbols: Array<{\r\n    name: string;\r\n    occurrenceCount: number;\r\n    chapterOccurrences: number[];\r\n    meanings: string[];",
              "properties": {
                "dominantSymbols": {
                  "name": "dominantSymbols",
                  "type": "Array<{",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "occurrenceCount": {
                  "name": "occurrenceCount",
                  "type": "number",
                  "optional": false
                },
                "chapterOccurrences": {
                  "name": "chapterOccurrences",
                  "type": "number[]",
                  "optional": false
                },
                "meanings": {
                  "name": "meanings",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 489
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "MotifTrackingResult": [
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "MotifTrackingResult",
              "body": "motif: string;\r\n  occurrencesByChapter: Array<{\r\n    chapter: number;\r\n    occurrenceCount: number;\r\n    significance: number;\r\n    examples: string[];\r\n    usage: string;\r\n    meaning: string;",
              "properties": {
                "motif": {
                  "name": "motif",
                  "type": "string",
                  "optional": false
                },
                "occurrencesByChapter": {
                  "name": "occurrencesByChapter",
                  "type": "Array<{",
                  "optional": false
                },
                "chapter": {
                  "name": "chapter",
                  "type": "number",
                  "optional": false
                },
                "occurrenceCount": {
                  "name": "occurrenceCount",
                  "type": "number",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": false
                },
                "examples": {
                  "name": "examples",
                  "type": "string[]",
                  "optional": false
                },
                "usage": {
                  "name": "usage",
                  "type": "string",
                  "optional": false
                },
                "meaning": {
                  "name": "meaning",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 513
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "CharacterArcRecommendation": [
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
            "definition": {
              "name": "CharacterArcRecommendation",
              "body": "title: string;       // 推奨タイトル\r\n    description: string; // 詳細説明\r\n    suggestion: string;  // 具体的な提案\r\n    arcPhase: string;    // アークフェーズ\r\n    importance: number;  // 重要度 (0-1)",
              "properties": {
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "suggestion": {
                  "name": "suggestion",
                  "type": "string",
                  "optional": false
                },
                "arcPhase": {
                  "name": "arcPhase",
                  "type": "string",
                  "optional": false
                },
                "importance": {
                  "name": "importance",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 24
            },
            "system": "analysis",
            "module": "analysis/enhancement/character"
          }
        ],
        "ConsistencyAnalysis": [
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
            "definition": {
              "name": "ConsistencyAnalysis",
              "body": "overallConsistency: number; // 全体的な一貫性スコア (0-1)\r\n    issues: Array<{            // 問題点\r\n        aspect: string;        // 問題のある側面\r\n        description: string;   // 問題の説明",
              "properties": {
                "overallConsistency": {
                  "name": "overallConsistency",
                  "type": "number",
                  "optional": false
                },
                "issues": {
                  "name": "issues",
                  "type": "Array<{            // 問題点",
                  "optional": false
                },
                "aspect": {
                  "name": "aspect",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 35
            },
            "system": "analysis",
            "module": "analysis/enhancement/character"
          }
        ],
        "MotivationEnhancement": [
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
            "definition": {
              "name": "MotivationEnhancement",
              "body": "title: string;       // 推奨タイトル\r\n    description: string; // 詳細説明\r\n    implementation: string; // 実装方法\r\n    priority: number;    // 優先度 (0-1)",
              "properties": {
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "implementation": {
                  "name": "implementation",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 56
            },
            "system": "analysis",
            "module": "analysis/enhancement/character"
          }
        ],
        "RelationshipDynamicRecommendation": [
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
            "definition": {
              "name": "RelationshipDynamicRecommendation",
              "body": "title: string;       // 推奨タイトル\r\n    description: string; // 詳細説明\r\n    implementation: string; // 実装方法\r\n    priority: number;    // 優先度 (0-1)\r\n    targetCharacterId: string | null; // 対象キャラクターID",
              "properties": {
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "implementation": {
                  "name": "implementation",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                },
                "targetCharacterId": {
                  "name": "targetCharacterId",
                  "type": "string | null",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 66
            },
            "system": "analysis",
            "module": "analysis/enhancement/character"
          }
        ],
        "ContrastRecommendation": [
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
            "definition": {
              "name": "ContrastRecommendation",
              "body": "title: string;       // 推奨タイトル\r\n    description: string; // 詳細説明\r\n    implementation: string; // 実装方法\r\n    priority: number;    // 優先度 (0-1)",
              "properties": {
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "implementation": {
                  "name": "implementation",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 77
            },
            "system": "analysis",
            "module": "analysis/enhancement/character"
          }
        ],
        "ICharacterDepthService": [
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
            "definition": {
              "name": "ICharacterDepthService",
              "body": "/**\r\n     * キャラクター深化推奨の生成\r\n     * キャラクターの心理分析に基づく深化推奨を生成します\r\n     * \r\n     * @param character キャラクター\r\n     * @param psychology キャラクター心理情報\r\n     * @param chapterNumber 章番号（コンテキスト用）\r\n     * @returns 深化推奨の配列\r\n     */\r\n    generateDepthRecommendations(\r\n        character: Character, \r\n        psychology: CharacterPsychology, \r\n        chapterNumber: number\r\n    ): Promise<DepthRecommendation[]>;\r\n    \r\n    /**\r\n     * キャラクターの一貫性分析\r\n     * 心理プロファイルや履歴に基づいて一貫性を評価します\r\n     * \r\n     * @param character キャラクター\r\n     * @param psychology 心理情報\r\n     * @param chapterNumber 現在の章番号\r\n     * @returns 一貫性分析結果\r\n     */\r\n    analyzeCharacterConsistency(\r\n        character: Character, \r\n        psychology: CharacterPsychology,\r\n        chapterNumber: number\r\n    ): Promise<ConsistencyAnalysis>;\r\n    \r\n    /**\r\n     * キャラクターの動機付け強化推奨\r\n     * キャラクターの動機の深化と説得力向上を図る\r\n     * \r\n     * @param character キャラクター\r\n     * @param psychology 心理情報\r\n     * @returns 動機強化推奨\r\n     */\r\n    enhanceCharacterMotivations(\r\n        character: Character, \r\n        psychology: CharacterPsychology\r\n    ): Promise<MotivationEnhancement[]>;\r\n    \r\n    /**\r\n     * キャラクターアークの最適化推奨\r\n     * 現在のストーリー位置でのキャラクター成長を最適化\r\n     * \r\n     * @param character キャラクター\r\n     * @param psychology 心理情報\r\n     * @param chapterNumber 章番号\r\n     * @returns アーク最適化推奨\r\n     */\r\n    optimizeCharacterArcs(\r\n        character: Character, \r\n        psychology: CharacterPsychology,\r\n        chapterNumber: number\r\n    ): Promise<CharacterArcRecommendation[]>;\r\n    \r\n    /**\r\n     * 関係性ダイナミクス推奨の生成\r\n     * キャラクター間の関係性を深化・最適化する推奨\r\n     * \r\n     * @param character キャラクター\r\n     * @param chapterNumber 章番号\r\n     * @returns 関係性推奨\r\n     */\r\n    suggestRelationshipDynamics(\r\n        character: Character,\r\n        chapterNumber: number\r\n    ): Promise<RelationshipDynamicRecommendation[]>;\r\n    \r\n    /**\r\n     * コントラスト推奨の生成\r\n     * キャラクターの独自性を際立たせる推奨\r\n     * \r\n     * @param character キャラクター\r\n     * @param chapterNumber 章番号\r\n     * @returns コントラスト推奨\r\n     */\r\n    generateContrastRecommendations(\r\n        character: Character,\r\n        chapterNumber: number\r\n    ): Promise<ContrastRecommendation[]>;\r\n    \r\n    /**\r\n     * 複数キャラクターの深化推奨生成\r\n     * 同一章に登場する複数キャラクターの深化推奨\r\n     * \r\n     * @param characters キャラクター配列\r\n     * @param chapterNumber 章番号\r\n     * @param limit 最大推奨数\r\n     * @returns キャラクターIDごとの深化推奨\r\n     */\r\n    generateMultipleCharacterRecommendations(\r\n        characters: Character[],\r\n        chapterNumber: number,\r\n        limit?: number\r\n    ): Promise<{[characterId: string]: DepthRecommendation[]",
              "properties": {
                "character": {
                  "name": "character",
                  "type": "Character",
                  "optional": false
                },
                "psychology": {
                  "name": "psychology",
                  "type": "CharacterPsychology",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "characters": {
                  "name": "characters",
                  "type": "Character[]",
                  "optional": false
                },
                "limit": {
                  "name": "limit",
                  "type": "number",
                  "optional": true
                },
                "characterId": {
                  "name": "characterId",
                  "type": "string]: DepthRecommendation[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 98
            },
            "system": "analysis",
            "module": "analysis/enhancement/character"
          }
        ],
        "StyleOptimizationContext": [
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\style\\interfaces.ts",
            "definition": {
              "name": "StyleOptimizationContext",
              "body": "/** ジャンル */\r\n  genre?: string;\r\n  /** テーマ */\r\n  theme?: string;\r\n  /** テンション値（0-1） */\r\n  tension?: number;\r\n  /** ペーシング値（0-1） */\r\n  pacing?: number;\r\n  /** ターゲット読者層 */\r\n  targetAudience?: string;\r\n  /** 文体の方向性 */\r\n  styleDirection?: 'formal' | 'casual' | 'literary' | 'commercial';\r\n  /** 追加の制約やガイドライン */\r\n  constraints?: string[];",
              "properties": {
                "genre": {
                  "name": "genre",
                  "type": "string",
                  "optional": true
                },
                "theme": {
                  "name": "theme",
                  "type": "string",
                  "optional": true
                },
                "tension": {
                  "name": "tension",
                  "type": "number",
                  "optional": true
                },
                "pacing": {
                  "name": "pacing",
                  "type": "number",
                  "optional": true
                },
                "targetAudience": {
                  "name": "targetAudience",
                  "type": "string",
                  "optional": true
                },
                "styleDirection": {
                  "name": "styleDirection",
                  "type": "'formal' | 'casual' | 'literary' | 'commercial'",
                  "optional": true
                },
                "constraints": {
                  "name": "constraints",
                  "type": "string[]",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 114
            },
            "system": "analysis",
            "module": "analysis/enhancement/style"
          }
        ],
        "StyleOptimizationOptions": [
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\style\\interfaces.ts",
            "definition": {
              "name": "StyleOptimizationOptions",
              "body": "/** AI分析を使用するかどうか */\r\n  useAIAnalysis?: boolean;\r\n  /** 詳細レベル（1-3、高いほど詳細） */\r\n  detailLevel?: number;\r\n  /** キャッシュを使用するかどうか */\r\n  useCache?: boolean;\r\n  /** 最大提案数 */\r\n  maxSuggestions?: number;\r\n  /** 分析対象となる最小文字数 */\r\n  minContentLength?: number;",
              "properties": {
                "useAIAnalysis": {
                  "name": "useAIAnalysis",
                  "type": "boolean",
                  "optional": true
                },
                "detailLevel": {
                  "name": "detailLevel",
                  "type": "number",
                  "optional": true
                },
                "useCache": {
                  "name": "useCache",
                  "type": "boolean",
                  "optional": true
                },
                "maxSuggestions": {
                  "name": "maxSuggestions",
                  "type": "number",
                  "optional": true
                },
                "minContentLength": {
                  "name": "minContentLength",
                  "type": "number",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 134
            },
            "system": "analysis",
            "module": "analysis/enhancement/style"
          }
        ],
        "StyleOptimizationResult": [
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\style\\interfaces.ts",
            "definition": {
              "name": "StyleOptimizationResult",
              "body": "/** 文体ガイダンス */\r\n  styleGuidance?: StyleGuidance;\r\n  /** 代替表現提案 */\r\n  expressionAlternatives?: ExpressionAlternatives;\r\n  /** 主語パターン最適化 */\r\n  subjectOptimization?: SubjectPatternOptimization;\r\n  /** 文構造改善提案 */\r\n  structureRecommendations?: StructureRecommendation[];\r\n  /** 繰り返し表現代替案 */\r\n  repetitionAlternatives?: RepetitionAlternative[];\r\n  /** 処理にかかった時間（ミリ秒） */\r\n  processingTime?: number;\r\n  /** 使用されたキャッシュ数 */\r\n  cacheHits?: number;",
              "properties": {
                "styleGuidance": {
                  "name": "styleGuidance",
                  "type": "StyleGuidance",
                  "optional": true
                },
                "expressionAlternatives": {
                  "name": "expressionAlternatives",
                  "type": "ExpressionAlternatives",
                  "optional": true
                },
                "subjectOptimization": {
                  "name": "subjectOptimization",
                  "type": "SubjectPatternOptimization",
                  "optional": true
                },
                "structureRecommendations": {
                  "name": "structureRecommendations",
                  "type": "StructureRecommendation[]",
                  "optional": true
                },
                "repetitionAlternatives": {
                  "name": "repetitionAlternatives",
                  "type": "RepetitionAlternative[]",
                  "optional": true
                },
                "processingTime": {
                  "name": "processingTime",
                  "type": "number",
                  "optional": true
                },
                "cacheHits": {
                  "name": "cacheHits",
                  "type": "number",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 150
            },
            "system": "analysis",
            "module": "analysis/enhancement/style"
          }
        ],
        "BulkOptimizationRequest": [
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\style\\interfaces.ts",
            "definition": {
              "name": "BulkOptimizationRequest",
              "body": "/** 章番号 */\r\n  chapterNumber: number;\r\n  /** 文体分析結果 */\r\n  styleAnalysis: StyleAnalysis;\r\n  /** 表現パターン */\r\n  expressionPatterns: ExpressionPatterns;\r\n  /** 主語パターン分析結果 */\r\n  subjectPatterns: SubjectPatternOptimizationRequest;\r\n  /** 繰り返し表現リスト */\r\n  repetitions: string[];\r\n  /** コンテキスト情報 */\r\n  context: StyleOptimizationContext;\r\n  /** オプション */\r\n  options?: StyleOptimizationOptions;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "styleAnalysis": {
                  "name": "styleAnalysis",
                  "type": "StyleAnalysis",
                  "optional": false
                },
                "expressionPatterns": {
                  "name": "expressionPatterns",
                  "type": "ExpressionPatterns",
                  "optional": false
                },
                "subjectPatterns": {
                  "name": "subjectPatterns",
                  "type": "SubjectPatternOptimizationRequest",
                  "optional": false
                },
                "repetitions": {
                  "name": "repetitions",
                  "type": "string[]",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "StyleOptimizationContext",
                  "optional": false
                },
                "options": {
                  "name": "options",
                  "type": "StyleOptimizationOptions",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 170
            },
            "system": "analysis",
            "module": "analysis/enhancement/style"
          }
        ],
        "IStyleOptimizationServiceExtended": [
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\style\\interfaces.ts",
            "definition": {
              "name": "IStyleOptimizationServiceExtended",
              "body": "/**\r\n   * 一括最適化処理\r\n   * 複数の最適化機能を一度に実行します\r\n   * \r\n   * @param request 一括最適化リクエスト\r\n   * @returns 最適化結果\r\n   */\r\n  bulkOptimize?(request: BulkOptimizationRequest): Promise<StyleOptimizationResult>;\r\n\r\n  /**\r\n   * 最適化履歴の取得\r\n   * 過去の最適化結果を取得します\r\n   * \r\n   * @param chapterNumber 章番号\r\n   * @param limit 取得件数制限\r\n   * @returns 最適化履歴\r\n   */\r\n  getOptimizationHistory?(chapterNumber: number, limit?: number): Promise<StyleOptimizationResult[]>;\r\n\r\n  /**\r\n   * キャッシュのクリア\r\n   * 指定した章または全体のキャッシュを削除します\r\n   * \r\n   * @param chapterNumber 章番号（省略時は全体）\r\n   */\r\n  clearCache?(chapterNumber?: number): Promise<void>;\r\n\r\n  /**\r\n   * サービスの健全性チェック\r\n   * サービスが正常に動作しているかチェックします\r\n   * \r\n   * @returns 健全性チェック結果\r\n   */\r\n  healthCheck?(): Promise<{\r\n    status: 'healthy' | 'degraded' | 'unhealthy';\r\n    details: {\r\n      cacheStatus: string;\r\n      aiServiceStatus: string;\r\n      lastOptimizationTime?: number;",
              "properties": {
                "request": {
                  "name": "request",
                  "type": "BulkOptimizationRequest): Promise<StyleOptimizationResult>",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number): Promise<void>",
                  "optional": true
                },
                "limit": {
                  "name": "limit",
                  "type": "number): Promise<StyleOptimizationResult[]>",
                  "optional": true
                },
                "status": {
                  "name": "status",
                  "type": "'healthy' | 'degraded' | 'unhealthy'",
                  "optional": false
                },
                "details": {
                  "name": "details",
                  "type": "{",
                  "optional": false
                },
                "cacheStatus": {
                  "name": "cacheStatus",
                  "type": "string",
                  "optional": false
                },
                "aiServiceStatus": {
                  "name": "aiServiceStatus",
                  "type": "string",
                  "optional": false
                },
                "lastOptimizationTime": {
                  "name": "lastOptimizationTime",
                  "type": "number",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 190
            },
            "system": "analysis",
            "module": "analysis/enhancement/style"
          }
        ],
        "TensionRecommendation": [
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\tension\\interfaces.ts",
            "definition": {
              "name": "TensionRecommendation",
              "body": "/** 推奨テンション値 (0-1) */\r\n  recommendedTension: number;\r\n  /** 推奨理由 */\r\n  reason: string;\r\n  /** 方向性 */\r\n  direction: \"increase\" | \"decrease\" | \"maintain\" | \"establish\";",
              "properties": {
                "recommendedTension": {
                  "name": "recommendedTension",
                  "type": "number",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                },
                "direction": {
                  "name": "direction",
                  "type": "\"increase\" | \"decrease\" | \"maintain\" | \"establish\"",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 11
            },
            "system": "analysis",
            "module": "analysis/enhancement/tension"
          }
        ],
        "PacingRecommendation": [
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\tension\\interfaces.ts",
            "definition": {
              "name": "PacingRecommendation",
              "body": "/** 推奨ペーシング値 (0-1) */\r\n  recommendedPacing: number;\r\n  /** 説明 */\r\n  description: string;",
              "properties": {
                "recommendedPacing": {
                  "name": "recommendedPacing",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 23
            },
            "system": "analysis",
            "module": "analysis/enhancement/tension"
          }
        ],
        "StoryEvent": [
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\tension\\interfaces.ts",
            "definition": {
              "name": "StoryEvent",
              "body": "/** イベントタイプ */\r\n  type: string;\r\n  /** 重要度 (0-1) */\r\n  significance: number;\r\n  /** 追加情報 */\r\n  details?: any;",
              "properties": {
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": false
                },
                "details": {
                  "name": "details",
                  "type": "any",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 43
            },
            "system": "analysis",
            "module": "analysis/enhancement/tension"
          }
        ],
        "NarrativeArcInfo": [
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\tension\\interfaces.ts",
            "definition": {
              "name": "NarrativeArcInfo",
              "body": "/** 現在のアーク番号 */\r\n  currentArcNumber: number;\r\n  /** アークの開始章 */\r\n  arcStartChapter: number;\r\n  /** アークの終了章（予測） */\r\n  arcEndChapter: number;\r\n  /** アーク内での位置 (0-1) */\r\n  positionInArc: number;\r\n  /** アークのテーマ */\r\n  arcTheme?: string;",
              "properties": {
                "currentArcNumber": {
                  "name": "currentArcNumber",
                  "type": "number",
                  "optional": false
                },
                "arcStartChapter": {
                  "name": "arcStartChapter",
                  "type": "number",
                  "optional": false
                },
                "arcEndChapter": {
                  "name": "arcEndChapter",
                  "type": "number",
                  "optional": false
                },
                "positionInArc": {
                  "name": "positionInArc",
                  "type": "number",
                  "optional": false
                },
                "arcTheme": {
                  "name": "arcTheme",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 67
            },
            "system": "analysis",
            "module": "analysis/enhancement/tension"
          }
        ],
        "ITensionOptimizationService": [
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\tension\\interfaces.ts",
            "definition": {
              "name": "ITensionOptimizationService",
              "body": "/**\r\n   * サービスの初期化\r\n   */\r\n  initialize(): Promise<void>;\r\n  \r\n  /**\r\n   * テンション・ペーシング推奨を取得\r\n   * @param chapterNumber 章番号\r\n   * @param genre ジャンル（オプショナル）\r\n   * @param options 追加オプション（オプショナル）\r\n   */\r\n  getTensionPacingRecommendation(\r\n    chapterNumber: number,\r\n    genre?: string,\r\n    options?: any\r\n  ): Promise<TensionPacingRecommendation>;\r\n  \r\n  /**\r\n   * テンション最適化提案を生成\r\n   * @param chapterNumber 章番号\r\n   * @param currentTension 現在のテンション値\r\n   */\r\n  generateTensionOptimizationSuggestions(\r\n    chapterNumber: number,\r\n    currentTension: number\r\n  ): Promise<string[]>;\r\n  \r\n  /**\r\n   * テンション曲線を生成\r\n   * @param totalChapters 総章数\r\n   * @param genre ジャンル（オプショナル）\r\n   */\r\n  generateTensionCurve(\r\n    totalChapters: number,\r\n    genre?: string\r\n  ): Promise<TensionCurvePoint[]>;\r\n  \r\n  /**\r\n   * クライマックス配置の推奨を取得\r\n   * @param totalChapters 総章数\r\n   * @param genre ジャンル（オプショナル）\r\n   */\r\n  recommendClimax(\r\n    totalChapters: number,\r\n    genre?: string\r\n  ): Promise<{\r\n    climaxChapter: number;\r\n    secondaryClimaxChapters: number[];\r\n    reason: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "genre": {
                  "name": "genre",
                  "type": "string",
                  "optional": true
                },
                "options": {
                  "name": "options",
                  "type": "any",
                  "optional": true
                },
                "currentTension": {
                  "name": "currentTension",
                  "type": "number",
                  "optional": false
                },
                "totalChapters": {
                  "name": "totalChapters",
                  "type": "number",
                  "optional": false
                },
                "climaxChapter": {
                  "name": "climaxChapter",
                  "type": "number",
                  "optional": false
                },
                "secondaryClimaxChapters": {
                  "name": "secondaryClimaxChapters",
                  "type": "number[]",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 83
            },
            "system": "analysis",
            "module": "analysis/enhancement/tension"
          }
        ],
        "IThemeEnhancementService": [
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\theme\\interfaces.ts",
            "definition": {
              "name": "IThemeEnhancementService",
              "body": "/**\r\n   * 初期化\r\n   */\r\n  initialize(): Promise<void>;\r\n  \r\n  /**\r\n   * テーマ強化提案の生成\r\n   * テーマ分析結果に基づいて、テーマをより効果的に表現するための提案を生成します。\r\n   * \r\n   * @param themeAnalysis テーマ分析結果\r\n   * @param chapterNumber 章番号\r\n   * @param context コンテキスト情報（任意）\r\n   * @returns テーマ強化提案の配列\r\n   */\r\n  generateThemeEnhancements(\r\n    themeAnalysis: ThemeResonanceAnalysis,\r\n    chapterNumber: number,\r\n    context?: any\r\n  ): Promise<ThemeEnhancement[]>;\r\n  \r\n  /**\r\n   * 文学的技法提案の生成\r\n   * 文学的技法の活用提案を生成します。\r\n   * \r\n   * @param context コンテキスト情報\r\n   * @param chapterNumber 章番号\r\n   * @returns 文学的技法提案\r\n   */\r\n  generateLiteraryInspirations(\r\n    context: any,\r\n    chapterNumber: number\r\n  ): Promise<LiteraryInspiration>;\r\n  \r\n  /**\r\n   * 象徴要素の提案生成\r\n   * テーマを強化するための象徴要素を提案します。\r\n   * \r\n   * @param themes テーマ配列\r\n   * @param chapterNumber 章番号\r\n   * @param genre ジャンル\r\n   * @returns 象徴要素の提案\r\n   */\r\n  suggestSymbolicElements(\r\n    themes: string[],\r\n    chapterNumber: number,\r\n    genre?: string\r\n  ): Promise<SymbolicElement[]>;\r\n  \r\n  /**\r\n   * 伏線機会の検出\r\n   * テキスト内の伏線設置機会を検出します。\r\n   * \r\n   * @param content テキスト内容\r\n   * @param chapterNumber 章番号\r\n   * @param themes テーマ配列\r\n   * @returns 伏線機会の配列\r\n   */\r\n  detectForeshadowingOpportunities(\r\n    content: string,\r\n    chapterNumber: number,\r\n    themes: string[]\r\n  ): Promise<ForeshadowingOpportunity[]>;",
              "properties": {
                "themeAnalysis": {
                  "name": "themeAnalysis",
                  "type": "ThemeResonanceAnalysis",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "any",
                  "optional": false
                },
                "themes": {
                  "name": "themes",
                  "type": "string[]",
                  "optional": false
                },
                "genre": {
                  "name": "genre",
                  "type": "string",
                  "optional": true
                },
                "content": {
                  "name": "content",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 25
            },
            "system": "analysis",
            "module": "analysis/enhancement/theme"
          }
        ],
        "IChapterAnalysisService": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\chapter\\interfaces.ts",
            "definition": {
              "name": "IChapterAnalysisService",
              "body": "/**\r\n   * 章の内容を総合的に分析\r\n   * \r\n   * キャラクター登場、テーマ出現、伏線要素、品質メトリクスなどを\r\n   * 包括的に分析します。結果はキャッシュされます。\r\n   * \r\n   * @param {string",
              "properties": {},
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 29
            },
            "system": "analysis",
            "module": "analysis/services/chapter"
          }
        ],
        "ICharacterAnalysisService": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\character\\interfaces.ts",
            "definition": {
              "name": "ICharacterAnalysisService",
              "body": "/**\r\n   * キャラクターの総合分析\r\n   * キャラクターの現在の状態、変化、関係性を分析します\r\n   * \r\n   * @param {string",
              "properties": {},
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 16
            },
            "system": "analysis",
            "module": "analysis/services/character"
          }
        ],
        "GenerationContext": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\narrative\\interfaces.ts",
            "definition": {
              "name": "GenerationContext",
              "body": "/** 世界設定 */\n  worldSettings?: string;\n  /** 章番号 */\n  chapterNumber: number;\n  /** 総章数 */\n  totalChapters?: number;\n  /** ジャンル */\n  genre?: string;\n  /** その他の任意のプロパティ */\n  [key: string]: any;",
              "properties": {
                "worldSettings": {
                  "name": "worldSettings",
                  "type": "string",
                  "optional": true
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "totalChapters": {
                  "name": "totalChapters",
                  "type": "number",
                  "optional": true
                },
                "genre": {
                  "name": "genre",
                  "type": "string",
                  "optional": true
                },
                "key": {
                  "name": "key",
                  "type": "string]: any",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 29
            },
            "system": "analysis",
            "module": "analysis/services/narrative"
          }
        ],
        "NarrativeAnalysisOptions": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\narrative\\interfaces.ts",
            "definition": {
              "name": "NarrativeAnalysisOptions",
              "body": "/** Gemini APIクライアント */\n  geminiClient?: GeminiClient;\n  /** ジャンル */\n  genre?: string;",
              "properties": {
                "geminiClient": {
                  "name": "geminiClient",
                  "type": "GeminiClient",
                  "optional": true
                },
                "genre": {
                  "name": "genre",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 46
            },
            "system": "analysis",
            "module": "analysis/services/narrative"
          }
        ],
        "INarrativeAnalysisService": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\narrative\\interfaces.ts",
            "definition": {
              "name": "INarrativeAnalysisService",
              "body": "/**\n   * シーン構造を分析\n   * @param lastChapters 分析対象の章数\n   * @returns シーン構造分析結果\n   */\n  analyzeSceneStructure(lastChapters?: number): Promise<SceneStructureAnalysis>;\n\n  /**\n   * シーン推奨を生成\n   * @param chapterNumber 章番号\n   * @returns シーン推奨の配列\n   */\n  generateSceneRecommendations(chapterNumber: number): Promise<SceneRecommendation[]>;\n\n  /**\n   * 文学的インスピレーションを生成\n   * @param context コンテキスト情報\n   * @param chapterNumber 章番号\n   * @returns 文学的インスピレーション\n   */\n  generateLiteraryInspirations(\n    context: GenerationContext,\n    chapterNumber: number\n  ): Promise<LiteraryInspiration>;\n\n  /**\n   * すべてのターニングポイントを取得\n   * @returns ターニングポイントの配列\n   */\n  getTurningPoints(): TurningPoint[];\n\n  /**\n   * 特定の章のターニングポイントを取得\n   * @param chapterNumber 章番号\n   * @returns ターニングポイント（存在しない場合はnull）\n   */\n  getTurningPointForChapter(chapterNumber: number): TurningPoint | null;\n\n  /**\n   * ジャンルを設定\n   * @param genre ジャンル\n   */\n  setGenre(genre: string): void;\n\n  /**\n   * 現在のジャンルを取得\n   * @returns ジャンル\n   */\n  getGenre(): string;\n\n  /**\n   * 現在のテンションレベルを取得\n   * @returns テンションレベル（0-10）\n   */\n  getCurrentTensionLevel(): number;\n\n  /**\n   * 章の要約を取得\n   * @param chapterNumber 章番号\n   * @returns 要約テキスト（存在しない場合はnull）\n   */\n  getChapterSummary(chapterNumber: number): string | null;",
              "properties": {
                "lastChapters": {
                  "name": "lastChapters",
                  "type": "number): Promise<SceneStructureAnalysis>",
                  "optional": true
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number): string | null",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "GenerationContext",
                  "optional": false
                },
                "genre": {
                  "name": "genre",
                  "type": "string): void",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 60
            },
            "system": "analysis",
            "module": "analysis/services/narrative"
          }
        ],
        "INarrativeAnalysisServiceFactory": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\narrative\\interfaces.ts",
            "definition": {
              "name": "INarrativeAnalysisServiceFactory",
              "body": "/**\n   * 物語分析サービスのインスタンスを作成\n   * @param options 設定オプション\n   * @returns 物語分析サービスのインスタンス\n   */\n  createNarrativeAnalysisService(options?: NarrativeAnalysisOptions): INarrativeAnalysisService;",
              "properties": {
                "options": {
                  "name": "options",
                  "type": "NarrativeAnalysisOptions): INarrativeAnalysisService",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 130
            },
            "system": "analysis",
            "module": "analysis/services/narrative"
          }
        ],
        "ISceneStructureOptimizer": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\narrative\\interfaces.ts",
            "definition": {
              "name": "ISceneStructureOptimizer",
              "body": "/**\n   * シーン構造分析\n   * @param chapters 分析対象の章配列\n   * @returns シーン構造分析結果\n   */\n  analyzeSceneStructure(chapters: Chapter[]): SceneStructureAnalysis;\n  \n  /**\n   * シーン推奨生成\n   * @param analysis シーン構造分析結果\n   * @param chapterNumber 対象章番号\n   * @returns シーン推奨の配列\n   */\n  generateSceneRecommendations(\n    analysis: SceneStructureAnalysis, \n    chapterNumber: number\n  ): Promise<SceneRecommendation[]>;",
              "properties": {
                "chapters": {
                  "name": "chapters",
                  "type": "Chapter[]): SceneStructureAnalysis",
                  "optional": false
                },
                "analysis": {
                  "name": "analysis",
                  "type": "SceneStructureAnalysis",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 143
            },
            "system": "analysis",
            "module": "analysis/services/narrative"
          }
        ],
        "ILiteraryComparisonSystem": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\narrative\\interfaces.ts",
            "definition": {
              "name": "ILiteraryComparisonSystem",
              "body": "/**\n   * 文学的インスピレーションを生成する\n   * @param context 生成コンテキスト\n   * @param chapterNumber 章番号\n   * @returns 文学的インスピレーション\n   */\n  generateLiteraryInspirations(\n    context: GenerationContext,\n    chapterNumber: number\n  ): Promise<LiteraryInspiration>;\n  \n  /**\n   * ジャンルと参考作品から特定の文学的テクニックの詳細を取得する\n   * @param genre ジャンル\n   * @param techniqueType テクニックの種類（'plot', 'character', 'atmosphere'）\n   * @param techniqueName テクニック名\n   * @returns テクニックの詳細\n   */\n  getTechniqueDetails(\n    genre: string,\n    techniqueType: 'plot' | 'character' | 'atmosphere',\n    techniqueName: string\n  ): Promise<any | null>;\n  \n  /**\n   * 物語の現在の状態に基づいて関連する文学作品を推薦する\n   * @param context 生成コンテキスト\n   * @param currentThemes 現在のテーマ（配列）\n   * @returns 推薦作品とその関連性\n   */\n  recommendRelatedWorks(\n    context: GenerationContext,\n    currentThemes: string[]\n  ): Promise<Array<{ title: string, author: string, relevance: string",
              "properties": {
                "context": {
                  "name": "context",
                  "type": "GenerationContext",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "genre": {
                  "name": "genre",
                  "type": "string",
                  "optional": false
                },
                "techniqueType": {
                  "name": "techniqueType",
                  "type": "'plot' | 'character' | 'atmosphere'",
                  "optional": false
                },
                "techniqueName": {
                  "name": "techniqueName",
                  "type": "string",
                  "optional": false
                },
                "currentThemes": {
                  "name": "currentThemes",
                  "type": "string[]",
                  "optional": false
                },
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "author": {
                  "name": "author",
                  "type": "string",
                  "optional": false
                },
                "relevance": {
                  "name": "relevance",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 167
            },
            "system": "analysis",
            "module": "analysis/services/narrative"
          }
        ],
        "Chapter": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\reader\\interfaces.ts",
            "definition": {
              "name": "Chapter",
              "body": "chapterNumber: number;\r\n  title: string;\r\n  content: string;\r\n  scenes?: Scene[];",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "content": {
                  "name": "content",
                  "type": "string",
                  "optional": false
                },
                "scenes": {
                  "name": "scenes",
                  "type": "Scene[]",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 7
            },
            "system": "analysis",
            "module": "analysis/services/reader"
          }
        ],
        "Scene": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\reader\\interfaces.ts",
            "definition": {
              "name": "Scene",
              "body": "id: string;\r\n  type: string;\r\n  title: string;\r\n  startPosition: number;\r\n  endPosition: number;\r\n  characters: string[];\r\n  summary: string;",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "startPosition": {
                  "name": "startPosition",
                  "type": "number",
                  "optional": false
                },
                "endPosition": {
                  "name": "endPosition",
                  "type": "number",
                  "optional": false
                },
                "characters": {
                  "name": "characters",
                  "type": "string[]",
                  "optional": false
                },
                "summary": {
                  "name": "summary",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 14
            },
            "system": "analysis",
            "module": "analysis/services/reader"
          }
        ],
        "ReaderExperienceAnalysis": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\reader\\interfaces.ts",
            "definition": {
              "name": "ReaderExperienceAnalysis",
              "body": "/** 興味維持度 (1-10) */\r\n  interestRetention: number;\r\n  /** 感情移入度 (1-10) */\r\n  empathy: number;\r\n  /** 理解度 (1-10) */\r\n  clarity: number;\r\n  /** 意外性 (1-10) */\r\n  unexpectedness: number;\r\n  /** 続きへの期待度 (1-10) */\r\n  anticipation: number;\r\n  /** 総合スコア (1-10) */\r\n  overallScore: number;\r\n  /** 弱点 */\r\n  weakPoints: Array<{\r\n    point: string;\r\n    suggestion?: string;",
              "properties": {
                "interestRetention": {
                  "name": "interestRetention",
                  "type": "number",
                  "optional": false
                },
                "empathy": {
                  "name": "empathy",
                  "type": "number",
                  "optional": false
                },
                "clarity": {
                  "name": "clarity",
                  "type": "number",
                  "optional": false
                },
                "unexpectedness": {
                  "name": "unexpectedness",
                  "type": "number",
                  "optional": false
                },
                "anticipation": {
                  "name": "anticipation",
                  "type": "number",
                  "optional": false
                },
                "overallScore": {
                  "name": "overallScore",
                  "type": "number",
                  "optional": false
                },
                "weakPoints": {
                  "name": "weakPoints",
                  "type": "Array<{",
                  "optional": false
                },
                "point": {
                  "name": "point",
                  "type": "string",
                  "optional": false
                },
                "suggestion": {
                  "name": "suggestion",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 25
            },
            "system": "analysis",
            "module": "analysis/services/reader"
          }
        ],
        "AnalyzeReaderExperienceRequest": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\reader\\interfaces.ts",
            "definition": {
              "name": "AnalyzeReaderExperienceRequest",
              "body": "chapter: Chapter;\r\n  previousChapters?: Chapter[];",
              "properties": {
                "chapter": {
                  "name": "chapter",
                  "type": "Chapter",
                  "optional": false
                },
                "previousChapters": {
                  "name": "previousChapters",
                  "type": "Chapter[]",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 50
            },
            "system": "analysis",
            "module": "analysis/services/reader"
          }
        ],
        "AnalyzeReaderExperienceResponse": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\reader\\interfaces.ts",
            "definition": {
              "name": "AnalyzeReaderExperienceResponse",
              "body": "analysis: ReaderExperienceAnalysis;",
              "properties": {
                "analysis": {
                  "name": "analysis",
                  "type": "ReaderExperienceAnalysis",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 55
            },
            "system": "analysis",
            "module": "analysis/services/reader"
          }
        ],
        "GenerateImprovementsRequest": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\reader\\interfaces.ts",
            "definition": {
              "name": "GenerateImprovementsRequest",
              "body": "analysis: ReaderExperienceAnalysis;",
              "properties": {
                "analysis": {
                  "name": "analysis",
                  "type": "ReaderExperienceAnalysis",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 60
            },
            "system": "analysis",
            "module": "analysis/services/reader"
          }
        ],
        "GenerateImprovementsResponse": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\reader\\interfaces.ts",
            "definition": {
              "name": "GenerateImprovementsResponse",
              "body": "improvements: string[];",
              "properties": {
                "improvements": {
                  "name": "improvements",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 64
            },
            "system": "analysis",
            "module": "analysis/services/reader"
          }
        ],
        "GenerateSceneImprovementsRequest": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\reader\\interfaces.ts",
            "definition": {
              "name": "GenerateSceneImprovementsRequest",
              "body": "chapter: Chapter;\r\n  analysis: ReaderExperienceAnalysis;",
              "properties": {
                "chapter": {
                  "name": "chapter",
                  "type": "Chapter",
                  "optional": false
                },
                "analysis": {
                  "name": "analysis",
                  "type": "ReaderExperienceAnalysis",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 69
            },
            "system": "analysis",
            "module": "analysis/services/reader"
          }
        ],
        "GenerateSceneImprovementsResponse": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\reader\\interfaces.ts",
            "definition": {
              "name": "GenerateSceneImprovementsResponse",
              "body": "sceneImprovements: {\r\n    [sceneId: string]: string[];",
              "properties": {
                "sceneImprovements": {
                  "name": "sceneImprovements",
                  "type": "{",
                  "optional": false
                },
                "sceneId": {
                  "name": "sceneId",
                  "type": "string]: string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 74
            },
            "system": "analysis",
            "module": "analysis/services/reader"
          }
        ],
        "GetGenreExpectationsRequest": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\reader\\interfaces.ts",
            "definition": {
              "name": "GetGenreExpectationsRequest",
              "body": "genre: string;\r\n  chapterNumber: number;\r\n  totalChapters?: number;",
              "properties": {
                "genre": {
                  "name": "genre",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "totalChapters": {
                  "name": "totalChapters",
                  "type": "number",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 81
            },
            "system": "analysis",
            "module": "analysis/services/reader"
          }
        ],
        "GetGenreExpectationsResponse": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\reader\\interfaces.ts",
            "definition": {
              "name": "GetGenreExpectationsResponse",
              "body": "expectations: string[];",
              "properties": {
                "expectations": {
                  "name": "expectations",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 87
            },
            "system": "analysis",
            "module": "analysis/services/reader"
          }
        ],
        "AnalyzeForReaderTypeRequest": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\reader\\interfaces.ts",
            "definition": {
              "name": "AnalyzeForReaderTypeRequest",
              "body": "chapter: Chapter;\r\n  readerType: 'casual' | 'critical' | 'genre' | 'emotional';",
              "properties": {
                "chapter": {
                  "name": "chapter",
                  "type": "Chapter",
                  "optional": false
                },
                "readerType": {
                  "name": "readerType",
                  "type": "'casual' | 'critical' | 'genre' | 'emotional'",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 92
            },
            "system": "analysis",
            "module": "analysis/services/reader"
          }
        ],
        "AnalyzeForReaderTypeResponse": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\reader\\interfaces.ts",
            "definition": {
              "name": "AnalyzeForReaderTypeResponse",
              "body": "recommendations: string[];",
              "properties": {
                "recommendations": {
                  "name": "recommendations",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 97
            },
            "system": "analysis",
            "module": "analysis/services/reader"
          }
        ],
        "ExtractScenesRequest": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\reader\\interfaces.ts",
            "definition": {
              "name": "ExtractScenesRequest",
              "body": "content: string;\r\n  options?: {\r\n    minSceneLength?: number;\r\n    detectCharacters?: boolean;",
              "properties": {
                "content": {
                  "name": "content",
                  "type": "string",
                  "optional": false
                },
                "options": {
                  "name": "options",
                  "type": "{",
                  "optional": true
                },
                "minSceneLength": {
                  "name": "minSceneLength",
                  "type": "number",
                  "optional": true
                },
                "detectCharacters": {
                  "name": "detectCharacters",
                  "type": "boolean",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 102
            },
            "system": "analysis",
            "module": "analysis/services/reader"
          }
        ],
        "ExtractScenesResponse": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\reader\\interfaces.ts",
            "definition": {
              "name": "ExtractScenesResponse",
              "body": "scenes: Scene[];",
              "properties": {
                "scenes": {
                  "name": "scenes",
                  "type": "Scene[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 110
            },
            "system": "analysis",
            "module": "analysis/services/reader"
          }
        ],
        "ErrorResponse": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\reader\\interfaces.ts",
            "definition": {
              "name": "ErrorResponse",
              "body": "error: {\r\n    code: string;\r\n    message: string;\r\n    details?: string;",
              "properties": {
                "error": {
                  "name": "error",
                  "type": "{",
                  "optional": false
                },
                "code": {
                  "name": "code",
                  "type": "string",
                  "optional": false
                },
                "message": {
                  "name": "message",
                  "type": "string",
                  "optional": false
                },
                "details": {
                  "name": "details",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 115
            },
            "system": "analysis",
            "module": "analysis/services/reader"
          }
        ],
        "NovelAISystemAPI": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\reader\\interfaces.ts",
            "definition": {
              "name": "NovelAISystemAPI",
              "body": "// 読者体験分析\r\n  analyzeReaderExperience(\r\n    request: AnalyzeReaderExperienceRequest\r\n  ): Promise<AnalyzeReaderExperienceResponse>;\r\n  \r\n  // 改善提案生成\r\n  generateImprovements(\r\n    request: GenerateImprovementsRequest\r\n  ): Promise<GenerateImprovementsResponse>;\r\n  \r\n  // シーン改善提案生成\r\n  generateSceneImprovements(\r\n    request: GenerateSceneImprovementsRequest\r\n  ): Promise<GenerateSceneImprovementsResponse>;\r\n  \r\n  // ジャンル期待分析\r\n  getGenreExpectations(\r\n    request: GetGenreExpectationsRequest\r\n  ): Promise<GetGenreExpectationsResponse>;\r\n  \r\n  // 読者タイプ分析\r\n  analyzeForReaderType(\r\n    request: AnalyzeForReaderTypeRequest\r\n  ): Promise<AnalyzeForReaderTypeResponse>;\r\n  \r\n  // シーン抽出\r\n  extractScenes(\r\n    request: ExtractScenesRequest\r\n  ): Promise<ExtractScenesResponse>;",
              "properties": {
                "request": {
                  "name": "request",
                  "type": "ExtractScenesRequest",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 124
            },
            "system": "analysis",
            "module": "analysis/services/reader"
          }
        ],
        "SubjectPatternAnalysis": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\style\\interfaces.ts",
            "definition": {
              "name": "SubjectPatternAnalysis",
              "body": "repeatedSubjects: RepeatedSubjectPattern[];\r\n  subjectDiversityScore: number;\r\n  suggestions: string[];",
              "properties": {
                "repeatedSubjects": {
                  "name": "repeatedSubjects",
                  "type": "RepeatedSubjectPattern[]",
                  "optional": false
                },
                "subjectDiversityScore": {
                  "name": "subjectDiversityScore",
                  "type": "number",
                  "optional": false
                },
                "suggestions": {
                  "name": "suggestions",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 19
            },
            "system": "analysis",
            "module": "analysis/services/style"
          }
        ],
        "RepeatedSubjectPattern": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\style\\interfaces.ts",
            "definition": {
              "name": "RepeatedSubjectPattern",
              "body": "subject: string;\r\n  count: number;\r\n  startIndex: number;\r\n  endIndex: number;",
              "properties": {
                "subject": {
                  "name": "subject",
                  "type": "string",
                  "optional": false
                },
                "count": {
                  "name": "count",
                  "type": "number",
                  "optional": false
                },
                "startIndex": {
                  "name": "startIndex",
                  "type": "number",
                  "optional": false
                },
                "endIndex": {
                  "name": "endIndex",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 28
            },
            "system": "analysis",
            "module": "analysis/services/style"
          }
        ],
        "IStyleAnalysisService": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\style\\interfaces.ts",
            "definition": {
              "name": "IStyleAnalysisService",
              "body": "/**\r\n   * 初期化\r\n   * サービスの初期化処理を行います\r\n   */\r\n  initialize(): Promise<void>;\r\n\r\n  /**\r\n   * 文体分析\r\n   * テキストの文体特性を分析します\r\n   * \r\n   * @param content テキスト内容\r\n   * @returns 文体分析結果\r\n   */\r\n  analyzeStyle(content: string): Promise<StyleAnalysis>;\r\n\r\n  /**\r\n   * 表現パターン分析\r\n   * テキストの表現パターンを分析します\r\n   * \r\n   * @param content テキスト内容\r\n   * @returns 表現パターン分析結果\r\n   */\r\n  analyzeExpressionPatterns(content: string): Promise<ExpressionPatterns>;\r\n\r\n  /**\r\n   * 主語パターン分析\r\n   * テキストの主語使用パターンを分析します\r\n   * \r\n   * @param content テキスト内容\r\n   * @returns 主語パターン分析結果\r\n   */\r\n  analyzeSubjectPatterns(content: string): Promise<SubjectPatternAnalysis>;\r\n\r\n  /**\r\n   * 表現分析\r\n   * テキスト内の特徴的な表現パターン、繰り返し使用されている表現などを\r\n   * 検出し分析します。\r\n   * \r\n   * @param content テキスト内容\r\n   * @returns 分析結果\r\n   */\r\n  analyzeExpressions(content: string): Promise<ExpressionUsageResult>;\r\n\r\n  /**\r\n   * スタイル改善提案の生成\r\n   * \r\n   * 章分析結果に基づいてスタイル改善の提案を生成します\r\n   * \r\n   * @param analysis 章分析結果\r\n   * @param chapterNumber 章番号\r\n   * @returns 改善提案の配列\r\n   */\r\n  generateStyleImprovementSuggestions?(analysis: any, chapterNumber: number): Promise<string[]>;",
              "properties": {
                "content": {
                  "name": "content",
                  "type": "string): Promise<ExpressionUsageResult>",
                  "optional": false
                },
                "analysis": {
                  "name": "analysis",
                  "type": "any",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number): Promise<string[]>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 39
            },
            "system": "analysis",
            "module": "analysis/services/style"
          }
        ],
        "IThemeAnalysisService": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\theme\\interfaces.ts",
            "definition": {
              "name": "IThemeAnalysisService",
              "body": "/**\r\n   * テーマ共鳴分析を実行\r\n   * テキスト内のテーマ表現を分析し、各テーマの強度や表現方法を評価します\r\n   * \r\n   * @param content 分析対象のテキスト\r\n   * @param themes テーマの配列\r\n   * @returns テーマ共鳴分析結果\r\n   */\r\n  analyzeThemeResonance(content: string, themes: string[]): Promise<ThemeResonanceAnalysis>;\r\n\r\n  /**\r\n   * 伏線処理を実行\r\n   * 章の内容から伏線を検出、追跡、生成します\r\n   * \r\n   * @param content 章コンテンツ\r\n   * @param chapterNumber 章番号\r\n   * @returns 処理結果\r\n   */\r\n  processForeshadowing(content: string, chapterNumber: number): Promise<{\r\n    resolvedForeshadowing: ForeshadowingElement[];\r\n    generatedCount: number;\r\n    totalActive: number;",
              "properties": {
                "content": {
                  "name": "content",
                  "type": "string",
                  "optional": false
                },
                "themes": {
                  "name": "themes",
                  "type": "string[]): Promise<ThemeResonanceAnalysis>",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number): Promise<{",
                  "optional": false
                },
                "resolvedForeshadowing": {
                  "name": "resolvedForeshadowing",
                  "type": "ForeshadowingElement[]",
                  "optional": false
                },
                "generatedCount": {
                  "name": "generatedCount",
                  "type": "number",
                  "optional": false
                },
                "totalActive": {
                  "name": "totalActive",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 26
            },
            "system": "analysis",
            "module": "analysis/services/theme"
          }
        ],
        "IThemeAnalysisServiceFactory": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\theme\\interfaces.ts",
            "definition": {
              "name": "IThemeAnalysisServiceFactory",
              "body": "/**\r\n   * テーマ分析サービスのインスタンスを作成\r\n   * @returns テーマ分析サービスのインスタンス\r\n   */\r\n  createThemeAnalysisService(): IThemeAnalysisService;",
              "properties": {},
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 146
            },
            "system": "analysis",
            "module": "analysis/services/theme"
          }
        ],
        "IMemoryManager": [
          {
            "type": "interface",
            "file": "lib\\analysis\\services\\theme\\interfaces.ts",
            "definition": {
              "name": "IMemoryManager",
              "body": "/**\r\n   * 長期記憶を取得\r\n   * @returns 長期記憶へのアクセスオブジェクト\r\n   */\r\n  getLongTermMemory(): any;\r\n\r\n  /**\r\n   * 物語の状態を取得\r\n   * @param chapterNumber 章番号\r\n   * @returns 物語の状態オブジェクト\r\n   */\r\n  getNarrativeState(chapterNumber: number): Promise<any>;\r\n\r\n  /**\r\n   * 最近の章のメモリを取得\r\n   * @param startChapter 開始章番号\r\n   * @param count 取得する章数\r\n   * @returns 章のメモリ配列\r\n   */\r\n  getRecentChapterMemories(startChapter: number, count: number): Promise<any[]>;\r\n\r\n  /**\r\n   * 現在のアークを取得\r\n   * @param chapterNumber 章番号\r\n   * @returns 現在のアーク情報\r\n   */\r\n  getCurrentArc(chapterNumber: number): Promise<any>;\r\n\r\n  /**\r\n   * 伏線状態を更新\r\n   * @param resolvedForeshadowing 解決された伏線の配列\r\n   * @param chapterNumber 章番号\r\n   * @returns 更新完了後に解決するPromise\r\n   */\r\n  updateForeshadowingStatus(resolvedForeshadowing: any[], chapterNumber: number): Promise<void>;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number): Promise<void>",
                  "optional": false
                },
                "startChapter": {
                  "name": "startChapter",
                  "type": "number",
                  "optional": false
                },
                "count": {
                  "name": "count",
                  "type": "number): Promise<any[]>",
                  "optional": false
                },
                "resolvedForeshadowing": {
                  "name": "resolvedForeshadowing",
                  "type": "any[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 158
            },
            "system": "analysis",
            "module": "analysis/services/theme"
          }
        ]
      },
      "characters": {
        "ICharacterRepository": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\interfaces.ts",
            "definition": {
              "name": "ICharacterRepository",
              "body": "/**\r\n     * IDによるキャラクター取得\r\n     * @param id キャラクターID\r\n     * @returns キャラクターオブジェクトまたはnull\r\n     */\r\n    getCharacterById(id: string): Promise<Character | null>;\r\n  \r\n    /**\r\n     * 名前によるキャラクター取得\r\n     * @param name キャラクター名\r\n     * @returns キャラクターオブジェクトまたはnull\r\n     */\r\n    getCharacterByName(name: string): Promise<Character | null>;\r\n  \r\n    /**\r\n     * すべてのキャラクター取得\r\n     * @returns キャラクターの配列\r\n     */\r\n    getAllCharacters(): Promise<Character[]>;\r\n  \r\n    /**\r\n     * キャラクターの保存\r\n     * @param character 保存するキャラクター\r\n     */\r\n    saveCharacter(character: Character): Promise<void>;\r\n  \r\n    /**\r\n     * キャラクターの更新\r\n     * @param id キャラクターID\r\n     * @param updates 更新データ\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    updateCharacter(id: string, updates: Partial<CharacterData>): Promise<Character>;\r\n  \r\n    /**\r\n     * キャラクター状態の保存\r\n     * @param id キャラクターID\r\n     * @param state 保存する状態\r\n     */\r\n    saveCharacterState(id: string, state: CharacterState): Promise<void>;\r\n  \r\n    /**\r\n     * キャラクタープロパティの部分更新\r\n     * @param id キャラクターID\r\n     * @param path プロパティパス（ドット区切り）\r\n     * @param value 新しい値\r\n     */\r\n    updateCharacterProperty(id: string, path: string, value: any): Promise<void>;\r\n  \r\n    /**\r\n     * 特定のタイプのキャラクターのみ取得\r\n     * @param type キャラクタータイプ\r\n     * @returns 指定タイプのキャラクター配列\r\n     */\r\n    getCharactersByType(type: CharacterType): Promise<Character[]>;\r\n  \r\n    /**\r\n     * アクティブなキャラクターのみ取得\r\n     * @returns アクティブなキャラクターの配列\r\n     */\r\n    getActiveCharacters(): Promise<Character[]>;",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string): Promise<Character | null>",
                  "optional": false
                },
                "character": {
                  "name": "character",
                  "type": "Character): Promise<void>",
                  "optional": false
                },
                "updates": {
                  "name": "updates",
                  "type": "Partial<CharacterData>): Promise<Character>",
                  "optional": false
                },
                "state": {
                  "name": "state",
                  "type": "CharacterState): Promise<void>",
                  "optional": false
                },
                "path": {
                  "name": "path",
                  "type": "string",
                  "optional": false
                },
                "value": {
                  "name": "value",
                  "type": "any): Promise<void>",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "CharacterType): Promise<Character[]>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 35
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "IRelationshipRepository": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\interfaces.ts",
            "definition": {
              "name": "IRelationshipRepository",
              "body": "/**\r\n     * 2キャラクター間の関係性取得\r\n     * @param char1Id 1人目のキャラクターID\r\n     * @param char2Id 2人目のキャラクターID\r\n     * @returns 関係性オブジェクトまたはnull\r\n     */\r\n    getRelationship(char1Id: string, char2Id: string): Promise<Relationship | null>;\r\n  \r\n    /**\r\n     * 関係性の保存\r\n     * @param char1Id 1人目のキャラクターID\r\n     * @param char2Id 2人目のキャラクターID\r\n     * @param relationship 保存する関係性\r\n     */\r\n    saveRelationship(char1Id: string, char2Id: string, relationship: Relationship): Promise<void>;\r\n  \r\n    /**\r\n     * すべての関係性データ取得\r\n     * @returns 関係性データの配列\r\n     */\r\n    getAllRelationships(): Promise<Relationship[]>;\r\n  \r\n    /**\r\n     * キャラクターの全関係性取得\r\n     * @param characterId キャラクターID\r\n     * @returns そのキャラクターが関わる全関係性\r\n     */\r\n    getCharacterRelationships(characterId: string): Promise<RelationshipResponse>;\r\n  \r\n    /**\r\n     * 関係グラフの保存\r\n     * @param graphData 関係グラフデータ\r\n     */\r\n    saveRelationshipGraph(graphData: any): Promise<void>;\r\n  \r\n    /**\r\n     * 関係グラフの取得\r\n     * @returns 関係グラフデータ\r\n     */\r\n    getRelationshipGraph(): Promise<any>;",
              "properties": {
                "char1Id": {
                  "name": "char1Id",
                  "type": "string",
                  "optional": false
                },
                "char2Id": {
                  "name": "char2Id",
                  "type": "string",
                  "optional": false
                },
                "relationship": {
                  "name": "relationship",
                  "type": "Relationship): Promise<void>",
                  "optional": false
                },
                "characterId": {
                  "name": "characterId",
                  "type": "string): Promise<RelationshipResponse>",
                  "optional": false
                },
                "graphData": {
                  "name": "graphData",
                  "type": "any): Promise<void>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 103
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "IParameterRepository": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\interfaces.ts",
            "definition": {
              "name": "IParameterRepository",
              "body": "/**\r\n     * キャラクターパラメータの取得\r\n     * @param characterId キャラクターID\r\n     * @returns パラメータの配列\r\n     */\r\n    getCharacterParameters(characterId: string): Promise<CharacterParameter[]>;\r\n  \r\n    /**\r\n     * キャラクターパラメータの保存\r\n     * @param characterId キャラクターID\r\n     * @param parameters 保存するパラメータ配列\r\n     */\r\n    saveCharacterParameters(characterId: string, parameters: CharacterParameter[]): Promise<void>;\r\n  \r\n    /**\r\n     * パラメータ定義の取得\r\n     * @returns パラメータ定義の配列\r\n     */\r\n    getParameterDefinitions(): Promise<CharacterParameter[]>;\r\n  \r\n    /**\r\n     * パラメータ定義の保存\r\n     * @param definitions 保存するパラメータ定義\r\n     */\r\n    saveParameterDefinitions(definitions: CharacterParameter[]): Promise<void>;\r\n  \r\n    /**\r\n     * 単一パラメータ値の更新\r\n     * @param characterId キャラクターID\r\n     * @param parameterId パラメータID\r\n     * @param value 新しい値\r\n     */\r\n    updateParameterValue(characterId: string, parameterId: string, value: number): Promise<void>;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "parameters": {
                  "name": "parameters",
                  "type": "CharacterParameter[]): Promise<void>",
                  "optional": false
                },
                "definitions": {
                  "name": "definitions",
                  "type": "CharacterParameter[]): Promise<void>",
                  "optional": false
                },
                "parameterId": {
                  "name": "parameterId",
                  "type": "string",
                  "optional": false
                },
                "value": {
                  "name": "value",
                  "type": "number): Promise<void>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 150
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "ISkillRepository": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\interfaces.ts",
            "definition": {
              "name": "ISkillRepository",
              "body": "/**\r\n     * キャラクタースキルの取得\r\n     * @param characterId キャラクターID\r\n     * @returns スキルの配列\r\n     */\r\n    getCharacterSkills(characterId: string): Promise<Skill[]>;\r\n  \r\n    /**\r\n     * キャラクタースキルの保存\r\n     * @param characterId キャラクターID\r\n     * @param skills 保存するスキル配列\r\n     */\r\n    saveCharacterSkills(characterId: string, skills: Skill[]): Promise<void>;\r\n  \r\n    /**\r\n     * スキル定義の取得\r\n     * @returns スキル定義の配列\r\n     */\r\n    getSkillDefinitions(): Promise<Skill[]>;\r\n  \r\n    /**\r\n     * スキル定義の保存\r\n     * @param definitions 保存するスキル定義\r\n     */\r\n    saveSkillDefinitions(definitions: Skill[]): Promise<void>;\r\n  \r\n    /**\r\n     * スキルレベルの更新\r\n     * @param characterId キャラクターID\r\n     * @param skillId スキルID\r\n     * @param level 新しいレベル\r\n     */\r\n    updateSkillLevel(characterId: string, skillId: string, level: number): Promise<void>;\r\n  \r\n    /**\r\n     * スキル習熟度の更新\r\n     * @param characterId キャラクターID\r\n     * @param skillId スキルID\r\n     * @param proficiency 新しい習熟度\r\n     */\r\n    updateSkillProficiency(characterId: string, skillId: string, proficiency: number): Promise<void>;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "skills": {
                  "name": "skills",
                  "type": "Skill[]): Promise<void>",
                  "optional": false
                },
                "definitions": {
                  "name": "definitions",
                  "type": "Skill[]): Promise<void>",
                  "optional": false
                },
                "skillId": {
                  "name": "skillId",
                  "type": "string",
                  "optional": false
                },
                "level": {
                  "name": "level",
                  "type": "number): Promise<void>",
                  "optional": false
                },
                "proficiency": {
                  "name": "proficiency",
                  "type": "number): Promise<void>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 190
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "IGrowthPlanRepository": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\interfaces.ts",
            "definition": {
              "name": "IGrowthPlanRepository",
              "body": "/**\r\n     * 成長計画の取得\r\n     * @param id 成長計画ID\r\n     * @returns 成長計画\r\n     */\r\n    getGrowthPlanById(id: string): Promise<GrowthPlan | null>;\r\n  \r\n    /**\r\n     * キャラクターの成長計画取得\r\n     * @param characterId キャラクターID\r\n     * @returns 成長計画の配列\r\n     */\r\n    getGrowthPlansByCharacterId(characterId: string): Promise<GrowthPlan[]>;\r\n  \r\n    /**\r\n     * 成長計画の保存\r\n     * @param plan 保存する成長計画\r\n     */\r\n    saveGrowthPlan(plan: GrowthPlan): Promise<void>;\r\n  \r\n    /**\r\n     * 成長計画の更新\r\n     * @param id 成長計画ID\r\n     * @param updates 更新データ\r\n     */\r\n    updateGrowthPlan(id: string, updates: Partial<GrowthPlan>): Promise<void>;\r\n  \r\n    /**\r\n     * 成長計画の削除\r\n     * @param id 成長計画ID\r\n     */\r\n    deleteGrowthPlan(id: string): Promise<void>;",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string): Promise<void>",
                  "optional": false
                },
                "characterId": {
                  "name": "characterId",
                  "type": "string): Promise<GrowthPlan[]>",
                  "optional": false
                },
                "plan": {
                  "name": "plan",
                  "type": "GrowthPlan): Promise<void>",
                  "optional": false
                },
                "updates": {
                  "name": "updates",
                  "type": "Partial<GrowthPlan>): Promise<void>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 238
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "ICharacterService": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\interfaces.ts",
            "definition": {
              "name": "ICharacterService",
              "body": "/**\r\n     * キャラクター作成\r\n     * @param data キャラクターデータ\r\n     * @returns 作成されたキャラクター\r\n     */\r\n    createCharacter(data: CharacterData): Promise<Character>;\r\n  \r\n    /**\r\n     * キャラクター取得\r\n     * @param id キャラクターID\r\n     * @returns キャラクターオブジェクトまたはnull\r\n     */\r\n    getCharacter(id: string): Promise<Character | null>;\r\n  \r\n    /**\r\n     * キャラクター更新\r\n     * @param id キャラクターID\r\n     * @param updates 更新データ\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    updateCharacter(id: string, updates: Partial<CharacterData>): Promise<Character>;\r\n  \r\n    /**\r\n     * キャラクター登場記録\r\n     * @param id キャラクターID\r\n     * @param chapterNumber 章番号\r\n     * @param summary 概要\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    recordAppearance(id: string, chapterNumber: number, summary: string): Promise<Character>;\r\n  \r\n    /**\r\n     * インタラクション記録\r\n     * @param id キャラクターID\r\n     * @param targetId 対象キャラクターID\r\n     * @param type インタラクションタイプ\r\n     * @param data 追加データ\r\n     */\r\n    recordInteraction(id: string, targetId: string, type: string, data: any): Promise<void>;\r\n  \r\n    /**\r\n     * キャラクター発展処理\r\n     * @param id キャラクターID\r\n     * @param events 章イベント配列\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    processCharacterDevelopment(id: string, events: ChapterEvent[]): Promise<Character>;\r\n  \r\n    /**\r\n     * キャラクター設定の検証\r\n     * @param character キャラクター\r\n     * @returns 検証結果\r\n     */\r\n    validateCharacter(character: Character): Promise<ValidationResult>;\r\n  \r\n    /**\r\n     * キャラクター状態の更新\r\n     * @param id キャラクターID\r\n     * @param state 新しい状態\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    updateCharacterState(id: string, state: Partial<CharacterState>): Promise<Character>;",
              "properties": {
                "data": {
                  "name": "data",
                  "type": "any): Promise<void>",
                  "optional": false
                },
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "updates": {
                  "name": "updates",
                  "type": "Partial<CharacterData>): Promise<Character>",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "summary": {
                  "name": "summary",
                  "type": "string): Promise<Character>",
                  "optional": false
                },
                "targetId": {
                  "name": "targetId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "events": {
                  "name": "events",
                  "type": "ChapterEvent[]): Promise<Character>",
                  "optional": false
                },
                "character": {
                  "name": "character",
                  "type": "Character): Promise<ValidationResult>",
                  "optional": false
                },
                "state": {
                  "name": "state",
                  "type": "Partial<CharacterState>): Promise<Character>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 277
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "IDetectionService": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\interfaces.ts",
            "definition": {
              "name": "IDetectionService",
              "body": "/**\r\n     * コンテンツ内のキャラクター検出\r\n     * @param content 検索対象のコンテンツ\r\n     * @returns 検出されたキャラクターの配列\r\n     */\r\n    detectCharactersInContent(content: string): Promise<Character[]>;\r\n  \r\n    /**\r\n     * キャラクターの台詞抽出\r\n     * @param character キャラクター\r\n     * @param content 抽出対象のコンテンツ\r\n     * @returns 抽出された台詞の配列\r\n     */\r\n    extractCharacterDialog(character: Character, content: string): Promise<string[]>;\r\n  \r\n    /**\r\n     * キャラクターへの言及検出\r\n     * @param character キャラクター\r\n     * @param content 検出対象のコンテンツ\r\n     * @returns 言及テキストの配列\r\n     */\r\n    detectCharacterMentions(character: Character, content: string): Promise<string[]>;\r\n  \r\n    /**\r\n     * キャラクター登場確認\r\n     * @param characterId キャラクターID\r\n     * @param content 確認対象のコンテンツ\r\n     * @returns 登場しているかどうか\r\n     */\r\n    verifyCharacterAppearance(characterId: string, content: string): Promise<boolean>;\r\n  \r\n    /**\r\n     * コンテンツ内のインタラクション検出\r\n     * @param content 検出対象のコンテンツ\r\n     * @returns 検出されたインタラクション情報\r\n     */\r\n    detectInteractions(content: string): Promise<any[]>;",
              "properties": {
                "content": {
                  "name": "content",
                  "type": "string): Promise<any[]>",
                  "optional": false
                },
                "character": {
                  "name": "character",
                  "type": "Character",
                  "optional": false
                },
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 346
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "IEvolutionService": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\interfaces.ts",
            "definition": {
              "name": "IEvolutionService",
              "body": "/**\r\n     * キャラクター発展処理\r\n     * @param character キャラクター\r\n     * @param events 章イベント配列\r\n     * @returns キャラクター発展情報\r\n     */\r\n    processCharacterDevelopment(character: Character, events: ChapterEvent[]): Promise<CharacterDevelopment>;\r\n  \r\n    /**\r\n     * 発展経路生成\r\n     * @param character キャラクター\r\n     * @returns 発展経路\r\n     */\r\n    generateDevelopmentPath(character: Character): Promise<DevelopmentPath>;\r\n  \r\n    /**\r\n     * 成長計画適用\r\n     * @param characterId キャラクターID\r\n     * @param chapterNumber 章番号\r\n     * @returns 成長結果\r\n     */\r\n    applyGrowthPlan(characterId: string, chapterNumber: number): Promise<GrowthResult>;\r\n  \r\n    /**\r\n     * 発展段階評価\r\n     * @param currentStage 現在の段階\r\n     * @param development 発展情報\r\n     * @param type 評価タイプ\r\n     * @returns 新しい発展段階\r\n     */\r\n    evaluateDevelopmentStage(currentStage: number, development: CharacterDevelopment, type: string): number;\r\n  \r\n    /**\r\n     * 次のマイルストーン推定\r\n     * @param characterId キャラクターID\r\n     * @returns 次のマイルストーン情報\r\n     */\r\n    predictNextMilestone(characterId: string): Promise<any>;",
              "properties": {
                "character": {
                  "name": "character",
                  "type": "Character): Promise<DevelopmentPath>",
                  "optional": false
                },
                "events": {
                  "name": "events",
                  "type": "ChapterEvent[]): Promise<CharacterDevelopment>",
                  "optional": false
                },
                "characterId": {
                  "name": "characterId",
                  "type": "string): Promise<any>",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number): Promise<GrowthResult>",
                  "optional": false
                },
                "currentStage": {
                  "name": "currentStage",
                  "type": "number",
                  "optional": false
                },
                "development": {
                  "name": "development",
                  "type": "CharacterDevelopment",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string): number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 390
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "IPsychologyService": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\interfaces.ts",
            "definition": {
              "name": "IPsychologyService",
              "body": "/**\r\n     * キャラクター心理分析\r\n     * @param character キャラクター\r\n     * @param recentEvents 最近のイベント配列\r\n     * @returns キャラクター心理情報\r\n     */\r\n    analyzeCharacterPsychology(character: Character, recentEvents: any[]): Promise<CharacterPsychology>;\r\n  \r\n    /**\r\n     * 関係性心理分析\r\n     * @param characters キャラクター配列\r\n     * @returns キャラクター間の心理的態度マップ\r\n     */\r\n    analyzeRelationshipPsychology(characters: Character[]): Promise<Map<string, Map<string, any>>>;\r\n  \r\n    /**\r\n     * 行動予測\r\n     * @param character キャラクター\r\n     * @param psychology 心理情報\r\n     * @param situations 状況配列\r\n     * @returns 予測される行動情報\r\n     */\r\n    predictBehaviors(character: Character, psychology: CharacterPsychology, situations: string[]): Promise<any>;\r\n  \r\n    /**\r\n     * 感情変化のシミュレーション\r\n     * @param characterId キャラクターID\r\n     * @param event イベント情報\r\n     * @returns 感情変化予測\r\n     */\r\n    simulateEmotionalResponse(characterId: string, event: any): Promise<any>;",
              "properties": {
                "character": {
                  "name": "character",
                  "type": "Character",
                  "optional": false
                },
                "recentEvents": {
                  "name": "recentEvents",
                  "type": "any[]): Promise<CharacterPsychology>",
                  "optional": false
                },
                "characters": {
                  "name": "characters",
                  "type": "Character[]): Promise<Map<string",
                  "optional": false
                },
                "psychology": {
                  "name": "psychology",
                  "type": "CharacterPsychology",
                  "optional": false
                },
                "situations": {
                  "name": "situations",
                  "type": "string[]): Promise<any>",
                  "optional": false
                },
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "event": {
                  "name": "event",
                  "type": "any): Promise<any>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 435
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "IRelationshipService": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\interfaces.ts",
            "definition": {
              "name": "IRelationshipService",
              "body": "/**\r\n     * 関係性更新\r\n     * @param char1Id 1人目のキャラクターID\r\n     * @param char2Id 2人目のキャラクターID\r\n     * @param type 関係性タイプ\r\n     * @param strength 関係性の強さ\r\n     */\r\n    updateRelationship(char1Id: string, char2Id: string, type: string, strength: number): Promise<void>;\r\n  \r\n    /**\r\n     * 関連キャラクター取得\r\n     * @param characterId キャラクターID\r\n     * @returns 関連するキャラクターIDの配列\r\n     */\r\n    getConnectedCharacters(characterId: string): Promise<string[]>;\r\n  \r\n    /**\r\n     * キャラクター関係性取得\r\n     * @param characterId キャラクターID\r\n     * @returns 関係性の配列\r\n     */\r\n    getCharacterRelationships(characterId: string): Promise<RelationshipResponse>;\r\n  \r\n    /**\r\n     * 関係性動態分析\r\n     * @returns 関係性分析結果\r\n     */\r\n    analyzeRelationshipDynamics(): Promise<RelationshipAnalysis>;\r\n  \r\n    /**\r\n     * 関係性クラスター検出\r\n     * @returns キャラクタークラスターの配列\r\n     */\r\n    detectRelationshipClusters(): Promise<CharacterCluster[]>;\r\n  \r\n    /**\r\n     * 対立関係検出\r\n     * @returns 対立関係情報の配列\r\n     */\r\n    detectTensions(): Promise<any[]>;",
              "properties": {
                "char1Id": {
                  "name": "char1Id",
                  "type": "string",
                  "optional": false
                },
                "char2Id": {
                  "name": "char2Id",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "strength": {
                  "name": "strength",
                  "type": "number): Promise<void>",
                  "optional": false
                },
                "characterId": {
                  "name": "characterId",
                  "type": "string): Promise<RelationshipResponse>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 473
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "IParameterService": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\interfaces.ts",
            "definition": {
              "name": "IParameterService",
              "body": "/**\r\n     * キャラクターパラメータ初期化\r\n     * @param characterId キャラクターID\r\n     * @param defaultValue デフォルト値\r\n     * @returns 初期化されたパラメータ配列\r\n     */\r\n    initializeCharacterParameters(characterId: string, defaultValue: number): Promise<CharacterParameter[]>;\r\n  \r\n    /**\r\n     * キャラクターパラメータ取得\r\n     * @param characterId キャラクターID\r\n     * @returns パラメータの配列\r\n     */\r\n    getCharacterParameters(characterId: string): Promise<CharacterParameter[]>;\r\n  \r\n    /**\r\n     * パラメータ値設定\r\n     * @param characterId キャラクターID\r\n     * @param parameterId パラメータID\r\n     * @param value 新しい値\r\n     * @returns 更新されたパラメータまたはnull\r\n     */\r\n    setParameterValue(characterId: string, parameterId: string, value: number): Promise<CharacterParameter | null>;\r\n  \r\n    /**\r\n     * パラメータ修正\r\n     * @param characterId キャラクターID\r\n     * @param parameterId パラメータID\r\n     * @param delta 変化量\r\n     * @returns 更新されたパラメータまたはnull\r\n     */\r\n    modifyParameter(characterId: string, parameterId: string, delta: number): Promise<CharacterParameter | null>;\r\n  \r\n    /**\r\n     * カテゴリ別パラメータ取得\r\n     * @param characterId キャラクターID\r\n     * @param category カテゴリ\r\n     * @returns パラメータの配列\r\n     */\r\n    getParametersByCategory(characterId: string, category: string): Promise<CharacterParameter[]>;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "defaultValue": {
                  "name": "defaultValue",
                  "type": "number): Promise<CharacterParameter[]>",
                  "optional": false
                },
                "parameterId": {
                  "name": "parameterId",
                  "type": "string",
                  "optional": false
                },
                "value": {
                  "name": "value",
                  "type": "number): Promise<CharacterParameter | null>",
                  "optional": false
                },
                "delta": {
                  "name": "delta",
                  "type": "number): Promise<CharacterParameter | null>",
                  "optional": false
                },
                "category": {
                  "name": "category",
                  "type": "string): Promise<CharacterParameter[]>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 520
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "ISkillService": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\interfaces.ts",
            "definition": {
              "name": "ISkillService",
              "body": "/**\r\n     * キャラクタースキル取得\r\n     * @param characterId キャラクターID\r\n     * @returns スキルの配列\r\n     */\r\n    getCharacterSkills(characterId: string): Promise<Skill[]>;\r\n  \r\n    /**\r\n     * スキル取得\r\n     * @param characterId キャラクターID\r\n     * @param skillId スキルID\r\n     * @returns スキルまたはnull\r\n     */\r\n    acquireSkill(characterId: string, skillId: string, forced?: boolean): Promise<boolean>;\r\n  \r\n    /**\r\n     * スキルレベル更新\r\n     * @param characterId キャラクターID\r\n     * @param skillId スキルID\r\n     * @param newLevel 新しいレベル\r\n     * @returns 成功したかどうか\r\n     */\r\n    updateSkillLevel(characterId: string, skillId: string, newLevel: number): Promise<boolean>;\r\n  \r\n    /**\r\n     * 習熟度増加\r\n     * @param characterId キャラクターID\r\n     * @param skillId スキルID\r\n     * @param amount 増加量\r\n     * @returns 成功したかどうか\r\n     */\r\n    increaseProficiency(characterId: string, skillId: string, amount: number): Promise<boolean>;\r\n  \r\n    /**\r\n     * スキル習得要件確認\r\n     * @param characterId キャラクターID\r\n     * @param skillId スキルID\r\n     * @returns 要件を満たすかどうか\r\n     */\r\n    checkSkillRequirements(characterId: string, skillId: string): Promise<boolean>;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "skillId": {
                  "name": "skillId",
                  "type": "string): Promise<boolean>",
                  "optional": false
                },
                "forced": {
                  "name": "forced",
                  "type": "boolean): Promise<boolean>",
                  "optional": true
                },
                "newLevel": {
                  "name": "newLevel",
                  "type": "number): Promise<boolean>",
                  "optional": false
                },
                "amount": {
                  "name": "amount",
                  "type": "number): Promise<boolean>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 567
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "ICharacterAnalyzer": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\interfaces.ts",
            "definition": {
              "name": "ICharacterAnalyzer",
              "body": "/**\r\n     * 変化検出\r\n     * @param baseState 基本状態\r\n     * @param currentState 現在状態\r\n     * @returns 検出された差分\r\n     */\r\n    detectChanges(baseState: any, currentState: any): CharacterDiff;\r\n  \r\n    /**\r\n     * 変化分類\r\n     * @param characterDiff キャラクター差分\r\n     * @param plotContext プロット文脈\r\n     * @returns 分類された差分\r\n     */\r\n    classifyChanges(characterDiff: CharacterDiff, plotContext?: PlotContext): Promise<CharacterDiff>;\r\n  \r\n    /**\r\n     * アクション検証\r\n     * @param character キャラクター\r\n     * @param proposedAction 提案されたアクション\r\n     * @param context 文脈\r\n     * @returns 検証結果\r\n     */\r\n    validateAction(character: Character, proposedAction: string, context: string): Promise<ValidationResult>;\r\n  \r\n    /**\r\n     * 履歴との比較\r\n     * @param character キャラクター\r\n     * @param proposedAction 提案されたアクション\r\n     * @returns 一貫性スコア\r\n     */\r\n    compareWithHistory(character: Character, proposedAction: string): Promise<number>;",
              "properties": {
                "baseState": {
                  "name": "baseState",
                  "type": "any",
                  "optional": false
                },
                "currentState": {
                  "name": "currentState",
                  "type": "any): CharacterDiff",
                  "optional": false
                },
                "characterDiff": {
                  "name": "characterDiff",
                  "type": "CharacterDiff",
                  "optional": false
                },
                "plotContext": {
                  "name": "plotContext",
                  "type": "PlotContext): Promise<CharacterDiff>",
                  "optional": true
                },
                "character": {
                  "name": "character",
                  "type": "Character",
                  "optional": false
                },
                "proposedAction": {
                  "name": "proposedAction",
                  "type": "string): Promise<number>",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "string): Promise<ValidationResult>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 614
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "ITimingAnalyzer": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\interfaces.ts",
            "definition": {
              "name": "ITimingAnalyzer",
              "body": "/**\r\n     * タイミング推奨取得\r\n     * @param character キャラクター\r\n     * @param storyContext ストーリー文脈\r\n     * @returns タイミング推奨\r\n     */\r\n    getTimingRecommendation(character: Character, storyContext: StoryContext): Promise<TimingRecommendation>;\r\n  \r\n    /**\r\n     * タイミング要因分析\r\n     * @param character キャラクター\r\n     * @param context 文脈\r\n     * @returns タイミング分析結果\r\n     */\r\n    analyzeTimingFactors(character: Character, context: StoryContext): Promise<any>;",
              "properties": {
                "character": {
                  "name": "character",
                  "type": "Character",
                  "optional": false
                },
                "storyContext": {
                  "name": "storyContext",
                  "type": "StoryContext): Promise<TimingRecommendation>",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "StoryContext): Promise<any>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 653
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "IRelationshipAnalyzer": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\interfaces.ts",
            "definition": {
              "name": "IRelationshipAnalyzer",
              "body": "/**\r\n     * クラスター検出\r\n     * @returns キャラクタークラスターの配列\r\n     */\r\n    detectClusters(): Promise<CharacterCluster[]>;\r\n  \r\n    /**\r\n     * 対立検出\r\n     * @returns 関係性対立の配列\r\n     */\r\n    detectTensions(): Promise<any[]>;\r\n  \r\n    /**\r\n     * 関係性発展追跡\r\n     * @returns 発展情報\r\n     */\r\n    trackRelationshipDevelopments(): Promise<any[]>;\r\n  \r\n    /**\r\n     * 視覚化データ生成\r\n     * @returns 視覚化データ\r\n     */\r\n    generateVisualizationData(): Promise<any>;",
              "properties": {},
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 675
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "ICharacterGenerator": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\interfaces.ts",
            "definition": {
              "name": "ICharacterGenerator",
              "body": "/**\r\n     * テンプレートからの生成\r\n     * @param template キャラクターテンプレート\r\n     * @param params パラメータ\r\n     * @returns 動的キャラクター\r\n     */\r\n    generateFromTemplate(template: CharacterTemplate, params: any): Promise<DynamicCharacter>;\r\n  \r\n    /**\r\n     * バックストーリー生成\r\n     * @param character 動的キャラクター\r\n     * @param worldContext 世界観文脈\r\n     * @returns バックストーリーテキスト\r\n     */\r\n    generateBackstory(character: DynamicCharacter, worldContext: any): Promise<string>;\r\n  \r\n    /**\r\n     * 関係性作成\r\n     * @param character 動的キャラクター\r\n     * @param existingCharacters 既存キャラクター配列\r\n     * @returns 生成された関係性の配列\r\n     */\r\n    createRelationships(character: DynamicCharacter, existingCharacters: Character[]): Promise<Relationship[]>;",
              "properties": {
                "template": {
                  "name": "template",
                  "type": "CharacterTemplate",
                  "optional": false
                },
                "params": {
                  "name": "params",
                  "type": "any): Promise<DynamicCharacter>",
                  "optional": false
                },
                "character": {
                  "name": "character",
                  "type": "DynamicCharacter",
                  "optional": false
                },
                "worldContext": {
                  "name": "worldContext",
                  "type": "any): Promise<string>",
                  "optional": false
                },
                "existingCharacters": {
                  "name": "existingCharacters",
                  "type": "Character[]): Promise<Relationship[]>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 705
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "ITemplateProvider": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\interfaces.ts",
            "definition": {
              "name": "ITemplateProvider",
              "body": "/**\r\n     * テンプレート取得\r\n     * @param id テンプレートID\r\n     * @returns キャラクターテンプレート\r\n     */\r\n    getTemplateById(id: string): Promise<CharacterTemplate>;\r\n  \r\n    /**\r\n     * テンプレート結合\r\n     * @param archetype アーキタイプ\r\n     * @param role 役割\r\n     * @returns 結合されたテンプレート\r\n     */\r\n    combineTemplates(archetype: string, role: string): Promise<CharacterTemplate>;\r\n  \r\n    /**\r\n     * すべてのテンプレート取得\r\n     * @returns テンプレートの配列\r\n     */\r\n    getAllTemplates(): Promise<CharacterTemplate[]>;",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string): Promise<CharacterTemplate>",
                  "optional": false
                },
                "archetype": {
                  "name": "archetype",
                  "type": "string",
                  "optional": false
                },
                "role": {
                  "name": "role",
                  "type": "string): Promise<CharacterTemplate>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 735
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "IEventBus": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\interfaces.ts",
            "definition": {
              "name": "IEventBus",
              "body": "/**\r\n     * イベント発行\r\n     * @param eventType イベントタイプ\r\n     * @param data イベントデータ\r\n     */\r\n    publish(eventType: string, data: any): void;\r\n  \r\n    /**\r\n     * イベント購読\r\n     * @param eventType イベントタイプ\r\n     * @param callback コールバック関数\r\n     * @returns 購読解除用の関数\r\n     */\r\n    subscribe(eventType: string, callback: (data: any) => void): EventSubscription;\r\n  \r\n    /**\r\n     * 購読解除\r\n     * @param subscription 購読情報\r\n     */\r\n    unsubscribe(subscription: EventSubscription): void;",
              "properties": {
                "eventType": {
                  "name": "eventType",
                  "type": "string",
                  "optional": false
                },
                "data": {
                  "name": "data",
                  "type": "any): void",
                  "optional": false
                },
                "callback": {
                  "name": "callback",
                  "type": "(data: any) => void): EventSubscription",
                  "optional": false
                },
                "subscription": {
                  "name": "subscription",
                  "type": "EventSubscription): void",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 762
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "ICharacterManager": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\interfaces.ts",
            "definition": {
              "name": "ICharacterManager",
              "body": "/**\r\n     * キャラクター作成\r\n     * @param data キャラクターデータ\r\n     * @returns 作成されたキャラクター\r\n     */\r\n    createCharacter(data: CharacterData): Promise<Character>;\r\n  \r\n    /**\r\n     * キャラクター取得\r\n     * @param id キャラクターID\r\n     * @returns キャラクター\r\n     */\r\n    getCharacter(id: string): Promise<Character | null>;\r\n  \r\n    /**\r\n     * キャラクター更新\r\n     * @param id キャラクターID\r\n     * @param data 更新データ\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    updateCharacter(id: string, data: Partial<CharacterData>): Promise<Character>;\r\n  \r\n    /**\r\n     * すべてのキャラクター取得\r\n     * @returns キャラクターの配列\r\n     */\r\n    getAllCharacters(): Promise<Character[]>;\r\n  \r\n    /**\r\n     * コンテンツ内のキャラクター検出\r\n     * @param content 検出対象のコンテンツ\r\n     * @returns 検出されたキャラクターの配列\r\n     */\r\n    detectCharactersInContent(content: string): Promise<Character[]>;\r\n  \r\n    /**\r\n     * キャラクター発展処理\r\n     * @param id キャラクターID\r\n     * @param events 章イベント配列\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    processCharacterDevelopment(id: string, events: ChapterEvent[]): Promise<Character>;\r\n  \r\n    /**\r\n     * 関係性更新\r\n     * @param char1Id 1人目のキャラクターID\r\n     * @param char2Id 2人目のキャラクターID\r\n     * @param type 関係性タイプ\r\n     * @param strength 関係性の強さ\r\n     */\r\n    updateRelationship(char1Id: string, char2Id: string, type: string, strength: number): Promise<void>;\r\n  \r\n    // /**\r\n    //  * キャラクター分析\r\n    //  * @param id キャラクターID\r\n    //  * @returns 分析結果\r\n    //  */\r\n    // analyzeCharacter(id: string): Promise<any>;",
              "properties": {
                "data": {
                  "name": "data",
                  "type": "Partial<CharacterData>): Promise<Character>",
                  "optional": false
                },
                "id": {
                  "name": "id",
                  "type": "string): Promise<any>",
                  "optional": false
                },
                "content": {
                  "name": "content",
                  "type": "string): Promise<Character[]>",
                  "optional": false
                },
                "events": {
                  "name": "events",
                  "type": "ChapterEvent[]): Promise<Character>",
                  "optional": false
                },
                "char1Id": {
                  "name": "char1Id",
                  "type": "string",
                  "optional": false
                },
                "char2Id": {
                  "name": "char2Id",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "strength": {
                  "name": "strength",
                  "type": "number): Promise<void>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 789
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "PersonalityTraits": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "PersonalityTraits",
              "body": "/** 特性のリスト（例: \"勇敢\", \"慎重\", \"明るい\"など） */\r\n    traits: string[];\r\n\r\n    /** 言葉使いや話し方のパターン */\r\n    speechPatterns?: string[];\r\n\r\n    /** 特徴的な癖や習慣 */\r\n    quirks?: string[];\r\n\r\n    /** 重要視する価値観 */\r\n    values?: string[];\r\n\r\n    /** 動的な性格特性（発展処理で使用） */\r\n    [key: string]: any;",
              "properties": {
                "traits": {
                  "name": "traits",
                  "type": "string[]",
                  "optional": false
                },
                "speechPatterns": {
                  "name": "speechPatterns",
                  "type": "string[]",
                  "optional": true
                },
                "quirks": {
                  "name": "quirks",
                  "type": "string[]",
                  "optional": true
                },
                "values": {
                  "name": "values",
                  "type": "string[]",
                  "optional": true
                },
                "key": {
                  "name": "key",
                  "type": "string]: any",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 36
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "Appearance": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "Appearance",
              "body": "/** 物理的特徴の説明 */\r\n    physicalDescription: string;\r\n\r\n    /** 特徴的な衣装や装飾品 */\r\n    clothing: string;\r\n\r\n    /** 際立った特徴 */\r\n    distinguishingFeatures: string[];",
              "properties": {
                "physicalDescription": {
                  "name": "physicalDescription",
                  "type": "string",
                  "optional": false
                },
                "clothing": {
                  "name": "clothing",
                  "type": "string",
                  "optional": false
                },
                "distinguishingFeatures": {
                  "name": "distinguishingFeatures",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 56
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "Backstory": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "Backstory",
              "body": "/** 背景の概要 */\r\n    summary: string;\r\n\r\n    /** 重要な過去の出来事 */\r\n    significantEvents: string[];\r\n\r\n    /** 過去のトラウマや影響を受けた出来事 */\r\n    trauma?: string[];\r\n\r\n    /** 生い立ちに関する情報 */\r\n    origin?: string;\r\n\r\n    /** 詳細な歴史 (昇格時に生成) */\r\n    detailedHistory?: string;\r\n\r\n    /** 動機 (昇格時に生成) */\r\n    motivations?: string;\r\n\r\n    /** 秘密 (昇格時に生成) */\r\n    secrets?: string;",
              "properties": {
                "summary": {
                  "name": "summary",
                  "type": "string",
                  "optional": false
                },
                "significantEvents": {
                  "name": "significantEvents",
                  "type": "string[]",
                  "optional": false
                },
                "trauma": {
                  "name": "trauma",
                  "type": "string[]",
                  "optional": true
                },
                "origin": {
                  "name": "origin",
                  "type": "string",
                  "optional": true
                },
                "detailedHistory": {
                  "name": "detailedHistory",
                  "type": "string",
                  "optional": true
                },
                "motivations": {
                  "name": "motivations",
                  "type": "string",
                  "optional": true
                },
                "secrets": {
                  "name": "secrets",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 70
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "Relationship": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "Relationship",
              "body": "/** 関係のある相手のキャラクターID */\r\n    targetId: string;\r\n\r\n    /** 関係を持つ相手の名前 */\r\n    targetName?: string;\r\n\r\n    /** 関係の種類 */\r\n    type: RelationshipType;\r\n\r\n    /** 関係の強さ（0-1） */\r\n    strength: number;\r\n\r\n    /** 関係の説明 */\r\n    description?: string;\r\n\r\n    /** 最後のインタラクション */\r\n    lastInteraction?: Date;\r\n\r\n    /** 関係の履歴 */\r\n    history?: any[];",
              "properties": {
                "targetId": {
                  "name": "targetId",
                  "type": "string",
                  "optional": false
                },
                "targetName": {
                  "name": "targetName",
                  "type": "string",
                  "optional": true
                },
                "type": {
                  "name": "type",
                  "type": "RelationshipType",
                  "optional": false
                },
                "strength": {
                  "name": "strength",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": true
                },
                "lastInteraction": {
                  "name": "lastInteraction",
                  "type": "Date",
                  "optional": true
                },
                "history": {
                  "name": "history",
                  "type": "any[]",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 96
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "CharacterAppearance": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterAppearance",
              "body": "chapterNumber: number;\r\n    timestamp: Date;\r\n    significance: number;\r\n    summary?: string;\r\n    emotionalImpact?: number;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "Date",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": false
                },
                "summary": {
                  "name": "summary",
                  "type": "string",
                  "optional": true
                },
                "emotionalImpact": {
                  "name": "emotionalImpact",
                  "type": "number",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 122
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "Interaction": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "Interaction",
              "body": "chapterNumber: number;\r\n    targetCharacterId: string;\r\n    type: string;\r\n    description: string;\r\n    impact: number;\r\n    timestamp: Date;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "targetCharacterId": {
                  "name": "targetCharacterId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "Date",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 133
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "DevelopmentMilestone": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "DevelopmentMilestone",
              "body": "stage: number;\r\n    description: string;\r\n    achievedAt?: Date;\r\n    chapterNumber?: number;",
              "properties": {
                "stage": {
                  "name": "stage",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "achievedAt": {
                  "name": "achievedAt",
                  "type": "Date",
                  "optional": true
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 145
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "CharacterHistory": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterHistory",
              "body": "appearances: CharacterAppearance[];\r\n    interactions: Interaction[];\r\n    developmentPath: DevelopmentMilestone[];",
              "properties": {
                "appearances": {
                  "name": "appearances",
                  "type": "CharacterAppearance[]",
                  "optional": false
                },
                "interactions": {
                  "name": "interactions",
                  "type": "Interaction[]",
                  "optional": false
                },
                "developmentPath": {
                  "name": "developmentPath",
                  "type": "DevelopmentMilestone[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 155
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "CharacterState": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterState",
              "body": "isActive: boolean;\r\n    relationships?: Relationship[];\r\n    developmentStage: number;\r\n    lastAppearance: number | null;\r\n    emotionalState: EmotionalState;\r\n    summary?: string;\r\n    significance?: number;\r\n    hasDialogue?: boolean;\r\n    changes?: CharacterChangeInfo[];\r\n    development: string;\r\n    isDeceased?: boolean;              // 死亡状態\r\n    maritalStatus?: string;            // 結婚状態\r\n    spouseId?: string | null;          // 配偶者ID\r\n    parentIds?: string[];              // 親キャラクターID\r\n    childrenIds?: string[];            // 子キャラクターID\r\n    skills?: string[];                 // 習得スキル\r\n    location?: string;                 // 現在地\r\n    lastStateChange?: {                // 最終状態変化\r\n        type: string;\r\n        chapterNumber: number;\r\n        description: string;",
              "properties": {
                "isActive": {
                  "name": "isActive",
                  "type": "boolean",
                  "optional": false
                },
                "relationships": {
                  "name": "relationships",
                  "type": "Relationship[]",
                  "optional": true
                },
                "developmentStage": {
                  "name": "developmentStage",
                  "type": "number",
                  "optional": false
                },
                "lastAppearance": {
                  "name": "lastAppearance",
                  "type": "number | null",
                  "optional": false
                },
                "emotionalState": {
                  "name": "emotionalState",
                  "type": "EmotionalState",
                  "optional": false
                },
                "summary": {
                  "name": "summary",
                  "type": "string",
                  "optional": true
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": true
                },
                "hasDialogue": {
                  "name": "hasDialogue",
                  "type": "boolean",
                  "optional": true
                },
                "changes": {
                  "name": "changes",
                  "type": "CharacterChangeInfo[]",
                  "optional": true
                },
                "development": {
                  "name": "development",
                  "type": "string",
                  "optional": false
                },
                "isDeceased": {
                  "name": "isDeceased",
                  "type": "boolean",
                  "optional": true
                },
                "maritalStatus": {
                  "name": "maritalStatus",
                  "type": "string",
                  "optional": true
                },
                "spouseId": {
                  "name": "spouseId",
                  "type": "string | null",
                  "optional": true
                },
                "parentIds": {
                  "name": "parentIds",
                  "type": "string[]",
                  "optional": true
                },
                "childrenIds": {
                  "name": "childrenIds",
                  "type": "string[]",
                  "optional": true
                },
                "skills": {
                  "name": "skills",
                  "type": "string[]",
                  "optional": true
                },
                "location": {
                  "name": "location",
                  "type": "string",
                  "optional": true
                },
                "lastStateChange": {
                  "name": "lastStateChange",
                  "type": "{                // 最終状態変化",
                  "optional": true
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 164
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "CharacterChangeInfo": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterChangeInfo",
              "body": "attribute: string;\r\n    previousValue: any;\r\n    currentValue: any;\r\n    classification?: {\r\n        type: string;\r\n        scope: string;\r\n        confidence: number;\r\n        explanation: string;\r\n        narrativeSignificance?: number;",
              "properties": {
                "attribute": {
                  "name": "attribute",
                  "type": "string",
                  "optional": false
                },
                "previousValue": {
                  "name": "previousValue",
                  "type": "any",
                  "optional": false
                },
                "currentValue": {
                  "name": "currentValue",
                  "type": "any",
                  "optional": false
                },
                "classification": {
                  "name": "classification",
                  "type": "{",
                  "optional": true
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "scope": {
                  "name": "scope",
                  "type": "string",
                  "optional": false
                },
                "confidence": {
                  "name": "confidence",
                  "type": "number",
                  "optional": false
                },
                "explanation": {
                  "name": "explanation",
                  "type": "string",
                  "optional": false
                },
                "narrativeSignificance": {
                  "name": "narrativeSignificance",
                  "type": "number",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 242
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "PromotionRecord": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "PromotionRecord",
              "body": "fromType: CharacterType;\r\n    toType: CharacterType;\r\n    timestamp: Date;\r\n    reason?: string;",
              "properties": {
                "fromType": {
                  "name": "fromType",
                  "type": "CharacterType",
                  "optional": false
                },
                "toType": {
                  "name": "toType",
                  "type": "CharacterType",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "Date",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 258
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "CharacterMetadata": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterMetadata",
              "body": "createdAt: Date;\r\n    lastUpdated: Date;\r\n    version?: number;\r\n    tags?: string[];\r\n    /** 永続的イベント履歴 */\r\n    persistentEvents?: Array<{\r\n        type: string;\r\n        chapterNumber: number;\r\n        description: string;",
              "properties": {
                "createdAt": {
                  "name": "createdAt",
                  "type": "Date",
                  "optional": false
                },
                "lastUpdated": {
                  "name": "lastUpdated",
                  "type": "Date",
                  "optional": false
                },
                "version": {
                  "name": "version",
                  "type": "number",
                  "optional": true
                },
                "tags": {
                  "name": "tags",
                  "type": "string[]",
                  "optional": true
                },
                "persistentEvents": {
                  "name": "persistentEvents",
                  "type": "Array<{",
                  "optional": true
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 268
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "Skill": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "Skill",
              "body": "id: string;\r\n    name: string;\r\n    description: string;\r\n    level: number;         // 0: 未習得, 1-5: 初級〜伝説級\r\n    requiredParameters: Array<{\r\n        parameterId: string;\r\n        minValue: number;    // このパラメータの最小必要値",
              "properties": {
                "0": {
                  "name": "0",
                  "type": "未習得",
                  "optional": false
                },
                "5": {
                  "name": "5",
                  "type": "初級〜伝説級",
                  "optional": false
                },
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "level": {
                  "name": "level",
                  "type": "number",
                  "optional": false
                },
                "requiredParameters": {
                  "name": "requiredParameters",
                  "type": "Array<{",
                  "optional": false
                },
                "parameterId": {
                  "name": "parameterId",
                  "type": "string",
                  "optional": false
                },
                "minValue": {
                  "name": "minValue",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 284
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "GrowthPlan": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "GrowthPlan",
              "body": "id: string;\r\n    characterId: string;\r\n    name: string;\r\n    description: string;\r\n    targetParameters: Array<{\r\n        parameterId: string;\r\n        targetValue: number;\r\n        priority: number;    // 1-10 優先度",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "targetParameters": {
                  "name": "targetParameters",
                  "type": "Array<{",
                  "optional": false
                },
                "parameterId": {
                  "name": "parameterId",
                  "type": "string",
                  "optional": false
                },
                "targetValue": {
                  "name": "targetValue",
                  "type": "number",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 306
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "GrowthPhase": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "GrowthPhase",
              "body": "id: string;\r\n    name: string;\r\n    description: string;\r\n    stageRequirement: number;   // 必要発展段階\r\n    chapterEstimate: [number, number]; // 予想章範囲\r\n    parameterChanges: Array<{\r\n        parameterId: string;\r\n        change: number;      // 変化量",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "stageRequirement": {
                  "name": "stageRequirement",
                  "type": "number",
                  "optional": false
                },
                "chapterEstimate": {
                  "name": "chapterEstimate",
                  "type": "[number",
                  "optional": false
                },
                "parameterChanges": {
                  "name": "parameterChanges",
                  "type": "Array<{",
                  "optional": false
                },
                "parameterId": {
                  "name": "parameterId",
                  "type": "string",
                  "optional": false
                },
                "change": {
                  "name": "change",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 329
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "CharacterParameter": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterParameter",
              "body": "id: string;\r\n    name: string;\r\n    description: string;\r\n    value: number;         // 現在値（0-100）\r\n    growth: number;        // 成長率\r\n    category: ParameterCategory;\r\n    tags: string[];        // タグ（「戦闘」「ビジネス」「対人」など）",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "value": {
                  "name": "value",
                  "type": "number",
                  "optional": false
                },
                "growth": {
                  "name": "growth",
                  "type": "number",
                  "optional": false
                },
                "category": {
                  "name": "category",
                  "type": "ParameterCategory",
                  "optional": false
                },
                "tags": {
                  "name": "tags",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 347
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "MentalGrowthState": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "MentalGrowthState",
              "body": "traumas: Array<{\r\n        id: string;\r\n        description: string;\r\n        resolved: boolean;\r\n        resolutionChapter?: number;",
              "properties": {
                "traumas": {
                  "name": "traumas",
                  "type": "Array<{",
                  "optional": false
                },
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "resolved": {
                  "name": "resolved",
                  "type": "boolean",
                  "optional": false
                },
                "resolutionChapter": {
                  "name": "resolutionChapter",
                  "type": "number",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 365
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "Character": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "Character",
              "body": "/** 一意のキャラクターID */\r\n    id: string;\r\n\r\n    /** キャラクター名 */\r\n    name: string;\r\n\r\n    /** ショートネーム配列 */\r\n    shortNames: string[];\r\n\r\n    /** 他キャラからの呼称 */\r\n    nicknames?: Record<string, string[]>;\r\n\r\n    /** キャラクターの説明 */\r\n    description: string;\r\n\r\n    /** キャラクターの種類 */\r\n    type: CharacterType;\r\n\r\n    /** キャラクターの重要度 (0-1) */\r\n    significance?: number;\r\n\r\n    /** キャラクターの役割 */\r\n    role?: CharacterRole;\r\n\r\n    /** キャラクターの目標 */\r\n    goals?: string[];\r\n\r\n    /** キャラクターの初登場章 */\r\n    firstAppearance?: number;\r\n\r\n    /** 性格特性 */\r\n    personality?: PersonalityTraits;\r\n\r\n    /** 外見 */\r\n    appearance?: Appearance;\r\n\r\n    /** 背景設定 */\r\n    backstory?: Backstory;\r\n\r\n    /** 他キャラクターとの関係性 */\r\n    relationships?: Relationship[];\r\n\r\n    /** キャラクターの状態 */\r\n    state: CharacterState;\r\n\r\n    /** キャラクターの現在の状態 */\r\n    currentState?: string;\r\n\r\n    /** キャラクターの感情状態 */\r\n    emotionalState?: string;\r\n\r\n    /** キャラクターの履歴 */\r\n    history: CharacterHistory;\r\n\r\n    /** 昇格履歴 */\r\n    promotionHistory?: PromotionRecord[];\r\n\r\n    /** メタデータ */\r\n    metadata: CharacterMetadata;\r\n\r\n    /** 心理情報 - フェーズ1: 深層キャラクター心理モデル */\r\n    psychology?: CharacterPsychology;",
              "properties": {
                "1": {
                  "name": "1",
                  "type": "深層キャラクター心理モデル */",
                  "optional": false
                },
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "shortNames": {
                  "name": "shortNames",
                  "type": "string[]",
                  "optional": false
                },
                "nicknames": {
                  "name": "nicknames",
                  "type": "Record<string",
                  "optional": true
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "CharacterType",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": true
                },
                "role": {
                  "name": "role",
                  "type": "CharacterRole",
                  "optional": true
                },
                "goals": {
                  "name": "goals",
                  "type": "string[]",
                  "optional": true
                },
                "firstAppearance": {
                  "name": "firstAppearance",
                  "type": "number",
                  "optional": true
                },
                "personality": {
                  "name": "personality",
                  "type": "PersonalityTraits",
                  "optional": true
                },
                "appearance": {
                  "name": "appearance",
                  "type": "Appearance",
                  "optional": true
                },
                "backstory": {
                  "name": "backstory",
                  "type": "Backstory",
                  "optional": true
                },
                "relationships": {
                  "name": "relationships",
                  "type": "Relationship[]",
                  "optional": true
                },
                "state": {
                  "name": "state",
                  "type": "CharacterState",
                  "optional": false
                },
                "currentState": {
                  "name": "currentState",
                  "type": "string",
                  "optional": true
                },
                "emotionalState": {
                  "name": "emotionalState",
                  "type": "string",
                  "optional": true
                },
                "history": {
                  "name": "history",
                  "type": "CharacterHistory",
                  "optional": false
                },
                "promotionHistory": {
                  "name": "promotionHistory",
                  "type": "PromotionRecord[]",
                  "optional": true
                },
                "metadata": {
                  "name": "metadata",
                  "type": "CharacterMetadata",
                  "optional": false
                },
                "psychology": {
                  "name": "psychology",
                  "type": "CharacterPsychology",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 390
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "RelationshipResponse": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "RelationshipResponse",
              "body": "relationships: Relationship[];",
              "properties": {
                "relationships": {
                  "name": "relationships",
                  "type": "Relationship[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 455
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "ImmutableCharacterData": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "ImmutableCharacterData",
              "body": "name: string;\r\n    shortNames: string[];\r\n    description: string;\r\n    appearance?: Appearance;\r\n    backstory?: Backstory;",
              "properties": {
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "shortNames": {
                  "name": "shortNames",
                  "type": "string[]",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "appearance": {
                  "name": "appearance",
                  "type": "Appearance",
                  "optional": true
                },
                "backstory": {
                  "name": "backstory",
                  "type": "Backstory",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 462
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "MutableCharacterData": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "MutableCharacterData",
              "body": "type: CharacterType;\r\n    role?: CharacterRole;\r\n    personality?: PersonalityTraits;\r\n    nicknames?: Record<string, string[]>;\r\n    goals?: string[];\r\n    relationships?: Relationship[];\r\n    state: Partial<CharacterState>;\r\n    currentState?: string;\r\n    emotionalState?: string;",
              "properties": {
                "type": {
                  "name": "type",
                  "type": "CharacterType",
                  "optional": false
                },
                "role": {
                  "name": "role",
                  "type": "CharacterRole",
                  "optional": true
                },
                "personality": {
                  "name": "personality",
                  "type": "PersonalityTraits",
                  "optional": true
                },
                "nicknames": {
                  "name": "nicknames",
                  "type": "Record<string",
                  "optional": true
                },
                "goals": {
                  "name": "goals",
                  "type": "string[]",
                  "optional": true
                },
                "relationships": {
                  "name": "relationships",
                  "type": "Relationship[]",
                  "optional": true
                },
                "state": {
                  "name": "state",
                  "type": "Partial<CharacterState>",
                  "optional": false
                },
                "currentState": {
                  "name": "currentState",
                  "type": "string",
                  "optional": true
                },
                "emotionalState": {
                  "name": "emotionalState",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 473
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "CharacterData": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterData",
              "body": "metadata?: {\r\n        tags?: string[];",
              "properties": {
                "metadata": {
                  "name": "metadata",
                  "type": "{",
                  "optional": true
                },
                "tags": {
                  "name": "tags",
                  "type": "string[]",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 489
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "CharacterMetrics": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterMetrics",
              "body": "appearances: number;\r\n    interactions: number;\r\n    plotRelevance: number;\r\n    characterDevelopment: number;\r\n    readerEngagement: number;",
              "properties": {
                "appearances": {
                  "name": "appearances",
                  "type": "number",
                  "optional": false
                },
                "interactions": {
                  "name": "interactions",
                  "type": "number",
                  "optional": false
                },
                "plotRelevance": {
                  "name": "plotRelevance",
                  "type": "number",
                  "optional": false
                },
                "characterDevelopment": {
                  "name": "characterDevelopment",
                  "type": "number",
                  "optional": false
                },
                "readerEngagement": {
                  "name": "readerEngagement",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 498
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "PromotionEvaluation": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "PromotionEvaluation",
              "body": "/** 昇格の適格性 */\r\n    eligible: boolean;\r\n\r\n    /** 目標キャラクタータイプ */\r\n    targetType: CharacterType | null;\r\n\r\n    /** 昇格スコア */\r\n    score: number;\r\n\r\n    /** 評価レコメンデーション */\r\n    recommendation: string;",
              "properties": {
                "eligible": {
                  "name": "eligible",
                  "type": "boolean",
                  "optional": false
                },
                "targetType": {
                  "name": "targetType",
                  "type": "CharacterType | null",
                  "optional": false
                },
                "score": {
                  "name": "score",
                  "type": "number",
                  "optional": false
                },
                "recommendation": {
                  "name": "recommendation",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 509
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "CharacterCluster": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterCluster",
              "body": "// 基本プロパティ\r\n    id: string;\r\n    members: string[];\r\n    dominantRelation: RelationshipType;\r\n    cohesion: number;\r\n\r\n    // 🆕 記憶階層システム統合プロパティ\r\n    memorySystemValidated: boolean;     // 記憶システムでの検証済みフラグ\r\n    crossLevelConsistency: number;      // クロスレベル整合性スコア (0-1)\r\n    lastAnalyzed: string;               // 最終分析日時（ISO文字列）\r\n\r\n    // オプショナル拡張プロパティ\r\n    memberNames?: string[];             // メンバー名のリスト\r\n    clusterStrength?: number;           // クラスター結束強度 (0-1)\r\n    memoryLevelDistribution?: Record<MemoryLevel, number>;  // 記憶レベル分布\r\n    evolutionHistory?: Array<{         // クラスター変遷履歴\r\n        timestamp: string;\r\n        membershipChanges: {\r\n            added: string[];\r\n            removed: string[];",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "members": {
                  "name": "members",
                  "type": "string[]",
                  "optional": false
                },
                "dominantRelation": {
                  "name": "dominantRelation",
                  "type": "RelationshipType",
                  "optional": false
                },
                "cohesion": {
                  "name": "cohesion",
                  "type": "number",
                  "optional": false
                },
                "memorySystemValidated": {
                  "name": "memorySystemValidated",
                  "type": "boolean",
                  "optional": false
                },
                "crossLevelConsistency": {
                  "name": "crossLevelConsistency",
                  "type": "number",
                  "optional": false
                },
                "lastAnalyzed": {
                  "name": "lastAnalyzed",
                  "type": "string",
                  "optional": false
                },
                "memberNames": {
                  "name": "memberNames",
                  "type": "string[]",
                  "optional": true
                },
                "clusterStrength": {
                  "name": "clusterStrength",
                  "type": "number",
                  "optional": true
                },
                "memoryLevelDistribution": {
                  "name": "memoryLevelDistribution",
                  "type": "Record<MemoryLevel",
                  "optional": true
                },
                "evolutionHistory": {
                  "name": "evolutionHistory",
                  "type": "Array<{         // クラスター変遷履歴",
                  "optional": true
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "membershipChanges": {
                  "name": "membershipChanges",
                  "type": "{",
                  "optional": false
                },
                "added": {
                  "name": "added",
                  "type": "string[]",
                  "optional": false
                },
                "removed": {
                  "name": "removed",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 526
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "RelationshipTension": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "RelationshipTension",
              "body": "// 基本プロパティ\r\n    characters: [string, string];\r\n    type: RelationshipType;\r\n    intensity: number;\r\n    description: string;\r\n\r\n    // 🆕 記憶階層システム統合プロパティ\r\n    characterNames: [string, string];  // キャラクター名のペア\r\n    memorySystemValidated: boolean;    // 記憶システムでの検証済みフラグ\r\n    lastAnalyzed: string;              // 最終分析日時（ISO文字列）\r\n    stabilityTrend: 'stable' | 'increasing' | 'decreasing' | 'volatile';  // 安定性傾向\r\n\r\n    // オプショナル拡張プロパティ\r\n    crossLevelConsistency?: number;    // クロスレベル整合性スコア (0-1)\r\n    memoryLevel?: MemoryLevel;         // 主要存在記憶レベル\r\n    systemConfidence?: number;         // システム信頼度 (0-1)\r\n    relatedEvents?: Array<{           // 関連イベント履歴\r\n        chapterNumber: number;\r\n        description: string;\r\n        impact: number;\r\n        timestamp: string;",
              "properties": {
                "characters": {
                  "name": "characters",
                  "type": "[string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "RelationshipType",
                  "optional": false
                },
                "intensity": {
                  "name": "intensity",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "characterNames": {
                  "name": "characterNames",
                  "type": "[string",
                  "optional": false
                },
                "memorySystemValidated": {
                  "name": "memorySystemValidated",
                  "type": "boolean",
                  "optional": false
                },
                "lastAnalyzed": {
                  "name": "lastAnalyzed",
                  "type": "string",
                  "optional": false
                },
                "stabilityTrend": {
                  "name": "stabilityTrend",
                  "type": "'stable' | 'increasing' | 'decreasing' | 'volatile'",
                  "optional": false
                },
                "crossLevelConsistency": {
                  "name": "crossLevelConsistency",
                  "type": "number",
                  "optional": true
                },
                "memoryLevel": {
                  "name": "memoryLevel",
                  "type": "MemoryLevel",
                  "optional": true
                },
                "systemConfidence": {
                  "name": "systemConfidence",
                  "type": "number",
                  "optional": true
                },
                "relatedEvents": {
                  "name": "relatedEvents",
                  "type": "Array<{           // 関連イベント履歴",
                  "optional": true
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 579
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "RelationshipNetworkAnalysis": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "RelationshipNetworkAnalysis",
              "body": "totalRelationships: number;\r\n    networkDensity: number;\r\n    averageConnectivity: number;\r\n    centralCharacters: Array<{\r\n        characterId: string;\r\n        characterName: string;\r\n        connectivityScore: number;\r\n        influenceRank: number;",
              "properties": {
                "totalRelationships": {
                  "name": "totalRelationships",
                  "type": "number",
                  "optional": false
                },
                "networkDensity": {
                  "name": "networkDensity",
                  "type": "number",
                  "optional": false
                },
                "averageConnectivity": {
                  "name": "averageConnectivity",
                  "type": "number",
                  "optional": false
                },
                "centralCharacters": {
                  "name": "centralCharacters",
                  "type": "Array<{",
                  "optional": false
                },
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "characterName": {
                  "name": "characterName",
                  "type": "string",
                  "optional": false
                },
                "connectivityScore": {
                  "name": "connectivityScore",
                  "type": "number",
                  "optional": false
                },
                "influenceRank": {
                  "name": "influenceRank",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 615
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "RelationshipAnalysis": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "RelationshipAnalysis",
              "body": "clusters: CharacterCluster[];\r\n    tensions: RelationshipTension[];\r\n    developments: any[];\r\n    visualData: any;\r\n\r\n    // 🆕 記憶階層システム統合情報（新規追加）\r\n    networkAnalysis?: RelationshipNetworkAnalysis;\r\n    analysisTimestamp?: Date;\r\n    confidence?: number;\r\n    memorySystemValidated?: boolean;\r\n    systemHealthScore?: number;\r\n    crossMemoryLevelConsistency?: number;",
              "properties": {
                "clusters": {
                  "name": "clusters",
                  "type": "CharacterCluster[]",
                  "optional": false
                },
                "tensions": {
                  "name": "tensions",
                  "type": "RelationshipTension[]",
                  "optional": false
                },
                "developments": {
                  "name": "developments",
                  "type": "any[]",
                  "optional": false
                },
                "visualData": {
                  "name": "visualData",
                  "type": "any",
                  "optional": false
                },
                "networkAnalysis": {
                  "name": "networkAnalysis",
                  "type": "RelationshipNetworkAnalysis",
                  "optional": true
                },
                "analysisTimestamp": {
                  "name": "analysisTimestamp",
                  "type": "Date",
                  "optional": true
                },
                "confidence": {
                  "name": "confidence",
                  "type": "number",
                  "optional": true
                },
                "memorySystemValidated": {
                  "name": "memorySystemValidated",
                  "type": "boolean",
                  "optional": true
                },
                "systemHealthScore": {
                  "name": "systemHealthScore",
                  "type": "number",
                  "optional": true
                },
                "crossMemoryLevelConsistency": {
                  "name": "crossMemoryLevelConsistency",
                  "type": "number",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 639
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "DevelopmentImpact": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "DevelopmentImpact",
              "body": "personality: Record<string, number>;\r\n    relationships: Record<string, { change: number; reason: string",
              "properties": {
                "personality": {
                  "name": "personality",
                  "type": "Record<string",
                  "optional": false
                },
                "relationships": {
                  "name": "relationships",
                  "type": "Record<string",
                  "optional": false
                },
                "change": {
                  "name": "change",
                  "type": "number",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 657
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "CharacterDevelopment": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterDevelopment",
              "body": "personalityChanges: Record<string, number>;\r\n    relationshipChanges: Record<string, { change: number; reason: string",
              "properties": {
                "personalityChanges": {
                  "name": "personalityChanges",
                  "type": "Record<string",
                  "optional": false
                },
                "relationshipChanges": {
                  "name": "relationshipChanges",
                  "type": "Record<string",
                  "optional": false
                },
                "change": {
                  "name": "change",
                  "type": "number",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 668
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "DevelopmentPath": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "DevelopmentPath",
              "body": "milestones: Milestone[];\r\n    growthEvents: GrowthEvent[];\r\n    transformationArcs: TransformationArc[];\r\n    phase: DevelopmentPathPhase;\r\n    targetStage: number;\r\n    currentStage: number;\r\n    estimatedCompletionChapter: number;",
              "properties": {
                "milestones": {
                  "name": "milestones",
                  "type": "Milestone[]",
                  "optional": false
                },
                "growthEvents": {
                  "name": "growthEvents",
                  "type": "GrowthEvent[]",
                  "optional": false
                },
                "transformationArcs": {
                  "name": "transformationArcs",
                  "type": "TransformationArc[]",
                  "optional": false
                },
                "phase": {
                  "name": "phase",
                  "type": "DevelopmentPathPhase",
                  "optional": false
                },
                "targetStage": {
                  "name": "targetStage",
                  "type": "number",
                  "optional": false
                },
                "currentStage": {
                  "name": "currentStage",
                  "type": "number",
                  "optional": false
                },
                "estimatedCompletionChapter": {
                  "name": "estimatedCompletionChapter",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 684
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "GrowthResult": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "GrowthResult",
              "body": "/** 成長計画ID */\r\n    planId: string;\r\n    /** 適用されたキャラクターID */\r\n    characterId: string;\r\n    /** 成長前のキャラクター状態 */\r\n    beforeState: Partial<CharacterState>;\r\n    /** 成長後のキャラクター状態 */\r\n    afterState: Partial<CharacterState>;\r\n    /** パラメータ変化 */\r\n    parameterChanges: Record<string, { before: number, after: number",
              "properties": {
                "planId": {
                  "name": "planId",
                  "type": "string",
                  "optional": false
                },
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "beforeState": {
                  "name": "beforeState",
                  "type": "Partial<CharacterState>",
                  "optional": false
                },
                "afterState": {
                  "name": "afterState",
                  "type": "Partial<CharacterState>",
                  "optional": false
                },
                "parameterChanges": {
                  "name": "parameterChanges",
                  "type": "Record<string",
                  "optional": false
                },
                "before": {
                  "name": "before",
                  "type": "number",
                  "optional": false
                },
                "after": {
                  "name": "after",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 697
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "ChapterEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "ChapterEvent",
              "body": "id: string;\r\n    type: string;\r\n    subType?: string;\r\n    description?: string;\r\n    affectedCharacters: string[];\r\n    relatedCharacters?: string[];\r\n    intensity?: number;\r\n    outcome?: 'SUCCESS' | 'FAILURE' | 'NEUTRAL';\r\n    skillArea?: string;\r\n    additionalData?: {\r\n        relatedSkills?: string[];\r\n        masteryLevel?: number;\r\n        [key: string]: any;",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "subType": {
                  "name": "subType",
                  "type": "string",
                  "optional": true
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": true
                },
                "affectedCharacters": {
                  "name": "affectedCharacters",
                  "type": "string[]",
                  "optional": false
                },
                "relatedCharacters": {
                  "name": "relatedCharacters",
                  "type": "string[]",
                  "optional": true
                },
                "intensity": {
                  "name": "intensity",
                  "type": "number",
                  "optional": true
                },
                "outcome": {
                  "name": "outcome",
                  "type": "'SUCCESS' | 'FAILURE' | 'NEUTRAL'",
                  "optional": true
                },
                "skillArea": {
                  "name": "skillArea",
                  "type": "string",
                  "optional": true
                },
                "additionalData": {
                  "name": "additionalData",
                  "type": "{",
                  "optional": true
                },
                "relatedSkills": {
                  "name": "relatedSkills",
                  "type": "string[]",
                  "optional": true
                },
                "masteryLevel": {
                  "name": "masteryLevel",
                  "type": "number",
                  "optional": true
                },
                "key": {
                  "name": "key",
                  "type": "string]: any",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 721
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "TimingFactor": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "TimingFactor",
              "body": "type: 'PLOT_RELEVANCE' | 'CHARACTER_DEVELOPMENT' | 'NARRATIVE_PACING' | 'READER_EXPECTATIONS';\r\n    score: number;\r\n    impact: 'LOW' | 'MEDIUM' | 'HIGH';\r\n    description: string;",
              "properties": {
                "type": {
                  "name": "type",
                  "type": "'PLOT_RELEVANCE' | 'CHARACTER_DEVELOPMENT' | 'NARRATIVE_PACING' | 'READER_EXPECTATIONS'",
                  "optional": false
                },
                "score": {
                  "name": "score",
                  "type": "number",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "'LOW' | 'MEDIUM' | 'HIGH'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 741
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "TimingAnalysis": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "TimingAnalysis",
              "body": "optimalChapter: number;\r\n    significance: 'LOW' | 'MEDIUM' | 'HIGH';\r\n    score: number;\r\n    reason: string;\r\n    factors: TimingFactor[];\r\n    alternatives: number[];\r\n    preparation: string[];",
              "properties": {
                "optimalChapter": {
                  "name": "optimalChapter",
                  "type": "number",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "'LOW' | 'MEDIUM' | 'HIGH'",
                  "optional": false
                },
                "score": {
                  "name": "score",
                  "type": "number",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                },
                "factors": {
                  "name": "factors",
                  "type": "TimingFactor[]",
                  "optional": false
                },
                "alternatives": {
                  "name": "alternatives",
                  "type": "number[]",
                  "optional": false
                },
                "preparation": {
                  "name": "preparation",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 751
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "TimingRecommendation": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "TimingRecommendation",
              "body": "recommendedChapter: number;\r\n    significance: 'LOW' | 'MEDIUM' | 'HIGH';\r\n    reason: string;\r\n    alternatives: number[];\r\n    preparationNeeded: string[];",
              "properties": {
                "recommendedChapter": {
                  "name": "recommendedChapter",
                  "type": "number",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "'LOW' | 'MEDIUM' | 'HIGH'",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                },
                "alternatives": {
                  "name": "alternatives",
                  "type": "number[]",
                  "optional": false
                },
                "preparationNeeded": {
                  "name": "preparationNeeded",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 764
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "StoryContext": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "StoryContext",
              "body": "currentChapter: number;\r\n    totalChapters: number;\r\n    plotPoints: any[];\r\n    storyPacing?: string;\r\n    currentArc?: {\r\n        name: string;\r\n        theme: string;\r\n        approximateChapters: [number, number];",
              "properties": {
                "currentChapter": {
                  "name": "currentChapter",
                  "type": "number",
                  "optional": false
                },
                "totalChapters": {
                  "name": "totalChapters",
                  "type": "number",
                  "optional": false
                },
                "plotPoints": {
                  "name": "plotPoints",
                  "type": "any[]",
                  "optional": false
                },
                "storyPacing": {
                  "name": "storyPacing",
                  "type": "string",
                  "optional": true
                },
                "currentArc": {
                  "name": "currentArc",
                  "type": "{",
                  "optional": true
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "theme": {
                  "name": "theme",
                  "type": "string",
                  "optional": false
                },
                "approximateChapters": {
                  "name": "approximateChapters",
                  "type": "[number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 775
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "TransformationArc": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "TransformationArc",
              "body": "type: ArcType;\r\n    description: string;\r\n    theme: string;\r\n    beginStage: number;\r\n    peakStage: number;\r\n    resolutionStage: number;\r\n    keyPoints: string[];",
              "properties": {
                "type": {
                  "name": "type",
                  "type": "ArcType",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "theme": {
                  "name": "theme",
                  "type": "string",
                  "optional": false
                },
                "beginStage": {
                  "name": "beginStage",
                  "type": "number",
                  "optional": false
                },
                "peakStage": {
                  "name": "peakStage",
                  "type": "number",
                  "optional": false
                },
                "resolutionStage": {
                  "name": "resolutionStage",
                  "type": "number",
                  "optional": false
                },
                "keyPoints": {
                  "name": "keyPoints",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 807
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "GrowthEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "GrowthEvent",
              "body": "type: string;\r\n    targetChapter: number;\r\n    description: string;\r\n    significance: number;\r\n    triggers: string[];\r\n    outcomes: string[];\r\n    completed: boolean;",
              "properties": {
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "targetChapter": {
                  "name": "targetChapter",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": false
                },
                "triggers": {
                  "name": "triggers",
                  "type": "string[]",
                  "optional": false
                },
                "outcomes": {
                  "name": "outcomes",
                  "type": "string[]",
                  "optional": false
                },
                "completed": {
                  "name": "completed",
                  "type": "boolean",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 820
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "Milestone": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "Milestone",
              "body": "stage: number;\r\n    description: string;\r\n    requirements: any;\r\n    estimatedChapter: number;\r\n    achieved: boolean;",
              "properties": {
                "stage": {
                  "name": "stage",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "requirements": {
                  "name": "requirements",
                  "type": "any",
                  "optional": false
                },
                "estimatedChapter": {
                  "name": "estimatedChapter",
                  "type": "number",
                  "optional": false
                },
                "achieved": {
                  "name": "achieved",
                  "type": "boolean",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 833
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "ChangeClassification": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "ChangeClassification",
              "body": "/** 変化のタイプ */\r\n    type: ChangeType;\r\n    /** 変化の影響範囲 */\r\n    scope: ChangeScope;\r\n    /** 分類の確信度（0-1） */\r\n    confidence: number;\r\n    /** 分類の説明 */\r\n    explanation: string;\r\n    /** プロット上の重要度（0-1）*/\r\n    narrativeSignificance?: number;",
              "properties": {
                "type": {
                  "name": "type",
                  "type": "ChangeType",
                  "optional": false
                },
                "scope": {
                  "name": "scope",
                  "type": "ChangeScope",
                  "optional": false
                },
                "confidence": {
                  "name": "confidence",
                  "type": "number",
                  "optional": false
                },
                "explanation": {
                  "name": "explanation",
                  "type": "string",
                  "optional": false
                },
                "narrativeSignificance": {
                  "name": "narrativeSignificance",
                  "type": "number",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 857
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "CharacterChange": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterChange",
              "body": "/** 変化した属性名 */\r\n    attribute: string;\r\n    /** 変化前の値 */\r\n    previousValue: any;\r\n    /** 変化後の値 */\r\n    currentValue: any;\r\n    /** 変化の分類（分類後に設定） */\r\n    classification?: ChangeClassification;",
              "properties": {
                "attribute": {
                  "name": "attribute",
                  "type": "string",
                  "optional": false
                },
                "previousValue": {
                  "name": "previousValue",
                  "type": "any",
                  "optional": false
                },
                "currentValue": {
                  "name": "currentValue",
                  "type": "any",
                  "optional": false
                },
                "classification": {
                  "name": "classification",
                  "type": "ChangeClassification",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 873
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "CharacterDiff": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterDiff",
              "body": "/** キャラクター名 */\r\n    name: string;\r\n    /** キャラクターID */\r\n    id: string;\r\n    /** 最後の登場チャプター */\r\n    lastAppearance?: number;\r\n    /** 現在の発展段階 */\r\n    developmentStage?: number;\r\n    /** 検出された変化のリスト */\r\n    changes: CharacterChange[];",
              "properties": {
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "lastAppearance": {
                  "name": "lastAppearance",
                  "type": "number",
                  "optional": true
                },
                "developmentStage": {
                  "name": "developmentStage",
                  "type": "number",
                  "optional": true
                },
                "changes": {
                  "name": "changes",
                  "type": "CharacterChange[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 887
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "PlotContext": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "PlotContext",
              "body": "/** 最近のチャプター要約 */\r\n    recentSummaries: string;\r\n    /** 重要イベント */\r\n    keyEvents: string[];\r\n    /** 現在のアーク情報 */\r\n    currentArc?: string;\r\n    /** テーマ情報 */\r\n    themes?: string[];",
              "properties": {
                "recentSummaries": {
                  "name": "recentSummaries",
                  "type": "string",
                  "optional": false
                },
                "keyEvents": {
                  "name": "keyEvents",
                  "type": "string[]",
                  "optional": false
                },
                "currentArc": {
                  "name": "currentArc",
                  "type": "string",
                  "optional": true
                },
                "themes": {
                  "name": "themes",
                  "type": "string[]",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 903
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "CharacterTemplate": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterTemplate",
              "body": "id: string;\r\n    name: string;\r\n    description?: string;\r\n    personality?: {\r\n        traits?: string[];\r\n        values?: string[];\r\n        quirks?: string[];",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": true
                },
                "personality": {
                  "name": "personality",
                  "type": "{",
                  "optional": true
                },
                "traits": {
                  "name": "traits",
                  "type": "string[]",
                  "optional": true
                },
                "values": {
                  "name": "values",
                  "type": "string[]",
                  "optional": true
                },
                "quirks": {
                  "name": "quirks",
                  "type": "string[]",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 917
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "DynamicCharacter": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "DynamicCharacter",
              "body": "// 特別なプロパティが必要な場合は追加\r\n    generationMetadata?: {\r\n        template?: string;\r\n        generatedAt: Date;\r\n        parameters?: any;",
              "properties": {
                "generationMetadata": {
                  "name": "generationMetadata",
                  "type": "{",
                  "optional": true
                },
                "template": {
                  "name": "template",
                  "type": "string",
                  "optional": true
                },
                "generatedAt": {
                  "name": "generatedAt",
                  "type": "Date",
                  "optional": false
                },
                "parameters": {
                  "name": "parameters",
                  "type": "any",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 943
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "NarrativeState": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "NarrativeState",
              "body": "theme?: string;\r\n    tone?: string;\r\n    setting?: string;\r\n    arc?: string;\r\n    pacing?: string;",
              "properties": {
                "theme": {
                  "name": "theme",
                  "type": "string",
                  "optional": true
                },
                "tone": {
                  "name": "tone",
                  "type": "string",
                  "optional": true
                },
                "setting": {
                  "name": "setting",
                  "type": "string",
                  "optional": true
                },
                "arc": {
                  "name": "arc",
                  "type": "string",
                  "optional": true
                },
                "pacing": {
                  "name": "pacing",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 955
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "NarrativeContext": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "NarrativeContext",
              "body": "/** 物語のペース */\r\n    pacing: string;\r\n    /** 現在のアーク名 */\r\n    arc: string;\r\n    /** 現在のテーマ */\r\n    theme: string;\r\n    /** その他の物語状態情報 */\r\n    [key: string]: any;",
              "properties": {
                "pacing": {
                  "name": "pacing",
                  "type": "string",
                  "optional": false
                },
                "arc": {
                  "name": "arc",
                  "type": "string",
                  "optional": false
                },
                "theme": {
                  "name": "theme",
                  "type": "string",
                  "optional": false
                },
                "key": {
                  "name": "key",
                  "type": "string]: any",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 967
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "CharacterRecommendation": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterRecommendation",
              "body": "/** キャラクターID */\r\n    id: string;\r\n    /** キャラクター名 */\r\n    name: string;\r\n    /** 推奨理由 */\r\n    reason: string;",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 981
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "ChapterCharacterRecommendations": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "ChapterCharacterRecommendations",
              "body": "/** メインキャラクター */\r\n    mainCharacters: CharacterRecommendation[];\r\n    /** サポートキャラクター */\r\n    supportingCharacters: CharacterRecommendation[];\r\n    /** 背景キャラクター */\r\n    backgroundCharacters: CharacterRecommendation[];",
              "properties": {
                "mainCharacters": {
                  "name": "mainCharacters",
                  "type": "CharacterRecommendation[]",
                  "optional": false
                },
                "supportingCharacters": {
                  "name": "supportingCharacters",
                  "type": "CharacterRecommendation[]",
                  "optional": false
                },
                "backgroundCharacters": {
                  "name": "backgroundCharacters",
                  "type": "CharacterRecommendation[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 993
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "CharacterPsychology": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterPsychology",
              "body": "/** 現在の欲求 */\r\n    currentDesires: string[];\r\n\r\n    /** 現在の恐れ */\r\n    currentFears: string[];\r\n\r\n    /** 内的葛藤 */\r\n    internalConflicts: string[];\r\n\r\n    /** 感情状態（感情名:強度） */\r\n    emotionalState: { [key: string]: number",
              "properties": {
                "currentDesires": {
                  "name": "currentDesires",
                  "type": "string[]",
                  "optional": false
                },
                "currentFears": {
                  "name": "currentFears",
                  "type": "string[]",
                  "optional": false
                },
                "internalConflicts": {
                  "name": "internalConflicts",
                  "type": "string[]",
                  "optional": false
                },
                "emotionalState": {
                  "name": "emotionalState",
                  "type": "{ [key: string]: number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1005
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "RelationshipAttitude": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "RelationshipAttitude",
              "body": "/** 感情（信頼、疑念、愛情など） */\r\n    attitude: string;\r\n\r\n    /** 強度（0-1） */\r\n    intensity: number;\r\n\r\n    /** 変化しつつあるか */\r\n    isDynamic: boolean;\r\n\r\n    /** 最近の変化の説明 */\r\n    recentChange: string;\r\n\r\n    // 🔧 記憶階層システム統合要素\r\n    /** 記憶システムから得られた洞察 */\r\n    memorySystemInsights?: string[];\r\n\r\n    /** 記憶システムで検証済みかどうか */\r\n    memorySystemValidated?: boolean;",
              "properties": {
                "attitude": {
                  "name": "attitude",
                  "type": "string",
                  "optional": false
                },
                "intensity": {
                  "name": "intensity",
                  "type": "number",
                  "optional": false
                },
                "isDynamic": {
                  "name": "isDynamic",
                  "type": "boolean",
                  "optional": false
                },
                "recentChange": {
                  "name": "recentChange",
                  "type": "string",
                  "optional": false
                },
                "memorySystemInsights": {
                  "name": "memorySystemInsights",
                  "type": "string[]",
                  "optional": true
                },
                "memorySystemValidated": {
                  "name": "memorySystemValidated",
                  "type": "boolean",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1035
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "PsychologyAnalysisResult": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "PsychologyAnalysisResult",
              "body": "success: boolean;\r\n    characterId: string;\r\n    psychology: CharacterPsychology;\r\n    confidence: number;\r\n    processingTime: number;\r\n    memorySystemValidated: boolean;\r\n    learningDataStored: boolean;\r\n    qualityScore: number;\r\n    warnings: string[];\r\n    recommendations: string[];",
              "properties": {
                "success": {
                  "name": "success",
                  "type": "boolean",
                  "optional": false
                },
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "psychology": {
                  "name": "psychology",
                  "type": "CharacterPsychology",
                  "optional": false
                },
                "confidence": {
                  "name": "confidence",
                  "type": "number",
                  "optional": false
                },
                "processingTime": {
                  "name": "processingTime",
                  "type": "number",
                  "optional": false
                },
                "memorySystemValidated": {
                  "name": "memorySystemValidated",
                  "type": "boolean",
                  "optional": false
                },
                "learningDataStored": {
                  "name": "learningDataStored",
                  "type": "boolean",
                  "optional": false
                },
                "qualityScore": {
                  "name": "qualityScore",
                  "type": "number",
                  "optional": false
                },
                "warnings": {
                  "name": "warnings",
                  "type": "string[]",
                  "optional": false
                },
                "recommendations": {
                  "name": "recommendations",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1059
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "BehaviorPredictionResult": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "BehaviorPredictionResult",
              "body": "success: boolean;\r\n    characterId: string;\r\n    predictions: Record<string, string>;\r\n    confidence: number;\r\n    memoryContextUsed: boolean;\r\n    psychologyBased: boolean;\r\n    recommendations: string[];",
              "properties": {
                "success": {
                  "name": "success",
                  "type": "boolean",
                  "optional": false
                },
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "predictions": {
                  "name": "predictions",
                  "type": "Record<string",
                  "optional": false
                },
                "confidence": {
                  "name": "confidence",
                  "type": "number",
                  "optional": false
                },
                "memoryContextUsed": {
                  "name": "memoryContextUsed",
                  "type": "boolean",
                  "optional": false
                },
                "psychologyBased": {
                  "name": "psychologyBased",
                  "type": "boolean",
                  "optional": false
                },
                "recommendations": {
                  "name": "recommendations",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 1075
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "EmotionalSimulationResult": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "EmotionalSimulationResult",
              "body": "success: boolean;\r\n    characterId: string;\r\n    dominantEmotion: string;\r\n    emotionalResponses: Record<string, number>;\r\n    explanation: string;\r\n    memorySystemIntegrated: boolean;\r\n    confidence: number;",
              "properties": {
                "success": {
                  "name": "success",
                  "type": "boolean",
                  "optional": false
                },
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "dominantEmotion": {
                  "name": "dominantEmotion",
                  "type": "string",
                  "optional": false
                },
                "emotionalResponses": {
                  "name": "emotionalResponses",
                  "type": "Record<string",
                  "optional": false
                },
                "explanation": {
                  "name": "explanation",
                  "type": "string",
                  "optional": false
                },
                "memorySystemIntegrated": {
                  "name": "memorySystemIntegrated",
                  "type": "boolean",
                  "optional": false
                },
                "confidence": {
                  "name": "confidence",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 1088
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "PsychologyPerformanceMetrics": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "PsychologyPerformanceMetrics",
              "body": "totalAnalyses: number;\r\n    successfulAnalyses: number;\r\n    failedAnalyses: number;\r\n    averageProcessingTime: number;\r\n    memorySystemHits: number;\r\n    cacheEfficiencyRate: number;\r\n    lastOptimization: string;",
              "properties": {
                "totalAnalyses": {
                  "name": "totalAnalyses",
                  "type": "number",
                  "optional": false
                },
                "successfulAnalyses": {
                  "name": "successfulAnalyses",
                  "type": "number",
                  "optional": false
                },
                "failedAnalyses": {
                  "name": "failedAnalyses",
                  "type": "number",
                  "optional": false
                },
                "averageProcessingTime": {
                  "name": "averageProcessingTime",
                  "type": "number",
                  "optional": false
                },
                "memorySystemHits": {
                  "name": "memorySystemHits",
                  "type": "number",
                  "optional": false
                },
                "cacheEfficiencyRate": {
                  "name": "cacheEfficiencyRate",
                  "type": "number",
                  "optional": false
                },
                "lastOptimization": {
                  "name": "lastOptimization",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1101
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "ChapterEmotionAnalysis": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "ChapterEmotionAnalysis",
              "body": "/** 感情的次元の分析 */\r\n    emotionalDimensions: {\r\n        /** 希望と絶望の間の感情的変移 */\r\n        hopeVsDespair: EmotionalProgression;\r\n        /** 安心と緊張の間の感情的変移 */\r\n        comfortVsTension: EmotionalProgression;\r\n        /** 喜びと悲しみの間の感情的変移 */\r\n        joyVsSadness: EmotionalProgression;\r\n        /** 共感と孤立の間の感情的変移 */\r\n        empathyVsIsolation: EmotionalProgression;\r\n        /** 好奇心と無関心の間の感情的変移 */\r\n        curiosityVsIndifference: EmotionalProgression;",
              "properties": {
                "emotionalDimensions": {
                  "name": "emotionalDimensions",
                  "type": "{",
                  "optional": false
                },
                "hopeVsDespair": {
                  "name": "hopeVsDespair",
                  "type": "EmotionalProgression",
                  "optional": false
                },
                "comfortVsTension": {
                  "name": "comfortVsTension",
                  "type": "EmotionalProgression",
                  "optional": false
                },
                "joyVsSadness": {
                  "name": "joyVsSadness",
                  "type": "EmotionalProgression",
                  "optional": false
                },
                "empathyVsIsolation": {
                  "name": "empathyVsIsolation",
                  "type": "EmotionalProgression",
                  "optional": false
                },
                "curiosityVsIndifference": {
                  "name": "curiosityVsIndifference",
                  "type": "EmotionalProgression",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1114
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "EmotionalProgression": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "EmotionalProgression",
              "body": "/** 開始時の感情レベル (0-10) */\r\n    start: number;\r\n    /** 中間時の感情レベル (0-10) */\r\n    middle: number;\r\n    /** 終了時の感情レベル (0-10) */\r\n    end: number;",
              "properties": {
                "start": {
                  "name": "start",
                  "type": "number",
                  "optional": false
                },
                "middle": {
                  "name": "middle",
                  "type": "number",
                  "optional": false
                },
                "end": {
                  "name": "end",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1137
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "EmotionalArcDesign": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "EmotionalArcDesign",
              "body": "/** 推奨される感情的トーン */\r\n    recommendedTone: string;\r\n    /** 感情的な旅 */\r\n    emotionalJourney: {\r\n        /** 冒頭部の感情設計 */\r\n        opening: { dimension: string, level: number",
              "properties": {
                "recommendedTone": {
                  "name": "recommendedTone",
                  "type": "string",
                  "optional": false
                },
                "emotionalJourney": {
                  "name": "emotionalJourney",
                  "type": "{",
                  "optional": false
                },
                "opening": {
                  "name": "opening",
                  "type": "{ dimension: string",
                  "optional": false
                },
                "level": {
                  "name": "level",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1149
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "ValidationResult": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "ValidationResult",
              "body": "/** 有効かどうか */\r\n    isValid: boolean;\r\n    /** 信頼度スコア（0-1） */\r\n    confidenceScore: number;\r\n    /** 理由説明 */\r\n    reason: string;\r\n    /** 提案される代替アクション */\r\n    alternatives?: string[];",
              "properties": {
                "isValid": {
                  "name": "isValid",
                  "type": "boolean",
                  "optional": false
                },
                "confidenceScore": {
                  "name": "confidenceScore",
                  "type": "number",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                },
                "alternatives": {
                  "name": "alternatives",
                  "type": "string[]",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1168
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "EventSubscription": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "EventSubscription",
              "body": "/** イベントタイプ */\r\n    eventType: string;\r\n    /** 購読ID */\r\n    id: string;\r\n    /** 購読解除関数 */\r\n    unsubscribe: () => void;",
              "properties": {
                "eventType": {
                  "name": "eventType",
                  "type": "string",
                  "optional": false
                },
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "unsubscribe": {
                  "name": "unsubscribe",
                  "type": "() => void",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1182
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "EventData": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "EventData",
              "body": "/** イベント発生タイムスタンプ */\r\n    timestamp: Date;\r\n    /** イベント固有データ */\r\n    [key: string]: any;",
              "properties": {
                "timestamp": {
                  "name": "timestamp",
                  "type": "Date",
                  "optional": false
                },
                "key": {
                  "name": "key",
                  "type": "string]: any",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1194
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "CharacterCreatedEventData": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterCreatedEventData",
              "body": "character: Character;",
              "properties": {
                "character": {
                  "name": "character",
                  "type": "Character",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 1204
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "CharacterUpdatedEventData": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterUpdatedEventData",
              "body": "characterId: string;\r\n    changes: Partial<CharacterData>;\r\n    previousState?: Partial<Character>;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "changes": {
                  "name": "changes",
                  "type": "Partial<CharacterData>",
                  "optional": false
                },
                "previousState": {
                  "name": "previousState",
                  "type": "Partial<Character>",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 1211
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "RelationshipUpdatedEventData": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "RelationshipUpdatedEventData",
              "body": "char1Id: string;\r\n    char2Id: string;\r\n    relationship: Relationship;\r\n    previousRelationship?: Relationship;",
              "properties": {
                "char1Id": {
                  "name": "char1Id",
                  "type": "string",
                  "optional": false
                },
                "char2Id": {
                  "name": "char2Id",
                  "type": "string",
                  "optional": false
                },
                "relationship": {
                  "name": "relationship",
                  "type": "Relationship",
                  "optional": false
                },
                "previousRelationship": {
                  "name": "previousRelationship",
                  "type": "Relationship",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 1220
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "ParameterChangedEventData": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "ParameterChangedEventData",
              "body": "characterId: string;\r\n    parameterId: string;\r\n    oldValue: number;\r\n    newValue: number;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "parameterId": {
                  "name": "parameterId",
                  "type": "string",
                  "optional": false
                },
                "oldValue": {
                  "name": "oldValue",
                  "type": "number",
                  "optional": false
                },
                "newValue": {
                  "name": "newValue",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 1230
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "SkillAcquiredEventData": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "SkillAcquiredEventData",
              "body": "characterId: string;\r\n    skillId: string;\r\n    level: number;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "skillId": {
                  "name": "skillId",
                  "type": "string",
                  "optional": false
                },
                "level": {
                  "name": "level",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 1240
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "CharacterIndexItem": [
          {
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterIndexItem",
              "body": "id: string;\r\n    name: string;\r\n    shortNames: string[];\r\n    nicknames: string[];\r\n    type: CharacterType;\r\n    isActive: boolean;\r\n    lastAppearance: number | null;\r\n    keywords: string[];",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "shortNames": {
                  "name": "shortNames",
                  "type": "string[]",
                  "optional": false
                },
                "nicknames": {
                  "name": "nicknames",
                  "type": "string[]",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "CharacterType",
                  "optional": false
                },
                "isActive": {
                  "name": "isActive",
                  "type": "boolean",
                  "optional": false
                },
                "lastAppearance": {
                  "name": "lastAppearance",
                  "type": "number | null",
                  "optional": false
                },
                "keywords": {
                  "name": "keywords",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1255
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "CharacterType": [
          {
            "type": "type",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterType",
              "definition": "'MAIN' | 'SUB' | 'MOB'",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": false,
              "lineNumber": 13
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "CharacterRole": [
          {
            "type": "type",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterRole",
              "definition": "'PROTAGONIST' | 'ANTAGONIST' | 'MENTOR' | 'ALLY' | 'RIVAL' | 'OTHER'",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": false,
              "lineNumber": 18
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "EmotionalState": [
          {
            "type": "type",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "EmotionalState",
              "definition": "'HAPPY' | 'SAD' | 'ANGRY' | 'FEARFUL' | 'NEUTRAL' | 'EXCITED' | 'CONFUSED' | 'DETERMINED' | 'CONCERNED'",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": false,
              "lineNumber": 23
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "RelationshipType": [
          {
            "type": "type",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "RelationshipType",
              "definition": "'PARENT' | 'CHILD' | 'MENTOR' | 'STUDENT' | 'LEADER' | 'FOLLOWER' |\r\n    'LOVER' | 'PROTECTOR' | 'PROTECTED' | 'FRIEND' | 'ENEMY' | 'RIVAL' |\r\n    'COLLEAGUE' | 'NEUTRAL'",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": false,
              "lineNumber": 28
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "ParameterCategory": [
          {
            "type": "type",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "ParameterCategory",
              "definition": "'PHYSICAL' | 'MENTAL' | 'SOCIAL' | 'TECHNICAL' | 'SPECIAL'",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": false,
              "lineNumber": 360
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "StabilityTrend": [
          {
            "type": "type",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "StabilityTrend",
              "definition": "'stable' | 'increasing' | 'decreasing' | 'volatile'",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": false,
              "lineNumber": 574
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "DevelopmentPathPhase": [
          {
            "type": "type",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "DevelopmentPathPhase",
              "definition": "'INTRODUCTION' | 'PROGRESSION' | 'MAJOR_TRANSFORMATION' |\r\n    'REFINEMENT' | 'MINOR_DEVELOPMENT' | 'SUPPORTING_ROLE' | 'STATIC'",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": false,
              "lineNumber": 792
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "ArcType": [
          {
            "type": "type",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "ArcType",
              "definition": "'REDEMPTION' | 'FALL' | 'GROWTH' | 'CORRUPTION' | 'DISILLUSIONMENT' |\r\n    'MATURATION' | 'EDUCATION' | 'ENLIGHTENMENT' | 'TRAGEDY' | 'REBIRTH' |\r\n    'DISCOVERY' | 'SUPPORTING' | 'PARALLEL'",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": false,
              "lineNumber": 799
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "ChangeType": [
          {
            "type": "type",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "ChangeType",
              "definition": "'GROWTH' | 'TEMPORARY' | 'CONTRADICTION'",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": false,
              "lineNumber": 847
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "ChangeScope": [
          {
            "type": "type",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "ChangeScope",
              "definition": "'CORE_PERSONALITY' | 'RELATIONSHIPS' | 'SKILLS' | 'EMOTIONAL_STATE' | 'APPEARANCE' | 'MOTIVATION'",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": false,
              "lineNumber": 852
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "EventHandler": [
          {
            "type": "type",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "EventHandler",
              "definition": "(data: T) => void | Promise<void>",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": true,
              "lineNumber": 1249
            },
            "system": "characters",
            "module": "characters/core"
          }
        ],
        "CharacterCreatedEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "CharacterCreatedEvent",
              "body": "/** 作成されたキャラクター */\r\n    character: Character;",
              "properties": {
                "character": {
                  "name": "character",
                  "type": "Character",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 65
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "CharacterUpdatedEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "CharacterUpdatedEvent",
              "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 更新されたキャラクター */\r\n    character: Character;\r\n    /** 変更内容 */\r\n    changes: Partial<CharacterData>;\r\n    /** 更新前の状態 */\r\n    previousState?: Partial<Character>;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "character": {
                  "name": "character",
                  "type": "Character",
                  "optional": false
                },
                "changes": {
                  "name": "changes",
                  "type": "Partial<CharacterData>",
                  "optional": false
                },
                "previousState": {
                  "name": "previousState",
                  "type": "Partial<Character>",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 73
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "CharacterDeletedEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "CharacterDeletedEvent",
              "body": "/** 削除されたキャラクターID */\r\n    characterId: string;\r\n    /** 削除されたキャラクター名 */\r\n    characterName: string;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "characterName": {
                  "name": "characterName",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 87
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "CharacterPromotedEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "CharacterPromotedEvent",
              "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 元のタイプ */\r\n    fromType: string;\r\n    /** 新しいタイプ */\r\n    toType: string;\r\n    /** 昇格理由 */\r\n    reason?: string;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "fromType": {
                  "name": "fromType",
                  "type": "string",
                  "optional": false
                },
                "toType": {
                  "name": "toType",
                  "type": "string",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 97
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "CharacterDemotedEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "CharacterDemotedEvent",
              "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 元のタイプ */\r\n    fromType: string;\r\n    /** 新しいタイプ */\r\n    toType: string;\r\n    /** 降格理由 */\r\n    reason?: string;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "fromType": {
                  "name": "fromType",
                  "type": "string",
                  "optional": false
                },
                "toType": {
                  "name": "toType",
                  "type": "string",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 111
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "CharacterStateChangedEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "CharacterStateChangedEvent",
              "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 更新された状態 */\r\n    state: Partial<CharacterState>;\r\n    /** 更新前の状態 */\r\n    previousState?: Partial<CharacterState>;\r\n    /** 変更種別 */\r\n    changeType: string;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "state": {
                  "name": "state",
                  "type": "Partial<CharacterState>",
                  "optional": false
                },
                "previousState": {
                  "name": "previousState",
                  "type": "Partial<CharacterState>",
                  "optional": true
                },
                "changeType": {
                  "name": "changeType",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 125
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "CharacterAppearanceEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "CharacterAppearanceEvent",
              "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 章番号 */\r\n    chapterNumber: number;\r\n    /** 重要度 */\r\n    significance: number;\r\n    /** 概要 */\r\n    summary?: string;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": false
                },
                "summary": {
                  "name": "summary",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 139
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "RelationshipCreatedEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "RelationshipCreatedEvent",
              "body": "/** キャラクター1のID */\r\n    char1Id: string;\r\n    /** キャラクター2のID */\r\n    char2Id: string;\r\n    /** 作成された関係性 */\r\n    relationship: Relationship;",
              "properties": {
                "char1Id": {
                  "name": "char1Id",
                  "type": "string",
                  "optional": false
                },
                "char2Id": {
                  "name": "char2Id",
                  "type": "string",
                  "optional": false
                },
                "relationship": {
                  "name": "relationship",
                  "type": "Relationship",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 155
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "RelationshipUpdatedEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "RelationshipUpdatedEvent",
              "body": "/** キャラクター1のID */\r\n    char1Id: string;\r\n    /** キャラクター2のID */\r\n    char2Id: string;\r\n    /** 更新された関係性 */\r\n    relationship: Relationship;\r\n    /** 更新前の関係性 */\r\n    previousRelationship?: Relationship;",
              "properties": {
                "char1Id": {
                  "name": "char1Id",
                  "type": "string",
                  "optional": false
                },
                "char2Id": {
                  "name": "char2Id",
                  "type": "string",
                  "optional": false
                },
                "relationship": {
                  "name": "relationship",
                  "type": "Relationship",
                  "optional": false
                },
                "previousRelationship": {
                  "name": "previousRelationship",
                  "type": "Relationship",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 167
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "RelationshipDeletedEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "RelationshipDeletedEvent",
              "body": "/** キャラクター1のID */\r\n    char1Id: string;\r\n    /** キャラクター2のID */\r\n    char2Id: string;\r\n    /** 削除された関係性タイプ */\r\n    relationType: string;",
              "properties": {
                "char1Id": {
                  "name": "char1Id",
                  "type": "string",
                  "optional": false
                },
                "char2Id": {
                  "name": "char2Id",
                  "type": "string",
                  "optional": false
                },
                "relationType": {
                  "name": "relationType",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 181
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "RelationshipStrengthenedEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "RelationshipStrengthenedEvent",
              "body": "/** キャラクター1のID */\r\n    char1Id: string;\r\n    /** キャラクター2のID */\r\n    char2Id: string;\r\n    /** 関係性タイプ */\r\n    relationType: string;\r\n    /** 以前の強度 */\r\n    previousStrength: number;\r\n    /** 新しい強度 */\r\n    newStrength: number;\r\n    /** 強化の理由 */\r\n    reason?: string;",
              "properties": {
                "char1Id": {
                  "name": "char1Id",
                  "type": "string",
                  "optional": false
                },
                "char2Id": {
                  "name": "char2Id",
                  "type": "string",
                  "optional": false
                },
                "relationType": {
                  "name": "relationType",
                  "type": "string",
                  "optional": false
                },
                "previousStrength": {
                  "name": "previousStrength",
                  "type": "number",
                  "optional": false
                },
                "newStrength": {
                  "name": "newStrength",
                  "type": "number",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 193
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "RelationshipWeakenedEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "RelationshipWeakenedEvent",
              "body": "/** キャラクター1のID */\r\n    char1Id: string;\r\n    /** キャラクター2のID */\r\n    char2Id: string;\r\n    /** 関係性タイプ */\r\n    relationType: string;\r\n    /** 以前の強度 */\r\n    previousStrength: number;\r\n    /** 新しい強度 */\r\n    newStrength: number;\r\n    /** 弱化の理由 */\r\n    reason?: string;",
              "properties": {
                "char1Id": {
                  "name": "char1Id",
                  "type": "string",
                  "optional": false
                },
                "char2Id": {
                  "name": "char2Id",
                  "type": "string",
                  "optional": false
                },
                "relationType": {
                  "name": "relationType",
                  "type": "string",
                  "optional": false
                },
                "previousStrength": {
                  "name": "previousStrength",
                  "type": "number",
                  "optional": false
                },
                "newStrength": {
                  "name": "newStrength",
                  "type": "number",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 211
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "ParameterChangedEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "ParameterChangedEvent",
              "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** パラメータID */\r\n    parameterId: string;\r\n    /** パラメータ名 */\r\n    parameterName: string;\r\n    /** 以前の値 */\r\n    oldValue: number;\r\n    /** 新しい値 */\r\n    newValue: number;\r\n    /** 変更理由 */\r\n    reason?: string;\r\n    /** パラメータオブジェクト */\r\n    parameter?: CharacterParameter;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "parameterId": {
                  "name": "parameterId",
                  "type": "string",
                  "optional": false
                },
                "parameterName": {
                  "name": "parameterName",
                  "type": "string",
                  "optional": false
                },
                "oldValue": {
                  "name": "oldValue",
                  "type": "number",
                  "optional": false
                },
                "newValue": {
                  "name": "newValue",
                  "type": "number",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": true
                },
                "parameter": {
                  "name": "parameter",
                  "type": "CharacterParameter",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 231
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "SkillAcquiredEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "SkillAcquiredEvent",
              "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** スキルID */\r\n    skillId: string;\r\n    /** スキル名 */\r\n    skillName: string;\r\n    /** スキルレベル */\r\n    level: number;\r\n    /** 取得方法 */\r\n    acquisitionMethod?: string;\r\n    /** スキルオブジェクト */\r\n    skill?: Skill;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "skillId": {
                  "name": "skillId",
                  "type": "string",
                  "optional": false
                },
                "skillName": {
                  "name": "skillName",
                  "type": "string",
                  "optional": false
                },
                "level": {
                  "name": "level",
                  "type": "number",
                  "optional": false
                },
                "acquisitionMethod": {
                  "name": "acquisitionMethod",
                  "type": "string",
                  "optional": true
                },
                "skill": {
                  "name": "skill",
                  "type": "Skill",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 251
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "SkillLevelUpEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "SkillLevelUpEvent",
              "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** スキルID */\r\n    skillId: string;\r\n    /** スキル名 */\r\n    skillName: string;\r\n    /** 以前のレベル */\r\n    oldLevel: number;\r\n    /** 新しいレベル */\r\n    newLevel: number;\r\n    /** レベルアップ理由 */\r\n    reason?: string;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "skillId": {
                  "name": "skillId",
                  "type": "string",
                  "optional": false
                },
                "skillName": {
                  "name": "skillName",
                  "type": "string",
                  "optional": false
                },
                "oldLevel": {
                  "name": "oldLevel",
                  "type": "number",
                  "optional": false
                },
                "newLevel": {
                  "name": "newLevel",
                  "type": "number",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 269
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "SkillProficiencyChangedEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "SkillProficiencyChangedEvent",
              "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** スキルID */\r\n    skillId: string;\r\n    /** 以前の習熟度 */\r\n    oldProficiency: number;\r\n    /** 新しい習熟度 */\r\n    newProficiency: number;\r\n    /** 変更理由 */\r\n    reason?: string;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "skillId": {
                  "name": "skillId",
                  "type": "string",
                  "optional": false
                },
                "oldProficiency": {
                  "name": "oldProficiency",
                  "type": "number",
                  "optional": false
                },
                "newProficiency": {
                  "name": "newProficiency",
                  "type": "number",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 287
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "DevelopmentStageChangedEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "DevelopmentStageChangedEvent",
              "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 以前の段階 */\r\n    oldStage: number;\r\n    /** 新しい段階 */\r\n    newStage: number;\r\n    /** 変更理由 */\r\n    reason: string;\r\n    /** 変更の章番号 */\r\n    chapterNumber?: number;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "oldStage": {
                  "name": "oldStage",
                  "type": "number",
                  "optional": false
                },
                "newStage": {
                  "name": "newStage",
                  "type": "number",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 305
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "GrowthPlanStartedEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "GrowthPlanStartedEvent",
              "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 成長計画ID */\r\n    planId: string;\r\n    /** 成長計画名 */\r\n    planName: string;\r\n    /** 開始章 */\r\n    startChapter: number;\r\n    /** 成長計画オブジェクト */\r\n    plan: GrowthPlan;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "planId": {
                  "name": "planId",
                  "type": "string",
                  "optional": false
                },
                "planName": {
                  "name": "planName",
                  "type": "string",
                  "optional": false
                },
                "startChapter": {
                  "name": "startChapter",
                  "type": "number",
                  "optional": false
                },
                "plan": {
                  "name": "plan",
                  "type": "GrowthPlan",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 321
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "GrowthPlanCompletedEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "GrowthPlanCompletedEvent",
              "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 成長計画ID */\r\n    planId: string;\r\n    /** 成長計画名 */\r\n    planName: string;\r\n    /** 開始章 */\r\n    startChapter: number;\r\n    /** 完了章 */\r\n    completionChapter: number;\r\n    /** 結果の概要 */\r\n    summary: string;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "planId": {
                  "name": "planId",
                  "type": "string",
                  "optional": false
                },
                "planName": {
                  "name": "planName",
                  "type": "string",
                  "optional": false
                },
                "startChapter": {
                  "name": "startChapter",
                  "type": "number",
                  "optional": false
                },
                "completionChapter": {
                  "name": "completionChapter",
                  "type": "number",
                  "optional": false
                },
                "summary": {
                  "name": "summary",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 337
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "GrowthPhaseCompletedEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "GrowthPhaseCompletedEvent",
              "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 成長計画ID */\r\n    planId: string;\r\n    /** フェーズID */\r\n    phaseId: string;\r\n    /** フェーズ名 */\r\n    phaseName: string;\r\n    /** 完了章 */\r\n    chapterNumber: number;\r\n    /** 次のフェーズ */\r\n    nextPhase?: string;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "planId": {
                  "name": "planId",
                  "type": "string",
                  "optional": false
                },
                "phaseId": {
                  "name": "phaseId",
                  "type": "string",
                  "optional": false
                },
                "phaseName": {
                  "name": "phaseName",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "nextPhase": {
                  "name": "nextPhase",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 355
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "MilestoneAchievedEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "MilestoneAchievedEvent",
              "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** マイルストーン段階 */\r\n    stage: number;\r\n    /** マイルストーンの説明 */\r\n    description: string;\r\n    /** 達成章 */\r\n    chapterNumber: number;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "stage": {
                  "name": "stage",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 373
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "CharacterAnalyzedEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "CharacterAnalyzedEvent",
              "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 分析タイプ */\r\n    analysisType: string;\r\n    /** 分析結果 */\r\n    result: any;\r\n    /** 心理分析結果 */\r\n    psychology?: CharacterPsychology;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "analysisType": {
                  "name": "analysisType",
                  "type": "string",
                  "optional": false
                },
                "result": {
                  "name": "result",
                  "type": "any",
                  "optional": false
                },
                "psychology": {
                  "name": "psychology",
                  "type": "CharacterPsychology",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 389
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "RelationshipAnalyzedEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "RelationshipAnalyzedEvent",
              "body": "/** 分析タイプ */\r\n    analysisType: string;\r\n    /** 分析結果 */\r\n    result: any;\r\n    /** 対象キャラクターIDs */\r\n    characterIds?: string[];",
              "properties": {
                "analysisType": {
                  "name": "analysisType",
                  "type": "string",
                  "optional": false
                },
                "result": {
                  "name": "result",
                  "type": "any",
                  "optional": false
                },
                "characterIds": {
                  "name": "characterIds",
                  "type": "string[]",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 403
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "ConsistencyViolationEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "ConsistencyViolationEvent",
              "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 違反タイプ */\r\n    violationType: string;\r\n    /** 違反の説明 */\r\n    description: string;\r\n    /** 違反の重大度 (0-1) */\r\n    severity: number;\r\n    /** 推奨される修正 */\r\n    suggestedFix?: string;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "violationType": {
                  "name": "violationType",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "severity": {
                  "name": "severity",
                  "type": "number",
                  "optional": false
                },
                "suggestedFix": {
                  "name": "suggestedFix",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 415
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "TimingRecommendationEvent": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "TimingRecommendationEvent",
              "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 推奨事項 */\r\n    recommendation: TimingRecommendation;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "recommendation": {
                  "name": "recommendation",
                  "type": "TimingRecommendation",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 431
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "EventTypeToPayloadMap": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "EventTypeToPayloadMap",
              "body": "[EventTypes.CHARACTER_CREATED]: CharacterCreatedEvent;\r\n    [EventTypes.CHARACTER_UPDATED]: CharacterUpdatedEvent;\r\n    [EventTypes.CHARACTER_DELETED]: CharacterDeletedEvent;\r\n    [EventTypes.CHARACTER_PROMOTED]: CharacterPromotedEvent;\r\n    [EventTypes.CHARACTER_DEMOTED]: CharacterDemotedEvent;\r\n    [EventTypes.CHARACTER_STATE_CHANGED]: CharacterStateChangedEvent;\r\n    [EventTypes.CHARACTER_APPEARANCE]: CharacterAppearanceEvent;\r\n\r\n    [EventTypes.RELATIONSHIP_CREATED]: RelationshipCreatedEvent;\r\n    [EventTypes.RELATIONSHIP_UPDATED]: RelationshipUpdatedEvent;\r\n    [EventTypes.RELATIONSHIP_DELETED]: RelationshipDeletedEvent;\r\n    [EventTypes.RELATIONSHIP_STRENGTHENED]: RelationshipStrengthenedEvent;\r\n    [EventTypes.RELATIONSHIP_WEAKENED]: RelationshipWeakenedEvent;\r\n\r\n    [EventTypes.PARAMETER_CHANGED]: ParameterChangedEvent;\r\n    [EventTypes.SKILL_ACQUIRED]: SkillAcquiredEvent;\r\n    [EventTypes.SKILL_LEVEL_UP]: SkillLevelUpEvent;\r\n    [EventTypes.SKILL_PROFICIENCY_CHANGED]: SkillProficiencyChangedEvent;\r\n\r\n    [EventTypes.DEVELOPMENT_STAGE_CHANGED]: DevelopmentStageChangedEvent;\r\n    [EventTypes.GROWTH_PLAN_STARTED]: GrowthPlanStartedEvent;\r\n    [EventTypes.GROWTH_PLAN_COMPLETED]: GrowthPlanCompletedEvent;\r\n    [EventTypes.GROWTH_PHASE_COMPLETED]: GrowthPhaseCompletedEvent;\r\n    [EventTypes.MILESTONE_ACHIEVED]: MilestoneAchievedEvent;\r\n\r\n    [EventTypes.CHARACTER_ANALYZED]: CharacterAnalyzedEvent;\r\n    [EventTypes.RELATIONSHIP_ANALYZED]: RelationshipAnalyzedEvent;\r\n    [EventTypes.CONSISTENCY_VIOLATION]: ConsistencyViolationEvent;\r\n    [EventTypes.TIMING_RECOMMENDATION]: TimingRecommendationEvent;",
              "properties": {},
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 443
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "EventHandlerRegistration": [
          {
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "EventHandlerRegistration",
              "body": "/** イベントタイプ */\r\n    eventType: E;\r\n    /** イベントハンドラー */\r\n    handler: TypedEventHandler<E>;\r\n    /** 優先度 */\r\n    priority: EventPriority;",
              "properties": {
                "eventType": {
                  "name": "eventType",
                  "type": "E",
                  "optional": false
                },
                "handler": {
                  "name": "handler",
                  "type": "TypedEventHandler<E>",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "EventPriority",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 478
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "TypedEventHandler": [
          {
            "type": "type",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "TypedEventHandler",
              "definition": "(data: EventTypeToPayloadMap[E]) => void | Promise<void>",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": true,
              "lineNumber": 514
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "LogLevel": [
          {
            "type": "enum",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "LogLevel",
              "body": "DEBUG = 0,\r\n    INFO = 1,\r\n    WARNING = 2,\r\n    ERROR = 3,\r\n    NONE = 4",
              "values": [
                {
                  "name": "DEBUG",
                  "value": "0"
                },
                {
                  "name": "INFO",
                  "value": "1"
                },
                {
                  "name": "WARNING",
                  "value": "2"
                },
                {
                  "name": "ERROR",
                  "value": "3"
                },
                {
                  "name": "NONE",
                  "value": "4"
                }
              ],
              "lineNumber": 22
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "EventPriority": [
          {
            "type": "enum",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "EventPriority",
              "body": "LOWEST = 0,\r\n    LOW = 1,\r\n    NORMAL = 2,\r\n    HIGH = 3,\r\n    HIGHEST = 4,\r\n    CRITICAL = 5",
              "values": [
                {
                  "name": "LOWEST",
                  "value": "0"
                },
                {
                  "name": "LOW",
                  "value": "1"
                },
                {
                  "name": "NORMAL",
                  "value": "2"
                },
                {
                  "name": "HIGH",
                  "value": "3"
                },
                {
                  "name": "HIGHEST",
                  "value": "4"
                },
                {
                  "name": "CRITICAL",
                  "value": "5"
                }
              ],
              "lineNumber": 33
            },
            "system": "characters",
            "module": "characters/events"
          }
        ],
        "EventCategory": [
          {
            "type": "enum",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "EventCategory",
              "body": "CHARACTER = 'character',\r\n    RELATIONSHIP = 'relationship',\r\n    PARAMETER = 'parameter',\r\n    SKILL = 'skill',\r\n    DEVELOPMENT = 'development',\r\n    ANALYSIS = 'analysis'",
              "values": [
                {
                  "name": "CHARACTER",
                  "value": "'character'"
                },
                {
                  "name": "RELATIONSHIP",
                  "value": "'relationship'"
                },
                {
                  "name": "PARAMETER",
                  "value": "'parameter'"
                },
                {
                  "name": "SKILL",
                  "value": "'skill'"
                },
                {
                  "name": "DEVELOPMENT",
                  "value": "'development'"
                },
                {
                  "name": "ANALYSIS",
                  "value": "'analysis'"
                }
              ],
              "lineNumber": 51
            },
            "system": "characters",
            "module": "characters/events"
          }
        ]
      },
      "foreshadowing": {
        "UnifiedForeshadowingSystemConfig": [
          {
            "type": "interface",
            "file": "lib\\foreshadowing\\index.ts",
            "definition": {
              "name": "UnifiedForeshadowingSystemConfig",
              "body": "memoryManager: MemoryManager;\n    enableAdvancedResolution?: boolean;\n    enablePerformanceOptimization?: boolean;\n    enableSystemDiagnostics?: boolean;\n    maxConcurrentOperations?: number;\n    cacheOptimizationLevel?: 'low' | 'medium' | 'high';",
              "properties": {
                "memoryManager": {
                  "name": "memoryManager",
                  "type": "MemoryManager",
                  "optional": false
                },
                "enableAdvancedResolution": {
                  "name": "enableAdvancedResolution",
                  "type": "boolean",
                  "optional": true
                },
                "enablePerformanceOptimization": {
                  "name": "enablePerformanceOptimization",
                  "type": "boolean",
                  "optional": true
                },
                "enableSystemDiagnostics": {
                  "name": "enableSystemDiagnostics",
                  "type": "boolean",
                  "optional": true
                },
                "maxConcurrentOperations": {
                  "name": "maxConcurrentOperations",
                  "type": "number",
                  "optional": true
                },
                "cacheOptimizationLevel": {
                  "name": "cacheOptimizationLevel",
                  "type": "'low' | 'medium' | 'high'",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 23
            },
            "system": "foreshadowing",
            "module": "foreshadowing"
          }
        ],
        "UnifiedProcessingResult": [
          {
            "type": "interface",
            "file": "lib\\foreshadowing\\index.ts",
            "definition": {
              "name": "UnifiedProcessingResult",
              "body": "success: boolean;\n    foreshadowingResults: {\n        generatedCount: number;\n        savedCount: number;\n        resolutionSuggestions: number;",
              "properties": {
                "success": {
                  "name": "success",
                  "type": "boolean",
                  "optional": false
                },
                "foreshadowingResults": {
                  "name": "foreshadowingResults",
                  "type": "{",
                  "optional": false
                },
                "generatedCount": {
                  "name": "generatedCount",
                  "type": "number",
                  "optional": false
                },
                "savedCount": {
                  "name": "savedCount",
                  "type": "number",
                  "optional": false
                },
                "resolutionSuggestions": {
                  "name": "resolutionSuggestions",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 35
            },
            "system": "foreshadowing",
            "module": "foreshadowing"
          }
        ],
        "SystemDiagnosticsResult": [
          {
            "type": "interface",
            "file": "lib\\foreshadowing\\index.ts",
            "definition": {
              "name": "SystemDiagnosticsResult",
              "body": "overallHealth: 'HEALTHY' | 'DEGRADED' | 'CRITICAL';\n    componentHealth: {\n        engine: 'HEALTHY' | 'DEGRADED' | 'CRITICAL';\n        manager: 'HEALTHY' | 'DEGRADED' | 'CRITICAL';\n        resolutionAdvisor: 'HEALTHY' | 'DEGRADED' | 'CRITICAL';\n        memorySystem: 'HEALTHY' | 'DEGRADED' | 'CRITICAL';",
              "properties": {
                "overallHealth": {
                  "name": "overallHealth",
                  "type": "'HEALTHY' | 'DEGRADED' | 'CRITICAL'",
                  "optional": false
                },
                "componentHealth": {
                  "name": "componentHealth",
                  "type": "{",
                  "optional": false
                },
                "engine": {
                  "name": "engine",
                  "type": "'HEALTHY' | 'DEGRADED' | 'CRITICAL'",
                  "optional": false
                },
                "manager": {
                  "name": "manager",
                  "type": "'HEALTHY' | 'DEGRADED' | 'CRITICAL'",
                  "optional": false
                },
                "resolutionAdvisor": {
                  "name": "resolutionAdvisor",
                  "type": "'HEALTHY' | 'DEGRADED' | 'CRITICAL'",
                  "optional": false
                },
                "memorySystem": {
                  "name": "memorySystem",
                  "type": "'HEALTHY' | 'DEGRADED' | 'CRITICAL'",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 55
            },
            "system": "foreshadowing",
            "module": "foreshadowing"
          }
        ]
      },
      "generation": {},
      "learning-journey": {
        "LearningJourneySystemConfig": [
          {
            "type": "interface",
            "file": "lib\\learning-journey\\index.ts",
            "definition": {
              "name": "LearningJourneySystemConfig",
              "body": "// 統合記憶システム設定\n    memorySystemIntegration: {\n        enabled: boolean;\n        maxRetries: number;\n        timeoutMs: number;\n        fallbackEnabled: boolean;",
              "properties": {
                "memorySystemIntegration": {
                  "name": "memorySystemIntegration",
                  "type": "{",
                  "optional": false
                },
                "enabled": {
                  "name": "enabled",
                  "type": "boolean",
                  "optional": false
                },
                "maxRetries": {
                  "name": "maxRetries",
                  "type": "number",
                  "optional": false
                },
                "timeoutMs": {
                  "name": "timeoutMs",
                  "type": "number",
                  "optional": false
                },
                "fallbackEnabled": {
                  "name": "fallbackEnabled",
                  "type": "boolean",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 78
            },
            "system": "learning-journey",
            "module": "learning-journey"
          }
        ],
        "SystemStatistics": [
          {
            "type": "interface",
            "file": "lib\\learning-journey\\index.ts",
            "definition": {
              "name": "SystemStatistics",
              "body": "initialization: {\n        totalTime: number;\n        componentsInitialized: number;\n        componentsActive: number;\n        memorySystemIntegrated: boolean;",
              "properties": {
                "initialization": {
                  "name": "initialization",
                  "type": "{",
                  "optional": false
                },
                "totalTime": {
                  "name": "totalTime",
                  "type": "number",
                  "optional": false
                },
                "componentsInitialized": {
                  "name": "componentsInitialized",
                  "type": "number",
                  "optional": false
                },
                "componentsActive": {
                  "name": "componentsActive",
                  "type": "number",
                  "optional": false
                },
                "memorySystemIntegrated": {
                  "name": "memorySystemIntegrated",
                  "type": "boolean",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 113
            },
            "system": "learning-journey",
            "module": "learning-journey"
          }
        ],
        "ComponentStatus": [
          {
            "type": "interface",
            "file": "lib\\learning-journey\\index.ts",
            "definition": {
              "name": "ComponentStatus",
              "body": "conceptManager: { initialized: boolean; functional: boolean;",
              "properties": {
                "conceptManager": {
                  "name": "conceptManager",
                  "type": "{ initialized: boolean",
                  "optional": false
                },
                "functional": {
                  "name": "functional",
                  "type": "boolean",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 135
            },
            "system": "learning-journey",
            "module": "learning-journey"
          }
        ],
        "StandardComponentStatus": [
          {
            "type": "interface",
            "file": "lib\\learning-journey\\index.ts",
            "definition": {
              "name": "StandardComponentStatus",
              "body": "initialized: boolean;\n    functional: boolean;",
              "properties": {
                "initialized": {
                  "name": "initialized",
                  "type": "boolean",
                  "optional": false
                },
                "functional": {
                  "name": "functional",
                  "type": "boolean",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 147
            },
            "system": "learning-journey",
            "module": "learning-journey"
          }
        ],
        "LocalMemorySystemStatus": [
          {
            "type": "interface",
            "file": "lib\\learning-journey\\index.ts",
            "definition": {
              "name": "LocalMemorySystemStatus",
              "body": "initialized: boolean;\n    healthy: boolean;",
              "properties": {
                "initialized": {
                  "name": "initialized",
                  "type": "boolean",
                  "optional": false
                },
                "healthy": {
                  "name": "healthy",
                  "type": "boolean",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 155
            },
            "system": "learning-journey",
            "module": "learning-journey"
          }
        ]
      },
      "lifecycle": {},
      "memory": {
        "OperationResult": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "OperationResult",
              "body": "// ✅ export を削除\r\n  success: boolean;\r\n  error?: string;\r\n  processingTime?: number;\r\n  metadata?: Record<string, any>;",
              "properties": {
                "success": {
                  "name": "success",
                  "type": "boolean",
                  "optional": false
                },
                "error": {
                  "name": "error",
                  "type": "string",
                  "optional": true
                },
                "processingTime": {
                  "name": "processingTime",
                  "type": "number",
                  "optional": true
                },
                "metadata": {
                  "name": "metadata",
                  "type": "Record<string",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 18
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "DiagnosticsResult": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "DiagnosticsResult",
              "body": "// ✅ export を削除\r\n  healthy: boolean;\r\n  issues: string[];\r\n  metrics: Record<string, number>;\r\n  lastCheck: string;",
              "properties": {
                "healthy": {
                  "name": "healthy",
                  "type": "boolean",
                  "optional": false
                },
                "issues": {
                  "name": "issues",
                  "type": "string[]",
                  "optional": false
                },
                "metrics": {
                  "name": "metrics",
                  "type": "Record<string",
                  "optional": false
                },
                "lastCheck": {
                  "name": "lastCheck",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 28
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "StatusResult": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "StatusResult",
              "body": "// ✅ export を削除\r\n  initialized: boolean;\r\n  dataCount: number;\r\n  lastUpdate: string;\r\n  memoryUsage?: number;",
              "properties": {
                "initialized": {
                  "name": "initialized",
                  "type": "boolean",
                  "optional": false
                },
                "dataCount": {
                  "name": "dataCount",
                  "type": "number",
                  "optional": false
                },
                "lastUpdate": {
                  "name": "lastUpdate",
                  "type": "string",
                  "optional": false
                },
                "memoryUsage": {
                  "name": "memoryUsage",
                  "type": "number",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 38
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "IMemoryLayer": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "IMemoryLayer",
              "body": "// ✅ export を削除\r\n  initialize(): Promise<void>;\r\n  addChapter(chapter: Chapter): Promise<OperationResult>;\r\n  getDiagnostics(): Promise<DiagnosticsResult>;\r\n  getStatus(): Promise<StatusResult>;\r\n  getDataSize(): Promise<number>;\r\n  save(): Promise<void>;\r\n  cleanup(): Promise<void>;\r\n  \r\n  // 追加メソッド（必要に応じて各層で実装）\r\n  getContext?(request: any): Promise<any>;\r\n  compress?(): Promise<OperationResult>;",
              "properties": {
                "chapter": {
                  "name": "chapter",
                  "type": "Chapter): Promise<OperationResult>",
                  "optional": false
                },
                "request": {
                  "name": "request",
                  "type": "any): Promise<any>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 53
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "IIntegrationComponent": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "IIntegrationComponent",
              "body": "// ✅ export を削除\r\n  initialize(): Promise<void>;\r\n  getDiagnostics(): Promise<DiagnosticsResult>;\r\n  cleanup(): Promise<void>;",
              "properties": {},
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 74
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "CacheStatisticsData": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "CacheStatisticsData",
              "body": "// ✅ export を削除\r\n  hitRatio: number;\r\n  missRatio: number;\r\n  totalRequests: number;\r\n  cacheSize: number;\r\n  lastOptimization: string;\r\n  hitRate?: number; // 互換性のため\r\n  avgAccessTime?: number; // 互換性のため\r\n  memoryUsage?: {\r\n    shortTerm: number;\r\n    midTerm: number;\r\n    longTerm: number;",
              "properties": {
                "hitRatio": {
                  "name": "hitRatio",
                  "type": "number",
                  "optional": false
                },
                "missRatio": {
                  "name": "missRatio",
                  "type": "number",
                  "optional": false
                },
                "totalRequests": {
                  "name": "totalRequests",
                  "type": "number",
                  "optional": false
                },
                "cacheSize": {
                  "name": "cacheSize",
                  "type": "number",
                  "optional": false
                },
                "lastOptimization": {
                  "name": "lastOptimization",
                  "type": "string",
                  "optional": false
                },
                "hitRate": {
                  "name": "hitRate",
                  "type": "number",
                  "optional": true
                },
                "avgAccessTime": {
                  "name": "avgAccessTime",
                  "type": "number",
                  "optional": true
                },
                "memoryUsage": {
                  "name": "memoryUsage",
                  "type": "{",
                  "optional": true
                },
                "shortTerm": {
                  "name": "shortTerm",
                  "type": "number",
                  "optional": false
                },
                "midTerm": {
                  "name": "midTerm",
                  "type": "number",
                  "optional": false
                },
                "longTerm": {
                  "name": "longTerm",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 87
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "CacheStatisticsData",
              "body": "// UnifiedAccessAPI 用プロパティ\n    hitRatio: number;\n    missRatio: number;\n    totalRequests: number;\n    cacheSize: number;\n    lastOptimization: string;\n    evictionCount: number;\n    \n    // CacheCoordinator 用プロパティ（互換性のため）\n    totalEntries?: number;\n    hitRate?: number;\n    avgAccessTime?: number;\n    memoryUsage?: {\n        shortTerm: number;\n        midTerm: number;\n        longTerm: number;",
              "properties": {
                "hitRatio": {
                  "name": "hitRatio",
                  "type": "number",
                  "optional": false
                },
                "missRatio": {
                  "name": "missRatio",
                  "type": "number",
                  "optional": false
                },
                "totalRequests": {
                  "name": "totalRequests",
                  "type": "number",
                  "optional": false
                },
                "cacheSize": {
                  "name": "cacheSize",
                  "type": "number",
                  "optional": false
                },
                "lastOptimization": {
                  "name": "lastOptimization",
                  "type": "string",
                  "optional": false
                },
                "evictionCount": {
                  "name": "evictionCount",
                  "type": "number",
                  "optional": false
                },
                "totalEntries": {
                  "name": "totalEntries",
                  "type": "number",
                  "optional": true
                },
                "hitRate": {
                  "name": "hitRate",
                  "type": "number",
                  "optional": true
                },
                "avgAccessTime": {
                  "name": "avgAccessTime",
                  "type": "number",
                  "optional": true
                },
                "memoryUsage": {
                  "name": "memoryUsage",
                  "type": "{",
                  "optional": true
                },
                "shortTerm": {
                  "name": "shortTerm",
                  "type": "number",
                  "optional": false
                },
                "midTerm": {
                  "name": "midTerm",
                  "type": "number",
                  "optional": false
                },
                "longTerm": {
                  "name": "longTerm",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 352
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "ICacheCoordinator": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "ICacheCoordinator",
              "body": "// ✅ export を削除\r\n  invalidateChapterCache(chapterNumber: number): Promise<void>;\r\n  validateCacheHealth(): Promise<{ isHealthy: boolean; issues: string[]",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number): Promise<void>",
                  "optional": false
                },
                "isHealthy": {
                  "name": "isHealthy",
                  "type": "boolean",
                  "optional": false
                },
                "issues": {
                  "name": "issues",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 106
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "MemoryQuery": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "MemoryQuery",
              "body": "// ✅ export を削除\r\n  type: 'worldSettings' | 'characterInfo' | 'chapterMemories' | 'arcMemory' | 'keyEvents' | 'search';\r\n  target?: string | number;\r\n  parameters?: Record<string, any>;\r\n  options?: {\r\n    useCache?: boolean;\r\n    forceRefresh?: boolean;\r\n    includeMetadata?: boolean;",
              "properties": {
                "type": {
                  "name": "type",
                  "type": "'worldSettings' | 'characterInfo' | 'chapterMemories' | 'arcMemory' | 'keyEvents' | 'search'",
                  "optional": false
                },
                "target": {
                  "name": "target",
                  "type": "string | number",
                  "optional": true
                },
                "parameters": {
                  "name": "parameters",
                  "type": "Record<string",
                  "optional": true
                },
                "options": {
                  "name": "options",
                  "type": "{",
                  "optional": true
                },
                "useCache": {
                  "name": "useCache",
                  "type": "boolean",
                  "optional": true
                },
                "forceRefresh": {
                  "name": "forceRefresh",
                  "type": "boolean",
                  "optional": true
                },
                "includeMetadata": {
                  "name": "includeMetadata",
                  "type": "boolean",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 128
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "MemoryResult": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "MemoryResult",
              "body": "// ✅ export を削除\r\n  success: boolean;\r\n  data: any;\r\n  source: 'cache' | 'short-term' | 'mid-term' | 'long-term' | 'unified';\r\n  timestamp: string;\r\n  metadata?: {\r\n    cacheHit: boolean;\r\n    processingTime: number;\r\n    dataFreshness: number;\r\n    conflictsResolved: string[];",
              "properties": {
                "success": {
                  "name": "success",
                  "type": "boolean",
                  "optional": false
                },
                "data": {
                  "name": "data",
                  "type": "any",
                  "optional": false
                },
                "source": {
                  "name": "source",
                  "type": "'cache' | 'short-term' | 'mid-term' | 'long-term' | 'unified'",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "metadata": {
                  "name": "metadata",
                  "type": "{",
                  "optional": true
                },
                "cacheHit": {
                  "name": "cacheHit",
                  "type": "boolean",
                  "optional": false
                },
                "processingTime": {
                  "name": "processingTime",
                  "type": "number",
                  "optional": false
                },
                "dataFreshness": {
                  "name": "dataFreshness",
                  "type": "number",
                  "optional": false
                },
                "conflictsResolved": {
                  "name": "conflictsResolved",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 142
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "IDuplicateResolver": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "IDuplicateResolver",
              "body": "// ✅ export を削除\r\n  detectChapterDuplicates(chapter: Chapter): Promise<any[]>;\r\n  resolveDuplicates(duplicates: any[]): Promise<void>;\r\n  performCleanup(): Promise<{ cleaned: boolean; removedCount: number",
              "properties": {
                "chapter": {
                  "name": "chapter",
                  "type": "Chapter): Promise<any[]>",
                  "optional": false
                },
                "duplicates": {
                  "name": "duplicates",
                  "type": "any[]): Promise<void>",
                  "optional": false
                },
                "cleaned": {
                  "name": "cleaned",
                  "type": "boolean",
                  "optional": false
                },
                "removedCount": {
                  "name": "removedCount",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 158
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "AccessStatisticsData": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "AccessStatisticsData",
              "body": "// ✅ export を削除\r\n  totalAccesses: number;\r\n  averageAccessTime: number;\r\n  cacheHitRate: number;\r\n  consistencyScore: number;\r\n  optimizationEffectiveness: number;\r\n  performanceGain: number;\r\n  strategyDistribution: Record<string, number>;\r\n  levelDistribution: Record<string, number>;",
              "properties": {
                "totalAccesses": {
                  "name": "totalAccesses",
                  "type": "number",
                  "optional": false
                },
                "averageAccessTime": {
                  "name": "averageAccessTime",
                  "type": "number",
                  "optional": false
                },
                "cacheHitRate": {
                  "name": "cacheHitRate",
                  "type": "number",
                  "optional": false
                },
                "consistencyScore": {
                  "name": "consistencyScore",
                  "type": "number",
                  "optional": false
                },
                "optimizationEffectiveness": {
                  "name": "optimizationEffectiveness",
                  "type": "number",
                  "optional": false
                },
                "performanceGain": {
                  "name": "performanceGain",
                  "type": "number",
                  "optional": false
                },
                "strategyDistribution": {
                  "name": "strategyDistribution",
                  "type": "Record<string",
                  "optional": false
                },
                "levelDistribution": {
                  "name": "levelDistribution",
                  "type": "Record<string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 176
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "IAccessOptimizer": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "IAccessOptimizer",
              "body": "// ✅ export を削除\r\n  optimizedAccess<T>(query: MemoryQuery, strategy?: string): Promise<any>;\r\n  getStatistics(): AccessStatisticsData;\r\n  updateConfiguration(config: any): void;",
              "properties": {
                "query": {
                  "name": "query",
                  "type": "MemoryQuery",
                  "optional": false
                },
                "strategy": {
                  "name": "strategy",
                  "type": "string): Promise<any>",
                  "optional": true
                },
                "config": {
                  "name": "config",
                  "type": "any): void",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 190
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "QualityMetricsData": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "QualityMetricsData",
              "body": "// ✅ export を削除\r\n  dataIntegrity: {\r\n    score: number;\r\n    violations: number;\r\n    lastValidation: number;\r\n    criticalIssues: string[];",
              "properties": {
                "dataIntegrity": {
                  "name": "dataIntegrity",
                  "type": "{",
                  "optional": false
                },
                "score": {
                  "name": "score",
                  "type": "number",
                  "optional": false
                },
                "violations": {
                  "name": "violations",
                  "type": "number",
                  "optional": false
                },
                "lastValidation": {
                  "name": "lastValidation",
                  "type": "number",
                  "optional": false
                },
                "criticalIssues": {
                  "name": "criticalIssues",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 203
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "QualityMetricsData",
              "body": "chapterQualityHistory: ChapterQualityRecord[];\n    systemQualityMetrics: SystemQualityMetricsRecord[];\n    diagnosticHistory: DiagnosticHistoryRecord[];\n    systemHealthMetrics: SystemHealthMetricsRecord[];",
              "properties": {
                "chapterQualityHistory": {
                  "name": "chapterQualityHistory",
                  "type": "ChapterQualityRecord[]",
                  "optional": false
                },
                "systemQualityMetrics": {
                  "name": "systemQualityMetrics",
                  "type": "SystemQualityMetricsRecord[]",
                  "optional": false
                },
                "diagnosticHistory": {
                  "name": "diagnosticHistory",
                  "type": "DiagnosticHistoryRecord[]",
                  "optional": false
                },
                "systemHealthMetrics": {
                  "name": "systemHealthMetrics",
                  "type": "SystemHealthMetricsRecord[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 280
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "ComprehensiveDiagnosticResult": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "ComprehensiveDiagnosticResult",
              "body": "// ✅ export を削除\r\n  overallHealth: number;\r\n  issues: Array<{\r\n    id: string;\r\n    severity: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW';\r\n    category: 'DATA_INTEGRITY' | 'SYSTEM_STABILITY' | 'PERFORMANCE' | 'OPERATIONAL';\r\n    title: string;\r\n    description: string;\r\n    impact: string;\r\n    recommendation: string;\r\n    detectedAt: number;\r\n    component: string;\r\n    metadata: Record<string, any>;",
              "properties": {
                "overallHealth": {
                  "name": "overallHealth",
                  "type": "number",
                  "optional": false
                },
                "issues": {
                  "name": "issues",
                  "type": "Array<{",
                  "optional": false
                },
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "severity": {
                  "name": "severity",
                  "type": "'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW'",
                  "optional": false
                },
                "category": {
                  "name": "category",
                  "type": "'DATA_INTEGRITY' | 'SYSTEM_STABILITY' | 'PERFORMANCE' | 'OPERATIONAL'",
                  "optional": false
                },
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "string",
                  "optional": false
                },
                "recommendation": {
                  "name": "recommendation",
                  "type": "string",
                  "optional": false
                },
                "detectedAt": {
                  "name": "detectedAt",
                  "type": "number",
                  "optional": false
                },
                "component": {
                  "name": "component",
                  "type": "string",
                  "optional": false
                },
                "metadata": {
                  "name": "metadata",
                  "type": "Record<string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 236
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "IQualityAssurance": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "IQualityAssurance",
              "body": "// ✅ export を削除\r\n  performComprehensiveDiagnostic(): Promise<ComprehensiveDiagnosticResult>;\r\n  getCurrentMetrics(): QualityMetricsData;\r\n  updateConfiguration(config: any): void;\r\n  getLastDiagnosticResult(): ComprehensiveDiagnosticResult | null;\r\n  getIssueHistory(limit?: number): any[];\r\n  generateQualityReport(periodDays?: number): Promise<any>;\r\n  stopMonitoring(): void;",
              "properties": {
                "config": {
                  "name": "config",
                  "type": "any): void",
                  "optional": false
                },
                "limit": {
                  "name": "limit",
                  "type": "number): any[]",
                  "optional": true
                },
                "periodDays": {
                  "name": "periodDays",
                  "type": "number): Promise<any>",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 263
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "ShortTermMemoryConfig": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "ShortTermMemoryConfig",
              "body": "// ✅ export を削除\r\n  maxChapters: number;\r\n  cacheEnabled: boolean;",
              "properties": {
                "maxChapters": {
                  "name": "maxChapters",
                  "type": "number",
                  "optional": false
                },
                "cacheEnabled": {
                  "name": "cacheEnabled",
                  "type": "boolean",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 280
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "IShortTermMemory": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "IShortTermMemory",
              "body": "// ✅ export を削除\r\n  getRecentChapters(limit?: number): Promise<any[]>;\r\n  getCurrentContext(): Promise<any>;\r\n  updateBuffers(data: any): Promise<void>;\r\n  getAnalysisResults(): Promise<any>;",
              "properties": {
                "limit": {
                  "name": "limit",
                  "type": "number): Promise<any[]>",
                  "optional": true
                },
                "data": {
                  "name": "data",
                  "type": "any): Promise<void>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 288
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "IMidTermMemory": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "IMidTermMemory",
              "body": "// ✅ export を削除\r\n  getChapterSummaries(range?: { start: number; end: number",
              "properties": {
                "range": {
                  "name": "range",
                  "type": "{ start: number",
                  "optional": true
                },
                "end": {
                  "name": "end",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 302
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "ILongTermMemory": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "ILongTermMemory",
              "body": "// ✅ export を削除\r\n  getCharacterDatabase(): Promise<any>;\r\n  getWorldKnowledge(): Promise<any>;\r\n  getSystemKnowledge(): Promise<any>;\r\n  getHistoricalRecords(): Promise<any>;\r\n  addForeshadowing(foreshadowing: any): Promise<any>;\r\n  resolveForeshadowing(id: string, resolution: any): Promise<void>;\r\n  getUnresolvedForeshadowing(): Promise<any[]>;\r\n  performLearningAndImprovement(): Promise<any>;",
              "properties": {
                "foreshadowing": {
                  "name": "foreshadowing",
                  "type": "any): Promise<any>",
                  "optional": false
                },
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "resolution": {
                  "name": "resolution",
                  "type": "any): Promise<void>",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 318
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "IUnifiedMemoryManager": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "IUnifiedMemoryManager",
              "body": "// ✅ export を削除\r\n  // 基本操作\r\n  initialize(): Promise<void>;\r\n  addChapter(chapter: Chapter): Promise<OperationResult>;\r\n  save(): Promise<void>;\r\n  cleanup(): Promise<void>;\r\n  \r\n  // 診断・監視\r\n  performComprehensiveDiagnostic(): Promise<ComprehensiveDiagnosticResult>;\r\n  getSystemStatus(): Promise<{\r\n    shortTerm: StatusResult;\r\n    midTerm: StatusResult;\r\n    longTerm: StatusResult;\r\n    integration: StatusResult;",
              "properties": {
                "chapter": {
                  "name": "chapter",
                  "type": "Chapter): Promise<OperationResult>",
                  "optional": false
                },
                "shortTerm": {
                  "name": "shortTerm",
                  "type": "StatusResult",
                  "optional": false
                },
                "midTerm": {
                  "name": "midTerm",
                  "type": "StatusResult",
                  "optional": false
                },
                "longTerm": {
                  "name": "longTerm",
                  "type": "StatusResult",
                  "optional": false
                },
                "integration": {
                  "name": "integration",
                  "type": "StatusResult",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 337
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "MemoryLevel": [
          {
            "type": "enum",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "MemoryLevel",
              "body": "// ✅ enum は直接エクスポート可能\r\n  SHORT_TERM = 'short-term',\r\n  MID_TERM = 'mid-term',\r\n  LONG_TERM = 'long-term'",
              "values": [
                {
                  "name": "// ✅ enum は直接エクスポート可能\r\n  SHORT_TERM",
                  "value": "'short-term'"
                },
                {
                  "name": "MID_TERM",
                  "value": "'mid-term'"
                },
                {
                  "name": "LONG_TERM",
                  "value": "'long-term'"
                }
              ],
              "lineNumber": 374
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "enum",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "MemoryLevel",
              "body": "SHORT_TERM = 'SHORT_TERM',\n    MID_TERM = 'MID_TERM',\n    LONG_TERM = 'LONG_TERM'",
              "values": [
                {
                  "name": "SHORT_TERM",
                  "value": "'SHORT_TERM'"
                },
                {
                  "name": "MID_TERM",
                  "value": "'MID_TERM'"
                },
                {
                  "name": "LONG_TERM",
                  "value": "'LONG_TERM'"
                }
              ],
              "lineNumber": 49
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "AccessStrategy": [
          {
            "type": "enum",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "AccessStrategy",
              "body": "// ✅ enum は直接エクスポート可能\r\n  CACHE_FIRST = 'cache-first',\r\n  CONSISTENCY_FIRST = 'consistency-first',\r\n  PERFORMANCE_FIRST = 'performance-first',\r\n  BALANCED = 'balanced',\r\n  PREDICTIVE = 'predictive'",
              "values": [
                {
                  "name": "// ✅ enum は直接エクスポート可能\r\n  CACHE_FIRST",
                  "value": "'cache-first'"
                },
                {
                  "name": "CONSISTENCY_FIRST",
                  "value": "'consistency-first'"
                },
                {
                  "name": "PERFORMANCE_FIRST",
                  "value": "'performance-first'"
                },
                {
                  "name": "BALANCED",
                  "value": "'balanced'"
                },
                {
                  "name": "PREDICTIVE",
                  "value": "'predictive'"
                }
              ],
              "lineNumber": 383
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "UnifiedSearchResult": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "UnifiedSearchResult",
              "body": "success: boolean;\n    totalResults: number;\n    processingTime: number;\n    results: Array<{\n        source: MemoryLevel;\n        type: string;\n        data: any;\n        relevance: number;\n        metadata: Record<string, any>;",
              "properties": {
                "success": {
                  "name": "success",
                  "type": "boolean",
                  "optional": false
                },
                "totalResults": {
                  "name": "totalResults",
                  "type": "number",
                  "optional": false
                },
                "processingTime": {
                  "name": "processingTime",
                  "type": "number",
                  "optional": false
                },
                "results": {
                  "name": "results",
                  "type": "Array<{",
                  "optional": false
                },
                "source": {
                  "name": "source",
                  "type": "MemoryLevel",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "data": {
                  "name": "data",
                  "type": "any",
                  "optional": false
                },
                "relevance": {
                  "name": "relevance",
                  "type": "number",
                  "optional": false
                },
                "metadata": {
                  "name": "metadata",
                  "type": "Record<string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 19
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "SystemOperationResult": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "SystemOperationResult",
              "body": "success: boolean;\n    operationType: string;\n    processingTime: number;\n    affectedComponents: string[];\n    details: Record<string, any>;\n    warnings: string[];\n    errors: string[];",
              "properties": {
                "success": {
                  "name": "success",
                  "type": "boolean",
                  "optional": false
                },
                "operationType": {
                  "name": "operationType",
                  "type": "string",
                  "optional": false
                },
                "processingTime": {
                  "name": "processingTime",
                  "type": "number",
                  "optional": false
                },
                "affectedComponents": {
                  "name": "affectedComponents",
                  "type": "string[]",
                  "optional": false
                },
                "details": {
                  "name": "details",
                  "type": "Record<string",
                  "optional": false
                },
                "warnings": {
                  "name": "warnings",
                  "type": "string[]",
                  "optional": false
                },
                "errors": {
                  "name": "errors",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 36
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "MemoryHierarchyConfig": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "MemoryHierarchyConfig",
              "body": "shortTerm: {\n        maxChapters: number;\n        retentionTime: number; // milliseconds\n        cacheEnabled: boolean;",
              "properties": {
                "shortTerm": {
                  "name": "shortTerm",
                  "type": "{",
                  "optional": false
                },
                "maxChapters": {
                  "name": "maxChapters",
                  "type": "number",
                  "optional": false
                },
                "retentionTime": {
                  "name": "retentionTime",
                  "type": "number",
                  "optional": false
                },
                "cacheEnabled": {
                  "name": "cacheEnabled",
                  "type": "boolean",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 58
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "UnifiedMemoryContext": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "UnifiedMemoryContext",
              "body": "chapterNumber: number;\n    timestamp: string;\n    \n    // Short Term Context\n    shortTerm: {\n        recentChapters: ChapterContextData[];\n        immediateCharacterStates: Map<string, CharacterState>;\n        keyPhrases: string[];\n        processingBuffers: ProcessingBuffer[];",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "shortTerm": {
                  "name": "shortTerm",
                  "type": "{",
                  "optional": false
                },
                "recentChapters": {
                  "name": "recentChapters",
                  "type": "ChapterContextData[]",
                  "optional": false
                },
                "immediateCharacterStates": {
                  "name": "immediateCharacterStates",
                  "type": "Map<string",
                  "optional": false
                },
                "keyPhrases": {
                  "name": "keyPhrases",
                  "type": "string[]",
                  "optional": false
                },
                "processingBuffers": {
                  "name": "processingBuffers",
                  "type": "ProcessingBuffer[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 79
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "MemoryAccessRequest": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "MemoryAccessRequest",
              "body": "chapterNumber: number;\n    requestType: MemoryRequestType;\n    targetLayers: MemoryLevel[];\n    filters?: MemoryAccessFilters;\n    options?: MemoryAccessOptions;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "requestType": {
                  "name": "requestType",
                  "type": "MemoryRequestType",
                  "optional": false
                },
                "targetLayers": {
                  "name": "targetLayers",
                  "type": "MemoryLevel[]",
                  "optional": false
                },
                "filters": {
                  "name": "filters",
                  "type": "MemoryAccessFilters",
                  "optional": true
                },
                "options": {
                  "name": "options",
                  "type": "MemoryAccessOptions",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 119
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "MemoryAccessResponse": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "MemoryAccessResponse",
              "body": "success: boolean;\n    context: UnifiedMemoryContext | null;\n    fromCache: boolean;\n    processingTime: number;\n    error?: string;\n    metadata?: {\n        layersAccessed: MemoryLevel[];\n        duplicatesResolved: number;\n        cacheHits: number;",
              "properties": {
                "success": {
                  "name": "success",
                  "type": "boolean",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "UnifiedMemoryContext | null",
                  "optional": false
                },
                "fromCache": {
                  "name": "fromCache",
                  "type": "boolean",
                  "optional": false
                },
                "processingTime": {
                  "name": "processingTime",
                  "type": "number",
                  "optional": false
                },
                "error": {
                  "name": "error",
                  "type": "string",
                  "optional": true
                },
                "metadata": {
                  "name": "metadata",
                  "type": "{",
                  "optional": true
                },
                "layersAccessed": {
                  "name": "layersAccessed",
                  "type": "MemoryLevel[]",
                  "optional": false
                },
                "duplicatesResolved": {
                  "name": "duplicatesResolved",
                  "type": "number",
                  "optional": false
                },
                "cacheHits": {
                  "name": "cacheHits",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 130
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "MemoryAccessFilters": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "MemoryAccessFilters",
              "body": "characterIds?: string[];\n    eventTypes?: string[];\n    analysisTypes?: string[];\n    timeRange?: {\n        startChapter: number;\n        endChapter: number;",
              "properties": {
                "characterIds": {
                  "name": "characterIds",
                  "type": "string[]",
                  "optional": true
                },
                "eventTypes": {
                  "name": "eventTypes",
                  "type": "string[]",
                  "optional": true
                },
                "analysisTypes": {
                  "name": "analysisTypes",
                  "type": "string[]",
                  "optional": true
                },
                "timeRange": {
                  "name": "timeRange",
                  "type": "{",
                  "optional": true
                },
                "startChapter": {
                  "name": "startChapter",
                  "type": "number",
                  "optional": false
                },
                "endChapter": {
                  "name": "endChapter",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 158
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "MemoryAccessOptions": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "MemoryAccessOptions",
              "body": "includeCache?: boolean;\n    resolveDuplicates?: boolean;\n    optimizeAccess?: boolean;\n    deepAnalysis?: boolean;\n    compressionLevel?: number;",
              "properties": {
                "includeCache": {
                  "name": "includeCache",
                  "type": "boolean",
                  "optional": true
                },
                "resolveDuplicates": {
                  "name": "resolveDuplicates",
                  "type": "boolean",
                  "optional": true
                },
                "optimizeAccess": {
                  "name": "optimizeAccess",
                  "type": "boolean",
                  "optional": true
                },
                "deepAnalysis": {
                  "name": "deepAnalysis",
                  "type": "boolean",
                  "optional": true
                },
                "compressionLevel": {
                  "name": "compressionLevel",
                  "type": "number",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 175
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "MemoryOperationResult": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "MemoryOperationResult",
              "body": "success: boolean;\n    processingTime: number;\n    shortTermUpdated: boolean;\n    integrationProcessed: boolean;\n    duplicatesResolved: number;\n    error?: string;\n    metadata?: {\n        chapterNumber?: number;\n        dataSize?: number;\n        timestamp: string;",
              "properties": {
                "success": {
                  "name": "success",
                  "type": "boolean",
                  "optional": false
                },
                "processingTime": {
                  "name": "processingTime",
                  "type": "number",
                  "optional": false
                },
                "shortTermUpdated": {
                  "name": "shortTermUpdated",
                  "type": "boolean",
                  "optional": false
                },
                "integrationProcessed": {
                  "name": "integrationProcessed",
                  "type": "boolean",
                  "optional": false
                },
                "duplicatesResolved": {
                  "name": "duplicatesResolved",
                  "type": "number",
                  "optional": false
                },
                "error": {
                  "name": "error",
                  "type": "string",
                  "optional": true
                },
                "metadata": {
                  "name": "metadata",
                  "type": "{",
                  "optional": true
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": true
                },
                "dataSize": {
                  "name": "dataSize",
                  "type": "number",
                  "optional": true
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 186
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "ChapterContextData": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "ChapterContextData",
              "body": "chapter: Chapter;\n    characterStates: Map<string, CharacterState>;\n    keyPhrases: string[];\n    analysisResults: ChapterAnalysisResult[];\n    timestamp: string;",
              "properties": {
                "chapter": {
                  "name": "chapter",
                  "type": "Chapter",
                  "optional": false
                },
                "characterStates": {
                  "name": "characterStates",
                  "type": "Map<string",
                  "optional": false
                },
                "keyPhrases": {
                  "name": "keyPhrases",
                  "type": "string[]",
                  "optional": false
                },
                "analysisResults": {
                  "name": "analysisResults",
                  "type": "ChapterAnalysisResult[]",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 207
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "ProcessingBuffer": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "ProcessingBuffer",
              "body": "id: string;\n    type: ProcessingBufferType;\n    data: any;\n    timestamp: string;\n    expiryTime: string;",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "ProcessingBufferType",
                  "optional": false
                },
                "data": {
                  "name": "data",
                  "type": "any",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "expiryTime": {
                  "name": "expiryTime",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 218
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "NarrativeProgressionData": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "NarrativeProgressionData",
              "body": "storyState: StoryStateSnapshot[];\n    chapterProgression: Map<number, ChapterProgressionRecord>;\n    arcProgression: Map<number, ArcProgressionRecord>;\n    tensionHistory: Map<number, TensionHistoryRecord>;\n    turningPointsHistory: TurningPointRecord[];",
              "properties": {
                "storyState": {
                  "name": "storyState",
                  "type": "StoryStateSnapshot[]",
                  "optional": false
                },
                "chapterProgression": {
                  "name": "chapterProgression",
                  "type": "Map<number",
                  "optional": false
                },
                "arcProgression": {
                  "name": "arcProgression",
                  "type": "Map<number",
                  "optional": false
                },
                "tensionHistory": {
                  "name": "tensionHistory",
                  "type": "Map<number",
                  "optional": false
                },
                "turningPointsHistory": {
                  "name": "turningPointsHistory",
                  "type": "TurningPointRecord[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 237
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "AnalysisResultData": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "AnalysisResultData",
              "body": "emotionalArcDesigns: Map<number, EmotionalArcDesignRecord>;\n    textAnalysisResults: Map<number, TextAnalysisResultRecord>;\n    detectionResults: Map<number, DetectionResultRecord>;\n    preGenerationResults: Map<number, PreGenerationResultRecord>;\n    postGenerationResults: Map<number, PostGenerationResultRecord>;",
              "properties": {
                "emotionalArcDesigns": {
                  "name": "emotionalArcDesigns",
                  "type": "Map<number",
                  "optional": false
                },
                "textAnalysisResults": {
                  "name": "textAnalysisResults",
                  "type": "Map<number",
                  "optional": false
                },
                "detectionResults": {
                  "name": "detectionResults",
                  "type": "Map<number",
                  "optional": false
                },
                "preGenerationResults": {
                  "name": "preGenerationResults",
                  "type": "Map<number",
                  "optional": false
                },
                "postGenerationResults": {
                  "name": "postGenerationResults",
                  "type": "Map<number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 248
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "CharacterEvolutionData": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "CharacterEvolutionData",
              "body": "developmentHistory: Map<string, CharacterDevelopmentRecord[]>;\n    changeHistory: Map<string, CharacterChangeRecord[]>;\n    relationshipEvolution: Map<string, RelationshipEvolutionRecord[]>;\n    psychologyEvolution: Map<string, PsychologyEvolutionRecord[]>;",
              "properties": {
                "developmentHistory": {
                  "name": "developmentHistory",
                  "type": "Map<string",
                  "optional": false
                },
                "changeHistory": {
                  "name": "changeHistory",
                  "type": "Map<string",
                  "optional": false
                },
                "relationshipEvolution": {
                  "name": "relationshipEvolution",
                  "type": "Map<string",
                  "optional": false
                },
                "psychologyEvolution": {
                  "name": "psychologyEvolution",
                  "type": "Map<string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 259
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "SystemStatisticsData": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "SystemStatisticsData",
              "body": "promptGenerationStats: PromptGenerationStatsRecord[];\n    templateUsageStats: TemplateUsageStatsRecord[];\n    tensionOptimizationStats: TensionOptimizationStatsRecord[];\n    componentPerformanceStats: Map<string, ComponentPerformanceStats>;\n    systemIntegrationStats: SystemIntegrationStatsRecord[];",
              "properties": {
                "promptGenerationStats": {
                  "name": "promptGenerationStats",
                  "type": "PromptGenerationStatsRecord[]",
                  "optional": false
                },
                "templateUsageStats": {
                  "name": "templateUsageStats",
                  "type": "TemplateUsageStatsRecord[]",
                  "optional": false
                },
                "tensionOptimizationStats": {
                  "name": "tensionOptimizationStats",
                  "type": "TensionOptimizationStatsRecord[]",
                  "optional": false
                },
                "componentPerformanceStats": {
                  "name": "componentPerformanceStats",
                  "type": "Map<string",
                  "optional": false
                },
                "systemIntegrationStats": {
                  "name": "systemIntegrationStats",
                  "type": "SystemIntegrationStatsRecord[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 269
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "ConsolidatedSettingsData": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "ConsolidatedSettingsData",
              "body": "worldSettingsMaster: WorldSettingsMasterRecord;\n    genreSettingsMaster: GenreSettingsMasterRecord;\n    templateMaster: TemplateMasterRecord;\n    systemConfigMaster: SystemConfigMasterRecord;",
              "properties": {
                "worldSettingsMaster": {
                  "name": "worldSettingsMaster",
                  "type": "WorldSettingsMasterRecord",
                  "optional": false
                },
                "genreSettingsMaster": {
                  "name": "genreSettingsMaster",
                  "type": "GenreSettingsMasterRecord",
                  "optional": false
                },
                "templateMaster": {
                  "name": "templateMaster",
                  "type": "TemplateMasterRecord",
                  "optional": false
                },
                "systemConfigMaster": {
                  "name": "systemConfigMaster",
                  "type": "SystemConfigMasterRecord",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 290
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "KnowledgeDatabaseData": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "KnowledgeDatabaseData",
              "body": "characters: Map<string, CharacterMasterRecord>;\n    worldKnowledge: WorldKnowledgeDatabase;\n    conceptDefinitions: Map<string, ConceptDefinitionRecord>;\n    foreshadowingDatabase: ForeshadowingDatabase;\n    sectionDefinitions: Map<string, SectionDefinitionRecord>;",
              "properties": {
                "characters": {
                  "name": "characters",
                  "type": "Map<string",
                  "optional": false
                },
                "worldKnowledge": {
                  "name": "worldKnowledge",
                  "type": "WorldKnowledgeDatabase",
                  "optional": false
                },
                "conceptDefinitions": {
                  "name": "conceptDefinitions",
                  "type": "Map<string",
                  "optional": false
                },
                "foreshadowingDatabase": {
                  "name": "foreshadowingDatabase",
                  "type": "ForeshadowingDatabase",
                  "optional": false
                },
                "sectionDefinitions": {
                  "name": "sectionDefinitions",
                  "type": "Map<string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 300
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "SystemKnowledgeBaseData": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "SystemKnowledgeBaseData",
              "body": "promptGenerationPatterns: PromptGenerationPattern[];\n    effectiveTemplatePatterns: EffectiveTemplatePattern[];\n    analysisPatterns: AnalysisPattern[];\n    optimizationStrategies: OptimizationStrategy[];\n    errorPatterns: ErrorPattern[];\n    qualityImprovementStrategies: QualityImprovementStrategy[];",
              "properties": {
                "promptGenerationPatterns": {
                  "name": "promptGenerationPatterns",
                  "type": "PromptGenerationPattern[]",
                  "optional": false
                },
                "effectiveTemplatePatterns": {
                  "name": "effectiveTemplatePatterns",
                  "type": "EffectiveTemplatePattern[]",
                  "optional": false
                },
                "analysisPatterns": {
                  "name": "analysisPatterns",
                  "type": "AnalysisPattern[]",
                  "optional": false
                },
                "optimizationStrategies": {
                  "name": "optimizationStrategies",
                  "type": "OptimizationStrategy[]",
                  "optional": false
                },
                "errorPatterns": {
                  "name": "errorPatterns",
                  "type": "ErrorPattern[]",
                  "optional": false
                },
                "qualityImprovementStrategies": {
                  "name": "qualityImprovementStrategies",
                  "type": "QualityImprovementStrategy[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 311
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "CompletedRecordsData": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "CompletedRecordsData",
              "body": "completedSections: Map<string, CompletedSectionRecord>;\n    completedArcs: Map<number, CompletedArcRecord>;\n    longTermEffectivenessRecords: LongTermEffectivenessRecord[];",
              "properties": {
                "completedSections": {
                  "name": "completedSections",
                  "type": "Map<string",
                  "optional": false
                },
                "completedArcs": {
                  "name": "completedArcs",
                  "type": "Map<number",
                  "optional": false
                },
                "longTermEffectivenessRecords": {
                  "name": "longTermEffectivenessRecords",
                  "type": "LongTermEffectivenessRecord[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 323
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "ResolvedDuplicateData": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "ResolvedDuplicateData",
              "body": "id: string;\n    type: DuplicateType;\n    originalSources: string[];\n    resolvedTo: string;\n    timestamp: string;\n    confidence: number;",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "DuplicateType",
                  "optional": false
                },
                "originalSources": {
                  "name": "originalSources",
                  "type": "string[]",
                  "optional": false
                },
                "resolvedTo": {
                  "name": "resolvedTo",
                  "type": "string",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "confidence": {
                  "name": "confidence",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 332
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "AccessOptimizationData": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "AccessOptimizationData",
              "body": "optimizationType: OptimizationType;\n    before: PerformanceMetrics;\n    after: PerformanceMetrics;\n    improvement: number;\n    timestamp: string;",
              "properties": {
                "optimizationType": {
                  "name": "optimizationType",
                  "type": "OptimizationType",
                  "optional": false
                },
                "before": {
                  "name": "before",
                  "type": "PerformanceMetrics",
                  "optional": false
                },
                "after": {
                  "name": "after",
                  "type": "PerformanceMetrics",
                  "optional": false
                },
                "improvement": {
                  "name": "improvement",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 378
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "PerformanceMetrics": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "PerformanceMetrics",
              "body": "responseTime: number;\n    memoryUsage: number;\n    cacheHitRatio: number;\n    duplicateRatio: number;\n    compressionRatio: number;",
              "properties": {
                "responseTime": {
                  "name": "responseTime",
                  "type": "number",
                  "optional": false
                },
                "memoryUsage": {
                  "name": "memoryUsage",
                  "type": "number",
                  "optional": false
                },
                "cacheHitRatio": {
                  "name": "cacheHitRatio",
                  "type": "number",
                  "optional": false
                },
                "duplicateRatio": {
                  "name": "duplicateRatio",
                  "type": "number",
                  "optional": false
                },
                "compressionRatio": {
                  "name": "compressionRatio",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 396
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "PerformanceMetrics",
              "body": "averageResponseTime: number;\r\n    memoryUsage: number;\r\n    cpuUsage: number;\r\n    apiCalls: number;\r\n    cacheHitRate: number;\r\n    lastMeasured: string;",
              "properties": {
                "averageResponseTime": {
                  "name": "averageResponseTime",
                  "type": "number",
                  "optional": false
                },
                "memoryUsage": {
                  "name": "memoryUsage",
                  "type": "number",
                  "optional": false
                },
                "cpuUsage": {
                  "name": "cpuUsage",
                  "type": "number",
                  "optional": false
                },
                "apiCalls": {
                  "name": "apiCalls",
                  "type": "number",
                  "optional": false
                },
                "cacheHitRate": {
                  "name": "cacheHitRate",
                  "type": "number",
                  "optional": false
                },
                "lastMeasured": {
                  "name": "lastMeasured",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 107
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "MemorySystemStatus": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "MemorySystemStatus",
              "body": "initialized: boolean;\n    lastUpdateTime: string;\n    memoryLayers: {\n        shortTerm: MemoryLayerStatus;\n        midTerm: MemoryLayerStatus;\n        longTerm: MemoryLayerStatus;",
              "properties": {
                "initialized": {
                  "name": "initialized",
                  "type": "boolean",
                  "optional": false
                },
                "lastUpdateTime": {
                  "name": "lastUpdateTime",
                  "type": "string",
                  "optional": false
                },
                "memoryLayers": {
                  "name": "memoryLayers",
                  "type": "{",
                  "optional": false
                },
                "shortTerm": {
                  "name": "shortTerm",
                  "type": "MemoryLayerStatus",
                  "optional": false
                },
                "midTerm": {
                  "name": "midTerm",
                  "type": "MemoryLayerStatus",
                  "optional": false
                },
                "longTerm": {
                  "name": "longTerm",
                  "type": "MemoryLayerStatus",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 411
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "MemorySystemStatus",
              "body": "initialized: boolean;\r\n    shortTerm: {\r\n        entryCount: number;\r\n        lastUpdateTime: string | null;",
              "properties": {
                "initialized": {
                  "name": "initialized",
                  "type": "boolean",
                  "optional": false
                },
                "shortTerm": {
                  "name": "shortTerm",
                  "type": "{",
                  "optional": false
                },
                "entryCount": {
                  "name": "entryCount",
                  "type": "number",
                  "optional": false
                },
                "lastUpdateTime": {
                  "name": "lastUpdateTime",
                  "type": "string | null",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 605
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "MemoryLayerStatus": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "MemoryLayerStatus",
              "body": "healthy: boolean;\n    dataCount: number;\n    lastUpdate: string;\n    storageSize: number;\n    errorCount: number;",
              "properties": {
                "healthy": {
                  "name": "healthy",
                  "type": "boolean",
                  "optional": false
                },
                "dataCount": {
                  "name": "dataCount",
                  "type": "number",
                  "optional": false
                },
                "lastUpdate": {
                  "name": "lastUpdate",
                  "type": "string",
                  "optional": false
                },
                "storageSize": {
                  "name": "storageSize",
                  "type": "number",
                  "optional": false
                },
                "errorCount": {
                  "name": "errorCount",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 432
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "SystemDiagnostics": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "SystemDiagnostics",
              "body": "timestamp: string;\n    systemHealth: SystemHealth;\n    memoryLayers: {\n        shortTerm: LayerDiagnostics;\n        midTerm: LayerDiagnostics;\n        longTerm: LayerDiagnostics;",
              "properties": {
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "systemHealth": {
                  "name": "systemHealth",
                  "type": "SystemHealth",
                  "optional": false
                },
                "memoryLayers": {
                  "name": "memoryLayers",
                  "type": "{",
                  "optional": false
                },
                "shortTerm": {
                  "name": "shortTerm",
                  "type": "LayerDiagnostics",
                  "optional": false
                },
                "midTerm": {
                  "name": "midTerm",
                  "type": "LayerDiagnostics",
                  "optional": false
                },
                "longTerm": {
                  "name": "longTerm",
                  "type": "LayerDiagnostics",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 443
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "LayerDiagnostics": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "LayerDiagnostics",
              "body": "healthy: boolean;\n    dataIntegrity: boolean;\n    storageAccessible: boolean;\n    lastBackup: string;\n    performanceScore: number;\n    recommendations: string[];",
              "properties": {
                "healthy": {
                  "name": "healthy",
                  "type": "boolean",
                  "optional": false
                },
                "dataIntegrity": {
                  "name": "dataIntegrity",
                  "type": "boolean",
                  "optional": false
                },
                "storageAccessible": {
                  "name": "storageAccessible",
                  "type": "boolean",
                  "optional": false
                },
                "lastBackup": {
                  "name": "lastBackup",
                  "type": "string",
                  "optional": false
                },
                "performanceScore": {
                  "name": "performanceScore",
                  "type": "number",
                  "optional": false
                },
                "recommendations": {
                  "name": "recommendations",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 476
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "IntegrationDiagnostics": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "IntegrationDiagnostics",
              "body": "operational: boolean;\n    efficiency: number;\n    errorRate: number;\n    lastOptimization: string;\n    recommendations: string[];",
              "properties": {
                "operational": {
                  "name": "operational",
                  "type": "boolean",
                  "optional": false
                },
                "efficiency": {
                  "name": "efficiency",
                  "type": "number",
                  "optional": false
                },
                "errorRate": {
                  "name": "errorRate",
                  "type": "number",
                  "optional": false
                },
                "lastOptimization": {
                  "name": "lastOptimization",
                  "type": "string",
                  "optional": false
                },
                "recommendations": {
                  "name": "recommendations",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 488
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "ChapterAnalysisResult": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "ChapterAnalysisResult",
              "body": "chapterNumber: number;\n    analysisType: string;\n    result: any;\n    confidence: number;\n    timestamp: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "analysisType": {
                  "name": "analysisType",
                  "type": "string",
                  "optional": false
                },
                "result": {
                  "name": "result",
                  "type": "any",
                  "optional": false
                },
                "confidence": {
                  "name": "confidence",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 503
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "StoryStateSnapshot": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "StoryStateSnapshot",
              "body": "chapterNumber: number;\n    state: string;\n    timestamp: string;\n    metadata: any;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "state": {
                  "name": "state",
                  "type": "string",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "metadata": {
                  "name": "metadata",
                  "type": "any",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 514
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "ChapterProgressionRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "ChapterProgressionRecord",
              "body": "chapterNumber: number;\n    progressScore: number;\n    milestones: string[];\n    timestamp: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "progressScore": {
                  "name": "progressScore",
                  "type": "number",
                  "optional": false
                },
                "milestones": {
                  "name": "milestones",
                  "type": "string[]",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 524
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "ArcProgressionRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "ArcProgressionRecord",
              "body": "arcNumber: number;\n    completionRatio: number;\n    keyEvents: string[];\n    timestamp: string;",
              "properties": {
                "arcNumber": {
                  "name": "arcNumber",
                  "type": "number",
                  "optional": false
                },
                "completionRatio": {
                  "name": "completionRatio",
                  "type": "number",
                  "optional": false
                },
                "keyEvents": {
                  "name": "keyEvents",
                  "type": "string[]",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 534
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "TensionHistoryRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "TensionHistoryRecord",
              "body": "chapterNumber: number;\n    tensionLevel: number;\n    factors: string[];\n    timestamp: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "tensionLevel": {
                  "name": "tensionLevel",
                  "type": "number",
                  "optional": false
                },
                "factors": {
                  "name": "factors",
                  "type": "string[]",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 544
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "TurningPointRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "TurningPointRecord",
              "body": "chapterNumber: number;\n    description: string;\n    significance: number;\n    timestamp: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 554
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "EmotionalArcDesignRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "EmotionalArcDesignRecord",
              "body": "chapterNumber: number;\n    design: any;\n    effectiveness: number;\n    timestamp: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "design": {
                  "name": "design",
                  "type": "any",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 564
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "TextAnalysisResultRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "TextAnalysisResultRecord",
              "body": "chapterNumber: number;\n    analysisResults: any;\n    processingTime: number;\n    timestamp: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "analysisResults": {
                  "name": "analysisResults",
                  "type": "any",
                  "optional": false
                },
                "processingTime": {
                  "name": "processingTime",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 574
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "DetectionResultRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "DetectionResultRecord",
              "body": "chapterNumber: number;\n    detectedItems: any[];\n    accuracy: number;\n    timestamp: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "detectedItems": {
                  "name": "detectedItems",
                  "type": "any[]",
                  "optional": false
                },
                "accuracy": {
                  "name": "accuracy",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 584
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "PreGenerationResultRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "PreGenerationResultRecord",
              "body": "chapterNumber: number;\n    preparationData: any;\n    qualityScore: number;\n    timestamp: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "preparationData": {
                  "name": "preparationData",
                  "type": "any",
                  "optional": false
                },
                "qualityScore": {
                  "name": "qualityScore",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 594
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "PostGenerationResultRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "PostGenerationResultRecord",
              "body": "chapterNumber: number;\n    refinementData: any;\n    improvementScore: number;\n    timestamp: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "refinementData": {
                  "name": "refinementData",
                  "type": "any",
                  "optional": false
                },
                "improvementScore": {
                  "name": "improvementScore",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 604
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "CharacterDevelopmentRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "CharacterDevelopmentRecord",
              "body": "characterId: string;\n    developmentPhase: string;\n    changes: any[];\n    timestamp: string;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "developmentPhase": {
                  "name": "developmentPhase",
                  "type": "string",
                  "optional": false
                },
                "changes": {
                  "name": "changes",
                  "type": "any[]",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 614
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "CharacterDevelopmentRecord",
              "body": "recordId: string;\r\n  chapterNumber: number;\r\n  developmentType: 'personality' | 'skill' | 'relationship' | 'goal' | 'backstory';\r\n  description: string;\r\n  significance: number; // 0-10\r\n  impact: string[];\r\n  timestamp: string;\r\n  relatedEvents: string[];",
              "properties": {
                "recordId": {
                  "name": "recordId",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "developmentType": {
                  "name": "developmentType",
                  "type": "'personality' | 'skill' | 'relationship' | 'goal' | 'backstory'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "string[]",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "relatedEvents": {
                  "name": "relatedEvents",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 439
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "CharacterChangeRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "CharacterChangeRecord",
              "body": "characterId: string;\n    changeType: string;\n    oldValue: any;\n    newValue: any;\n    timestamp: string;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "changeType": {
                  "name": "changeType",
                  "type": "string",
                  "optional": false
                },
                "oldValue": {
                  "name": "oldValue",
                  "type": "any",
                  "optional": false
                },
                "newValue": {
                  "name": "newValue",
                  "type": "any",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 624
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "CharacterChangeRecord",
              "body": "recordId: string;\r\n  chapterNumber: number;\r\n  changeType: 'state' | 'personality' | 'relationship' | 'backstory' | 'metadata';\r\n  fieldChanged: string;\r\n  previousValue: any;\r\n  newValue: any;\r\n  reason: string;\r\n  source: string;\r\n  timestamp: string;\r\n  significance: number; // 0-10",
              "properties": {
                "recordId": {
                  "name": "recordId",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "changeType": {
                  "name": "changeType",
                  "type": "'state' | 'personality' | 'relationship' | 'backstory' | 'metadata'",
                  "optional": false
                },
                "fieldChanged": {
                  "name": "fieldChanged",
                  "type": "string",
                  "optional": false
                },
                "previousValue": {
                  "name": "previousValue",
                  "type": "any",
                  "optional": false
                },
                "newValue": {
                  "name": "newValue",
                  "type": "any",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                },
                "source": {
                  "name": "source",
                  "type": "string",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 467
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "RelationshipEvolutionRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "RelationshipEvolutionRecord",
              "body": "characterIds: string[];\n    relationshipType: string;\n    evolutionStage: string;\n    timestamp: string;",
              "properties": {
                "characterIds": {
                  "name": "characterIds",
                  "type": "string[]",
                  "optional": false
                },
                "relationshipType": {
                  "name": "relationshipType",
                  "type": "string",
                  "optional": false
                },
                "evolutionStage": {
                  "name": "evolutionStage",
                  "type": "string",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 635
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "PsychologyEvolutionRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "PsychologyEvolutionRecord",
              "body": "characterId: string;\n    psychologyAspect: string;\n    evolution: any;\n    timestamp: string;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "psychologyAspect": {
                  "name": "psychologyAspect",
                  "type": "string",
                  "optional": false
                },
                "evolution": {
                  "name": "evolution",
                  "type": "any",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 645
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "PromptGenerationStatsRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "PromptGenerationStatsRecord",
              "body": "generationType: string;\n    successRate: number;\n    averageTime: number;\n    timestamp: string;",
              "properties": {
                "generationType": {
                  "name": "generationType",
                  "type": "string",
                  "optional": false
                },
                "successRate": {
                  "name": "successRate",
                  "type": "number",
                  "optional": false
                },
                "averageTime": {
                  "name": "averageTime",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 655
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "TemplateUsageStatsRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "TemplateUsageStatsRecord",
              "body": "templateId: string;\n    usageCount: number;\n    effectiveness: number;\n    timestamp: string;",
              "properties": {
                "templateId": {
                  "name": "templateId",
                  "type": "string",
                  "optional": false
                },
                "usageCount": {
                  "name": "usageCount",
                  "type": "number",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 665
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "TensionOptimizationStatsRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "TensionOptimizationStatsRecord",
              "body": "optimizationType: string;\n    successRate: number;\n    improvement: number;\n    timestamp: string;",
              "properties": {
                "optimizationType": {
                  "name": "optimizationType",
                  "type": "string",
                  "optional": false
                },
                "successRate": {
                  "name": "successRate",
                  "type": "number",
                  "optional": false
                },
                "improvement": {
                  "name": "improvement",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 675
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "ComponentPerformanceStats": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "ComponentPerformanceStats",
              "body": "componentName: string;\n    responseTime: number;\n    successRate: number;\n    errorRate: number;\n    lastUpdate: string;",
              "properties": {
                "componentName": {
                  "name": "componentName",
                  "type": "string",
                  "optional": false
                },
                "responseTime": {
                  "name": "responseTime",
                  "type": "number",
                  "optional": false
                },
                "successRate": {
                  "name": "successRate",
                  "type": "number",
                  "optional": false
                },
                "errorRate": {
                  "name": "errorRate",
                  "type": "number",
                  "optional": false
                },
                "lastUpdate": {
                  "name": "lastUpdate",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 685
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "SystemIntegrationStatsRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "SystemIntegrationStatsRecord",
              "body": "integrationType: string;\n    efficiency: number;\n    dataVolume: number;\n    timestamp: string;",
              "properties": {
                "integrationType": {
                  "name": "integrationType",
                  "type": "string",
                  "optional": false
                },
                "efficiency": {
                  "name": "efficiency",
                  "type": "number",
                  "optional": false
                },
                "dataVolume": {
                  "name": "dataVolume",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 696
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "ChapterQualityRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "ChapterQualityRecord",
              "body": "chapterNumber: number;\n    qualityScore: number;\n    qualityFactors: any;\n    timestamp: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "qualityScore": {
                  "name": "qualityScore",
                  "type": "number",
                  "optional": false
                },
                "qualityFactors": {
                  "name": "qualityFactors",
                  "type": "any",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 706
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "SystemQualityMetricsRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "SystemQualityMetricsRecord",
              "body": "metricType: string;\n    value: number;\n    trend: string;\n    timestamp: string;",
              "properties": {
                "metricType": {
                  "name": "metricType",
                  "type": "string",
                  "optional": false
                },
                "value": {
                  "name": "value",
                  "type": "number",
                  "optional": false
                },
                "trend": {
                  "name": "trend",
                  "type": "string",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 716
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "DiagnosticHistoryRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "DiagnosticHistoryRecord",
              "body": "diagnosticType: string;\n    results: any;\n    issues: string[];\n    timestamp: string;",
              "properties": {
                "diagnosticType": {
                  "name": "diagnosticType",
                  "type": "string",
                  "optional": false
                },
                "results": {
                  "name": "results",
                  "type": "any",
                  "optional": false
                },
                "issues": {
                  "name": "issues",
                  "type": "string[]",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 726
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "SystemHealthMetricsRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "SystemHealthMetricsRecord",
              "body": "healthScore: number;\n    healthFactors: any;\n    recommendations: string[];\n    timestamp: string;",
              "properties": {
                "healthScore": {
                  "name": "healthScore",
                  "type": "number",
                  "optional": false
                },
                "healthFactors": {
                  "name": "healthFactors",
                  "type": "any",
                  "optional": false
                },
                "recommendations": {
                  "name": "recommendations",
                  "type": "string[]",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 736
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "WorldSettingsMasterRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "WorldSettingsMasterRecord",
              "body": "consolidatedSettings: any;\n    sources: string[];\n    lastUpdate: string;",
              "properties": {
                "consolidatedSettings": {
                  "name": "consolidatedSettings",
                  "type": "any",
                  "optional": false
                },
                "sources": {
                  "name": "sources",
                  "type": "string[]",
                  "optional": false
                },
                "lastUpdate": {
                  "name": "lastUpdate",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 745
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "GenreSettingsMasterRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "GenreSettingsMasterRecord",
              "body": "consolidatedGenre: any;\n    sources: string[];\n    lastUpdate: string;",
              "properties": {
                "consolidatedGenre": {
                  "name": "consolidatedGenre",
                  "type": "any",
                  "optional": false
                },
                "sources": {
                  "name": "sources",
                  "type": "string[]",
                  "optional": false
                },
                "lastUpdate": {
                  "name": "lastUpdate",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 751
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "TemplateMasterRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "TemplateMasterRecord",
              "body": "consolidatedTemplates: any;\n    sources: string[];\n    lastUpdate: string;",
              "properties": {
                "consolidatedTemplates": {
                  "name": "consolidatedTemplates",
                  "type": "any",
                  "optional": false
                },
                "sources": {
                  "name": "sources",
                  "type": "string[]",
                  "optional": false
                },
                "lastUpdate": {
                  "name": "lastUpdate",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 757
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "SystemConfigMasterRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "SystemConfigMasterRecord",
              "body": "consolidatedConfig: any;\n    sources: string[];\n    lastUpdate: string;",
              "properties": {
                "consolidatedConfig": {
                  "name": "consolidatedConfig",
                  "type": "any",
                  "optional": false
                },
                "sources": {
                  "name": "sources",
                  "type": "string[]",
                  "optional": false
                },
                "lastUpdate": {
                  "name": "lastUpdate",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 763
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "CharacterMasterRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "CharacterMasterRecord",
              "body": "consolidatedCharacter: any;\n    sources: string[];\n    lastUpdate: string;",
              "properties": {
                "consolidatedCharacter": {
                  "name": "consolidatedCharacter",
                  "type": "any",
                  "optional": false
                },
                "sources": {
                  "name": "sources",
                  "type": "string[]",
                  "optional": false
                },
                "lastUpdate": {
                  "name": "lastUpdate",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 769
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "CharacterMasterRecord",
              "body": "// 基本情報（統合済み）\r\n  id: string;\r\n  name: string;\r\n  type: CharacterType;\r\n  description: string;\r\n  \r\n  // 統合メタデータ\r\n  masterVersion: string;\r\n  consolidatedFrom: ConsolidationSource[];\r\n  lastConsolidated: string;\r\n  conflictResolutions: CharacterConflictResolution[];\r\n  \r\n  // 拡張情報\r\n  personality: CharacterPersonality;\r\n  backstory: CharacterBackstory;\r\n  relationships: CharacterRelationship[];\r\n  state: ExtendedCharacterState;\r\n  \r\n  // 履歴情報\r\n  developmentHistory: CharacterDevelopmentRecord[];\r\n  appearanceHistory: CharacterAppearanceRecord[];\r\n  changeHistory: CharacterChangeRecord[];\r\n  \r\n  // 統計情報\r\n  statistics: CharacterStatistics;\r\n  \r\n  // フォーマット済みデータ\r\n  formattedData: FormattedCharacterData;\r\n  \r\n  // メタデータ\r\n  metadata: CharacterMetadata;",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "CharacterType",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "masterVersion": {
                  "name": "masterVersion",
                  "type": "string",
                  "optional": false
                },
                "consolidatedFrom": {
                  "name": "consolidatedFrom",
                  "type": "ConsolidationSource[]",
                  "optional": false
                },
                "lastConsolidated": {
                  "name": "lastConsolidated",
                  "type": "string",
                  "optional": false
                },
                "conflictResolutions": {
                  "name": "conflictResolutions",
                  "type": "CharacterConflictResolution[]",
                  "optional": false
                },
                "personality": {
                  "name": "personality",
                  "type": "CharacterPersonality",
                  "optional": false
                },
                "backstory": {
                  "name": "backstory",
                  "type": "CharacterBackstory",
                  "optional": false
                },
                "relationships": {
                  "name": "relationships",
                  "type": "CharacterRelationship[]",
                  "optional": false
                },
                "state": {
                  "name": "state",
                  "type": "ExtendedCharacterState",
                  "optional": false
                },
                "developmentHistory": {
                  "name": "developmentHistory",
                  "type": "CharacterDevelopmentRecord[]",
                  "optional": false
                },
                "appearanceHistory": {
                  "name": "appearanceHistory",
                  "type": "CharacterAppearanceRecord[]",
                  "optional": false
                },
                "changeHistory": {
                  "name": "changeHistory",
                  "type": "CharacterChangeRecord[]",
                  "optional": false
                },
                "statistics": {
                  "name": "statistics",
                  "type": "CharacterStatistics",
                  "optional": false
                },
                "formattedData": {
                  "name": "formattedData",
                  "type": "FormattedCharacterData",
                  "optional": false
                },
                "metadata": {
                  "name": "metadata",
                  "type": "CharacterMetadata",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 10
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "WorldKnowledgeDatabase": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "WorldKnowledgeDatabase",
              "body": "knowledge: any;\n    categories: string[];\n    lastUpdate: string;",
              "properties": {
                "knowledge": {
                  "name": "knowledge",
                  "type": "any",
                  "optional": false
                },
                "categories": {
                  "name": "categories",
                  "type": "string[]",
                  "optional": false
                },
                "lastUpdate": {
                  "name": "lastUpdate",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 775
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "ConceptDefinitionRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "ConceptDefinitionRecord",
              "body": "concept: string;\n    definition: any;\n    references: string[];\n    lastUpdate: string;",
              "properties": {
                "concept": {
                  "name": "concept",
                  "type": "string",
                  "optional": false
                },
                "definition": {
                  "name": "definition",
                  "type": "any",
                  "optional": false
                },
                "references": {
                  "name": "references",
                  "type": "string[]",
                  "optional": false
                },
                "lastUpdate": {
                  "name": "lastUpdate",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 781
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "ForeshadowingDatabase": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "ForeshadowingDatabase",
              "body": "foreshadowing: any[];\n    categories: string[];\n    lastUpdate: string;",
              "properties": {
                "foreshadowing": {
                  "name": "foreshadowing",
                  "type": "any[]",
                  "optional": false
                },
                "categories": {
                  "name": "categories",
                  "type": "string[]",
                  "optional": false
                },
                "lastUpdate": {
                  "name": "lastUpdate",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 788
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "SectionDefinitionRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "SectionDefinitionRecord",
              "body": "sectionId: string;\n    definition: any;\n    usage: any;\n    lastUpdate: string;",
              "properties": {
                "sectionId": {
                  "name": "sectionId",
                  "type": "string",
                  "optional": false
                },
                "definition": {
                  "name": "definition",
                  "type": "any",
                  "optional": false
                },
                "usage": {
                  "name": "usage",
                  "type": "any",
                  "optional": false
                },
                "lastUpdate": {
                  "name": "lastUpdate",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 794
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "CompletedSectionRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "CompletedSectionRecord",
              "body": "sectionId: string;\n    completionData: any;\n    effectiveness: number;\n    timestamp: string;",
              "properties": {
                "sectionId": {
                  "name": "sectionId",
                  "type": "string",
                  "optional": false
                },
                "completionData": {
                  "name": "completionData",
                  "type": "any",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 801
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "CompletedArcRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "CompletedArcRecord",
              "body": "arcNumber: number;\n    completionData: any;\n    effectiveness: number;\n    timestamp: string;",
              "properties": {
                "arcNumber": {
                  "name": "arcNumber",
                  "type": "number",
                  "optional": false
                },
                "completionData": {
                  "name": "completionData",
                  "type": "any",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 808
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "LongTermEffectivenessRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "LongTermEffectivenessRecord",
              "body": "recordType: string;\n    effectivenessData: any;\n    trends: any;\n    timestamp: string;",
              "properties": {
                "recordType": {
                  "name": "recordType",
                  "type": "string",
                  "optional": false
                },
                "effectivenessData": {
                  "name": "effectivenessData",
                  "type": "any",
                  "optional": false
                },
                "trends": {
                  "name": "trends",
                  "type": "any",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 815
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "PromptGenerationPattern": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "PromptGenerationPattern",
              "body": "patternId: string;\n    pattern: any;\n    effectiveness: number;\n    usage: any;",
              "properties": {
                "patternId": {
                  "name": "patternId",
                  "type": "string",
                  "optional": false
                },
                "pattern": {
                  "name": "pattern",
                  "type": "any",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "number",
                  "optional": false
                },
                "usage": {
                  "name": "usage",
                  "type": "any",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 824
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "PromptGenerationPattern",
              "body": "patternId: string;\r\n    patternName: string;\r\n    category: 'context' | 'instruction' | 'template' | 'variable' | 'format';\r\n    description: string;\r\n\r\n    // パターン定義\r\n    pattern: string;\r\n    variables: PromptVariable[];\r\n    conditions: PromptCondition[];\r\n\r\n    // 効果測定\r\n    effectiveness: EffectivenessMetrics;\r\n    usageStatistics: UsageStatistics;\r\n\r\n    // 適用条件\r\n    applicableGenres: string[];\r\n    applicableScenarios: string[];\r\n    chapterTypes: string[];\r\n\r\n    // 学習データ\r\n    successCases: SuccessCase[];\r\n    failureCases: FailureCase[];\r\n    optimizationHistory: OptimizationRecord[];\r\n\r\n    // メタデータ\r\n    createdAt: string;\r\n    lastUsed: string;\r\n    lastOptimized: string;\r\n    version: string;\r\n    tags: string[];",
              "properties": {
                "patternId": {
                  "name": "patternId",
                  "type": "string",
                  "optional": false
                },
                "patternName": {
                  "name": "patternName",
                  "type": "string",
                  "optional": false
                },
                "category": {
                  "name": "category",
                  "type": "'context' | 'instruction' | 'template' | 'variable' | 'format'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "pattern": {
                  "name": "pattern",
                  "type": "string",
                  "optional": false
                },
                "variables": {
                  "name": "variables",
                  "type": "PromptVariable[]",
                  "optional": false
                },
                "conditions": {
                  "name": "conditions",
                  "type": "PromptCondition[]",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "EffectivenessMetrics",
                  "optional": false
                },
                "usageStatistics": {
                  "name": "usageStatistics",
                  "type": "UsageStatistics",
                  "optional": false
                },
                "applicableGenres": {
                  "name": "applicableGenres",
                  "type": "string[]",
                  "optional": false
                },
                "applicableScenarios": {
                  "name": "applicableScenarios",
                  "type": "string[]",
                  "optional": false
                },
                "chapterTypes": {
                  "name": "chapterTypes",
                  "type": "string[]",
                  "optional": false
                },
                "successCases": {
                  "name": "successCases",
                  "type": "SuccessCase[]",
                  "optional": false
                },
                "failureCases": {
                  "name": "failureCases",
                  "type": "FailureCase[]",
                  "optional": false
                },
                "optimizationHistory": {
                  "name": "optimizationHistory",
                  "type": "OptimizationRecord[]",
                  "optional": false
                },
                "createdAt": {
                  "name": "createdAt",
                  "type": "string",
                  "optional": false
                },
                "lastUsed": {
                  "name": "lastUsed",
                  "type": "string",
                  "optional": false
                },
                "lastOptimized": {
                  "name": "lastOptimized",
                  "type": "string",
                  "optional": false
                },
                "version": {
                  "name": "version",
                  "type": "string",
                  "optional": false
                },
                "tags": {
                  "name": "tags",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 9
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "EffectiveTemplatePattern": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "EffectiveTemplatePattern",
              "body": "templateId: string;\n    pattern: any;\n    effectiveness: number;\n    contexts: string[];",
              "properties": {
                "templateId": {
                  "name": "templateId",
                  "type": "string",
                  "optional": false
                },
                "pattern": {
                  "name": "pattern",
                  "type": "any",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "number",
                  "optional": false
                },
                "contexts": {
                  "name": "contexts",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 831
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "EffectiveTemplatePattern",
              "body": "templateId: string;\r\n    templateName: string;\r\n    category: string;\r\n\r\n    // テンプレート定義\r\n    structure: TemplateStructure;\r\n    sections: TemplateSection[];\r\n    placeholders: TemplatePlaceholder[];\r\n\r\n    // 効果データ\r\n    effectiveness: EffectivenessMetrics;\r\n    bestPractices: BestPractice[];\r\n    commonMistakes: CommonMistake[];\r\n\r\n    // 適用データ\r\n    applicableContexts: ApplicableContext[];\r\n    variations: TemplateVariation[];\r\n\r\n    // 学習データ\r\n    evolutionHistory: TemplateEvolution[];\r\n    feedbackData: FeedbackData[];\r\n\r\n    // メタデータ\r\n    createdAt: string;\r\n    lastUpdated: string;\r\n    maturityLevel: 'experimental' | 'tested' | 'proven' | 'deprecated';\r\n    maintainer: string;",
              "properties": {
                "templateId": {
                  "name": "templateId",
                  "type": "string",
                  "optional": false
                },
                "templateName": {
                  "name": "templateName",
                  "type": "string",
                  "optional": false
                },
                "category": {
                  "name": "category",
                  "type": "string",
                  "optional": false
                },
                "structure": {
                  "name": "structure",
                  "type": "TemplateStructure",
                  "optional": false
                },
                "sections": {
                  "name": "sections",
                  "type": "TemplateSection[]",
                  "optional": false
                },
                "placeholders": {
                  "name": "placeholders",
                  "type": "TemplatePlaceholder[]",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "EffectivenessMetrics",
                  "optional": false
                },
                "bestPractices": {
                  "name": "bestPractices",
                  "type": "BestPractice[]",
                  "optional": false
                },
                "commonMistakes": {
                  "name": "commonMistakes",
                  "type": "CommonMistake[]",
                  "optional": false
                },
                "applicableContexts": {
                  "name": "applicableContexts",
                  "type": "ApplicableContext[]",
                  "optional": false
                },
                "variations": {
                  "name": "variations",
                  "type": "TemplateVariation[]",
                  "optional": false
                },
                "evolutionHistory": {
                  "name": "evolutionHistory",
                  "type": "TemplateEvolution[]",
                  "optional": false
                },
                "feedbackData": {
                  "name": "feedbackData",
                  "type": "FeedbackData[]",
                  "optional": false
                },
                "createdAt": {
                  "name": "createdAt",
                  "type": "string",
                  "optional": false
                },
                "lastUpdated": {
                  "name": "lastUpdated",
                  "type": "string",
                  "optional": false
                },
                "maturityLevel": {
                  "name": "maturityLevel",
                  "type": "'experimental' | 'tested' | 'proven' | 'deprecated'",
                  "optional": false
                },
                "maintainer": {
                  "name": "maintainer",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 165
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "AnalysisPattern": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "AnalysisPattern",
              "body": "analysisType: string;\n    pattern: any;\n    accuracy: number;\n    applications: string[];",
              "properties": {
                "analysisType": {
                  "name": "analysisType",
                  "type": "string",
                  "optional": false
                },
                "pattern": {
                  "name": "pattern",
                  "type": "any",
                  "optional": false
                },
                "accuracy": {
                  "name": "accuracy",
                  "type": "number",
                  "optional": false
                },
                "applications": {
                  "name": "applications",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 838
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "AnalysisPattern",
              "body": "patternId: string;\r\n    patternName: string;\r\n    category: 'emotional' | 'narrative' | 'character' | 'structure' | 'quality';\r\n\r\n    // パターン定義\r\n    analysisType: string;\r\n    methodology: AnalysisMethodology;\r\n    parameters: AnalysisParameter[];\r\n\r\n    // 精度データ\r\n    accuracy: AccuracyMetrics;\r\n    reliability: ReliabilityMetrics;\r\n\r\n    // 適用データ\r\n    applicableGenres: string[];\r\n    inputRequirements: InputRequirement[];\r\n    outputFormat: OutputFormat;\r\n\r\n    // 学習データ\r\n    trainingData: TrainingData[];\r\n    validationResults: ValidationResult[];\r\n\r\n    // 改善履歴\r\n    improvementHistory: ImprovementRecord[];\r\n\r\n    // メタデータ\r\n    createdAt: string;\r\n    lastTrained: string;\r\n    version: string;\r\n    status: 'active' | 'testing' | 'deprecated';",
              "properties": {
                "patternId": {
                  "name": "patternId",
                  "type": "string",
                  "optional": false
                },
                "patternName": {
                  "name": "patternName",
                  "type": "string",
                  "optional": false
                },
                "category": {
                  "name": "category",
                  "type": "'emotional' | 'narrative' | 'character' | 'structure' | 'quality'",
                  "optional": false
                },
                "analysisType": {
                  "name": "analysisType",
                  "type": "string",
                  "optional": false
                },
                "methodology": {
                  "name": "methodology",
                  "type": "AnalysisMethodology",
                  "optional": false
                },
                "parameters": {
                  "name": "parameters",
                  "type": "AnalysisParameter[]",
                  "optional": false
                },
                "accuracy": {
                  "name": "accuracy",
                  "type": "AccuracyMetrics",
                  "optional": false
                },
                "reliability": {
                  "name": "reliability",
                  "type": "ReliabilityMetrics",
                  "optional": false
                },
                "applicableGenres": {
                  "name": "applicableGenres",
                  "type": "string[]",
                  "optional": false
                },
                "inputRequirements": {
                  "name": "inputRequirements",
                  "type": "InputRequirement[]",
                  "optional": false
                },
                "outputFormat": {
                  "name": "outputFormat",
                  "type": "OutputFormat",
                  "optional": false
                },
                "trainingData": {
                  "name": "trainingData",
                  "type": "TrainingData[]",
                  "optional": false
                },
                "validationResults": {
                  "name": "validationResults",
                  "type": "ValidationResult[]",
                  "optional": false
                },
                "improvementHistory": {
                  "name": "improvementHistory",
                  "type": "ImprovementRecord[]",
                  "optional": false
                },
                "createdAt": {
                  "name": "createdAt",
                  "type": "string",
                  "optional": false
                },
                "lastTrained": {
                  "name": "lastTrained",
                  "type": "string",
                  "optional": false
                },
                "version": {
                  "name": "version",
                  "type": "string",
                  "optional": false
                },
                "status": {
                  "name": "status",
                  "type": "'active' | 'testing' | 'deprecated'",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 383
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "OptimizationStrategy": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "OptimizationStrategy",
              "body": "strategyId: string;\n    strategy: any;\n    effectiveness: number;\n    contexts: string[];",
              "properties": {
                "strategyId": {
                  "name": "strategyId",
                  "type": "string",
                  "optional": false
                },
                "strategy": {
                  "name": "strategy",
                  "type": "any",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "number",
                  "optional": false
                },
                "contexts": {
                  "name": "contexts",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 845
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "OptimizationStrategy",
              "body": "strategyId: string;\r\n    strategyName: string;\r\n    category: 'performance' | 'quality' | 'efficiency' | 'resource' | 'user_experience';\r\n\r\n    // 戦略定義\r\n    objective: string;\r\n    approach: OptimizationApproach;\r\n    techniques: OptimizationTechnique[];\r\n\r\n    // 効果データ\r\n    expectedBenefits: Benefit[];\r\n    measuredImpact: ImpactMeasurement[];\r\n\r\n    // 適用データ\r\n    applicableScenarios: OptimizationScenario[];\r\n    prerequisites: Prerequisite[];\r\n    constraints: OptimizationConstraint[];\r\n\r\n    // 実装データ\r\n    implementationGuide: ImplementationGuide;\r\n    rollbackPlan: RollbackPlan;\r\n\r\n    // 監視データ\r\n    monitoringMetrics: MonitoringMetric[];\r\n    alertThresholds: AlertThreshold[];\r\n\r\n    // メタデータ\r\n    createdAt: string;\r\n    lastApplied: string;\r\n    successRate: number; // 0-1\r\n    maturityLevel: 'experimental' | 'pilot' | 'production' | 'deprecated';",
              "properties": {
                "strategyId": {
                  "name": "strategyId",
                  "type": "string",
                  "optional": false
                },
                "strategyName": {
                  "name": "strategyName",
                  "type": "string",
                  "optional": false
                },
                "category": {
                  "name": "category",
                  "type": "'performance' | 'quality' | 'efficiency' | 'resource' | 'user_experience'",
                  "optional": false
                },
                "objective": {
                  "name": "objective",
                  "type": "string",
                  "optional": false
                },
                "approach": {
                  "name": "approach",
                  "type": "OptimizationApproach",
                  "optional": false
                },
                "techniques": {
                  "name": "techniques",
                  "type": "OptimizationTechnique[]",
                  "optional": false
                },
                "expectedBenefits": {
                  "name": "expectedBenefits",
                  "type": "Benefit[]",
                  "optional": false
                },
                "measuredImpact": {
                  "name": "measuredImpact",
                  "type": "ImpactMeasurement[]",
                  "optional": false
                },
                "applicableScenarios": {
                  "name": "applicableScenarios",
                  "type": "OptimizationScenario[]",
                  "optional": false
                },
                "prerequisites": {
                  "name": "prerequisites",
                  "type": "Prerequisite[]",
                  "optional": false
                },
                "constraints": {
                  "name": "constraints",
                  "type": "OptimizationConstraint[]",
                  "optional": false
                },
                "implementationGuide": {
                  "name": "implementationGuide",
                  "type": "ImplementationGuide",
                  "optional": false
                },
                "rollbackPlan": {
                  "name": "rollbackPlan",
                  "type": "RollbackPlan",
                  "optional": false
                },
                "monitoringMetrics": {
                  "name": "monitoringMetrics",
                  "type": "MonitoringMetric[]",
                  "optional": false
                },
                "alertThresholds": {
                  "name": "alertThresholds",
                  "type": "AlertThreshold[]",
                  "optional": false
                },
                "createdAt": {
                  "name": "createdAt",
                  "type": "string",
                  "optional": false
                },
                "lastApplied": {
                  "name": "lastApplied",
                  "type": "string",
                  "optional": false
                },
                "successRate": {
                  "name": "successRate",
                  "type": "number",
                  "optional": false
                },
                "maturityLevel": {
                  "name": "maturityLevel",
                  "type": "'experimental' | 'pilot' | 'production' | 'deprecated'",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 571
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ErrorPattern": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "ErrorPattern",
              "body": "errorType: string;\n    pattern: any;\n    frequency: number;\n    solutions: string[];",
              "properties": {
                "errorType": {
                  "name": "errorType",
                  "type": "string",
                  "optional": false
                },
                "pattern": {
                  "name": "pattern",
                  "type": "any",
                  "optional": false
                },
                "frequency": {
                  "name": "frequency",
                  "type": "number",
                  "optional": false
                },
                "solutions": {
                  "name": "solutions",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 852
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "ErrorPattern",
              "body": "patternId: string;\r\n    patternName: string;\r\n    category: 'generation' | 'analysis' | 'storage' | 'integration' | 'validation';\r\n\r\n    // パターン定義\r\n    errorType: string;\r\n    symptoms: ErrorSymptom[];\r\n    rootCauses: RootCause[];\r\n\r\n    // 発生データ\r\n    frequency: FrequencyData;\r\n    severity: SeverityData;\r\n    impact: ErrorImpact;\r\n\r\n    // 検出データ\r\n    detectionMethods: DetectionMethod[];\r\n    earlyWarnings: EarlyWarning[];\r\n\r\n    // 解決データ\r\n    solutions: ErrorSolution[];\r\n    preventionMeasures: PreventionMeasure[];\r\n\r\n    // 履歴データ\r\n    occurrenceHistory: ErrorOccurrence[];\r\n    resolutionHistory: ErrorResolution[];\r\n\r\n    // メタデータ\r\n    firstDetected: string;\r\n    lastOccurred: string;\r\n    status: 'active' | 'resolved' | 'monitoring' | 'archived';",
              "properties": {
                "patternId": {
                  "name": "patternId",
                  "type": "string",
                  "optional": false
                },
                "patternName": {
                  "name": "patternName",
                  "type": "string",
                  "optional": false
                },
                "category": {
                  "name": "category",
                  "type": "'generation' | 'analysis' | 'storage' | 'integration' | 'validation'",
                  "optional": false
                },
                "errorType": {
                  "name": "errorType",
                  "type": "string",
                  "optional": false
                },
                "symptoms": {
                  "name": "symptoms",
                  "type": "ErrorSymptom[]",
                  "optional": false
                },
                "rootCauses": {
                  "name": "rootCauses",
                  "type": "RootCause[]",
                  "optional": false
                },
                "frequency": {
                  "name": "frequency",
                  "type": "FrequencyData",
                  "optional": false
                },
                "severity": {
                  "name": "severity",
                  "type": "SeverityData",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "ErrorImpact",
                  "optional": false
                },
                "detectionMethods": {
                  "name": "detectionMethods",
                  "type": "DetectionMethod[]",
                  "optional": false
                },
                "earlyWarnings": {
                  "name": "earlyWarnings",
                  "type": "EarlyWarning[]",
                  "optional": false
                },
                "solutions": {
                  "name": "solutions",
                  "type": "ErrorSolution[]",
                  "optional": false
                },
                "preventionMeasures": {
                  "name": "preventionMeasures",
                  "type": "PreventionMeasure[]",
                  "optional": false
                },
                "occurrenceHistory": {
                  "name": "occurrenceHistory",
                  "type": "ErrorOccurrence[]",
                  "optional": false
                },
                "resolutionHistory": {
                  "name": "resolutionHistory",
                  "type": "ErrorResolution[]",
                  "optional": false
                },
                "firstDetected": {
                  "name": "firstDetected",
                  "type": "string",
                  "optional": false
                },
                "lastOccurred": {
                  "name": "lastOccurred",
                  "type": "string",
                  "optional": false
                },
                "status": {
                  "name": "status",
                  "type": "'active' | 'resolved' | 'monitoring' | 'archived'",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 892
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "QualityImprovementStrategy": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "QualityImprovementStrategy",
              "body": "strategyId: string;\n    strategy: any;\n    effectiveness: number;\n    applications: string[];",
              "properties": {
                "strategyId": {
                  "name": "strategyId",
                  "type": "string",
                  "optional": false
                },
                "strategy": {
                  "name": "strategy",
                  "type": "any",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "number",
                  "optional": false
                },
                "applications": {
                  "name": "applications",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 859
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "QualityImprovementStrategy",
              "body": "strategyId: string;\r\n    strategyName: string;\r\n    category: 'content' | 'process' | 'system' | 'user_experience' | 'performance';\r\n\r\n    // 戦略定義\r\n    objective: string;\r\n    scope: string;\r\n    approach: QualityApproach;\r\n\r\n    // 品質指標\r\n    qualityMetrics: QualityMetric[];\r\n    targetLevels: QualityTarget[];\r\n\r\n    // 改善手法\r\n    techniques: QualityTechnique[];\r\n    tools: QualityTool[];\r\n\r\n    // 実装計画\r\n    implementationPlan: QualityImplementationPlan;\r\n    milestones: QualityMilestone[];\r\n\r\n    // 測定・監視\r\n    measurementFramework: MeasurementFramework;\r\n    continuousImprovement: ContinuousImprovementPlan;\r\n\r\n    // メタデータ\r\n    createdAt: string;\r\n    lastReviewed: string;\r\n    status: 'draft' | 'approved' | 'active' | 'completed' | 'suspended';\r\n    owner: string;",
              "properties": {
                "strategyId": {
                  "name": "strategyId",
                  "type": "string",
                  "optional": false
                },
                "strategyName": {
                  "name": "strategyName",
                  "type": "string",
                  "optional": false
                },
                "category": {
                  "name": "category",
                  "type": "'content' | 'process' | 'system' | 'user_experience' | 'performance'",
                  "optional": false
                },
                "objective": {
                  "name": "objective",
                  "type": "string",
                  "optional": false
                },
                "scope": {
                  "name": "scope",
                  "type": "string",
                  "optional": false
                },
                "approach": {
                  "name": "approach",
                  "type": "QualityApproach",
                  "optional": false
                },
                "qualityMetrics": {
                  "name": "qualityMetrics",
                  "type": "QualityMetric[]",
                  "optional": false
                },
                "targetLevels": {
                  "name": "targetLevels",
                  "type": "QualityTarget[]",
                  "optional": false
                },
                "techniques": {
                  "name": "techniques",
                  "type": "QualityTechnique[]",
                  "optional": false
                },
                "tools": {
                  "name": "tools",
                  "type": "QualityTool[]",
                  "optional": false
                },
                "implementationPlan": {
                  "name": "implementationPlan",
                  "type": "QualityImplementationPlan",
                  "optional": false
                },
                "milestones": {
                  "name": "milestones",
                  "type": "QualityMilestone[]",
                  "optional": false
                },
                "measurementFramework": {
                  "name": "measurementFramework",
                  "type": "MeasurementFramework",
                  "optional": false
                },
                "continuousImprovement": {
                  "name": "continuousImprovement",
                  "type": "ContinuousImprovementPlan",
                  "optional": false
                },
                "createdAt": {
                  "name": "createdAt",
                  "type": "string",
                  "optional": false
                },
                "lastReviewed": {
                  "name": "lastReviewed",
                  "type": "string",
                  "optional": false
                },
                "status": {
                  "name": "status",
                  "type": "'draft' | 'approved' | 'active' | 'completed' | 'suspended'",
                  "optional": false
                },
                "owner": {
                  "name": "owner",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1096
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "MemoryRequestType": [
          {
            "type": "enum",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "MemoryRequestType",
              "body": "CHAPTER_CONTEXT = 'CHAPTER_CONTEXT',\n    CHARACTER_ANALYSIS = 'CHARACTER_ANALYSIS',\n    NARRATIVE_STATE = 'NARRATIVE_STATE',\n    WORLD_KNOWLEDGE = 'WORLD_KNOWLEDGE',\n    SYSTEM_DIAGNOSTICS = 'SYSTEM_DIAGNOSTICS',\n    INTEGRATED_CONTEXT = 'INTEGRATED_CONTEXT'",
              "values": [
                {
                  "name": "CHAPTER_CONTEXT",
                  "value": "'CHAPTER_CONTEXT'"
                },
                {
                  "name": "CHARACTER_ANALYSIS",
                  "value": "'CHARACTER_ANALYSIS'"
                },
                {
                  "name": "NARRATIVE_STATE",
                  "value": "'NARRATIVE_STATE'"
                },
                {
                  "name": "WORLD_KNOWLEDGE",
                  "value": "'WORLD_KNOWLEDGE'"
                },
                {
                  "name": "SYSTEM_DIAGNOSTICS",
                  "value": "'SYSTEM_DIAGNOSTICS'"
                },
                {
                  "name": "INTEGRATED_CONTEXT",
                  "value": "'INTEGRATED_CONTEXT'"
                }
              ],
              "lineNumber": 146
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "ProcessingBufferType": [
          {
            "type": "enum",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "ProcessingBufferType",
              "body": "PROMPT_GENERATION = 'PROMPT_GENERATION',\n    CONTEXT_GENERATION = 'CONTEXT_GENERATION',\n    AI_ANALYSIS = 'AI_ANALYSIS',\n    TEXT_ANALYSIS = 'TEXT_ANALYSIS',\n    CHARACTER_DETECTION = 'CHARACTER_DETECTION'",
              "values": [
                {
                  "name": "PROMPT_GENERATION",
                  "value": "'PROMPT_GENERATION'"
                },
                {
                  "name": "CONTEXT_GENERATION",
                  "value": "'CONTEXT_GENERATION'"
                },
                {
                  "name": "AI_ANALYSIS",
                  "value": "'AI_ANALYSIS'"
                },
                {
                  "name": "TEXT_ANALYSIS",
                  "value": "'TEXT_ANALYSIS'"
                },
                {
                  "name": "CHARACTER_DETECTION",
                  "value": "'CHARACTER_DETECTION'"
                }
              ],
              "lineNumber": 226
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "DuplicateType": [
          {
            "type": "enum",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "DuplicateType",
              "body": "WORLD_SETTINGS = 'WORLD_SETTINGS',\n    CHARACTER_INFO = 'CHARACTER_INFO',\n    MEMORY_ACCESS = 'MEMORY_ACCESS',\n    GENRE_SETTINGS = 'GENRE_SETTINGS',\n    AI_ANALYSIS = 'AI_ANALYSIS'",
              "values": [
                {
                  "name": "WORLD_SETTINGS",
                  "value": "'WORLD_SETTINGS'"
                },
                {
                  "name": "CHARACTER_INFO",
                  "value": "'CHARACTER_INFO'"
                },
                {
                  "name": "MEMORY_ACCESS",
                  "value": "'MEMORY_ACCESS'"
                },
                {
                  "name": "GENRE_SETTINGS",
                  "value": "'GENRE_SETTINGS'"
                },
                {
                  "name": "AI_ANALYSIS",
                  "value": "'AI_ANALYSIS'"
                }
              ],
              "lineNumber": 341
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "OptimizationType": [
          {
            "type": "enum",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "OptimizationType",
              "body": "CACHE_OPTIMIZATION = 'CACHE_OPTIMIZATION',\n    DUPLICATE_RESOLUTION = 'DUPLICATE_RESOLUTION',\n    ACCESS_PATTERN_OPTIMIZATION = 'ACCESS_PATTERN_OPTIMIZATION',\n    COMPRESSION_OPTIMIZATION = 'COMPRESSION_OPTIMIZATION'",
              "values": [
                {
                  "name": "CACHE_OPTIMIZATION",
                  "value": "'CACHE_OPTIMIZATION'"
                },
                {
                  "name": "DUPLICATE_RESOLUTION",
                  "value": "'DUPLICATE_RESOLUTION'"
                },
                {
                  "name": "ACCESS_PATTERN_OPTIMIZATION",
                  "value": "'ACCESS_PATTERN_OPTIMIZATION'"
                },
                {
                  "name": "COMPRESSION_OPTIMIZATION",
                  "value": "'COMPRESSION_OPTIMIZATION'"
                }
              ],
              "lineNumber": 386
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "SystemHealth": [
          {
            "type": "enum",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "SystemHealth",
              "body": "HEALTHY = 'HEALTHY',\n    DEGRADED = 'DEGRADED',\n    CRITICAL = 'CRITICAL'",
              "values": [
                {
                  "name": "HEALTHY",
                  "value": "'HEALTHY'"
                },
                {
                  "name": "DEGRADED",
                  "value": "'DEGRADED'"
                },
                {
                  "name": "CRITICAL",
                  "value": "'CRITICAL'"
                }
              ],
              "lineNumber": 467
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "ExtendedCharacterState": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "ExtendedCharacterState",
              "body": "// CharacterState から継承したが型を変更するプロパティ\r\n  skills: SkillRecord[]; // string[] から SkillRecord[] に変更\r\n  \r\n  // 詳細状態\r\n  detailedEmotionalState: DetailedEmotionalState;\r\n  physicalCondition: PhysicalCondition;\r\n  mentalCondition: MentalCondition;\r\n  socialStatus: SocialStatus;\r\n  \r\n  // 能力・知識\r\n  abilities: AbilityRecord[];\r\n  knowledge: KnowledgeRecord[];\r\n  \r\n  // 所有・リソース\r\n  possessions: PossessionRecord[];\r\n  resources: ResourceRecord[];\r\n  obligations: ObligationRecord[];\r\n  \r\n  // 目標・動機\r\n  currentGoals: GoalRecord[];\r\n  motivations: MotivationRecord[];\r\n  conflicts: ConflictRecord[];",
              "properties": {
                "skills": {
                  "name": "skills",
                  "type": "SkillRecord[]",
                  "optional": false
                },
                "detailedEmotionalState": {
                  "name": "detailedEmotionalState",
                  "type": "DetailedEmotionalState",
                  "optional": false
                },
                "physicalCondition": {
                  "name": "physicalCondition",
                  "type": "PhysicalCondition",
                  "optional": false
                },
                "mentalCondition": {
                  "name": "mentalCondition",
                  "type": "MentalCondition",
                  "optional": false
                },
                "socialStatus": {
                  "name": "socialStatus",
                  "type": "SocialStatus",
                  "optional": false
                },
                "abilities": {
                  "name": "abilities",
                  "type": "AbilityRecord[]",
                  "optional": false
                },
                "knowledge": {
                  "name": "knowledge",
                  "type": "KnowledgeRecord[]",
                  "optional": false
                },
                "possessions": {
                  "name": "possessions",
                  "type": "PossessionRecord[]",
                  "optional": false
                },
                "resources": {
                  "name": "resources",
                  "type": "ResourceRecord[]",
                  "optional": false
                },
                "obligations": {
                  "name": "obligations",
                  "type": "ObligationRecord[]",
                  "optional": false
                },
                "currentGoals": {
                  "name": "currentGoals",
                  "type": "GoalRecord[]",
                  "optional": false
                },
                "motivations": {
                  "name": "motivations",
                  "type": "MotivationRecord[]",
                  "optional": false
                },
                "conflicts": {
                  "name": "conflicts",
                  "type": "ConflictRecord[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 49
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ConsolidationSource": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "ConsolidationSource",
              "body": "source: 'CharacterManager' | 'WorldKnowledge' | 'StorageFiles' | 'Manual';\r\n  sourceId: string;\r\n  lastUpdated: string;\r\n  priority: number;\r\n  reliability: number;",
              "properties": {
                "source": {
                  "name": "source",
                  "type": "'CharacterManager' | 'WorldKnowledge' | 'StorageFiles' | 'Manual'",
                  "optional": false
                },
                "sourceId": {
                  "name": "sourceId",
                  "type": "string",
                  "optional": false
                },
                "lastUpdated": {
                  "name": "lastUpdated",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                },
                "reliability": {
                  "name": "reliability",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 77
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "CharacterConflictResolution": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "CharacterConflictResolution",
              "body": "conflictType: 'description' | 'type' | 'personality' | 'backstory' | 'state';\r\n  sourceA: string;\r\n  sourceB: string;\r\n  conflictData: any;\r\n  resolution: any;\r\n  resolutionMethod: 'auto' | 'priority' | 'merge' | 'manual';\r\n  resolvedAt: string;\r\n  resolvedBy: string;",
              "properties": {
                "conflictType": {
                  "name": "conflictType",
                  "type": "'description' | 'type' | 'personality' | 'backstory' | 'state'",
                  "optional": false
                },
                "sourceA": {
                  "name": "sourceA",
                  "type": "string",
                  "optional": false
                },
                "sourceB": {
                  "name": "sourceB",
                  "type": "string",
                  "optional": false
                },
                "conflictData": {
                  "name": "conflictData",
                  "type": "any",
                  "optional": false
                },
                "resolution": {
                  "name": "resolution",
                  "type": "any",
                  "optional": false
                },
                "resolutionMethod": {
                  "name": "resolutionMethod",
                  "type": "'auto' | 'priority' | 'merge' | 'manual'",
                  "optional": false
                },
                "resolvedAt": {
                  "name": "resolvedAt",
                  "type": "string",
                  "optional": false
                },
                "resolvedBy": {
                  "name": "resolvedBy",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 88
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "CharacterPersonality": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "CharacterPersonality",
              "body": "traits: string[];\r\n  coreValues: string[];\r\n  motivations: string[];\r\n  fears: string[];\r\n  habits: string[];\r\n  speechPatterns: string[];\r\n  emotionalRange: EmotionalRange;\r\n  socialBehavior: SocialBehavior;",
              "properties": {
                "traits": {
                  "name": "traits",
                  "type": "string[]",
                  "optional": false
                },
                "coreValues": {
                  "name": "coreValues",
                  "type": "string[]",
                  "optional": false
                },
                "motivations": {
                  "name": "motivations",
                  "type": "string[]",
                  "optional": false
                },
                "fears": {
                  "name": "fears",
                  "type": "string[]",
                  "optional": false
                },
                "habits": {
                  "name": "habits",
                  "type": "string[]",
                  "optional": false
                },
                "speechPatterns": {
                  "name": "speechPatterns",
                  "type": "string[]",
                  "optional": false
                },
                "emotionalRange": {
                  "name": "emotionalRange",
                  "type": "EmotionalRange",
                  "optional": false
                },
                "socialBehavior": {
                  "name": "socialBehavior",
                  "type": "SocialBehavior",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 102
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "EmotionalRange": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "EmotionalRange",
              "body": "dominant: string;\r\n  secondary: string[];\r\n  triggers: Record<string, string[]>;\r\n  expressions: Record<string, string[]>;",
              "properties": {
                "dominant": {
                  "name": "dominant",
                  "type": "string",
                  "optional": false
                },
                "secondary": {
                  "name": "secondary",
                  "type": "string[]",
                  "optional": false
                },
                "triggers": {
                  "name": "triggers",
                  "type": "Record<string",
                  "optional": false
                },
                "expressions": {
                  "name": "expressions",
                  "type": "Record<string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 116
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "SocialBehavior": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "SocialBehavior",
              "body": "leadership: number; // 0-10\r\n  cooperation: number; // 0-10\r\n  empathy: number; // 0-10\r\n  assertiveness: number; // 0-10\r\n  socialEnergy: number; // 0-10",
              "properties": {
                "leadership": {
                  "name": "leadership",
                  "type": "number",
                  "optional": false
                },
                "cooperation": {
                  "name": "cooperation",
                  "type": "number",
                  "optional": false
                },
                "empathy": {
                  "name": "empathy",
                  "type": "number",
                  "optional": false
                },
                "assertiveness": {
                  "name": "assertiveness",
                  "type": "number",
                  "optional": false
                },
                "socialEnergy": {
                  "name": "socialEnergy",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 126
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "CharacterBackstory": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "CharacterBackstory",
              "body": "summary: string;\r\n  keyEvents: BackstoryEvent[];\r\n  significantRelationships: SignificantRelationship[];\r\n  formativeExperiences: FormativeExperience[];\r\n  secrets: string[];\r\n  regrets: string[];\r\n  achievements: string[];",
              "properties": {
                "summary": {
                  "name": "summary",
                  "type": "string",
                  "optional": false
                },
                "keyEvents": {
                  "name": "keyEvents",
                  "type": "BackstoryEvent[]",
                  "optional": false
                },
                "significantRelationships": {
                  "name": "significantRelationships",
                  "type": "SignificantRelationship[]",
                  "optional": false
                },
                "formativeExperiences": {
                  "name": "formativeExperiences",
                  "type": "FormativeExperience[]",
                  "optional": false
                },
                "secrets": {
                  "name": "secrets",
                  "type": "string[]",
                  "optional": false
                },
                "regrets": {
                  "name": "regrets",
                  "type": "string[]",
                  "optional": false
                },
                "achievements": {
                  "name": "achievements",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 137
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "BackstoryEvent": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "BackstoryEvent",
              "body": "eventId: string;\r\n  title: string;\r\n  description: string;\r\n  ageAtEvent?: number;\r\n  impact: number; // 0-10\r\n  eventType: 'trauma' | 'achievement' | 'relationship' | 'loss' | 'discovery' | 'other';\r\n  relatedCharacters: string[];",
              "properties": {
                "eventId": {
                  "name": "eventId",
                  "type": "string",
                  "optional": false
                },
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "ageAtEvent": {
                  "name": "ageAtEvent",
                  "type": "number",
                  "optional": true
                },
                "impact": {
                  "name": "impact",
                  "type": "number",
                  "optional": false
                },
                "eventType": {
                  "name": "eventType",
                  "type": "'trauma' | 'achievement' | 'relationship' | 'loss' | 'discovery' | 'other'",
                  "optional": false
                },
                "relatedCharacters": {
                  "name": "relatedCharacters",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 150
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "SignificantRelationship": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "SignificantRelationship",
              "body": "relationshipId: string;\r\n  targetCharacterId: string;\r\n  targetCharacterName: string;\r\n  relationshipType: string;\r\n  description: string;\r\n  intensity: number; // 0-10\r\n  duration: string;\r\n  status: 'active' | 'ended' | 'complicated' | 'dormant';\r\n  keyMoments: string[];",
              "properties": {
                "relationshipId": {
                  "name": "relationshipId",
                  "type": "string",
                  "optional": false
                },
                "targetCharacterId": {
                  "name": "targetCharacterId",
                  "type": "string",
                  "optional": false
                },
                "targetCharacterName": {
                  "name": "targetCharacterName",
                  "type": "string",
                  "optional": false
                },
                "relationshipType": {
                  "name": "relationshipType",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "intensity": {
                  "name": "intensity",
                  "type": "number",
                  "optional": false
                },
                "duration": {
                  "name": "duration",
                  "type": "string",
                  "optional": false
                },
                "status": {
                  "name": "status",
                  "type": "'active' | 'ended' | 'complicated' | 'dormant'",
                  "optional": false
                },
                "keyMoments": {
                  "name": "keyMoments",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 163
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "FormativeExperience": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "FormativeExperience",
              "body": "experienceId: string;\r\n  title: string;\r\n  description: string;\r\n  ageRange: string;\r\n  lessonsLearned: string[];\r\n  skillsGained: string[];\r\n  traitsFormed: string[];\r\n  impact: number; // 0-10",
              "properties": {
                "experienceId": {
                  "name": "experienceId",
                  "type": "string",
                  "optional": false
                },
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "ageRange": {
                  "name": "ageRange",
                  "type": "string",
                  "optional": false
                },
                "lessonsLearned": {
                  "name": "lessonsLearned",
                  "type": "string[]",
                  "optional": false
                },
                "skillsGained": {
                  "name": "skillsGained",
                  "type": "string[]",
                  "optional": false
                },
                "traitsFormed": {
                  "name": "traitsFormed",
                  "type": "string[]",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 178
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "CharacterRelationship": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "CharacterRelationship",
              "body": "relationshipId: string;\r\n  targetCharacterId: string;\r\n  targetCharacterName: string;\r\n  relationshipType: string;\r\n  currentStatus: RelationshipStatus;\r\n  history: RelationshipHistoryEntry[];\r\n  dynamics: RelationshipDynamics;\r\n  metadata: RelationshipMetadata;",
              "properties": {
                "relationshipId": {
                  "name": "relationshipId",
                  "type": "string",
                  "optional": false
                },
                "targetCharacterId": {
                  "name": "targetCharacterId",
                  "type": "string",
                  "optional": false
                },
                "targetCharacterName": {
                  "name": "targetCharacterName",
                  "type": "string",
                  "optional": false
                },
                "relationshipType": {
                  "name": "relationshipType",
                  "type": "string",
                  "optional": false
                },
                "currentStatus": {
                  "name": "currentStatus",
                  "type": "RelationshipStatus",
                  "optional": false
                },
                "history": {
                  "name": "history",
                  "type": "RelationshipHistoryEntry[]",
                  "optional": false
                },
                "dynamics": {
                  "name": "dynamics",
                  "type": "RelationshipDynamics",
                  "optional": false
                },
                "metadata": {
                  "name": "metadata",
                  "type": "RelationshipMetadata",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 192
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "RelationshipStatus": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "RelationshipStatus",
              "body": "status: 'positive' | 'negative' | 'neutral' | 'complex';\r\n  intensity: number; // 0-10\r\n  trust: number; // 0-10\r\n  understanding: number; // 0-10\r\n  conflict: number; // 0-10\r\n  dependency: number; // 0-10\r\n  lastInteraction: string;",
              "properties": {
                "status": {
                  "name": "status",
                  "type": "'positive' | 'negative' | 'neutral' | 'complex'",
                  "optional": false
                },
                "intensity": {
                  "name": "intensity",
                  "type": "number",
                  "optional": false
                },
                "trust": {
                  "name": "trust",
                  "type": "number",
                  "optional": false
                },
                "understanding": {
                  "name": "understanding",
                  "type": "number",
                  "optional": false
                },
                "conflict": {
                  "name": "conflict",
                  "type": "number",
                  "optional": false
                },
                "dependency": {
                  "name": "dependency",
                  "type": "number",
                  "optional": false
                },
                "lastInteraction": {
                  "name": "lastInteraction",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 206
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "RelationshipHistoryEntry": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "RelationshipHistoryEntry",
              "body": "entryId: string;\r\n  chapterNumber: number;\r\n  event: string;\r\n  impact: number;\r\n  statusChange: Partial<RelationshipStatus>;\r\n  timestamp: string;",
              "properties": {
                "entryId": {
                  "name": "entryId",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "event": {
                  "name": "event",
                  "type": "string",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "number",
                  "optional": false
                },
                "statusChange": {
                  "name": "statusChange",
                  "type": "Partial<RelationshipStatus>",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 219
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "RelationshipDynamics": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "RelationshipDynamics",
              "body": "powerBalance: number; // -10 to 10 (negative = other has power)\r\n  emotionalConnection: number; // 0-10\r\n  commonGoals: string[];\r\n  conflictSources: string[];\r\n  interactionPatterns: string[];\r\n  growthPotential: number; // 0-10",
              "properties": {
                "powerBalance": {
                  "name": "powerBalance",
                  "type": "number",
                  "optional": false
                },
                "emotionalConnection": {
                  "name": "emotionalConnection",
                  "type": "number",
                  "optional": false
                },
                "commonGoals": {
                  "name": "commonGoals",
                  "type": "string[]",
                  "optional": false
                },
                "conflictSources": {
                  "name": "conflictSources",
                  "type": "string[]",
                  "optional": false
                },
                "interactionPatterns": {
                  "name": "interactionPatterns",
                  "type": "string[]",
                  "optional": false
                },
                "growthPotential": {
                  "name": "growthPotential",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 231
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "RelationshipMetadata": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "RelationshipMetadata",
              "body": "established: string;\r\n  lastUpdated: string;\r\n  significance: number; // 0-10\r\n  narrativeRole: string;\r\n  tags: string[];",
              "properties": {
                "established": {
                  "name": "established",
                  "type": "string",
                  "optional": false
                },
                "lastUpdated": {
                  "name": "lastUpdated",
                  "type": "string",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": false
                },
                "narrativeRole": {
                  "name": "narrativeRole",
                  "type": "string",
                  "optional": false
                },
                "tags": {
                  "name": "tags",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 243
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "DetailedEmotionalState": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "DetailedEmotionalState",
              "body": "primary: string;\r\n  secondary: string[];\r\n  intensity: number; // 0-10\r\n  stability: number; // 0-10\r\n  triggers: string[];\r\n  coping: string[];\r\n  lastChange: string;\r\n  influences: EmotionalInfluence[];",
              "properties": {
                "primary": {
                  "name": "primary",
                  "type": "string",
                  "optional": false
                },
                "secondary": {
                  "name": "secondary",
                  "type": "string[]",
                  "optional": false
                },
                "intensity": {
                  "name": "intensity",
                  "type": "number",
                  "optional": false
                },
                "stability": {
                  "name": "stability",
                  "type": "number",
                  "optional": false
                },
                "triggers": {
                  "name": "triggers",
                  "type": "string[]",
                  "optional": false
                },
                "coping": {
                  "name": "coping",
                  "type": "string[]",
                  "optional": false
                },
                "lastChange": {
                  "name": "lastChange",
                  "type": "string",
                  "optional": false
                },
                "influences": {
                  "name": "influences",
                  "type": "EmotionalInfluence[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 254
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "EmotionalInfluence": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "EmotionalInfluence",
              "body": "source: string;\r\n  type: 'character' | 'event' | 'environment' | 'internal';\r\n  impact: number; // -10 to 10\r\n  duration: 'temporary' | 'ongoing' | 'permanent';",
              "properties": {
                "source": {
                  "name": "source",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'character' | 'event' | 'environment' | 'internal'",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "number",
                  "optional": false
                },
                "duration": {
                  "name": "duration",
                  "type": "'temporary' | 'ongoing' | 'permanent'",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 268
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "PhysicalCondition": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "PhysicalCondition",
              "body": "health: number; // 0-10\r\n  energy: number; // 0-10\r\n  fitness: number; // 0-10\r\n  injuries: InjuryRecord[];\r\n  disabilities: DisabilityRecord[];\r\n  appearance: AppearanceRecord;",
              "properties": {
                "health": {
                  "name": "health",
                  "type": "number",
                  "optional": false
                },
                "energy": {
                  "name": "energy",
                  "type": "number",
                  "optional": false
                },
                "fitness": {
                  "name": "fitness",
                  "type": "number",
                  "optional": false
                },
                "injuries": {
                  "name": "injuries",
                  "type": "InjuryRecord[]",
                  "optional": false
                },
                "disabilities": {
                  "name": "disabilities",
                  "type": "DisabilityRecord[]",
                  "optional": false
                },
                "appearance": {
                  "name": "appearance",
                  "type": "AppearanceRecord",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 278
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "MentalCondition": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "MentalCondition",
              "body": "clarity: number; // 0-10\r\n  focus: number; // 0-10\r\n  stress: number; // 0-10\r\n  confidence: number; // 0-10\r\n  mentalIssues: MentalIssueRecord[];\r\n  copingMechanisms: string[];",
              "properties": {
                "clarity": {
                  "name": "clarity",
                  "type": "number",
                  "optional": false
                },
                "focus": {
                  "name": "focus",
                  "type": "number",
                  "optional": false
                },
                "stress": {
                  "name": "stress",
                  "type": "number",
                  "optional": false
                },
                "confidence": {
                  "name": "confidence",
                  "type": "number",
                  "optional": false
                },
                "mentalIssues": {
                  "name": "mentalIssues",
                  "type": "MentalIssueRecord[]",
                  "optional": false
                },
                "copingMechanisms": {
                  "name": "copingMechanisms",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 290
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "SocialStatus": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "SocialStatus",
              "body": "reputation: number; // 0-10\r\n  influence: number; // 0-10\r\n  connections: number; // 0-10\r\n  socialCircles: string[];\r\n  roles: SocialRole[];\r\n  responsibilities: string[];",
              "properties": {
                "reputation": {
                  "name": "reputation",
                  "type": "number",
                  "optional": false
                },
                "influence": {
                  "name": "influence",
                  "type": "number",
                  "optional": false
                },
                "connections": {
                  "name": "connections",
                  "type": "number",
                  "optional": false
                },
                "socialCircles": {
                  "name": "socialCircles",
                  "type": "string[]",
                  "optional": false
                },
                "roles": {
                  "name": "roles",
                  "type": "SocialRole[]",
                  "optional": false
                },
                "responsibilities": {
                  "name": "responsibilities",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 302
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "SkillRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "SkillRecord",
              "body": "skillId: string;\r\n  name: string;\r\n  level: number; // 0-10\r\n  experience: number;\r\n  category: string;\r\n  acquiredDate: string;\r\n  lastUsed: string;\r\n  relevantSituations: string[];",
              "properties": {
                "skillId": {
                  "name": "skillId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "level": {
                  "name": "level",
                  "type": "number",
                  "optional": false
                },
                "experience": {
                  "name": "experience",
                  "type": "number",
                  "optional": false
                },
                "category": {
                  "name": "category",
                  "type": "string",
                  "optional": false
                },
                "acquiredDate": {
                  "name": "acquiredDate",
                  "type": "string",
                  "optional": false
                },
                "lastUsed": {
                  "name": "lastUsed",
                  "type": "string",
                  "optional": false
                },
                "relevantSituations": {
                  "name": "relevantSituations",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 314
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "AbilityRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "AbilityRecord",
              "body": "abilityId: string;\r\n  name: string;\r\n  description: string;\r\n  type: 'innate' | 'learned' | 'granted' | 'magical';\r\n  power: number; // 0-10\r\n  limitations: string[];\r\n  cost: string;\r\n  cooldown?: string;",
              "properties": {
                "abilityId": {
                  "name": "abilityId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'innate' | 'learned' | 'granted' | 'magical'",
                  "optional": false
                },
                "power": {
                  "name": "power",
                  "type": "number",
                  "optional": false
                },
                "limitations": {
                  "name": "limitations",
                  "type": "string[]",
                  "optional": false
                },
                "cost": {
                  "name": "cost",
                  "type": "string",
                  "optional": false
                },
                "cooldown": {
                  "name": "cooldown",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 328
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "KnowledgeRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "KnowledgeRecord",
              "body": "knowledgeId: string;\r\n  domain: string;\r\n  description: string;\r\n  depth: number; // 0-10\r\n  breadth: number; // 0-10\r\n  source: string;\r\n  acquiredDate: string;\r\n  relevance: number; // 0-10",
              "properties": {
                "knowledgeId": {
                  "name": "knowledgeId",
                  "type": "string",
                  "optional": false
                },
                "domain": {
                  "name": "domain",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "depth": {
                  "name": "depth",
                  "type": "number",
                  "optional": false
                },
                "breadth": {
                  "name": "breadth",
                  "type": "number",
                  "optional": false
                },
                "source": {
                  "name": "source",
                  "type": "string",
                  "optional": false
                },
                "acquiredDate": {
                  "name": "acquiredDate",
                  "type": "string",
                  "optional": false
                },
                "relevance": {
                  "name": "relevance",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 342
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "PossessionRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "PossessionRecord",
              "body": "itemId: string;\r\n  name: string;\r\n  description: string;\r\n  value: number;\r\n  significance: number; // 0-10\r\n  condition: string;\r\n  location: string;\r\n  acquiredDate: string;",
              "properties": {
                "itemId": {
                  "name": "itemId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "value": {
                  "name": "value",
                  "type": "number",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": false
                },
                "condition": {
                  "name": "condition",
                  "type": "string",
                  "optional": false
                },
                "location": {
                  "name": "location",
                  "type": "string",
                  "optional": false
                },
                "acquiredDate": {
                  "name": "acquiredDate",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 356
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ResourceRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "ResourceRecord",
              "body": "resourceId: string;\r\n  type: 'financial' | 'social' | 'informational' | 'material' | 'time';\r\n  name: string;\r\n  amount: number;\r\n  unit: string;\r\n  availability: number; // 0-10\r\n  renewability: 'renewable' | 'finite' | 'unknown';",
              "properties": {
                "resourceId": {
                  "name": "resourceId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'financial' | 'social' | 'informational' | 'material' | 'time'",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "amount": {
                  "name": "amount",
                  "type": "number",
                  "optional": false
                },
                "unit": {
                  "name": "unit",
                  "type": "string",
                  "optional": false
                },
                "availability": {
                  "name": "availability",
                  "type": "number",
                  "optional": false
                },
                "renewability": {
                  "name": "renewability",
                  "type": "'renewable' | 'finite' | 'unknown'",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 370
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ObligationRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "ObligationRecord",
              "body": "obligationId: string;\r\n  type: 'legal' | 'moral' | 'social' | 'personal' | 'professional';\r\n  description: string;\r\n  priority: number; // 0-10\r\n  deadline?: string;\r\n  consequences: string[];\r\n  progress: number; // 0-10 (completion)",
              "properties": {
                "obligationId": {
                  "name": "obligationId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'legal' | 'moral' | 'social' | 'personal' | 'professional'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                },
                "deadline": {
                  "name": "deadline",
                  "type": "string",
                  "optional": true
                },
                "consequences": {
                  "name": "consequences",
                  "type": "string[]",
                  "optional": false
                },
                "progress": {
                  "name": "progress",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 383
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "GoalRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "GoalRecord",
              "body": "goalId: string;\r\n  title: string;\r\n  description: string;\r\n  type: 'short_term' | 'medium_term' | 'long_term' | 'life_goal';\r\n  priority: number; // 0-10\r\n  progress: number; // 0-10\r\n  deadline?: string;\r\n  obstacles: string[];\r\n  resources: string[];\r\n  dependencies: string[];",
              "properties": {
                "goalId": {
                  "name": "goalId",
                  "type": "string",
                  "optional": false
                },
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'short_term' | 'medium_term' | 'long_term' | 'life_goal'",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                },
                "progress": {
                  "name": "progress",
                  "type": "number",
                  "optional": false
                },
                "deadline": {
                  "name": "deadline",
                  "type": "string",
                  "optional": true
                },
                "obstacles": {
                  "name": "obstacles",
                  "type": "string[]",
                  "optional": false
                },
                "resources": {
                  "name": "resources",
                  "type": "string[]",
                  "optional": false
                },
                "dependencies": {
                  "name": "dependencies",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 396
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "MotivationRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "MotivationRecord",
              "body": "motivationId: string;\r\n  type: 'survival' | 'security' | 'belonging' | 'esteem' | 'self_actualization';\r\n  description: string;\r\n  intensity: number; // 0-10\r\n  source: string;\r\n  satisfactionLevel: number; // 0-10\r\n  related: string[];",
              "properties": {
                "motivationId": {
                  "name": "motivationId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'survival' | 'security' | 'belonging' | 'esteem' | 'self_actualization'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "intensity": {
                  "name": "intensity",
                  "type": "number",
                  "optional": false
                },
                "source": {
                  "name": "source",
                  "type": "string",
                  "optional": false
                },
                "satisfactionLevel": {
                  "name": "satisfactionLevel",
                  "type": "number",
                  "optional": false
                },
                "related": {
                  "name": "related",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 412
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ConflictRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "ConflictRecord",
              "body": "conflictId: string;\r\n  type: 'internal' | 'interpersonal' | 'societal' | 'ideological';\r\n  description: string;\r\n  severity: number; // 0-10\r\n  parties: string[];\r\n  stakes: string[];\r\n  possibleResolutions: string[];\r\n  progress: number; // 0-10 toward resolution",
              "properties": {
                "conflictId": {
                  "name": "conflictId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'internal' | 'interpersonal' | 'societal' | 'ideological'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "severity": {
                  "name": "severity",
                  "type": "number",
                  "optional": false
                },
                "parties": {
                  "name": "parties",
                  "type": "string[]",
                  "optional": false
                },
                "stakes": {
                  "name": "stakes",
                  "type": "string[]",
                  "optional": false
                },
                "possibleResolutions": {
                  "name": "possibleResolutions",
                  "type": "string[]",
                  "optional": false
                },
                "progress": {
                  "name": "progress",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 425
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "CharacterAppearanceRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "CharacterAppearanceRecord",
              "body": "recordId: string;\r\n  chapterNumber: number;\r\n  role: 'protagonist' | 'deuteragonist' | 'supporting' | 'minor' | 'mentioned';\r\n  significance: number; // 0-10\r\n  screenTime: number; // estimated minutes/pages\r\n  interactions: string[];\r\n  impact: string;\r\n  timestamp: string;",
              "properties": {
                "recordId": {
                  "name": "recordId",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "role": {
                  "name": "role",
                  "type": "'protagonist' | 'deuteragonist' | 'supporting' | 'minor' | 'mentioned'",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": false
                },
                "screenTime": {
                  "name": "screenTime",
                  "type": "number",
                  "optional": false
                },
                "interactions": {
                  "name": "interactions",
                  "type": "string[]",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "string",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 453
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "CharacterStatistics": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "CharacterStatistics",
              "body": "totalAppearances: number;\r\n  totalScreenTime: number;\r\n  averageSignificance: number;\r\n  relationshipCount: number;\r\n  developmentEvents: number;\r\n  conflictInvolvement: number;\r\n  lastActivity: string;\r\n  firstAppearance: number;\r\n  peakChapter: number;\r\n  trendingTopics: string[];",
              "properties": {
                "totalAppearances": {
                  "name": "totalAppearances",
                  "type": "number",
                  "optional": false
                },
                "totalScreenTime": {
                  "name": "totalScreenTime",
                  "type": "number",
                  "optional": false
                },
                "averageSignificance": {
                  "name": "averageSignificance",
                  "type": "number",
                  "optional": false
                },
                "relationshipCount": {
                  "name": "relationshipCount",
                  "type": "number",
                  "optional": false
                },
                "developmentEvents": {
                  "name": "developmentEvents",
                  "type": "number",
                  "optional": false
                },
                "conflictInvolvement": {
                  "name": "conflictInvolvement",
                  "type": "number",
                  "optional": false
                },
                "lastActivity": {
                  "name": "lastActivity",
                  "type": "string",
                  "optional": false
                },
                "firstAppearance": {
                  "name": "firstAppearance",
                  "type": "number",
                  "optional": false
                },
                "peakChapter": {
                  "name": "peakChapter",
                  "type": "number",
                  "optional": false
                },
                "trendingTopics": {
                  "name": "trendingTopics",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 483
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "FormattedCharacterData": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "FormattedCharacterData",
              "body": "shortDescription: string;\r\n  mediumDescription: string;\r\n  longDescription: string;\r\n  personalityProfile: string;\r\n  relationshipSummary: string;\r\n  backgroundSummary: string;\r\n  currentStatusSummary: string;\r\n  developmentArc: string;\r\n  keyQuotes: string[];\r\n  characterTags: string[];\r\n  lastFormatted: string;",
              "properties": {
                "shortDescription": {
                  "name": "shortDescription",
                  "type": "string",
                  "optional": false
                },
                "mediumDescription": {
                  "name": "mediumDescription",
                  "type": "string",
                  "optional": false
                },
                "longDescription": {
                  "name": "longDescription",
                  "type": "string",
                  "optional": false
                },
                "personalityProfile": {
                  "name": "personalityProfile",
                  "type": "string",
                  "optional": false
                },
                "relationshipSummary": {
                  "name": "relationshipSummary",
                  "type": "string",
                  "optional": false
                },
                "backgroundSummary": {
                  "name": "backgroundSummary",
                  "type": "string",
                  "optional": false
                },
                "currentStatusSummary": {
                  "name": "currentStatusSummary",
                  "type": "string",
                  "optional": false
                },
                "developmentArc": {
                  "name": "developmentArc",
                  "type": "string",
                  "optional": false
                },
                "keyQuotes": {
                  "name": "keyQuotes",
                  "type": "string[]",
                  "optional": false
                },
                "characterTags": {
                  "name": "characterTags",
                  "type": "string[]",
                  "optional": false
                },
                "lastFormatted": {
                  "name": "lastFormatted",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 499
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "CharacterMetadata": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "CharacterMetadata",
              "body": "createdAt: string;\r\n  createdBy: string;\r\n  lastUpdated: string;\r\n  updatedBy: string;\r\n  version: string;\r\n  locked: boolean;\r\n  archivalStatus: 'active' | 'archived' | 'deprecated';\r\n  importanceScore: number; // 0-10\r\n  narrativeRole: string;\r\n  tags: string[];\r\n  notes: string[];",
              "properties": {
                "createdAt": {
                  "name": "createdAt",
                  "type": "string",
                  "optional": false
                },
                "createdBy": {
                  "name": "createdBy",
                  "type": "string",
                  "optional": false
                },
                "lastUpdated": {
                  "name": "lastUpdated",
                  "type": "string",
                  "optional": false
                },
                "updatedBy": {
                  "name": "updatedBy",
                  "type": "string",
                  "optional": false
                },
                "version": {
                  "name": "version",
                  "type": "string",
                  "optional": false
                },
                "locked": {
                  "name": "locked",
                  "type": "boolean",
                  "optional": false
                },
                "archivalStatus": {
                  "name": "archivalStatus",
                  "type": "'active' | 'archived' | 'deprecated'",
                  "optional": false
                },
                "importanceScore": {
                  "name": "importanceScore",
                  "type": "number",
                  "optional": false
                },
                "narrativeRole": {
                  "name": "narrativeRole",
                  "type": "string",
                  "optional": false
                },
                "tags": {
                  "name": "tags",
                  "type": "string[]",
                  "optional": false
                },
                "notes": {
                  "name": "notes",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 516
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "InjuryRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "InjuryRecord",
              "body": "injuryId: string;\r\n  type: string;\r\n  severity: number; // 0-10\r\n  healingRate: number; // 0-10\r\n  description: string;\r\n  acquiredDate: string;\r\n  expectedHealing?: string;",
              "properties": {
                "injuryId": {
                  "name": "injuryId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "severity": {
                  "name": "severity",
                  "type": "number",
                  "optional": false
                },
                "healingRate": {
                  "name": "healingRate",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "acquiredDate": {
                  "name": "acquiredDate",
                  "type": "string",
                  "optional": false
                },
                "expectedHealing": {
                  "name": "expectedHealing",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 531
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "DisabilityRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "DisabilityRecord",
              "body": "disabilityId: string;\r\n  type: string;\r\n  severity: number; // 0-10\r\n  description: string;\r\n  adaptations: string[];\r\n  impact: string[];",
              "properties": {
                "disabilityId": {
                  "name": "disabilityId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "severity": {
                  "name": "severity",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "adaptations": {
                  "name": "adaptations",
                  "type": "string[]",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 541
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "AppearanceRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "AppearanceRecord",
              "body": "height: string;\r\n  build: string;\r\n  hairColor: string;\r\n  eyeColor: string;\r\n  distinctiveFeatures: string[];\r\n  style: string;\r\n  mannerisms: string[];",
              "properties": {
                "height": {
                  "name": "height",
                  "type": "string",
                  "optional": false
                },
                "build": {
                  "name": "build",
                  "type": "string",
                  "optional": false
                },
                "hairColor": {
                  "name": "hairColor",
                  "type": "string",
                  "optional": false
                },
                "eyeColor": {
                  "name": "eyeColor",
                  "type": "string",
                  "optional": false
                },
                "distinctiveFeatures": {
                  "name": "distinctiveFeatures",
                  "type": "string[]",
                  "optional": false
                },
                "style": {
                  "name": "style",
                  "type": "string",
                  "optional": false
                },
                "mannerisms": {
                  "name": "mannerisms",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 550
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "MentalIssueRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "MentalIssueRecord",
              "body": "issueId: string;\r\n  type: string;\r\n  severity: number; // 0-10\r\n  description: string;\r\n  triggers: string[];\r\n  coping: string[];\r\n  professional: string[];",
              "properties": {
                "issueId": {
                  "name": "issueId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "severity": {
                  "name": "severity",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "triggers": {
                  "name": "triggers",
                  "type": "string[]",
                  "optional": false
                },
                "coping": {
                  "name": "coping",
                  "type": "string[]",
                  "optional": false
                },
                "professional": {
                  "name": "professional",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 560
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "SocialRole": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "SocialRole",
              "body": "roleId: string;\r\n  title: string;\r\n  organization: string;\r\n  responsibilities: string[];\r\n  authority: number; // 0-10\r\n  visibility: number; // 0-10",
              "properties": {
                "roleId": {
                  "name": "roleId",
                  "type": "string",
                  "optional": false
                },
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "organization": {
                  "name": "organization",
                  "type": "string",
                  "optional": false
                },
                "responsibilities": {
                  "name": "responsibilities",
                  "type": "string[]",
                  "optional": false
                },
                "authority": {
                  "name": "authority",
                  "type": "number",
                  "optional": false
                },
                "visibility": {
                  "name": "visibility",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 570
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "PromptVariable": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "PromptVariable",
              "body": "variableId: string;\r\n    name: string;\r\n    type: 'string' | 'number' | 'boolean' | 'array' | 'object';\r\n    description: string;\r\n    defaultValue?: any;\r\n    constraints?: VariableConstraint[];\r\n    examples: any[];",
              "properties": {
                "variableId": {
                  "name": "variableId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'string' | 'number' | 'boolean' | 'array' | 'object'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "defaultValue": {
                  "name": "defaultValue",
                  "type": "any",
                  "optional": true
                },
                "constraints": {
                  "name": "constraints",
                  "type": "VariableConstraint[]",
                  "optional": true
                },
                "examples": {
                  "name": "examples",
                  "type": "any[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 45
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "PromptCondition": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "PromptCondition",
              "body": "conditionId: string;\r\n    type: 'genre' | 'chapter' | 'character' | 'context' | 'state';\r\n    condition: string;\r\n    weight: number;\r\n    required: boolean;",
              "properties": {
                "conditionId": {
                  "name": "conditionId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'genre' | 'chapter' | 'character' | 'context' | 'state'",
                  "optional": false
                },
                "condition": {
                  "name": "condition",
                  "type": "string",
                  "optional": false
                },
                "weight": {
                  "name": "weight",
                  "type": "number",
                  "optional": false
                },
                "required": {
                  "name": "required",
                  "type": "boolean",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 58
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "VariableConstraint": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "VariableConstraint",
              "body": "type: 'range' | 'enum' | 'pattern' | 'length';\r\n    value: any;\r\n    message: string;",
              "properties": {
                "type": {
                  "name": "type",
                  "type": "'range' | 'enum' | 'pattern' | 'length'",
                  "optional": false
                },
                "value": {
                  "name": "value",
                  "type": "any",
                  "optional": false
                },
                "message": {
                  "name": "message",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 69
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "EffectivenessMetrics": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "EffectivenessMetrics",
              "body": "qualityScore: number; // 0-10\r\n    consistency: number; // 0-10\r\n    creativity: number; // 0-10\r\n    coherence: number; // 0-10\r\n    readerEngagement: number; // 0-10\r\n    processingTime: number; // milliseconds\r\n    errorRate: number; // 0-1\r\n    revisionCount: number;\r\n    lastMeasured: string;",
              "properties": {
                "qualityScore": {
                  "name": "qualityScore",
                  "type": "number",
                  "optional": false
                },
                "consistency": {
                  "name": "consistency",
                  "type": "number",
                  "optional": false
                },
                "creativity": {
                  "name": "creativity",
                  "type": "number",
                  "optional": false
                },
                "coherence": {
                  "name": "coherence",
                  "type": "number",
                  "optional": false
                },
                "readerEngagement": {
                  "name": "readerEngagement",
                  "type": "number",
                  "optional": false
                },
                "processingTime": {
                  "name": "processingTime",
                  "type": "number",
                  "optional": false
                },
                "errorRate": {
                  "name": "errorRate",
                  "type": "number",
                  "optional": false
                },
                "revisionCount": {
                  "name": "revisionCount",
                  "type": "number",
                  "optional": false
                },
                "lastMeasured": {
                  "name": "lastMeasured",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 78
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "UsageStatistics": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "UsageStatistics",
              "body": "totalUsage: number;\r\n    successfulUsage: number;\r\n    failedUsage: number;\r\n    averageQuality: number;\r\n    peakUsagePeriod: string;\r\n    trendingScore: number;\r\n    userSatisfaction: number;\r\n    performanceMetrics: PerformanceMetrics;",
              "properties": {
                "totalUsage": {
                  "name": "totalUsage",
                  "type": "number",
                  "optional": false
                },
                "successfulUsage": {
                  "name": "successfulUsage",
                  "type": "number",
                  "optional": false
                },
                "failedUsage": {
                  "name": "failedUsage",
                  "type": "number",
                  "optional": false
                },
                "averageQuality": {
                  "name": "averageQuality",
                  "type": "number",
                  "optional": false
                },
                "peakUsagePeriod": {
                  "name": "peakUsagePeriod",
                  "type": "string",
                  "optional": false
                },
                "trendingScore": {
                  "name": "trendingScore",
                  "type": "number",
                  "optional": false
                },
                "userSatisfaction": {
                  "name": "userSatisfaction",
                  "type": "number",
                  "optional": false
                },
                "performanceMetrics": {
                  "name": "performanceMetrics",
                  "type": "PerformanceMetrics",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 93
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "SuccessCase": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "SuccessCase",
              "body": "caseId: string;\r\n    scenario: string;\r\n    inputParameters: Record<string, any>;\r\n    outputQuality: number;\r\n    userFeedback: string;\r\n    chapterNumber: number;\r\n    genre: string;\r\n    timestamp: string;\r\n    keyFactors: string[];",
              "properties": {
                "caseId": {
                  "name": "caseId",
                  "type": "string",
                  "optional": false
                },
                "scenario": {
                  "name": "scenario",
                  "type": "string",
                  "optional": false
                },
                "inputParameters": {
                  "name": "inputParameters",
                  "type": "Record<string",
                  "optional": false
                },
                "outputQuality": {
                  "name": "outputQuality",
                  "type": "number",
                  "optional": false
                },
                "userFeedback": {
                  "name": "userFeedback",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "genre": {
                  "name": "genre",
                  "type": "string",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "keyFactors": {
                  "name": "keyFactors",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 119
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "FailureCase": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "FailureCase",
              "body": "caseId: string;\r\n    scenario: string;\r\n    inputParameters: Record<string, any>;\r\n    errorType: string;\r\n    errorMessage: string;\r\n    rootCause: string;\r\n    chapterNumber: number;\r\n    genre: string;\r\n    timestamp: string;\r\n    resolution?: string;",
              "properties": {
                "caseId": {
                  "name": "caseId",
                  "type": "string",
                  "optional": false
                },
                "scenario": {
                  "name": "scenario",
                  "type": "string",
                  "optional": false
                },
                "inputParameters": {
                  "name": "inputParameters",
                  "type": "Record<string",
                  "optional": false
                },
                "errorType": {
                  "name": "errorType",
                  "type": "string",
                  "optional": false
                },
                "errorMessage": {
                  "name": "errorMessage",
                  "type": "string",
                  "optional": false
                },
                "rootCause": {
                  "name": "rootCause",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "genre": {
                  "name": "genre",
                  "type": "string",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "resolution": {
                  "name": "resolution",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 134
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "OptimizationRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "OptimizationRecord",
              "body": "optimizationId: string;\r\n    optimizationType: 'parameter' | 'structure' | 'logic' | 'performance';\r\n    before: any;\r\n    after: any;\r\n    reason: string;\r\n    expectedImprovement: string;\r\n    actualImprovement?: EffectivenessMetrics;\r\n    timestamp: string;\r\n    optimizedBy: string;",
              "properties": {
                "optimizationId": {
                  "name": "optimizationId",
                  "type": "string",
                  "optional": false
                },
                "optimizationType": {
                  "name": "optimizationType",
                  "type": "'parameter' | 'structure' | 'logic' | 'performance'",
                  "optional": false
                },
                "before": {
                  "name": "before",
                  "type": "any",
                  "optional": false
                },
                "after": {
                  "name": "after",
                  "type": "any",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                },
                "expectedImprovement": {
                  "name": "expectedImprovement",
                  "type": "string",
                  "optional": false
                },
                "actualImprovement": {
                  "name": "actualImprovement",
                  "type": "EffectivenessMetrics",
                  "optional": true
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "optimizedBy": {
                  "name": "optimizedBy",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 150
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "TemplateStructure": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "TemplateStructure",
              "body": "format: 'markdown' | 'json' | 'yaml' | 'custom';\r\n    sections: string[];\r\n    requiredFields: string[];\r\n    optionalFields: string[];\r\n    validationRules: ValidationRule[];",
              "properties": {
                "format": {
                  "name": "format",
                  "type": "'markdown' | 'json' | 'yaml' | 'custom'",
                  "optional": false
                },
                "sections": {
                  "name": "sections",
                  "type": "string[]",
                  "optional": false
                },
                "requiredFields": {
                  "name": "requiredFields",
                  "type": "string[]",
                  "optional": false
                },
                "optionalFields": {
                  "name": "optionalFields",
                  "type": "string[]",
                  "optional": false
                },
                "validationRules": {
                  "name": "validationRules",
                  "type": "ValidationRule[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 198
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "TemplateSection": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "TemplateSection",
              "body": "sectionId: string;\r\n    name: string;\r\n    type: 'header' | 'body' | 'footer' | 'variable' | 'conditional';\r\n    content: string;\r\n    required: boolean;\r\n    order: number;\r\n    dependencies: string[];",
              "properties": {
                "sectionId": {
                  "name": "sectionId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'header' | 'body' | 'footer' | 'variable' | 'conditional'",
                  "optional": false
                },
                "content": {
                  "name": "content",
                  "type": "string",
                  "optional": false
                },
                "required": {
                  "name": "required",
                  "type": "boolean",
                  "optional": false
                },
                "order": {
                  "name": "order",
                  "type": "number",
                  "optional": false
                },
                "dependencies": {
                  "name": "dependencies",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 209
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "TemplatePlaceholder": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "TemplatePlaceholder",
              "body": "placeholderId: string;\r\n    name: string;\r\n    type: string;\r\n    description: string;\r\n    defaultValue?: any;\r\n    transformations: PlaceholderTransformation[];",
              "properties": {
                "placeholderId": {
                  "name": "placeholderId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "defaultValue": {
                  "name": "defaultValue",
                  "type": "any",
                  "optional": true
                },
                "transformations": {
                  "name": "transformations",
                  "type": "PlaceholderTransformation[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 222
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "PlaceholderTransformation": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "PlaceholderTransformation",
              "body": "transformationId: string;\r\n    type: 'format' | 'filter' | 'validate' | 'enrich';\r\n    function: string;\r\n    parameters: Record<string, any>;",
              "properties": {
                "transformationId": {
                  "name": "transformationId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'format' | 'filter' | 'validate' | 'enrich'",
                  "optional": false
                },
                "function": {
                  "name": "function",
                  "type": "string",
                  "optional": false
                },
                "parameters": {
                  "name": "parameters",
                  "type": "Record<string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 234
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "BestPractice": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "BestPractice",
              "body": "practiceId: string;\r\n    title: string;\r\n    description: string;\r\n    category: string;\r\n    impact: number; // 0-10\r\n    evidence: Evidence[];\r\n    applicableScenarios: string[];\r\n    implementation: string;",
              "properties": {
                "practiceId": {
                  "name": "practiceId",
                  "type": "string",
                  "optional": false
                },
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "category": {
                  "name": "category",
                  "type": "string",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "number",
                  "optional": false
                },
                "evidence": {
                  "name": "evidence",
                  "type": "Evidence[]",
                  "optional": false
                },
                "applicableScenarios": {
                  "name": "applicableScenarios",
                  "type": "string[]",
                  "optional": false
                },
                "implementation": {
                  "name": "implementation",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 244
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "CommonMistake": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "CommonMistake",
              "body": "mistakeId: string;\r\n    title: string;\r\n    description: string;\r\n    category: string;\r\n    frequency: number;\r\n    impact: number; // 0-10\r\n    prevention: string;\r\n    correction: string;\r\n    examples: MistakeExample[];",
              "properties": {
                "mistakeId": {
                  "name": "mistakeId",
                  "type": "string",
                  "optional": false
                },
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "category": {
                  "name": "category",
                  "type": "string",
                  "optional": false
                },
                "frequency": {
                  "name": "frequency",
                  "type": "number",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "number",
                  "optional": false
                },
                "prevention": {
                  "name": "prevention",
                  "type": "string",
                  "optional": false
                },
                "correction": {
                  "name": "correction",
                  "type": "string",
                  "optional": false
                },
                "examples": {
                  "name": "examples",
                  "type": "MistakeExample[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 258
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "MistakeExample": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "MistakeExample",
              "body": "exampleId: string;\r\n    scenario: string;\r\n    incorrectApproach: string;\r\n    correctApproach: string;\r\n    explanation: string;",
              "properties": {
                "exampleId": {
                  "name": "exampleId",
                  "type": "string",
                  "optional": false
                },
                "scenario": {
                  "name": "scenario",
                  "type": "string",
                  "optional": false
                },
                "incorrectApproach": {
                  "name": "incorrectApproach",
                  "type": "string",
                  "optional": false
                },
                "correctApproach": {
                  "name": "correctApproach",
                  "type": "string",
                  "optional": false
                },
                "explanation": {
                  "name": "explanation",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 273
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ApplicableContext": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "ApplicableContext",
              "body": "contextId: string;\r\n    name: string;\r\n    description: string;\r\n    conditions: Record<string, any>;\r\n    priority: number;\r\n    effectiveness: number;",
              "properties": {
                "contextId": {
                  "name": "contextId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "conditions": {
                  "name": "conditions",
                  "type": "Record<string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 284
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "TemplateVariation": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "TemplateVariation",
              "body": "variationId: string;\r\n    name: string;\r\n    baseTemplateId: string;\r\n    differences: TemplateDifference[];\r\n    useCase: string;\r\n    effectiveness: EffectivenessMetrics;",
              "properties": {
                "variationId": {
                  "name": "variationId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "baseTemplateId": {
                  "name": "baseTemplateId",
                  "type": "string",
                  "optional": false
                },
                "differences": {
                  "name": "differences",
                  "type": "TemplateDifference[]",
                  "optional": false
                },
                "useCase": {
                  "name": "useCase",
                  "type": "string",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "EffectivenessMetrics",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 296
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "TemplateDifference": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "TemplateDifference",
              "body": "differenceId: string;\r\n    type: 'addition' | 'removal' | 'modification';\r\n    field: string;\r\n    oldValue?: any;\r\n    newValue?: any;\r\n    reason: string;",
              "properties": {
                "differenceId": {
                  "name": "differenceId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'addition' | 'removal' | 'modification'",
                  "optional": false
                },
                "field": {
                  "name": "field",
                  "type": "string",
                  "optional": false
                },
                "oldValue": {
                  "name": "oldValue",
                  "type": "any",
                  "optional": true
                },
                "newValue": {
                  "name": "newValue",
                  "type": "any",
                  "optional": true
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 308
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "TemplateEvolution": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "TemplateEvolution",
              "body": "evolutionId: string;\r\n    version: string;\r\n    changes: TemplateChange[];\r\n    reason: string;\r\n    impact: EffectivenessMetrics;\r\n    timestamp: string;",
              "properties": {
                "evolutionId": {
                  "name": "evolutionId",
                  "type": "string",
                  "optional": false
                },
                "version": {
                  "name": "version",
                  "type": "string",
                  "optional": false
                },
                "changes": {
                  "name": "changes",
                  "type": "TemplateChange[]",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "EffectivenessMetrics",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 320
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "TemplateChange": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "TemplateChange",
              "body": "changeId: string;\r\n    type: 'structure' | 'content' | 'validation' | 'optimization';\r\n    description: string;\r\n    before: any;\r\n    after: any;\r\n    justification: string;",
              "properties": {
                "changeId": {
                  "name": "changeId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'structure' | 'content' | 'validation' | 'optimization'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "before": {
                  "name": "before",
                  "type": "any",
                  "optional": false
                },
                "after": {
                  "name": "after",
                  "type": "any",
                  "optional": false
                },
                "justification": {
                  "name": "justification",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 332
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "FeedbackData": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "FeedbackData",
              "body": "feedbackId: string;\r\n    source: 'user' | 'system' | 'ai' | 'automated';\r\n    type: 'quality' | 'usability' | 'performance' | 'bug' | 'suggestion';\r\n    rating: number; // 0-10\r\n    comment: string;\r\n    context: Record<string, any>;\r\n    timestamp: string;\r\n    actionTaken?: string;",
              "properties": {
                "feedbackId": {
                  "name": "feedbackId",
                  "type": "string",
                  "optional": false
                },
                "source": {
                  "name": "source",
                  "type": "'user' | 'system' | 'ai' | 'automated'",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'quality' | 'usability' | 'performance' | 'bug' | 'suggestion'",
                  "optional": false
                },
                "rating": {
                  "name": "rating",
                  "type": "number",
                  "optional": false
                },
                "comment": {
                  "name": "comment",
                  "type": "string",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "Record<string",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "actionTaken": {
                  "name": "actionTaken",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 344
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ValidationRule": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "ValidationRule",
              "body": "ruleId: string;\r\n    name: string;\r\n    type: 'required' | 'format' | 'range' | 'custom';\r\n    condition: string;\r\n    errorMessage: string;\r\n    severity: 'error' | 'warning' | 'info';",
              "properties": {
                "ruleId": {
                  "name": "ruleId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'required' | 'format' | 'range' | 'custom'",
                  "optional": false
                },
                "condition": {
                  "name": "condition",
                  "type": "string",
                  "optional": false
                },
                "errorMessage": {
                  "name": "errorMessage",
                  "type": "string",
                  "optional": false
                },
                "severity": {
                  "name": "severity",
                  "type": "'error' | 'warning' | 'info'",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 358
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "Evidence": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "Evidence",
              "body": "evidenceId: string;\r\n    type: 'metric' | 'case_study' | 'user_feedback' | 'benchmark';\r\n    description: string;\r\n    data: any;\r\n    source: string;\r\n    reliability: number; // 0-10\r\n    timestamp: string;",
              "properties": {
                "evidenceId": {
                  "name": "evidenceId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'metric' | 'case_study' | 'user_feedback' | 'benchmark'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "data": {
                  "name": "data",
                  "type": "any",
                  "optional": false
                },
                "source": {
                  "name": "source",
                  "type": "string",
                  "optional": false
                },
                "reliability": {
                  "name": "reliability",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 370
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "AnalysisMethodology": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "AnalysisMethodology",
              "body": "approach: 'rule_based' | 'ml_based' | 'hybrid' | 'ai_assisted';\r\n    algorithm: string;\r\n    steps: AnalysisStep[];\r\n    dependencies: string[];\r\n    limitations: string[];",
              "properties": {
                "approach": {
                  "name": "approach",
                  "type": "'rule_based' | 'ml_based' | 'hybrid' | 'ai_assisted'",
                  "optional": false
                },
                "algorithm": {
                  "name": "algorithm",
                  "type": "string",
                  "optional": false
                },
                "steps": {
                  "name": "steps",
                  "type": "AnalysisStep[]",
                  "optional": false
                },
                "dependencies": {
                  "name": "dependencies",
                  "type": "string[]",
                  "optional": false
                },
                "limitations": {
                  "name": "limitations",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 419
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "AnalysisStep": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "AnalysisStep",
              "body": "stepId: string;\r\n    name: string;\r\n    description: string;\r\n    order: number;\r\n    inputType: string;\r\n    outputType: string;\r\n    processing: ProcessingInstruction[];",
              "properties": {
                "stepId": {
                  "name": "stepId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "order": {
                  "name": "order",
                  "type": "number",
                  "optional": false
                },
                "inputType": {
                  "name": "inputType",
                  "type": "string",
                  "optional": false
                },
                "outputType": {
                  "name": "outputType",
                  "type": "string",
                  "optional": false
                },
                "processing": {
                  "name": "processing",
                  "type": "ProcessingInstruction[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 430
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ProcessingInstruction": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "ProcessingInstruction",
              "body": "instructionId: string;\r\n    type: 'extract' | 'transform' | 'validate' | 'analyze' | 'score';\r\n    operation: string;\r\n    parameters: Record<string, any>;",
              "properties": {
                "instructionId": {
                  "name": "instructionId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'extract' | 'transform' | 'validate' | 'analyze' | 'score'",
                  "optional": false
                },
                "operation": {
                  "name": "operation",
                  "type": "string",
                  "optional": false
                },
                "parameters": {
                  "name": "parameters",
                  "type": "Record<string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 443
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "AnalysisParameter": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "AnalysisParameter",
              "body": "parameterId: string;\r\n    name: string;\r\n    type: string;\r\n    description: string;\r\n    defaultValue: any;\r\n    range?: any;\r\n    impact: number; // 0-10",
              "properties": {
                "parameterId": {
                  "name": "parameterId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "defaultValue": {
                  "name": "defaultValue",
                  "type": "any",
                  "optional": false
                },
                "range": {
                  "name": "range",
                  "type": "any",
                  "optional": true
                },
                "impact": {
                  "name": "impact",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 453
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "AccuracyMetrics": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "AccuracyMetrics",
              "body": "precision: number; // 0-1\r\n    recall: number; // 0-1\r\n    f1Score: number; // 0-1\r\n    accuracy: number; // 0-1\r\n    falsePositiveRate: number; // 0-1\r\n    falseNegativeRate: number; // 0-1\r\n    lastEvaluated: string;",
              "properties": {
                "precision": {
                  "name": "precision",
                  "type": "number",
                  "optional": false
                },
                "recall": {
                  "name": "recall",
                  "type": "number",
                  "optional": false
                },
                "f1Score": {
                  "name": "f1Score",
                  "type": "number",
                  "optional": false
                },
                "accuracy": {
                  "name": "accuracy",
                  "type": "number",
                  "optional": false
                },
                "falsePositiveRate": {
                  "name": "falsePositiveRate",
                  "type": "number",
                  "optional": false
                },
                "falseNegativeRate": {
                  "name": "falseNegativeRate",
                  "type": "number",
                  "optional": false
                },
                "lastEvaluated": {
                  "name": "lastEvaluated",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 466
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ReliabilityMetrics": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "ReliabilityMetrics",
              "body": "consistency: number; // 0-1\r\n    stability: number; // 0-1\r\n    robustness: number; // 0-1\r\n    reproducibility: number; // 0-1\r\n    confidence: number; // 0-1\r\n    variance: number;\r\n    lastEvaluated: string;",
              "properties": {
                "consistency": {
                  "name": "consistency",
                  "type": "number",
                  "optional": false
                },
                "stability": {
                  "name": "stability",
                  "type": "number",
                  "optional": false
                },
                "robustness": {
                  "name": "robustness",
                  "type": "number",
                  "optional": false
                },
                "reproducibility": {
                  "name": "reproducibility",
                  "type": "number",
                  "optional": false
                },
                "confidence": {
                  "name": "confidence",
                  "type": "number",
                  "optional": false
                },
                "variance": {
                  "name": "variance",
                  "type": "number",
                  "optional": false
                },
                "lastEvaluated": {
                  "name": "lastEvaluated",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 479
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "InputRequirement": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "InputRequirement",
              "body": "requirementId: string;\r\n    name: string;\r\n    type: string;\r\n    required: boolean;\r\n    format: string;\r\n    validation: ValidationRule[];\r\n    examples: any[];",
              "properties": {
                "requirementId": {
                  "name": "requirementId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "required": {
                  "name": "required",
                  "type": "boolean",
                  "optional": false
                },
                "format": {
                  "name": "format",
                  "type": "string",
                  "optional": false
                },
                "validation": {
                  "name": "validation",
                  "type": "ValidationRule[]",
                  "optional": false
                },
                "examples": {
                  "name": "examples",
                  "type": "any[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 492
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "OutputFormat": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "OutputFormat",
              "body": "formatId: string;\r\n    type: string;\r\n    structure: any;\r\n    validation: ValidationRule[];\r\n    postProcessing: PostProcessingStep[];",
              "properties": {
                "formatId": {
                  "name": "formatId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "structure": {
                  "name": "structure",
                  "type": "any",
                  "optional": false
                },
                "validation": {
                  "name": "validation",
                  "type": "ValidationRule[]",
                  "optional": false
                },
                "postProcessing": {
                  "name": "postProcessing",
                  "type": "PostProcessingStep[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 505
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "PostProcessingStep": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "PostProcessingStep",
              "body": "stepId: string;\r\n    name: string;\r\n    operation: string;\r\n    parameters: Record<string, any>;\r\n    order: number;",
              "properties": {
                "stepId": {
                  "name": "stepId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "operation": {
                  "name": "operation",
                  "type": "string",
                  "optional": false
                },
                "parameters": {
                  "name": "parameters",
                  "type": "Record<string",
                  "optional": false
                },
                "order": {
                  "name": "order",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 516
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "TrainingData": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "TrainingData",
              "body": "dataId: string;\r\n    input: any;\r\n    expectedOutput: any;\r\n    actualOutput?: any;\r\n    quality: number; // 0-10\r\n    source: string;\r\n    timestamp: string;\r\n    tags: string[];",
              "properties": {
                "dataId": {
                  "name": "dataId",
                  "type": "string",
                  "optional": false
                },
                "input": {
                  "name": "input",
                  "type": "any",
                  "optional": false
                },
                "expectedOutput": {
                  "name": "expectedOutput",
                  "type": "any",
                  "optional": false
                },
                "actualOutput": {
                  "name": "actualOutput",
                  "type": "any",
                  "optional": true
                },
                "quality": {
                  "name": "quality",
                  "type": "number",
                  "optional": false
                },
                "source": {
                  "name": "source",
                  "type": "string",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "tags": {
                  "name": "tags",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 527
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ValidationResult": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "ValidationResult",
              "body": "validationId: string;\r\n    testCase: string;\r\n    input: any;\r\n    expectedOutput: any;\r\n    actualOutput: any;\r\n    passed: boolean;\r\n    score: number; // 0-10\r\n    errors: string[];\r\n    timestamp: string;",
              "properties": {
                "validationId": {
                  "name": "validationId",
                  "type": "string",
                  "optional": false
                },
                "testCase": {
                  "name": "testCase",
                  "type": "string",
                  "optional": false
                },
                "input": {
                  "name": "input",
                  "type": "any",
                  "optional": false
                },
                "expectedOutput": {
                  "name": "expectedOutput",
                  "type": "any",
                  "optional": false
                },
                "actualOutput": {
                  "name": "actualOutput",
                  "type": "any",
                  "optional": false
                },
                "passed": {
                  "name": "passed",
                  "type": "boolean",
                  "optional": false
                },
                "score": {
                  "name": "score",
                  "type": "number",
                  "optional": false
                },
                "errors": {
                  "name": "errors",
                  "type": "string[]",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 541
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ImprovementRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "ImprovementRecord",
              "body": "improvementId: string;\r\n    type: 'algorithm' | 'parameter' | 'data' | 'validation';\r\n    description: string;\r\n    before: any;\r\n    after: any;\r\n    improvement: number; // percentage\r\n    impact: AccuracyMetrics;\r\n    timestamp: string;\r\n    implementedBy: string;",
              "properties": {
                "improvementId": {
                  "name": "improvementId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'algorithm' | 'parameter' | 'data' | 'validation'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "before": {
                  "name": "before",
                  "type": "any",
                  "optional": false
                },
                "after": {
                  "name": "after",
                  "type": "any",
                  "optional": false
                },
                "improvement": {
                  "name": "improvement",
                  "type": "number",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "AccuracyMetrics",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "implementedBy": {
                  "name": "implementedBy",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 556
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "OptimizationApproach": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "OptimizationApproach",
              "body": "type: 'incremental' | 'revolutionary' | 'hybrid';\r\n    methodology: string;\r\n    phases: OptimizationPhase[];\r\n    riskLevel: 'low' | 'medium' | 'high';\r\n    timeframe: string;",
              "properties": {
                "type": {
                  "name": "type",
                  "type": "'incremental' | 'revolutionary' | 'hybrid'",
                  "optional": false
                },
                "methodology": {
                  "name": "methodology",
                  "type": "string",
                  "optional": false
                },
                "phases": {
                  "name": "phases",
                  "type": "OptimizationPhase[]",
                  "optional": false
                },
                "riskLevel": {
                  "name": "riskLevel",
                  "type": "'low' | 'medium' | 'high'",
                  "optional": false
                },
                "timeframe": {
                  "name": "timeframe",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 608
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "OptimizationPhase": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "OptimizationPhase",
              "body": "phaseId: string;\r\n    name: string;\r\n    description: string;\r\n    order: number;\r\n    duration: string;\r\n    deliverables: string[];\r\n    successCriteria: string[];",
              "properties": {
                "phaseId": {
                  "name": "phaseId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "order": {
                  "name": "order",
                  "type": "number",
                  "optional": false
                },
                "duration": {
                  "name": "duration",
                  "type": "string",
                  "optional": false
                },
                "deliverables": {
                  "name": "deliverables",
                  "type": "string[]",
                  "optional": false
                },
                "successCriteria": {
                  "name": "successCriteria",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 619
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "OptimizationTechnique": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "OptimizationTechnique",
              "body": "techniqueId: string;\r\n    name: string;\r\n    description: string;\r\n    type: string;\r\n    difficulty: number; // 0-10\r\n    effectiveness: number; // 0-10\r\n    resources: ResourceRequirement[];\r\n    steps: TechniqueStep[];",
              "properties": {
                "techniqueId": {
                  "name": "techniqueId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "difficulty": {
                  "name": "difficulty",
                  "type": "number",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "number",
                  "optional": false
                },
                "resources": {
                  "name": "resources",
                  "type": "ResourceRequirement[]",
                  "optional": false
                },
                "steps": {
                  "name": "steps",
                  "type": "TechniqueStep[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 632
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "TechniqueStep": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "TechniqueStep",
              "body": "stepId: string;\r\n    name: string;\r\n    description: string;\r\n    order: number;\r\n    duration: string;\r\n    resources: string[];\r\n    outputs: string[];",
              "properties": {
                "stepId": {
                  "name": "stepId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "order": {
                  "name": "order",
                  "type": "number",
                  "optional": false
                },
                "duration": {
                  "name": "duration",
                  "type": "string",
                  "optional": false
                },
                "resources": {
                  "name": "resources",
                  "type": "string[]",
                  "optional": false
                },
                "outputs": {
                  "name": "outputs",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 646
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ResourceRequirement": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "ResourceRequirement",
              "body": "resourceId: string;\r\n    type: 'time' | 'memory' | 'cpu' | 'storage' | 'bandwidth' | 'human';\r\n    amount: number;\r\n    unit: string;\r\n    critical: boolean;",
              "properties": {
                "resourceId": {
                  "name": "resourceId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'time' | 'memory' | 'cpu' | 'storage' | 'bandwidth' | 'human'",
                  "optional": false
                },
                "amount": {
                  "name": "amount",
                  "type": "number",
                  "optional": false
                },
                "unit": {
                  "name": "unit",
                  "type": "string",
                  "optional": false
                },
                "critical": {
                  "name": "critical",
                  "type": "boolean",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 659
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "Benefit": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "Benefit",
              "body": "benefitId: string;\r\n    type: 'performance' | 'quality' | 'cost' | 'user_satisfaction' | 'maintainability';\r\n    description: string;\r\n    quantification: string;\r\n    timeframe: string;\r\n    confidence: number; // 0-10",
              "properties": {
                "benefitId": {
                  "name": "benefitId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'performance' | 'quality' | 'cost' | 'user_satisfaction' | 'maintainability'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "quantification": {
                  "name": "quantification",
                  "type": "string",
                  "optional": false
                },
                "timeframe": {
                  "name": "timeframe",
                  "type": "string",
                  "optional": false
                },
                "confidence": {
                  "name": "confidence",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 670
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ImpactMeasurement": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "ImpactMeasurement",
              "body": "measurementId: string;\r\n    metric: string;\r\n    baseline: number;\r\n    target: number;\r\n    actual: number;\r\n    improvement: number; // percentage\r\n    timestamp: string;\r\n    measurementMethod: string;",
              "properties": {
                "measurementId": {
                  "name": "measurementId",
                  "type": "string",
                  "optional": false
                },
                "metric": {
                  "name": "metric",
                  "type": "string",
                  "optional": false
                },
                "baseline": {
                  "name": "baseline",
                  "type": "number",
                  "optional": false
                },
                "target": {
                  "name": "target",
                  "type": "number",
                  "optional": false
                },
                "actual": {
                  "name": "actual",
                  "type": "number",
                  "optional": false
                },
                "improvement": {
                  "name": "improvement",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "measurementMethod": {
                  "name": "measurementMethod",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 682
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "OptimizationScenario": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "OptimizationScenario",
              "body": "scenarioId: string;\r\n    name: string;\r\n    description: string;\r\n    conditions: Record<string, any>;\r\n    priority: number; // 0-10\r\n    complexity: number; // 0-10",
              "properties": {
                "scenarioId": {
                  "name": "scenarioId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "conditions": {
                  "name": "conditions",
                  "type": "Record<string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                },
                "complexity": {
                  "name": "complexity",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 696
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "Prerequisite": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "Prerequisite",
              "body": "prerequisiteId: string;\r\n    description: string;\r\n    type: 'technical' | 'resource' | 'organizational' | 'time';\r\n    critical: boolean;\r\n    validationMethod: string;",
              "properties": {
                "prerequisiteId": {
                  "name": "prerequisiteId",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'technical' | 'resource' | 'organizational' | 'time'",
                  "optional": false
                },
                "critical": {
                  "name": "critical",
                  "type": "boolean",
                  "optional": false
                },
                "validationMethod": {
                  "name": "validationMethod",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 708
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "OptimizationConstraint": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "OptimizationConstraint",
              "body": "constraintId: string;\r\n    type: 'resource' | 'time' | 'quality' | 'compatibility' | 'regulatory';\r\n    description: string;\r\n    value: any;\r\n    flexibility: number; // 0-10",
              "properties": {
                "constraintId": {
                  "name": "constraintId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'resource' | 'time' | 'quality' | 'compatibility' | 'regulatory'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "value": {
                  "name": "value",
                  "type": "any",
                  "optional": false
                },
                "flexibility": {
                  "name": "flexibility",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 719
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ImplementationGuide": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "ImplementationGuide",
              "body": "guideId: string;\r\n    overview: string;\r\n    detailedSteps: ImplementationStep[];\r\n    checkpoints: Checkpoint[];\r\n    troubleshooting: TroubleshootingGuide[];",
              "properties": {
                "guideId": {
                  "name": "guideId",
                  "type": "string",
                  "optional": false
                },
                "overview": {
                  "name": "overview",
                  "type": "string",
                  "optional": false
                },
                "detailedSteps": {
                  "name": "detailedSteps",
                  "type": "ImplementationStep[]",
                  "optional": false
                },
                "checkpoints": {
                  "name": "checkpoints",
                  "type": "Checkpoint[]",
                  "optional": false
                },
                "troubleshooting": {
                  "name": "troubleshooting",
                  "type": "TroubleshootingGuide[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 730
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ImplementationStep": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "ImplementationStep",
              "body": "stepId: string;\r\n    name: string;\r\n    description: string;\r\n    order: number;\r\n    duration: string;\r\n    dependencies: string[];\r\n    deliverables: string[];\r\n    validationCriteria: string[];",
              "properties": {
                "stepId": {
                  "name": "stepId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "order": {
                  "name": "order",
                  "type": "number",
                  "optional": false
                },
                "duration": {
                  "name": "duration",
                  "type": "string",
                  "optional": false
                },
                "dependencies": {
                  "name": "dependencies",
                  "type": "string[]",
                  "optional": false
                },
                "deliverables": {
                  "name": "deliverables",
                  "type": "string[]",
                  "optional": false
                },
                "validationCriteria": {
                  "name": "validationCriteria",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 741
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "Checkpoint": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "Checkpoint",
              "body": "checkpointId: string;\r\n    name: string;\r\n    description: string;\r\n    order: number;\r\n    criteria: string[];\r\n    actions: CheckpointAction[];",
              "properties": {
                "checkpointId": {
                  "name": "checkpointId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "order": {
                  "name": "order",
                  "type": "number",
                  "optional": false
                },
                "criteria": {
                  "name": "criteria",
                  "type": "string[]",
                  "optional": false
                },
                "actions": {
                  "name": "actions",
                  "type": "CheckpointAction[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 755
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "CheckpointAction": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "CheckpointAction",
              "body": "actionId: string;\r\n    condition: string;\r\n    action: string;\r\n    severity: 'info' | 'warning' | 'error' | 'critical';",
              "properties": {
                "actionId": {
                  "name": "actionId",
                  "type": "string",
                  "optional": false
                },
                "condition": {
                  "name": "condition",
                  "type": "string",
                  "optional": false
                },
                "action": {
                  "name": "action",
                  "type": "string",
                  "optional": false
                },
                "severity": {
                  "name": "severity",
                  "type": "'info' | 'warning' | 'error' | 'critical'",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 767
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "TroubleshootingGuide": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "TroubleshootingGuide",
              "body": "guideId: string;\r\n    problem: string;\r\n    symptoms: string[];\r\n    diagnosis: DiagnosisStep[];\r\n    solutions: Solution[];",
              "properties": {
                "guideId": {
                  "name": "guideId",
                  "type": "string",
                  "optional": false
                },
                "problem": {
                  "name": "problem",
                  "type": "string",
                  "optional": false
                },
                "symptoms": {
                  "name": "symptoms",
                  "type": "string[]",
                  "optional": false
                },
                "diagnosis": {
                  "name": "diagnosis",
                  "type": "DiagnosisStep[]",
                  "optional": false
                },
                "solutions": {
                  "name": "solutions",
                  "type": "Solution[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 777
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "DiagnosisStep": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "DiagnosisStep",
              "body": "stepId: string;\r\n    description: string;\r\n    method: string;\r\n    expectedResult: string;\r\n    order: number;",
              "properties": {
                "stepId": {
                  "name": "stepId",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "method": {
                  "name": "method",
                  "type": "string",
                  "optional": false
                },
                "expectedResult": {
                  "name": "expectedResult",
                  "type": "string",
                  "optional": false
                },
                "order": {
                  "name": "order",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 788
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "Solution": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "Solution",
              "body": "solutionId: string;\r\n    description: string;\r\n    steps: string[];\r\n    difficulty: number; // 0-10\r\n    timeRequired: string;\r\n    successRate: number; // 0-1",
              "properties": {
                "solutionId": {
                  "name": "solutionId",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "steps": {
                  "name": "steps",
                  "type": "string[]",
                  "optional": false
                },
                "difficulty": {
                  "name": "difficulty",
                  "type": "number",
                  "optional": false
                },
                "timeRequired": {
                  "name": "timeRequired",
                  "type": "string",
                  "optional": false
                },
                "successRate": {
                  "name": "successRate",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 799
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "RollbackPlan": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "RollbackPlan",
              "body": "planId: string;\r\n    description: string;\r\n    triggers: RollbackTrigger[];\r\n    steps: RollbackStep[];\r\n    timeRequired: string;\r\n    dataRecovery: DataRecoveryPlan;",
              "properties": {
                "planId": {
                  "name": "planId",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "triggers": {
                  "name": "triggers",
                  "type": "RollbackTrigger[]",
                  "optional": false
                },
                "steps": {
                  "name": "steps",
                  "type": "RollbackStep[]",
                  "optional": false
                },
                "timeRequired": {
                  "name": "timeRequired",
                  "type": "string",
                  "optional": false
                },
                "dataRecovery": {
                  "name": "dataRecovery",
                  "type": "DataRecoveryPlan",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 811
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "RollbackTrigger": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "RollbackTrigger",
              "body": "triggerId: string;\r\n    condition: string;\r\n    threshold: any;\r\n    severity: 'low' | 'medium' | 'high' | 'critical';\r\n    autoTrigger: boolean;",
              "properties": {
                "triggerId": {
                  "name": "triggerId",
                  "type": "string",
                  "optional": false
                },
                "condition": {
                  "name": "condition",
                  "type": "string",
                  "optional": false
                },
                "threshold": {
                  "name": "threshold",
                  "type": "any",
                  "optional": false
                },
                "severity": {
                  "name": "severity",
                  "type": "'low' | 'medium' | 'high' | 'critical'",
                  "optional": false
                },
                "autoTrigger": {
                  "name": "autoTrigger",
                  "type": "boolean",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 823
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "RollbackStep": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "RollbackStep",
              "body": "stepId: string;\r\n    description: string;\r\n    order: number;\r\n    duration: string;\r\n    validation: string[];",
              "properties": {
                "stepId": {
                  "name": "stepId",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "order": {
                  "name": "order",
                  "type": "number",
                  "optional": false
                },
                "duration": {
                  "name": "duration",
                  "type": "string",
                  "optional": false
                },
                "validation": {
                  "name": "validation",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 834
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "DataRecoveryPlan": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "DataRecoveryPlan",
              "body": "planId: string;\r\n    description: string;\r\n    backupStrategy: string;\r\n    recoverySteps: string[];\r\n    timeRequired: string;\r\n    dataIntegrityChecks: string[];",
              "properties": {
                "planId": {
                  "name": "planId",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "backupStrategy": {
                  "name": "backupStrategy",
                  "type": "string",
                  "optional": false
                },
                "recoverySteps": {
                  "name": "recoverySteps",
                  "type": "string[]",
                  "optional": false
                },
                "timeRequired": {
                  "name": "timeRequired",
                  "type": "string",
                  "optional": false
                },
                "dataIntegrityChecks": {
                  "name": "dataIntegrityChecks",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 845
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "MonitoringMetric": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "MonitoringMetric",
              "body": "metricId: string;\r\n    name: string;\r\n    description: string;\r\n    type: 'counter' | 'gauge' | 'histogram' | 'timer';\r\n    unit: string;\r\n    frequency: string;\r\n    threshold: MetricThreshold;",
              "properties": {
                "metricId": {
                  "name": "metricId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'counter' | 'gauge' | 'histogram' | 'timer'",
                  "optional": false
                },
                "unit": {
                  "name": "unit",
                  "type": "string",
                  "optional": false
                },
                "frequency": {
                  "name": "frequency",
                  "type": "string",
                  "optional": false
                },
                "threshold": {
                  "name": "threshold",
                  "type": "MetricThreshold",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 857
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "MetricThreshold": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "MetricThreshold",
              "body": "warning: number;\r\n    critical: number;\r\n    operator: 'gt' | 'lt' | 'eq' | 'ne' | 'gte' | 'lte';",
              "properties": {
                "warning": {
                  "name": "warning",
                  "type": "number",
                  "optional": false
                },
                "critical": {
                  "name": "critical",
                  "type": "number",
                  "optional": false
                },
                "operator": {
                  "name": "operator",
                  "type": "'gt' | 'lt' | 'eq' | 'ne' | 'gte' | 'lte'",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 870
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "AlertThreshold": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "AlertThreshold",
              "body": "thresholdId: string;\r\n    metric: string;\r\n    condition: string;\r\n    value: number;\r\n    severity: 'info' | 'warning' | 'error' | 'critical';\r\n    action: string;\r\n    cooldown: string;",
              "properties": {
                "thresholdId": {
                  "name": "thresholdId",
                  "type": "string",
                  "optional": false
                },
                "metric": {
                  "name": "metric",
                  "type": "string",
                  "optional": false
                },
                "condition": {
                  "name": "condition",
                  "type": "string",
                  "optional": false
                },
                "value": {
                  "name": "value",
                  "type": "number",
                  "optional": false
                },
                "severity": {
                  "name": "severity",
                  "type": "'info' | 'warning' | 'error' | 'critical'",
                  "optional": false
                },
                "action": {
                  "name": "action",
                  "type": "string",
                  "optional": false
                },
                "cooldown": {
                  "name": "cooldown",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 879
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ErrorSymptom": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "ErrorSymptom",
              "body": "symptomId: string;\r\n    description: string;\r\n    severity: number; // 0-10\r\n    frequency: number; // 0-1\r\n    observable: boolean;\r\n    measurable: boolean;\r\n    indicators: string[];",
              "properties": {
                "symptomId": {
                  "name": "symptomId",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "severity": {
                  "name": "severity",
                  "type": "number",
                  "optional": false
                },
                "frequency": {
                  "name": "frequency",
                  "type": "number",
                  "optional": false
                },
                "observable": {
                  "name": "observable",
                  "type": "boolean",
                  "optional": false
                },
                "measurable": {
                  "name": "measurable",
                  "type": "boolean",
                  "optional": false
                },
                "indicators": {
                  "name": "indicators",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 928
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "RootCause": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "RootCause",
              "body": "causeId: string;\r\n    description: string;\r\n    category: 'code' | 'data' | 'configuration' | 'environment' | 'user' | 'system';\r\n    probability: number; // 0-1\r\n    evidence: string[];\r\n    dependencies: string[];",
              "properties": {
                "causeId": {
                  "name": "causeId",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "category": {
                  "name": "category",
                  "type": "'code' | 'data' | 'configuration' | 'environment' | 'user' | 'system'",
                  "optional": false
                },
                "probability": {
                  "name": "probability",
                  "type": "number",
                  "optional": false
                },
                "evidence": {
                  "name": "evidence",
                  "type": "string[]",
                  "optional": false
                },
                "dependencies": {
                  "name": "dependencies",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 941
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "FrequencyData": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "FrequencyData",
              "body": "occurrencesPerDay: number;\r\n    occurrencesPerWeek: number;\r\n    occurrencesPerMonth: number;\r\n    peakTimes: string[];\r\n    trends: TrendData[];",
              "properties": {
                "occurrencesPerDay": {
                  "name": "occurrencesPerDay",
                  "type": "number",
                  "optional": false
                },
                "occurrencesPerWeek": {
                  "name": "occurrencesPerWeek",
                  "type": "number",
                  "optional": false
                },
                "occurrencesPerMonth": {
                  "name": "occurrencesPerMonth",
                  "type": "number",
                  "optional": false
                },
                "peakTimes": {
                  "name": "peakTimes",
                  "type": "string[]",
                  "optional": false
                },
                "trends": {
                  "name": "trends",
                  "type": "TrendData[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 953
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "TrendData": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "TrendData",
              "body": "period: string;\r\n    direction: 'increasing' | 'decreasing' | 'stable' | 'volatile';\r\n    changeRate: number; // percentage\r\n    confidence: number; // 0-1",
              "properties": {
                "period": {
                  "name": "period",
                  "type": "string",
                  "optional": false
                },
                "direction": {
                  "name": "direction",
                  "type": "'increasing' | 'decreasing' | 'stable' | 'volatile'",
                  "optional": false
                },
                "changeRate": {
                  "name": "changeRate",
                  "type": "number",
                  "optional": false
                },
                "confidence": {
                  "name": "confidence",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 964
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "SeverityData": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "SeverityData",
              "body": "userImpact: number; // 0-10\r\n    systemImpact: number; // 0-10\r\n    businessImpact: number; // 0-10\r\n    recoveryDifficulty: number; // 0-10\r\n    overallSeverity: number; // 0-10",
              "properties": {
                "userImpact": {
                  "name": "userImpact",
                  "type": "number",
                  "optional": false
                },
                "systemImpact": {
                  "name": "systemImpact",
                  "type": "number",
                  "optional": false
                },
                "businessImpact": {
                  "name": "businessImpact",
                  "type": "number",
                  "optional": false
                },
                "recoveryDifficulty": {
                  "name": "recoveryDifficulty",
                  "type": "number",
                  "optional": false
                },
                "overallSeverity": {
                  "name": "overallSeverity",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 974
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ErrorImpact": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "ErrorImpact",
              "body": "impactId: string;\r\n    type: 'performance' | 'quality' | 'availability' | 'data' | 'user_experience';\r\n    description: string;\r\n    quantification: string;\r\n    duration: string;\r\n    scope: string;",
              "properties": {
                "impactId": {
                  "name": "impactId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'performance' | 'quality' | 'availability' | 'data' | 'user_experience'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "quantification": {
                  "name": "quantification",
                  "type": "string",
                  "optional": false
                },
                "duration": {
                  "name": "duration",
                  "type": "string",
                  "optional": false
                },
                "scope": {
                  "name": "scope",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 985
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "DetectionMethod": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "DetectionMethod",
              "body": "methodId: string;\r\n    name: string;\r\n    type: 'automated' | 'manual' | 'user_reported' | 'monitoring';\r\n    description: string;\r\n    accuracy: number; // 0-1\r\n    latency: string;\r\n    cost: number;\r\n    implementation: string;",
              "properties": {
                "methodId": {
                  "name": "methodId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'automated' | 'manual' | 'user_reported' | 'monitoring'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "accuracy": {
                  "name": "accuracy",
                  "type": "number",
                  "optional": false
                },
                "latency": {
                  "name": "latency",
                  "type": "string",
                  "optional": false
                },
                "cost": {
                  "name": "cost",
                  "type": "number",
                  "optional": false
                },
                "implementation": {
                  "name": "implementation",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 997
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "EarlyWarning": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "EarlyWarning",
              "body": "warningId: string;\r\n    name: string;\r\n    description: string;\r\n    indicators: string[];\r\n    threshold: any;\r\n    leadTime: string;\r\n    accuracy: number; // 0-1",
              "properties": {
                "warningId": {
                  "name": "warningId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "indicators": {
                  "name": "indicators",
                  "type": "string[]",
                  "optional": false
                },
                "threshold": {
                  "name": "threshold",
                  "type": "any",
                  "optional": false
                },
                "leadTime": {
                  "name": "leadTime",
                  "type": "string",
                  "optional": false
                },
                "accuracy": {
                  "name": "accuracy",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1011
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ErrorSolution": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "ErrorSolution",
              "body": "solutionId: string;\r\n    name: string;\r\n    description: string;\r\n    type: 'immediate' | 'workaround' | 'permanent' | 'preventive';\r\n    steps: SolutionStep[];\r\n    effectiveness: number; // 0-1\r\n    complexity: number; // 0-10\r\n    timeRequired: string;\r\n    resources: string[];",
              "properties": {
                "solutionId": {
                  "name": "solutionId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'immediate' | 'workaround' | 'permanent' | 'preventive'",
                  "optional": false
                },
                "steps": {
                  "name": "steps",
                  "type": "SolutionStep[]",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "number",
                  "optional": false
                },
                "complexity": {
                  "name": "complexity",
                  "type": "number",
                  "optional": false
                },
                "timeRequired": {
                  "name": "timeRequired",
                  "type": "string",
                  "optional": false
                },
                "resources": {
                  "name": "resources",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1024
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "SolutionStep": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "SolutionStep",
              "body": "stepId: string;\r\n    description: string;\r\n    order: number;\r\n    duration: string;\r\n    validation: string;\r\n    rollback?: string;",
              "properties": {
                "stepId": {
                  "name": "stepId",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "order": {
                  "name": "order",
                  "type": "number",
                  "optional": false
                },
                "duration": {
                  "name": "duration",
                  "type": "string",
                  "optional": false
                },
                "validation": {
                  "name": "validation",
                  "type": "string",
                  "optional": false
                },
                "rollback": {
                  "name": "rollback",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1039
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "PreventionMeasure": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "PreventionMeasure",
              "body": "measureId: string;\r\n    name: string;\r\n    description: string;\r\n    type: 'process' | 'technical' | 'training' | 'monitoring';\r\n    implementation: string;\r\n    effectiveness: number; // 0-1\r\n    cost: number;\r\n    maintenance: string;",
              "properties": {
                "measureId": {
                  "name": "measureId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'process' | 'technical' | 'training' | 'monitoring'",
                  "optional": false
                },
                "implementation": {
                  "name": "implementation",
                  "type": "string",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "number",
                  "optional": false
                },
                "cost": {
                  "name": "cost",
                  "type": "number",
                  "optional": false
                },
                "maintenance": {
                  "name": "maintenance",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1051
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ErrorOccurrence": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "ErrorOccurrence",
              "body": "occurrenceId: string;\r\n    timestamp: string;\r\n    context: Record<string, any>;\r\n    symptoms: string[];\r\n    severity: number; // 0-10\r\n    impact: string;\r\n    detectionMethod: string;\r\n    timeToDetection: string;\r\n    resolved: boolean;\r\n    resolutionTime?: string;",
              "properties": {
                "occurrenceId": {
                  "name": "occurrenceId",
                  "type": "string",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "Record<string",
                  "optional": false
                },
                "symptoms": {
                  "name": "symptoms",
                  "type": "string[]",
                  "optional": false
                },
                "severity": {
                  "name": "severity",
                  "type": "number",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "string",
                  "optional": false
                },
                "detectionMethod": {
                  "name": "detectionMethod",
                  "type": "string",
                  "optional": false
                },
                "timeToDetection": {
                  "name": "timeToDetection",
                  "type": "string",
                  "optional": false
                },
                "resolved": {
                  "name": "resolved",
                  "type": "boolean",
                  "optional": false
                },
                "resolutionTime": {
                  "name": "resolutionTime",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 1065
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ErrorResolution": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "ErrorResolution",
              "body": "resolutionId: string;\r\n    occurrenceId: string;\r\n    timestamp: string;\r\n    method: string;\r\n    steps: string[];\r\n    timeRequired: string;\r\n    effectiveness: number; // 0-1\r\n    followUp: string[];\r\n    preventionImplemented: boolean;",
              "properties": {
                "resolutionId": {
                  "name": "resolutionId",
                  "type": "string",
                  "optional": false
                },
                "occurrenceId": {
                  "name": "occurrenceId",
                  "type": "string",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "method": {
                  "name": "method",
                  "type": "string",
                  "optional": false
                },
                "steps": {
                  "name": "steps",
                  "type": "string[]",
                  "optional": false
                },
                "timeRequired": {
                  "name": "timeRequired",
                  "type": "string",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "number",
                  "optional": false
                },
                "followUp": {
                  "name": "followUp",
                  "type": "string[]",
                  "optional": false
                },
                "preventionImplemented": {
                  "name": "preventionImplemented",
                  "type": "boolean",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1081
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "QualityApproach": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "QualityApproach",
              "body": "methodology: string;\r\n    principles: string[];\r\n    phases: QualityPhase[];\r\n    stakeholders: string[];\r\n    governance: string;",
              "properties": {
                "methodology": {
                  "name": "methodology",
                  "type": "string",
                  "optional": false
                },
                "principles": {
                  "name": "principles",
                  "type": "string[]",
                  "optional": false
                },
                "phases": {
                  "name": "phases",
                  "type": "QualityPhase[]",
                  "optional": false
                },
                "stakeholders": {
                  "name": "stakeholders",
                  "type": "string[]",
                  "optional": false
                },
                "governance": {
                  "name": "governance",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1132
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "QualityPhase": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "QualityPhase",
              "body": "phaseId: string;\r\n    name: string;\r\n    description: string;\r\n    order: number;\r\n    duration: string;\r\n    objectives: string[];\r\n    deliverables: string[];\r\n    exitCriteria: string[];",
              "properties": {
                "phaseId": {
                  "name": "phaseId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "order": {
                  "name": "order",
                  "type": "number",
                  "optional": false
                },
                "duration": {
                  "name": "duration",
                  "type": "string",
                  "optional": false
                },
                "objectives": {
                  "name": "objectives",
                  "type": "string[]",
                  "optional": false
                },
                "deliverables": {
                  "name": "deliverables",
                  "type": "string[]",
                  "optional": false
                },
                "exitCriteria": {
                  "name": "exitCriteria",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1143
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "QualityMetric": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "QualityMetric",
              "body": "metricId: string;\r\n    name: string;\r\n    description: string;\r\n    type: 'quantitative' | 'qualitative';\r\n    unit: string;\r\n    formula?: string;\r\n    dataSource: string;\r\n    frequency: string;\r\n    benchmark: number;",
              "properties": {
                "metricId": {
                  "name": "metricId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'quantitative' | 'qualitative'",
                  "optional": false
                },
                "unit": {
                  "name": "unit",
                  "type": "string",
                  "optional": false
                },
                "formula": {
                  "name": "formula",
                  "type": "string",
                  "optional": true
                },
                "dataSource": {
                  "name": "dataSource",
                  "type": "string",
                  "optional": false
                },
                "frequency": {
                  "name": "frequency",
                  "type": "string",
                  "optional": false
                },
                "benchmark": {
                  "name": "benchmark",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1157
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "QualityTarget": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "QualityTarget",
              "body": "targetId: string;\r\n    metricId: string;\r\n    baseline: number;\r\n    target: number;\r\n    timeframe: string;\r\n    priority: number; // 0-10\r\n    feasibility: number; // 0-10",
              "properties": {
                "targetId": {
                  "name": "targetId",
                  "type": "string",
                  "optional": false
                },
                "metricId": {
                  "name": "metricId",
                  "type": "string",
                  "optional": false
                },
                "baseline": {
                  "name": "baseline",
                  "type": "number",
                  "optional": false
                },
                "target": {
                  "name": "target",
                  "type": "number",
                  "optional": false
                },
                "timeframe": {
                  "name": "timeframe",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                },
                "feasibility": {
                  "name": "feasibility",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1172
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "QualityTechnique": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "QualityTechnique",
              "body": "techniqueId: string;\r\n    name: string;\r\n    description: string;\r\n    category: string;\r\n    applicability: string[];\r\n    effectiveness: number; // 0-10\r\n    complexity: number; // 0-10\r\n    resources: string[];\r\n    steps: string[];",
              "properties": {
                "techniqueId": {
                  "name": "techniqueId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "category": {
                  "name": "category",
                  "type": "string",
                  "optional": false
                },
                "applicability": {
                  "name": "applicability",
                  "type": "string[]",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "number",
                  "optional": false
                },
                "complexity": {
                  "name": "complexity",
                  "type": "number",
                  "optional": false
                },
                "resources": {
                  "name": "resources",
                  "type": "string[]",
                  "optional": false
                },
                "steps": {
                  "name": "steps",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1185
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "QualityTool": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "QualityTool",
              "body": "toolId: string;\r\n    name: string;\r\n    description: string;\r\n    type: 'measurement' | 'analysis' | 'improvement' | 'monitoring';\r\n    capabilities: string[];\r\n    limitations: string[];\r\n    integration: string[];\r\n    cost: string;",
              "properties": {
                "toolId": {
                  "name": "toolId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'measurement' | 'analysis' | 'improvement' | 'monitoring'",
                  "optional": false
                },
                "capabilities": {
                  "name": "capabilities",
                  "type": "string[]",
                  "optional": false
                },
                "limitations": {
                  "name": "limitations",
                  "type": "string[]",
                  "optional": false
                },
                "integration": {
                  "name": "integration",
                  "type": "string[]",
                  "optional": false
                },
                "cost": {
                  "name": "cost",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1200
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "QualityImplementationPlan": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "QualityImplementationPlan",
              "body": "planId: string;\r\n    overview: string;\r\n    phases: ImplementationPhase[];\r\n    resources: ResourceAllocation[];\r\n    timeline: Timeline;\r\n    risks: Risk[];\r\n    dependencies: Dependency[];",
              "properties": {
                "planId": {
                  "name": "planId",
                  "type": "string",
                  "optional": false
                },
                "overview": {
                  "name": "overview",
                  "type": "string",
                  "optional": false
                },
                "phases": {
                  "name": "phases",
                  "type": "ImplementationPhase[]",
                  "optional": false
                },
                "resources": {
                  "name": "resources",
                  "type": "ResourceAllocation[]",
                  "optional": false
                },
                "timeline": {
                  "name": "timeline",
                  "type": "Timeline",
                  "optional": false
                },
                "risks": {
                  "name": "risks",
                  "type": "Risk[]",
                  "optional": false
                },
                "dependencies": {
                  "name": "dependencies",
                  "type": "Dependency[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1214
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ImplementationPhase": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "ImplementationPhase",
              "body": "phaseId: string;\r\n    name: string;\r\n    description: string;\r\n    order: number;\r\n    startDate: string;\r\n    endDate: string;\r\n    activities: Activity[];\r\n    deliverables: string[];\r\n    successCriteria: string[];",
              "properties": {
                "phaseId": {
                  "name": "phaseId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "order": {
                  "name": "order",
                  "type": "number",
                  "optional": false
                },
                "startDate": {
                  "name": "startDate",
                  "type": "string",
                  "optional": false
                },
                "endDate": {
                  "name": "endDate",
                  "type": "string",
                  "optional": false
                },
                "activities": {
                  "name": "activities",
                  "type": "Activity[]",
                  "optional": false
                },
                "deliverables": {
                  "name": "deliverables",
                  "type": "string[]",
                  "optional": false
                },
                "successCriteria": {
                  "name": "successCriteria",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1227
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "Activity": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "Activity",
              "body": "activityId: string;\r\n    name: string;\r\n    description: string;\r\n    duration: string;\r\n    dependencies: string[];\r\n    resources: string[];\r\n    owner: string;\r\n    status: 'not_started' | 'in_progress' | 'completed' | 'blocked';",
              "properties": {
                "activityId": {
                  "name": "activityId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "duration": {
                  "name": "duration",
                  "type": "string",
                  "optional": false
                },
                "dependencies": {
                  "name": "dependencies",
                  "type": "string[]",
                  "optional": false
                },
                "resources": {
                  "name": "resources",
                  "type": "string[]",
                  "optional": false
                },
                "owner": {
                  "name": "owner",
                  "type": "string",
                  "optional": false
                },
                "status": {
                  "name": "status",
                  "type": "'not_started' | 'in_progress' | 'completed' | 'blocked'",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1242
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ResourceAllocation": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "ResourceAllocation",
              "body": "resourceType: string;\r\n    amount: number;\r\n    unit: string;\r\n    timeframe: string;\r\n    justification: string;",
              "properties": {
                "resourceType": {
                  "name": "resourceType",
                  "type": "string",
                  "optional": false
                },
                "amount": {
                  "name": "amount",
                  "type": "number",
                  "optional": false
                },
                "unit": {
                  "name": "unit",
                  "type": "string",
                  "optional": false
                },
                "timeframe": {
                  "name": "timeframe",
                  "type": "string",
                  "optional": false
                },
                "justification": {
                  "name": "justification",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1256
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "Timeline": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "Timeline",
              "body": "startDate: string;\r\n    endDate: string;\r\n    keyMilestones: string[];\r\n    criticalPath: string[];\r\n    bufferTime: string;",
              "properties": {
                "startDate": {
                  "name": "startDate",
                  "type": "string",
                  "optional": false
                },
                "endDate": {
                  "name": "endDate",
                  "type": "string",
                  "optional": false
                },
                "keyMilestones": {
                  "name": "keyMilestones",
                  "type": "string[]",
                  "optional": false
                },
                "criticalPath": {
                  "name": "criticalPath",
                  "type": "string[]",
                  "optional": false
                },
                "bufferTime": {
                  "name": "bufferTime",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1267
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "Risk": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "Risk",
              "body": "riskId: string;\r\n    description: string;\r\n    category: string;\r\n    probability: number; // 0-1\r\n    impact: number; // 0-10\r\n    mitigation: string[];\r\n    contingency: string[];\r\n    owner: string;",
              "properties": {
                "riskId": {
                  "name": "riskId",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "category": {
                  "name": "category",
                  "type": "string",
                  "optional": false
                },
                "probability": {
                  "name": "probability",
                  "type": "number",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "number",
                  "optional": false
                },
                "mitigation": {
                  "name": "mitigation",
                  "type": "string[]",
                  "optional": false
                },
                "contingency": {
                  "name": "contingency",
                  "type": "string[]",
                  "optional": false
                },
                "owner": {
                  "name": "owner",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1278
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "Dependency": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "Dependency",
              "body": "dependencyId: string;\r\n    type: 'internal' | 'external';\r\n    description: string;\r\n    source: string;\r\n    target: string;\r\n    criticality: number; // 0-10\r\n    status: string;",
              "properties": {
                "dependencyId": {
                  "name": "dependencyId",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'internal' | 'external'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "source": {
                  "name": "source",
                  "type": "string",
                  "optional": false
                },
                "target": {
                  "name": "target",
                  "type": "string",
                  "optional": false
                },
                "criticality": {
                  "name": "criticality",
                  "type": "number",
                  "optional": false
                },
                "status": {
                  "name": "status",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1292
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "QualityMilestone": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "QualityMilestone",
              "body": "milestoneId: string;\r\n    name: string;\r\n    description: string;\r\n    targetDate: string;\r\n    criteria: string[];\r\n    metrics: string[];\r\n    status: 'pending' | 'achieved' | 'missed' | 'at_risk';",
              "properties": {
                "milestoneId": {
                  "name": "milestoneId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "targetDate": {
                  "name": "targetDate",
                  "type": "string",
                  "optional": false
                },
                "criteria": {
                  "name": "criteria",
                  "type": "string[]",
                  "optional": false
                },
                "metrics": {
                  "name": "metrics",
                  "type": "string[]",
                  "optional": false
                },
                "status": {
                  "name": "status",
                  "type": "'pending' | 'achieved' | 'missed' | 'at_risk'",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1305
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "MeasurementFramework": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "MeasurementFramework",
              "body": "frameworkId: string;\r\n    approach: string;\r\n    dataCollection: DataCollectionMethod[];\r\n    analysis: AnalysisMethod[];\r\n    reporting: ReportingMethod[];\r\n    governance: MeasurementGovernance;",
              "properties": {
                "frameworkId": {
                  "name": "frameworkId",
                  "type": "string",
                  "optional": false
                },
                "approach": {
                  "name": "approach",
                  "type": "string",
                  "optional": false
                },
                "dataCollection": {
                  "name": "dataCollection",
                  "type": "DataCollectionMethod[]",
                  "optional": false
                },
                "analysis": {
                  "name": "analysis",
                  "type": "AnalysisMethod[]",
                  "optional": false
                },
                "reporting": {
                  "name": "reporting",
                  "type": "ReportingMethod[]",
                  "optional": false
                },
                "governance": {
                  "name": "governance",
                  "type": "MeasurementGovernance",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1318
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "DataCollectionMethod": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "DataCollectionMethod",
              "body": "methodId: string;\r\n    name: string;\r\n    description: string;\r\n    type: 'automated' | 'manual' | 'survey' | 'observation';\r\n    frequency: string;\r\n    dataPoints: string[];\r\n    quality: number; // 0-10",
              "properties": {
                "methodId": {
                  "name": "methodId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'automated' | 'manual' | 'survey' | 'observation'",
                  "optional": false
                },
                "frequency": {
                  "name": "frequency",
                  "type": "string",
                  "optional": false
                },
                "dataPoints": {
                  "name": "dataPoints",
                  "type": "string[]",
                  "optional": false
                },
                "quality": {
                  "name": "quality",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1330
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "AnalysisMethod": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "AnalysisMethod",
              "body": "methodId: string;\r\n    name: string;\r\n    description: string;\r\n    type: 'statistical' | 'trend' | 'comparative' | 'predictive';\r\n    tools: string[];\r\n    outputs: string[];",
              "properties": {
                "methodId": {
                  "name": "methodId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'statistical' | 'trend' | 'comparative' | 'predictive'",
                  "optional": false
                },
                "tools": {
                  "name": "tools",
                  "type": "string[]",
                  "optional": false
                },
                "outputs": {
                  "name": "outputs",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1343
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ReportingMethod": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "ReportingMethod",
              "body": "methodId: string;\r\n    name: string;\r\n    description: string;\r\n    format: string;\r\n    frequency: string;\r\n    audience: string[];\r\n    content: string[];",
              "properties": {
                "methodId": {
                  "name": "methodId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "format": {
                  "name": "format",
                  "type": "string",
                  "optional": false
                },
                "frequency": {
                  "name": "frequency",
                  "type": "string",
                  "optional": false
                },
                "audience": {
                  "name": "audience",
                  "type": "string[]",
                  "optional": false
                },
                "content": {
                  "name": "content",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1355
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "MeasurementGovernance": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "MeasurementGovernance",
              "body": "roles: Role[];\r\n    responsibilities: Responsibility[];\r\n    processes: Process[];\r\n    standards: Standard[];",
              "properties": {
                "roles": {
                  "name": "roles",
                  "type": "Role[]",
                  "optional": false
                },
                "responsibilities": {
                  "name": "responsibilities",
                  "type": "Responsibility[]",
                  "optional": false
                },
                "processes": {
                  "name": "processes",
                  "type": "Process[]",
                  "optional": false
                },
                "standards": {
                  "name": "standards",
                  "type": "Standard[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1368
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "Role": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "Role",
              "body": "roleId: string;\r\n    name: string;\r\n    description: string;\r\n    responsibilities: string[];\r\n    qualifications: string[];",
              "properties": {
                "roleId": {
                  "name": "roleId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "responsibilities": {
                  "name": "responsibilities",
                  "type": "string[]",
                  "optional": false
                },
                "qualifications": {
                  "name": "qualifications",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1378
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "Responsibility": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "Responsibility",
              "body": "responsibilityId: string;\r\n    description: string;\r\n    owner: string;\r\n    scope: string;\r\n    frequency: string;",
              "properties": {
                "responsibilityId": {
                  "name": "responsibilityId",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "owner": {
                  "name": "owner",
                  "type": "string",
                  "optional": false
                },
                "scope": {
                  "name": "scope",
                  "type": "string",
                  "optional": false
                },
                "frequency": {
                  "name": "frequency",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1389
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "Process": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "Process",
              "body": "processId: string;\r\n    name: string;\r\n    description: string;\r\n    steps: ProcessStep[];\r\n    inputs: string[];\r\n    outputs: string[];\r\n    controls: string[];",
              "properties": {
                "processId": {
                  "name": "processId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "steps": {
                  "name": "steps",
                  "type": "ProcessStep[]",
                  "optional": false
                },
                "inputs": {
                  "name": "inputs",
                  "type": "string[]",
                  "optional": false
                },
                "outputs": {
                  "name": "outputs",
                  "type": "string[]",
                  "optional": false
                },
                "controls": {
                  "name": "controls",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1400
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ProcessStep": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "ProcessStep",
              "body": "stepId: string;\r\n    name: string;\r\n    description: string;\r\n    order: number;\r\n    duration: string;\r\n    owner: string;\r\n    inputs: string[];\r\n    outputs: string[];",
              "properties": {
                "stepId": {
                  "name": "stepId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "order": {
                  "name": "order",
                  "type": "number",
                  "optional": false
                },
                "duration": {
                  "name": "duration",
                  "type": "string",
                  "optional": false
                },
                "owner": {
                  "name": "owner",
                  "type": "string",
                  "optional": false
                },
                "inputs": {
                  "name": "inputs",
                  "type": "string[]",
                  "optional": false
                },
                "outputs": {
                  "name": "outputs",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1413
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "Standard": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "Standard",
              "body": "standardId: string;\r\n    name: string;\r\n    description: string;\r\n    version: string;\r\n    applicability: string[];\r\n    requirements: string[];\r\n    compliance: string;",
              "properties": {
                "standardId": {
                  "name": "standardId",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "version": {
                  "name": "version",
                  "type": "string",
                  "optional": false
                },
                "applicability": {
                  "name": "applicability",
                  "type": "string[]",
                  "optional": false
                },
                "requirements": {
                  "name": "requirements",
                  "type": "string[]",
                  "optional": false
                },
                "compliance": {
                  "name": "compliance",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1427
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ContinuousImprovementPlan": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "ContinuousImprovementPlan",
              "body": "planId: string;\r\n    cycle: 'PDCA' | 'DMAIC' | 'custom';\r\n    frequency: string;\r\n    reviewProcess: ReviewProcess;\r\n    improvementActions: ImprovementAction[];\r\n    learningCapture: LearningCapture;",
              "properties": {
                "planId": {
                  "name": "planId",
                  "type": "string",
                  "optional": false
                },
                "cycle": {
                  "name": "cycle",
                  "type": "'PDCA' | 'DMAIC' | 'custom'",
                  "optional": false
                },
                "frequency": {
                  "name": "frequency",
                  "type": "string",
                  "optional": false
                },
                "reviewProcess": {
                  "name": "reviewProcess",
                  "type": "ReviewProcess",
                  "optional": false
                },
                "improvementActions": {
                  "name": "improvementActions",
                  "type": "ImprovementAction[]",
                  "optional": false
                },
                "learningCapture": {
                  "name": "learningCapture",
                  "type": "LearningCapture",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1440
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ReviewProcess": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "ReviewProcess",
              "body": "processId: string;\r\n    frequency: string;\r\n    participants: string[];\r\n    agenda: string[];\r\n    outputs: string[];\r\n    followUp: string[];",
              "properties": {
                "processId": {
                  "name": "processId",
                  "type": "string",
                  "optional": false
                },
                "frequency": {
                  "name": "frequency",
                  "type": "string",
                  "optional": false
                },
                "participants": {
                  "name": "participants",
                  "type": "string[]",
                  "optional": false
                },
                "agenda": {
                  "name": "agenda",
                  "type": "string[]",
                  "optional": false
                },
                "outputs": {
                  "name": "outputs",
                  "type": "string[]",
                  "optional": false
                },
                "followUp": {
                  "name": "followUp",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1452
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ImprovementAction": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "ImprovementAction",
              "body": "actionId: string;\r\n    description: string;\r\n    priority: number; // 0-10\r\n    effort: string;\r\n    impact: string;\r\n    owner: string;\r\n    dueDate: string;\r\n    status: string;",
              "properties": {
                "actionId": {
                  "name": "actionId",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                },
                "effort": {
                  "name": "effort",
                  "type": "string",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "string",
                  "optional": false
                },
                "owner": {
                  "name": "owner",
                  "type": "string",
                  "optional": false
                },
                "dueDate": {
                  "name": "dueDate",
                  "type": "string",
                  "optional": false
                },
                "status": {
                  "name": "status",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1464
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "LearningCapture": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "LearningCapture",
              "body": "method: string;\r\n    frequency: string;\r\n    documentation: string[];\r\n    sharing: string[];\r\n    application: string[];",
              "properties": {
                "method": {
                  "name": "method",
                  "type": "string",
                  "optional": false
                },
                "frequency": {
                  "name": "frequency",
                  "type": "string",
                  "optional": false
                },
                "documentation": {
                  "name": "documentation",
                  "type": "string[]",
                  "optional": false
                },
                "sharing": {
                  "name": "sharing",
                  "type": "string[]",
                  "optional": false
                },
                "application": {
                  "name": "application",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1478
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ManagerConstructorOptions": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "ManagerConstructorOptions",
              "body": "geminiClient?: GeminiClient;",
              "properties": {
                "geminiClient": {
                  "name": "geminiClient",
                  "type": "GeminiClient",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 97
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "UpdateOptions": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "UpdateOptions",
              "body": "genre?: string;\r\n    totalChapters?: number;\r\n    currentArcNumber?: number;",
              "properties": {
                "genre": {
                  "name": "genre",
                  "type": "string",
                  "optional": true
                },
                "totalChapters": {
                  "name": "totalChapters",
                  "type": "number",
                  "optional": true
                },
                "currentArcNumber": {
                  "name": "currentArcNumber",
                  "type": "number",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 105
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "IManager": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "IManager",
              "body": "initialize(): Promise<void>;\r\n    updateFromChapter(chapter: Chapter, options?: UpdateOptions): Promise<void>;\r\n    save(): Promise<void>;",
              "properties": {
                "chapter": {
                  "name": "chapter",
                  "type": "Chapter",
                  "optional": false
                },
                "options": {
                  "name": "options",
                  "type": "UpdateOptions): Promise<void>",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 115
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "NarrativeStateInfo": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "NarrativeStateInfo",
              "body": "state: NarrativeState;\r\n    tensionLevel: number;\r\n    stagnationDetected: boolean;\r\n    suggestedNextState?: NarrativeState;\r\n    duration: number;\r\n    location: string;\r\n    timeOfDay: string;\r\n    weather: string;\r\n    presentCharacters: string[];\r\n    genre: string;\r\n    \r\n    // 内部状態\r\n    currentArcNumber: number;\r\n    currentTheme: string;\r\n    arcStartChapter: number;\r\n    arcEndChapter: number;\r\n    arcCompleted: boolean;\r\n    turningPoints: TurningPoint[];\r\n    \r\n    // 指標情報\r\n    metrics?: NarrativeMetrics;\r\n    totalChapters?: number;\r\n    \r\n    // 進行情報\r\n    progressionInstruction?: string;",
              "properties": {
                "state": {
                  "name": "state",
                  "type": "NarrativeState",
                  "optional": false
                },
                "tensionLevel": {
                  "name": "tensionLevel",
                  "type": "number",
                  "optional": false
                },
                "stagnationDetected": {
                  "name": "stagnationDetected",
                  "type": "boolean",
                  "optional": false
                },
                "suggestedNextState": {
                  "name": "suggestedNextState",
                  "type": "NarrativeState",
                  "optional": true
                },
                "duration": {
                  "name": "duration",
                  "type": "number",
                  "optional": false
                },
                "location": {
                  "name": "location",
                  "type": "string",
                  "optional": false
                },
                "timeOfDay": {
                  "name": "timeOfDay",
                  "type": "string",
                  "optional": false
                },
                "weather": {
                  "name": "weather",
                  "type": "string",
                  "optional": false
                },
                "presentCharacters": {
                  "name": "presentCharacters",
                  "type": "string[]",
                  "optional": false
                },
                "genre": {
                  "name": "genre",
                  "type": "string",
                  "optional": false
                },
                "currentArcNumber": {
                  "name": "currentArcNumber",
                  "type": "number",
                  "optional": false
                },
                "currentTheme": {
                  "name": "currentTheme",
                  "type": "string",
                  "optional": false
                },
                "arcStartChapter": {
                  "name": "arcStartChapter",
                  "type": "number",
                  "optional": false
                },
                "arcEndChapter": {
                  "name": "arcEndChapter",
                  "type": "number",
                  "optional": false
                },
                "arcCompleted": {
                  "name": "arcCompleted",
                  "type": "boolean",
                  "optional": false
                },
                "turningPoints": {
                  "name": "turningPoints",
                  "type": "TurningPoint[]",
                  "optional": false
                },
                "metrics": {
                  "name": "metrics",
                  "type": "NarrativeMetrics",
                  "optional": true
                },
                "totalChapters": {
                  "name": "totalChapters",
                  "type": "number",
                  "optional": true
                },
                "progressionInstruction": {
                  "name": "progressionInstruction",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 129
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "StateTransition": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "StateTransition",
              "body": "fromState: NarrativeState;\r\n    toState: NarrativeState;\r\n    chapter: number;\r\n    timestamp: string;\r\n    keyEvent?: string;",
              "properties": {
                "fromState": {
                  "name": "fromState",
                  "type": "NarrativeState",
                  "optional": false
                },
                "toState": {
                  "name": "toState",
                  "type": "NarrativeState",
                  "optional": false
                },
                "chapter": {
                  "name": "chapter",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "keyEvent": {
                  "name": "keyEvent",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 161
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "StagnationDetectionResult": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "StagnationDetectionResult",
              "body": "detected: boolean;\r\n    cause: string;\r\n    score: number;\r\n    severity: 'LOW' | 'MEDIUM' | 'HIGH';\r\n    recommendations: string[];",
              "properties": {
                "detected": {
                  "name": "detected",
                  "type": "boolean",
                  "optional": false
                },
                "cause": {
                  "name": "cause",
                  "type": "string",
                  "optional": false
                },
                "score": {
                  "name": "score",
                  "type": "number",
                  "optional": false
                },
                "severity": {
                  "name": "severity",
                  "type": "'LOW' | 'MEDIUM' | 'HIGH'",
                  "optional": false
                },
                "recommendations": {
                  "name": "recommendations",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 173
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "TurningPoint": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "TurningPoint",
              "body": "chapter: number;\r\n    description: string;\r\n    significance: number;\r\n    timestamp?: string;",
              "properties": {
                "chapter": {
                  "name": "chapter",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 185
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "CharacterProgress": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "CharacterProgress",
              "body": "name: string;\r\n    firstAppearance: number;\r\n    lastAppearance: number;\r\n    appearanceCount: number;\r\n    developmentPoints: {\r\n        chapter: number;\r\n        event: string;\r\n        timestamp: string;",
              "properties": {
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "firstAppearance": {
                  "name": "firstAppearance",
                  "type": "number",
                  "optional": false
                },
                "lastAppearance": {
                  "name": "lastAppearance",
                  "type": "number",
                  "optional": false
                },
                "appearanceCount": {
                  "name": "appearanceCount",
                  "type": "number",
                  "optional": false
                },
                "developmentPoints": {
                  "name": "developmentPoints",
                  "type": "{",
                  "optional": false
                },
                "chapter": {
                  "name": "chapter",
                  "type": "number",
                  "optional": false
                },
                "event": {
                  "name": "event",
                  "type": "string",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 200
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "CharacterChangeInfo": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "CharacterChangeInfo",
              "body": "attribute: string;\r\n    previousValue: any;\r\n    currentValue: any;\r\n    classification?: {\r\n        type: string;\r\n        scope: string;\r\n        confidence: number;\r\n        explanation: string;\r\n        narrativeSignificance?: number;",
              "properties": {
                "attribute": {
                  "name": "attribute",
                  "type": "string",
                  "optional": false
                },
                "previousValue": {
                  "name": "previousValue",
                  "type": "any",
                  "optional": false
                },
                "currentValue": {
                  "name": "currentValue",
                  "type": "any",
                  "optional": false
                },
                "classification": {
                  "name": "classification",
                  "type": "{",
                  "optional": true
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "scope": {
                  "name": "scope",
                  "type": "string",
                  "optional": false
                },
                "confidence": {
                  "name": "confidence",
                  "type": "number",
                  "optional": false
                },
                "explanation": {
                  "name": "explanation",
                  "type": "string",
                  "optional": false
                },
                "narrativeSignificance": {
                  "name": "narrativeSignificance",
                  "type": "number",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 216
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ChapterSummary": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "ChapterSummary",
              "body": "chapterNumber: number;\r\n    summary: string;\r\n    timestamp: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "summary": {
                  "name": "summary",
                  "type": "string",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 237
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ChapterMemory": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "ChapterMemory",
              "body": "chapter: number;\r\n    summary: string;\r\n    key_events?: KeyEvent[];\r\n    character_states?: CharacterState[];\r\n    timestamp: string;\r\n    emotional_impact: number;\r\n    plot_significance: number;\r\n    foreshadowing?: Foreshadowing[];\r\n    resolved_foreshadowing?: {\r\n        id: string;\r\n        description: string;\r\n        resolution: string;",
              "properties": {
                "chapter": {
                  "name": "chapter",
                  "type": "number",
                  "optional": false
                },
                "summary": {
                  "name": "summary",
                  "type": "string",
                  "optional": false
                },
                "key_events": {
                  "name": "key_events",
                  "type": "KeyEvent[]",
                  "optional": true
                },
                "character_states": {
                  "name": "character_states",
                  "type": "CharacterState[]",
                  "optional": true
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "emotional_impact": {
                  "name": "emotional_impact",
                  "type": "number",
                  "optional": false
                },
                "plot_significance": {
                  "name": "plot_significance",
                  "type": "number",
                  "optional": false
                },
                "foreshadowing": {
                  "name": "foreshadowing",
                  "type": "Foreshadowing[]",
                  "optional": true
                },
                "resolved_foreshadowing": {
                  "name": "resolved_foreshadowing",
                  "type": "{",
                  "optional": true
                },
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "resolution": {
                  "name": "resolution",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 247
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "KeyEvent": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "KeyEvent",
              "body": "event: string;\r\n    chapter: number;\r\n    significance: number;\r\n    location?: string;\r\n    characters?: string[];",
              "properties": {
                "event": {
                  "name": "event",
                  "type": "string",
                  "optional": false
                },
                "chapter": {
                  "name": "chapter",
                  "type": "number",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": false
                },
                "location": {
                  "name": "location",
                  "type": "string",
                  "optional": true
                },
                "characters": {
                  "name": "characters",
                  "type": "string[]",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 269
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "CharacterState": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "CharacterState",
              "body": "name: string;\r\n    mood?: string;\r\n    development?: string;\r\n    relationships?: Relationship[];",
              "properties": {
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "mood": {
                  "name": "mood",
                  "type": "string",
                  "optional": true
                },
                "development": {
                  "name": "development",
                  "type": "string",
                  "optional": true
                },
                "relationships": {
                  "name": "relationships",
                  "type": "Relationship[]",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 281
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "Relationship": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "Relationship",
              "body": "character: string;\r\n    relation: string;\r\n    trust_level?: number;",
              "properties": {
                "character": {
                  "name": "character",
                  "type": "string",
                  "optional": false
                },
                "relation": {
                  "name": "relation",
                  "type": "string",
                  "optional": false
                },
                "trust_level": {
                  "name": "trust_level",
                  "type": "number",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 292
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "EmotionalCurvePoint": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "EmotionalCurvePoint",
              "body": "chapter: number;\r\n    tension: number;\r\n    emotion: string;\r\n    event?: string;",
              "properties": {
                "chapter": {
                  "name": "chapter",
                  "type": "number",
                  "optional": false
                },
                "tension": {
                  "name": "tension",
                  "type": "number",
                  "optional": false
                },
                "emotion": {
                  "name": "emotion",
                  "type": "string",
                  "optional": false
                },
                "event": {
                  "name": "event",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 306
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ChapterEmotionAnalysis": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "ChapterEmotionAnalysis",
              "body": "emotionalDimensions: {\r\n        hopeVsDespair: { start: number, middle: number, end: number",
              "properties": {
                "emotionalDimensions": {
                  "name": "emotionalDimensions",
                  "type": "{",
                  "optional": false
                },
                "hopeVsDespair": {
                  "name": "hopeVsDespair",
                  "type": "{ start: number",
                  "optional": false
                },
                "middle": {
                  "name": "middle",
                  "type": "number",
                  "optional": false
                },
                "end": {
                  "name": "end",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 317
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "EmotionalArcDesign": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "EmotionalArcDesign",
              "body": "recommendedTone: string;\r\n    emotionalJourney: {\r\n        opening: { dimension: string; level: number",
              "properties": {
                "recommendedTone": {
                  "name": "recommendedTone",
                  "type": "string",
                  "optional": false
                },
                "emotionalJourney": {
                  "name": "emotionalJourney",
                  "type": "{",
                  "optional": false
                },
                "opening": {
                  "name": "opening",
                  "type": "{ dimension: string",
                  "optional": false
                },
                "level": {
                  "name": "level",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 333
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "TensionRecommendation": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "TensionRecommendation",
              "body": "recommendedTension: number;\r\n    reason: string;\r\n    direction: \"increase\" | \"decrease\" | \"maintain\" | \"establish\";",
              "properties": {
                "recommendedTension": {
                  "name": "recommendedTension",
                  "type": "number",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                },
                "direction": {
                  "name": "direction",
                  "type": "\"increase\" | \"decrease\" | \"maintain\" | \"establish\"",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 347
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "PacingRecommendation": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "PacingRecommendation",
              "body": "recommendedPacing: number;\r\n    description: string;",
              "properties": {
                "recommendedPacing": {
                  "name": "recommendedPacing",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 357
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "TensionPacingRecommendation": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "TensionPacingRecommendation",
              "body": "tension: TensionRecommendation;\r\n    pacing: PacingRecommendation;",
              "properties": {
                "tension": {
                  "name": "tension",
                  "type": "TensionRecommendation",
                  "optional": false
                },
                "pacing": {
                  "name": "pacing",
                  "type": "PacingRecommendation",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 366
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "Foreshadowing": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "Foreshadowing",
              "body": "id: string;\r\n    description: string;\r\n    chapter_introduced: number;\r\n    potential_resolution?: string;\r\n    resolved: boolean;\r\n    resolution_chapter?: number;\r\n    resolution_description?: string;\r\n    significance?: number;\r\n    urgency: string;\r\n    context?: string;\r\n    plannedResolution?: number;\r\n    createdTimestamp: string;\r\n    updatedTimestamp: string;\r\n    relatedCharacters?: string[];\r\n    relatedElements?: string[];\r\n    evaluation?: ForeshadowingEvaluation;\r\n    introductionMethod?: string;\r\n    metadata?: {\r\n        type: string;\r\n        conceptName: string;\r\n        characterId: string;\r\n        fromStage: string;\r\n        toStage: string;\r\n        transformationCatalyst: string;",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "chapter_introduced": {
                  "name": "chapter_introduced",
                  "type": "number",
                  "optional": false
                },
                "potential_resolution": {
                  "name": "potential_resolution",
                  "type": "string",
                  "optional": true
                },
                "resolved": {
                  "name": "resolved",
                  "type": "boolean",
                  "optional": false
                },
                "resolution_chapter": {
                  "name": "resolution_chapter",
                  "type": "number",
                  "optional": true
                },
                "resolution_description": {
                  "name": "resolution_description",
                  "type": "string",
                  "optional": true
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": true
                },
                "urgency": {
                  "name": "urgency",
                  "type": "string",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "string",
                  "optional": true
                },
                "plannedResolution": {
                  "name": "plannedResolution",
                  "type": "number",
                  "optional": true
                },
                "createdTimestamp": {
                  "name": "createdTimestamp",
                  "type": "string",
                  "optional": false
                },
                "updatedTimestamp": {
                  "name": "updatedTimestamp",
                  "type": "string",
                  "optional": false
                },
                "relatedCharacters": {
                  "name": "relatedCharacters",
                  "type": "string[]",
                  "optional": true
                },
                "relatedElements": {
                  "name": "relatedElements",
                  "type": "string[]",
                  "optional": true
                },
                "evaluation": {
                  "name": "evaluation",
                  "type": "ForeshadowingEvaluation",
                  "optional": true
                },
                "introductionMethod": {
                  "name": "introductionMethod",
                  "type": "string",
                  "optional": true
                },
                "metadata": {
                  "name": "metadata",
                  "type": "{",
                  "optional": true
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "conceptName": {
                  "name": "conceptName",
                  "type": "string",
                  "optional": false
                },
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "fromStage": {
                  "name": "fromStage",
                  "type": "string",
                  "optional": false
                },
                "toStage": {
                  "name": "toStage",
                  "type": "string",
                  "optional": false
                },
                "transformationCatalyst": {
                  "name": "transformationCatalyst",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 379
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ForeshadowingEvaluation": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "ForeshadowingEvaluation",
              "body": "integrationScore: number;\r\n    narrativeRelevance: number;\r\n    subtlety: number;\r\n    payoffPotential: number;",
              "properties": {
                "integrationScore": {
                  "name": "integrationScore",
                  "type": "number",
                  "optional": false
                },
                "narrativeRelevance": {
                  "name": "narrativeRelevance",
                  "type": "number",
                  "optional": false
                },
                "subtlety": {
                  "name": "subtlety",
                  "type": "number",
                  "optional": false
                },
                "payoffPotential": {
                  "name": "payoffPotential",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 411
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ForeshadowingMethodSuggestion": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "ForeshadowingMethodSuggestion",
              "body": "method: string;\r\n    description: string;\r\n    suitability: number;",
              "properties": {
                "method": {
                  "name": "method",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "suitability": {
                  "name": "suitability",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 422
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ArcMemory": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "ArcMemory",
              "body": "number: number;\r\n    arc_name?: string;\r\n    theme: string;\r\n    themes?: string[];\r\n    chapter_range: { start: number; end: number",
              "properties": {
                "number": {
                  "name": "number",
                  "type": "number",
                  "optional": false
                },
                "arc_name": {
                  "name": "arc_name",
                  "type": "string",
                  "optional": true
                },
                "theme": {
                  "name": "theme",
                  "type": "string",
                  "optional": false
                },
                "themes": {
                  "name": "themes",
                  "type": "string[]",
                  "optional": true
                },
                "chapter_range": {
                  "name": "chapter_range",
                  "type": "{ start: number",
                  "optional": false
                },
                "end": {
                  "name": "end",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 436
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "CompressedMemory": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "CompressedMemory",
              "body": "timeframe: { start: number; end: number",
              "properties": {
                "timeframe": {
                  "name": "timeframe",
                  "type": "{ start: number",
                  "optional": false
                },
                "end": {
                  "name": "end",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 456
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "NarrativeMetrics": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "NarrativeMetrics",
              "body": "pacing: number;\r\n    complexity: number;\r\n    novelty: number;\r\n    coherence: number;\r\n    characterFocus: Record<string, number>;\r\n    emotionalTone: string;",
              "properties": {
                "pacing": {
                  "name": "pacing",
                  "type": "number",
                  "optional": false
                },
                "complexity": {
                  "name": "complexity",
                  "type": "number",
                  "optional": false
                },
                "novelty": {
                  "name": "novelty",
                  "type": "number",
                  "optional": false
                },
                "coherence": {
                  "name": "coherence",
                  "type": "number",
                  "optional": false
                },
                "characterFocus": {
                  "name": "characterFocus",
                  "type": "Record<string",
                  "optional": false
                },
                "emotionalTone": {
                  "name": "emotionalTone",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 477
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ThemeResonanceAnalysis": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "ThemeResonanceAnalysis",
              "body": "strength: number;\r\n    dominantExpressions: string[];\r\n    resonanceHistory?: {\r\n        chapter: number;\r\n        strength: number;\r\n        dominantExpressions: string[];",
              "properties": {
                "strength": {
                  "name": "strength",
                  "type": "number",
                  "optional": false
                },
                "dominantExpressions": {
                  "name": "dominantExpressions",
                  "type": "string[]",
                  "optional": false
                },
                "resonanceHistory": {
                  "name": "resonanceHistory",
                  "type": "{",
                  "optional": true
                },
                "chapter": {
                  "name": "chapter",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 490
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "SignificantEvent": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "SignificantEvent",
              "body": "id: string;\r\n    chapterNumber: number;\r\n    description: string;\r\n    involvedCharacters: string[];\r\n    location: string;\r\n    type: string;\r\n    significance: number;\r\n    consequence?: string;\r\n    relatedEvents?: string[];\r\n    timestamp?: string;\r\n    isPersistent?: boolean;\r\n    isResolved?: boolean;\r\n    resolvedInChapter?: number;\r\n    primaryCharacterId?: string;\r\n    relatedElements?: string[];\r\n    affectedAttributes?: string[];\r\n    relatedGrowthPhaseId?: string;\r\n    relatedEventPlanId?: string;\r\n    parameterChanges?: Array<{\r\n        characterId: string;\r\n        parameterId: string;\r\n        previousValue: number;\r\n        newValue: number;",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "involvedCharacters": {
                  "name": "involvedCharacters",
                  "type": "string[]",
                  "optional": false
                },
                "location": {
                  "name": "location",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": false
                },
                "consequence": {
                  "name": "consequence",
                  "type": "string",
                  "optional": true
                },
                "relatedEvents": {
                  "name": "relatedEvents",
                  "type": "string[]",
                  "optional": true
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": true
                },
                "isPersistent": {
                  "name": "isPersistent",
                  "type": "boolean",
                  "optional": true
                },
                "isResolved": {
                  "name": "isResolved",
                  "type": "boolean",
                  "optional": true
                },
                "resolvedInChapter": {
                  "name": "resolvedInChapter",
                  "type": "number",
                  "optional": true
                },
                "primaryCharacterId": {
                  "name": "primaryCharacterId",
                  "type": "string",
                  "optional": true
                },
                "relatedElements": {
                  "name": "relatedElements",
                  "type": "string[]",
                  "optional": true
                },
                "affectedAttributes": {
                  "name": "affectedAttributes",
                  "type": "string[]",
                  "optional": true
                },
                "relatedGrowthPhaseId": {
                  "name": "relatedGrowthPhaseId",
                  "type": "string",
                  "optional": true
                },
                "relatedEventPlanId": {
                  "name": "relatedEventPlanId",
                  "type": "string",
                  "optional": true
                },
                "parameterChanges": {
                  "name": "parameterChanges",
                  "type": "Array<{",
                  "optional": true
                },
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "parameterId": {
                  "name": "parameterId",
                  "type": "string",
                  "optional": false
                },
                "previousValue": {
                  "name": "previousValue",
                  "type": "number",
                  "optional": false
                },
                "newValue": {
                  "name": "newValue",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 508
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "BusinessEvent": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "BusinessEvent",
              "body": "title: string;\r\n    chapterNumber: number;\r\n    description: string;\r\n    impact?: string;\r\n    involvedParties?: string[];",
              "properties": {
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "string",
                  "optional": true
                },
                "involvedParties": {
                  "name": "involvedParties",
                  "type": "string[]",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 550
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "BusinessStoryEvent": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "BusinessStoryEvent",
              "body": "type: BusinessEventType;\r\n    significance: number;\r\n    details?: any;",
              "properties": {
                "type": {
                  "name": "type",
                  "type": "BusinessEventType",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": false
                },
                "details": {
                  "name": "details",
                  "type": "any",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 562
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "NarrativeMemoryStatus": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "NarrativeMemoryStatus",
              "body": "initialized: boolean;\r\n    summaryCount: number;\r\n    currentState: NarrativeState;\r\n    lastUpdateTime: string | null;",
              "properties": {
                "initialized": {
                  "name": "initialized",
                  "type": "boolean",
                  "optional": false
                },
                "summaryCount": {
                  "name": "summaryCount",
                  "type": "number",
                  "optional": false
                },
                "currentState": {
                  "name": "currentState",
                  "type": "NarrativeState",
                  "optional": false
                },
                "lastUpdateTime": {
                  "name": "lastUpdateTime",
                  "type": "string | null",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 594
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "EmotionLearningSyncMetrics": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "EmotionLearningSyncMetrics",
              "body": "alignmentScore: number;\r\n    emotionalResonance: number;\r\n    learningEffectiveness: number;\r\n    narrativeCoherence: number;",
              "properties": {
                "alignmentScore": {
                  "name": "alignmentScore",
                  "type": "number",
                  "optional": false
                },
                "emotionalResonance": {
                  "name": "emotionalResonance",
                  "type": "number",
                  "optional": false
                },
                "learningEffectiveness": {
                  "name": "learningEffectiveness",
                  "type": "number",
                  "optional": false
                },
                "narrativeCoherence": {
                  "name": "narrativeCoherence",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 630
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "QueryOptions": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "QueryOptions",
              "body": "limit?: number;\r\n    minSignificance?: number;\r\n    includeResolved?: boolean;\r\n    sortBy?: 'significance' | 'time';\r\n    isPersistent?: boolean;",
              "properties": {
                "limit": {
                  "name": "limit",
                  "type": "number",
                  "optional": true
                },
                "minSignificance": {
                  "name": "minSignificance",
                  "type": "number",
                  "optional": true
                },
                "includeResolved": {
                  "name": "includeResolved",
                  "type": "boolean",
                  "optional": true
                },
                "sortBy": {
                  "name": "sortBy",
                  "type": "'significance' | 'time'",
                  "optional": true
                },
                "isPersistent": {
                  "name": "isPersistent",
                  "type": "boolean",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 656
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "SearchOptions": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "SearchOptions",
              "body": "limit?: number;\r\n    minRelevance?: number;\r\n    memoryTypes?: string[];\r\n    includeMeta?: boolean;",
              "properties": {
                "limit": {
                  "name": "limit",
                  "type": "number",
                  "optional": true
                },
                "minRelevance": {
                  "name": "minRelevance",
                  "type": "number",
                  "optional": true
                },
                "memoryTypes": {
                  "name": "memoryTypes",
                  "type": "string[]",
                  "optional": true
                },
                "includeMeta": {
                  "name": "includeMeta",
                  "type": "boolean",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 668
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "Memory": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "Memory",
              "body": "type: MemoryType;\r\n    content: string;\r\n    priority: number;\r\n    metadata?: any;",
              "properties": {
                "type": {
                  "name": "type",
                  "type": "MemoryType",
                  "optional": false
                },
                "content": {
                  "name": "content",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                },
                "metadata": {
                  "name": "metadata",
                  "type": "any",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 689
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "SearchResult": [
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "SearchResult",
              "body": "memory: Memory;\r\n    relevance: number;\r\n    matches: string[];",
              "properties": {
                "memory": {
                  "name": "memory",
                  "type": "Memory",
                  "optional": false
                },
                "relevance": {
                  "name": "relevance",
                  "type": "number",
                  "optional": false
                },
                "matches": {
                  "name": "matches",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 700
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "MemoryType": [
          {
            "type": "type",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "MemoryType",
              "definition": "'SHORT_TERM' | 'MID_TERM' | 'LONG_TERM'",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": false,
              "lineNumber": 683
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "NarrativeState": [
          {
            "type": "enum",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "NarrativeState",
              "body": "// 共通状態\r\n    INTRODUCTION = 'INTRODUCTION',\r\n    DAILY_LIFE = 'DAILY_LIFE',\r\n    JOURNEY = 'JOURNEY',\r\n    INVESTIGATION = 'INVESTIGATION',\r\n    PRE_BATTLE = 'PRE_BATTLE',\r\n    BATTLE = 'BATTLE',\r\n    POST_BATTLE = 'POST_BATTLE',\r\n    TRAINING = 'TRAINING',\r\n    REVELATION = 'REVELATION',\r\n    DILEMMA = 'DILEMMA',\r\n    RESOLUTION = 'RESOLUTION',\r\n    CLOSURE = 'CLOSURE',\r\n\r\n    // ビジネスジャンル特有の状態\r\n    BUSINESS_MEETING = 'BUSINESS_MEETING',\r\n    PRODUCT_DEVELOPMENT = 'PRODUCT_DEVELOPMENT',\r\n    PITCH_PRESENTATION = 'PITCH_PRESENTATION',\r\n    MARKET_RESEARCH = 'MARKET_RESEARCH',\r\n    TEAM_BUILDING = 'TEAM_BUILDING',\r\n    FUNDING_ROUND = 'FUNDING_ROUND',\r\n    BUSINESS_PIVOT = 'BUSINESS_PIVOT',\r\n    CUSTOMER_DISCOVERY = 'CUSTOMER_DISCOVERY',\r\n    PRODUCT_LAUNCH = 'PRODUCT_LAUNCH',\r\n    \r\n    // 追加のビジネス特化状態\r\n    MARKET_COMPETITION = 'MARKET_COMPETITION',\r\n    STRATEGIC_PREPARATION = 'STRATEGIC_PREPARATION',\r\n    PERFORMANCE_REVIEW = 'PERFORMANCE_REVIEW',\r\n    BUSINESS_DEVELOPMENT = 'BUSINESS_DEVELOPMENT',\r\n    SKILL_DEVELOPMENT = 'SKILL_DEVELOPMENT',\r\n    FINANCIAL_CHALLENGE = 'FINANCIAL_CHALLENGE',\r\n    EXPANSION_PHASE = 'EXPANSION_PHASE',\r\n    ACQUISITION_NEGOTIATION = 'ACQUISITION_NEGOTIATION',\r\n    CULTURE_BUILDING = 'CULTURE_BUILDING',\r\n    CRISIS_MANAGEMENT = 'CRISIS_MANAGEMENT',\r\n    MARKET_ENTRY = 'MARKET_ENTRY',\r\n    REGULATORY_COMPLIANCE = 'REGULATORY_COMPLIANCE',\r\n    PARTNERSHIP_DEVELOPMENT = 'PARTNERSHIP_DEVELOPMENT',\r\n    MARKET_SCALING = 'MARKET_SCALING',",
              "values": [
                {
                  "name": "// 共通状態\r\n    INTRODUCTION",
                  "value": "'INTRODUCTION'"
                },
                {
                  "name": "DAILY_LIFE",
                  "value": "'DAILY_LIFE'"
                },
                {
                  "name": "JOURNEY",
                  "value": "'JOURNEY'"
                },
                {
                  "name": "INVESTIGATION",
                  "value": "'INVESTIGATION'"
                },
                {
                  "name": "PRE_BATTLE",
                  "value": "'PRE_BATTLE'"
                },
                {
                  "name": "BATTLE",
                  "value": "'BATTLE'"
                },
                {
                  "name": "POST_BATTLE",
                  "value": "'POST_BATTLE'"
                },
                {
                  "name": "TRAINING",
                  "value": "'TRAINING'"
                },
                {
                  "name": "REVELATION",
                  "value": "'REVELATION'"
                },
                {
                  "name": "DILEMMA",
                  "value": "'DILEMMA'"
                },
                {
                  "name": "RESOLUTION",
                  "value": "'RESOLUTION'"
                },
                {
                  "name": "CLOSURE",
                  "value": "'CLOSURE'"
                },
                {
                  "name": "// ビジネスジャンル特有の状態\r\n    BUSINESS_MEETING",
                  "value": "'BUSINESS_MEETING'"
                },
                {
                  "name": "PRODUCT_DEVELOPMENT",
                  "value": "'PRODUCT_DEVELOPMENT'"
                },
                {
                  "name": "PITCH_PRESENTATION",
                  "value": "'PITCH_PRESENTATION'"
                },
                {
                  "name": "MARKET_RESEARCH",
                  "value": "'MARKET_RESEARCH'"
                },
                {
                  "name": "TEAM_BUILDING",
                  "value": "'TEAM_BUILDING'"
                },
                {
                  "name": "FUNDING_ROUND",
                  "value": "'FUNDING_ROUND'"
                },
                {
                  "name": "BUSINESS_PIVOT",
                  "value": "'BUSINESS_PIVOT'"
                },
                {
                  "name": "CUSTOMER_DISCOVERY",
                  "value": "'CUSTOMER_DISCOVERY'"
                },
                {
                  "name": "PRODUCT_LAUNCH",
                  "value": "'PRODUCT_LAUNCH'"
                },
                {
                  "name": "// 追加のビジネス特化状態\r\n    MARKET_COMPETITION",
                  "value": "'MARKET_COMPETITION'"
                },
                {
                  "name": "STRATEGIC_PREPARATION",
                  "value": "'STRATEGIC_PREPARATION'"
                },
                {
                  "name": "PERFORMANCE_REVIEW",
                  "value": "'PERFORMANCE_REVIEW'"
                },
                {
                  "name": "BUSINESS_DEVELOPMENT",
                  "value": "'BUSINESS_DEVELOPMENT'"
                },
                {
                  "name": "SKILL_DEVELOPMENT",
                  "value": "'SKILL_DEVELOPMENT'"
                },
                {
                  "name": "FINANCIAL_CHALLENGE",
                  "value": "'FINANCIAL_CHALLENGE'"
                },
                {
                  "name": "EXPANSION_PHASE",
                  "value": "'EXPANSION_PHASE'"
                },
                {
                  "name": "ACQUISITION_NEGOTIATION",
                  "value": "'ACQUISITION_NEGOTIATION'"
                },
                {
                  "name": "CULTURE_BUILDING",
                  "value": "'CULTURE_BUILDING'"
                },
                {
                  "name": "CRISIS_MANAGEMENT",
                  "value": "'CRISIS_MANAGEMENT'"
                },
                {
                  "name": "MARKET_ENTRY",
                  "value": "'MARKET_ENTRY'"
                },
                {
                  "name": "REGULATORY_COMPLIANCE",
                  "value": "'REGULATORY_COMPLIANCE'"
                },
                {
                  "name": "PARTNERSHIP_DEVELOPMENT",
                  "value": "'PARTNERSHIP_DEVELOPMENT'"
                },
                {
                  "name": "MARKET_SCALING",
                  "value": "'MARKET_SCALING'"
                }
              ],
              "lineNumber": 18
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "BusinessGrowthPhase": [
          {
            "type": "enum",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "BusinessGrowthPhase",
              "body": "IDEA = \"IDEA_PHASE\",\r\n    VALIDATION = \"VALIDATION_PHASE\",\r\n    EARLY_TRACTION = \"EARLY_TRACTION\",\r\n    SCALE = \"SCALE_PHASE\",\r\n    EXPANSION = \"EXPANSION_PHASE\",\r\n    MATURITY = \"MATURITY_PHASE\"",
              "values": [
                {
                  "name": "IDEA",
                  "value": "\"IDEA_PHASE\""
                },
                {
                  "name": "VALIDATION",
                  "value": "\"VALIDATION_PHASE\""
                },
                {
                  "name": "EARLY_TRACTION",
                  "value": "\"EARLY_TRACTION\""
                },
                {
                  "name": "SCALE",
                  "value": "\"SCALE_PHASE\""
                },
                {
                  "name": "EXPANSION",
                  "value": "\"EXPANSION_PHASE\""
                },
                {
                  "name": "MATURITY",
                  "value": "\"MATURITY_PHASE\""
                }
              ],
              "lineNumber": 65
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "PersistentEventType": [
          {
            "type": "enum",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "PersistentEventType",
              "body": "DEATH = 'DEATH',\r\n    MARRIAGE = 'MARRIAGE',\r\n    BIRTH = 'BIRTH',\r\n    PROMOTION = 'PROMOTION',\r\n    SKILL_ACQUISITION = 'SKILL_ACQUISITION',\r\n    MAJOR_INJURY = 'MAJOR_INJURY',\r\n    TRANSFORMATION = 'TRANSFORMATION',\r\n    RELOCATION = 'RELOCATION'",
              "values": [
                {
                  "name": "DEATH",
                  "value": "'DEATH'"
                },
                {
                  "name": "MARRIAGE",
                  "value": "'MARRIAGE'"
                },
                {
                  "name": "BIRTH",
                  "value": "'BIRTH'"
                },
                {
                  "name": "PROMOTION",
                  "value": "'PROMOTION'"
                },
                {
                  "name": "SKILL_ACQUISITION",
                  "value": "'SKILL_ACQUISITION'"
                },
                {
                  "name": "MAJOR_INJURY",
                  "value": "'MAJOR_INJURY'"
                },
                {
                  "name": "TRANSFORMATION",
                  "value": "'TRANSFORMATION'"
                },
                {
                  "name": "RELOCATION",
                  "value": "'RELOCATION'"
                }
              ],
              "lineNumber": 78
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "BusinessEventType": [
          {
            "type": "enum",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "BusinessEventType",
              "body": "FUNDING_ROUND = \"funding_round\",\r\n    PRODUCT_LAUNCH = \"product_launch\",\r\n    PIVOT = \"pivot\",\r\n    TEAM_CONFLICT = \"team_conflict\",\r\n    EXPANSION = \"expansion\",\r\n    ACQUISITION = \"acquisition\",\r\n    MARKET_ENTRY = \"market_entry\",\r\n    COMPETITION = \"competition\",\r\n    REGULATORY_CHALLENGE = \"regulatory_challenge\",\r\n    FINANCIAL_CRISIS = \"financial_crisis\",\r\n    LEADERSHIP_CHANGE = \"leadership_change\"",
              "values": [
                {
                  "name": "FUNDING_ROUND",
                  "value": "\"funding_round\""
                },
                {
                  "name": "PRODUCT_LAUNCH",
                  "value": "\"product_launch\""
                },
                {
                  "name": "PIVOT",
                  "value": "\"pivot\""
                },
                {
                  "name": "TEAM_CONFLICT",
                  "value": "\"team_conflict\""
                },
                {
                  "name": "EXPANSION",
                  "value": "\"expansion\""
                },
                {
                  "name": "ACQUISITION",
                  "value": "\"acquisition\""
                },
                {
                  "name": "MARKET_ENTRY",
                  "value": "\"market_entry\""
                },
                {
                  "name": "COMPETITION",
                  "value": "\"competition\""
                },
                {
                  "name": "REGULATORY_CHALLENGE",
                  "value": "\"regulatory_challenge\""
                },
                {
                  "name": "FINANCIAL_CRISIS",
                  "value": "\"financial_crisis\""
                },
                {
                  "name": "LEADERSHIP_CHANGE",
                  "value": "\"leadership_change\""
                }
              ],
              "lineNumber": 572
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "LearningStage": [
          {
            "type": "enum",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "LearningStage",
              "body": "INTRODUCTION = 'INTRODUCTION',\r\n    DEVELOPMENT = 'DEVELOPMENT',\r\n    MASTERY = 'MASTERY',\r\n    APPLICATION = 'APPLICATION'",
              "values": [
                {
                  "name": "INTRODUCTION",
                  "value": "'INTRODUCTION'"
                },
                {
                  "name": "DEVELOPMENT",
                  "value": "'DEVELOPMENT'"
                },
                {
                  "name": "MASTERY",
                  "value": "'MASTERY'"
                },
                {
                  "name": "APPLICATION",
                  "value": "'APPLICATION'"
                }
              ],
              "lineNumber": 641
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ]
      },
      "parameters": {
        "IParameterManager": [
          {
            "type": "interface",
            "file": "lib\\parameters\\types.ts",
            "definition": {
              "name": "IParameterManager",
              "body": "/**\r\n   * 初期化処理を実行\r\n   * 各種ファイルの読み込みとデータの準備を行う\r\n   */\r\n  initialize(): Promise<void>;\r\n  \r\n  /**\r\n   * 現在のパラメータを取得\r\n   * @returns 現在のパラメータのコピー\r\n   */\r\n  getParameters(): SystemParameters;\r\n  \r\n  /**\r\n   * 指定されたファイルからパラメータを読み込む\r\n   * @param filePath パラメータファイルのパス\r\n   * @returns 読み込まれたパラメータ\r\n   */\r\n  loadParameters(filePath: string): Promise<SystemParameters>;\r\n  \r\n  /**\r\n   * 現在のパラメータをファイルに保存\r\n   * @param filePath 保存先ファイルパス（省略時はデフォルト）\r\n   * @returns 保存成功時にtrue\r\n   */\r\n  saveParameters(filePath?: string): Promise<boolean>;\r\n  \r\n  /**\r\n   * JSONテキストからパラメータをインポート\r\n   * @param jsonContent JSONテキスト\r\n   * @returns インポート成功時にtrue\r\n   */\r\n  importParameters(jsonContent: string): Promise<boolean>;\r\n  \r\n  /**\r\n   * 現在のパラメータをJSON形式にエクスポート\r\n   * @returns エクスポートされたJSONテキスト\r\n   */\r\n  exportParameters(): string;\r\n  \r\n  /**\r\n   * 単一パラメータの値を更新\r\n   * @param path パラメータのパス（ドット区切り）\r\n   * @param value 新しい値\r\n   */\r\n  updateParameter(path: string, value: any): void;\r\n  \r\n  /**\r\n   * すべてのパラメータをデフォルト値にリセット\r\n   */\r\n  resetToDefaults(): void;\r\n  \r\n  /**\r\n   * 指定されたプリセットを適用\r\n   * @param presetName プリセット名\r\n   * @returns 適用成功時にtrue\r\n   */\r\n  applyPreset(presetName: string): boolean;\r\n  \r\n  /**\r\n   * 現在のパラメータをプリセットとして保存\r\n   * @param name プリセット名\r\n   * @param description プリセットの説明\r\n   * @returns 保存成功時にtrue\r\n   */\r\n  saveAsPreset(name: string, description?: string): Promise<boolean>;\r\n  \r\n  /**\r\n   * 利用可能なプリセット名の一覧を取得\r\n   * @returns プリセット名の配列\r\n   */\r\n  getPresets(): string[];\r\n  \r\n  /**\r\n   * 利用可能なプリセットの詳細情報を取得\r\n   * @returns プリセット情報の配列\r\n   */\r\n  getPresetDetails(): ParameterPreset[];\r\n  \r\n  /**\r\n   * パラメータ変更イベントの購読\r\n   * @param callback 変更通知を受け取るコールバック関数\r\n   */\r\n  onParameterChanged(callback: (path: string, value: any) => void): void;\r\n  \r\n  /**\r\n   * パラメータ変更リスナーの削除\r\n   * @param callback 削除するコールバック関数\r\n   */\r\n  removeParameterChangedListener(callback: (path: string, value: any) => void): void;",
              "properties": {
                "filePath": {
                  "name": "filePath",
                  "type": "string): Promise<boolean>",
                  "optional": true
                },
                "jsonContent": {
                  "name": "jsonContent",
                  "type": "string): Promise<boolean>",
                  "optional": false
                },
                "path": {
                  "name": "path",
                  "type": "string",
                  "optional": false
                },
                "value": {
                  "name": "value",
                  "type": "any) => void): void",
                  "optional": false
                },
                "presetName": {
                  "name": "presetName",
                  "type": "string): boolean",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string): Promise<boolean>",
                  "optional": true
                },
                "callback": {
                  "name": "callback",
                  "type": "(path: string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 7
            },
            "system": "parameters",
            "module": "parameters"
          }
        ]
      },
      "plot": {
        "ChapterDirectives": [
          {
            "type": "interface",
            "file": "lib\\plot\\bridge-types.ts",
            "definition": {
              "name": "ChapterDirectives",
              "body": "chapterGoal: string;              // 章の目標\r\n  requiredPlotElements: string[];   // 必須のプロット要素\r\n  currentLocation: string;          // 現在の場所\r\n  currentSituation: string;         // 現在の状況\r\n  activeCharacters: CharacterState[]; // 活動中のキャラクター\r\n  worldElementsFocus: string[];     // 焦点を当てる世界設定要素\r\n  thematicFocus: string[];          // 焦点を当てるテーマ的要素\r\n  suggestedScenes?: string[];       // 提案されるシーン（オプション）\r\n  narrativeState?: NarrativeStateInfo; // 物語状態情報\r\n  tension?: number;                 // 緊張度 (1-10)\r\n  emotionalGoal?: string;           // 感情的目標\r\n  emotionalCurve?: EmotionalCurvePoint[]; // 感情曲線",
              "properties": {
                "chapterGoal": {
                  "name": "chapterGoal",
                  "type": "string",
                  "optional": false
                },
                "requiredPlotElements": {
                  "name": "requiredPlotElements",
                  "type": "string[]",
                  "optional": false
                },
                "currentLocation": {
                  "name": "currentLocation",
                  "type": "string",
                  "optional": false
                },
                "currentSituation": {
                  "name": "currentSituation",
                  "type": "string",
                  "optional": false
                },
                "activeCharacters": {
                  "name": "activeCharacters",
                  "type": "CharacterState[]",
                  "optional": false
                },
                "worldElementsFocus": {
                  "name": "worldElementsFocus",
                  "type": "string[]",
                  "optional": false
                },
                "thematicFocus": {
                  "name": "thematicFocus",
                  "type": "string[]",
                  "optional": false
                },
                "suggestedScenes": {
                  "name": "suggestedScenes",
                  "type": "string[]",
                  "optional": true
                },
                "narrativeState": {
                  "name": "narrativeState",
                  "type": "NarrativeStateInfo",
                  "optional": true
                },
                "tension": {
                  "name": "tension",
                  "type": "number",
                  "optional": true
                },
                "emotionalGoal": {
                  "name": "emotionalGoal",
                  "type": "string",
                  "optional": true
                },
                "emotionalCurve": {
                  "name": "emotionalCurve",
                  "type": "EmotionalCurvePoint[]",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 9
            },
            "system": "plot",
            "module": "plot"
          }
        ],
        "CharacterState": [
          {
            "type": "interface",
            "file": "lib\\plot\\bridge-types.ts",
            "definition": {
              "name": "CharacterState",
              "body": "name: string;                     // キャラクター名\r\n  currentState: string;             // 現在の状態\r\n  role: string;                     // 章での役割\r\n  goals?: string[];                 // 目標\r\n  conflicts?: string[];             // 葛藤\r\n  relationshipFocus?: string[];     // 焦点を当てる関係性\r\n  development?: string;             // 発展方向",
              "properties": {
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "currentState": {
                  "name": "currentState",
                  "type": "string",
                  "optional": false
                },
                "role": {
                  "name": "role",
                  "type": "string",
                  "optional": false
                },
                "goals": {
                  "name": "goals",
                  "type": "string[]",
                  "optional": true
                },
                "conflicts": {
                  "name": "conflicts",
                  "type": "string[]",
                  "optional": true
                },
                "relationshipFocus": {
                  "name": "relationshipFocus",
                  "type": "string[]",
                  "optional": true
                },
                "development": {
                  "name": "development",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 28
            },
            "system": "plot",
            "module": "plot"
          }
        ],
        "LocationInfo": [
          {
            "type": "interface",
            "file": "lib\\plot\\bridge-types.ts",
            "definition": {
              "name": "LocationInfo",
              "body": "name: string;                     // 場所の名前\r\n  description: string;              // 場所の説明\r\n  atmosphere: string;               // 雰囲気\r\n  significance: string;             // 重要性",
              "properties": {
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "atmosphere": {
                  "name": "atmosphere",
                  "type": "string",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 42
            },
            "system": "plot",
            "module": "plot"
          }
        ],
        "ThematicElement": [
          {
            "type": "interface",
            "file": "lib\\plot\\bridge-types.ts",
            "definition": {
              "name": "ThematicElement",
              "body": "theme: string;                    // テーマ\r\n  expression: string;               // 表現方法\r\n  significance: string;             // 重要性",
              "properties": {
                "theme": {
                  "name": "theme",
                  "type": "string",
                  "optional": false
                },
                "expression": {
                  "name": "expression",
                  "type": "string",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 53
            },
            "system": "plot",
            "module": "plot"
          }
        ],
        "StoryGenerationContext": [
          {
            "type": "interface",
            "file": "lib\\plot\\bridge-types.ts",
            "definition": {
              "name": "StoryGenerationContext",
              "body": "chapterNumber: number;            // 章番号\r\n  plotElements: {                   // プロット要素\r\n    concrete: any;                  // 具体的プロット\r\n    abstract: any;                  // 抽象的プロット\r\n    midTerm?: any;                  // 中期プロット",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "plotElements": {
                  "name": "plotElements",
                  "type": "{                   // プロット要素",
                  "optional": false
                },
                "concrete": {
                  "name": "concrete",
                  "type": "any",
                  "optional": false
                },
                "abstract": {
                  "name": "abstract",
                  "type": "any",
                  "optional": false
                },
                "midTerm": {
                  "name": "midTerm",
                  "type": "any",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 63
            },
            "system": "plot",
            "module": "plot"
          }
        ],
        "BridgeAnalysisResult": [
          {
            "type": "interface",
            "file": "lib\\plot\\bridge-types.ts",
            "definition": {
              "name": "BridgeAnalysisResult",
              "body": "plotProgressAlignment: number;     // プロット進行の一致度 (0-1)\r\n  suggestedAdjustments: string[];    // 提案される調整\r\n  keyElementsForNext: string[];      // 次に重要な要素\r\n  narrativeDirection: string;        // 物語の方向性\r\n  tensionProjection: number;         // 緊張度の予測 (1-10)\r\n  continuityElements?: string[];     // 継続性を保つべき要素\r\n  recommendedPacing?: string;        // 推奨されるペース",
              "properties": {
                "plotProgressAlignment": {
                  "name": "plotProgressAlignment",
                  "type": "number",
                  "optional": false
                },
                "suggestedAdjustments": {
                  "name": "suggestedAdjustments",
                  "type": "string[]",
                  "optional": false
                },
                "keyElementsForNext": {
                  "name": "keyElementsForNext",
                  "type": "string[]",
                  "optional": false
                },
                "narrativeDirection": {
                  "name": "narrativeDirection",
                  "type": "string",
                  "optional": false
                },
                "tensionProjection": {
                  "name": "tensionProjection",
                  "type": "number",
                  "optional": false
                },
                "continuityElements": {
                  "name": "continuityElements",
                  "type": "string[]",
                  "optional": true
                },
                "recommendedPacing": {
                  "name": "recommendedPacing",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 93
            },
            "system": "plot",
            "module": "plot"
          }
        ],
        "PromptElements": [
          {
            "type": "interface",
            "file": "lib\\plot\\bridge-types.ts",
            "definition": {
              "name": "PromptElements",
              "body": "CHAPTER_GOAL: string;\r\n  REQUIRED_PLOT_ELEMENTS: string;\r\n  CURRENT_LOCATION: string;\r\n  CURRENT_SITUATION: string;\r\n  ACTIVE_CHARACTERS: string;\r\n  WORLD_ELEMENTS_FOCUS: string;\r\n  THEMATIC_FOCUS: string;\r\n  [key: string]: string;            // インデックスシグネチャでその他のプレースホルダーにも対応",
              "properties": {
                "CHAPTER_GOAL": {
                  "name": "CHAPTER_GOAL",
                  "type": "string",
                  "optional": false
                },
                "REQUIRED_PLOT_ELEMENTS": {
                  "name": "REQUIRED_PLOT_ELEMENTS",
                  "type": "string",
                  "optional": false
                },
                "CURRENT_LOCATION": {
                  "name": "CURRENT_LOCATION",
                  "type": "string",
                  "optional": false
                },
                "CURRENT_SITUATION": {
                  "name": "CURRENT_SITUATION",
                  "type": "string",
                  "optional": false
                },
                "ACTIVE_CHARACTERS": {
                  "name": "ACTIVE_CHARACTERS",
                  "type": "string",
                  "optional": false
                },
                "WORLD_ELEMENTS_FOCUS": {
                  "name": "WORLD_ELEMENTS_FOCUS",
                  "type": "string",
                  "optional": false
                },
                "THEMATIC_FOCUS": {
                  "name": "THEMATIC_FOCUS",
                  "type": "string",
                  "optional": false
                },
                "key": {
                  "name": "key",
                  "type": "string]: string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 107
            },
            "system": "plot",
            "module": "plot"
          }
        ],
        "PlotProgressInfo": [
          {
            "type": "interface",
            "file": "lib\\plot\\bridge-types.ts",
            "definition": {
              "name": "PlotProgressInfo",
              "body": "completedElements: string[];      // 完了したプロット要素\r\n  pendingElements: string[];        // 未完了のプロット要素\r\n  progressPercentage: number;       // 進行度割合 (0-1)\r\n  currentFocus: string;             // 現在の焦点\r\n  nextMilestone?: string;           // 次のマイルストーン",
              "properties": {
                "completedElements": {
                  "name": "completedElements",
                  "type": "string[]",
                  "optional": false
                },
                "pendingElements": {
                  "name": "pendingElements",
                  "type": "string[]",
                  "optional": false
                },
                "progressPercentage": {
                  "name": "progressPercentage",
                  "type": "number",
                  "optional": false
                },
                "currentFocus": {
                  "name": "currentFocus",
                  "type": "string",
                  "optional": false
                },
                "nextMilestone": {
                  "name": "nextMilestone",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 122
            },
            "system": "plot",
            "module": "plot"
          }
        ],
        "SectionSystemConfig": [
          {
            "type": "interface",
            "file": "lib\\plot\\section\\index.ts",
            "definition": {
              "name": "SectionSystemConfig",
              "body": "// 記憶システム統合設定\n    memorySystem: {\n        useIntegration: boolean;\n        enableCaching: boolean;\n        enableOptimization: boolean;\n        enableQualityAssurance: boolean;\n        enableAutoBackup: boolean;\n        fallbackToLocalAnalysis: boolean;",
              "properties": {
                "memorySystem": {
                  "name": "memorySystem",
                  "type": "{",
                  "optional": false
                },
                "useIntegration": {
                  "name": "useIntegration",
                  "type": "boolean",
                  "optional": false
                },
                "enableCaching": {
                  "name": "enableCaching",
                  "type": "boolean",
                  "optional": false
                },
                "enableOptimization": {
                  "name": "enableOptimization",
                  "type": "boolean",
                  "optional": false
                },
                "enableQualityAssurance": {
                  "name": "enableQualityAssurance",
                  "type": "boolean",
                  "optional": false
                },
                "enableAutoBackup": {
                  "name": "enableAutoBackup",
                  "type": "boolean",
                  "optional": false
                },
                "fallbackToLocalAnalysis": {
                  "name": "fallbackToLocalAnalysis",
                  "type": "boolean",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 61
            },
            "system": "plot",
            "module": "plot/section"
          }
        ],
        "SectionSystemDiagnostics": [
          {
            "type": "interface",
            "file": "lib\\plot\\section\\index.ts",
            "definition": {
              "name": "SectionSystemDiagnostics",
              "body": "healthy: boolean;\n    systemVersion: string;\n    components: {\n        sectionPlotManager: ComponentStatus;\n        sectionDesigner: ComponentStatus;\n        sectionAnalyzer: ComponentStatus;\n        sectionBridge: ComponentStatus;\n        memorySystem: ComponentStatus;",
              "properties": {
                "healthy": {
                  "name": "healthy",
                  "type": "boolean",
                  "optional": false
                },
                "systemVersion": {
                  "name": "systemVersion",
                  "type": "string",
                  "optional": false
                },
                "components": {
                  "name": "components",
                  "type": "{",
                  "optional": false
                },
                "sectionPlotManager": {
                  "name": "sectionPlotManager",
                  "type": "ComponentStatus",
                  "optional": false
                },
                "sectionDesigner": {
                  "name": "sectionDesigner",
                  "type": "ComponentStatus",
                  "optional": false
                },
                "sectionAnalyzer": {
                  "name": "sectionAnalyzer",
                  "type": "ComponentStatus",
                  "optional": false
                },
                "sectionBridge": {
                  "name": "sectionBridge",
                  "type": "ComponentStatus",
                  "optional": false
                },
                "memorySystem": {
                  "name": "memorySystem",
                  "type": "ComponentStatus",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 101
            },
            "system": "plot",
            "module": "plot/section"
          }
        ],
        "ComponentStatus": [
          {
            "type": "interface",
            "file": "lib\\plot\\section\\index.ts",
            "definition": {
              "name": "ComponentStatus",
              "body": "initialized: boolean;\n    healthy: boolean;\n    lastActivity: string;\n    errorCount: number;\n    operationCount: number;\n    averageResponseTime: number;",
              "properties": {
                "initialized": {
                  "name": "initialized",
                  "type": "boolean",
                  "optional": false
                },
                "healthy": {
                  "name": "healthy",
                  "type": "boolean",
                  "optional": false
                },
                "lastActivity": {
                  "name": "lastActivity",
                  "type": "string",
                  "optional": false
                },
                "errorCount": {
                  "name": "errorCount",
                  "type": "number",
                  "optional": false
                },
                "operationCount": {
                  "name": "operationCount",
                  "type": "number",
                  "optional": false
                },
                "averageResponseTime": {
                  "name": "averageResponseTime",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 120
            },
            "system": "plot",
            "module": "plot/section"
          }
        ],
        "PerformanceMetrics": [
          {
            "type": "interface",
            "file": "lib\\plot\\section\\index.ts",
            "definition": {
              "name": "PerformanceMetrics",
              "body": "totalOperations: number;\n    successfulOperations: number;\n    failedOperations: number;\n    averageProcessingTime: number;\n    memorySystemHits: number;\n    cacheEfficiencyRate: number;\n    qualityScore: number;",
              "properties": {
                "totalOperations": {
                  "name": "totalOperations",
                  "type": "number",
                  "optional": false
                },
                "successfulOperations": {
                  "name": "successfulOperations",
                  "type": "number",
                  "optional": false
                },
                "failedOperations": {
                  "name": "failedOperations",
                  "type": "number",
                  "optional": false
                },
                "averageProcessingTime": {
                  "name": "averageProcessingTime",
                  "type": "number",
                  "optional": false
                },
                "memorySystemHits": {
                  "name": "memorySystemHits",
                  "type": "number",
                  "optional": false
                },
                "cacheEfficiencyRate": {
                  "name": "cacheEfficiencyRate",
                  "type": "number",
                  "optional": false
                },
                "qualityScore": {
                  "name": "qualityScore",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 132
            },
            "system": "plot",
            "module": "plot/section"
          }
        ],
        "SectionPlot": [
          {
            "type": "interface",
            "file": "lib\\plot\\section\\types.ts",
            "definition": {
              "name": "SectionPlot",
              "body": "/** セクションの一意識別子 */\r\n  id: string;\r\n  \r\n  /** 章の範囲 */\r\n  chapterRange: {\r\n    start: number;\r\n    end: number;",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "chapterRange": {
                  "name": "chapterRange",
                  "type": "{",
                  "optional": false
                },
                "start": {
                  "name": "start",
                  "type": "number",
                  "optional": false
                },
                "end": {
                  "name": "end",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 14
            },
            "system": "plot",
            "module": "plot/section"
          }
        ],
        "SectionPlotParams": [
          {
            "type": "interface",
            "file": "lib\\plot\\section\\types.ts",
            "definition": {
              "name": "SectionPlotParams",
              "body": "/** タイトル */\r\n  title: string;\r\n  \r\n  /** 章の範囲 */\r\n  chapterRange: {\r\n    start: number;\r\n    end: number;",
              "properties": {
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "chapterRange": {
                  "name": "chapterRange",
                  "type": "{",
                  "optional": false
                },
                "start": {
                  "name": "start",
                  "type": "number",
                  "optional": false
                },
                "end": {
                  "name": "end",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 47
            },
            "system": "plot",
            "module": "plot/section"
          }
        ],
        "SectionStructure": [
          {
            "type": "interface",
            "file": "lib\\plot\\section\\types.ts",
            "definition": {
              "name": "SectionStructure",
              "body": "/** セクションID */\r\n  id: string;\r\n  \r\n  /** セクションタイトル */\r\n  title: string;\r\n  \r\n  /** セクション番号 */\r\n  number: number;\r\n  \r\n  /** 章範囲 */\r\n  chapterRange: {\r\n    start: number;\r\n    end: number;",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "number": {
                  "name": "number",
                  "type": "number",
                  "optional": false
                },
                "chapterRange": {
                  "name": "chapterRange",
                  "type": "{",
                  "optional": false
                },
                "start": {
                  "name": "start",
                  "type": "number",
                  "optional": false
                },
                "end": {
                  "name": "end",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 86
            },
            "system": "plot",
            "module": "plot/section"
          }
        ],
        "LearningJourneyDesign": [
          {
            "type": "interface",
            "file": "lib\\plot\\section\\types.ts",
            "definition": {
              "name": "LearningJourneyDesign",
              "body": "/** 主要概念 */\r\n  mainConcept: string;\r\n  \r\n  /** 副次的概念 */\r\n  secondaryConcepts: string[];\r\n  \r\n  /** 中心となる学習段階 */\r\n  primaryLearningStage: LearningStage;\r\n  \r\n  /** 副次的学習段階 */\r\n  secondaryLearningStages: LearningStage[];\r\n  \r\n  /** 学習目標 */\r\n  learningObjectives: {\r\n    /** 認知的目標 */\r\n    cognitive: string;\r\n    \r\n    /** 感情的目標 */\r\n    affective: string;\r\n    \r\n    /** 行動的目標 */\r\n    behavioral: string;",
              "properties": {
                "mainConcept": {
                  "name": "mainConcept",
                  "type": "string",
                  "optional": false
                },
                "secondaryConcepts": {
                  "name": "secondaryConcepts",
                  "type": "string[]",
                  "optional": false
                },
                "primaryLearningStage": {
                  "name": "primaryLearningStage",
                  "type": "LearningStage",
                  "optional": false
                },
                "secondaryLearningStages": {
                  "name": "secondaryLearningStages",
                  "type": "LearningStage[]",
                  "optional": false
                },
                "learningObjectives": {
                  "name": "learningObjectives",
                  "type": "{",
                  "optional": false
                },
                "cognitive": {
                  "name": "cognitive",
                  "type": "string",
                  "optional": false
                },
                "affective": {
                  "name": "affective",
                  "type": "string",
                  "optional": false
                },
                "behavioral": {
                  "name": "behavioral",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 119
            },
            "system": "plot",
            "module": "plot/section"
          }
        ],
        "EmotionalCurvePoint": [
          {
            "type": "interface",
            "file": "lib\\plot\\section\\types.ts",
            "definition": {
              "name": "EmotionalCurvePoint",
              "body": "chapter: number;\r\n    emotion: string;\r\n    tension: number;",
              "properties": {
                "chapter": {
                  "name": "chapter",
                  "type": "number",
                  "optional": false
                },
                "emotion": {
                  "name": "emotion",
                  "type": "string",
                  "optional": false
                },
                "tension": {
                  "name": "tension",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 172
            },
            "system": "plot",
            "module": "plot/section"
          }
        ],
        "EmotionalDesign": [
          {
            "type": "interface",
            "file": "lib\\plot\\section\\types.ts",
            "definition": {
              "name": "EmotionalDesign",
              "body": "/** 感情の弧 */\r\n  emotionalArc: {\r\n    /** 開始時のトーン */\r\n    opening: EmotionalTone;\r\n    \r\n    /** 中間点のトーン */\r\n    midpoint: EmotionalTone;\r\n    \r\n    /** 結末のトーン */\r\n    conclusion: EmotionalTone;",
              "properties": {
                "emotionalArc": {
                  "name": "emotionalArc",
                  "type": "{",
                  "optional": false
                },
                "opening": {
                  "name": "opening",
                  "type": "EmotionalTone",
                  "optional": false
                },
                "midpoint": {
                  "name": "midpoint",
                  "type": "EmotionalTone",
                  "optional": false
                },
                "conclusion": {
                  "name": "conclusion",
                  "type": "EmotionalTone",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 182
            },
            "system": "plot",
            "module": "plot/section"
          }
        ],
        "CharacterDesign": [
          {
            "type": "interface",
            "file": "lib\\plot\\section\\types.ts",
            "definition": {
              "name": "CharacterDesign",
              "body": "/** 主要キャラクター */\r\n  mainCharacters: string[];\r\n  \r\n  /** キャラクターの役割 */\r\n  characterRoles: Record<string, {\r\n    /** 学習における役割 */\r\n    learningRole: 'mentor' | 'challenger' | 'reflector' | 'supporter';\r\n    \r\n    /** 物語機能 */\r\n    narrativeFunction: string;",
              "properties": {
                "mainCharacters": {
                  "name": "mainCharacters",
                  "type": "string[]",
                  "optional": false
                },
                "characterRoles": {
                  "name": "characterRoles",
                  "type": "Record<string",
                  "optional": false
                },
                "learningRole": {
                  "name": "learningRole",
                  "type": "'mentor' | 'challenger' | 'reflector' | 'supporter'",
                  "optional": false
                },
                "narrativeFunction": {
                  "name": "narrativeFunction",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 230
            },
            "system": "plot",
            "module": "plot/section"
          }
        ],
        "NarrativeStructureDesign": [
          {
            "type": "interface",
            "file": "lib\\plot\\section\\types.ts",
            "definition": {
              "name": "NarrativeStructureDesign",
              "body": "/** 重要シーン */\r\n  keyScenes: Array<{\r\n    /** 説明 */\r\n    description: string;\r\n    \r\n    /** 目的 */\r\n    purpose: string;\r\n    \r\n    /** 相対位置 */\r\n    relativePosition: number;\r\n    \r\n    /** 学習との関連 */\r\n    learningConnection: string;",
              "properties": {
                "keyScenes": {
                  "name": "keyScenes",
                  "type": "Array<{",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "purpose": {
                  "name": "purpose",
                  "type": "string",
                  "optional": false
                },
                "relativePosition": {
                  "name": "relativePosition",
                  "type": "number",
                  "optional": false
                },
                "learningConnection": {
                  "name": "learningConnection",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 278
            },
            "system": "plot",
            "module": "plot/section"
          }
        ],
        "MetaInformation": [
          {
            "type": "interface",
            "file": "lib\\plot\\section\\types.ts",
            "definition": {
              "name": "MetaInformation",
              "body": "/** 作成日時 */\r\n  created: string;\r\n  \r\n  /** 最終更新日時 */\r\n  lastModified: string;\r\n  \r\n  /** バージョン */\r\n  version: number;\r\n  \r\n  /** 編集者メモ */\r\n  editorNotes: string;\r\n  \r\n  /** 生成に使用したプロンプト */\r\n  generationPrompts: string[];\r\n  \r\n  /** 全体ストーリーとの関係 */\r\n  relationToOverallStory: string;",
              "properties": {
                "created": {
                  "name": "created",
                  "type": "string",
                  "optional": false
                },
                "lastModified": {
                  "name": "lastModified",
                  "type": "string",
                  "optional": false
                },
                "version": {
                  "name": "version",
                  "type": "number",
                  "optional": false
                },
                "editorNotes": {
                  "name": "editorNotes",
                  "type": "string",
                  "optional": false
                },
                "generationPrompts": {
                  "name": "generationPrompts",
                  "type": "string[]",
                  "optional": false
                },
                "relationToOverallStory": {
                  "name": "relationToOverallStory",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 341
            },
            "system": "plot",
            "module": "plot/section"
          }
        ],
        "CoherenceAnalysis": [
          {
            "type": "interface",
            "file": "lib\\plot\\section\\types.ts",
            "definition": {
              "name": "CoherenceAnalysis",
              "body": "/** 全体的な一貫性スコア (0-10) */\r\n  overallScore: number;\r\n  \r\n  /** 問題のある領域 */\r\n  problematicAreas: Array<{\r\n    /** 問題の種類 */\r\n    type: 'theme' | 'character' | 'plot' | 'setting' | 'tone';\r\n    \r\n    /** 説明 */\r\n    description: string;\r\n    \r\n    /** 深刻度 (0-10) */\r\n    severity: number;",
              "properties": {
                "overallScore": {
                  "name": "overallScore",
                  "type": "number",
                  "optional": false
                },
                "problematicAreas": {
                  "name": "problematicAreas",
                  "type": "Array<{",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "'theme' | 'character' | 'plot' | 'setting' | 'tone'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "severity": {
                  "name": "severity",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 371
            },
            "system": "plot",
            "module": "plot/section"
          }
        ],
        "ObjectiveProgress": [
          {
            "type": "interface",
            "file": "lib\\plot\\section\\types.ts",
            "definition": {
              "name": "ObjectiveProgress",
              "body": "/** 認知的目標の達成度 (0-1) */\r\n  cognitiveProgress: number;\r\n  \r\n  /** 感情的目標の達成度 (0-1) */\r\n  affectiveProgress: number;\r\n  \r\n  /** 行動的目標の達成度 (0-1) */\r\n  behavioralProgress: number;\r\n  \r\n  /** 具体的な例 */\r\n  examples: Array<{\r\n    /** 目標タイプ */\r\n    objectiveType: 'cognitive' | 'affective' | 'behavioral';\r\n    \r\n    /** 例の説明 */\r\n    description: string;\r\n    \r\n    /** 章番号 */\r\n    chapterNumber: number;",
              "properties": {
                "cognitiveProgress": {
                  "name": "cognitiveProgress",
                  "type": "number",
                  "optional": false
                },
                "affectiveProgress": {
                  "name": "affectiveProgress",
                  "type": "number",
                  "optional": false
                },
                "behavioralProgress": {
                  "name": "behavioralProgress",
                  "type": "number",
                  "optional": false
                },
                "examples": {
                  "name": "examples",
                  "type": "Array<{",
                  "optional": false
                },
                "objectiveType": {
                  "name": "objectiveType",
                  "type": "'cognitive' | 'affective' | 'behavioral'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 395
            },
            "system": "plot",
            "module": "plot/section"
          }
        ],
        "EmotionalArcProgress": [
          {
            "type": "interface",
            "file": "lib\\plot\\section\\types.ts",
            "definition": {
              "name": "EmotionalArcProgress",
              "body": "/** 全体的な実現度 (0-1) */\r\n  overallRealization: number;\r\n  \r\n  /** 感情的弧の段階ごとの実現度 */\r\n  stageRealization: {\r\n    /** 開始部分の実現度 (0-1) */\r\n    opening: number;\r\n    \r\n    /** 中間点の実現度 (0-1) */\r\n    midpoint: number;\r\n    \r\n    /** 結末部分の実現度 (0-1) */\r\n    conclusion: number;",
              "properties": {
                "overallRealization": {
                  "name": "overallRealization",
                  "type": "number",
                  "optional": false
                },
                "stageRealization": {
                  "name": "stageRealization",
                  "type": "{",
                  "optional": false
                },
                "opening": {
                  "name": "opening",
                  "type": "number",
                  "optional": false
                },
                "midpoint": {
                  "name": "midpoint",
                  "type": "number",
                  "optional": false
                },
                "conclusion": {
                  "name": "conclusion",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 425
            },
            "system": "plot",
            "module": "plot/section"
          }
        ],
        "ImprovementSuggestion": [
          {
            "type": "interface",
            "file": "lib\\plot\\section\\types.ts",
            "definition": {
              "name": "ImprovementSuggestion",
              "body": "/** 改善領域 */\r\n  area: 'theme' | 'character' | 'learning' | 'emotion' | 'plot' | 'pacing';\r\n  \r\n  /** 提案内容 */\r\n  suggestion: string;\r\n  \r\n  /** 対象章範囲 */\r\n  targetChapters: number[];\r\n  \r\n  /** 優先度 (1-5) */\r\n  priority: number;",
              "properties": {
                "area": {
                  "name": "area",
                  "type": "'theme' | 'character' | 'learning' | 'emotion' | 'plot' | 'pacing'",
                  "optional": false
                },
                "suggestion": {
                  "name": "suggestion",
                  "type": "string",
                  "optional": false
                },
                "targetChapters": {
                  "name": "targetChapters",
                  "type": "number[]",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 485
            },
            "system": "plot",
            "module": "plot/section"
          }
        ],
        "ChapterOutline": [
          {
            "type": "interface",
            "file": "lib\\plot\\section\\types.ts",
            "definition": {
              "name": "ChapterOutline",
              "body": "/** 章番号 */\r\n  chapterNumber: number;\r\n  \r\n  /** タイトル */\r\n  title: string;\r\n  \r\n  /** 概要 */\r\n  summary: string;\r\n  \r\n  /** 学習段階 */\r\n  learningStage: LearningStage;\r\n  \r\n  /** 感情トーン */\r\n  emotionalTone: EmotionalTone;\r\n  \r\n  /** 重要イベント */\r\n  keyEvents: string[];",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "summary": {
                  "name": "summary",
                  "type": "string",
                  "optional": false
                },
                "learningStage": {
                  "name": "learningStage",
                  "type": "LearningStage",
                  "optional": false
                },
                "emotionalTone": {
                  "name": "emotionalTone",
                  "type": "EmotionalTone",
                  "optional": false
                },
                "keyEvents": {
                  "name": "keyEvents",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 503
            },
            "system": "plot",
            "module": "plot/section"
          }
        ],
        "EmotionalTone": [
          {
            "type": "type",
            "file": "lib\\plot\\section\\types.ts",
            "definition": {
              "name": "EmotionalTone",
              "definition": "string",
              "isUnion": false,
              "isIntersection": false,
              "isGeneric": false,
              "lineNumber": 365
            },
            "system": "plot",
            "module": "plot/section"
          }
        ],
        "ConcretePlotPoint": [
          {
            "type": "interface",
            "file": "lib\\plot\\types.ts",
            "definition": {
              "name": "ConcretePlotPoint",
              "body": "chapterRange: [number, number];    // 適用チャプター範囲\r\n    title: string;                     // プロットタイトル\r\n    summary: string;                   // 概要\r\n\r\n    // 追加するフィールド\r\n    phase?: string;                    // 物語フェーズ\r\n    storyArc?: string;                 // このプロットが属するストーリーアーク\r\n    storyGoal?: string;                // この範囲での物語目標\r\n    mustHaveOutcome?: string;          // 必ず達成すべき結果\r\n\r\n    keyEvents: string[];               // 重要イベント\r\n    characterFocus: string[];          // 注目キャラクター\r\n    requiredElements: string[];        // 必須要素\r\n    foreshadowing?: string[];          // 伏線（オプション）",
              "properties": {
                "chapterRange": {
                  "name": "chapterRange",
                  "type": "[number",
                  "optional": false
                },
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "summary": {
                  "name": "summary",
                  "type": "string",
                  "optional": false
                },
                "phase": {
                  "name": "phase",
                  "type": "string",
                  "optional": true
                },
                "storyArc": {
                  "name": "storyArc",
                  "type": "string",
                  "optional": true
                },
                "storyGoal": {
                  "name": "storyGoal",
                  "type": "string",
                  "optional": true
                },
                "mustHaveOutcome": {
                  "name": "mustHaveOutcome",
                  "type": "string",
                  "optional": true
                },
                "keyEvents": {
                  "name": "keyEvents",
                  "type": "string[]",
                  "optional": false
                },
                "characterFocus": {
                  "name": "characterFocus",
                  "type": "string[]",
                  "optional": false
                },
                "requiredElements": {
                  "name": "requiredElements",
                  "type": "string[]",
                  "optional": false
                },
                "foreshadowing": {
                  "name": "foreshadowing",
                  "type": "string[]",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 18
            },
            "system": "plot",
            "module": "plot"
          }
        ],
        "AbstractPlotGuideline": [
          {
            "type": "interface",
            "file": "lib\\plot\\types.ts",
            "definition": {
              "name": "AbstractPlotGuideline",
              "body": "phase: string;                     // 物語のフェーズ\r\n    theme: string;                     // テーマ\r\n    emotionalTone: string;             // 感情的トーン\r\n\r\n    // 追加するフィールド\r\n    thematicMessage?: string;          // このフェーズで伝えたいメッセージ\r\n    phasePurpose?: string;             // このフェーズの目的\r\n\r\n    potentialDirections: string[];     // 可能性のある方向性\r\n    prohibitedElements: string[];      // 避けるべき要素\r\n    chapterRange?: [number, number];   // 適用チャプター範囲（オプション）\r\n    keyCharacters?: string[];          // 焦点を当てるキャラクター（オプション）",
              "properties": {
                "phase": {
                  "name": "phase",
                  "type": "string",
                  "optional": false
                },
                "theme": {
                  "name": "theme",
                  "type": "string",
                  "optional": false
                },
                "emotionalTone": {
                  "name": "emotionalTone",
                  "type": "string",
                  "optional": false
                },
                "thematicMessage": {
                  "name": "thematicMessage",
                  "type": "string",
                  "optional": true
                },
                "phasePurpose": {
                  "name": "phasePurpose",
                  "type": "string",
                  "optional": true
                },
                "potentialDirections": {
                  "name": "potentialDirections",
                  "type": "string[]",
                  "optional": false
                },
                "prohibitedElements": {
                  "name": "prohibitedElements",
                  "type": "string[]",
                  "optional": false
                },
                "chapterRange": {
                  "name": "chapterRange",
                  "type": "[number",
                  "optional": true
                },
                "keyCharacters": {
                  "name": "keyCharacters",
                  "type": "string[]",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 38
            },
            "system": "plot",
            "module": "plot"
          }
        ],
        "MediumPlot": [
          {
            "type": "interface",
            "file": "lib\\plot\\types.ts",
            "definition": {
              "name": "MediumPlot",
              "body": "title: string;\r\n    description: string;\r\n    version: number;\r\n    sections: any[];\r\n    learning_elements: {\r\n      name: string;\r\n      description: string;\r\n      section: number;",
              "properties": {
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "version": {
                  "name": "version",
                  "type": "number",
                  "optional": false
                },
                "sections": {
                  "name": "sections",
                  "type": "any[]",
                  "optional": false
                },
                "learning_elements": {
                  "name": "learning_elements",
                  "type": "{",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "section": {
                  "name": "section",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 56
            },
            "system": "plot",
            "module": "plot"
          }
        ],
        "HierarchicalConsistencyResult": [
          {
            "type": "interface",
            "file": "lib\\plot\\types.ts",
            "definition": {
              "name": "HierarchicalConsistencyResult",
              "body": "consistent: boolean;\r\n    guidance: string;\r\n    issues: Array<{\r\n        level: 'concrete' | 'midTerm' | 'abstract';\r\n        memoryType: 'short' | 'mid' | 'long';\r\n        description: string;\r\n        severity: \"LOW\" | \"MEDIUM\" | \"HIGH\";\r\n        suggestion: string;",
              "properties": {
                "consistent": {
                  "name": "consistent",
                  "type": "boolean",
                  "optional": false
                },
                "guidance": {
                  "name": "guidance",
                  "type": "string",
                  "optional": false
                },
                "issues": {
                  "name": "issues",
                  "type": "Array<{",
                  "optional": false
                },
                "level": {
                  "name": "level",
                  "type": "'concrete' | 'midTerm' | 'abstract'",
                  "optional": false
                },
                "memoryType": {
                  "name": "memoryType",
                  "type": "'short' | 'mid' | 'long'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "severity": {
                  "name": "severity",
                  "type": "\"LOW\" | \"MEDIUM\" | \"HIGH\"",
                  "optional": false
                },
                "suggestion": {
                  "name": "suggestion",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 77
            },
            "system": "plot",
            "module": "plot"
          }
        ],
        "PlotStrategy": [
          {
            "type": "interface",
            "file": "lib\\plot\\types.ts",
            "definition": {
              "name": "PlotStrategy",
              "body": "globalStrategy: {\r\n        preferredMode: \"concrete\" | \"abstract\" | \"mixed\";\r\n        abstractRatio: number;         // 0-1の間の値\r\n        plotComplexity: \"low\" | \"medium\" | \"high\";",
              "properties": {
                "globalStrategy": {
                  "name": "globalStrategy",
                  "type": "{",
                  "optional": false
                },
                "preferredMode": {
                  "name": "preferredMode",
                  "type": "\"concrete\" | \"abstract\" | \"mixed\"",
                  "optional": false
                },
                "abstractRatio": {
                  "name": "abstractRatio",
                  "type": "number",
                  "optional": false
                },
                "plotComplexity": {
                  "name": "plotComplexity",
                  "type": "\"low\" | \"medium\" | \"high\"",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 92
            },
            "system": "plot",
            "module": "plot"
          }
        ],
        "PlotContext": [
          {
            "type": "interface",
            "file": "lib\\plot\\types.ts",
            "definition": {
              "name": "PlotContext",
              "body": "mode: PlotMode;                    // 現在のプロットモード\r\n    modeInstructions: string;          // モードに応じた指示\r\n    currentArc: {                      // 現在のアーク情報\r\n        name: string;\r\n        theme: string;\r\n        approximateChapters: [number, number];",
              "properties": {
                "mode": {
                  "name": "mode",
                  "type": "PlotMode",
                  "optional": false
                },
                "modeInstructions": {
                  "name": "modeInstructions",
                  "type": "string",
                  "optional": false
                },
                "currentArc": {
                  "name": "currentArc",
                  "type": "{                      // 現在のアーク情報",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "theme": {
                  "name": "theme",
                  "type": "string",
                  "optional": false
                },
                "approximateChapters": {
                  "name": "approximateChapters",
                  "type": "[number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 113
            },
            "system": "plot",
            "module": "plot"
          }
        ],
        "WorldSettings": [
          {
            "type": "interface",
            "file": "lib\\plot\\types.ts",
            "definition": {
              "name": "WorldSettings",
              "body": "description: string;\r\n    regions?: any[];\r\n    history?: any[];\r\n    rules?: any[];\r\n    genre?: string;\r\n\r\n    magicSystem?: any;\r\n    technology?: any;\r\n    socialSystem?: any;\r\n    supernatural?: any[];\r\n    uniqueElements?: any[];\r\n    \r\n    // ビジネスジャンル向けの追加フィールド\r\n    businessSystem?: {\r\n        description?: string;\r\n        rules?: string[];\r\n        [key: string]: any;",
              "properties": {
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": true
                },
                "regions": {
                  "name": "regions",
                  "type": "any[]",
                  "optional": true
                },
                "history": {
                  "name": "history",
                  "type": "any[]",
                  "optional": true
                },
                "rules": {
                  "name": "rules",
                  "type": "string[]",
                  "optional": true
                },
                "genre": {
                  "name": "genre",
                  "type": "string",
                  "optional": true
                },
                "magicSystem": {
                  "name": "magicSystem",
                  "type": "any",
                  "optional": true
                },
                "technology": {
                  "name": "technology",
                  "type": "any",
                  "optional": true
                },
                "socialSystem": {
                  "name": "socialSystem",
                  "type": "any",
                  "optional": true
                },
                "supernatural": {
                  "name": "supernatural",
                  "type": "any[]",
                  "optional": true
                },
                "uniqueElements": {
                  "name": "uniqueElements",
                  "type": "any[]",
                  "optional": true
                },
                "businessSystem": {
                  "name": "businessSystem",
                  "type": "{",
                  "optional": true
                },
                "key": {
                  "name": "key",
                  "type": "string]: any",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 128
            },
            "system": "plot",
            "module": "plot"
          }
        ],
        "ThemeSettings": [
          {
            "type": "interface",
            "file": "lib\\plot\\types.ts",
            "definition": {
              "name": "ThemeSettings",
              "body": "description: string;\r\n    mainThemes?: string[];\r\n    subThemes?: string[];\r\n    evolution?: any[];\r\n    implementation?: any;\r\n    oppositions?: any[];\r\n    message?: any;\r\n    conclusion?: any;\r\n    customFields?: any;",
              "properties": {
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "mainThemes": {
                  "name": "mainThemes",
                  "type": "string[]",
                  "optional": true
                },
                "subThemes": {
                  "name": "subThemes",
                  "type": "string[]",
                  "optional": true
                },
                "evolution": {
                  "name": "evolution",
                  "type": "any[]",
                  "optional": true
                },
                "implementation": {
                  "name": "implementation",
                  "type": "any",
                  "optional": true
                },
                "oppositions": {
                  "name": "oppositions",
                  "type": "any[]",
                  "optional": true
                },
                "message": {
                  "name": "message",
                  "type": "any",
                  "optional": true
                },
                "conclusion": {
                  "name": "conclusion",
                  "type": "any",
                  "optional": true
                },
                "customFields": {
                  "name": "customFields",
                  "type": "any",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 155
            },
            "system": "plot",
            "module": "plot"
          }
        ],
        "FormattedWorldAndTheme": [
          {
            "type": "interface",
            "file": "lib\\plot\\types.ts",
            "definition": {
              "name": "FormattedWorldAndTheme",
              "body": "worldSettings: string;\r\n    theme: string;\r\n    worldSettingsDetailed?: WorldSettings;\r\n    themeSettingsDetailed?: ThemeSettings;",
              "properties": {
                "worldSettings": {
                  "name": "worldSettings",
                  "type": "string",
                  "optional": false
                },
                "theme": {
                  "name": "theme",
                  "type": "string",
                  "optional": false
                },
                "worldSettingsDetailed": {
                  "name": "worldSettingsDetailed",
                  "type": "WorldSettings",
                  "optional": true
                },
                "themeSettingsDetailed": {
                  "name": "themeSettingsDetailed",
                  "type": "ThemeSettings",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 170
            },
            "system": "plot",
            "module": "plot"
          }
        ],
        "PlotMode": [
          {
            "type": "enum",
            "file": "lib\\plot\\types.ts",
            "definition": {
              "name": "PlotMode",
              "body": "CONCRETE = \"CONCRETE\",  // 具体的プロット\r\n    MIDTERM = \"MIDTERM\",\r\n    ABSTRACT = \"ABSTRACT\", // 抽象的プロット\r\n    HYBRID = \"HYBRID\",     // ハイブリッド\r\n    TRANSITION_TO_ABSTRACT = \"TRANSITION_TO_ABSTRACT\", // 具体→抽象への移行\r\n    TRANSITION_TO_CONCRETE = \"TRANSITION_TO_CONCRETE\"  // 抽象→具体への移行",
              "values": [
                {
                  "name": "CONCRETE",
                  "value": "\"CONCRETE\""
                },
                {
                  "name": "// 具体的プロット\r\n    MIDTERM",
                  "value": "\"MIDTERM\""
                },
                {
                  "name": "ABSTRACT",
                  "value": "\"ABSTRACT\""
                },
                {
                  "name": "// 抽象的プロット\r\n    HYBRID",
                  "value": "\"HYBRID\""
                },
                {
                  "name": "// ハイブリッド\r\n    TRANSITION_TO_ABSTRACT",
                  "value": "\"TRANSITION_TO_ABSTRACT\""
                },
                {
                  "name": "// 具体→抽象への移行\r\n    TRANSITION_TO_CONCRETE",
                  "value": "\"TRANSITION_TO_CONCRETE\"  // 抽象→具体への移行"
                }
              ],
              "lineNumber": 6
            },
            "system": "plot",
            "module": "plot"
          }
        ]
      },
      "storage": {
        "FileMetadata": [
          {
            "type": "interface",
            "file": "lib\\storage\\types.ts",
            "definition": {
              "name": "FileMetadata",
              "body": "/**\r\n     * ファイルパス\r\n     * \r\n     * ストレージプロバイダーのベースディレクトリからの相対パスです。\r\n     * \r\n     * @type {string",
              "properties": {},
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 42
            },
            "system": "storage",
            "module": "storage"
          }
        ],
        "StorageProvider": [
          {
            "type": "interface",
            "file": "lib\\storage\\types.ts",
            "definition": {
              "name": "StorageProvider",
              "body": "/**\r\n     * ファイルを読み込みます\r\n     * \r\n     * 指定されたパスのファイルを読み込み、その内容を文字列として返します。\r\n     * ファイルが存在しない場合は例外をスローします。\r\n     * \r\n     * @param {string",
              "properties": {},
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 116
            },
            "system": "storage",
            "module": "storage"
          }
        ],
        "GitHubStorageOptions": [
          {
            "type": "interface",
            "file": "lib\\storage\\types.ts",
            "definition": {
              "name": "GitHubStorageOptions",
              "body": "/**\r\n     * GitHubパーソナルアクセストークン\r\n     * \r\n     * GitHub APIにアクセスするための認証トークンです。\r\n     * リポジトリの読み書き権限が必要です。\r\n     * \r\n     * @type {string",
              "properties": {},
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 373
            },
            "system": "storage",
            "module": "storage"
          }
        ],
        "LocalStorageOptions": [
          {
            "type": "interface",
            "file": "lib\\storage\\types.ts",
            "definition": {
              "name": "LocalStorageOptions",
              "body": "/**\r\n     * ベースディレクトリパス\r\n     * \r\n     * すべてのファイル操作の基準となるディレクトリパスです。\r\n     * すべてのファイルパスはこのディレクトリからの相対パスとして解釈されます。\r\n     * \r\n     * @type {string",
              "properties": {},
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 441
            },
            "system": "storage",
            "module": "storage"
          }
        ]
      }
    },
    "typeDuplicationAnalysis": {
      "exactDuplicates": {
        "ImplementationStep_analysis_memory": {
          "typeName": "ImplementationStep",
          "system1": {
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\coordinators\\interfaces.ts",
                "definition": {
                  "name": "ImplementationStep",
                  "body": "step: number;\r\n  phase: 'preparation' | 'core_implementation' | 'refinement' | 'validation';\r\n  suggestions: string[];\r\n  description: string;\r\n  estimatedEffort: 'low' | 'medium' | 'high';",
                  "properties": {
                    "step": {
                      "name": "step",
                      "type": "number",
                      "optional": false
                    },
                    "phase": {
                      "name": "phase",
                      "type": "'preparation' | 'core_implementation' | 'refinement' | 'validation'",
                      "optional": false
                    },
                    "suggestions": {
                      "name": "suggestions",
                      "type": "string[]",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    },
                    "estimatedEffort": {
                      "name": "estimatedEffort",
                      "type": "'low' | 'medium' | 'high'",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 253
                },
                "system": "analysis",
                "module": "analysis/coordinators"
              }
            ]
          },
          "system2": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\system-types.ts",
                "definition": {
                  "name": "ImplementationStep",
                  "body": "stepId: string;\r\n    name: string;\r\n    description: string;\r\n    order: number;\r\n    duration: string;\r\n    dependencies: string[];\r\n    deliverables: string[];\r\n    validationCriteria: string[];",
                  "properties": {
                    "stepId": {
                      "name": "stepId",
                      "type": "string",
                      "optional": false
                    },
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    },
                    "order": {
                      "name": "order",
                      "type": "number",
                      "optional": false
                    },
                    "duration": {
                      "name": "duration",
                      "type": "string",
                      "optional": false
                    },
                    "dependencies": {
                      "name": "dependencies",
                      "type": "string[]",
                      "optional": false
                    },
                    "deliverables": {
                      "name": "deliverables",
                      "type": "string[]",
                      "optional": false
                    },
                    "validationCriteria": {
                      "name": "validationCriteria",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 741
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          }
        },
        "TensionPacingRecommendation_analysis_memory": {
          "typeName": "TensionPacingRecommendation",
          "system1": {
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\coordinators\\interfaces.ts",
                "definition": {
                  "name": "TensionPacingRecommendation",
                  "body": "tension: {\r\n    recommendedTension: number;\r\n    reason: string;\r\n    direction: 'increase' | 'decrease' | 'maintain';",
                  "properties": {
                    "tension": {
                      "name": "tension",
                      "type": "{",
                      "optional": false
                    },
                    "recommendedTension": {
                      "name": "recommendedTension",
                      "type": "number",
                      "optional": false
                    },
                    "reason": {
                      "name": "reason",
                      "type": "string",
                      "optional": false
                    },
                    "direction": {
                      "name": "direction",
                      "type": "'increase' | 'decrease' | 'maintain'",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 524
                },
                "system": "analysis",
                "module": "analysis/coordinators"
              },
              {
                "type": "interface",
                "file": "lib\\analysis\\enhancement\\tension\\interfaces.ts",
                "definition": {
                  "name": "TensionPacingRecommendation",
                  "body": "/** テンション推奨 */\r\n  tension: TensionRecommendation;\r\n  /** ペーシング推奨 */\r\n  pacing: PacingRecommendation;",
                  "properties": {
                    "tension": {
                      "name": "tension",
                      "type": "TensionRecommendation",
                      "optional": false
                    },
                    "pacing": {
                      "name": "pacing",
                      "type": "PacingRecommendation",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 33
                },
                "system": "analysis",
                "module": "analysis/enhancement/tension"
              }
            ]
          },
          "system2": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "TensionPacingRecommendation",
                  "body": "tension: TensionRecommendation;\r\n    pacing: PacingRecommendation;",
                  "properties": {
                    "tension": {
                      "name": "tension",
                      "type": "TensionRecommendation",
                      "optional": false
                    },
                    "pacing": {
                      "name": "pacing",
                      "type": "PacingRecommendation",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 366
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          }
        },
        "ThemeResonanceAnalysis_analysis_memory": {
          "typeName": "ThemeResonanceAnalysis",
          "system1": {
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\core\\types.ts",
                "definition": {
                  "name": "ThemeResonanceAnalysis",
                  "body": "/**\r\n     * 各テーマの分析情報\r\n     */\r\n    themes?: {\r\n      [themeName: string]: {\r\n        /**\r\n         * 明示的な言及（テキスト内の直接的な表現）\r\n         */\r\n        explicitMentions?: string[];\r\n        \r\n        /**\r\n         * 暗示的な表現（テキスト内の間接的な表現）\r\n         */\r\n        implicitExpressions?: string[];\r\n        \r\n        /**\r\n         * テーマの強度（0-1）\r\n         */\r\n        strength?: number;\r\n        \r\n        /**\r\n         * テーマの表現方法\r\n         */\r\n        expressionMethods?: string[];\r\n        \r\n        /**\r\n         * 関連するテーマ\r\n         */\r\n        relatedThemes?: string[];",
                  "properties": {
                    "themes": {
                      "name": "themes",
                      "type": "{",
                      "optional": true
                    },
                    "themeName": {
                      "name": "themeName",
                      "type": "string]: {",
                      "optional": false
                    },
                    "explicitMentions": {
                      "name": "explicitMentions",
                      "type": "string[]",
                      "optional": true
                    },
                    "implicitExpressions": {
                      "name": "implicitExpressions",
                      "type": "string[]",
                      "optional": true
                    },
                    "strength": {
                      "name": "strength",
                      "type": "number",
                      "optional": true
                    },
                    "expressionMethods": {
                      "name": "expressionMethods",
                      "type": "string[]",
                      "optional": true
                    },
                    "relatedThemes": {
                      "name": "relatedThemes",
                      "type": "string[]",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 63
                },
                "system": "analysis",
                "module": "analysis/core"
              }
            ]
          },
          "system2": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "ThemeResonanceAnalysis",
                  "body": "strength: number;\r\n    dominantExpressions: string[];\r\n    resonanceHistory?: {\r\n        chapter: number;\r\n        strength: number;\r\n        dominantExpressions: string[];",
                  "properties": {
                    "strength": {
                      "name": "strength",
                      "type": "number",
                      "optional": false
                    },
                    "dominantExpressions": {
                      "name": "dominantExpressions",
                      "type": "string[]",
                      "optional": false
                    },
                    "resonanceHistory": {
                      "name": "resonanceHistory",
                      "type": "{",
                      "optional": true
                    },
                    "chapter": {
                      "name": "chapter",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 490
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          }
        },
        "TensionRecommendation_analysis_memory": {
          "typeName": "TensionRecommendation",
          "system1": {
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\enhancement\\tension\\interfaces.ts",
                "definition": {
                  "name": "TensionRecommendation",
                  "body": "/** 推奨テンション値 (0-1) */\r\n  recommendedTension: number;\r\n  /** 推奨理由 */\r\n  reason: string;\r\n  /** 方向性 */\r\n  direction: \"increase\" | \"decrease\" | \"maintain\" | \"establish\";",
                  "properties": {
                    "recommendedTension": {
                      "name": "recommendedTension",
                      "type": "number",
                      "optional": false
                    },
                    "reason": {
                      "name": "reason",
                      "type": "string",
                      "optional": false
                    },
                    "direction": {
                      "name": "direction",
                      "type": "\"increase\" | \"decrease\" | \"maintain\" | \"establish\"",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 11
                },
                "system": "analysis",
                "module": "analysis/enhancement/tension"
              }
            ]
          },
          "system2": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "TensionRecommendation",
                  "body": "recommendedTension: number;\r\n    reason: string;\r\n    direction: \"increase\" | \"decrease\" | \"maintain\" | \"establish\";",
                  "properties": {
                    "recommendedTension": {
                      "name": "recommendedTension",
                      "type": "number",
                      "optional": false
                    },
                    "reason": {
                      "name": "reason",
                      "type": "string",
                      "optional": false
                    },
                    "direction": {
                      "name": "direction",
                      "type": "\"increase\" | \"decrease\" | \"maintain\" | \"establish\"",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 347
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          }
        },
        "PacingRecommendation_analysis_memory": {
          "typeName": "PacingRecommendation",
          "system1": {
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\enhancement\\tension\\interfaces.ts",
                "definition": {
                  "name": "PacingRecommendation",
                  "body": "/** 推奨ペーシング値 (0-1) */\r\n  recommendedPacing: number;\r\n  /** 説明 */\r\n  description: string;",
                  "properties": {
                    "recommendedPacing": {
                      "name": "recommendedPacing",
                      "type": "number",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 23
                },
                "system": "analysis",
                "module": "analysis/enhancement/tension"
              }
            ]
          },
          "system2": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "PacingRecommendation",
                  "body": "recommendedPacing: number;\r\n    description: string;",
                  "properties": {
                    "recommendedPacing": {
                      "name": "recommendedPacing",
                      "type": "number",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 357
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          }
        },
        "Relationship_characters_memory": {
          "typeName": "Relationship",
          "system1": {
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "Relationship",
                  "body": "/** 関係のある相手のキャラクターID */\r\n    targetId: string;\r\n\r\n    /** 関係を持つ相手の名前 */\r\n    targetName?: string;\r\n\r\n    /** 関係の種類 */\r\n    type: RelationshipType;\r\n\r\n    /** 関係の強さ（0-1） */\r\n    strength: number;\r\n\r\n    /** 関係の説明 */\r\n    description?: string;\r\n\r\n    /** 最後のインタラクション */\r\n    lastInteraction?: Date;\r\n\r\n    /** 関係の履歴 */\r\n    history?: any[];",
                  "properties": {
                    "targetId": {
                      "name": "targetId",
                      "type": "string",
                      "optional": false
                    },
                    "targetName": {
                      "name": "targetName",
                      "type": "string",
                      "optional": true
                    },
                    "type": {
                      "name": "type",
                      "type": "RelationshipType",
                      "optional": false
                    },
                    "strength": {
                      "name": "strength",
                      "type": "number",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": true
                    },
                    "lastInteraction": {
                      "name": "lastInteraction",
                      "type": "Date",
                      "optional": true
                    },
                    "history": {
                      "name": "history",
                      "type": "any[]",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 96
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          "system2": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "Relationship",
                  "body": "character: string;\r\n    relation: string;\r\n    trust_level?: number;",
                  "properties": {
                    "character": {
                      "name": "character",
                      "type": "string",
                      "optional": false
                    },
                    "relation": {
                      "name": "relation",
                      "type": "string",
                      "optional": false
                    },
                    "trust_level": {
                      "name": "trust_level",
                      "type": "number",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 292
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          }
        },
        "CharacterState_characters_memory": {
          "typeName": "CharacterState",
          "system1": {
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterState",
                  "body": "isActive: boolean;\r\n    relationships?: Relationship[];\r\n    developmentStage: number;\r\n    lastAppearance: number | null;\r\n    emotionalState: EmotionalState;\r\n    summary?: string;\r\n    significance?: number;\r\n    hasDialogue?: boolean;\r\n    changes?: CharacterChangeInfo[];\r\n    development: string;\r\n    isDeceased?: boolean;              // 死亡状態\r\n    maritalStatus?: string;            // 結婚状態\r\n    spouseId?: string | null;          // 配偶者ID\r\n    parentIds?: string[];              // 親キャラクターID\r\n    childrenIds?: string[];            // 子キャラクターID\r\n    skills?: string[];                 // 習得スキル\r\n    location?: string;                 // 現在地\r\n    lastStateChange?: {                // 最終状態変化\r\n        type: string;\r\n        chapterNumber: number;\r\n        description: string;",
                  "properties": {
                    "isActive": {
                      "name": "isActive",
                      "type": "boolean",
                      "optional": false
                    },
                    "relationships": {
                      "name": "relationships",
                      "type": "Relationship[]",
                      "optional": true
                    },
                    "developmentStage": {
                      "name": "developmentStage",
                      "type": "number",
                      "optional": false
                    },
                    "lastAppearance": {
                      "name": "lastAppearance",
                      "type": "number | null",
                      "optional": false
                    },
                    "emotionalState": {
                      "name": "emotionalState",
                      "type": "EmotionalState",
                      "optional": false
                    },
                    "summary": {
                      "name": "summary",
                      "type": "string",
                      "optional": true
                    },
                    "significance": {
                      "name": "significance",
                      "type": "number",
                      "optional": true
                    },
                    "hasDialogue": {
                      "name": "hasDialogue",
                      "type": "boolean",
                      "optional": true
                    },
                    "changes": {
                      "name": "changes",
                      "type": "CharacterChangeInfo[]",
                      "optional": true
                    },
                    "development": {
                      "name": "development",
                      "type": "string",
                      "optional": false
                    },
                    "isDeceased": {
                      "name": "isDeceased",
                      "type": "boolean",
                      "optional": true
                    },
                    "maritalStatus": {
                      "name": "maritalStatus",
                      "type": "string",
                      "optional": true
                    },
                    "spouseId": {
                      "name": "spouseId",
                      "type": "string | null",
                      "optional": true
                    },
                    "parentIds": {
                      "name": "parentIds",
                      "type": "string[]",
                      "optional": true
                    },
                    "childrenIds": {
                      "name": "childrenIds",
                      "type": "string[]",
                      "optional": true
                    },
                    "skills": {
                      "name": "skills",
                      "type": "string[]",
                      "optional": true
                    },
                    "location": {
                      "name": "location",
                      "type": "string",
                      "optional": true
                    },
                    "lastStateChange": {
                      "name": "lastStateChange",
                      "type": "{                // 最終状態変化",
                      "optional": true
                    },
                    "type": {
                      "name": "type",
                      "type": "string",
                      "optional": false
                    },
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 164
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          "system2": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "CharacterState",
                  "body": "name: string;\r\n    mood?: string;\r\n    development?: string;\r\n    relationships?: Relationship[];",
                  "properties": {
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "mood": {
                      "name": "mood",
                      "type": "string",
                      "optional": true
                    },
                    "development": {
                      "name": "development",
                      "type": "string",
                      "optional": true
                    },
                    "relationships": {
                      "name": "relationships",
                      "type": "Relationship[]",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 281
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          }
        },
        "CharacterState_characters_plot": {
          "typeName": "CharacterState",
          "system1": {
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterState",
                  "body": "isActive: boolean;\r\n    relationships?: Relationship[];\r\n    developmentStage: number;\r\n    lastAppearance: number | null;\r\n    emotionalState: EmotionalState;\r\n    summary?: string;\r\n    significance?: number;\r\n    hasDialogue?: boolean;\r\n    changes?: CharacterChangeInfo[];\r\n    development: string;\r\n    isDeceased?: boolean;              // 死亡状態\r\n    maritalStatus?: string;            // 結婚状態\r\n    spouseId?: string | null;          // 配偶者ID\r\n    parentIds?: string[];              // 親キャラクターID\r\n    childrenIds?: string[];            // 子キャラクターID\r\n    skills?: string[];                 // 習得スキル\r\n    location?: string;                 // 現在地\r\n    lastStateChange?: {                // 最終状態変化\r\n        type: string;\r\n        chapterNumber: number;\r\n        description: string;",
                  "properties": {
                    "isActive": {
                      "name": "isActive",
                      "type": "boolean",
                      "optional": false
                    },
                    "relationships": {
                      "name": "relationships",
                      "type": "Relationship[]",
                      "optional": true
                    },
                    "developmentStage": {
                      "name": "developmentStage",
                      "type": "number",
                      "optional": false
                    },
                    "lastAppearance": {
                      "name": "lastAppearance",
                      "type": "number | null",
                      "optional": false
                    },
                    "emotionalState": {
                      "name": "emotionalState",
                      "type": "EmotionalState",
                      "optional": false
                    },
                    "summary": {
                      "name": "summary",
                      "type": "string",
                      "optional": true
                    },
                    "significance": {
                      "name": "significance",
                      "type": "number",
                      "optional": true
                    },
                    "hasDialogue": {
                      "name": "hasDialogue",
                      "type": "boolean",
                      "optional": true
                    },
                    "changes": {
                      "name": "changes",
                      "type": "CharacterChangeInfo[]",
                      "optional": true
                    },
                    "development": {
                      "name": "development",
                      "type": "string",
                      "optional": false
                    },
                    "isDeceased": {
                      "name": "isDeceased",
                      "type": "boolean",
                      "optional": true
                    },
                    "maritalStatus": {
                      "name": "maritalStatus",
                      "type": "string",
                      "optional": true
                    },
                    "spouseId": {
                      "name": "spouseId",
                      "type": "string | null",
                      "optional": true
                    },
                    "parentIds": {
                      "name": "parentIds",
                      "type": "string[]",
                      "optional": true
                    },
                    "childrenIds": {
                      "name": "childrenIds",
                      "type": "string[]",
                      "optional": true
                    },
                    "skills": {
                      "name": "skills",
                      "type": "string[]",
                      "optional": true
                    },
                    "location": {
                      "name": "location",
                      "type": "string",
                      "optional": true
                    },
                    "lastStateChange": {
                      "name": "lastStateChange",
                      "type": "{                // 最終状態変化",
                      "optional": true
                    },
                    "type": {
                      "name": "type",
                      "type": "string",
                      "optional": false
                    },
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 164
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          "system2": {
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\bridge-types.ts",
                "definition": {
                  "name": "CharacterState",
                  "body": "name: string;                     // キャラクター名\r\n  currentState: string;             // 現在の状態\r\n  role: string;                     // 章での役割\r\n  goals?: string[];                 // 目標\r\n  conflicts?: string[];             // 葛藤\r\n  relationshipFocus?: string[];     // 焦点を当てる関係性\r\n  development?: string;             // 発展方向",
                  "properties": {
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "currentState": {
                      "name": "currentState",
                      "type": "string",
                      "optional": false
                    },
                    "role": {
                      "name": "role",
                      "type": "string",
                      "optional": false
                    },
                    "goals": {
                      "name": "goals",
                      "type": "string[]",
                      "optional": true
                    },
                    "conflicts": {
                      "name": "conflicts",
                      "type": "string[]",
                      "optional": true
                    },
                    "relationshipFocus": {
                      "name": "relationshipFocus",
                      "type": "string[]",
                      "optional": true
                    },
                    "development": {
                      "name": "development",
                      "type": "string",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 28
                },
                "system": "plot",
                "module": "plot"
              }
            ]
          }
        },
        "CharacterChangeInfo_characters_memory": {
          "typeName": "CharacterChangeInfo",
          "system1": {
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterChangeInfo",
                  "body": "attribute: string;\r\n    previousValue: any;\r\n    currentValue: any;\r\n    classification?: {\r\n        type: string;\r\n        scope: string;\r\n        confidence: number;\r\n        explanation: string;\r\n        narrativeSignificance?: number;",
                  "properties": {
                    "attribute": {
                      "name": "attribute",
                      "type": "string",
                      "optional": false
                    },
                    "previousValue": {
                      "name": "previousValue",
                      "type": "any",
                      "optional": false
                    },
                    "currentValue": {
                      "name": "currentValue",
                      "type": "any",
                      "optional": false
                    },
                    "classification": {
                      "name": "classification",
                      "type": "{",
                      "optional": true
                    },
                    "type": {
                      "name": "type",
                      "type": "string",
                      "optional": false
                    },
                    "scope": {
                      "name": "scope",
                      "type": "string",
                      "optional": false
                    },
                    "confidence": {
                      "name": "confidence",
                      "type": "number",
                      "optional": false
                    },
                    "explanation": {
                      "name": "explanation",
                      "type": "string",
                      "optional": false
                    },
                    "narrativeSignificance": {
                      "name": "narrativeSignificance",
                      "type": "number",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 242
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          "system2": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "CharacterChangeInfo",
                  "body": "attribute: string;\r\n    previousValue: any;\r\n    currentValue: any;\r\n    classification?: {\r\n        type: string;\r\n        scope: string;\r\n        confidence: number;\r\n        explanation: string;\r\n        narrativeSignificance?: number;",
                  "properties": {
                    "attribute": {
                      "name": "attribute",
                      "type": "string",
                      "optional": false
                    },
                    "previousValue": {
                      "name": "previousValue",
                      "type": "any",
                      "optional": false
                    },
                    "currentValue": {
                      "name": "currentValue",
                      "type": "any",
                      "optional": false
                    },
                    "classification": {
                      "name": "classification",
                      "type": "{",
                      "optional": true
                    },
                    "type": {
                      "name": "type",
                      "type": "string",
                      "optional": false
                    },
                    "scope": {
                      "name": "scope",
                      "type": "string",
                      "optional": false
                    },
                    "confidence": {
                      "name": "confidence",
                      "type": "number",
                      "optional": false
                    },
                    "explanation": {
                      "name": "explanation",
                      "type": "string",
                      "optional": false
                    },
                    "narrativeSignificance": {
                      "name": "narrativeSignificance",
                      "type": "number",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 216
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          }
        },
        "CharacterMetadata_characters_memory": {
          "typeName": "CharacterMetadata",
          "system1": {
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterMetadata",
                  "body": "createdAt: Date;\r\n    lastUpdated: Date;\r\n    version?: number;\r\n    tags?: string[];\r\n    /** 永続的イベント履歴 */\r\n    persistentEvents?: Array<{\r\n        type: string;\r\n        chapterNumber: number;\r\n        description: string;",
                  "properties": {
                    "createdAt": {
                      "name": "createdAt",
                      "type": "Date",
                      "optional": false
                    },
                    "lastUpdated": {
                      "name": "lastUpdated",
                      "type": "Date",
                      "optional": false
                    },
                    "version": {
                      "name": "version",
                      "type": "number",
                      "optional": true
                    },
                    "tags": {
                      "name": "tags",
                      "type": "string[]",
                      "optional": true
                    },
                    "persistentEvents": {
                      "name": "persistentEvents",
                      "type": "Array<{",
                      "optional": true
                    },
                    "type": {
                      "name": "type",
                      "type": "string",
                      "optional": false
                    },
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 268
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          "system2": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\character-database-types.ts",
                "definition": {
                  "name": "CharacterMetadata",
                  "body": "createdAt: string;\r\n  createdBy: string;\r\n  lastUpdated: string;\r\n  updatedBy: string;\r\n  version: string;\r\n  locked: boolean;\r\n  archivalStatus: 'active' | 'archived' | 'deprecated';\r\n  importanceScore: number; // 0-10\r\n  narrativeRole: string;\r\n  tags: string[];\r\n  notes: string[];",
                  "properties": {
                    "createdAt": {
                      "name": "createdAt",
                      "type": "string",
                      "optional": false
                    },
                    "createdBy": {
                      "name": "createdBy",
                      "type": "string",
                      "optional": false
                    },
                    "lastUpdated": {
                      "name": "lastUpdated",
                      "type": "string",
                      "optional": false
                    },
                    "updatedBy": {
                      "name": "updatedBy",
                      "type": "string",
                      "optional": false
                    },
                    "version": {
                      "name": "version",
                      "type": "string",
                      "optional": false
                    },
                    "locked": {
                      "name": "locked",
                      "type": "boolean",
                      "optional": false
                    },
                    "archivalStatus": {
                      "name": "archivalStatus",
                      "type": "'active' | 'archived' | 'deprecated'",
                      "optional": false
                    },
                    "importanceScore": {
                      "name": "importanceScore",
                      "type": "number",
                      "optional": false
                    },
                    "narrativeRole": {
                      "name": "narrativeRole",
                      "type": "string",
                      "optional": false
                    },
                    "tags": {
                      "name": "tags",
                      "type": "string[]",
                      "optional": false
                    },
                    "notes": {
                      "name": "notes",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 516
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          }
        },
        "PlotContext_characters_plot": {
          "typeName": "PlotContext",
          "system1": {
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "PlotContext",
                  "body": "/** 最近のチャプター要約 */\r\n    recentSummaries: string;\r\n    /** 重要イベント */\r\n    keyEvents: string[];\r\n    /** 現在のアーク情報 */\r\n    currentArc?: string;\r\n    /** テーマ情報 */\r\n    themes?: string[];",
                  "properties": {
                    "recentSummaries": {
                      "name": "recentSummaries",
                      "type": "string",
                      "optional": false
                    },
                    "keyEvents": {
                      "name": "keyEvents",
                      "type": "string[]",
                      "optional": false
                    },
                    "currentArc": {
                      "name": "currentArc",
                      "type": "string",
                      "optional": true
                    },
                    "themes": {
                      "name": "themes",
                      "type": "string[]",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 903
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          "system2": {
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\types.ts",
                "definition": {
                  "name": "PlotContext",
                  "body": "mode: PlotMode;                    // 現在のプロットモード\r\n    modeInstructions: string;          // モードに応じた指示\r\n    currentArc: {                      // 現在のアーク情報\r\n        name: string;\r\n        theme: string;\r\n        approximateChapters: [number, number];",
                  "properties": {
                    "mode": {
                      "name": "mode",
                      "type": "PlotMode",
                      "optional": false
                    },
                    "modeInstructions": {
                      "name": "modeInstructions",
                      "type": "string",
                      "optional": false
                    },
                    "currentArc": {
                      "name": "currentArc",
                      "type": "{                      // 現在のアーク情報",
                      "optional": false
                    },
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "theme": {
                      "name": "theme",
                      "type": "string",
                      "optional": false
                    },
                    "approximateChapters": {
                      "name": "approximateChapters",
                      "type": "[number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 113
                },
                "system": "plot",
                "module": "plot"
              }
            ]
          }
        },
        "NarrativeState_characters_memory": {
          "typeName": "NarrativeState",
          "system1": {
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "NarrativeState",
                  "body": "theme?: string;\r\n    tone?: string;\r\n    setting?: string;\r\n    arc?: string;\r\n    pacing?: string;",
                  "properties": {
                    "theme": {
                      "name": "theme",
                      "type": "string",
                      "optional": true
                    },
                    "tone": {
                      "name": "tone",
                      "type": "string",
                      "optional": true
                    },
                    "setting": {
                      "name": "setting",
                      "type": "string",
                      "optional": true
                    },
                    "arc": {
                      "name": "arc",
                      "type": "string",
                      "optional": true
                    },
                    "pacing": {
                      "name": "pacing",
                      "type": "string",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 955
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          "system2": {
            "system": "memory",
            "definitions": [
              {
                "type": "enum",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "NarrativeState",
                  "body": "// 共通状態\r\n    INTRODUCTION = 'INTRODUCTION',\r\n    DAILY_LIFE = 'DAILY_LIFE',\r\n    JOURNEY = 'JOURNEY',\r\n    INVESTIGATION = 'INVESTIGATION',\r\n    PRE_BATTLE = 'PRE_BATTLE',\r\n    BATTLE = 'BATTLE',\r\n    POST_BATTLE = 'POST_BATTLE',\r\n    TRAINING = 'TRAINING',\r\n    REVELATION = 'REVELATION',\r\n    DILEMMA = 'DILEMMA',\r\n    RESOLUTION = 'RESOLUTION',\r\n    CLOSURE = 'CLOSURE',\r\n\r\n    // ビジネスジャンル特有の状態\r\n    BUSINESS_MEETING = 'BUSINESS_MEETING',\r\n    PRODUCT_DEVELOPMENT = 'PRODUCT_DEVELOPMENT',\r\n    PITCH_PRESENTATION = 'PITCH_PRESENTATION',\r\n    MARKET_RESEARCH = 'MARKET_RESEARCH',\r\n    TEAM_BUILDING = 'TEAM_BUILDING',\r\n    FUNDING_ROUND = 'FUNDING_ROUND',\r\n    BUSINESS_PIVOT = 'BUSINESS_PIVOT',\r\n    CUSTOMER_DISCOVERY = 'CUSTOMER_DISCOVERY',\r\n    PRODUCT_LAUNCH = 'PRODUCT_LAUNCH',\r\n    \r\n    // 追加のビジネス特化状態\r\n    MARKET_COMPETITION = 'MARKET_COMPETITION',\r\n    STRATEGIC_PREPARATION = 'STRATEGIC_PREPARATION',\r\n    PERFORMANCE_REVIEW = 'PERFORMANCE_REVIEW',\r\n    BUSINESS_DEVELOPMENT = 'BUSINESS_DEVELOPMENT',\r\n    SKILL_DEVELOPMENT = 'SKILL_DEVELOPMENT',\r\n    FINANCIAL_CHALLENGE = 'FINANCIAL_CHALLENGE',\r\n    EXPANSION_PHASE = 'EXPANSION_PHASE',\r\n    ACQUISITION_NEGOTIATION = 'ACQUISITION_NEGOTIATION',\r\n    CULTURE_BUILDING = 'CULTURE_BUILDING',\r\n    CRISIS_MANAGEMENT = 'CRISIS_MANAGEMENT',\r\n    MARKET_ENTRY = 'MARKET_ENTRY',\r\n    REGULATORY_COMPLIANCE = 'REGULATORY_COMPLIANCE',\r\n    PARTNERSHIP_DEVELOPMENT = 'PARTNERSHIP_DEVELOPMENT',\r\n    MARKET_SCALING = 'MARKET_SCALING',",
                  "values": [
                    {
                      "name": "// 共通状態\r\n    INTRODUCTION",
                      "value": "'INTRODUCTION'"
                    },
                    {
                      "name": "DAILY_LIFE",
                      "value": "'DAILY_LIFE'"
                    },
                    {
                      "name": "JOURNEY",
                      "value": "'JOURNEY'"
                    },
                    {
                      "name": "INVESTIGATION",
                      "value": "'INVESTIGATION'"
                    },
                    {
                      "name": "PRE_BATTLE",
                      "value": "'PRE_BATTLE'"
                    },
                    {
                      "name": "BATTLE",
                      "value": "'BATTLE'"
                    },
                    {
                      "name": "POST_BATTLE",
                      "value": "'POST_BATTLE'"
                    },
                    {
                      "name": "TRAINING",
                      "value": "'TRAINING'"
                    },
                    {
                      "name": "REVELATION",
                      "value": "'REVELATION'"
                    },
                    {
                      "name": "DILEMMA",
                      "value": "'DILEMMA'"
                    },
                    {
                      "name": "RESOLUTION",
                      "value": "'RESOLUTION'"
                    },
                    {
                      "name": "CLOSURE",
                      "value": "'CLOSURE'"
                    },
                    {
                      "name": "// ビジネスジャンル特有の状態\r\n    BUSINESS_MEETING",
                      "value": "'BUSINESS_MEETING'"
                    },
                    {
                      "name": "PRODUCT_DEVELOPMENT",
                      "value": "'PRODUCT_DEVELOPMENT'"
                    },
                    {
                      "name": "PITCH_PRESENTATION",
                      "value": "'PITCH_PRESENTATION'"
                    },
                    {
                      "name": "MARKET_RESEARCH",
                      "value": "'MARKET_RESEARCH'"
                    },
                    {
                      "name": "TEAM_BUILDING",
                      "value": "'TEAM_BUILDING'"
                    },
                    {
                      "name": "FUNDING_ROUND",
                      "value": "'FUNDING_ROUND'"
                    },
                    {
                      "name": "BUSINESS_PIVOT",
                      "value": "'BUSINESS_PIVOT'"
                    },
                    {
                      "name": "CUSTOMER_DISCOVERY",
                      "value": "'CUSTOMER_DISCOVERY'"
                    },
                    {
                      "name": "PRODUCT_LAUNCH",
                      "value": "'PRODUCT_LAUNCH'"
                    },
                    {
                      "name": "// 追加のビジネス特化状態\r\n    MARKET_COMPETITION",
                      "value": "'MARKET_COMPETITION'"
                    },
                    {
                      "name": "STRATEGIC_PREPARATION",
                      "value": "'STRATEGIC_PREPARATION'"
                    },
                    {
                      "name": "PERFORMANCE_REVIEW",
                      "value": "'PERFORMANCE_REVIEW'"
                    },
                    {
                      "name": "BUSINESS_DEVELOPMENT",
                      "value": "'BUSINESS_DEVELOPMENT'"
                    },
                    {
                      "name": "SKILL_DEVELOPMENT",
                      "value": "'SKILL_DEVELOPMENT'"
                    },
                    {
                      "name": "FINANCIAL_CHALLENGE",
                      "value": "'FINANCIAL_CHALLENGE'"
                    },
                    {
                      "name": "EXPANSION_PHASE",
                      "value": "'EXPANSION_PHASE'"
                    },
                    {
                      "name": "ACQUISITION_NEGOTIATION",
                      "value": "'ACQUISITION_NEGOTIATION'"
                    },
                    {
                      "name": "CULTURE_BUILDING",
                      "value": "'CULTURE_BUILDING'"
                    },
                    {
                      "name": "CRISIS_MANAGEMENT",
                      "value": "'CRISIS_MANAGEMENT'"
                    },
                    {
                      "name": "MARKET_ENTRY",
                      "value": "'MARKET_ENTRY'"
                    },
                    {
                      "name": "REGULATORY_COMPLIANCE",
                      "value": "'REGULATORY_COMPLIANCE'"
                    },
                    {
                      "name": "PARTNERSHIP_DEVELOPMENT",
                      "value": "'PARTNERSHIP_DEVELOPMENT'"
                    },
                    {
                      "name": "MARKET_SCALING",
                      "value": "'MARKET_SCALING'"
                    }
                  ],
                  "lineNumber": 18
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          }
        },
        "ChapterEmotionAnalysis_characters_memory": {
          "typeName": "ChapterEmotionAnalysis",
          "system1": {
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "ChapterEmotionAnalysis",
                  "body": "/** 感情的次元の分析 */\r\n    emotionalDimensions: {\r\n        /** 希望と絶望の間の感情的変移 */\r\n        hopeVsDespair: EmotionalProgression;\r\n        /** 安心と緊張の間の感情的変移 */\r\n        comfortVsTension: EmotionalProgression;\r\n        /** 喜びと悲しみの間の感情的変移 */\r\n        joyVsSadness: EmotionalProgression;\r\n        /** 共感と孤立の間の感情的変移 */\r\n        empathyVsIsolation: EmotionalProgression;\r\n        /** 好奇心と無関心の間の感情的変移 */\r\n        curiosityVsIndifference: EmotionalProgression;",
                  "properties": {
                    "emotionalDimensions": {
                      "name": "emotionalDimensions",
                      "type": "{",
                      "optional": false
                    },
                    "hopeVsDespair": {
                      "name": "hopeVsDespair",
                      "type": "EmotionalProgression",
                      "optional": false
                    },
                    "comfortVsTension": {
                      "name": "comfortVsTension",
                      "type": "EmotionalProgression",
                      "optional": false
                    },
                    "joyVsSadness": {
                      "name": "joyVsSadness",
                      "type": "EmotionalProgression",
                      "optional": false
                    },
                    "empathyVsIsolation": {
                      "name": "empathyVsIsolation",
                      "type": "EmotionalProgression",
                      "optional": false
                    },
                    "curiosityVsIndifference": {
                      "name": "curiosityVsIndifference",
                      "type": "EmotionalProgression",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 1114
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          "system2": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "ChapterEmotionAnalysis",
                  "body": "emotionalDimensions: {\r\n        hopeVsDespair: { start: number, middle: number, end: number",
                  "properties": {
                    "emotionalDimensions": {
                      "name": "emotionalDimensions",
                      "type": "{",
                      "optional": false
                    },
                    "hopeVsDespair": {
                      "name": "hopeVsDespair",
                      "type": "{ start: number",
                      "optional": false
                    },
                    "middle": {
                      "name": "middle",
                      "type": "number",
                      "optional": false
                    },
                    "end": {
                      "name": "end",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 317
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          }
        },
        "EmotionalArcDesign_characters_memory": {
          "typeName": "EmotionalArcDesign",
          "system1": {
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "EmotionalArcDesign",
                  "body": "/** 推奨される感情的トーン */\r\n    recommendedTone: string;\r\n    /** 感情的な旅 */\r\n    emotionalJourney: {\r\n        /** 冒頭部の感情設計 */\r\n        opening: { dimension: string, level: number",
                  "properties": {
                    "recommendedTone": {
                      "name": "recommendedTone",
                      "type": "string",
                      "optional": false
                    },
                    "emotionalJourney": {
                      "name": "emotionalJourney",
                      "type": "{",
                      "optional": false
                    },
                    "opening": {
                      "name": "opening",
                      "type": "{ dimension: string",
                      "optional": false
                    },
                    "level": {
                      "name": "level",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 1149
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          "system2": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "EmotionalArcDesign",
                  "body": "recommendedTone: string;\r\n    emotionalJourney: {\r\n        opening: { dimension: string; level: number",
                  "properties": {
                    "recommendedTone": {
                      "name": "recommendedTone",
                      "type": "string",
                      "optional": false
                    },
                    "emotionalJourney": {
                      "name": "emotionalJourney",
                      "type": "{",
                      "optional": false
                    },
                    "opening": {
                      "name": "opening",
                      "type": "{ dimension: string",
                      "optional": false
                    },
                    "level": {
                      "name": "level",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 333
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          }
        },
        "ValidationResult_characters_memory": {
          "typeName": "ValidationResult",
          "system1": {
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "ValidationResult",
                  "body": "/** 有効かどうか */\r\n    isValid: boolean;\r\n    /** 信頼度スコア（0-1） */\r\n    confidenceScore: number;\r\n    /** 理由説明 */\r\n    reason: string;\r\n    /** 提案される代替アクション */\r\n    alternatives?: string[];",
                  "properties": {
                    "isValid": {
                      "name": "isValid",
                      "type": "boolean",
                      "optional": false
                    },
                    "confidenceScore": {
                      "name": "confidenceScore",
                      "type": "number",
                      "optional": false
                    },
                    "reason": {
                      "name": "reason",
                      "type": "string",
                      "optional": false
                    },
                    "alternatives": {
                      "name": "alternatives",
                      "type": "string[]",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 1168
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          "system2": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\system-types.ts",
                "definition": {
                  "name": "ValidationResult",
                  "body": "validationId: string;\r\n    testCase: string;\r\n    input: any;\r\n    expectedOutput: any;\r\n    actualOutput: any;\r\n    passed: boolean;\r\n    score: number; // 0-10\r\n    errors: string[];\r\n    timestamp: string;",
                  "properties": {
                    "validationId": {
                      "name": "validationId",
                      "type": "string",
                      "optional": false
                    },
                    "testCase": {
                      "name": "testCase",
                      "type": "string",
                      "optional": false
                    },
                    "input": {
                      "name": "input",
                      "type": "any",
                      "optional": false
                    },
                    "expectedOutput": {
                      "name": "expectedOutput",
                      "type": "any",
                      "optional": false
                    },
                    "actualOutput": {
                      "name": "actualOutput",
                      "type": "any",
                      "optional": false
                    },
                    "passed": {
                      "name": "passed",
                      "type": "boolean",
                      "optional": false
                    },
                    "score": {
                      "name": "score",
                      "type": "number",
                      "optional": false
                    },
                    "errors": {
                      "name": "errors",
                      "type": "string[]",
                      "optional": false
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 541
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          }
        },
        "ComponentStatus_learning-journey_plot": {
          "typeName": "ComponentStatus",
          "system1": {
            "system": "learning-journey",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\learning-journey\\index.ts",
                "definition": {
                  "name": "ComponentStatus",
                  "body": "conceptManager: { initialized: boolean; functional: boolean;",
                  "properties": {
                    "conceptManager": {
                      "name": "conceptManager",
                      "type": "{ initialized: boolean",
                      "optional": false
                    },
                    "functional": {
                      "name": "functional",
                      "type": "boolean",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 135
                },
                "system": "learning-journey",
                "module": "learning-journey"
              }
            ]
          },
          "system2": {
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\section\\index.ts",
                "definition": {
                  "name": "ComponentStatus",
                  "body": "initialized: boolean;\n    healthy: boolean;\n    lastActivity: string;\n    errorCount: number;\n    operationCount: number;\n    averageResponseTime: number;",
                  "properties": {
                    "initialized": {
                      "name": "initialized",
                      "type": "boolean",
                      "optional": false
                    },
                    "healthy": {
                      "name": "healthy",
                      "type": "boolean",
                      "optional": false
                    },
                    "lastActivity": {
                      "name": "lastActivity",
                      "type": "string",
                      "optional": false
                    },
                    "errorCount": {
                      "name": "errorCount",
                      "type": "number",
                      "optional": false
                    },
                    "operationCount": {
                      "name": "operationCount",
                      "type": "number",
                      "optional": false
                    },
                    "averageResponseTime": {
                      "name": "averageResponseTime",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 120
                },
                "system": "plot",
                "module": "plot/section"
              }
            ]
          }
        },
        "PerformanceMetrics_memory_plot": {
          "typeName": "PerformanceMetrics",
          "system1": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "PerformanceMetrics",
                  "body": "responseTime: number;\n    memoryUsage: number;\n    cacheHitRatio: number;\n    duplicateRatio: number;\n    compressionRatio: number;",
                  "properties": {
                    "responseTime": {
                      "name": "responseTime",
                      "type": "number",
                      "optional": false
                    },
                    "memoryUsage": {
                      "name": "memoryUsage",
                      "type": "number",
                      "optional": false
                    },
                    "cacheHitRatio": {
                      "name": "cacheHitRatio",
                      "type": "number",
                      "optional": false
                    },
                    "duplicateRatio": {
                      "name": "duplicateRatio",
                      "type": "number",
                      "optional": false
                    },
                    "compressionRatio": {
                      "name": "compressionRatio",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 396
                },
                "system": "memory",
                "module": "memory/core"
              },
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\system-types.ts",
                "definition": {
                  "name": "PerformanceMetrics",
                  "body": "averageResponseTime: number;\r\n    memoryUsage: number;\r\n    cpuUsage: number;\r\n    apiCalls: number;\r\n    cacheHitRate: number;\r\n    lastMeasured: string;",
                  "properties": {
                    "averageResponseTime": {
                      "name": "averageResponseTime",
                      "type": "number",
                      "optional": false
                    },
                    "memoryUsage": {
                      "name": "memoryUsage",
                      "type": "number",
                      "optional": false
                    },
                    "cpuUsage": {
                      "name": "cpuUsage",
                      "type": "number",
                      "optional": false
                    },
                    "apiCalls": {
                      "name": "apiCalls",
                      "type": "number",
                      "optional": false
                    },
                    "cacheHitRate": {
                      "name": "cacheHitRate",
                      "type": "number",
                      "optional": false
                    },
                    "lastMeasured": {
                      "name": "lastMeasured",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 107
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          "system2": {
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\section\\index.ts",
                "definition": {
                  "name": "PerformanceMetrics",
                  "body": "totalOperations: number;\n    successfulOperations: number;\n    failedOperations: number;\n    averageProcessingTime: number;\n    memorySystemHits: number;\n    cacheEfficiencyRate: number;\n    qualityScore: number;",
                  "properties": {
                    "totalOperations": {
                      "name": "totalOperations",
                      "type": "number",
                      "optional": false
                    },
                    "successfulOperations": {
                      "name": "successfulOperations",
                      "type": "number",
                      "optional": false
                    },
                    "failedOperations": {
                      "name": "failedOperations",
                      "type": "number",
                      "optional": false
                    },
                    "averageProcessingTime": {
                      "name": "averageProcessingTime",
                      "type": "number",
                      "optional": false
                    },
                    "memorySystemHits": {
                      "name": "memorySystemHits",
                      "type": "number",
                      "optional": false
                    },
                    "cacheEfficiencyRate": {
                      "name": "cacheEfficiencyRate",
                      "type": "number",
                      "optional": false
                    },
                    "qualityScore": {
                      "name": "qualityScore",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 132
                },
                "system": "plot",
                "module": "plot/section"
              }
            ]
          }
        },
        "CharacterMetadata_memory_characters": {
          "typeName": "CharacterMetadata",
          "system1": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\character-database-types.ts",
                "definition": {
                  "name": "CharacterMetadata",
                  "body": "createdAt: string;\r\n  createdBy: string;\r\n  lastUpdated: string;\r\n  updatedBy: string;\r\n  version: string;\r\n  locked: boolean;\r\n  archivalStatus: 'active' | 'archived' | 'deprecated';\r\n  importanceScore: number; // 0-10\r\n  narrativeRole: string;\r\n  tags: string[];\r\n  notes: string[];",
                  "properties": {
                    "createdAt": {
                      "name": "createdAt",
                      "type": "string",
                      "optional": false
                    },
                    "createdBy": {
                      "name": "createdBy",
                      "type": "string",
                      "optional": false
                    },
                    "lastUpdated": {
                      "name": "lastUpdated",
                      "type": "string",
                      "optional": false
                    },
                    "updatedBy": {
                      "name": "updatedBy",
                      "type": "string",
                      "optional": false
                    },
                    "version": {
                      "name": "version",
                      "type": "string",
                      "optional": false
                    },
                    "locked": {
                      "name": "locked",
                      "type": "boolean",
                      "optional": false
                    },
                    "archivalStatus": {
                      "name": "archivalStatus",
                      "type": "'active' | 'archived' | 'deprecated'",
                      "optional": false
                    },
                    "importanceScore": {
                      "name": "importanceScore",
                      "type": "number",
                      "optional": false
                    },
                    "narrativeRole": {
                      "name": "narrativeRole",
                      "type": "string",
                      "optional": false
                    },
                    "tags": {
                      "name": "tags",
                      "type": "string[]",
                      "optional": false
                    },
                    "notes": {
                      "name": "notes",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 516
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          "system2": {
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterMetadata",
                  "body": "createdAt: Date;\r\n    lastUpdated: Date;\r\n    version?: number;\r\n    tags?: string[];\r\n    /** 永続的イベント履歴 */\r\n    persistentEvents?: Array<{\r\n        type: string;\r\n        chapterNumber: number;\r\n        description: string;",
                  "properties": {
                    "createdAt": {
                      "name": "createdAt",
                      "type": "Date",
                      "optional": false
                    },
                    "lastUpdated": {
                      "name": "lastUpdated",
                      "type": "Date",
                      "optional": false
                    },
                    "version": {
                      "name": "version",
                      "type": "number",
                      "optional": true
                    },
                    "tags": {
                      "name": "tags",
                      "type": "string[]",
                      "optional": true
                    },
                    "persistentEvents": {
                      "name": "persistentEvents",
                      "type": "Array<{",
                      "optional": true
                    },
                    "type": {
                      "name": "type",
                      "type": "string",
                      "optional": false
                    },
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 268
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          }
        },
        "ValidationResult_memory_characters": {
          "typeName": "ValidationResult",
          "system1": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\system-types.ts",
                "definition": {
                  "name": "ValidationResult",
                  "body": "validationId: string;\r\n    testCase: string;\r\n    input: any;\r\n    expectedOutput: any;\r\n    actualOutput: any;\r\n    passed: boolean;\r\n    score: number; // 0-10\r\n    errors: string[];\r\n    timestamp: string;",
                  "properties": {
                    "validationId": {
                      "name": "validationId",
                      "type": "string",
                      "optional": false
                    },
                    "testCase": {
                      "name": "testCase",
                      "type": "string",
                      "optional": false
                    },
                    "input": {
                      "name": "input",
                      "type": "any",
                      "optional": false
                    },
                    "expectedOutput": {
                      "name": "expectedOutput",
                      "type": "any",
                      "optional": false
                    },
                    "actualOutput": {
                      "name": "actualOutput",
                      "type": "any",
                      "optional": false
                    },
                    "passed": {
                      "name": "passed",
                      "type": "boolean",
                      "optional": false
                    },
                    "score": {
                      "name": "score",
                      "type": "number",
                      "optional": false
                    },
                    "errors": {
                      "name": "errors",
                      "type": "string[]",
                      "optional": false
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 541
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          "system2": {
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "ValidationResult",
                  "body": "/** 有効かどうか */\r\n    isValid: boolean;\r\n    /** 信頼度スコア（0-1） */\r\n    confidenceScore: number;\r\n    /** 理由説明 */\r\n    reason: string;\r\n    /** 提案される代替アクション */\r\n    alternatives?: string[];",
                  "properties": {
                    "isValid": {
                      "name": "isValid",
                      "type": "boolean",
                      "optional": false
                    },
                    "confidenceScore": {
                      "name": "confidenceScore",
                      "type": "number",
                      "optional": false
                    },
                    "reason": {
                      "name": "reason",
                      "type": "string",
                      "optional": false
                    },
                    "alternatives": {
                      "name": "alternatives",
                      "type": "string[]",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 1168
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          }
        },
        "ImplementationStep_memory_analysis": {
          "typeName": "ImplementationStep",
          "system1": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\system-types.ts",
                "definition": {
                  "name": "ImplementationStep",
                  "body": "stepId: string;\r\n    name: string;\r\n    description: string;\r\n    order: number;\r\n    duration: string;\r\n    dependencies: string[];\r\n    deliverables: string[];\r\n    validationCriteria: string[];",
                  "properties": {
                    "stepId": {
                      "name": "stepId",
                      "type": "string",
                      "optional": false
                    },
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    },
                    "order": {
                      "name": "order",
                      "type": "number",
                      "optional": false
                    },
                    "duration": {
                      "name": "duration",
                      "type": "string",
                      "optional": false
                    },
                    "dependencies": {
                      "name": "dependencies",
                      "type": "string[]",
                      "optional": false
                    },
                    "deliverables": {
                      "name": "deliverables",
                      "type": "string[]",
                      "optional": false
                    },
                    "validationCriteria": {
                      "name": "validationCriteria",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 741
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          "system2": {
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\coordinators\\interfaces.ts",
                "definition": {
                  "name": "ImplementationStep",
                  "body": "step: number;\r\n  phase: 'preparation' | 'core_implementation' | 'refinement' | 'validation';\r\n  suggestions: string[];\r\n  description: string;\r\n  estimatedEffort: 'low' | 'medium' | 'high';",
                  "properties": {
                    "step": {
                      "name": "step",
                      "type": "number",
                      "optional": false
                    },
                    "phase": {
                      "name": "phase",
                      "type": "'preparation' | 'core_implementation' | 'refinement' | 'validation'",
                      "optional": false
                    },
                    "suggestions": {
                      "name": "suggestions",
                      "type": "string[]",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    },
                    "estimatedEffort": {
                      "name": "estimatedEffort",
                      "type": "'low' | 'medium' | 'high'",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 253
                },
                "system": "analysis",
                "module": "analysis/coordinators"
              }
            ]
          }
        },
        "CharacterChangeInfo_memory_characters": {
          "typeName": "CharacterChangeInfo",
          "system1": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "CharacterChangeInfo",
                  "body": "attribute: string;\r\n    previousValue: any;\r\n    currentValue: any;\r\n    classification?: {\r\n        type: string;\r\n        scope: string;\r\n        confidence: number;\r\n        explanation: string;\r\n        narrativeSignificance?: number;",
                  "properties": {
                    "attribute": {
                      "name": "attribute",
                      "type": "string",
                      "optional": false
                    },
                    "previousValue": {
                      "name": "previousValue",
                      "type": "any",
                      "optional": false
                    },
                    "currentValue": {
                      "name": "currentValue",
                      "type": "any",
                      "optional": false
                    },
                    "classification": {
                      "name": "classification",
                      "type": "{",
                      "optional": true
                    },
                    "type": {
                      "name": "type",
                      "type": "string",
                      "optional": false
                    },
                    "scope": {
                      "name": "scope",
                      "type": "string",
                      "optional": false
                    },
                    "confidence": {
                      "name": "confidence",
                      "type": "number",
                      "optional": false
                    },
                    "explanation": {
                      "name": "explanation",
                      "type": "string",
                      "optional": false
                    },
                    "narrativeSignificance": {
                      "name": "narrativeSignificance",
                      "type": "number",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 216
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          "system2": {
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterChangeInfo",
                  "body": "attribute: string;\r\n    previousValue: any;\r\n    currentValue: any;\r\n    classification?: {\r\n        type: string;\r\n        scope: string;\r\n        confidence: number;\r\n        explanation: string;\r\n        narrativeSignificance?: number;",
                  "properties": {
                    "attribute": {
                      "name": "attribute",
                      "type": "string",
                      "optional": false
                    },
                    "previousValue": {
                      "name": "previousValue",
                      "type": "any",
                      "optional": false
                    },
                    "currentValue": {
                      "name": "currentValue",
                      "type": "any",
                      "optional": false
                    },
                    "classification": {
                      "name": "classification",
                      "type": "{",
                      "optional": true
                    },
                    "type": {
                      "name": "type",
                      "type": "string",
                      "optional": false
                    },
                    "scope": {
                      "name": "scope",
                      "type": "string",
                      "optional": false
                    },
                    "confidence": {
                      "name": "confidence",
                      "type": "number",
                      "optional": false
                    },
                    "explanation": {
                      "name": "explanation",
                      "type": "string",
                      "optional": false
                    },
                    "narrativeSignificance": {
                      "name": "narrativeSignificance",
                      "type": "number",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 242
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          }
        },
        "CharacterState_memory_characters": {
          "typeName": "CharacterState",
          "system1": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "CharacterState",
                  "body": "name: string;\r\n    mood?: string;\r\n    development?: string;\r\n    relationships?: Relationship[];",
                  "properties": {
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "mood": {
                      "name": "mood",
                      "type": "string",
                      "optional": true
                    },
                    "development": {
                      "name": "development",
                      "type": "string",
                      "optional": true
                    },
                    "relationships": {
                      "name": "relationships",
                      "type": "Relationship[]",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 281
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          "system2": {
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterState",
                  "body": "isActive: boolean;\r\n    relationships?: Relationship[];\r\n    developmentStage: number;\r\n    lastAppearance: number | null;\r\n    emotionalState: EmotionalState;\r\n    summary?: string;\r\n    significance?: number;\r\n    hasDialogue?: boolean;\r\n    changes?: CharacterChangeInfo[];\r\n    development: string;\r\n    isDeceased?: boolean;              // 死亡状態\r\n    maritalStatus?: string;            // 結婚状態\r\n    spouseId?: string | null;          // 配偶者ID\r\n    parentIds?: string[];              // 親キャラクターID\r\n    childrenIds?: string[];            // 子キャラクターID\r\n    skills?: string[];                 // 習得スキル\r\n    location?: string;                 // 現在地\r\n    lastStateChange?: {                // 最終状態変化\r\n        type: string;\r\n        chapterNumber: number;\r\n        description: string;",
                  "properties": {
                    "isActive": {
                      "name": "isActive",
                      "type": "boolean",
                      "optional": false
                    },
                    "relationships": {
                      "name": "relationships",
                      "type": "Relationship[]",
                      "optional": true
                    },
                    "developmentStage": {
                      "name": "developmentStage",
                      "type": "number",
                      "optional": false
                    },
                    "lastAppearance": {
                      "name": "lastAppearance",
                      "type": "number | null",
                      "optional": false
                    },
                    "emotionalState": {
                      "name": "emotionalState",
                      "type": "EmotionalState",
                      "optional": false
                    },
                    "summary": {
                      "name": "summary",
                      "type": "string",
                      "optional": true
                    },
                    "significance": {
                      "name": "significance",
                      "type": "number",
                      "optional": true
                    },
                    "hasDialogue": {
                      "name": "hasDialogue",
                      "type": "boolean",
                      "optional": true
                    },
                    "changes": {
                      "name": "changes",
                      "type": "CharacterChangeInfo[]",
                      "optional": true
                    },
                    "development": {
                      "name": "development",
                      "type": "string",
                      "optional": false
                    },
                    "isDeceased": {
                      "name": "isDeceased",
                      "type": "boolean",
                      "optional": true
                    },
                    "maritalStatus": {
                      "name": "maritalStatus",
                      "type": "string",
                      "optional": true
                    },
                    "spouseId": {
                      "name": "spouseId",
                      "type": "string | null",
                      "optional": true
                    },
                    "parentIds": {
                      "name": "parentIds",
                      "type": "string[]",
                      "optional": true
                    },
                    "childrenIds": {
                      "name": "childrenIds",
                      "type": "string[]",
                      "optional": true
                    },
                    "skills": {
                      "name": "skills",
                      "type": "string[]",
                      "optional": true
                    },
                    "location": {
                      "name": "location",
                      "type": "string",
                      "optional": true
                    },
                    "lastStateChange": {
                      "name": "lastStateChange",
                      "type": "{                // 最終状態変化",
                      "optional": true
                    },
                    "type": {
                      "name": "type",
                      "type": "string",
                      "optional": false
                    },
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 164
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          }
        },
        "CharacterState_memory_plot": {
          "typeName": "CharacterState",
          "system1": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "CharacterState",
                  "body": "name: string;\r\n    mood?: string;\r\n    development?: string;\r\n    relationships?: Relationship[];",
                  "properties": {
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "mood": {
                      "name": "mood",
                      "type": "string",
                      "optional": true
                    },
                    "development": {
                      "name": "development",
                      "type": "string",
                      "optional": true
                    },
                    "relationships": {
                      "name": "relationships",
                      "type": "Relationship[]",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 281
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          "system2": {
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\bridge-types.ts",
                "definition": {
                  "name": "CharacterState",
                  "body": "name: string;                     // キャラクター名\r\n  currentState: string;             // 現在の状態\r\n  role: string;                     // 章での役割\r\n  goals?: string[];                 // 目標\r\n  conflicts?: string[];             // 葛藤\r\n  relationshipFocus?: string[];     // 焦点を当てる関係性\r\n  development?: string;             // 発展方向",
                  "properties": {
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "currentState": {
                      "name": "currentState",
                      "type": "string",
                      "optional": false
                    },
                    "role": {
                      "name": "role",
                      "type": "string",
                      "optional": false
                    },
                    "goals": {
                      "name": "goals",
                      "type": "string[]",
                      "optional": true
                    },
                    "conflicts": {
                      "name": "conflicts",
                      "type": "string[]",
                      "optional": true
                    },
                    "relationshipFocus": {
                      "name": "relationshipFocus",
                      "type": "string[]",
                      "optional": true
                    },
                    "development": {
                      "name": "development",
                      "type": "string",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 28
                },
                "system": "plot",
                "module": "plot"
              }
            ]
          }
        },
        "Relationship_memory_characters": {
          "typeName": "Relationship",
          "system1": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "Relationship",
                  "body": "character: string;\r\n    relation: string;\r\n    trust_level?: number;",
                  "properties": {
                    "character": {
                      "name": "character",
                      "type": "string",
                      "optional": false
                    },
                    "relation": {
                      "name": "relation",
                      "type": "string",
                      "optional": false
                    },
                    "trust_level": {
                      "name": "trust_level",
                      "type": "number",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 292
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          "system2": {
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "Relationship",
                  "body": "/** 関係のある相手のキャラクターID */\r\n    targetId: string;\r\n\r\n    /** 関係を持つ相手の名前 */\r\n    targetName?: string;\r\n\r\n    /** 関係の種類 */\r\n    type: RelationshipType;\r\n\r\n    /** 関係の強さ（0-1） */\r\n    strength: number;\r\n\r\n    /** 関係の説明 */\r\n    description?: string;\r\n\r\n    /** 最後のインタラクション */\r\n    lastInteraction?: Date;\r\n\r\n    /** 関係の履歴 */\r\n    history?: any[];",
                  "properties": {
                    "targetId": {
                      "name": "targetId",
                      "type": "string",
                      "optional": false
                    },
                    "targetName": {
                      "name": "targetName",
                      "type": "string",
                      "optional": true
                    },
                    "type": {
                      "name": "type",
                      "type": "RelationshipType",
                      "optional": false
                    },
                    "strength": {
                      "name": "strength",
                      "type": "number",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": true
                    },
                    "lastInteraction": {
                      "name": "lastInteraction",
                      "type": "Date",
                      "optional": true
                    },
                    "history": {
                      "name": "history",
                      "type": "any[]",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 96
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          }
        },
        "EmotionalCurvePoint_memory_plot": {
          "typeName": "EmotionalCurvePoint",
          "system1": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "EmotionalCurvePoint",
                  "body": "chapter: number;\r\n    tension: number;\r\n    emotion: string;\r\n    event?: string;",
                  "properties": {
                    "chapter": {
                      "name": "chapter",
                      "type": "number",
                      "optional": false
                    },
                    "tension": {
                      "name": "tension",
                      "type": "number",
                      "optional": false
                    },
                    "emotion": {
                      "name": "emotion",
                      "type": "string",
                      "optional": false
                    },
                    "event": {
                      "name": "event",
                      "type": "string",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 306
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          "system2": {
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\section\\types.ts",
                "definition": {
                  "name": "EmotionalCurvePoint",
                  "body": "chapter: number;\r\n    emotion: string;\r\n    tension: number;",
                  "properties": {
                    "chapter": {
                      "name": "chapter",
                      "type": "number",
                      "optional": false
                    },
                    "emotion": {
                      "name": "emotion",
                      "type": "string",
                      "optional": false
                    },
                    "tension": {
                      "name": "tension",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 172
                },
                "system": "plot",
                "module": "plot/section"
              }
            ]
          }
        },
        "ChapterEmotionAnalysis_memory_characters": {
          "typeName": "ChapterEmotionAnalysis",
          "system1": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "ChapterEmotionAnalysis",
                  "body": "emotionalDimensions: {\r\n        hopeVsDespair: { start: number, middle: number, end: number",
                  "properties": {
                    "emotionalDimensions": {
                      "name": "emotionalDimensions",
                      "type": "{",
                      "optional": false
                    },
                    "hopeVsDespair": {
                      "name": "hopeVsDespair",
                      "type": "{ start: number",
                      "optional": false
                    },
                    "middle": {
                      "name": "middle",
                      "type": "number",
                      "optional": false
                    },
                    "end": {
                      "name": "end",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 317
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          "system2": {
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "ChapterEmotionAnalysis",
                  "body": "/** 感情的次元の分析 */\r\n    emotionalDimensions: {\r\n        /** 希望と絶望の間の感情的変移 */\r\n        hopeVsDespair: EmotionalProgression;\r\n        /** 安心と緊張の間の感情的変移 */\r\n        comfortVsTension: EmotionalProgression;\r\n        /** 喜びと悲しみの間の感情的変移 */\r\n        joyVsSadness: EmotionalProgression;\r\n        /** 共感と孤立の間の感情的変移 */\r\n        empathyVsIsolation: EmotionalProgression;\r\n        /** 好奇心と無関心の間の感情的変移 */\r\n        curiosityVsIndifference: EmotionalProgression;",
                  "properties": {
                    "emotionalDimensions": {
                      "name": "emotionalDimensions",
                      "type": "{",
                      "optional": false
                    },
                    "hopeVsDespair": {
                      "name": "hopeVsDespair",
                      "type": "EmotionalProgression",
                      "optional": false
                    },
                    "comfortVsTension": {
                      "name": "comfortVsTension",
                      "type": "EmotionalProgression",
                      "optional": false
                    },
                    "joyVsSadness": {
                      "name": "joyVsSadness",
                      "type": "EmotionalProgression",
                      "optional": false
                    },
                    "empathyVsIsolation": {
                      "name": "empathyVsIsolation",
                      "type": "EmotionalProgression",
                      "optional": false
                    },
                    "curiosityVsIndifference": {
                      "name": "curiosityVsIndifference",
                      "type": "EmotionalProgression",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 1114
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          }
        },
        "EmotionalArcDesign_memory_characters": {
          "typeName": "EmotionalArcDesign",
          "system1": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "EmotionalArcDesign",
                  "body": "recommendedTone: string;\r\n    emotionalJourney: {\r\n        opening: { dimension: string; level: number",
                  "properties": {
                    "recommendedTone": {
                      "name": "recommendedTone",
                      "type": "string",
                      "optional": false
                    },
                    "emotionalJourney": {
                      "name": "emotionalJourney",
                      "type": "{",
                      "optional": false
                    },
                    "opening": {
                      "name": "opening",
                      "type": "{ dimension: string",
                      "optional": false
                    },
                    "level": {
                      "name": "level",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 333
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          "system2": {
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "EmotionalArcDesign",
                  "body": "/** 推奨される感情的トーン */\r\n    recommendedTone: string;\r\n    /** 感情的な旅 */\r\n    emotionalJourney: {\r\n        /** 冒頭部の感情設計 */\r\n        opening: { dimension: string, level: number",
                  "properties": {
                    "recommendedTone": {
                      "name": "recommendedTone",
                      "type": "string",
                      "optional": false
                    },
                    "emotionalJourney": {
                      "name": "emotionalJourney",
                      "type": "{",
                      "optional": false
                    },
                    "opening": {
                      "name": "opening",
                      "type": "{ dimension: string",
                      "optional": false
                    },
                    "level": {
                      "name": "level",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 1149
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          }
        },
        "TensionRecommendation_memory_analysis": {
          "typeName": "TensionRecommendation",
          "system1": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "TensionRecommendation",
                  "body": "recommendedTension: number;\r\n    reason: string;\r\n    direction: \"increase\" | \"decrease\" | \"maintain\" | \"establish\";",
                  "properties": {
                    "recommendedTension": {
                      "name": "recommendedTension",
                      "type": "number",
                      "optional": false
                    },
                    "reason": {
                      "name": "reason",
                      "type": "string",
                      "optional": false
                    },
                    "direction": {
                      "name": "direction",
                      "type": "\"increase\" | \"decrease\" | \"maintain\" | \"establish\"",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 347
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          "system2": {
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\enhancement\\tension\\interfaces.ts",
                "definition": {
                  "name": "TensionRecommendation",
                  "body": "/** 推奨テンション値 (0-1) */\r\n  recommendedTension: number;\r\n  /** 推奨理由 */\r\n  reason: string;\r\n  /** 方向性 */\r\n  direction: \"increase\" | \"decrease\" | \"maintain\" | \"establish\";",
                  "properties": {
                    "recommendedTension": {
                      "name": "recommendedTension",
                      "type": "number",
                      "optional": false
                    },
                    "reason": {
                      "name": "reason",
                      "type": "string",
                      "optional": false
                    },
                    "direction": {
                      "name": "direction",
                      "type": "\"increase\" | \"decrease\" | \"maintain\" | \"establish\"",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 11
                },
                "system": "analysis",
                "module": "analysis/enhancement/tension"
              }
            ]
          }
        },
        "PacingRecommendation_memory_analysis": {
          "typeName": "PacingRecommendation",
          "system1": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "PacingRecommendation",
                  "body": "recommendedPacing: number;\r\n    description: string;",
                  "properties": {
                    "recommendedPacing": {
                      "name": "recommendedPacing",
                      "type": "number",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 357
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          "system2": {
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\enhancement\\tension\\interfaces.ts",
                "definition": {
                  "name": "PacingRecommendation",
                  "body": "/** 推奨ペーシング値 (0-1) */\r\n  recommendedPacing: number;\r\n  /** 説明 */\r\n  description: string;",
                  "properties": {
                    "recommendedPacing": {
                      "name": "recommendedPacing",
                      "type": "number",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 23
                },
                "system": "analysis",
                "module": "analysis/enhancement/tension"
              }
            ]
          }
        },
        "TensionPacingRecommendation_memory_analysis": {
          "typeName": "TensionPacingRecommendation",
          "system1": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "TensionPacingRecommendation",
                  "body": "tension: TensionRecommendation;\r\n    pacing: PacingRecommendation;",
                  "properties": {
                    "tension": {
                      "name": "tension",
                      "type": "TensionRecommendation",
                      "optional": false
                    },
                    "pacing": {
                      "name": "pacing",
                      "type": "PacingRecommendation",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 366
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          "system2": {
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\coordinators\\interfaces.ts",
                "definition": {
                  "name": "TensionPacingRecommendation",
                  "body": "tension: {\r\n    recommendedTension: number;\r\n    reason: string;\r\n    direction: 'increase' | 'decrease' | 'maintain';",
                  "properties": {
                    "tension": {
                      "name": "tension",
                      "type": "{",
                      "optional": false
                    },
                    "recommendedTension": {
                      "name": "recommendedTension",
                      "type": "number",
                      "optional": false
                    },
                    "reason": {
                      "name": "reason",
                      "type": "string",
                      "optional": false
                    },
                    "direction": {
                      "name": "direction",
                      "type": "'increase' | 'decrease' | 'maintain'",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 524
                },
                "system": "analysis",
                "module": "analysis/coordinators"
              },
              {
                "type": "interface",
                "file": "lib\\analysis\\enhancement\\tension\\interfaces.ts",
                "definition": {
                  "name": "TensionPacingRecommendation",
                  "body": "/** テンション推奨 */\r\n  tension: TensionRecommendation;\r\n  /** ペーシング推奨 */\r\n  pacing: PacingRecommendation;",
                  "properties": {
                    "tension": {
                      "name": "tension",
                      "type": "TensionRecommendation",
                      "optional": false
                    },
                    "pacing": {
                      "name": "pacing",
                      "type": "PacingRecommendation",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 33
                },
                "system": "analysis",
                "module": "analysis/enhancement/tension"
              }
            ]
          }
        },
        "ThemeResonanceAnalysis_memory_analysis": {
          "typeName": "ThemeResonanceAnalysis",
          "system1": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "ThemeResonanceAnalysis",
                  "body": "strength: number;\r\n    dominantExpressions: string[];\r\n    resonanceHistory?: {\r\n        chapter: number;\r\n        strength: number;\r\n        dominantExpressions: string[];",
                  "properties": {
                    "strength": {
                      "name": "strength",
                      "type": "number",
                      "optional": false
                    },
                    "dominantExpressions": {
                      "name": "dominantExpressions",
                      "type": "string[]",
                      "optional": false
                    },
                    "resonanceHistory": {
                      "name": "resonanceHistory",
                      "type": "{",
                      "optional": true
                    },
                    "chapter": {
                      "name": "chapter",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 490
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          "system2": {
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\core\\types.ts",
                "definition": {
                  "name": "ThemeResonanceAnalysis",
                  "body": "/**\r\n     * 各テーマの分析情報\r\n     */\r\n    themes?: {\r\n      [themeName: string]: {\r\n        /**\r\n         * 明示的な言及（テキスト内の直接的な表現）\r\n         */\r\n        explicitMentions?: string[];\r\n        \r\n        /**\r\n         * 暗示的な表現（テキスト内の間接的な表現）\r\n         */\r\n        implicitExpressions?: string[];\r\n        \r\n        /**\r\n         * テーマの強度（0-1）\r\n         */\r\n        strength?: number;\r\n        \r\n        /**\r\n         * テーマの表現方法\r\n         */\r\n        expressionMethods?: string[];\r\n        \r\n        /**\r\n         * 関連するテーマ\r\n         */\r\n        relatedThemes?: string[];",
                  "properties": {
                    "themes": {
                      "name": "themes",
                      "type": "{",
                      "optional": true
                    },
                    "themeName": {
                      "name": "themeName",
                      "type": "string]: {",
                      "optional": false
                    },
                    "explicitMentions": {
                      "name": "explicitMentions",
                      "type": "string[]",
                      "optional": true
                    },
                    "implicitExpressions": {
                      "name": "implicitExpressions",
                      "type": "string[]",
                      "optional": true
                    },
                    "strength": {
                      "name": "strength",
                      "type": "number",
                      "optional": true
                    },
                    "expressionMethods": {
                      "name": "expressionMethods",
                      "type": "string[]",
                      "optional": true
                    },
                    "relatedThemes": {
                      "name": "relatedThemes",
                      "type": "string[]",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 63
                },
                "system": "analysis",
                "module": "analysis/core"
              }
            ]
          }
        },
        "NarrativeState_memory_characters": {
          "typeName": "NarrativeState",
          "system1": {
            "system": "memory",
            "definitions": [
              {
                "type": "enum",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "NarrativeState",
                  "body": "// 共通状態\r\n    INTRODUCTION = 'INTRODUCTION',\r\n    DAILY_LIFE = 'DAILY_LIFE',\r\n    JOURNEY = 'JOURNEY',\r\n    INVESTIGATION = 'INVESTIGATION',\r\n    PRE_BATTLE = 'PRE_BATTLE',\r\n    BATTLE = 'BATTLE',\r\n    POST_BATTLE = 'POST_BATTLE',\r\n    TRAINING = 'TRAINING',\r\n    REVELATION = 'REVELATION',\r\n    DILEMMA = 'DILEMMA',\r\n    RESOLUTION = 'RESOLUTION',\r\n    CLOSURE = 'CLOSURE',\r\n\r\n    // ビジネスジャンル特有の状態\r\n    BUSINESS_MEETING = 'BUSINESS_MEETING',\r\n    PRODUCT_DEVELOPMENT = 'PRODUCT_DEVELOPMENT',\r\n    PITCH_PRESENTATION = 'PITCH_PRESENTATION',\r\n    MARKET_RESEARCH = 'MARKET_RESEARCH',\r\n    TEAM_BUILDING = 'TEAM_BUILDING',\r\n    FUNDING_ROUND = 'FUNDING_ROUND',\r\n    BUSINESS_PIVOT = 'BUSINESS_PIVOT',\r\n    CUSTOMER_DISCOVERY = 'CUSTOMER_DISCOVERY',\r\n    PRODUCT_LAUNCH = 'PRODUCT_LAUNCH',\r\n    \r\n    // 追加のビジネス特化状態\r\n    MARKET_COMPETITION = 'MARKET_COMPETITION',\r\n    STRATEGIC_PREPARATION = 'STRATEGIC_PREPARATION',\r\n    PERFORMANCE_REVIEW = 'PERFORMANCE_REVIEW',\r\n    BUSINESS_DEVELOPMENT = 'BUSINESS_DEVELOPMENT',\r\n    SKILL_DEVELOPMENT = 'SKILL_DEVELOPMENT',\r\n    FINANCIAL_CHALLENGE = 'FINANCIAL_CHALLENGE',\r\n    EXPANSION_PHASE = 'EXPANSION_PHASE',\r\n    ACQUISITION_NEGOTIATION = 'ACQUISITION_NEGOTIATION',\r\n    CULTURE_BUILDING = 'CULTURE_BUILDING',\r\n    CRISIS_MANAGEMENT = 'CRISIS_MANAGEMENT',\r\n    MARKET_ENTRY = 'MARKET_ENTRY',\r\n    REGULATORY_COMPLIANCE = 'REGULATORY_COMPLIANCE',\r\n    PARTNERSHIP_DEVELOPMENT = 'PARTNERSHIP_DEVELOPMENT',\r\n    MARKET_SCALING = 'MARKET_SCALING',",
                  "values": [
                    {
                      "name": "// 共通状態\r\n    INTRODUCTION",
                      "value": "'INTRODUCTION'"
                    },
                    {
                      "name": "DAILY_LIFE",
                      "value": "'DAILY_LIFE'"
                    },
                    {
                      "name": "JOURNEY",
                      "value": "'JOURNEY'"
                    },
                    {
                      "name": "INVESTIGATION",
                      "value": "'INVESTIGATION'"
                    },
                    {
                      "name": "PRE_BATTLE",
                      "value": "'PRE_BATTLE'"
                    },
                    {
                      "name": "BATTLE",
                      "value": "'BATTLE'"
                    },
                    {
                      "name": "POST_BATTLE",
                      "value": "'POST_BATTLE'"
                    },
                    {
                      "name": "TRAINING",
                      "value": "'TRAINING'"
                    },
                    {
                      "name": "REVELATION",
                      "value": "'REVELATION'"
                    },
                    {
                      "name": "DILEMMA",
                      "value": "'DILEMMA'"
                    },
                    {
                      "name": "RESOLUTION",
                      "value": "'RESOLUTION'"
                    },
                    {
                      "name": "CLOSURE",
                      "value": "'CLOSURE'"
                    },
                    {
                      "name": "// ビジネスジャンル特有の状態\r\n    BUSINESS_MEETING",
                      "value": "'BUSINESS_MEETING'"
                    },
                    {
                      "name": "PRODUCT_DEVELOPMENT",
                      "value": "'PRODUCT_DEVELOPMENT'"
                    },
                    {
                      "name": "PITCH_PRESENTATION",
                      "value": "'PITCH_PRESENTATION'"
                    },
                    {
                      "name": "MARKET_RESEARCH",
                      "value": "'MARKET_RESEARCH'"
                    },
                    {
                      "name": "TEAM_BUILDING",
                      "value": "'TEAM_BUILDING'"
                    },
                    {
                      "name": "FUNDING_ROUND",
                      "value": "'FUNDING_ROUND'"
                    },
                    {
                      "name": "BUSINESS_PIVOT",
                      "value": "'BUSINESS_PIVOT'"
                    },
                    {
                      "name": "CUSTOMER_DISCOVERY",
                      "value": "'CUSTOMER_DISCOVERY'"
                    },
                    {
                      "name": "PRODUCT_LAUNCH",
                      "value": "'PRODUCT_LAUNCH'"
                    },
                    {
                      "name": "// 追加のビジネス特化状態\r\n    MARKET_COMPETITION",
                      "value": "'MARKET_COMPETITION'"
                    },
                    {
                      "name": "STRATEGIC_PREPARATION",
                      "value": "'STRATEGIC_PREPARATION'"
                    },
                    {
                      "name": "PERFORMANCE_REVIEW",
                      "value": "'PERFORMANCE_REVIEW'"
                    },
                    {
                      "name": "BUSINESS_DEVELOPMENT",
                      "value": "'BUSINESS_DEVELOPMENT'"
                    },
                    {
                      "name": "SKILL_DEVELOPMENT",
                      "value": "'SKILL_DEVELOPMENT'"
                    },
                    {
                      "name": "FINANCIAL_CHALLENGE",
                      "value": "'FINANCIAL_CHALLENGE'"
                    },
                    {
                      "name": "EXPANSION_PHASE",
                      "value": "'EXPANSION_PHASE'"
                    },
                    {
                      "name": "ACQUISITION_NEGOTIATION",
                      "value": "'ACQUISITION_NEGOTIATION'"
                    },
                    {
                      "name": "CULTURE_BUILDING",
                      "value": "'CULTURE_BUILDING'"
                    },
                    {
                      "name": "CRISIS_MANAGEMENT",
                      "value": "'CRISIS_MANAGEMENT'"
                    },
                    {
                      "name": "MARKET_ENTRY",
                      "value": "'MARKET_ENTRY'"
                    },
                    {
                      "name": "REGULATORY_COMPLIANCE",
                      "value": "'REGULATORY_COMPLIANCE'"
                    },
                    {
                      "name": "PARTNERSHIP_DEVELOPMENT",
                      "value": "'PARTNERSHIP_DEVELOPMENT'"
                    },
                    {
                      "name": "MARKET_SCALING",
                      "value": "'MARKET_SCALING'"
                    }
                  ],
                  "lineNumber": 18
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          "system2": {
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "NarrativeState",
                  "body": "theme?: string;\r\n    tone?: string;\r\n    setting?: string;\r\n    arc?: string;\r\n    pacing?: string;",
                  "properties": {
                    "theme": {
                      "name": "theme",
                      "type": "string",
                      "optional": true
                    },
                    "tone": {
                      "name": "tone",
                      "type": "string",
                      "optional": true
                    },
                    "setting": {
                      "name": "setting",
                      "type": "string",
                      "optional": true
                    },
                    "arc": {
                      "name": "arc",
                      "type": "string",
                      "optional": true
                    },
                    "pacing": {
                      "name": "pacing",
                      "type": "string",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 955
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          }
        },
        "CharacterState_plot_characters": {
          "typeName": "CharacterState",
          "system1": {
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\bridge-types.ts",
                "definition": {
                  "name": "CharacterState",
                  "body": "name: string;                     // キャラクター名\r\n  currentState: string;             // 現在の状態\r\n  role: string;                     // 章での役割\r\n  goals?: string[];                 // 目標\r\n  conflicts?: string[];             // 葛藤\r\n  relationshipFocus?: string[];     // 焦点を当てる関係性\r\n  development?: string;             // 発展方向",
                  "properties": {
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "currentState": {
                      "name": "currentState",
                      "type": "string",
                      "optional": false
                    },
                    "role": {
                      "name": "role",
                      "type": "string",
                      "optional": false
                    },
                    "goals": {
                      "name": "goals",
                      "type": "string[]",
                      "optional": true
                    },
                    "conflicts": {
                      "name": "conflicts",
                      "type": "string[]",
                      "optional": true
                    },
                    "relationshipFocus": {
                      "name": "relationshipFocus",
                      "type": "string[]",
                      "optional": true
                    },
                    "development": {
                      "name": "development",
                      "type": "string",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 28
                },
                "system": "plot",
                "module": "plot"
              }
            ]
          },
          "system2": {
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterState",
                  "body": "isActive: boolean;\r\n    relationships?: Relationship[];\r\n    developmentStage: number;\r\n    lastAppearance: number | null;\r\n    emotionalState: EmotionalState;\r\n    summary?: string;\r\n    significance?: number;\r\n    hasDialogue?: boolean;\r\n    changes?: CharacterChangeInfo[];\r\n    development: string;\r\n    isDeceased?: boolean;              // 死亡状態\r\n    maritalStatus?: string;            // 結婚状態\r\n    spouseId?: string | null;          // 配偶者ID\r\n    parentIds?: string[];              // 親キャラクターID\r\n    childrenIds?: string[];            // 子キャラクターID\r\n    skills?: string[];                 // 習得スキル\r\n    location?: string;                 // 現在地\r\n    lastStateChange?: {                // 最終状態変化\r\n        type: string;\r\n        chapterNumber: number;\r\n        description: string;",
                  "properties": {
                    "isActive": {
                      "name": "isActive",
                      "type": "boolean",
                      "optional": false
                    },
                    "relationships": {
                      "name": "relationships",
                      "type": "Relationship[]",
                      "optional": true
                    },
                    "developmentStage": {
                      "name": "developmentStage",
                      "type": "number",
                      "optional": false
                    },
                    "lastAppearance": {
                      "name": "lastAppearance",
                      "type": "number | null",
                      "optional": false
                    },
                    "emotionalState": {
                      "name": "emotionalState",
                      "type": "EmotionalState",
                      "optional": false
                    },
                    "summary": {
                      "name": "summary",
                      "type": "string",
                      "optional": true
                    },
                    "significance": {
                      "name": "significance",
                      "type": "number",
                      "optional": true
                    },
                    "hasDialogue": {
                      "name": "hasDialogue",
                      "type": "boolean",
                      "optional": true
                    },
                    "changes": {
                      "name": "changes",
                      "type": "CharacterChangeInfo[]",
                      "optional": true
                    },
                    "development": {
                      "name": "development",
                      "type": "string",
                      "optional": false
                    },
                    "isDeceased": {
                      "name": "isDeceased",
                      "type": "boolean",
                      "optional": true
                    },
                    "maritalStatus": {
                      "name": "maritalStatus",
                      "type": "string",
                      "optional": true
                    },
                    "spouseId": {
                      "name": "spouseId",
                      "type": "string | null",
                      "optional": true
                    },
                    "parentIds": {
                      "name": "parentIds",
                      "type": "string[]",
                      "optional": true
                    },
                    "childrenIds": {
                      "name": "childrenIds",
                      "type": "string[]",
                      "optional": true
                    },
                    "skills": {
                      "name": "skills",
                      "type": "string[]",
                      "optional": true
                    },
                    "location": {
                      "name": "location",
                      "type": "string",
                      "optional": true
                    },
                    "lastStateChange": {
                      "name": "lastStateChange",
                      "type": "{                // 最終状態変化",
                      "optional": true
                    },
                    "type": {
                      "name": "type",
                      "type": "string",
                      "optional": false
                    },
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 164
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          }
        },
        "CharacterState_plot_memory": {
          "typeName": "CharacterState",
          "system1": {
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\bridge-types.ts",
                "definition": {
                  "name": "CharacterState",
                  "body": "name: string;                     // キャラクター名\r\n  currentState: string;             // 現在の状態\r\n  role: string;                     // 章での役割\r\n  goals?: string[];                 // 目標\r\n  conflicts?: string[];             // 葛藤\r\n  relationshipFocus?: string[];     // 焦点を当てる関係性\r\n  development?: string;             // 発展方向",
                  "properties": {
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "currentState": {
                      "name": "currentState",
                      "type": "string",
                      "optional": false
                    },
                    "role": {
                      "name": "role",
                      "type": "string",
                      "optional": false
                    },
                    "goals": {
                      "name": "goals",
                      "type": "string[]",
                      "optional": true
                    },
                    "conflicts": {
                      "name": "conflicts",
                      "type": "string[]",
                      "optional": true
                    },
                    "relationshipFocus": {
                      "name": "relationshipFocus",
                      "type": "string[]",
                      "optional": true
                    },
                    "development": {
                      "name": "development",
                      "type": "string",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 28
                },
                "system": "plot",
                "module": "plot"
              }
            ]
          },
          "system2": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "CharacterState",
                  "body": "name: string;\r\n    mood?: string;\r\n    development?: string;\r\n    relationships?: Relationship[];",
                  "properties": {
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "mood": {
                      "name": "mood",
                      "type": "string",
                      "optional": true
                    },
                    "development": {
                      "name": "development",
                      "type": "string",
                      "optional": true
                    },
                    "relationships": {
                      "name": "relationships",
                      "type": "Relationship[]",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 281
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          }
        },
        "ComponentStatus_plot_learning-journey": {
          "typeName": "ComponentStatus",
          "system1": {
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\section\\index.ts",
                "definition": {
                  "name": "ComponentStatus",
                  "body": "initialized: boolean;\n    healthy: boolean;\n    lastActivity: string;\n    errorCount: number;\n    operationCount: number;\n    averageResponseTime: number;",
                  "properties": {
                    "initialized": {
                      "name": "initialized",
                      "type": "boolean",
                      "optional": false
                    },
                    "healthy": {
                      "name": "healthy",
                      "type": "boolean",
                      "optional": false
                    },
                    "lastActivity": {
                      "name": "lastActivity",
                      "type": "string",
                      "optional": false
                    },
                    "errorCount": {
                      "name": "errorCount",
                      "type": "number",
                      "optional": false
                    },
                    "operationCount": {
                      "name": "operationCount",
                      "type": "number",
                      "optional": false
                    },
                    "averageResponseTime": {
                      "name": "averageResponseTime",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 120
                },
                "system": "plot",
                "module": "plot/section"
              }
            ]
          },
          "system2": {
            "system": "learning-journey",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\learning-journey\\index.ts",
                "definition": {
                  "name": "ComponentStatus",
                  "body": "conceptManager: { initialized: boolean; functional: boolean;",
                  "properties": {
                    "conceptManager": {
                      "name": "conceptManager",
                      "type": "{ initialized: boolean",
                      "optional": false
                    },
                    "functional": {
                      "name": "functional",
                      "type": "boolean",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 135
                },
                "system": "learning-journey",
                "module": "learning-journey"
              }
            ]
          }
        },
        "PerformanceMetrics_plot_memory": {
          "typeName": "PerformanceMetrics",
          "system1": {
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\section\\index.ts",
                "definition": {
                  "name": "PerformanceMetrics",
                  "body": "totalOperations: number;\n    successfulOperations: number;\n    failedOperations: number;\n    averageProcessingTime: number;\n    memorySystemHits: number;\n    cacheEfficiencyRate: number;\n    qualityScore: number;",
                  "properties": {
                    "totalOperations": {
                      "name": "totalOperations",
                      "type": "number",
                      "optional": false
                    },
                    "successfulOperations": {
                      "name": "successfulOperations",
                      "type": "number",
                      "optional": false
                    },
                    "failedOperations": {
                      "name": "failedOperations",
                      "type": "number",
                      "optional": false
                    },
                    "averageProcessingTime": {
                      "name": "averageProcessingTime",
                      "type": "number",
                      "optional": false
                    },
                    "memorySystemHits": {
                      "name": "memorySystemHits",
                      "type": "number",
                      "optional": false
                    },
                    "cacheEfficiencyRate": {
                      "name": "cacheEfficiencyRate",
                      "type": "number",
                      "optional": false
                    },
                    "qualityScore": {
                      "name": "qualityScore",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 132
                },
                "system": "plot",
                "module": "plot/section"
              }
            ]
          },
          "system2": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "PerformanceMetrics",
                  "body": "responseTime: number;\n    memoryUsage: number;\n    cacheHitRatio: number;\n    duplicateRatio: number;\n    compressionRatio: number;",
                  "properties": {
                    "responseTime": {
                      "name": "responseTime",
                      "type": "number",
                      "optional": false
                    },
                    "memoryUsage": {
                      "name": "memoryUsage",
                      "type": "number",
                      "optional": false
                    },
                    "cacheHitRatio": {
                      "name": "cacheHitRatio",
                      "type": "number",
                      "optional": false
                    },
                    "duplicateRatio": {
                      "name": "duplicateRatio",
                      "type": "number",
                      "optional": false
                    },
                    "compressionRatio": {
                      "name": "compressionRatio",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 396
                },
                "system": "memory",
                "module": "memory/core"
              },
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\system-types.ts",
                "definition": {
                  "name": "PerformanceMetrics",
                  "body": "averageResponseTime: number;\r\n    memoryUsage: number;\r\n    cpuUsage: number;\r\n    apiCalls: number;\r\n    cacheHitRate: number;\r\n    lastMeasured: string;",
                  "properties": {
                    "averageResponseTime": {
                      "name": "averageResponseTime",
                      "type": "number",
                      "optional": false
                    },
                    "memoryUsage": {
                      "name": "memoryUsage",
                      "type": "number",
                      "optional": false
                    },
                    "cpuUsage": {
                      "name": "cpuUsage",
                      "type": "number",
                      "optional": false
                    },
                    "apiCalls": {
                      "name": "apiCalls",
                      "type": "number",
                      "optional": false
                    },
                    "cacheHitRate": {
                      "name": "cacheHitRate",
                      "type": "number",
                      "optional": false
                    },
                    "lastMeasured": {
                      "name": "lastMeasured",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 107
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          }
        },
        "EmotionalCurvePoint_plot_memory": {
          "typeName": "EmotionalCurvePoint",
          "system1": {
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\section\\types.ts",
                "definition": {
                  "name": "EmotionalCurvePoint",
                  "body": "chapter: number;\r\n    emotion: string;\r\n    tension: number;",
                  "properties": {
                    "chapter": {
                      "name": "chapter",
                      "type": "number",
                      "optional": false
                    },
                    "emotion": {
                      "name": "emotion",
                      "type": "string",
                      "optional": false
                    },
                    "tension": {
                      "name": "tension",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 172
                },
                "system": "plot",
                "module": "plot/section"
              }
            ]
          },
          "system2": {
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "EmotionalCurvePoint",
                  "body": "chapter: number;\r\n    tension: number;\r\n    emotion: string;\r\n    event?: string;",
                  "properties": {
                    "chapter": {
                      "name": "chapter",
                      "type": "number",
                      "optional": false
                    },
                    "tension": {
                      "name": "tension",
                      "type": "number",
                      "optional": false
                    },
                    "emotion": {
                      "name": "emotion",
                      "type": "string",
                      "optional": false
                    },
                    "event": {
                      "name": "event",
                      "type": "string",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 306
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          }
        },
        "PlotContext_plot_characters": {
          "typeName": "PlotContext",
          "system1": {
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\types.ts",
                "definition": {
                  "name": "PlotContext",
                  "body": "mode: PlotMode;                    // 現在のプロットモード\r\n    modeInstructions: string;          // モードに応じた指示\r\n    currentArc: {                      // 現在のアーク情報\r\n        name: string;\r\n        theme: string;\r\n        approximateChapters: [number, number];",
                  "properties": {
                    "mode": {
                      "name": "mode",
                      "type": "PlotMode",
                      "optional": false
                    },
                    "modeInstructions": {
                      "name": "modeInstructions",
                      "type": "string",
                      "optional": false
                    },
                    "currentArc": {
                      "name": "currentArc",
                      "type": "{                      // 現在のアーク情報",
                      "optional": false
                    },
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "theme": {
                      "name": "theme",
                      "type": "string",
                      "optional": false
                    },
                    "approximateChapters": {
                      "name": "approximateChapters",
                      "type": "[number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 113
                },
                "system": "plot",
                "module": "plot"
              }
            ]
          },
          "system2": {
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "PlotContext",
                  "body": "/** 最近のチャプター要約 */\r\n    recentSummaries: string;\r\n    /** 重要イベント */\r\n    keyEvents: string[];\r\n    /** 現在のアーク情報 */\r\n    currentArc?: string;\r\n    /** テーマ情報 */\r\n    themes?: string[];",
                  "properties": {
                    "recentSummaries": {
                      "name": "recentSummaries",
                      "type": "string",
                      "optional": false
                    },
                    "keyEvents": {
                      "name": "keyEvents",
                      "type": "string[]",
                      "optional": false
                    },
                    "currentArc": {
                      "name": "currentArc",
                      "type": "string",
                      "optional": true
                    },
                    "themes": {
                      "name": "themes",
                      "type": "string[]",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 903
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          }
        }
      },
      "similarTypes": {
        "LiteraryInspiration_LiteraryTechnique": {
          "type1": {
            "typeName": "LiteraryInspiration",
            "system": "analysis",
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "LiteraryInspiration",
              "body": "/**\r\n     * プロット技法\r\n     */\r\n    plotTechniques: {\r\n      /**\r\n       * 技法名\r\n       */\r\n      technique: string;\r\n      \r\n      /**\r\n       * 技法の説明\r\n       */\r\n      description: string;\r\n      \r\n      /**\r\n       * 具体的な適用例\r\n       */\r\n      example: string;\r\n      \r\n      /**\r\n       * 参考となる使用例\r\n       */\r\n      reference: string;",
              "properties": {
                "plotTechniques": {
                  "name": "plotTechniques",
                  "type": "{",
                  "optional": false
                },
                "technique": {
                  "name": "technique",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "example": {
                  "name": "example",
                  "type": "string",
                  "optional": false
                },
                "reference": {
                  "name": "reference",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 202
            },
            "module": "analysis/core"
          },
          "type2": {
            "typeName": "LiteraryTechnique",
            "system": "analysis",
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "LiteraryTechnique",
              "body": "technique: string;\r\n  description: string;\r\n  example: string;\r\n  reference: string;",
              "properties": {
                "technique": {
                  "name": "technique",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "example": {
                  "name": "example",
                  "type": "string",
                  "optional": false
                },
                "reference": {
                  "name": "reference",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 174
            },
            "module": "analysis/coordinators"
          },
          "similarity": 0.8,
          "potentialMerge": false
        },
        "IAnalysisCoordinator_IOptimizationCoordinator": {
          "type1": {
            "typeName": "IAnalysisCoordinator",
            "system": "analysis",
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "IAnalysisCoordinator",
              "body": "/**\r\n   * 包括的章分析を実行する\r\n   * \r\n   * @param content 章の内容\r\n   * @param chapterNumber 章番号\r\n   * @param context 生成コンテキスト\r\n   * @returns 統合分析結果\r\n   */\r\n  analyzeChapter(\r\n    content: string,\r\n    chapterNumber: number,\r\n    context: GenerationContext\r\n  ): Promise<IntegratedAnalysisResult>;",
              "properties": {
                "content": {
                  "name": "content",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "GenerationContext",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 185
            },
            "module": "analysis/coordinators"
          },
          "type2": {
            "typeName": "IOptimizationCoordinator",
            "system": "analysis",
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "IOptimizationCoordinator",
              "body": "/**\r\n   * 包括的章最適化を実行する\r\n   * \r\n   * @param content 章の内容\r\n   * @param chapterNumber 章番号\r\n   * @param context 生成コンテキスト\r\n   * @param analysisResults 分析結果\r\n   * @returns 統合最適化結果\r\n   */\r\n  optimizeChapter(\r\n    content: string,\r\n    chapterNumber: number,\r\n    context: GenerationContext,\r\n    analysisResults: OptimizationInput\r\n  ): Promise<IntegratedOptimizationResult>;",
              "properties": {
                "content": {
                  "name": "content",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "GenerationContext",
                  "optional": false
                },
                "analysisResults": {
                  "name": "analysisResults",
                  "type": "OptimizationInput",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 391
            },
            "module": "analysis/coordinators"
          },
          "similarity": 0.75,
          "potentialMerge": false
        },
        "DepthRecommendation_MotivationEnhancement": {
          "type1": {
            "typeName": "DepthRecommendation",
            "system": "analysis",
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
            "definition": {
              "name": "DepthRecommendation",
              "body": "type: 'consistency' | 'arc' | 'motivation' | 'relationship' | 'contrast' | 'genre'; // 推奨タイプ\r\n    title: string;       // 推奨タイトル\r\n    description: string; // 詳細説明\r\n    implementation: string; // 実装方法のヒント\r\n    priority: number;    // 優先度 (0-1)",
              "properties": {
                "type": {
                  "name": "type",
                  "type": "'consistency' | 'arc' | 'motivation' | 'relationship' | 'contrast' | 'genre'",
                  "optional": false
                },
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "implementation": {
                  "name": "implementation",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 13
            },
            "module": "analysis/enhancement/character"
          },
          "type2": {
            "typeName": "MotivationEnhancement",
            "system": "analysis",
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
            "definition": {
              "name": "MotivationEnhancement",
              "body": "title: string;       // 推奨タイトル\r\n    description: string; // 詳細説明\r\n    implementation: string; // 実装方法\r\n    priority: number;    // 優先度 (0-1)",
              "properties": {
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "implementation": {
                  "name": "implementation",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 56
            },
            "module": "analysis/enhancement/character"
          },
          "similarity": 0.8,
          "potentialMerge": false
        },
        "DepthRecommendation_ContrastRecommendation": {
          "type1": {
            "typeName": "DepthRecommendation",
            "system": "analysis",
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
            "definition": {
              "name": "DepthRecommendation",
              "body": "type: 'consistency' | 'arc' | 'motivation' | 'relationship' | 'contrast' | 'genre'; // 推奨タイプ\r\n    title: string;       // 推奨タイトル\r\n    description: string; // 詳細説明\r\n    implementation: string; // 実装方法のヒント\r\n    priority: number;    // 優先度 (0-1)",
              "properties": {
                "type": {
                  "name": "type",
                  "type": "'consistency' | 'arc' | 'motivation' | 'relationship' | 'contrast' | 'genre'",
                  "optional": false
                },
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "implementation": {
                  "name": "implementation",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 13
            },
            "module": "analysis/enhancement/character"
          },
          "type2": {
            "typeName": "ContrastRecommendation",
            "system": "analysis",
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
            "definition": {
              "name": "ContrastRecommendation",
              "body": "title: string;       // 推奨タイトル\r\n    description: string; // 詳細説明\r\n    implementation: string; // 実装方法\r\n    priority: number;    // 優先度 (0-1)",
              "properties": {
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "implementation": {
                  "name": "implementation",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 77
            },
            "module": "analysis/enhancement/character"
          },
          "similarity": 0.8,
          "potentialMerge": false
        },
        "TensionPacingRecommendation_TensionRecommendation": {
          "type1": {
            "typeName": "TensionPacingRecommendation",
            "system": "analysis",
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "TensionPacingRecommendation",
              "body": "tension: {\r\n    recommendedTension: number;\r\n    reason: string;\r\n    direction: 'increase' | 'decrease' | 'maintain';",
              "properties": {
                "tension": {
                  "name": "tension",
                  "type": "{",
                  "optional": false
                },
                "recommendedTension": {
                  "name": "recommendedTension",
                  "type": "number",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                },
                "direction": {
                  "name": "direction",
                  "type": "'increase' | 'decrease' | 'maintain'",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 524
            },
            "module": "analysis/coordinators"
          },
          "type2": {
            "typeName": "TensionRecommendation",
            "system": "memory",
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "TensionRecommendation",
              "body": "recommendedTension: number;\r\n    reason: string;\r\n    direction: \"increase\" | \"decrease\" | \"maintain\" | \"establish\";",
              "properties": {
                "recommendedTension": {
                  "name": "recommendedTension",
                  "type": "number",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                },
                "direction": {
                  "name": "direction",
                  "type": "\"increase\" | \"decrease\" | \"maintain\" | \"establish\"",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 347
            },
            "module": "memory/long-term"
          },
          "similarity": 0.75,
          "potentialMerge": false
        },
        "CoordinatorFactory_INarrativeAnalysisServiceFactory": {
          "type1": {
            "typeName": "CoordinatorFactory",
            "system": "analysis",
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "CoordinatorFactory",
              "body": "/**\r\n   * 分析コーディネータを作成する\r\n   * \r\n   * @param options オプション\r\n   * @returns 分析コーディネータ\r\n   */\r\n  createAnalysisCoordinator(options?: AnalysisCoordinatorOptions): IAnalysisCoordinator;\r\n\r\n  /**\r\n   * 最適化コーディネータを作成する\r\n   * \r\n   * @param options オプション\r\n   * @returns 最適化コーディネータ\r\n   */\r\n  createOptimizationCoordinator(options?: OptimizationCoordinatorOptions): IOptimizationCoordinator;",
              "properties": {
                "options": {
                  "name": "options",
                  "type": "OptimizationCoordinatorOptions): IOptimizationCoordinator",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 555
            },
            "module": "analysis/coordinators"
          },
          "type2": {
            "typeName": "INarrativeAnalysisServiceFactory",
            "system": "analysis",
            "type": "interface",
            "file": "lib\\analysis\\services\\narrative\\interfaces.ts",
            "definition": {
              "name": "INarrativeAnalysisServiceFactory",
              "body": "/**\n   * 物語分析サービスのインスタンスを作成\n   * @param options 設定オプション\n   * @returns 物語分析サービスのインスタンス\n   */\n  createNarrativeAnalysisService(options?: NarrativeAnalysisOptions): INarrativeAnalysisService;",
              "properties": {
                "options": {
                  "name": "options",
                  "type": "NarrativeAnalysisOptions): INarrativeAnalysisService",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 130
            },
            "module": "analysis/services/narrative"
          },
          "similarity": 1,
          "potentialMerge": true
        },
        "IStyleOptimizationService_BulkOptimizationRequest": {
          "type1": {
            "typeName": "IStyleOptimizationService",
            "system": "analysis",
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\style\\interfaces.ts",
            "definition": {
              "name": "IStyleOptimizationService",
              "body": "/**\r\n   * 文体ガイダンス生成\r\n   * 文体改善のためのガイダンスを生成します\r\n   * \r\n   * @param chapterNumber 章番号\r\n   * @param context コンテキスト情報（ジャンル、テーマなど）\r\n   * @returns 文体ガイダンス\r\n   */\r\n  generateStyleGuidance(\r\n    chapterNumber: number,\r\n    context: any\r\n  ): Promise<StyleGuidance>;\r\n\r\n  /**\r\n   * 代替表現提案\r\n   * 繰り返しを避けるための代替表現を提案します\r\n   * \r\n   * @param expressionPatterns 表現パターン分析結果\r\n   * @param context コンテキスト情報（ジャンル、テーマなど）\r\n   * @returns 代替表現提案\r\n   */\r\n  suggestAlternativeExpressions(\r\n    expressionPatterns: ExpressionPatterns,\r\n    context: any\r\n  ): Promise<ExpressionAlternatives>;\r\n\r\n  /**\r\n   * 主語パターン最適化提案\r\n   * 主語の使用パターンを最適化するための提案を生成します\r\n   * \r\n   * @param subjectPatterns 主語パターン分析結果\r\n   * @param context コンテキスト情報\r\n   * @returns 主語パターン最適化提案\r\n   */\r\n  optimizeSubjectPatterns(\r\n    subjectPatterns: SubjectPatternOptimizationRequest,\r\n    context: any\r\n  ): Promise<SubjectPatternOptimization>;\r\n\r\n  /**\r\n   * 文構造の改善提案を生成\r\n   * 文の構造を改善するための提案を生成します\r\n   * \r\n   * @param styleAnalysis 文体分析結果\r\n   * @param context コンテキスト情報\r\n   * @returns 文構造改善提案\r\n   */\r\n  generateStructureRecommendations(\r\n    styleAnalysis: StyleAnalysis,\r\n    context: any\r\n  ): Promise<StructureRecommendation[]>;\r\n\r\n  /**\r\n   * 繰り返し表現の代替提案を生成\r\n   * 繰り返し使用されている表現の代替案を提案します\r\n   * \r\n   * @param repetitions 繰り返し表現のリスト\r\n   * @param context コンテキスト情報\r\n   * @returns 繰り返し表現の代替提案\r\n   */\r\n  generateRepetitionAlternatives(\r\n    repetitions: string[],\r\n    context: any\r\n  ): Promise<RepetitionAlternative[]>;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "any",
                  "optional": false
                },
                "expressionPatterns": {
                  "name": "expressionPatterns",
                  "type": "ExpressionPatterns",
                  "optional": false
                },
                "subjectPatterns": {
                  "name": "subjectPatterns",
                  "type": "SubjectPatternOptimizationRequest",
                  "optional": false
                },
                "styleAnalysis": {
                  "name": "styleAnalysis",
                  "type": "StyleAnalysis",
                  "optional": false
                },
                "repetitions": {
                  "name": "repetitions",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 44
            },
            "module": "analysis/enhancement/style"
          },
          "type2": {
            "typeName": "BulkOptimizationRequest",
            "system": "analysis",
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\style\\interfaces.ts",
            "definition": {
              "name": "BulkOptimizationRequest",
              "body": "/** 章番号 */\r\n  chapterNumber: number;\r\n  /** 文体分析結果 */\r\n  styleAnalysis: StyleAnalysis;\r\n  /** 表現パターン */\r\n  expressionPatterns: ExpressionPatterns;\r\n  /** 主語パターン分析結果 */\r\n  subjectPatterns: SubjectPatternOptimizationRequest;\r\n  /** 繰り返し表現リスト */\r\n  repetitions: string[];\r\n  /** コンテキスト情報 */\r\n  context: StyleOptimizationContext;\r\n  /** オプション */\r\n  options?: StyleOptimizationOptions;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "styleAnalysis": {
                  "name": "styleAnalysis",
                  "type": "StyleAnalysis",
                  "optional": false
                },
                "expressionPatterns": {
                  "name": "expressionPatterns",
                  "type": "ExpressionPatterns",
                  "optional": false
                },
                "subjectPatterns": {
                  "name": "subjectPatterns",
                  "type": "SubjectPatternOptimizationRequest",
                  "optional": false
                },
                "repetitions": {
                  "name": "repetitions",
                  "type": "string[]",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "StyleOptimizationContext",
                  "optional": false
                },
                "options": {
                  "name": "options",
                  "type": "StyleOptimizationOptions",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 170
            },
            "module": "analysis/enhancement/style"
          },
          "similarity": 0.8571428571428571,
          "potentialMerge": false
        },
        "MotivationEnhancement_RelationshipDynamicRecommendation": {
          "type1": {
            "typeName": "MotivationEnhancement",
            "system": "analysis",
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
            "definition": {
              "name": "MotivationEnhancement",
              "body": "title: string;       // 推奨タイトル\r\n    description: string; // 詳細説明\r\n    implementation: string; // 実装方法\r\n    priority: number;    // 優先度 (0-1)",
              "properties": {
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "implementation": {
                  "name": "implementation",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 56
            },
            "module": "analysis/enhancement/character"
          },
          "type2": {
            "typeName": "RelationshipDynamicRecommendation",
            "system": "analysis",
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
            "definition": {
              "name": "RelationshipDynamicRecommendation",
              "body": "title: string;       // 推奨タイトル\r\n    description: string; // 詳細説明\r\n    implementation: string; // 実装方法\r\n    priority: number;    // 優先度 (0-1)\r\n    targetCharacterId: string | null; // 対象キャラクターID",
              "properties": {
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "implementation": {
                  "name": "implementation",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                },
                "targetCharacterId": {
                  "name": "targetCharacterId",
                  "type": "string | null",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 66
            },
            "module": "analysis/enhancement/character"
          },
          "similarity": 0.8,
          "potentialMerge": false
        },
        "MotivationEnhancement_ContrastRecommendation": {
          "type1": {
            "typeName": "MotivationEnhancement",
            "system": "analysis",
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
            "definition": {
              "name": "MotivationEnhancement",
              "body": "title: string;       // 推奨タイトル\r\n    description: string; // 詳細説明\r\n    implementation: string; // 実装方法\r\n    priority: number;    // 優先度 (0-1)",
              "properties": {
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "implementation": {
                  "name": "implementation",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 56
            },
            "module": "analysis/enhancement/character"
          },
          "type2": {
            "typeName": "ContrastRecommendation",
            "system": "analysis",
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
            "definition": {
              "name": "ContrastRecommendation",
              "body": "title: string;       // 推奨タイトル\r\n    description: string; // 詳細説明\r\n    implementation: string; // 実装方法\r\n    priority: number;    // 優先度 (0-1)",
              "properties": {
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "implementation": {
                  "name": "implementation",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 77
            },
            "module": "analysis/enhancement/character"
          },
          "similarity": 1,
          "potentialMerge": true
        },
        "RelationshipDynamicRecommendation_ContrastRecommendation": {
          "type1": {
            "typeName": "RelationshipDynamicRecommendation",
            "system": "analysis",
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
            "definition": {
              "name": "RelationshipDynamicRecommendation",
              "body": "title: string;       // 推奨タイトル\r\n    description: string; // 詳細説明\r\n    implementation: string; // 実装方法\r\n    priority: number;    // 優先度 (0-1)\r\n    targetCharacterId: string | null; // 対象キャラクターID",
              "properties": {
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "implementation": {
                  "name": "implementation",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                },
                "targetCharacterId": {
                  "name": "targetCharacterId",
                  "type": "string | null",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 66
            },
            "module": "analysis/enhancement/character"
          },
          "type2": {
            "typeName": "ContrastRecommendation",
            "system": "analysis",
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
            "definition": {
              "name": "ContrastRecommendation",
              "body": "title: string;       // 推奨タイトル\r\n    description: string; // 詳細説明\r\n    implementation: string; // 実装方法\r\n    priority: number;    // 優先度 (0-1)",
              "properties": {
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "implementation": {
                  "name": "implementation",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 77
            },
            "module": "analysis/enhancement/character"
          },
          "similarity": 0.8,
          "potentialMerge": false
        },
        "StoryEvent_BusinessStoryEvent": {
          "type1": {
            "typeName": "StoryEvent",
            "system": "analysis",
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\tension\\interfaces.ts",
            "definition": {
              "name": "StoryEvent",
              "body": "/** イベントタイプ */\r\n  type: string;\r\n  /** 重要度 (0-1) */\r\n  significance: number;\r\n  /** 追加情報 */\r\n  details?: any;",
              "properties": {
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": false
                },
                "details": {
                  "name": "details",
                  "type": "any",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 43
            },
            "module": "analysis/enhancement/tension"
          },
          "type2": {
            "typeName": "BusinessStoryEvent",
            "system": "memory",
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "BusinessStoryEvent",
              "body": "type: BusinessEventType;\r\n    significance: number;\r\n    details?: any;",
              "properties": {
                "type": {
                  "name": "type",
                  "type": "BusinessEventType",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": false
                },
                "details": {
                  "name": "details",
                  "type": "any",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 562
            },
            "module": "memory/long-term"
          },
          "similarity": 1,
          "potentialMerge": true
        },
        "AnalyzeReaderExperienceResponse_GenerateImprovementsRequest": {
          "type1": {
            "typeName": "AnalyzeReaderExperienceResponse",
            "system": "analysis",
            "type": "interface",
            "file": "lib\\analysis\\services\\reader\\interfaces.ts",
            "definition": {
              "name": "AnalyzeReaderExperienceResponse",
              "body": "analysis: ReaderExperienceAnalysis;",
              "properties": {
                "analysis": {
                  "name": "analysis",
                  "type": "ReaderExperienceAnalysis",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 55
            },
            "module": "analysis/services/reader"
          },
          "type2": {
            "typeName": "GenerateImprovementsRequest",
            "system": "analysis",
            "type": "interface",
            "file": "lib\\analysis\\services\\reader\\interfaces.ts",
            "definition": {
              "name": "GenerateImprovementsRequest",
              "body": "analysis: ReaderExperienceAnalysis;",
              "properties": {
                "analysis": {
                  "name": "analysis",
                  "type": "ReaderExperienceAnalysis",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 60
            },
            "module": "analysis/services/reader"
          },
          "similarity": 1,
          "potentialMerge": true
        },
        "CharacterCreatedEventData_CharacterCreatedEvent": {
          "type1": {
            "typeName": "CharacterCreatedEventData",
            "system": "characters",
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterCreatedEventData",
              "body": "character: Character;",
              "properties": {
                "character": {
                  "name": "character",
                  "type": "Character",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 1204
            },
            "module": "characters/core"
          },
          "type2": {
            "typeName": "CharacterCreatedEvent",
            "system": "characters",
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "CharacterCreatedEvent",
              "body": "/** 作成されたキャラクター */\r\n    character: Character;",
              "properties": {
                "character": {
                  "name": "character",
                  "type": "Character",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 65
            },
            "module": "characters/events"
          },
          "similarity": 1,
          "potentialMerge": true
        },
        "CharacterUpdatedEventData_CharacterUpdatedEvent": {
          "type1": {
            "typeName": "CharacterUpdatedEventData",
            "system": "characters",
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterUpdatedEventData",
              "body": "characterId: string;\r\n    changes: Partial<CharacterData>;\r\n    previousState?: Partial<Character>;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "changes": {
                  "name": "changes",
                  "type": "Partial<CharacterData>",
                  "optional": false
                },
                "previousState": {
                  "name": "previousState",
                  "type": "Partial<Character>",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 1211
            },
            "module": "characters/core"
          },
          "type2": {
            "typeName": "CharacterUpdatedEvent",
            "system": "characters",
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "CharacterUpdatedEvent",
              "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 更新されたキャラクター */\r\n    character: Character;\r\n    /** 変更内容 */\r\n    changes: Partial<CharacterData>;\r\n    /** 更新前の状態 */\r\n    previousState?: Partial<Character>;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "character": {
                  "name": "character",
                  "type": "Character",
                  "optional": false
                },
                "changes": {
                  "name": "changes",
                  "type": "Partial<CharacterData>",
                  "optional": false
                },
                "previousState": {
                  "name": "previousState",
                  "type": "Partial<Character>",
                  "optional": true
                }
              },
              "isGeneric": true,
              "extendsOther": true,
              "lineNumber": 73
            },
            "module": "characters/events"
          },
          "similarity": 0.75,
          "potentialMerge": false
        },
        "RelationshipUpdatedEventData_RelationshipCreatedEvent": {
          "type1": {
            "typeName": "RelationshipUpdatedEventData",
            "system": "characters",
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "RelationshipUpdatedEventData",
              "body": "char1Id: string;\r\n    char2Id: string;\r\n    relationship: Relationship;\r\n    previousRelationship?: Relationship;",
              "properties": {
                "char1Id": {
                  "name": "char1Id",
                  "type": "string",
                  "optional": false
                },
                "char2Id": {
                  "name": "char2Id",
                  "type": "string",
                  "optional": false
                },
                "relationship": {
                  "name": "relationship",
                  "type": "Relationship",
                  "optional": false
                },
                "previousRelationship": {
                  "name": "previousRelationship",
                  "type": "Relationship",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 1220
            },
            "module": "characters/core"
          },
          "type2": {
            "typeName": "RelationshipCreatedEvent",
            "system": "characters",
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "RelationshipCreatedEvent",
              "body": "/** キャラクター1のID */\r\n    char1Id: string;\r\n    /** キャラクター2のID */\r\n    char2Id: string;\r\n    /** 作成された関係性 */\r\n    relationship: Relationship;",
              "properties": {
                "char1Id": {
                  "name": "char1Id",
                  "type": "string",
                  "optional": false
                },
                "char2Id": {
                  "name": "char2Id",
                  "type": "string",
                  "optional": false
                },
                "relationship": {
                  "name": "relationship",
                  "type": "Relationship",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 155
            },
            "module": "characters/events"
          },
          "similarity": 0.75,
          "potentialMerge": false
        },
        "RelationshipUpdatedEventData_RelationshipUpdatedEvent": {
          "type1": {
            "typeName": "RelationshipUpdatedEventData",
            "system": "characters",
            "type": "interface",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "RelationshipUpdatedEventData",
              "body": "char1Id: string;\r\n    char2Id: string;\r\n    relationship: Relationship;\r\n    previousRelationship?: Relationship;",
              "properties": {
                "char1Id": {
                  "name": "char1Id",
                  "type": "string",
                  "optional": false
                },
                "char2Id": {
                  "name": "char2Id",
                  "type": "string",
                  "optional": false
                },
                "relationship": {
                  "name": "relationship",
                  "type": "Relationship",
                  "optional": false
                },
                "previousRelationship": {
                  "name": "previousRelationship",
                  "type": "Relationship",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 1220
            },
            "module": "characters/core"
          },
          "type2": {
            "typeName": "RelationshipUpdatedEvent",
            "system": "characters",
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "RelationshipUpdatedEvent",
              "body": "/** キャラクター1のID */\r\n    char1Id: string;\r\n    /** キャラクター2のID */\r\n    char2Id: string;\r\n    /** 更新された関係性 */\r\n    relationship: Relationship;\r\n    /** 更新前の関係性 */\r\n    previousRelationship?: Relationship;",
              "properties": {
                "char1Id": {
                  "name": "char1Id",
                  "type": "string",
                  "optional": false
                },
                "char2Id": {
                  "name": "char2Id",
                  "type": "string",
                  "optional": false
                },
                "relationship": {
                  "name": "relationship",
                  "type": "Relationship",
                  "optional": false
                },
                "previousRelationship": {
                  "name": "previousRelationship",
                  "type": "Relationship",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 167
            },
            "module": "characters/events"
          },
          "similarity": 1,
          "potentialMerge": true
        },
        "CharacterType_CharacterRole": {
          "type1": {
            "typeName": "CharacterType",
            "system": "characters",
            "type": "type",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterType",
              "definition": "'MAIN' | 'SUB' | 'MOB'",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": false,
              "lineNumber": 13
            },
            "module": "characters/core"
          },
          "type2": {
            "typeName": "CharacterRole",
            "system": "characters",
            "type": "type",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterRole",
              "definition": "'PROTAGONIST' | 'ANTAGONIST' | 'MENTOR' | 'ALLY' | 'RIVAL' | 'OTHER'",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": false,
              "lineNumber": 18
            },
            "module": "characters/core"
          },
          "similarity": 0.712991452991453,
          "potentialMerge": false
        },
        "CharacterType_ChangeType": {
          "type1": {
            "typeName": "CharacterType",
            "system": "characters",
            "type": "type",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "CharacterType",
              "definition": "'MAIN' | 'SUB' | 'MOB'",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": false,
              "lineNumber": 13
            },
            "module": "characters/core"
          },
          "type2": {
            "typeName": "ChangeType",
            "system": "characters",
            "type": "type",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "ChangeType",
              "definition": "'GROWTH' | 'TEMPORARY' | 'CONTRADICTION'",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": false,
              "lineNumber": 847
            },
            "module": "characters/core"
          },
          "similarity": 0.7212820512820513,
          "potentialMerge": false
        },
        "EventHandler_TypedEventHandler": {
          "type1": {
            "typeName": "EventHandler",
            "system": "characters",
            "type": "type",
            "file": "lib\\characters\\core\\types.ts",
            "definition": {
              "name": "EventHandler",
              "definition": "(data: T) => void | Promise<void>",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": true,
              "lineNumber": 1249
            },
            "module": "characters/core"
          },
          "type2": {
            "typeName": "TypedEventHandler",
            "system": "characters",
            "type": "type",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "TypedEventHandler",
              "definition": "(data: EventTypeToPayloadMap[E]) => void | Promise<void>",
              "isUnion": true,
              "isIntersection": false,
              "isGeneric": true,
              "lineNumber": 514
            },
            "module": "characters/events"
          },
          "similarity": 0.7856019151846785,
          "potentialMerge": false
        },
        "CharacterPromotedEvent_CharacterDemotedEvent": {
          "type1": {
            "typeName": "CharacterPromotedEvent",
            "system": "characters",
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "CharacterPromotedEvent",
              "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 元のタイプ */\r\n    fromType: string;\r\n    /** 新しいタイプ */\r\n    toType: string;\r\n    /** 昇格理由 */\r\n    reason?: string;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "fromType": {
                  "name": "fromType",
                  "type": "string",
                  "optional": false
                },
                "toType": {
                  "name": "toType",
                  "type": "string",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 97
            },
            "module": "characters/events"
          },
          "type2": {
            "typeName": "CharacterDemotedEvent",
            "system": "characters",
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "CharacterDemotedEvent",
              "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 元のタイプ */\r\n    fromType: string;\r\n    /** 新しいタイプ */\r\n    toType: string;\r\n    /** 降格理由 */\r\n    reason?: string;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "fromType": {
                  "name": "fromType",
                  "type": "string",
                  "optional": false
                },
                "toType": {
                  "name": "toType",
                  "type": "string",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 111
            },
            "module": "characters/events"
          },
          "similarity": 1,
          "potentialMerge": true
        },
        "RelationshipCreatedEvent_RelationshipUpdatedEvent": {
          "type1": {
            "typeName": "RelationshipCreatedEvent",
            "system": "characters",
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "RelationshipCreatedEvent",
              "body": "/** キャラクター1のID */\r\n    char1Id: string;\r\n    /** キャラクター2のID */\r\n    char2Id: string;\r\n    /** 作成された関係性 */\r\n    relationship: Relationship;",
              "properties": {
                "char1Id": {
                  "name": "char1Id",
                  "type": "string",
                  "optional": false
                },
                "char2Id": {
                  "name": "char2Id",
                  "type": "string",
                  "optional": false
                },
                "relationship": {
                  "name": "relationship",
                  "type": "Relationship",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 155
            },
            "module": "characters/events"
          },
          "type2": {
            "typeName": "RelationshipUpdatedEvent",
            "system": "characters",
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "RelationshipUpdatedEvent",
              "body": "/** キャラクター1のID */\r\n    char1Id: string;\r\n    /** キャラクター2のID */\r\n    char2Id: string;\r\n    /** 更新された関係性 */\r\n    relationship: Relationship;\r\n    /** 更新前の関係性 */\r\n    previousRelationship?: Relationship;",
              "properties": {
                "char1Id": {
                  "name": "char1Id",
                  "type": "string",
                  "optional": false
                },
                "char2Id": {
                  "name": "char2Id",
                  "type": "string",
                  "optional": false
                },
                "relationship": {
                  "name": "relationship",
                  "type": "Relationship",
                  "optional": false
                },
                "previousRelationship": {
                  "name": "previousRelationship",
                  "type": "Relationship",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 167
            },
            "module": "characters/events"
          },
          "similarity": 0.75,
          "potentialMerge": false
        },
        "RelationshipStrengthenedEvent_RelationshipWeakenedEvent": {
          "type1": {
            "typeName": "RelationshipStrengthenedEvent",
            "system": "characters",
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "RelationshipStrengthenedEvent",
              "body": "/** キャラクター1のID */\r\n    char1Id: string;\r\n    /** キャラクター2のID */\r\n    char2Id: string;\r\n    /** 関係性タイプ */\r\n    relationType: string;\r\n    /** 以前の強度 */\r\n    previousStrength: number;\r\n    /** 新しい強度 */\r\n    newStrength: number;\r\n    /** 強化の理由 */\r\n    reason?: string;",
              "properties": {
                "char1Id": {
                  "name": "char1Id",
                  "type": "string",
                  "optional": false
                },
                "char2Id": {
                  "name": "char2Id",
                  "type": "string",
                  "optional": false
                },
                "relationType": {
                  "name": "relationType",
                  "type": "string",
                  "optional": false
                },
                "previousStrength": {
                  "name": "previousStrength",
                  "type": "number",
                  "optional": false
                },
                "newStrength": {
                  "name": "newStrength",
                  "type": "number",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 193
            },
            "module": "characters/events"
          },
          "type2": {
            "typeName": "RelationshipWeakenedEvent",
            "system": "characters",
            "type": "interface",
            "file": "lib\\characters\\events\\event-types.ts",
            "definition": {
              "name": "RelationshipWeakenedEvent",
              "body": "/** キャラクター1のID */\r\n    char1Id: string;\r\n    /** キャラクター2のID */\r\n    char2Id: string;\r\n    /** 関係性タイプ */\r\n    relationType: string;\r\n    /** 以前の強度 */\r\n    previousStrength: number;\r\n    /** 新しい強度 */\r\n    newStrength: number;\r\n    /** 弱化の理由 */\r\n    reason?: string;",
              "properties": {
                "char1Id": {
                  "name": "char1Id",
                  "type": "string",
                  "optional": false
                },
                "char2Id": {
                  "name": "char2Id",
                  "type": "string",
                  "optional": false
                },
                "relationType": {
                  "name": "relationType",
                  "type": "string",
                  "optional": false
                },
                "previousStrength": {
                  "name": "previousStrength",
                  "type": "number",
                  "optional": false
                },
                "newStrength": {
                  "name": "newStrength",
                  "type": "number",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": true,
              "lineNumber": 211
            },
            "module": "characters/events"
          },
          "similarity": 1,
          "potentialMerge": true
        },
        "RollbackStep_SolutionStep": {
          "type1": {
            "typeName": "RollbackStep",
            "system": "memory",
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "RollbackStep",
              "body": "stepId: string;\r\n    description: string;\r\n    order: number;\r\n    duration: string;\r\n    validation: string[];",
              "properties": {
                "stepId": {
                  "name": "stepId",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "order": {
                  "name": "order",
                  "type": "number",
                  "optional": false
                },
                "duration": {
                  "name": "duration",
                  "type": "string",
                  "optional": false
                },
                "validation": {
                  "name": "validation",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 834
            },
            "module": "memory/long-term"
          },
          "type2": {
            "typeName": "SolutionStep",
            "system": "memory",
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "SolutionStep",
              "body": "stepId: string;\r\n    description: string;\r\n    order: number;\r\n    duration: string;\r\n    validation: string;\r\n    rollback?: string;",
              "properties": {
                "stepId": {
                  "name": "stepId",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "order": {
                  "name": "order",
                  "type": "number",
                  "optional": false
                },
                "duration": {
                  "name": "duration",
                  "type": "string",
                  "optional": false
                },
                "validation": {
                  "name": "validation",
                  "type": "string",
                  "optional": false
                },
                "rollback": {
                  "name": "rollback",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1039
            },
            "module": "memory/long-term"
          },
          "similarity": 0.8333333333333334,
          "potentialMerge": false
        }
      },
      "namingConflicts": {
        "LiteraryInspiration": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "LiteraryInspiration",
              "body": "plotTechniques: LiteraryTechnique[];\r\n  characterTechniques: LiteraryTechnique[];\r\n  atmosphereTechniques: LiteraryTechnique[];",
              "properties": {
                "plotTechniques": {
                  "name": "plotTechniques",
                  "type": "LiteraryTechnique[]",
                  "optional": false
                },
                "characterTechniques": {
                  "name": "characterTechniques",
                  "type": "LiteraryTechnique[]",
                  "optional": false
                },
                "atmosphereTechniques": {
                  "name": "atmosphereTechniques",
                  "type": "LiteraryTechnique[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 164
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "LiteraryInspiration",
              "body": "/**\r\n     * プロット技法\r\n     */\r\n    plotTechniques: {\r\n      /**\r\n       * 技法名\r\n       */\r\n      technique: string;\r\n      \r\n      /**\r\n       * 技法の説明\r\n       */\r\n      description: string;\r\n      \r\n      /**\r\n       * 具体的な適用例\r\n       */\r\n      example: string;\r\n      \r\n      /**\r\n       * 参考となる使用例\r\n       */\r\n      reference: string;",
              "properties": {
                "plotTechniques": {
                  "name": "plotTechniques",
                  "type": "{",
                  "optional": false
                },
                "technique": {
                  "name": "technique",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "example": {
                  "name": "example",
                  "type": "string",
                  "optional": false
                },
                "reference": {
                  "name": "reference",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 202
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "LiteraryTechnique": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "LiteraryTechnique",
              "body": "technique: string;\r\n  description: string;\r\n  example: string;\r\n  reference: string;",
              "properties": {
                "technique": {
                  "name": "technique",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "example": {
                  "name": "example",
                  "type": "string",
                  "optional": false
                },
                "reference": {
                  "name": "reference",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 174
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "LiteraryTechnique",
              "body": "/**\r\n     * 技法名\r\n     */\r\n    techniqueName: string;\r\n    \r\n    /**\r\n     * 技法の説明\r\n     */\r\n    description: string;\r\n    \r\n    /**\r\n     * 具体的な使用例\r\n     */\r\n    example: string;\r\n    \r\n    /**\r\n     * 期待される効果\r\n     */\r\n    effect: string;\r\n    \r\n    /**\r\n     * 適切なジャンル\r\n     */\r\n    suitableGenres: string[];\r\n    \r\n    /**\r\n     * テーマとの関連性（0-1）\r\n     */\r\n    themeRelevance: number;",
              "properties": {
                "techniqueName": {
                  "name": "techniqueName",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "example": {
                  "name": "example",
                  "type": "string",
                  "optional": false
                },
                "effect": {
                  "name": "effect",
                  "type": "string",
                  "optional": false
                },
                "suitableGenres": {
                  "name": "suitableGenres",
                  "type": "string[]",
                  "optional": false
                },
                "themeRelevance": {
                  "name": "themeRelevance",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 167
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "ThemeEnhancement": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "ThemeEnhancement",
              "body": "theme: string;\r\n  currentStrength: number;\r\n  suggestion: string;\r\n  approach: string;\r\n  example: string;",
              "properties": {
                "theme": {
                  "name": "theme",
                  "type": "string",
                  "optional": false
                },
                "currentStrength": {
                  "name": "currentStrength",
                  "type": "number",
                  "optional": false
                },
                "suggestion": {
                  "name": "suggestion",
                  "type": "string",
                  "optional": false
                },
                "approach": {
                  "name": "approach",
                  "type": "string",
                  "optional": false
                },
                "example": {
                  "name": "example",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 417
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "ThemeEnhancement",
              "body": "/**\r\n     * テーマ名\r\n     */\r\n    theme: string;\r\n    \r\n    /**\r\n     * 現在の強度（0-1）\r\n     */\r\n    currentStrength?: number;\r\n    \r\n    /**\r\n     * 具体的な改善提案\r\n     */\r\n    suggestion: string;\r\n    \r\n    /**\r\n     * 使用するアプローチ（象徴、対比、メタファーなど）\r\n     */\r\n    approach?: string;\r\n    \r\n    /**\r\n     * 具体例\r\n     */\r\n    example?: string;\r\n    \r\n    /**\r\n     * 期待される効果\r\n     */\r\n    impact?: string;",
              "properties": {
                "theme": {
                  "name": "theme",
                  "type": "string",
                  "optional": false
                },
                "currentStrength": {
                  "name": "currentStrength",
                  "type": "number",
                  "optional": true
                },
                "suggestion": {
                  "name": "suggestion",
                  "type": "string",
                  "optional": false
                },
                "approach": {
                  "name": "approach",
                  "type": "string",
                  "optional": true
                },
                "example": {
                  "name": "example",
                  "type": "string",
                  "optional": true
                },
                "impact": {
                  "name": "impact",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 132
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "SymbolicElement": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "SymbolicElement",
              "body": "element: string;\r\n  meaning: string;\r\n  usage: string;\r\n  chapter: number;",
              "properties": {
                "element": {
                  "name": "element",
                  "type": "string",
                  "optional": false
                },
                "meaning": {
                  "name": "meaning",
                  "type": "string",
                  "optional": false
                },
                "usage": {
                  "name": "usage",
                  "type": "string",
                  "optional": false
                },
                "chapter": {
                  "name": "chapter",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 429
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "SymbolicElement",
              "body": "/**\r\n     * 関連するテーマ\r\n     */\r\n    theme: string;\r\n    \r\n    /**\r\n     * 象徴の名前/種類\r\n     */\r\n    symbolName: string;\r\n    \r\n    /**\r\n     * 象徴の説明\r\n     */\r\n    description: string;\r\n    \r\n    /**\r\n     * 物語での使用方法\r\n     */\r\n    usage: string;\r\n    \r\n    /**\r\n     * 期待される効果\r\n     */\r\n    effect: string;\r\n    \r\n    /**\r\n     * 使用時の注意点\r\n     */\r\n    caution: string;",
              "properties": {
                "theme": {
                  "name": "theme",
                  "type": "string",
                  "optional": false
                },
                "symbolName": {
                  "name": "symbolName",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "usage": {
                  "name": "usage",
                  "type": "string",
                  "optional": false
                },
                "effect": {
                  "name": "effect",
                  "type": "string",
                  "optional": false
                },
                "caution": {
                  "name": "caution",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 252
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "ForeshadowingOpportunity": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "ForeshadowingOpportunity",
              "body": "opportunity: string;\r\n  placement: string;\r\n  resolution: string;\r\n  impact: number;",
              "properties": {
                "opportunity": {
                  "name": "opportunity",
                  "type": "string",
                  "optional": false
                },
                "placement": {
                  "name": "placement",
                  "type": "string",
                  "optional": false
                },
                "resolution": {
                  "name": "resolution",
                  "type": "string",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 440
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "ForeshadowingOpportunity",
              "body": "/**\r\n     * 伏線要素の説明\r\n     */\r\n    element: string;\r\n    \r\n    /**\r\n     * テキスト内の位置の説明\r\n     */\r\n    textPosition: string;\r\n    \r\n    /**\r\n     * 将来の展開での活用方法\r\n     */\r\n    possibleDevelopments: string[];\r\n    \r\n    /**\r\n     * 推奨される解決章\r\n     */\r\n    suggestedResolutionChapter: number;\r\n    \r\n    /**\r\n     * 関連するテーマ\r\n     */\r\n    relatedTheme: string;\r\n    \r\n    /**\r\n     * 重要度（0-1）\r\n     */\r\n    importance: number;",
              "properties": {
                "element": {
                  "name": "element",
                  "type": "string",
                  "optional": false
                },
                "textPosition": {
                  "name": "textPosition",
                  "type": "string",
                  "optional": false
                },
                "possibleDevelopments": {
                  "name": "possibleDevelopments",
                  "type": "string[]",
                  "optional": false
                },
                "suggestedResolutionChapter": {
                  "name": "suggestedResolutionChapter",
                  "type": "number",
                  "optional": false
                },
                "relatedTheme": {
                  "name": "relatedTheme",
                  "type": "string",
                  "optional": false
                },
                "importance": {
                  "name": "importance",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 287
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "SubjectPatternOptimization": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "SubjectPatternOptimization",
              "body": "score: number;\r\n  problems: string[];\r\n  suggestions: string[];",
              "properties": {
                "score": {
                  "name": "score",
                  "type": "number",
                  "optional": false
                },
                "problems": {
                  "name": "problems",
                  "type": "string[]",
                  "optional": false
                },
                "suggestions": {
                  "name": "suggestions",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 470
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "SubjectPatternOptimization",
              "body": "/** 主語多様性スコア（0-1、高いほど多様） */\r\n    score: number;\r\n    /** 主語パターンの問題点リスト */\r\n    problems: string[];\r\n    /** 改善提案リスト */\r\n    suggestions: string[];",
              "properties": {
                "score": {
                  "name": "score",
                  "type": "number",
                  "optional": false
                },
                "problems": {
                  "name": "problems",
                  "type": "string[]",
                  "optional": false
                },
                "suggestions": {
                  "name": "suggestions",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 11
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "StructureRecommendation": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "StructureRecommendation",
              "body": "aspect: string;\r\n  recommendation: string;\r\n  reason: string;\r\n  example: string;",
              "properties": {
                "aspect": {
                  "name": "aspect",
                  "type": "string",
                  "optional": false
                },
                "recommendation": {
                  "name": "recommendation",
                  "type": "string",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                },
                "example": {
                  "name": "example",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 480
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "StructureRecommendation",
              "body": "/** 改善のタイプ（バリエーション、リズム、修飾語、主述関係など） */\r\n    type: string;\r\n    /** 現在の文体における問題や改善点 */\r\n    issue: string;\r\n    /** 具体的な改善アイデア */\r\n    suggestion: string;\r\n    /** 改善例 */\r\n    example: {\r\n      /** 改善前の例 */\r\n      before: string;\r\n      /** 改善後の例 */\r\n      after: string;",
              "properties": {
                "type": {
                  "name": "type",
                  "type": "string",
                  "optional": false
                },
                "issue": {
                  "name": "issue",
                  "type": "string",
                  "optional": false
                },
                "suggestion": {
                  "name": "suggestion",
                  "type": "string",
                  "optional": false
                },
                "example": {
                  "name": "example",
                  "type": "{",
                  "optional": false
                },
                "before": {
                  "name": "before",
                  "type": "string",
                  "optional": false
                },
                "after": {
                  "name": "after",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 24
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "RepetitionAlternative": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "RepetitionAlternative",
              "body": "originalPhrase: string;\r\n  alternatives: string[];\r\n  context: string;",
              "properties": {
                "originalPhrase": {
                  "name": "originalPhrase",
                  "type": "string",
                  "optional": false
                },
                "alternatives": {
                  "name": "alternatives",
                  "type": "string[]",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 491
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\types.ts",
            "definition": {
              "name": "RepetitionAlternative",
              "body": "/** 元の表現 */\r\n    original: string;\r\n    /** 代替表現のリスト */\r\n    alternatives: string[];\r\n    /** 表現が使われる一般的な文脈 */\r\n    context: string;",
              "properties": {
                "original": {
                  "name": "original",
                  "type": "string",
                  "optional": false
                },
                "alternatives": {
                  "name": "alternatives",
                  "type": "string[]",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 44
            },
            "system": "analysis",
            "module": "analysis/core"
          }
        ],
        "DepthRecommendation": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "DepthRecommendation",
              "body": "aspect: string;\r\n  title: string;\r\n  description: string;\r\n  implementation: string;\r\n  priority: number;",
              "properties": {
                "aspect": {
                  "name": "aspect",
                  "type": "string",
                  "optional": false
                },
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "implementation": {
                  "name": "implementation",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 501
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
            "definition": {
              "name": "DepthRecommendation",
              "body": "type: 'consistency' | 'arc' | 'motivation' | 'relationship' | 'contrast' | 'genre'; // 推奨タイプ\r\n    title: string;       // 推奨タイトル\r\n    description: string; // 詳細説明\r\n    implementation: string; // 実装方法のヒント\r\n    priority: number;    // 優先度 (0-1)",
              "properties": {
                "type": {
                  "name": "type",
                  "type": "'consistency' | 'arc' | 'motivation' | 'relationship' | 'contrast' | 'genre'",
                  "optional": false
                },
                "title": {
                  "name": "title",
                  "type": "string",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "implementation": {
                  "name": "implementation",
                  "type": "string",
                  "optional": false
                },
                "priority": {
                  "name": "priority",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 13
            },
            "system": "analysis",
            "module": "analysis/enhancement/character"
          }
        ],
        "CharacterDepthPrompt": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "CharacterDepthPrompt",
              "body": "characterId: string;\r\n  focusAreas: string[];\r\n  promptText: string;\r\n  expectedOutcome: string;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "focusAreas": {
                  "name": "focusAreas",
                  "type": "string[]",
                  "optional": false
                },
                "promptText": {
                  "name": "promptText",
                  "type": "string",
                  "optional": false
                },
                "expectedOutcome": {
                  "name": "expectedOutcome",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 513
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
            "definition": {
              "name": "CharacterDepthPrompt",
              "body": "characterId: string;      // キャラクターID\r\n    characterName: string;    // キャラクター名\r\n    focusAreas: string;       // 焦点を当てるべき領域\r\n    implementationSuggestions: string; // 実装提案\r\n    psychologicalInsight: string; // 心理的洞察",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "characterName": {
                  "name": "characterName",
                  "type": "string",
                  "optional": false
                },
                "focusAreas": {
                  "name": "focusAreas",
                  "type": "string",
                  "optional": false
                },
                "implementationSuggestions": {
                  "name": "implementationSuggestions",
                  "type": "string",
                  "optional": false
                },
                "psychologicalInsight": {
                  "name": "psychologicalInsight",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 87
            },
            "system": "analysis",
            "module": "analysis/enhancement/character"
          }
        ],
        "TensionPacingRecommendation": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "TensionPacingRecommendation",
              "body": "tension: {\r\n    recommendedTension: number;\r\n    reason: string;\r\n    direction: 'increase' | 'decrease' | 'maintain';",
              "properties": {
                "tension": {
                  "name": "tension",
                  "type": "{",
                  "optional": false
                },
                "recommendedTension": {
                  "name": "recommendedTension",
                  "type": "number",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                },
                "direction": {
                  "name": "direction",
                  "type": "'increase' | 'decrease' | 'maintain'",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 524
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\tension\\interfaces.ts",
            "definition": {
              "name": "TensionPacingRecommendation",
              "body": "/** テンション推奨 */\r\n  tension: TensionRecommendation;\r\n  /** ペーシング推奨 */\r\n  pacing: PacingRecommendation;",
              "properties": {
                "tension": {
                  "name": "tension",
                  "type": "TensionRecommendation",
                  "optional": false
                },
                "pacing": {
                  "name": "pacing",
                  "type": "PacingRecommendation",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 33
            },
            "system": "analysis",
            "module": "analysis/enhancement/tension"
          }
        ],
        "TensionCurvePoint": [
          {
            "type": "interface",
            "file": "lib\\analysis\\coordinators\\interfaces.ts",
            "definition": {
              "name": "TensionCurvePoint",
              "body": "chapter: number;\r\n  tension: number;\r\n  description: string;\r\n  keyEvents: string[];",
              "properties": {
                "chapter": {
                  "name": "chapter",
                  "type": "number",
                  "optional": false
                },
                "tension": {
                  "name": "tension",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "keyEvents": {
                  "name": "keyEvents",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 540
            },
            "system": "analysis",
            "module": "analysis/coordinators"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\tension\\interfaces.ts",
            "definition": {
              "name": "TensionCurvePoint",
              "body": "/** 章番号 */\r\n  chapterNumber: number;\r\n  /** テンション値 (0-1) */\r\n  tension: number;\r\n  /** 説明 */\r\n  description?: string;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "tension": {
                  "name": "tension",
                  "type": "number",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": true
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 55
            },
            "system": "analysis",
            "module": "analysis/enhancement/tension"
          }
        ],
        "SubjectPatternOptimizationRequest": [
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\interfaces.ts",
            "definition": {
              "name": "SubjectPatternOptimizationRequest",
              "body": "repeatedSubjects: Array<{\r\n    subject: string;\r\n    count: number;",
              "properties": {
                "repeatedSubjects": {
                  "name": "repeatedSubjects",
                  "type": "Array<{",
                  "optional": false
                },
                "subject": {
                  "name": "subject",
                  "type": "string",
                  "optional": false
                },
                "count": {
                  "name": "count",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 23
            },
            "system": "analysis",
            "module": "analysis/core"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\style\\interfaces.ts",
            "definition": {
              "name": "SubjectPatternOptimizationRequest",
              "body": "/** 繰り返されている主語のパターン */\r\n  repeatedSubjects: Array<{\r\n    /** 主語 */\r\n    subject: string;\r\n    /** 繰り返し回数 */\r\n    count: number;",
              "properties": {
                "repeatedSubjects": {
                  "name": "repeatedSubjects",
                  "type": "Array<{",
                  "optional": false
                },
                "subject": {
                  "name": "subject",
                  "type": "string",
                  "optional": false
                },
                "count": {
                  "name": "count",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 26
            },
            "system": "analysis",
            "module": "analysis/enhancement/style"
          }
        ],
        "IStyleOptimizationService": [
          {
            "type": "interface",
            "file": "lib\\analysis\\core\\interfaces.ts",
            "definition": {
              "name": "IStyleOptimizationService",
              "body": "/**\r\n   * 文体ガイダンス生成\r\n   * 文体改善のためのガイダンスを生成します\r\n   * \r\n   * @param styleAnalysis 文体分析結果\r\n   * @param context コンテキスト情報（ジャンル、テーマなど）\r\n   * @param chapterNumber 章番号\r\n   * @returns 文体ガイダンス\r\n   */\r\n  generateStyleGuidance(\r\n    chapterNumber: number,  // ← 実装に合わせる\r\n    context: any\r\n  ): Promise<StyleGuidance>;\r\n  \r\n  /**\r\n   * 代替表現提案\r\n   * 繰り返しを避けるための代替表現を提案します\r\n   * \r\n   * @param expressionPatterns 表現パターン分析結果\r\n   * @param context コンテキスト情報（ジャンル、テーマなど）\r\n   * @returns 代替表現提案\r\n   */\r\n  suggestAlternativeExpressions(\r\n    expressionPatterns: ExpressionPatterns,\r\n    context: any\r\n  ): Promise<ExpressionAlternatives>;\r\n  \r\n  /**\r\n   * 主語パターン最適化提案\r\n   * 主語の使用パターンを最適化するための提案を生成します\r\n   * \r\n   * @param subjectPatterns 主語パターン分析結果\r\n   * @param context コンテキスト情報\r\n   * @returns 主語パターン最適化提案\r\n   */\r\n  optimizeSubjectPatterns(\r\n    subjectPatterns: SubjectPatternOptimizationRequest,\r\n    context: any\r\n  ): Promise<SubjectPatternOptimization>;\r\n  \r\n  /**\r\n   * 文構造の改善提案を生成\r\n   * 文の構造を改善するための提案を生成します\r\n   * \r\n   * @param styleAnalysis 文体分析結果\r\n   * @param context コンテキスト情報\r\n   * @returns 文構造改善提案\r\n   */\r\n  generateStructureRecommendations(\r\n    styleAnalysis: StyleAnalysis,\r\n    context: any\r\n  ): Promise<StructureRecommendation[]>;\r\n  \r\n  /**\r\n   * 繰り返し表現の代替提案を生成\r\n   * 繰り返し使用されている表現の代替案を提案します\r\n   * \r\n   * @param repetitions 繰り返し表現のリスト\r\n   * @param context コンテキスト情報\r\n   * @returns 繰り返し表現の代替提案\r\n   */\r\n  generateRepetitionAlternatives(\r\n    repetitions: string[],\r\n    context: any\r\n  ): Promise<RepetitionAlternative[]>;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "any",
                  "optional": false
                },
                "expressionPatterns": {
                  "name": "expressionPatterns",
                  "type": "ExpressionPatterns",
                  "optional": false
                },
                "subjectPatterns": {
                  "name": "subjectPatterns",
                  "type": "SubjectPatternOptimizationRequest",
                  "optional": false
                },
                "styleAnalysis": {
                  "name": "styleAnalysis",
                  "type": "StyleAnalysis",
                  "optional": false
                },
                "repetitions": {
                  "name": "repetitions",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 37
            },
            "system": "analysis",
            "module": "analysis/core"
          },
          {
            "type": "interface",
            "file": "lib\\analysis\\enhancement\\style\\interfaces.ts",
            "definition": {
              "name": "IStyleOptimizationService",
              "body": "/**\r\n   * 文体ガイダンス生成\r\n   * 文体改善のためのガイダンスを生成します\r\n   * \r\n   * @param chapterNumber 章番号\r\n   * @param context コンテキスト情報（ジャンル、テーマなど）\r\n   * @returns 文体ガイダンス\r\n   */\r\n  generateStyleGuidance(\r\n    chapterNumber: number,\r\n    context: any\r\n  ): Promise<StyleGuidance>;\r\n\r\n  /**\r\n   * 代替表現提案\r\n   * 繰り返しを避けるための代替表現を提案します\r\n   * \r\n   * @param expressionPatterns 表現パターン分析結果\r\n   * @param context コンテキスト情報（ジャンル、テーマなど）\r\n   * @returns 代替表現提案\r\n   */\r\n  suggestAlternativeExpressions(\r\n    expressionPatterns: ExpressionPatterns,\r\n    context: any\r\n  ): Promise<ExpressionAlternatives>;\r\n\r\n  /**\r\n   * 主語パターン最適化提案\r\n   * 主語の使用パターンを最適化するための提案を生成します\r\n   * \r\n   * @param subjectPatterns 主語パターン分析結果\r\n   * @param context コンテキスト情報\r\n   * @returns 主語パターン最適化提案\r\n   */\r\n  optimizeSubjectPatterns(\r\n    subjectPatterns: SubjectPatternOptimizationRequest,\r\n    context: any\r\n  ): Promise<SubjectPatternOptimization>;\r\n\r\n  /**\r\n   * 文構造の改善提案を生成\r\n   * 文の構造を改善するための提案を生成します\r\n   * \r\n   * @param styleAnalysis 文体分析結果\r\n   * @param context コンテキスト情報\r\n   * @returns 文構造改善提案\r\n   */\r\n  generateStructureRecommendations(\r\n    styleAnalysis: StyleAnalysis,\r\n    context: any\r\n  ): Promise<StructureRecommendation[]>;\r\n\r\n  /**\r\n   * 繰り返し表現の代替提案を生成\r\n   * 繰り返し使用されている表現の代替案を提案します\r\n   * \r\n   * @param repetitions 繰り返し表現のリスト\r\n   * @param context コンテキスト情報\r\n   * @returns 繰り返し表現の代替提案\r\n   */\r\n  generateRepetitionAlternatives(\r\n    repetitions: string[],\r\n    context: any\r\n  ): Promise<RepetitionAlternative[]>;",
              "properties": {
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "context": {
                  "name": "context",
                  "type": "any",
                  "optional": false
                },
                "expressionPatterns": {
                  "name": "expressionPatterns",
                  "type": "ExpressionPatterns",
                  "optional": false
                },
                "subjectPatterns": {
                  "name": "subjectPatterns",
                  "type": "SubjectPatternOptimizationRequest",
                  "optional": false
                },
                "styleAnalysis": {
                  "name": "styleAnalysis",
                  "type": "StyleAnalysis",
                  "optional": false
                },
                "repetitions": {
                  "name": "repetitions",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": true,
              "extendsOther": false,
              "lineNumber": 44
            },
            "system": "analysis",
            "module": "analysis/enhancement/style"
          }
        ],
        "CacheStatisticsData": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "CacheStatisticsData",
              "body": "// ✅ export を削除\r\n  hitRatio: number;\r\n  missRatio: number;\r\n  totalRequests: number;\r\n  cacheSize: number;\r\n  lastOptimization: string;\r\n  hitRate?: number; // 互換性のため\r\n  avgAccessTime?: number; // 互換性のため\r\n  memoryUsage?: {\r\n    shortTerm: number;\r\n    midTerm: number;\r\n    longTerm: number;",
              "properties": {
                "hitRatio": {
                  "name": "hitRatio",
                  "type": "number",
                  "optional": false
                },
                "missRatio": {
                  "name": "missRatio",
                  "type": "number",
                  "optional": false
                },
                "totalRequests": {
                  "name": "totalRequests",
                  "type": "number",
                  "optional": false
                },
                "cacheSize": {
                  "name": "cacheSize",
                  "type": "number",
                  "optional": false
                },
                "lastOptimization": {
                  "name": "lastOptimization",
                  "type": "string",
                  "optional": false
                },
                "hitRate": {
                  "name": "hitRate",
                  "type": "number",
                  "optional": true
                },
                "avgAccessTime": {
                  "name": "avgAccessTime",
                  "type": "number",
                  "optional": true
                },
                "memoryUsage": {
                  "name": "memoryUsage",
                  "type": "{",
                  "optional": true
                },
                "shortTerm": {
                  "name": "shortTerm",
                  "type": "number",
                  "optional": false
                },
                "midTerm": {
                  "name": "midTerm",
                  "type": "number",
                  "optional": false
                },
                "longTerm": {
                  "name": "longTerm",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 87
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "CacheStatisticsData",
              "body": "// UnifiedAccessAPI 用プロパティ\n    hitRatio: number;\n    missRatio: number;\n    totalRequests: number;\n    cacheSize: number;\n    lastOptimization: string;\n    evictionCount: number;\n    \n    // CacheCoordinator 用プロパティ（互換性のため）\n    totalEntries?: number;\n    hitRate?: number;\n    avgAccessTime?: number;\n    memoryUsage?: {\n        shortTerm: number;\n        midTerm: number;\n        longTerm: number;",
              "properties": {
                "hitRatio": {
                  "name": "hitRatio",
                  "type": "number",
                  "optional": false
                },
                "missRatio": {
                  "name": "missRatio",
                  "type": "number",
                  "optional": false
                },
                "totalRequests": {
                  "name": "totalRequests",
                  "type": "number",
                  "optional": false
                },
                "cacheSize": {
                  "name": "cacheSize",
                  "type": "number",
                  "optional": false
                },
                "lastOptimization": {
                  "name": "lastOptimization",
                  "type": "string",
                  "optional": false
                },
                "evictionCount": {
                  "name": "evictionCount",
                  "type": "number",
                  "optional": false
                },
                "totalEntries": {
                  "name": "totalEntries",
                  "type": "number",
                  "optional": true
                },
                "hitRate": {
                  "name": "hitRate",
                  "type": "number",
                  "optional": true
                },
                "avgAccessTime": {
                  "name": "avgAccessTime",
                  "type": "number",
                  "optional": true
                },
                "memoryUsage": {
                  "name": "memoryUsage",
                  "type": "{",
                  "optional": true
                },
                "shortTerm": {
                  "name": "shortTerm",
                  "type": "number",
                  "optional": false
                },
                "midTerm": {
                  "name": "midTerm",
                  "type": "number",
                  "optional": false
                },
                "longTerm": {
                  "name": "longTerm",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 352
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "QualityMetricsData": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "QualityMetricsData",
              "body": "// ✅ export を削除\r\n  dataIntegrity: {\r\n    score: number;\r\n    violations: number;\r\n    lastValidation: number;\r\n    criticalIssues: string[];",
              "properties": {
                "dataIntegrity": {
                  "name": "dataIntegrity",
                  "type": "{",
                  "optional": false
                },
                "score": {
                  "name": "score",
                  "type": "number",
                  "optional": false
                },
                "violations": {
                  "name": "violations",
                  "type": "number",
                  "optional": false
                },
                "lastValidation": {
                  "name": "lastValidation",
                  "type": "number",
                  "optional": false
                },
                "criticalIssues": {
                  "name": "criticalIssues",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 203
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "QualityMetricsData",
              "body": "chapterQualityHistory: ChapterQualityRecord[];\n    systemQualityMetrics: SystemQualityMetricsRecord[];\n    diagnosticHistory: DiagnosticHistoryRecord[];\n    systemHealthMetrics: SystemHealthMetricsRecord[];",
              "properties": {
                "chapterQualityHistory": {
                  "name": "chapterQualityHistory",
                  "type": "ChapterQualityRecord[]",
                  "optional": false
                },
                "systemQualityMetrics": {
                  "name": "systemQualityMetrics",
                  "type": "SystemQualityMetricsRecord[]",
                  "optional": false
                },
                "diagnosticHistory": {
                  "name": "diagnosticHistory",
                  "type": "DiagnosticHistoryRecord[]",
                  "optional": false
                },
                "systemHealthMetrics": {
                  "name": "systemHealthMetrics",
                  "type": "SystemHealthMetricsRecord[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 280
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "MemoryLevel": [
          {
            "type": "enum",
            "file": "lib\\memory\\core\\interfaces.ts",
            "definition": {
              "name": "MemoryLevel",
              "body": "// ✅ enum は直接エクスポート可能\r\n  SHORT_TERM = 'short-term',\r\n  MID_TERM = 'mid-term',\r\n  LONG_TERM = 'long-term'",
              "values": [
                {
                  "name": "// ✅ enum は直接エクスポート可能\r\n  SHORT_TERM",
                  "value": "'short-term'"
                },
                {
                  "name": "MID_TERM",
                  "value": "'mid-term'"
                },
                {
                  "name": "LONG_TERM",
                  "value": "'long-term'"
                }
              ],
              "lineNumber": 374
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "enum",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "MemoryLevel",
              "body": "SHORT_TERM = 'SHORT_TERM',\n    MID_TERM = 'MID_TERM',\n    LONG_TERM = 'LONG_TERM'",
              "values": [
                {
                  "name": "SHORT_TERM",
                  "value": "'SHORT_TERM'"
                },
                {
                  "name": "MID_TERM",
                  "value": "'MID_TERM'"
                },
                {
                  "name": "LONG_TERM",
                  "value": "'LONG_TERM'"
                }
              ],
              "lineNumber": 49
            },
            "system": "memory",
            "module": "memory/core"
          }
        ],
        "PerformanceMetrics": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "PerformanceMetrics",
              "body": "responseTime: number;\n    memoryUsage: number;\n    cacheHitRatio: number;\n    duplicateRatio: number;\n    compressionRatio: number;",
              "properties": {
                "responseTime": {
                  "name": "responseTime",
                  "type": "number",
                  "optional": false
                },
                "memoryUsage": {
                  "name": "memoryUsage",
                  "type": "number",
                  "optional": false
                },
                "cacheHitRatio": {
                  "name": "cacheHitRatio",
                  "type": "number",
                  "optional": false
                },
                "duplicateRatio": {
                  "name": "duplicateRatio",
                  "type": "number",
                  "optional": false
                },
                "compressionRatio": {
                  "name": "compressionRatio",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 396
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "PerformanceMetrics",
              "body": "averageResponseTime: number;\r\n    memoryUsage: number;\r\n    cpuUsage: number;\r\n    apiCalls: number;\r\n    cacheHitRate: number;\r\n    lastMeasured: string;",
              "properties": {
                "averageResponseTime": {
                  "name": "averageResponseTime",
                  "type": "number",
                  "optional": false
                },
                "memoryUsage": {
                  "name": "memoryUsage",
                  "type": "number",
                  "optional": false
                },
                "cpuUsage": {
                  "name": "cpuUsage",
                  "type": "number",
                  "optional": false
                },
                "apiCalls": {
                  "name": "apiCalls",
                  "type": "number",
                  "optional": false
                },
                "cacheHitRate": {
                  "name": "cacheHitRate",
                  "type": "number",
                  "optional": false
                },
                "lastMeasured": {
                  "name": "lastMeasured",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 107
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "MemorySystemStatus": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "MemorySystemStatus",
              "body": "initialized: boolean;\n    lastUpdateTime: string;\n    memoryLayers: {\n        shortTerm: MemoryLayerStatus;\n        midTerm: MemoryLayerStatus;\n        longTerm: MemoryLayerStatus;",
              "properties": {
                "initialized": {
                  "name": "initialized",
                  "type": "boolean",
                  "optional": false
                },
                "lastUpdateTime": {
                  "name": "lastUpdateTime",
                  "type": "string",
                  "optional": false
                },
                "memoryLayers": {
                  "name": "memoryLayers",
                  "type": "{",
                  "optional": false
                },
                "shortTerm": {
                  "name": "shortTerm",
                  "type": "MemoryLayerStatus",
                  "optional": false
                },
                "midTerm": {
                  "name": "midTerm",
                  "type": "MemoryLayerStatus",
                  "optional": false
                },
                "longTerm": {
                  "name": "longTerm",
                  "type": "MemoryLayerStatus",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 411
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\types.ts",
            "definition": {
              "name": "MemorySystemStatus",
              "body": "initialized: boolean;\r\n    shortTerm: {\r\n        entryCount: number;\r\n        lastUpdateTime: string | null;",
              "properties": {
                "initialized": {
                  "name": "initialized",
                  "type": "boolean",
                  "optional": false
                },
                "shortTerm": {
                  "name": "shortTerm",
                  "type": "{",
                  "optional": false
                },
                "entryCount": {
                  "name": "entryCount",
                  "type": "number",
                  "optional": false
                },
                "lastUpdateTime": {
                  "name": "lastUpdateTime",
                  "type": "string | null",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 605
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "CharacterDevelopmentRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "CharacterDevelopmentRecord",
              "body": "characterId: string;\n    developmentPhase: string;\n    changes: any[];\n    timestamp: string;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "developmentPhase": {
                  "name": "developmentPhase",
                  "type": "string",
                  "optional": false
                },
                "changes": {
                  "name": "changes",
                  "type": "any[]",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 614
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "CharacterDevelopmentRecord",
              "body": "recordId: string;\r\n  chapterNumber: number;\r\n  developmentType: 'personality' | 'skill' | 'relationship' | 'goal' | 'backstory';\r\n  description: string;\r\n  significance: number; // 0-10\r\n  impact: string[];\r\n  timestamp: string;\r\n  relatedEvents: string[];",
              "properties": {
                "recordId": {
                  "name": "recordId",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "developmentType": {
                  "name": "developmentType",
                  "type": "'personality' | 'skill' | 'relationship' | 'goal' | 'backstory'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "string[]",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "relatedEvents": {
                  "name": "relatedEvents",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 439
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "CharacterChangeRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "CharacterChangeRecord",
              "body": "characterId: string;\n    changeType: string;\n    oldValue: any;\n    newValue: any;\n    timestamp: string;",
              "properties": {
                "characterId": {
                  "name": "characterId",
                  "type": "string",
                  "optional": false
                },
                "changeType": {
                  "name": "changeType",
                  "type": "string",
                  "optional": false
                },
                "oldValue": {
                  "name": "oldValue",
                  "type": "any",
                  "optional": false
                },
                "newValue": {
                  "name": "newValue",
                  "type": "any",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 624
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "CharacterChangeRecord",
              "body": "recordId: string;\r\n  chapterNumber: number;\r\n  changeType: 'state' | 'personality' | 'relationship' | 'backstory' | 'metadata';\r\n  fieldChanged: string;\r\n  previousValue: any;\r\n  newValue: any;\r\n  reason: string;\r\n  source: string;\r\n  timestamp: string;\r\n  significance: number; // 0-10",
              "properties": {
                "recordId": {
                  "name": "recordId",
                  "type": "string",
                  "optional": false
                },
                "chapterNumber": {
                  "name": "chapterNumber",
                  "type": "number",
                  "optional": false
                },
                "changeType": {
                  "name": "changeType",
                  "type": "'state' | 'personality' | 'relationship' | 'backstory' | 'metadata'",
                  "optional": false
                },
                "fieldChanged": {
                  "name": "fieldChanged",
                  "type": "string",
                  "optional": false
                },
                "previousValue": {
                  "name": "previousValue",
                  "type": "any",
                  "optional": false
                },
                "newValue": {
                  "name": "newValue",
                  "type": "any",
                  "optional": false
                },
                "reason": {
                  "name": "reason",
                  "type": "string",
                  "optional": false
                },
                "source": {
                  "name": "source",
                  "type": "string",
                  "optional": false
                },
                "timestamp": {
                  "name": "timestamp",
                  "type": "string",
                  "optional": false
                },
                "significance": {
                  "name": "significance",
                  "type": "number",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 467
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "CharacterMasterRecord": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "CharacterMasterRecord",
              "body": "consolidatedCharacter: any;\n    sources: string[];\n    lastUpdate: string;",
              "properties": {
                "consolidatedCharacter": {
                  "name": "consolidatedCharacter",
                  "type": "any",
                  "optional": false
                },
                "sources": {
                  "name": "sources",
                  "type": "string[]",
                  "optional": false
                },
                "lastUpdate": {
                  "name": "lastUpdate",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 769
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\character-database-types.ts",
            "definition": {
              "name": "CharacterMasterRecord",
              "body": "// 基本情報（統合済み）\r\n  id: string;\r\n  name: string;\r\n  type: CharacterType;\r\n  description: string;\r\n  \r\n  // 統合メタデータ\r\n  masterVersion: string;\r\n  consolidatedFrom: ConsolidationSource[];\r\n  lastConsolidated: string;\r\n  conflictResolutions: CharacterConflictResolution[];\r\n  \r\n  // 拡張情報\r\n  personality: CharacterPersonality;\r\n  backstory: CharacterBackstory;\r\n  relationships: CharacterRelationship[];\r\n  state: ExtendedCharacterState;\r\n  \r\n  // 履歴情報\r\n  developmentHistory: CharacterDevelopmentRecord[];\r\n  appearanceHistory: CharacterAppearanceRecord[];\r\n  changeHistory: CharacterChangeRecord[];\r\n  \r\n  // 統計情報\r\n  statistics: CharacterStatistics;\r\n  \r\n  // フォーマット済みデータ\r\n  formattedData: FormattedCharacterData;\r\n  \r\n  // メタデータ\r\n  metadata: CharacterMetadata;",
              "properties": {
                "id": {
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                "name": {
                  "name": "name",
                  "type": "string",
                  "optional": false
                },
                "type": {
                  "name": "type",
                  "type": "CharacterType",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "masterVersion": {
                  "name": "masterVersion",
                  "type": "string",
                  "optional": false
                },
                "consolidatedFrom": {
                  "name": "consolidatedFrom",
                  "type": "ConsolidationSource[]",
                  "optional": false
                },
                "lastConsolidated": {
                  "name": "lastConsolidated",
                  "type": "string",
                  "optional": false
                },
                "conflictResolutions": {
                  "name": "conflictResolutions",
                  "type": "CharacterConflictResolution[]",
                  "optional": false
                },
                "personality": {
                  "name": "personality",
                  "type": "CharacterPersonality",
                  "optional": false
                },
                "backstory": {
                  "name": "backstory",
                  "type": "CharacterBackstory",
                  "optional": false
                },
                "relationships": {
                  "name": "relationships",
                  "type": "CharacterRelationship[]",
                  "optional": false
                },
                "state": {
                  "name": "state",
                  "type": "ExtendedCharacterState",
                  "optional": false
                },
                "developmentHistory": {
                  "name": "developmentHistory",
                  "type": "CharacterDevelopmentRecord[]",
                  "optional": false
                },
                "appearanceHistory": {
                  "name": "appearanceHistory",
                  "type": "CharacterAppearanceRecord[]",
                  "optional": false
                },
                "changeHistory": {
                  "name": "changeHistory",
                  "type": "CharacterChangeRecord[]",
                  "optional": false
                },
                "statistics": {
                  "name": "statistics",
                  "type": "CharacterStatistics",
                  "optional": false
                },
                "formattedData": {
                  "name": "formattedData",
                  "type": "FormattedCharacterData",
                  "optional": false
                },
                "metadata": {
                  "name": "metadata",
                  "type": "CharacterMetadata",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 10
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "PromptGenerationPattern": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "PromptGenerationPattern",
              "body": "patternId: string;\n    pattern: any;\n    effectiveness: number;\n    usage: any;",
              "properties": {
                "patternId": {
                  "name": "patternId",
                  "type": "string",
                  "optional": false
                },
                "pattern": {
                  "name": "pattern",
                  "type": "any",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "number",
                  "optional": false
                },
                "usage": {
                  "name": "usage",
                  "type": "any",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 824
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "PromptGenerationPattern",
              "body": "patternId: string;\r\n    patternName: string;\r\n    category: 'context' | 'instruction' | 'template' | 'variable' | 'format';\r\n    description: string;\r\n\r\n    // パターン定義\r\n    pattern: string;\r\n    variables: PromptVariable[];\r\n    conditions: PromptCondition[];\r\n\r\n    // 効果測定\r\n    effectiveness: EffectivenessMetrics;\r\n    usageStatistics: UsageStatistics;\r\n\r\n    // 適用条件\r\n    applicableGenres: string[];\r\n    applicableScenarios: string[];\r\n    chapterTypes: string[];\r\n\r\n    // 学習データ\r\n    successCases: SuccessCase[];\r\n    failureCases: FailureCase[];\r\n    optimizationHistory: OptimizationRecord[];\r\n\r\n    // メタデータ\r\n    createdAt: string;\r\n    lastUsed: string;\r\n    lastOptimized: string;\r\n    version: string;\r\n    tags: string[];",
              "properties": {
                "patternId": {
                  "name": "patternId",
                  "type": "string",
                  "optional": false
                },
                "patternName": {
                  "name": "patternName",
                  "type": "string",
                  "optional": false
                },
                "category": {
                  "name": "category",
                  "type": "'context' | 'instruction' | 'template' | 'variable' | 'format'",
                  "optional": false
                },
                "description": {
                  "name": "description",
                  "type": "string",
                  "optional": false
                },
                "pattern": {
                  "name": "pattern",
                  "type": "string",
                  "optional": false
                },
                "variables": {
                  "name": "variables",
                  "type": "PromptVariable[]",
                  "optional": false
                },
                "conditions": {
                  "name": "conditions",
                  "type": "PromptCondition[]",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "EffectivenessMetrics",
                  "optional": false
                },
                "usageStatistics": {
                  "name": "usageStatistics",
                  "type": "UsageStatistics",
                  "optional": false
                },
                "applicableGenres": {
                  "name": "applicableGenres",
                  "type": "string[]",
                  "optional": false
                },
                "applicableScenarios": {
                  "name": "applicableScenarios",
                  "type": "string[]",
                  "optional": false
                },
                "chapterTypes": {
                  "name": "chapterTypes",
                  "type": "string[]",
                  "optional": false
                },
                "successCases": {
                  "name": "successCases",
                  "type": "SuccessCase[]",
                  "optional": false
                },
                "failureCases": {
                  "name": "failureCases",
                  "type": "FailureCase[]",
                  "optional": false
                },
                "optimizationHistory": {
                  "name": "optimizationHistory",
                  "type": "OptimizationRecord[]",
                  "optional": false
                },
                "createdAt": {
                  "name": "createdAt",
                  "type": "string",
                  "optional": false
                },
                "lastUsed": {
                  "name": "lastUsed",
                  "type": "string",
                  "optional": false
                },
                "lastOptimized": {
                  "name": "lastOptimized",
                  "type": "string",
                  "optional": false
                },
                "version": {
                  "name": "version",
                  "type": "string",
                  "optional": false
                },
                "tags": {
                  "name": "tags",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 9
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "EffectiveTemplatePattern": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "EffectiveTemplatePattern",
              "body": "templateId: string;\n    pattern: any;\n    effectiveness: number;\n    contexts: string[];",
              "properties": {
                "templateId": {
                  "name": "templateId",
                  "type": "string",
                  "optional": false
                },
                "pattern": {
                  "name": "pattern",
                  "type": "any",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "number",
                  "optional": false
                },
                "contexts": {
                  "name": "contexts",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 831
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "EffectiveTemplatePattern",
              "body": "templateId: string;\r\n    templateName: string;\r\n    category: string;\r\n\r\n    // テンプレート定義\r\n    structure: TemplateStructure;\r\n    sections: TemplateSection[];\r\n    placeholders: TemplatePlaceholder[];\r\n\r\n    // 効果データ\r\n    effectiveness: EffectivenessMetrics;\r\n    bestPractices: BestPractice[];\r\n    commonMistakes: CommonMistake[];\r\n\r\n    // 適用データ\r\n    applicableContexts: ApplicableContext[];\r\n    variations: TemplateVariation[];\r\n\r\n    // 学習データ\r\n    evolutionHistory: TemplateEvolution[];\r\n    feedbackData: FeedbackData[];\r\n\r\n    // メタデータ\r\n    createdAt: string;\r\n    lastUpdated: string;\r\n    maturityLevel: 'experimental' | 'tested' | 'proven' | 'deprecated';\r\n    maintainer: string;",
              "properties": {
                "templateId": {
                  "name": "templateId",
                  "type": "string",
                  "optional": false
                },
                "templateName": {
                  "name": "templateName",
                  "type": "string",
                  "optional": false
                },
                "category": {
                  "name": "category",
                  "type": "string",
                  "optional": false
                },
                "structure": {
                  "name": "structure",
                  "type": "TemplateStructure",
                  "optional": false
                },
                "sections": {
                  "name": "sections",
                  "type": "TemplateSection[]",
                  "optional": false
                },
                "placeholders": {
                  "name": "placeholders",
                  "type": "TemplatePlaceholder[]",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "EffectivenessMetrics",
                  "optional": false
                },
                "bestPractices": {
                  "name": "bestPractices",
                  "type": "BestPractice[]",
                  "optional": false
                },
                "commonMistakes": {
                  "name": "commonMistakes",
                  "type": "CommonMistake[]",
                  "optional": false
                },
                "applicableContexts": {
                  "name": "applicableContexts",
                  "type": "ApplicableContext[]",
                  "optional": false
                },
                "variations": {
                  "name": "variations",
                  "type": "TemplateVariation[]",
                  "optional": false
                },
                "evolutionHistory": {
                  "name": "evolutionHistory",
                  "type": "TemplateEvolution[]",
                  "optional": false
                },
                "feedbackData": {
                  "name": "feedbackData",
                  "type": "FeedbackData[]",
                  "optional": false
                },
                "createdAt": {
                  "name": "createdAt",
                  "type": "string",
                  "optional": false
                },
                "lastUpdated": {
                  "name": "lastUpdated",
                  "type": "string",
                  "optional": false
                },
                "maturityLevel": {
                  "name": "maturityLevel",
                  "type": "'experimental' | 'tested' | 'proven' | 'deprecated'",
                  "optional": false
                },
                "maintainer": {
                  "name": "maintainer",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 165
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "AnalysisPattern": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "AnalysisPattern",
              "body": "analysisType: string;\n    pattern: any;\n    accuracy: number;\n    applications: string[];",
              "properties": {
                "analysisType": {
                  "name": "analysisType",
                  "type": "string",
                  "optional": false
                },
                "pattern": {
                  "name": "pattern",
                  "type": "any",
                  "optional": false
                },
                "accuracy": {
                  "name": "accuracy",
                  "type": "number",
                  "optional": false
                },
                "applications": {
                  "name": "applications",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 838
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "AnalysisPattern",
              "body": "patternId: string;\r\n    patternName: string;\r\n    category: 'emotional' | 'narrative' | 'character' | 'structure' | 'quality';\r\n\r\n    // パターン定義\r\n    analysisType: string;\r\n    methodology: AnalysisMethodology;\r\n    parameters: AnalysisParameter[];\r\n\r\n    // 精度データ\r\n    accuracy: AccuracyMetrics;\r\n    reliability: ReliabilityMetrics;\r\n\r\n    // 適用データ\r\n    applicableGenres: string[];\r\n    inputRequirements: InputRequirement[];\r\n    outputFormat: OutputFormat;\r\n\r\n    // 学習データ\r\n    trainingData: TrainingData[];\r\n    validationResults: ValidationResult[];\r\n\r\n    // 改善履歴\r\n    improvementHistory: ImprovementRecord[];\r\n\r\n    // メタデータ\r\n    createdAt: string;\r\n    lastTrained: string;\r\n    version: string;\r\n    status: 'active' | 'testing' | 'deprecated';",
              "properties": {
                "patternId": {
                  "name": "patternId",
                  "type": "string",
                  "optional": false
                },
                "patternName": {
                  "name": "patternName",
                  "type": "string",
                  "optional": false
                },
                "category": {
                  "name": "category",
                  "type": "'emotional' | 'narrative' | 'character' | 'structure' | 'quality'",
                  "optional": false
                },
                "analysisType": {
                  "name": "analysisType",
                  "type": "string",
                  "optional": false
                },
                "methodology": {
                  "name": "methodology",
                  "type": "AnalysisMethodology",
                  "optional": false
                },
                "parameters": {
                  "name": "parameters",
                  "type": "AnalysisParameter[]",
                  "optional": false
                },
                "accuracy": {
                  "name": "accuracy",
                  "type": "AccuracyMetrics",
                  "optional": false
                },
                "reliability": {
                  "name": "reliability",
                  "type": "ReliabilityMetrics",
                  "optional": false
                },
                "applicableGenres": {
                  "name": "applicableGenres",
                  "type": "string[]",
                  "optional": false
                },
                "inputRequirements": {
                  "name": "inputRequirements",
                  "type": "InputRequirement[]",
                  "optional": false
                },
                "outputFormat": {
                  "name": "outputFormat",
                  "type": "OutputFormat",
                  "optional": false
                },
                "trainingData": {
                  "name": "trainingData",
                  "type": "TrainingData[]",
                  "optional": false
                },
                "validationResults": {
                  "name": "validationResults",
                  "type": "ValidationResult[]",
                  "optional": false
                },
                "improvementHistory": {
                  "name": "improvementHistory",
                  "type": "ImprovementRecord[]",
                  "optional": false
                },
                "createdAt": {
                  "name": "createdAt",
                  "type": "string",
                  "optional": false
                },
                "lastTrained": {
                  "name": "lastTrained",
                  "type": "string",
                  "optional": false
                },
                "version": {
                  "name": "version",
                  "type": "string",
                  "optional": false
                },
                "status": {
                  "name": "status",
                  "type": "'active' | 'testing' | 'deprecated'",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 383
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "OptimizationStrategy": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "OptimizationStrategy",
              "body": "strategyId: string;\n    strategy: any;\n    effectiveness: number;\n    contexts: string[];",
              "properties": {
                "strategyId": {
                  "name": "strategyId",
                  "type": "string",
                  "optional": false
                },
                "strategy": {
                  "name": "strategy",
                  "type": "any",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "number",
                  "optional": false
                },
                "contexts": {
                  "name": "contexts",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 845
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "OptimizationStrategy",
              "body": "strategyId: string;\r\n    strategyName: string;\r\n    category: 'performance' | 'quality' | 'efficiency' | 'resource' | 'user_experience';\r\n\r\n    // 戦略定義\r\n    objective: string;\r\n    approach: OptimizationApproach;\r\n    techniques: OptimizationTechnique[];\r\n\r\n    // 効果データ\r\n    expectedBenefits: Benefit[];\r\n    measuredImpact: ImpactMeasurement[];\r\n\r\n    // 適用データ\r\n    applicableScenarios: OptimizationScenario[];\r\n    prerequisites: Prerequisite[];\r\n    constraints: OptimizationConstraint[];\r\n\r\n    // 実装データ\r\n    implementationGuide: ImplementationGuide;\r\n    rollbackPlan: RollbackPlan;\r\n\r\n    // 監視データ\r\n    monitoringMetrics: MonitoringMetric[];\r\n    alertThresholds: AlertThreshold[];\r\n\r\n    // メタデータ\r\n    createdAt: string;\r\n    lastApplied: string;\r\n    successRate: number; // 0-1\r\n    maturityLevel: 'experimental' | 'pilot' | 'production' | 'deprecated';",
              "properties": {
                "strategyId": {
                  "name": "strategyId",
                  "type": "string",
                  "optional": false
                },
                "strategyName": {
                  "name": "strategyName",
                  "type": "string",
                  "optional": false
                },
                "category": {
                  "name": "category",
                  "type": "'performance' | 'quality' | 'efficiency' | 'resource' | 'user_experience'",
                  "optional": false
                },
                "objective": {
                  "name": "objective",
                  "type": "string",
                  "optional": false
                },
                "approach": {
                  "name": "approach",
                  "type": "OptimizationApproach",
                  "optional": false
                },
                "techniques": {
                  "name": "techniques",
                  "type": "OptimizationTechnique[]",
                  "optional": false
                },
                "expectedBenefits": {
                  "name": "expectedBenefits",
                  "type": "Benefit[]",
                  "optional": false
                },
                "measuredImpact": {
                  "name": "measuredImpact",
                  "type": "ImpactMeasurement[]",
                  "optional": false
                },
                "applicableScenarios": {
                  "name": "applicableScenarios",
                  "type": "OptimizationScenario[]",
                  "optional": false
                },
                "prerequisites": {
                  "name": "prerequisites",
                  "type": "Prerequisite[]",
                  "optional": false
                },
                "constraints": {
                  "name": "constraints",
                  "type": "OptimizationConstraint[]",
                  "optional": false
                },
                "implementationGuide": {
                  "name": "implementationGuide",
                  "type": "ImplementationGuide",
                  "optional": false
                },
                "rollbackPlan": {
                  "name": "rollbackPlan",
                  "type": "RollbackPlan",
                  "optional": false
                },
                "monitoringMetrics": {
                  "name": "monitoringMetrics",
                  "type": "MonitoringMetric[]",
                  "optional": false
                },
                "alertThresholds": {
                  "name": "alertThresholds",
                  "type": "AlertThreshold[]",
                  "optional": false
                },
                "createdAt": {
                  "name": "createdAt",
                  "type": "string",
                  "optional": false
                },
                "lastApplied": {
                  "name": "lastApplied",
                  "type": "string",
                  "optional": false
                },
                "successRate": {
                  "name": "successRate",
                  "type": "number",
                  "optional": false
                },
                "maturityLevel": {
                  "name": "maturityLevel",
                  "type": "'experimental' | 'pilot' | 'production' | 'deprecated'",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 571
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "ErrorPattern": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "ErrorPattern",
              "body": "errorType: string;\n    pattern: any;\n    frequency: number;\n    solutions: string[];",
              "properties": {
                "errorType": {
                  "name": "errorType",
                  "type": "string",
                  "optional": false
                },
                "pattern": {
                  "name": "pattern",
                  "type": "any",
                  "optional": false
                },
                "frequency": {
                  "name": "frequency",
                  "type": "number",
                  "optional": false
                },
                "solutions": {
                  "name": "solutions",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 852
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "ErrorPattern",
              "body": "patternId: string;\r\n    patternName: string;\r\n    category: 'generation' | 'analysis' | 'storage' | 'integration' | 'validation';\r\n\r\n    // パターン定義\r\n    errorType: string;\r\n    symptoms: ErrorSymptom[];\r\n    rootCauses: RootCause[];\r\n\r\n    // 発生データ\r\n    frequency: FrequencyData;\r\n    severity: SeverityData;\r\n    impact: ErrorImpact;\r\n\r\n    // 検出データ\r\n    detectionMethods: DetectionMethod[];\r\n    earlyWarnings: EarlyWarning[];\r\n\r\n    // 解決データ\r\n    solutions: ErrorSolution[];\r\n    preventionMeasures: PreventionMeasure[];\r\n\r\n    // 履歴データ\r\n    occurrenceHistory: ErrorOccurrence[];\r\n    resolutionHistory: ErrorResolution[];\r\n\r\n    // メタデータ\r\n    firstDetected: string;\r\n    lastOccurred: string;\r\n    status: 'active' | 'resolved' | 'monitoring' | 'archived';",
              "properties": {
                "patternId": {
                  "name": "patternId",
                  "type": "string",
                  "optional": false
                },
                "patternName": {
                  "name": "patternName",
                  "type": "string",
                  "optional": false
                },
                "category": {
                  "name": "category",
                  "type": "'generation' | 'analysis' | 'storage' | 'integration' | 'validation'",
                  "optional": false
                },
                "errorType": {
                  "name": "errorType",
                  "type": "string",
                  "optional": false
                },
                "symptoms": {
                  "name": "symptoms",
                  "type": "ErrorSymptom[]",
                  "optional": false
                },
                "rootCauses": {
                  "name": "rootCauses",
                  "type": "RootCause[]",
                  "optional": false
                },
                "frequency": {
                  "name": "frequency",
                  "type": "FrequencyData",
                  "optional": false
                },
                "severity": {
                  "name": "severity",
                  "type": "SeverityData",
                  "optional": false
                },
                "impact": {
                  "name": "impact",
                  "type": "ErrorImpact",
                  "optional": false
                },
                "detectionMethods": {
                  "name": "detectionMethods",
                  "type": "DetectionMethod[]",
                  "optional": false
                },
                "earlyWarnings": {
                  "name": "earlyWarnings",
                  "type": "EarlyWarning[]",
                  "optional": false
                },
                "solutions": {
                  "name": "solutions",
                  "type": "ErrorSolution[]",
                  "optional": false
                },
                "preventionMeasures": {
                  "name": "preventionMeasures",
                  "type": "PreventionMeasure[]",
                  "optional": false
                },
                "occurrenceHistory": {
                  "name": "occurrenceHistory",
                  "type": "ErrorOccurrence[]",
                  "optional": false
                },
                "resolutionHistory": {
                  "name": "resolutionHistory",
                  "type": "ErrorResolution[]",
                  "optional": false
                },
                "firstDetected": {
                  "name": "firstDetected",
                  "type": "string",
                  "optional": false
                },
                "lastOccurred": {
                  "name": "lastOccurred",
                  "type": "string",
                  "optional": false
                },
                "status": {
                  "name": "status",
                  "type": "'active' | 'resolved' | 'monitoring' | 'archived'",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 892
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ],
        "QualityImprovementStrategy": [
          {
            "type": "interface",
            "file": "lib\\memory\\core\\types.ts",
            "definition": {
              "name": "QualityImprovementStrategy",
              "body": "strategyId: string;\n    strategy: any;\n    effectiveness: number;\n    applications: string[];",
              "properties": {
                "strategyId": {
                  "name": "strategyId",
                  "type": "string",
                  "optional": false
                },
                "strategy": {
                  "name": "strategy",
                  "type": "any",
                  "optional": false
                },
                "effectiveness": {
                  "name": "effectiveness",
                  "type": "number",
                  "optional": false
                },
                "applications": {
                  "name": "applications",
                  "type": "string[]",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 859
            },
            "system": "memory",
            "module": "memory/core"
          },
          {
            "type": "interface",
            "file": "lib\\memory\\long-term\\system-types.ts",
            "definition": {
              "name": "QualityImprovementStrategy",
              "body": "strategyId: string;\r\n    strategyName: string;\r\n    category: 'content' | 'process' | 'system' | 'user_experience' | 'performance';\r\n\r\n    // 戦略定義\r\n    objective: string;\r\n    scope: string;\r\n    approach: QualityApproach;\r\n\r\n    // 品質指標\r\n    qualityMetrics: QualityMetric[];\r\n    targetLevels: QualityTarget[];\r\n\r\n    // 改善手法\r\n    techniques: QualityTechnique[];\r\n    tools: QualityTool[];\r\n\r\n    // 実装計画\r\n    implementationPlan: QualityImplementationPlan;\r\n    milestones: QualityMilestone[];\r\n\r\n    // 測定・監視\r\n    measurementFramework: MeasurementFramework;\r\n    continuousImprovement: ContinuousImprovementPlan;\r\n\r\n    // メタデータ\r\n    createdAt: string;\r\n    lastReviewed: string;\r\n    status: 'draft' | 'approved' | 'active' | 'completed' | 'suspended';\r\n    owner: string;",
              "properties": {
                "strategyId": {
                  "name": "strategyId",
                  "type": "string",
                  "optional": false
                },
                "strategyName": {
                  "name": "strategyName",
                  "type": "string",
                  "optional": false
                },
                "category": {
                  "name": "category",
                  "type": "'content' | 'process' | 'system' | 'user_experience' | 'performance'",
                  "optional": false
                },
                "objective": {
                  "name": "objective",
                  "type": "string",
                  "optional": false
                },
                "scope": {
                  "name": "scope",
                  "type": "string",
                  "optional": false
                },
                "approach": {
                  "name": "approach",
                  "type": "QualityApproach",
                  "optional": false
                },
                "qualityMetrics": {
                  "name": "qualityMetrics",
                  "type": "QualityMetric[]",
                  "optional": false
                },
                "targetLevels": {
                  "name": "targetLevels",
                  "type": "QualityTarget[]",
                  "optional": false
                },
                "techniques": {
                  "name": "techniques",
                  "type": "QualityTechnique[]",
                  "optional": false
                },
                "tools": {
                  "name": "tools",
                  "type": "QualityTool[]",
                  "optional": false
                },
                "implementationPlan": {
                  "name": "implementationPlan",
                  "type": "QualityImplementationPlan",
                  "optional": false
                },
                "milestones": {
                  "name": "milestones",
                  "type": "QualityMilestone[]",
                  "optional": false
                },
                "measurementFramework": {
                  "name": "measurementFramework",
                  "type": "MeasurementFramework",
                  "optional": false
                },
                "continuousImprovement": {
                  "name": "continuousImprovement",
                  "type": "ContinuousImprovementPlan",
                  "optional": false
                },
                "createdAt": {
                  "name": "createdAt",
                  "type": "string",
                  "optional": false
                },
                "lastReviewed": {
                  "name": "lastReviewed",
                  "type": "string",
                  "optional": false
                },
                "status": {
                  "name": "status",
                  "type": "'draft' | 'approved' | 'active' | 'completed' | 'suspended'",
                  "optional": false
                },
                "owner": {
                  "name": "owner",
                  "type": "string",
                  "optional": false
                }
              },
              "isGeneric": false,
              "extendsOther": false,
              "lineNumber": 1096
            },
            "system": "memory",
            "module": "memory/long-term"
          }
        ]
      },
      "semanticDuplicates": {
        "characterRelated": [
          {
            "typeName": "CharacterOptimization",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\coordinators\\interfaces.ts",
                "definition": {
                  "name": "CharacterOptimization",
                  "body": "depthRecommendations: { [characterId: string]: DepthRecommendation[]",
                  "properties": {
                    "depthRecommendations": {
                      "name": "depthRecommendations",
                      "type": "{ [characterId: string]: DepthRecommendation[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 312
                },
                "system": "analysis",
                "module": "analysis/coordinators"
              }
            ]
          },
          {
            "typeName": "CharacterDepthPrompt",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\coordinators\\interfaces.ts",
                "definition": {
                  "name": "CharacterDepthPrompt",
                  "body": "characterId: string;\r\n  focusAreas: string[];\r\n  promptText: string;\r\n  expectedOutcome: string;",
                  "properties": {
                    "characterId": {
                      "name": "characterId",
                      "type": "string",
                      "optional": false
                    },
                    "focusAreas": {
                      "name": "focusAreas",
                      "type": "string[]",
                      "optional": false
                    },
                    "promptText": {
                      "name": "promptText",
                      "type": "string",
                      "optional": false
                    },
                    "expectedOutcome": {
                      "name": "expectedOutcome",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 513
                },
                "system": "analysis",
                "module": "analysis/coordinators"
              },
              {
                "type": "interface",
                "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
                "definition": {
                  "name": "CharacterDepthPrompt",
                  "body": "characterId: string;      // キャラクターID\r\n    characterName: string;    // キャラクター名\r\n    focusAreas: string;       // 焦点を当てるべき領域\r\n    implementationSuggestions: string; // 実装提案\r\n    psychologicalInsight: string; // 心理的洞察",
                  "properties": {
                    "characterId": {
                      "name": "characterId",
                      "type": "string",
                      "optional": false
                    },
                    "characterName": {
                      "name": "characterName",
                      "type": "string",
                      "optional": false
                    },
                    "focusAreas": {
                      "name": "focusAreas",
                      "type": "string",
                      "optional": false
                    },
                    "implementationSuggestions": {
                      "name": "implementationSuggestions",
                      "type": "string",
                      "optional": false
                    },
                    "psychologicalInsight": {
                      "name": "psychologicalInsight",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 87
                },
                "system": "analysis",
                "module": "analysis/enhancement/character"
              }
            ]
          },
          {
            "typeName": "CharacterArcRecommendation",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
                "definition": {
                  "name": "CharacterArcRecommendation",
                  "body": "title: string;       // 推奨タイトル\r\n    description: string; // 詳細説明\r\n    suggestion: string;  // 具体的な提案\r\n    arcPhase: string;    // アークフェーズ\r\n    importance: number;  // 重要度 (0-1)",
                  "properties": {
                    "title": {
                      "name": "title",
                      "type": "string",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    },
                    "suggestion": {
                      "name": "suggestion",
                      "type": "string",
                      "optional": false
                    },
                    "arcPhase": {
                      "name": "arcPhase",
                      "type": "string",
                      "optional": false
                    },
                    "importance": {
                      "name": "importance",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 24
                },
                "system": "analysis",
                "module": "analysis/enhancement/character"
              }
            ]
          },
          {
            "typeName": "ICharacterDepthService",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
                "definition": {
                  "name": "ICharacterDepthService",
                  "body": "/**\r\n     * キャラクター深化推奨の生成\r\n     * キャラクターの心理分析に基づく深化推奨を生成します\r\n     * \r\n     * @param character キャラクター\r\n     * @param psychology キャラクター心理情報\r\n     * @param chapterNumber 章番号（コンテキスト用）\r\n     * @returns 深化推奨の配列\r\n     */\r\n    generateDepthRecommendations(\r\n        character: Character, \r\n        psychology: CharacterPsychology, \r\n        chapterNumber: number\r\n    ): Promise<DepthRecommendation[]>;\r\n    \r\n    /**\r\n     * キャラクターの一貫性分析\r\n     * 心理プロファイルや履歴に基づいて一貫性を評価します\r\n     * \r\n     * @param character キャラクター\r\n     * @param psychology 心理情報\r\n     * @param chapterNumber 現在の章番号\r\n     * @returns 一貫性分析結果\r\n     */\r\n    analyzeCharacterConsistency(\r\n        character: Character, \r\n        psychology: CharacterPsychology,\r\n        chapterNumber: number\r\n    ): Promise<ConsistencyAnalysis>;\r\n    \r\n    /**\r\n     * キャラクターの動機付け強化推奨\r\n     * キャラクターの動機の深化と説得力向上を図る\r\n     * \r\n     * @param character キャラクター\r\n     * @param psychology 心理情報\r\n     * @returns 動機強化推奨\r\n     */\r\n    enhanceCharacterMotivations(\r\n        character: Character, \r\n        psychology: CharacterPsychology\r\n    ): Promise<MotivationEnhancement[]>;\r\n    \r\n    /**\r\n     * キャラクターアークの最適化推奨\r\n     * 現在のストーリー位置でのキャラクター成長を最適化\r\n     * \r\n     * @param character キャラクター\r\n     * @param psychology 心理情報\r\n     * @param chapterNumber 章番号\r\n     * @returns アーク最適化推奨\r\n     */\r\n    optimizeCharacterArcs(\r\n        character: Character, \r\n        psychology: CharacterPsychology,\r\n        chapterNumber: number\r\n    ): Promise<CharacterArcRecommendation[]>;\r\n    \r\n    /**\r\n     * 関係性ダイナミクス推奨の生成\r\n     * キャラクター間の関係性を深化・最適化する推奨\r\n     * \r\n     * @param character キャラクター\r\n     * @param chapterNumber 章番号\r\n     * @returns 関係性推奨\r\n     */\r\n    suggestRelationshipDynamics(\r\n        character: Character,\r\n        chapterNumber: number\r\n    ): Promise<RelationshipDynamicRecommendation[]>;\r\n    \r\n    /**\r\n     * コントラスト推奨の生成\r\n     * キャラクターの独自性を際立たせる推奨\r\n     * \r\n     * @param character キャラクター\r\n     * @param chapterNumber 章番号\r\n     * @returns コントラスト推奨\r\n     */\r\n    generateContrastRecommendations(\r\n        character: Character,\r\n        chapterNumber: number\r\n    ): Promise<ContrastRecommendation[]>;\r\n    \r\n    /**\r\n     * 複数キャラクターの深化推奨生成\r\n     * 同一章に登場する複数キャラクターの深化推奨\r\n     * \r\n     * @param characters キャラクター配列\r\n     * @param chapterNumber 章番号\r\n     * @param limit 最大推奨数\r\n     * @returns キャラクターIDごとの深化推奨\r\n     */\r\n    generateMultipleCharacterRecommendations(\r\n        characters: Character[],\r\n        chapterNumber: number,\r\n        limit?: number\r\n    ): Promise<{[characterId: string]: DepthRecommendation[]",
                  "properties": {
                    "character": {
                      "name": "character",
                      "type": "Character",
                      "optional": false
                    },
                    "psychology": {
                      "name": "psychology",
                      "type": "CharacterPsychology",
                      "optional": false
                    },
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": false
                    },
                    "characters": {
                      "name": "characters",
                      "type": "Character[]",
                      "optional": false
                    },
                    "limit": {
                      "name": "limit",
                      "type": "number",
                      "optional": true
                    },
                    "characterId": {
                      "name": "characterId",
                      "type": "string]: DepthRecommendation[]",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 98
                },
                "system": "analysis",
                "module": "analysis/enhancement/character"
              }
            ]
          },
          {
            "typeName": "ICharacterAnalysisService",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\services\\character\\interfaces.ts",
                "definition": {
                  "name": "ICharacterAnalysisService",
                  "body": "/**\r\n   * キャラクターの総合分析\r\n   * キャラクターの現在の状態、変化、関係性を分析します\r\n   * \r\n   * @param {string",
                  "properties": {},
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 16
                },
                "system": "analysis",
                "module": "analysis/services/character"
              }
            ]
          },
          {
            "typeName": "ICharacterRepository",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\interfaces.ts",
                "definition": {
                  "name": "ICharacterRepository",
                  "body": "/**\r\n     * IDによるキャラクター取得\r\n     * @param id キャラクターID\r\n     * @returns キャラクターオブジェクトまたはnull\r\n     */\r\n    getCharacterById(id: string): Promise<Character | null>;\r\n  \r\n    /**\r\n     * 名前によるキャラクター取得\r\n     * @param name キャラクター名\r\n     * @returns キャラクターオブジェクトまたはnull\r\n     */\r\n    getCharacterByName(name: string): Promise<Character | null>;\r\n  \r\n    /**\r\n     * すべてのキャラクター取得\r\n     * @returns キャラクターの配列\r\n     */\r\n    getAllCharacters(): Promise<Character[]>;\r\n  \r\n    /**\r\n     * キャラクターの保存\r\n     * @param character 保存するキャラクター\r\n     */\r\n    saveCharacter(character: Character): Promise<void>;\r\n  \r\n    /**\r\n     * キャラクターの更新\r\n     * @param id キャラクターID\r\n     * @param updates 更新データ\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    updateCharacter(id: string, updates: Partial<CharacterData>): Promise<Character>;\r\n  \r\n    /**\r\n     * キャラクター状態の保存\r\n     * @param id キャラクターID\r\n     * @param state 保存する状態\r\n     */\r\n    saveCharacterState(id: string, state: CharacterState): Promise<void>;\r\n  \r\n    /**\r\n     * キャラクタープロパティの部分更新\r\n     * @param id キャラクターID\r\n     * @param path プロパティパス（ドット区切り）\r\n     * @param value 新しい値\r\n     */\r\n    updateCharacterProperty(id: string, path: string, value: any): Promise<void>;\r\n  \r\n    /**\r\n     * 特定のタイプのキャラクターのみ取得\r\n     * @param type キャラクタータイプ\r\n     * @returns 指定タイプのキャラクター配列\r\n     */\r\n    getCharactersByType(type: CharacterType): Promise<Character[]>;\r\n  \r\n    /**\r\n     * アクティブなキャラクターのみ取得\r\n     * @returns アクティブなキャラクターの配列\r\n     */\r\n    getActiveCharacters(): Promise<Character[]>;",
                  "properties": {
                    "id": {
                      "name": "id",
                      "type": "string",
                      "optional": false
                    },
                    "name": {
                      "name": "name",
                      "type": "string): Promise<Character | null>",
                      "optional": false
                    },
                    "character": {
                      "name": "character",
                      "type": "Character): Promise<void>",
                      "optional": false
                    },
                    "updates": {
                      "name": "updates",
                      "type": "Partial<CharacterData>): Promise<Character>",
                      "optional": false
                    },
                    "state": {
                      "name": "state",
                      "type": "CharacterState): Promise<void>",
                      "optional": false
                    },
                    "path": {
                      "name": "path",
                      "type": "string",
                      "optional": false
                    },
                    "value": {
                      "name": "value",
                      "type": "any): Promise<void>",
                      "optional": false
                    },
                    "type": {
                      "name": "type",
                      "type": "CharacterType): Promise<Character[]>",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 35
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "ICharacterService",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\interfaces.ts",
                "definition": {
                  "name": "ICharacterService",
                  "body": "/**\r\n     * キャラクター作成\r\n     * @param data キャラクターデータ\r\n     * @returns 作成されたキャラクター\r\n     */\r\n    createCharacter(data: CharacterData): Promise<Character>;\r\n  \r\n    /**\r\n     * キャラクター取得\r\n     * @param id キャラクターID\r\n     * @returns キャラクターオブジェクトまたはnull\r\n     */\r\n    getCharacter(id: string): Promise<Character | null>;\r\n  \r\n    /**\r\n     * キャラクター更新\r\n     * @param id キャラクターID\r\n     * @param updates 更新データ\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    updateCharacter(id: string, updates: Partial<CharacterData>): Promise<Character>;\r\n  \r\n    /**\r\n     * キャラクター登場記録\r\n     * @param id キャラクターID\r\n     * @param chapterNumber 章番号\r\n     * @param summary 概要\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    recordAppearance(id: string, chapterNumber: number, summary: string): Promise<Character>;\r\n  \r\n    /**\r\n     * インタラクション記録\r\n     * @param id キャラクターID\r\n     * @param targetId 対象キャラクターID\r\n     * @param type インタラクションタイプ\r\n     * @param data 追加データ\r\n     */\r\n    recordInteraction(id: string, targetId: string, type: string, data: any): Promise<void>;\r\n  \r\n    /**\r\n     * キャラクター発展処理\r\n     * @param id キャラクターID\r\n     * @param events 章イベント配列\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    processCharacterDevelopment(id: string, events: ChapterEvent[]): Promise<Character>;\r\n  \r\n    /**\r\n     * キャラクター設定の検証\r\n     * @param character キャラクター\r\n     * @returns 検証結果\r\n     */\r\n    validateCharacter(character: Character): Promise<ValidationResult>;\r\n  \r\n    /**\r\n     * キャラクター状態の更新\r\n     * @param id キャラクターID\r\n     * @param state 新しい状態\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    updateCharacterState(id: string, state: Partial<CharacterState>): Promise<Character>;",
                  "properties": {
                    "data": {
                      "name": "data",
                      "type": "any): Promise<void>",
                      "optional": false
                    },
                    "id": {
                      "name": "id",
                      "type": "string",
                      "optional": false
                    },
                    "updates": {
                      "name": "updates",
                      "type": "Partial<CharacterData>): Promise<Character>",
                      "optional": false
                    },
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": false
                    },
                    "summary": {
                      "name": "summary",
                      "type": "string): Promise<Character>",
                      "optional": false
                    },
                    "targetId": {
                      "name": "targetId",
                      "type": "string",
                      "optional": false
                    },
                    "type": {
                      "name": "type",
                      "type": "string",
                      "optional": false
                    },
                    "events": {
                      "name": "events",
                      "type": "ChapterEvent[]): Promise<Character>",
                      "optional": false
                    },
                    "character": {
                      "name": "character",
                      "type": "Character): Promise<ValidationResult>",
                      "optional": false
                    },
                    "state": {
                      "name": "state",
                      "type": "Partial<CharacterState>): Promise<Character>",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 277
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "ICharacterAnalyzer",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\interfaces.ts",
                "definition": {
                  "name": "ICharacterAnalyzer",
                  "body": "/**\r\n     * 変化検出\r\n     * @param baseState 基本状態\r\n     * @param currentState 現在状態\r\n     * @returns 検出された差分\r\n     */\r\n    detectChanges(baseState: any, currentState: any): CharacterDiff;\r\n  \r\n    /**\r\n     * 変化分類\r\n     * @param characterDiff キャラクター差分\r\n     * @param plotContext プロット文脈\r\n     * @returns 分類された差分\r\n     */\r\n    classifyChanges(characterDiff: CharacterDiff, plotContext?: PlotContext): Promise<CharacterDiff>;\r\n  \r\n    /**\r\n     * アクション検証\r\n     * @param character キャラクター\r\n     * @param proposedAction 提案されたアクション\r\n     * @param context 文脈\r\n     * @returns 検証結果\r\n     */\r\n    validateAction(character: Character, proposedAction: string, context: string): Promise<ValidationResult>;\r\n  \r\n    /**\r\n     * 履歴との比較\r\n     * @param character キャラクター\r\n     * @param proposedAction 提案されたアクション\r\n     * @returns 一貫性スコア\r\n     */\r\n    compareWithHistory(character: Character, proposedAction: string): Promise<number>;",
                  "properties": {
                    "baseState": {
                      "name": "baseState",
                      "type": "any",
                      "optional": false
                    },
                    "currentState": {
                      "name": "currentState",
                      "type": "any): CharacterDiff",
                      "optional": false
                    },
                    "characterDiff": {
                      "name": "characterDiff",
                      "type": "CharacterDiff",
                      "optional": false
                    },
                    "plotContext": {
                      "name": "plotContext",
                      "type": "PlotContext): Promise<CharacterDiff>",
                      "optional": true
                    },
                    "character": {
                      "name": "character",
                      "type": "Character",
                      "optional": false
                    },
                    "proposedAction": {
                      "name": "proposedAction",
                      "type": "string): Promise<number>",
                      "optional": false
                    },
                    "context": {
                      "name": "context",
                      "type": "string): Promise<ValidationResult>",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 614
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "ICharacterGenerator",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\interfaces.ts",
                "definition": {
                  "name": "ICharacterGenerator",
                  "body": "/**\r\n     * テンプレートからの生成\r\n     * @param template キャラクターテンプレート\r\n     * @param params パラメータ\r\n     * @returns 動的キャラクター\r\n     */\r\n    generateFromTemplate(template: CharacterTemplate, params: any): Promise<DynamicCharacter>;\r\n  \r\n    /**\r\n     * バックストーリー生成\r\n     * @param character 動的キャラクター\r\n     * @param worldContext 世界観文脈\r\n     * @returns バックストーリーテキスト\r\n     */\r\n    generateBackstory(character: DynamicCharacter, worldContext: any): Promise<string>;\r\n  \r\n    /**\r\n     * 関係性作成\r\n     * @param character 動的キャラクター\r\n     * @param existingCharacters 既存キャラクター配列\r\n     * @returns 生成された関係性の配列\r\n     */\r\n    createRelationships(character: DynamicCharacter, existingCharacters: Character[]): Promise<Relationship[]>;",
                  "properties": {
                    "template": {
                      "name": "template",
                      "type": "CharacterTemplate",
                      "optional": false
                    },
                    "params": {
                      "name": "params",
                      "type": "any): Promise<DynamicCharacter>",
                      "optional": false
                    },
                    "character": {
                      "name": "character",
                      "type": "DynamicCharacter",
                      "optional": false
                    },
                    "worldContext": {
                      "name": "worldContext",
                      "type": "any): Promise<string>",
                      "optional": false
                    },
                    "existingCharacters": {
                      "name": "existingCharacters",
                      "type": "Character[]): Promise<Relationship[]>",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 705
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "ICharacterManager",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\interfaces.ts",
                "definition": {
                  "name": "ICharacterManager",
                  "body": "/**\r\n     * キャラクター作成\r\n     * @param data キャラクターデータ\r\n     * @returns 作成されたキャラクター\r\n     */\r\n    createCharacter(data: CharacterData): Promise<Character>;\r\n  \r\n    /**\r\n     * キャラクター取得\r\n     * @param id キャラクターID\r\n     * @returns キャラクター\r\n     */\r\n    getCharacter(id: string): Promise<Character | null>;\r\n  \r\n    /**\r\n     * キャラクター更新\r\n     * @param id キャラクターID\r\n     * @param data 更新データ\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    updateCharacter(id: string, data: Partial<CharacterData>): Promise<Character>;\r\n  \r\n    /**\r\n     * すべてのキャラクター取得\r\n     * @returns キャラクターの配列\r\n     */\r\n    getAllCharacters(): Promise<Character[]>;\r\n  \r\n    /**\r\n     * コンテンツ内のキャラクター検出\r\n     * @param content 検出対象のコンテンツ\r\n     * @returns 検出されたキャラクターの配列\r\n     */\r\n    detectCharactersInContent(content: string): Promise<Character[]>;\r\n  \r\n    /**\r\n     * キャラクター発展処理\r\n     * @param id キャラクターID\r\n     * @param events 章イベント配列\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    processCharacterDevelopment(id: string, events: ChapterEvent[]): Promise<Character>;\r\n  \r\n    /**\r\n     * 関係性更新\r\n     * @param char1Id 1人目のキャラクターID\r\n     * @param char2Id 2人目のキャラクターID\r\n     * @param type 関係性タイプ\r\n     * @param strength 関係性の強さ\r\n     */\r\n    updateRelationship(char1Id: string, char2Id: string, type: string, strength: number): Promise<void>;\r\n  \r\n    // /**\r\n    //  * キャラクター分析\r\n    //  * @param id キャラクターID\r\n    //  * @returns 分析結果\r\n    //  */\r\n    // analyzeCharacter(id: string): Promise<any>;",
                  "properties": {
                    "data": {
                      "name": "data",
                      "type": "Partial<CharacterData>): Promise<Character>",
                      "optional": false
                    },
                    "id": {
                      "name": "id",
                      "type": "string): Promise<any>",
                      "optional": false
                    },
                    "content": {
                      "name": "content",
                      "type": "string): Promise<Character[]>",
                      "optional": false
                    },
                    "events": {
                      "name": "events",
                      "type": "ChapterEvent[]): Promise<Character>",
                      "optional": false
                    },
                    "char1Id": {
                      "name": "char1Id",
                      "type": "string",
                      "optional": false
                    },
                    "char2Id": {
                      "name": "char2Id",
                      "type": "string",
                      "optional": false
                    },
                    "type": {
                      "name": "type",
                      "type": "string",
                      "optional": false
                    },
                    "strength": {
                      "name": "strength",
                      "type": "number): Promise<void>",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 789
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "PersonalityTraits",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "PersonalityTraits",
                  "body": "/** 特性のリスト（例: \"勇敢\", \"慎重\", \"明るい\"など） */\r\n    traits: string[];\r\n\r\n    /** 言葉使いや話し方のパターン */\r\n    speechPatterns?: string[];\r\n\r\n    /** 特徴的な癖や習慣 */\r\n    quirks?: string[];\r\n\r\n    /** 重要視する価値観 */\r\n    values?: string[];\r\n\r\n    /** 動的な性格特性（発展処理で使用） */\r\n    [key: string]: any;",
                  "properties": {
                    "traits": {
                      "name": "traits",
                      "type": "string[]",
                      "optional": false
                    },
                    "speechPatterns": {
                      "name": "speechPatterns",
                      "type": "string[]",
                      "optional": true
                    },
                    "quirks": {
                      "name": "quirks",
                      "type": "string[]",
                      "optional": true
                    },
                    "values": {
                      "name": "values",
                      "type": "string[]",
                      "optional": true
                    },
                    "key": {
                      "name": "key",
                      "type": "string]: any",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 36
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "CharacterAppearance",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterAppearance",
                  "body": "chapterNumber: number;\r\n    timestamp: Date;\r\n    significance: number;\r\n    summary?: string;\r\n    emotionalImpact?: number;",
                  "properties": {
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": false
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "Date",
                      "optional": false
                    },
                    "significance": {
                      "name": "significance",
                      "type": "number",
                      "optional": false
                    },
                    "summary": {
                      "name": "summary",
                      "type": "string",
                      "optional": true
                    },
                    "emotionalImpact": {
                      "name": "emotionalImpact",
                      "type": "number",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 122
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "CharacterHistory",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterHistory",
                  "body": "appearances: CharacterAppearance[];\r\n    interactions: Interaction[];\r\n    developmentPath: DevelopmentMilestone[];",
                  "properties": {
                    "appearances": {
                      "name": "appearances",
                      "type": "CharacterAppearance[]",
                      "optional": false
                    },
                    "interactions": {
                      "name": "interactions",
                      "type": "Interaction[]",
                      "optional": false
                    },
                    "developmentPath": {
                      "name": "developmentPath",
                      "type": "DevelopmentMilestone[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 155
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "CharacterState",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterState",
                  "body": "isActive: boolean;\r\n    relationships?: Relationship[];\r\n    developmentStage: number;\r\n    lastAppearance: number | null;\r\n    emotionalState: EmotionalState;\r\n    summary?: string;\r\n    significance?: number;\r\n    hasDialogue?: boolean;\r\n    changes?: CharacterChangeInfo[];\r\n    development: string;\r\n    isDeceased?: boolean;              // 死亡状態\r\n    maritalStatus?: string;            // 結婚状態\r\n    spouseId?: string | null;          // 配偶者ID\r\n    parentIds?: string[];              // 親キャラクターID\r\n    childrenIds?: string[];            // 子キャラクターID\r\n    skills?: string[];                 // 習得スキル\r\n    location?: string;                 // 現在地\r\n    lastStateChange?: {                // 最終状態変化\r\n        type: string;\r\n        chapterNumber: number;\r\n        description: string;",
                  "properties": {
                    "isActive": {
                      "name": "isActive",
                      "type": "boolean",
                      "optional": false
                    },
                    "relationships": {
                      "name": "relationships",
                      "type": "Relationship[]",
                      "optional": true
                    },
                    "developmentStage": {
                      "name": "developmentStage",
                      "type": "number",
                      "optional": false
                    },
                    "lastAppearance": {
                      "name": "lastAppearance",
                      "type": "number | null",
                      "optional": false
                    },
                    "emotionalState": {
                      "name": "emotionalState",
                      "type": "EmotionalState",
                      "optional": false
                    },
                    "summary": {
                      "name": "summary",
                      "type": "string",
                      "optional": true
                    },
                    "significance": {
                      "name": "significance",
                      "type": "number",
                      "optional": true
                    },
                    "hasDialogue": {
                      "name": "hasDialogue",
                      "type": "boolean",
                      "optional": true
                    },
                    "changes": {
                      "name": "changes",
                      "type": "CharacterChangeInfo[]",
                      "optional": true
                    },
                    "development": {
                      "name": "development",
                      "type": "string",
                      "optional": false
                    },
                    "isDeceased": {
                      "name": "isDeceased",
                      "type": "boolean",
                      "optional": true
                    },
                    "maritalStatus": {
                      "name": "maritalStatus",
                      "type": "string",
                      "optional": true
                    },
                    "spouseId": {
                      "name": "spouseId",
                      "type": "string | null",
                      "optional": true
                    },
                    "parentIds": {
                      "name": "parentIds",
                      "type": "string[]",
                      "optional": true
                    },
                    "childrenIds": {
                      "name": "childrenIds",
                      "type": "string[]",
                      "optional": true
                    },
                    "skills": {
                      "name": "skills",
                      "type": "string[]",
                      "optional": true
                    },
                    "location": {
                      "name": "location",
                      "type": "string",
                      "optional": true
                    },
                    "lastStateChange": {
                      "name": "lastStateChange",
                      "type": "{                // 最終状態変化",
                      "optional": true
                    },
                    "type": {
                      "name": "type",
                      "type": "string",
                      "optional": false
                    },
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 164
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "CharacterChangeInfo",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterChangeInfo",
                  "body": "attribute: string;\r\n    previousValue: any;\r\n    currentValue: any;\r\n    classification?: {\r\n        type: string;\r\n        scope: string;\r\n        confidence: number;\r\n        explanation: string;\r\n        narrativeSignificance?: number;",
                  "properties": {
                    "attribute": {
                      "name": "attribute",
                      "type": "string",
                      "optional": false
                    },
                    "previousValue": {
                      "name": "previousValue",
                      "type": "any",
                      "optional": false
                    },
                    "currentValue": {
                      "name": "currentValue",
                      "type": "any",
                      "optional": false
                    },
                    "classification": {
                      "name": "classification",
                      "type": "{",
                      "optional": true
                    },
                    "type": {
                      "name": "type",
                      "type": "string",
                      "optional": false
                    },
                    "scope": {
                      "name": "scope",
                      "type": "string",
                      "optional": false
                    },
                    "confidence": {
                      "name": "confidence",
                      "type": "number",
                      "optional": false
                    },
                    "explanation": {
                      "name": "explanation",
                      "type": "string",
                      "optional": false
                    },
                    "narrativeSignificance": {
                      "name": "narrativeSignificance",
                      "type": "number",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 242
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "CharacterMetadata",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterMetadata",
                  "body": "createdAt: Date;\r\n    lastUpdated: Date;\r\n    version?: number;\r\n    tags?: string[];\r\n    /** 永続的イベント履歴 */\r\n    persistentEvents?: Array<{\r\n        type: string;\r\n        chapterNumber: number;\r\n        description: string;",
                  "properties": {
                    "createdAt": {
                      "name": "createdAt",
                      "type": "Date",
                      "optional": false
                    },
                    "lastUpdated": {
                      "name": "lastUpdated",
                      "type": "Date",
                      "optional": false
                    },
                    "version": {
                      "name": "version",
                      "type": "number",
                      "optional": true
                    },
                    "tags": {
                      "name": "tags",
                      "type": "string[]",
                      "optional": true
                    },
                    "persistentEvents": {
                      "name": "persistentEvents",
                      "type": "Array<{",
                      "optional": true
                    },
                    "type": {
                      "name": "type",
                      "type": "string",
                      "optional": false
                    },
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 268
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "CharacterParameter",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterParameter",
                  "body": "id: string;\r\n    name: string;\r\n    description: string;\r\n    value: number;         // 現在値（0-100）\r\n    growth: number;        // 成長率\r\n    category: ParameterCategory;\r\n    tags: string[];        // タグ（「戦闘」「ビジネス」「対人」など）",
                  "properties": {
                    "id": {
                      "name": "id",
                      "type": "string",
                      "optional": false
                    },
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    },
                    "value": {
                      "name": "value",
                      "type": "number",
                      "optional": false
                    },
                    "growth": {
                      "name": "growth",
                      "type": "number",
                      "optional": false
                    },
                    "category": {
                      "name": "category",
                      "type": "ParameterCategory",
                      "optional": false
                    },
                    "tags": {
                      "name": "tags",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 347
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "Character",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "Character",
                  "body": "/** 一意のキャラクターID */\r\n    id: string;\r\n\r\n    /** キャラクター名 */\r\n    name: string;\r\n\r\n    /** ショートネーム配列 */\r\n    shortNames: string[];\r\n\r\n    /** 他キャラからの呼称 */\r\n    nicknames?: Record<string, string[]>;\r\n\r\n    /** キャラクターの説明 */\r\n    description: string;\r\n\r\n    /** キャラクターの種類 */\r\n    type: CharacterType;\r\n\r\n    /** キャラクターの重要度 (0-1) */\r\n    significance?: number;\r\n\r\n    /** キャラクターの役割 */\r\n    role?: CharacterRole;\r\n\r\n    /** キャラクターの目標 */\r\n    goals?: string[];\r\n\r\n    /** キャラクターの初登場章 */\r\n    firstAppearance?: number;\r\n\r\n    /** 性格特性 */\r\n    personality?: PersonalityTraits;\r\n\r\n    /** 外見 */\r\n    appearance?: Appearance;\r\n\r\n    /** 背景設定 */\r\n    backstory?: Backstory;\r\n\r\n    /** 他キャラクターとの関係性 */\r\n    relationships?: Relationship[];\r\n\r\n    /** キャラクターの状態 */\r\n    state: CharacterState;\r\n\r\n    /** キャラクターの現在の状態 */\r\n    currentState?: string;\r\n\r\n    /** キャラクターの感情状態 */\r\n    emotionalState?: string;\r\n\r\n    /** キャラクターの履歴 */\r\n    history: CharacterHistory;\r\n\r\n    /** 昇格履歴 */\r\n    promotionHistory?: PromotionRecord[];\r\n\r\n    /** メタデータ */\r\n    metadata: CharacterMetadata;\r\n\r\n    /** 心理情報 - フェーズ1: 深層キャラクター心理モデル */\r\n    psychology?: CharacterPsychology;",
                  "properties": {
                    "1": {
                      "name": "1",
                      "type": "深層キャラクター心理モデル */",
                      "optional": false
                    },
                    "id": {
                      "name": "id",
                      "type": "string",
                      "optional": false
                    },
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "shortNames": {
                      "name": "shortNames",
                      "type": "string[]",
                      "optional": false
                    },
                    "nicknames": {
                      "name": "nicknames",
                      "type": "Record<string",
                      "optional": true
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    },
                    "type": {
                      "name": "type",
                      "type": "CharacterType",
                      "optional": false
                    },
                    "significance": {
                      "name": "significance",
                      "type": "number",
                      "optional": true
                    },
                    "role": {
                      "name": "role",
                      "type": "CharacterRole",
                      "optional": true
                    },
                    "goals": {
                      "name": "goals",
                      "type": "string[]",
                      "optional": true
                    },
                    "firstAppearance": {
                      "name": "firstAppearance",
                      "type": "number",
                      "optional": true
                    },
                    "personality": {
                      "name": "personality",
                      "type": "PersonalityTraits",
                      "optional": true
                    },
                    "appearance": {
                      "name": "appearance",
                      "type": "Appearance",
                      "optional": true
                    },
                    "backstory": {
                      "name": "backstory",
                      "type": "Backstory",
                      "optional": true
                    },
                    "relationships": {
                      "name": "relationships",
                      "type": "Relationship[]",
                      "optional": true
                    },
                    "state": {
                      "name": "state",
                      "type": "CharacterState",
                      "optional": false
                    },
                    "currentState": {
                      "name": "currentState",
                      "type": "string",
                      "optional": true
                    },
                    "emotionalState": {
                      "name": "emotionalState",
                      "type": "string",
                      "optional": true
                    },
                    "history": {
                      "name": "history",
                      "type": "CharacterHistory",
                      "optional": false
                    },
                    "promotionHistory": {
                      "name": "promotionHistory",
                      "type": "PromotionRecord[]",
                      "optional": true
                    },
                    "metadata": {
                      "name": "metadata",
                      "type": "CharacterMetadata",
                      "optional": false
                    },
                    "psychology": {
                      "name": "psychology",
                      "type": "CharacterPsychology",
                      "optional": true
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 390
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "ImmutableCharacterData",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "ImmutableCharacterData",
                  "body": "name: string;\r\n    shortNames: string[];\r\n    description: string;\r\n    appearance?: Appearance;\r\n    backstory?: Backstory;",
                  "properties": {
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "shortNames": {
                      "name": "shortNames",
                      "type": "string[]",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    },
                    "appearance": {
                      "name": "appearance",
                      "type": "Appearance",
                      "optional": true
                    },
                    "backstory": {
                      "name": "backstory",
                      "type": "Backstory",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 462
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "MutableCharacterData",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "MutableCharacterData",
                  "body": "type: CharacterType;\r\n    role?: CharacterRole;\r\n    personality?: PersonalityTraits;\r\n    nicknames?: Record<string, string[]>;\r\n    goals?: string[];\r\n    relationships?: Relationship[];\r\n    state: Partial<CharacterState>;\r\n    currentState?: string;\r\n    emotionalState?: string;",
                  "properties": {
                    "type": {
                      "name": "type",
                      "type": "CharacterType",
                      "optional": false
                    },
                    "role": {
                      "name": "role",
                      "type": "CharacterRole",
                      "optional": true
                    },
                    "personality": {
                      "name": "personality",
                      "type": "PersonalityTraits",
                      "optional": true
                    },
                    "nicknames": {
                      "name": "nicknames",
                      "type": "Record<string",
                      "optional": true
                    },
                    "goals": {
                      "name": "goals",
                      "type": "string[]",
                      "optional": true
                    },
                    "relationships": {
                      "name": "relationships",
                      "type": "Relationship[]",
                      "optional": true
                    },
                    "state": {
                      "name": "state",
                      "type": "Partial<CharacterState>",
                      "optional": false
                    },
                    "currentState": {
                      "name": "currentState",
                      "type": "string",
                      "optional": true
                    },
                    "emotionalState": {
                      "name": "emotionalState",
                      "type": "string",
                      "optional": true
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 473
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "CharacterData",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterData",
                  "body": "metadata?: {\r\n        tags?: string[];",
                  "properties": {
                    "metadata": {
                      "name": "metadata",
                      "type": "{",
                      "optional": true
                    },
                    "tags": {
                      "name": "tags",
                      "type": "string[]",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": true,
                  "lineNumber": 489
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "CharacterMetrics",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterMetrics",
                  "body": "appearances: number;\r\n    interactions: number;\r\n    plotRelevance: number;\r\n    characterDevelopment: number;\r\n    readerEngagement: number;",
                  "properties": {
                    "appearances": {
                      "name": "appearances",
                      "type": "number",
                      "optional": false
                    },
                    "interactions": {
                      "name": "interactions",
                      "type": "number",
                      "optional": false
                    },
                    "plotRelevance": {
                      "name": "plotRelevance",
                      "type": "number",
                      "optional": false
                    },
                    "characterDevelopment": {
                      "name": "characterDevelopment",
                      "type": "number",
                      "optional": false
                    },
                    "readerEngagement": {
                      "name": "readerEngagement",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 498
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "CharacterCluster",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterCluster",
                  "body": "// 基本プロパティ\r\n    id: string;\r\n    members: string[];\r\n    dominantRelation: RelationshipType;\r\n    cohesion: number;\r\n\r\n    // 🆕 記憶階層システム統合プロパティ\r\n    memorySystemValidated: boolean;     // 記憶システムでの検証済みフラグ\r\n    crossLevelConsistency: number;      // クロスレベル整合性スコア (0-1)\r\n    lastAnalyzed: string;               // 最終分析日時（ISO文字列）\r\n\r\n    // オプショナル拡張プロパティ\r\n    memberNames?: string[];             // メンバー名のリスト\r\n    clusterStrength?: number;           // クラスター結束強度 (0-1)\r\n    memoryLevelDistribution?: Record<MemoryLevel, number>;  // 記憶レベル分布\r\n    evolutionHistory?: Array<{         // クラスター変遷履歴\r\n        timestamp: string;\r\n        membershipChanges: {\r\n            added: string[];\r\n            removed: string[];",
                  "properties": {
                    "id": {
                      "name": "id",
                      "type": "string",
                      "optional": false
                    },
                    "members": {
                      "name": "members",
                      "type": "string[]",
                      "optional": false
                    },
                    "dominantRelation": {
                      "name": "dominantRelation",
                      "type": "RelationshipType",
                      "optional": false
                    },
                    "cohesion": {
                      "name": "cohesion",
                      "type": "number",
                      "optional": false
                    },
                    "memorySystemValidated": {
                      "name": "memorySystemValidated",
                      "type": "boolean",
                      "optional": false
                    },
                    "crossLevelConsistency": {
                      "name": "crossLevelConsistency",
                      "type": "number",
                      "optional": false
                    },
                    "lastAnalyzed": {
                      "name": "lastAnalyzed",
                      "type": "string",
                      "optional": false
                    },
                    "memberNames": {
                      "name": "memberNames",
                      "type": "string[]",
                      "optional": true
                    },
                    "clusterStrength": {
                      "name": "clusterStrength",
                      "type": "number",
                      "optional": true
                    },
                    "memoryLevelDistribution": {
                      "name": "memoryLevelDistribution",
                      "type": "Record<MemoryLevel",
                      "optional": true
                    },
                    "evolutionHistory": {
                      "name": "evolutionHistory",
                      "type": "Array<{         // クラスター変遷履歴",
                      "optional": true
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    },
                    "membershipChanges": {
                      "name": "membershipChanges",
                      "type": "{",
                      "optional": false
                    },
                    "added": {
                      "name": "added",
                      "type": "string[]",
                      "optional": false
                    },
                    "removed": {
                      "name": "removed",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 526
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "CharacterDevelopment",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterDevelopment",
                  "body": "personalityChanges: Record<string, number>;\r\n    relationshipChanges: Record<string, { change: number; reason: string",
                  "properties": {
                    "personalityChanges": {
                      "name": "personalityChanges",
                      "type": "Record<string",
                      "optional": false
                    },
                    "relationshipChanges": {
                      "name": "relationshipChanges",
                      "type": "Record<string",
                      "optional": false
                    },
                    "change": {
                      "name": "change",
                      "type": "number",
                      "optional": false
                    },
                    "reason": {
                      "name": "reason",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 668
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "CharacterChange",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterChange",
                  "body": "/** 変化した属性名 */\r\n    attribute: string;\r\n    /** 変化前の値 */\r\n    previousValue: any;\r\n    /** 変化後の値 */\r\n    currentValue: any;\r\n    /** 変化の分類（分類後に設定） */\r\n    classification?: ChangeClassification;",
                  "properties": {
                    "attribute": {
                      "name": "attribute",
                      "type": "string",
                      "optional": false
                    },
                    "previousValue": {
                      "name": "previousValue",
                      "type": "any",
                      "optional": false
                    },
                    "currentValue": {
                      "name": "currentValue",
                      "type": "any",
                      "optional": false
                    },
                    "classification": {
                      "name": "classification",
                      "type": "ChangeClassification",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 873
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "CharacterDiff",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterDiff",
                  "body": "/** キャラクター名 */\r\n    name: string;\r\n    /** キャラクターID */\r\n    id: string;\r\n    /** 最後の登場チャプター */\r\n    lastAppearance?: number;\r\n    /** 現在の発展段階 */\r\n    developmentStage?: number;\r\n    /** 検出された変化のリスト */\r\n    changes: CharacterChange[];",
                  "properties": {
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "id": {
                      "name": "id",
                      "type": "string",
                      "optional": false
                    },
                    "lastAppearance": {
                      "name": "lastAppearance",
                      "type": "number",
                      "optional": true
                    },
                    "developmentStage": {
                      "name": "developmentStage",
                      "type": "number",
                      "optional": true
                    },
                    "changes": {
                      "name": "changes",
                      "type": "CharacterChange[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 887
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "CharacterTemplate",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterTemplate",
                  "body": "id: string;\r\n    name: string;\r\n    description?: string;\r\n    personality?: {\r\n        traits?: string[];\r\n        values?: string[];\r\n        quirks?: string[];",
                  "properties": {
                    "id": {
                      "name": "id",
                      "type": "string",
                      "optional": false
                    },
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": true
                    },
                    "personality": {
                      "name": "personality",
                      "type": "{",
                      "optional": true
                    },
                    "traits": {
                      "name": "traits",
                      "type": "string[]",
                      "optional": true
                    },
                    "values": {
                      "name": "values",
                      "type": "string[]",
                      "optional": true
                    },
                    "quirks": {
                      "name": "quirks",
                      "type": "string[]",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 917
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "DynamicCharacter",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "DynamicCharacter",
                  "body": "// 特別なプロパティが必要な場合は追加\r\n    generationMetadata?: {\r\n        template?: string;\r\n        generatedAt: Date;\r\n        parameters?: any;",
                  "properties": {
                    "generationMetadata": {
                      "name": "generationMetadata",
                      "type": "{",
                      "optional": true
                    },
                    "template": {
                      "name": "template",
                      "type": "string",
                      "optional": true
                    },
                    "generatedAt": {
                      "name": "generatedAt",
                      "type": "Date",
                      "optional": false
                    },
                    "parameters": {
                      "name": "parameters",
                      "type": "any",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": true,
                  "lineNumber": 943
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "CharacterRecommendation",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterRecommendation",
                  "body": "/** キャラクターID */\r\n    id: string;\r\n    /** キャラクター名 */\r\n    name: string;\r\n    /** 推奨理由 */\r\n    reason: string;",
                  "properties": {
                    "id": {
                      "name": "id",
                      "type": "string",
                      "optional": false
                    },
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "reason": {
                      "name": "reason",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 981
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "ChapterCharacterRecommendations",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "ChapterCharacterRecommendations",
                  "body": "/** メインキャラクター */\r\n    mainCharacters: CharacterRecommendation[];\r\n    /** サポートキャラクター */\r\n    supportingCharacters: CharacterRecommendation[];\r\n    /** 背景キャラクター */\r\n    backgroundCharacters: CharacterRecommendation[];",
                  "properties": {
                    "mainCharacters": {
                      "name": "mainCharacters",
                      "type": "CharacterRecommendation[]",
                      "optional": false
                    },
                    "supportingCharacters": {
                      "name": "supportingCharacters",
                      "type": "CharacterRecommendation[]",
                      "optional": false
                    },
                    "backgroundCharacters": {
                      "name": "backgroundCharacters",
                      "type": "CharacterRecommendation[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 993
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "CharacterPsychology",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterPsychology",
                  "body": "/** 現在の欲求 */\r\n    currentDesires: string[];\r\n\r\n    /** 現在の恐れ */\r\n    currentFears: string[];\r\n\r\n    /** 内的葛藤 */\r\n    internalConflicts: string[];\r\n\r\n    /** 感情状態（感情名:強度） */\r\n    emotionalState: { [key: string]: number",
                  "properties": {
                    "currentDesires": {
                      "name": "currentDesires",
                      "type": "string[]",
                      "optional": false
                    },
                    "currentFears": {
                      "name": "currentFears",
                      "type": "string[]",
                      "optional": false
                    },
                    "internalConflicts": {
                      "name": "internalConflicts",
                      "type": "string[]",
                      "optional": false
                    },
                    "emotionalState": {
                      "name": "emotionalState",
                      "type": "{ [key: string]: number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 1005
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "CharacterCreatedEventData",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterCreatedEventData",
                  "body": "character: Character;",
                  "properties": {
                    "character": {
                      "name": "character",
                      "type": "Character",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": true,
                  "lineNumber": 1204
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "CharacterUpdatedEventData",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterUpdatedEventData",
                  "body": "characterId: string;\r\n    changes: Partial<CharacterData>;\r\n    previousState?: Partial<Character>;",
                  "properties": {
                    "characterId": {
                      "name": "characterId",
                      "type": "string",
                      "optional": false
                    },
                    "changes": {
                      "name": "changes",
                      "type": "Partial<CharacterData>",
                      "optional": false
                    },
                    "previousState": {
                      "name": "previousState",
                      "type": "Partial<Character>",
                      "optional": true
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": true,
                  "lineNumber": 1211
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "CharacterIndexItem",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterIndexItem",
                  "body": "id: string;\r\n    name: string;\r\n    shortNames: string[];\r\n    nicknames: string[];\r\n    type: CharacterType;\r\n    isActive: boolean;\r\n    lastAppearance: number | null;\r\n    keywords: string[];",
                  "properties": {
                    "id": {
                      "name": "id",
                      "type": "string",
                      "optional": false
                    },
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "shortNames": {
                      "name": "shortNames",
                      "type": "string[]",
                      "optional": false
                    },
                    "nicknames": {
                      "name": "nicknames",
                      "type": "string[]",
                      "optional": false
                    },
                    "type": {
                      "name": "type",
                      "type": "CharacterType",
                      "optional": false
                    },
                    "isActive": {
                      "name": "isActive",
                      "type": "boolean",
                      "optional": false
                    },
                    "lastAppearance": {
                      "name": "lastAppearance",
                      "type": "number | null",
                      "optional": false
                    },
                    "keywords": {
                      "name": "keywords",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 1255
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "CharacterType",
            "system": "characters",
            "definitions": [
              {
                "type": "type",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterType",
                  "definition": "'MAIN' | 'SUB' | 'MOB'",
                  "isUnion": true,
                  "isIntersection": false,
                  "isGeneric": false,
                  "lineNumber": 13
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "CharacterRole",
            "system": "characters",
            "definitions": [
              {
                "type": "type",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "CharacterRole",
                  "definition": "'PROTAGONIST' | 'ANTAGONIST' | 'MENTOR' | 'ALLY' | 'RIVAL' | 'OTHER'",
                  "isUnion": true,
                  "isIntersection": false,
                  "isGeneric": false,
                  "lineNumber": 18
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "CharacterCreatedEvent",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\events\\event-types.ts",
                "definition": {
                  "name": "CharacterCreatedEvent",
                  "body": "/** 作成されたキャラクター */\r\n    character: Character;",
                  "properties": {
                    "character": {
                      "name": "character",
                      "type": "Character",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": true,
                  "lineNumber": 65
                },
                "system": "characters",
                "module": "characters/events"
              }
            ]
          },
          {
            "typeName": "CharacterUpdatedEvent",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\events\\event-types.ts",
                "definition": {
                  "name": "CharacterUpdatedEvent",
                  "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 更新されたキャラクター */\r\n    character: Character;\r\n    /** 変更内容 */\r\n    changes: Partial<CharacterData>;\r\n    /** 更新前の状態 */\r\n    previousState?: Partial<Character>;",
                  "properties": {
                    "characterId": {
                      "name": "characterId",
                      "type": "string",
                      "optional": false
                    },
                    "character": {
                      "name": "character",
                      "type": "Character",
                      "optional": false
                    },
                    "changes": {
                      "name": "changes",
                      "type": "Partial<CharacterData>",
                      "optional": false
                    },
                    "previousState": {
                      "name": "previousState",
                      "type": "Partial<Character>",
                      "optional": true
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": true,
                  "lineNumber": 73
                },
                "system": "characters",
                "module": "characters/events"
              }
            ]
          },
          {
            "typeName": "CharacterDeletedEvent",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\events\\event-types.ts",
                "definition": {
                  "name": "CharacterDeletedEvent",
                  "body": "/** 削除されたキャラクターID */\r\n    characterId: string;\r\n    /** 削除されたキャラクター名 */\r\n    characterName: string;",
                  "properties": {
                    "characterId": {
                      "name": "characterId",
                      "type": "string",
                      "optional": false
                    },
                    "characterName": {
                      "name": "characterName",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": true,
                  "lineNumber": 87
                },
                "system": "characters",
                "module": "characters/events"
              }
            ]
          },
          {
            "typeName": "CharacterPromotedEvent",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\events\\event-types.ts",
                "definition": {
                  "name": "CharacterPromotedEvent",
                  "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 元のタイプ */\r\n    fromType: string;\r\n    /** 新しいタイプ */\r\n    toType: string;\r\n    /** 昇格理由 */\r\n    reason?: string;",
                  "properties": {
                    "characterId": {
                      "name": "characterId",
                      "type": "string",
                      "optional": false
                    },
                    "fromType": {
                      "name": "fromType",
                      "type": "string",
                      "optional": false
                    },
                    "toType": {
                      "name": "toType",
                      "type": "string",
                      "optional": false
                    },
                    "reason": {
                      "name": "reason",
                      "type": "string",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": true,
                  "lineNumber": 97
                },
                "system": "characters",
                "module": "characters/events"
              }
            ]
          },
          {
            "typeName": "CharacterDemotedEvent",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\events\\event-types.ts",
                "definition": {
                  "name": "CharacterDemotedEvent",
                  "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 元のタイプ */\r\n    fromType: string;\r\n    /** 新しいタイプ */\r\n    toType: string;\r\n    /** 降格理由 */\r\n    reason?: string;",
                  "properties": {
                    "characterId": {
                      "name": "characterId",
                      "type": "string",
                      "optional": false
                    },
                    "fromType": {
                      "name": "fromType",
                      "type": "string",
                      "optional": false
                    },
                    "toType": {
                      "name": "toType",
                      "type": "string",
                      "optional": false
                    },
                    "reason": {
                      "name": "reason",
                      "type": "string",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": true,
                  "lineNumber": 111
                },
                "system": "characters",
                "module": "characters/events"
              }
            ]
          },
          {
            "typeName": "CharacterStateChangedEvent",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\events\\event-types.ts",
                "definition": {
                  "name": "CharacterStateChangedEvent",
                  "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 更新された状態 */\r\n    state: Partial<CharacterState>;\r\n    /** 更新前の状態 */\r\n    previousState?: Partial<CharacterState>;\r\n    /** 変更種別 */\r\n    changeType: string;",
                  "properties": {
                    "characterId": {
                      "name": "characterId",
                      "type": "string",
                      "optional": false
                    },
                    "state": {
                      "name": "state",
                      "type": "Partial<CharacterState>",
                      "optional": false
                    },
                    "previousState": {
                      "name": "previousState",
                      "type": "Partial<CharacterState>",
                      "optional": true
                    },
                    "changeType": {
                      "name": "changeType",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": true,
                  "lineNumber": 125
                },
                "system": "characters",
                "module": "characters/events"
              }
            ]
          },
          {
            "typeName": "CharacterAppearanceEvent",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\events\\event-types.ts",
                "definition": {
                  "name": "CharacterAppearanceEvent",
                  "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 章番号 */\r\n    chapterNumber: number;\r\n    /** 重要度 */\r\n    significance: number;\r\n    /** 概要 */\r\n    summary?: string;",
                  "properties": {
                    "characterId": {
                      "name": "characterId",
                      "type": "string",
                      "optional": false
                    },
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": false
                    },
                    "significance": {
                      "name": "significance",
                      "type": "number",
                      "optional": false
                    },
                    "summary": {
                      "name": "summary",
                      "type": "string",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": true,
                  "lineNumber": 139
                },
                "system": "characters",
                "module": "characters/events"
              }
            ]
          },
          {
            "typeName": "CharacterAnalyzedEvent",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\events\\event-types.ts",
                "definition": {
                  "name": "CharacterAnalyzedEvent",
                  "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 分析タイプ */\r\n    analysisType: string;\r\n    /** 分析結果 */\r\n    result: any;\r\n    /** 心理分析結果 */\r\n    psychology?: CharacterPsychology;",
                  "properties": {
                    "characterId": {
                      "name": "characterId",
                      "type": "string",
                      "optional": false
                    },
                    "analysisType": {
                      "name": "analysisType",
                      "type": "string",
                      "optional": false
                    },
                    "result": {
                      "name": "result",
                      "type": "any",
                      "optional": false
                    },
                    "psychology": {
                      "name": "psychology",
                      "type": "CharacterPsychology",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": true,
                  "lineNumber": 389
                },
                "system": "characters",
                "module": "characters/events"
              }
            ]
          },
          {
            "typeName": "CharacterEvolutionData",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "CharacterEvolutionData",
                  "body": "developmentHistory: Map<string, CharacterDevelopmentRecord[]>;\n    changeHistory: Map<string, CharacterChangeRecord[]>;\n    relationshipEvolution: Map<string, RelationshipEvolutionRecord[]>;\n    psychologyEvolution: Map<string, PsychologyEvolutionRecord[]>;",
                  "properties": {
                    "developmentHistory": {
                      "name": "developmentHistory",
                      "type": "Map<string",
                      "optional": false
                    },
                    "changeHistory": {
                      "name": "changeHistory",
                      "type": "Map<string",
                      "optional": false
                    },
                    "relationshipEvolution": {
                      "name": "relationshipEvolution",
                      "type": "Map<string",
                      "optional": false
                    },
                    "psychologyEvolution": {
                      "name": "psychologyEvolution",
                      "type": "Map<string",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 259
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "CharacterDevelopmentRecord",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "CharacterDevelopmentRecord",
                  "body": "characterId: string;\n    developmentPhase: string;\n    changes: any[];\n    timestamp: string;",
                  "properties": {
                    "characterId": {
                      "name": "characterId",
                      "type": "string",
                      "optional": false
                    },
                    "developmentPhase": {
                      "name": "developmentPhase",
                      "type": "string",
                      "optional": false
                    },
                    "changes": {
                      "name": "changes",
                      "type": "any[]",
                      "optional": false
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 614
                },
                "system": "memory",
                "module": "memory/core"
              },
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\character-database-types.ts",
                "definition": {
                  "name": "CharacterDevelopmentRecord",
                  "body": "recordId: string;\r\n  chapterNumber: number;\r\n  developmentType: 'personality' | 'skill' | 'relationship' | 'goal' | 'backstory';\r\n  description: string;\r\n  significance: number; // 0-10\r\n  impact: string[];\r\n  timestamp: string;\r\n  relatedEvents: string[];",
                  "properties": {
                    "recordId": {
                      "name": "recordId",
                      "type": "string",
                      "optional": false
                    },
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": false
                    },
                    "developmentType": {
                      "name": "developmentType",
                      "type": "'personality' | 'skill' | 'relationship' | 'goal' | 'backstory'",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    },
                    "significance": {
                      "name": "significance",
                      "type": "number",
                      "optional": false
                    },
                    "impact": {
                      "name": "impact",
                      "type": "string[]",
                      "optional": false
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    },
                    "relatedEvents": {
                      "name": "relatedEvents",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 439
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "CharacterChangeRecord",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "CharacterChangeRecord",
                  "body": "characterId: string;\n    changeType: string;\n    oldValue: any;\n    newValue: any;\n    timestamp: string;",
                  "properties": {
                    "characterId": {
                      "name": "characterId",
                      "type": "string",
                      "optional": false
                    },
                    "changeType": {
                      "name": "changeType",
                      "type": "string",
                      "optional": false
                    },
                    "oldValue": {
                      "name": "oldValue",
                      "type": "any",
                      "optional": false
                    },
                    "newValue": {
                      "name": "newValue",
                      "type": "any",
                      "optional": false
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 624
                },
                "system": "memory",
                "module": "memory/core"
              },
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\character-database-types.ts",
                "definition": {
                  "name": "CharacterChangeRecord",
                  "body": "recordId: string;\r\n  chapterNumber: number;\r\n  changeType: 'state' | 'personality' | 'relationship' | 'backstory' | 'metadata';\r\n  fieldChanged: string;\r\n  previousValue: any;\r\n  newValue: any;\r\n  reason: string;\r\n  source: string;\r\n  timestamp: string;\r\n  significance: number; // 0-10",
                  "properties": {
                    "recordId": {
                      "name": "recordId",
                      "type": "string",
                      "optional": false
                    },
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": false
                    },
                    "changeType": {
                      "name": "changeType",
                      "type": "'state' | 'personality' | 'relationship' | 'backstory' | 'metadata'",
                      "optional": false
                    },
                    "fieldChanged": {
                      "name": "fieldChanged",
                      "type": "string",
                      "optional": false
                    },
                    "previousValue": {
                      "name": "previousValue",
                      "type": "any",
                      "optional": false
                    },
                    "newValue": {
                      "name": "newValue",
                      "type": "any",
                      "optional": false
                    },
                    "reason": {
                      "name": "reason",
                      "type": "string",
                      "optional": false
                    },
                    "source": {
                      "name": "source",
                      "type": "string",
                      "optional": false
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    },
                    "significance": {
                      "name": "significance",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 467
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "CharacterMasterRecord",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "CharacterMasterRecord",
                  "body": "consolidatedCharacter: any;\n    sources: string[];\n    lastUpdate: string;",
                  "properties": {
                    "consolidatedCharacter": {
                      "name": "consolidatedCharacter",
                      "type": "any",
                      "optional": false
                    },
                    "sources": {
                      "name": "sources",
                      "type": "string[]",
                      "optional": false
                    },
                    "lastUpdate": {
                      "name": "lastUpdate",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 769
                },
                "system": "memory",
                "module": "memory/core"
              },
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\character-database-types.ts",
                "definition": {
                  "name": "CharacterMasterRecord",
                  "body": "// 基本情報（統合済み）\r\n  id: string;\r\n  name: string;\r\n  type: CharacterType;\r\n  description: string;\r\n  \r\n  // 統合メタデータ\r\n  masterVersion: string;\r\n  consolidatedFrom: ConsolidationSource[];\r\n  lastConsolidated: string;\r\n  conflictResolutions: CharacterConflictResolution[];\r\n  \r\n  // 拡張情報\r\n  personality: CharacterPersonality;\r\n  backstory: CharacterBackstory;\r\n  relationships: CharacterRelationship[];\r\n  state: ExtendedCharacterState;\r\n  \r\n  // 履歴情報\r\n  developmentHistory: CharacterDevelopmentRecord[];\r\n  appearanceHistory: CharacterAppearanceRecord[];\r\n  changeHistory: CharacterChangeRecord[];\r\n  \r\n  // 統計情報\r\n  statistics: CharacterStatistics;\r\n  \r\n  // フォーマット済みデータ\r\n  formattedData: FormattedCharacterData;\r\n  \r\n  // メタデータ\r\n  metadata: CharacterMetadata;",
                  "properties": {
                    "id": {
                      "name": "id",
                      "type": "string",
                      "optional": false
                    },
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "type": {
                      "name": "type",
                      "type": "CharacterType",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    },
                    "masterVersion": {
                      "name": "masterVersion",
                      "type": "string",
                      "optional": false
                    },
                    "consolidatedFrom": {
                      "name": "consolidatedFrom",
                      "type": "ConsolidationSource[]",
                      "optional": false
                    },
                    "lastConsolidated": {
                      "name": "lastConsolidated",
                      "type": "string",
                      "optional": false
                    },
                    "conflictResolutions": {
                      "name": "conflictResolutions",
                      "type": "CharacterConflictResolution[]",
                      "optional": false
                    },
                    "personality": {
                      "name": "personality",
                      "type": "CharacterPersonality",
                      "optional": false
                    },
                    "backstory": {
                      "name": "backstory",
                      "type": "CharacterBackstory",
                      "optional": false
                    },
                    "relationships": {
                      "name": "relationships",
                      "type": "CharacterRelationship[]",
                      "optional": false
                    },
                    "state": {
                      "name": "state",
                      "type": "ExtendedCharacterState",
                      "optional": false
                    },
                    "developmentHistory": {
                      "name": "developmentHistory",
                      "type": "CharacterDevelopmentRecord[]",
                      "optional": false
                    },
                    "appearanceHistory": {
                      "name": "appearanceHistory",
                      "type": "CharacterAppearanceRecord[]",
                      "optional": false
                    },
                    "changeHistory": {
                      "name": "changeHistory",
                      "type": "CharacterChangeRecord[]",
                      "optional": false
                    },
                    "statistics": {
                      "name": "statistics",
                      "type": "CharacterStatistics",
                      "optional": false
                    },
                    "formattedData": {
                      "name": "formattedData",
                      "type": "FormattedCharacterData",
                      "optional": false
                    },
                    "metadata": {
                      "name": "metadata",
                      "type": "CharacterMetadata",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 10
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "ExtendedCharacterState",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\character-database-types.ts",
                "definition": {
                  "name": "ExtendedCharacterState",
                  "body": "// CharacterState から継承したが型を変更するプロパティ\r\n  skills: SkillRecord[]; // string[] から SkillRecord[] に変更\r\n  \r\n  // 詳細状態\r\n  detailedEmotionalState: DetailedEmotionalState;\r\n  physicalCondition: PhysicalCondition;\r\n  mentalCondition: MentalCondition;\r\n  socialStatus: SocialStatus;\r\n  \r\n  // 能力・知識\r\n  abilities: AbilityRecord[];\r\n  knowledge: KnowledgeRecord[];\r\n  \r\n  // 所有・リソース\r\n  possessions: PossessionRecord[];\r\n  resources: ResourceRecord[];\r\n  obligations: ObligationRecord[];\r\n  \r\n  // 目標・動機\r\n  currentGoals: GoalRecord[];\r\n  motivations: MotivationRecord[];\r\n  conflicts: ConflictRecord[];",
                  "properties": {
                    "skills": {
                      "name": "skills",
                      "type": "SkillRecord[]",
                      "optional": false
                    },
                    "detailedEmotionalState": {
                      "name": "detailedEmotionalState",
                      "type": "DetailedEmotionalState",
                      "optional": false
                    },
                    "physicalCondition": {
                      "name": "physicalCondition",
                      "type": "PhysicalCondition",
                      "optional": false
                    },
                    "mentalCondition": {
                      "name": "mentalCondition",
                      "type": "MentalCondition",
                      "optional": false
                    },
                    "socialStatus": {
                      "name": "socialStatus",
                      "type": "SocialStatus",
                      "optional": false
                    },
                    "abilities": {
                      "name": "abilities",
                      "type": "AbilityRecord[]",
                      "optional": false
                    },
                    "knowledge": {
                      "name": "knowledge",
                      "type": "KnowledgeRecord[]",
                      "optional": false
                    },
                    "possessions": {
                      "name": "possessions",
                      "type": "PossessionRecord[]",
                      "optional": false
                    },
                    "resources": {
                      "name": "resources",
                      "type": "ResourceRecord[]",
                      "optional": false
                    },
                    "obligations": {
                      "name": "obligations",
                      "type": "ObligationRecord[]",
                      "optional": false
                    },
                    "currentGoals": {
                      "name": "currentGoals",
                      "type": "GoalRecord[]",
                      "optional": false
                    },
                    "motivations": {
                      "name": "motivations",
                      "type": "MotivationRecord[]",
                      "optional": false
                    },
                    "conflicts": {
                      "name": "conflicts",
                      "type": "ConflictRecord[]",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": true,
                  "lineNumber": 49
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "CharacterConflictResolution",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\character-database-types.ts",
                "definition": {
                  "name": "CharacterConflictResolution",
                  "body": "conflictType: 'description' | 'type' | 'personality' | 'backstory' | 'state';\r\n  sourceA: string;\r\n  sourceB: string;\r\n  conflictData: any;\r\n  resolution: any;\r\n  resolutionMethod: 'auto' | 'priority' | 'merge' | 'manual';\r\n  resolvedAt: string;\r\n  resolvedBy: string;",
                  "properties": {
                    "conflictType": {
                      "name": "conflictType",
                      "type": "'description' | 'type' | 'personality' | 'backstory' | 'state'",
                      "optional": false
                    },
                    "sourceA": {
                      "name": "sourceA",
                      "type": "string",
                      "optional": false
                    },
                    "sourceB": {
                      "name": "sourceB",
                      "type": "string",
                      "optional": false
                    },
                    "conflictData": {
                      "name": "conflictData",
                      "type": "any",
                      "optional": false
                    },
                    "resolution": {
                      "name": "resolution",
                      "type": "any",
                      "optional": false
                    },
                    "resolutionMethod": {
                      "name": "resolutionMethod",
                      "type": "'auto' | 'priority' | 'merge' | 'manual'",
                      "optional": false
                    },
                    "resolvedAt": {
                      "name": "resolvedAt",
                      "type": "string",
                      "optional": false
                    },
                    "resolvedBy": {
                      "name": "resolvedBy",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 88
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "CharacterPersonality",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\character-database-types.ts",
                "definition": {
                  "name": "CharacterPersonality",
                  "body": "traits: string[];\r\n  coreValues: string[];\r\n  motivations: string[];\r\n  fears: string[];\r\n  habits: string[];\r\n  speechPatterns: string[];\r\n  emotionalRange: EmotionalRange;\r\n  socialBehavior: SocialBehavior;",
                  "properties": {
                    "traits": {
                      "name": "traits",
                      "type": "string[]",
                      "optional": false
                    },
                    "coreValues": {
                      "name": "coreValues",
                      "type": "string[]",
                      "optional": false
                    },
                    "motivations": {
                      "name": "motivations",
                      "type": "string[]",
                      "optional": false
                    },
                    "fears": {
                      "name": "fears",
                      "type": "string[]",
                      "optional": false
                    },
                    "habits": {
                      "name": "habits",
                      "type": "string[]",
                      "optional": false
                    },
                    "speechPatterns": {
                      "name": "speechPatterns",
                      "type": "string[]",
                      "optional": false
                    },
                    "emotionalRange": {
                      "name": "emotionalRange",
                      "type": "EmotionalRange",
                      "optional": false
                    },
                    "socialBehavior": {
                      "name": "socialBehavior",
                      "type": "SocialBehavior",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 102
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "CharacterBackstory",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\character-database-types.ts",
                "definition": {
                  "name": "CharacterBackstory",
                  "body": "summary: string;\r\n  keyEvents: BackstoryEvent[];\r\n  significantRelationships: SignificantRelationship[];\r\n  formativeExperiences: FormativeExperience[];\r\n  secrets: string[];\r\n  regrets: string[];\r\n  achievements: string[];",
                  "properties": {
                    "summary": {
                      "name": "summary",
                      "type": "string",
                      "optional": false
                    },
                    "keyEvents": {
                      "name": "keyEvents",
                      "type": "BackstoryEvent[]",
                      "optional": false
                    },
                    "significantRelationships": {
                      "name": "significantRelationships",
                      "type": "SignificantRelationship[]",
                      "optional": false
                    },
                    "formativeExperiences": {
                      "name": "formativeExperiences",
                      "type": "FormativeExperience[]",
                      "optional": false
                    },
                    "secrets": {
                      "name": "secrets",
                      "type": "string[]",
                      "optional": false
                    },
                    "regrets": {
                      "name": "regrets",
                      "type": "string[]",
                      "optional": false
                    },
                    "achievements": {
                      "name": "achievements",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 137
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "CharacterRelationship",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\character-database-types.ts",
                "definition": {
                  "name": "CharacterRelationship",
                  "body": "relationshipId: string;\r\n  targetCharacterId: string;\r\n  targetCharacterName: string;\r\n  relationshipType: string;\r\n  currentStatus: RelationshipStatus;\r\n  history: RelationshipHistoryEntry[];\r\n  dynamics: RelationshipDynamics;\r\n  metadata: RelationshipMetadata;",
                  "properties": {
                    "relationshipId": {
                      "name": "relationshipId",
                      "type": "string",
                      "optional": false
                    },
                    "targetCharacterId": {
                      "name": "targetCharacterId",
                      "type": "string",
                      "optional": false
                    },
                    "targetCharacterName": {
                      "name": "targetCharacterName",
                      "type": "string",
                      "optional": false
                    },
                    "relationshipType": {
                      "name": "relationshipType",
                      "type": "string",
                      "optional": false
                    },
                    "currentStatus": {
                      "name": "currentStatus",
                      "type": "RelationshipStatus",
                      "optional": false
                    },
                    "history": {
                      "name": "history",
                      "type": "RelationshipHistoryEntry[]",
                      "optional": false
                    },
                    "dynamics": {
                      "name": "dynamics",
                      "type": "RelationshipDynamics",
                      "optional": false
                    },
                    "metadata": {
                      "name": "metadata",
                      "type": "RelationshipMetadata",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 192
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "CharacterAppearanceRecord",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\character-database-types.ts",
                "definition": {
                  "name": "CharacterAppearanceRecord",
                  "body": "recordId: string;\r\n  chapterNumber: number;\r\n  role: 'protagonist' | 'deuteragonist' | 'supporting' | 'minor' | 'mentioned';\r\n  significance: number; // 0-10\r\n  screenTime: number; // estimated minutes/pages\r\n  interactions: string[];\r\n  impact: string;\r\n  timestamp: string;",
                  "properties": {
                    "recordId": {
                      "name": "recordId",
                      "type": "string",
                      "optional": false
                    },
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": false
                    },
                    "role": {
                      "name": "role",
                      "type": "'protagonist' | 'deuteragonist' | 'supporting' | 'minor' | 'mentioned'",
                      "optional": false
                    },
                    "significance": {
                      "name": "significance",
                      "type": "number",
                      "optional": false
                    },
                    "screenTime": {
                      "name": "screenTime",
                      "type": "number",
                      "optional": false
                    },
                    "interactions": {
                      "name": "interactions",
                      "type": "string[]",
                      "optional": false
                    },
                    "impact": {
                      "name": "impact",
                      "type": "string",
                      "optional": false
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 453
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "CharacterStatistics",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\character-database-types.ts",
                "definition": {
                  "name": "CharacterStatistics",
                  "body": "totalAppearances: number;\r\n  totalScreenTime: number;\r\n  averageSignificance: number;\r\n  relationshipCount: number;\r\n  developmentEvents: number;\r\n  conflictInvolvement: number;\r\n  lastActivity: string;\r\n  firstAppearance: number;\r\n  peakChapter: number;\r\n  trendingTopics: string[];",
                  "properties": {
                    "totalAppearances": {
                      "name": "totalAppearances",
                      "type": "number",
                      "optional": false
                    },
                    "totalScreenTime": {
                      "name": "totalScreenTime",
                      "type": "number",
                      "optional": false
                    },
                    "averageSignificance": {
                      "name": "averageSignificance",
                      "type": "number",
                      "optional": false
                    },
                    "relationshipCount": {
                      "name": "relationshipCount",
                      "type": "number",
                      "optional": false
                    },
                    "developmentEvents": {
                      "name": "developmentEvents",
                      "type": "number",
                      "optional": false
                    },
                    "conflictInvolvement": {
                      "name": "conflictInvolvement",
                      "type": "number",
                      "optional": false
                    },
                    "lastActivity": {
                      "name": "lastActivity",
                      "type": "string",
                      "optional": false
                    },
                    "firstAppearance": {
                      "name": "firstAppearance",
                      "type": "number",
                      "optional": false
                    },
                    "peakChapter": {
                      "name": "peakChapter",
                      "type": "number",
                      "optional": false
                    },
                    "trendingTopics": {
                      "name": "trendingTopics",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 483
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "FormattedCharacterData",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\character-database-types.ts",
                "definition": {
                  "name": "FormattedCharacterData",
                  "body": "shortDescription: string;\r\n  mediumDescription: string;\r\n  longDescription: string;\r\n  personalityProfile: string;\r\n  relationshipSummary: string;\r\n  backgroundSummary: string;\r\n  currentStatusSummary: string;\r\n  developmentArc: string;\r\n  keyQuotes: string[];\r\n  characterTags: string[];\r\n  lastFormatted: string;",
                  "properties": {
                    "shortDescription": {
                      "name": "shortDescription",
                      "type": "string",
                      "optional": false
                    },
                    "mediumDescription": {
                      "name": "mediumDescription",
                      "type": "string",
                      "optional": false
                    },
                    "longDescription": {
                      "name": "longDescription",
                      "type": "string",
                      "optional": false
                    },
                    "personalityProfile": {
                      "name": "personalityProfile",
                      "type": "string",
                      "optional": false
                    },
                    "relationshipSummary": {
                      "name": "relationshipSummary",
                      "type": "string",
                      "optional": false
                    },
                    "backgroundSummary": {
                      "name": "backgroundSummary",
                      "type": "string",
                      "optional": false
                    },
                    "currentStatusSummary": {
                      "name": "currentStatusSummary",
                      "type": "string",
                      "optional": false
                    },
                    "developmentArc": {
                      "name": "developmentArc",
                      "type": "string",
                      "optional": false
                    },
                    "keyQuotes": {
                      "name": "keyQuotes",
                      "type": "string[]",
                      "optional": false
                    },
                    "characterTags": {
                      "name": "characterTags",
                      "type": "string[]",
                      "optional": false
                    },
                    "lastFormatted": {
                      "name": "lastFormatted",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 499
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "CharacterMetadata",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\character-database-types.ts",
                "definition": {
                  "name": "CharacterMetadata",
                  "body": "createdAt: string;\r\n  createdBy: string;\r\n  lastUpdated: string;\r\n  updatedBy: string;\r\n  version: string;\r\n  locked: boolean;\r\n  archivalStatus: 'active' | 'archived' | 'deprecated';\r\n  importanceScore: number; // 0-10\r\n  narrativeRole: string;\r\n  tags: string[];\r\n  notes: string[];",
                  "properties": {
                    "createdAt": {
                      "name": "createdAt",
                      "type": "string",
                      "optional": false
                    },
                    "createdBy": {
                      "name": "createdBy",
                      "type": "string",
                      "optional": false
                    },
                    "lastUpdated": {
                      "name": "lastUpdated",
                      "type": "string",
                      "optional": false
                    },
                    "updatedBy": {
                      "name": "updatedBy",
                      "type": "string",
                      "optional": false
                    },
                    "version": {
                      "name": "version",
                      "type": "string",
                      "optional": false
                    },
                    "locked": {
                      "name": "locked",
                      "type": "boolean",
                      "optional": false
                    },
                    "archivalStatus": {
                      "name": "archivalStatus",
                      "type": "'active' | 'archived' | 'deprecated'",
                      "optional": false
                    },
                    "importanceScore": {
                      "name": "importanceScore",
                      "type": "number",
                      "optional": false
                    },
                    "narrativeRole": {
                      "name": "narrativeRole",
                      "type": "string",
                      "optional": false
                    },
                    "tags": {
                      "name": "tags",
                      "type": "string[]",
                      "optional": false
                    },
                    "notes": {
                      "name": "notes",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 516
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "CharacterProgress",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "CharacterProgress",
                  "body": "name: string;\r\n    firstAppearance: number;\r\n    lastAppearance: number;\r\n    appearanceCount: number;\r\n    developmentPoints: {\r\n        chapter: number;\r\n        event: string;\r\n        timestamp: string;",
                  "properties": {
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "firstAppearance": {
                      "name": "firstAppearance",
                      "type": "number",
                      "optional": false
                    },
                    "lastAppearance": {
                      "name": "lastAppearance",
                      "type": "number",
                      "optional": false
                    },
                    "appearanceCount": {
                      "name": "appearanceCount",
                      "type": "number",
                      "optional": false
                    },
                    "developmentPoints": {
                      "name": "developmentPoints",
                      "type": "{",
                      "optional": false
                    },
                    "chapter": {
                      "name": "chapter",
                      "type": "number",
                      "optional": false
                    },
                    "event": {
                      "name": "event",
                      "type": "string",
                      "optional": false
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 200
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "CharacterChangeInfo",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "CharacterChangeInfo",
                  "body": "attribute: string;\r\n    previousValue: any;\r\n    currentValue: any;\r\n    classification?: {\r\n        type: string;\r\n        scope: string;\r\n        confidence: number;\r\n        explanation: string;\r\n        narrativeSignificance?: number;",
                  "properties": {
                    "attribute": {
                      "name": "attribute",
                      "type": "string",
                      "optional": false
                    },
                    "previousValue": {
                      "name": "previousValue",
                      "type": "any",
                      "optional": false
                    },
                    "currentValue": {
                      "name": "currentValue",
                      "type": "any",
                      "optional": false
                    },
                    "classification": {
                      "name": "classification",
                      "type": "{",
                      "optional": true
                    },
                    "type": {
                      "name": "type",
                      "type": "string",
                      "optional": false
                    },
                    "scope": {
                      "name": "scope",
                      "type": "string",
                      "optional": false
                    },
                    "confidence": {
                      "name": "confidence",
                      "type": "number",
                      "optional": false
                    },
                    "explanation": {
                      "name": "explanation",
                      "type": "string",
                      "optional": false
                    },
                    "narrativeSignificance": {
                      "name": "narrativeSignificance",
                      "type": "number",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 216
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "CharacterState",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "CharacterState",
                  "body": "name: string;\r\n    mood?: string;\r\n    development?: string;\r\n    relationships?: Relationship[];",
                  "properties": {
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "mood": {
                      "name": "mood",
                      "type": "string",
                      "optional": true
                    },
                    "development": {
                      "name": "development",
                      "type": "string",
                      "optional": true
                    },
                    "relationships": {
                      "name": "relationships",
                      "type": "Relationship[]",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 281
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "CharacterState",
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\bridge-types.ts",
                "definition": {
                  "name": "CharacterState",
                  "body": "name: string;                     // キャラクター名\r\n  currentState: string;             // 現在の状態\r\n  role: string;                     // 章での役割\r\n  goals?: string[];                 // 目標\r\n  conflicts?: string[];             // 葛藤\r\n  relationshipFocus?: string[];     // 焦点を当てる関係性\r\n  development?: string;             // 発展方向",
                  "properties": {
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "currentState": {
                      "name": "currentState",
                      "type": "string",
                      "optional": false
                    },
                    "role": {
                      "name": "role",
                      "type": "string",
                      "optional": false
                    },
                    "goals": {
                      "name": "goals",
                      "type": "string[]",
                      "optional": true
                    },
                    "conflicts": {
                      "name": "conflicts",
                      "type": "string[]",
                      "optional": true
                    },
                    "relationshipFocus": {
                      "name": "relationshipFocus",
                      "type": "string[]",
                      "optional": true
                    },
                    "development": {
                      "name": "development",
                      "type": "string",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 28
                },
                "system": "plot",
                "module": "plot"
              }
            ]
          },
          {
            "typeName": "CharacterDesign",
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\section\\types.ts",
                "definition": {
                  "name": "CharacterDesign",
                  "body": "/** 主要キャラクター */\r\n  mainCharacters: string[];\r\n  \r\n  /** キャラクターの役割 */\r\n  characterRoles: Record<string, {\r\n    /** 学習における役割 */\r\n    learningRole: 'mentor' | 'challenger' | 'reflector' | 'supporter';\r\n    \r\n    /** 物語機能 */\r\n    narrativeFunction: string;",
                  "properties": {
                    "mainCharacters": {
                      "name": "mainCharacters",
                      "type": "string[]",
                      "optional": false
                    },
                    "characterRoles": {
                      "name": "characterRoles",
                      "type": "Record<string",
                      "optional": false
                    },
                    "learningRole": {
                      "name": "learningRole",
                      "type": "'mentor' | 'challenger' | 'reflector' | 'supporter'",
                      "optional": false
                    },
                    "narrativeFunction": {
                      "name": "narrativeFunction",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 230
                },
                "system": "plot",
                "module": "plot/section"
              }
            ]
          }
        ],
        "memoryRelated": [
          {
            "typeName": "CacheableCoordinator",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\coordinators\\interfaces.ts",
                "definition": {
                  "name": "CacheableCoordinator",
                  "body": "/** キャッシュをクリアする */\r\n  clearCache(): void;",
                  "properties": {},
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 58
                },
                "system": "analysis",
                "module": "analysis/coordinators"
              }
            ]
          },
          {
            "typeName": "CacheStrategy",
            "system": "analysis",
            "definitions": [
              {
                "type": "type",
                "file": "lib\\analysis\\coordinators\\interfaces.ts",
                "definition": {
                  "name": "CacheStrategy",
                  "definition": "'memory' | 'persistent' | 'distributed' | 'none'",
                  "isUnion": true,
                  "isIntersection": false,
                  "isGeneric": false,
                  "lineNumber": 645
                },
                "system": "analysis",
                "module": "analysis/coordinators"
              }
            ]
          },
          {
            "typeName": "ICacheStorage",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\core\\interfaces.ts",
                "definition": {
                  "name": "ICacheStorage",
                  "body": "/**\r\n   * キャッシュに値を設定\r\n   * @param key キー\r\n   * @param value 値\r\n   * @param ttl 有効期限（ミリ秒）\r\n   */\r\n  set<T>(key: string | number, value: T, ttl?: number): void;\r\n  \r\n  /**\r\n   * キャッシュから値を取得\r\n   * @param key キー\r\n   * @returns キャッシュ値（存在しないかExpireしている場合はnull）\r\n   */\r\n  get<T>(key: string | number): T | null;\r\n  \r\n  /**\r\n   * キャッシュから項目を削除\r\n   * @param key キー\r\n   * @returns 削除成功時はtrue\r\n   */\r\n  delete(key: string | number): boolean;\r\n  \r\n  /**\r\n   * キャッシュをクリア\r\n   */\r\n  clear(): void;\r\n  \r\n  /**\r\n   * 指定したプレフィックスを持つキーのエントリをすべて削除\r\n   * @param prefix キープレフィックス\r\n   */\r\n  deleteByPrefix(prefix: string): void;\r\n  \r\n  /**\r\n   * 期限切れのエントリを削除\r\n   */\r\n  removeExpired(): void;\r\n  \r\n  /**\r\n   * キャッシュの数を取得\r\n   * @returns キャッシュエントリ数\r\n   */\r\n  size(): number;",
                  "properties": {
                    "key": {
                      "name": "key",
                      "type": "string | number): boolean",
                      "optional": false
                    },
                    "value": {
                      "name": "value",
                      "type": "T",
                      "optional": false
                    },
                    "ttl": {
                      "name": "ttl",
                      "type": "number): void",
                      "optional": true
                    },
                    "prefix": {
                      "name": "prefix",
                      "type": "string): void",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 109
                },
                "system": "analysis",
                "module": "analysis/core"
              }
            ]
          },
          {
            "typeName": "IMemoryManager",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\services\\theme\\interfaces.ts",
                "definition": {
                  "name": "IMemoryManager",
                  "body": "/**\r\n   * 長期記憶を取得\r\n   * @returns 長期記憶へのアクセスオブジェクト\r\n   */\r\n  getLongTermMemory(): any;\r\n\r\n  /**\r\n   * 物語の状態を取得\r\n   * @param chapterNumber 章番号\r\n   * @returns 物語の状態オブジェクト\r\n   */\r\n  getNarrativeState(chapterNumber: number): Promise<any>;\r\n\r\n  /**\r\n   * 最近の章のメモリを取得\r\n   * @param startChapter 開始章番号\r\n   * @param count 取得する章数\r\n   * @returns 章のメモリ配列\r\n   */\r\n  getRecentChapterMemories(startChapter: number, count: number): Promise<any[]>;\r\n\r\n  /**\r\n   * 現在のアークを取得\r\n   * @param chapterNumber 章番号\r\n   * @returns 現在のアーク情報\r\n   */\r\n  getCurrentArc(chapterNumber: number): Promise<any>;\r\n\r\n  /**\r\n   * 伏線状態を更新\r\n   * @param resolvedForeshadowing 解決された伏線の配列\r\n   * @param chapterNumber 章番号\r\n   * @returns 更新完了後に解決するPromise\r\n   */\r\n  updateForeshadowingStatus(resolvedForeshadowing: any[], chapterNumber: number): Promise<void>;",
                  "properties": {
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number): Promise<void>",
                      "optional": false
                    },
                    "startChapter": {
                      "name": "startChapter",
                      "type": "number",
                      "optional": false
                    },
                    "count": {
                      "name": "count",
                      "type": "number): Promise<any[]>",
                      "optional": false
                    },
                    "resolvedForeshadowing": {
                      "name": "resolvedForeshadowing",
                      "type": "any[]",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 158
                },
                "system": "analysis",
                "module": "analysis/services/theme"
              }
            ]
          },
          {
            "typeName": "LocalMemorySystemStatus",
            "system": "learning-journey",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\learning-journey\\index.ts",
                "definition": {
                  "name": "LocalMemorySystemStatus",
                  "body": "initialized: boolean;\n    healthy: boolean;",
                  "properties": {
                    "initialized": {
                      "name": "initialized",
                      "type": "boolean",
                      "optional": false
                    },
                    "healthy": {
                      "name": "healthy",
                      "type": "boolean",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 155
                },
                "system": "learning-journey",
                "module": "learning-journey"
              }
            ]
          },
          {
            "typeName": "IMemoryLayer",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\interfaces.ts",
                "definition": {
                  "name": "IMemoryLayer",
                  "body": "// ✅ export を削除\r\n  initialize(): Promise<void>;\r\n  addChapter(chapter: Chapter): Promise<OperationResult>;\r\n  getDiagnostics(): Promise<DiagnosticsResult>;\r\n  getStatus(): Promise<StatusResult>;\r\n  getDataSize(): Promise<number>;\r\n  save(): Promise<void>;\r\n  cleanup(): Promise<void>;\r\n  \r\n  // 追加メソッド（必要に応じて各層で実装）\r\n  getContext?(request: any): Promise<any>;\r\n  compress?(): Promise<OperationResult>;",
                  "properties": {
                    "chapter": {
                      "name": "chapter",
                      "type": "Chapter): Promise<OperationResult>",
                      "optional": false
                    },
                    "request": {
                      "name": "request",
                      "type": "any): Promise<any>",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 53
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "CacheStatisticsData",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\interfaces.ts",
                "definition": {
                  "name": "CacheStatisticsData",
                  "body": "// ✅ export を削除\r\n  hitRatio: number;\r\n  missRatio: number;\r\n  totalRequests: number;\r\n  cacheSize: number;\r\n  lastOptimization: string;\r\n  hitRate?: number; // 互換性のため\r\n  avgAccessTime?: number; // 互換性のため\r\n  memoryUsage?: {\r\n    shortTerm: number;\r\n    midTerm: number;\r\n    longTerm: number;",
                  "properties": {
                    "hitRatio": {
                      "name": "hitRatio",
                      "type": "number",
                      "optional": false
                    },
                    "missRatio": {
                      "name": "missRatio",
                      "type": "number",
                      "optional": false
                    },
                    "totalRequests": {
                      "name": "totalRequests",
                      "type": "number",
                      "optional": false
                    },
                    "cacheSize": {
                      "name": "cacheSize",
                      "type": "number",
                      "optional": false
                    },
                    "lastOptimization": {
                      "name": "lastOptimization",
                      "type": "string",
                      "optional": false
                    },
                    "hitRate": {
                      "name": "hitRate",
                      "type": "number",
                      "optional": true
                    },
                    "avgAccessTime": {
                      "name": "avgAccessTime",
                      "type": "number",
                      "optional": true
                    },
                    "memoryUsage": {
                      "name": "memoryUsage",
                      "type": "{",
                      "optional": true
                    },
                    "shortTerm": {
                      "name": "shortTerm",
                      "type": "number",
                      "optional": false
                    },
                    "midTerm": {
                      "name": "midTerm",
                      "type": "number",
                      "optional": false
                    },
                    "longTerm": {
                      "name": "longTerm",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 87
                },
                "system": "memory",
                "module": "memory/core"
              },
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "CacheStatisticsData",
                  "body": "// UnifiedAccessAPI 用プロパティ\n    hitRatio: number;\n    missRatio: number;\n    totalRequests: number;\n    cacheSize: number;\n    lastOptimization: string;\n    evictionCount: number;\n    \n    // CacheCoordinator 用プロパティ（互換性のため）\n    totalEntries?: number;\n    hitRate?: number;\n    avgAccessTime?: number;\n    memoryUsage?: {\n        shortTerm: number;\n        midTerm: number;\n        longTerm: number;",
                  "properties": {
                    "hitRatio": {
                      "name": "hitRatio",
                      "type": "number",
                      "optional": false
                    },
                    "missRatio": {
                      "name": "missRatio",
                      "type": "number",
                      "optional": false
                    },
                    "totalRequests": {
                      "name": "totalRequests",
                      "type": "number",
                      "optional": false
                    },
                    "cacheSize": {
                      "name": "cacheSize",
                      "type": "number",
                      "optional": false
                    },
                    "lastOptimization": {
                      "name": "lastOptimization",
                      "type": "string",
                      "optional": false
                    },
                    "evictionCount": {
                      "name": "evictionCount",
                      "type": "number",
                      "optional": false
                    },
                    "totalEntries": {
                      "name": "totalEntries",
                      "type": "number",
                      "optional": true
                    },
                    "hitRate": {
                      "name": "hitRate",
                      "type": "number",
                      "optional": true
                    },
                    "avgAccessTime": {
                      "name": "avgAccessTime",
                      "type": "number",
                      "optional": true
                    },
                    "memoryUsage": {
                      "name": "memoryUsage",
                      "type": "{",
                      "optional": true
                    },
                    "shortTerm": {
                      "name": "shortTerm",
                      "type": "number",
                      "optional": false
                    },
                    "midTerm": {
                      "name": "midTerm",
                      "type": "number",
                      "optional": false
                    },
                    "longTerm": {
                      "name": "longTerm",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 352
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "ICacheCoordinator",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\interfaces.ts",
                "definition": {
                  "name": "ICacheCoordinator",
                  "body": "// ✅ export を削除\r\n  invalidateChapterCache(chapterNumber: number): Promise<void>;\r\n  validateCacheHealth(): Promise<{ isHealthy: boolean; issues: string[]",
                  "properties": {
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number): Promise<void>",
                      "optional": false
                    },
                    "isHealthy": {
                      "name": "isHealthy",
                      "type": "boolean",
                      "optional": false
                    },
                    "issues": {
                      "name": "issues",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": true,
                  "lineNumber": 106
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "MemoryQuery",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\interfaces.ts",
                "definition": {
                  "name": "MemoryQuery",
                  "body": "// ✅ export を削除\r\n  type: 'worldSettings' | 'characterInfo' | 'chapterMemories' | 'arcMemory' | 'keyEvents' | 'search';\r\n  target?: string | number;\r\n  parameters?: Record<string, any>;\r\n  options?: {\r\n    useCache?: boolean;\r\n    forceRefresh?: boolean;\r\n    includeMetadata?: boolean;",
                  "properties": {
                    "type": {
                      "name": "type",
                      "type": "'worldSettings' | 'characterInfo' | 'chapterMemories' | 'arcMemory' | 'keyEvents' | 'search'",
                      "optional": false
                    },
                    "target": {
                      "name": "target",
                      "type": "string | number",
                      "optional": true
                    },
                    "parameters": {
                      "name": "parameters",
                      "type": "Record<string",
                      "optional": true
                    },
                    "options": {
                      "name": "options",
                      "type": "{",
                      "optional": true
                    },
                    "useCache": {
                      "name": "useCache",
                      "type": "boolean",
                      "optional": true
                    },
                    "forceRefresh": {
                      "name": "forceRefresh",
                      "type": "boolean",
                      "optional": true
                    },
                    "includeMetadata": {
                      "name": "includeMetadata",
                      "type": "boolean",
                      "optional": true
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 128
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "MemoryResult",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\interfaces.ts",
                "definition": {
                  "name": "MemoryResult",
                  "body": "// ✅ export を削除\r\n  success: boolean;\r\n  data: any;\r\n  source: 'cache' | 'short-term' | 'mid-term' | 'long-term' | 'unified';\r\n  timestamp: string;\r\n  metadata?: {\r\n    cacheHit: boolean;\r\n    processingTime: number;\r\n    dataFreshness: number;\r\n    conflictsResolved: string[];",
                  "properties": {
                    "success": {
                      "name": "success",
                      "type": "boolean",
                      "optional": false
                    },
                    "data": {
                      "name": "data",
                      "type": "any",
                      "optional": false
                    },
                    "source": {
                      "name": "source",
                      "type": "'cache' | 'short-term' | 'mid-term' | 'long-term' | 'unified'",
                      "optional": false
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    },
                    "metadata": {
                      "name": "metadata",
                      "type": "{",
                      "optional": true
                    },
                    "cacheHit": {
                      "name": "cacheHit",
                      "type": "boolean",
                      "optional": false
                    },
                    "processingTime": {
                      "name": "processingTime",
                      "type": "number",
                      "optional": false
                    },
                    "dataFreshness": {
                      "name": "dataFreshness",
                      "type": "number",
                      "optional": false
                    },
                    "conflictsResolved": {
                      "name": "conflictsResolved",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 142
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "ShortTermMemoryConfig",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\interfaces.ts",
                "definition": {
                  "name": "ShortTermMemoryConfig",
                  "body": "// ✅ export を削除\r\n  maxChapters: number;\r\n  cacheEnabled: boolean;",
                  "properties": {
                    "maxChapters": {
                      "name": "maxChapters",
                      "type": "number",
                      "optional": false
                    },
                    "cacheEnabled": {
                      "name": "cacheEnabled",
                      "type": "boolean",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 280
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "IShortTermMemory",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\interfaces.ts",
                "definition": {
                  "name": "IShortTermMemory",
                  "body": "// ✅ export を削除\r\n  getRecentChapters(limit?: number): Promise<any[]>;\r\n  getCurrentContext(): Promise<any>;\r\n  updateBuffers(data: any): Promise<void>;\r\n  getAnalysisResults(): Promise<any>;",
                  "properties": {
                    "limit": {
                      "name": "limit",
                      "type": "number): Promise<any[]>",
                      "optional": true
                    },
                    "data": {
                      "name": "data",
                      "type": "any): Promise<void>",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": true,
                  "lineNumber": 288
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "IMidTermMemory",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\interfaces.ts",
                "definition": {
                  "name": "IMidTermMemory",
                  "body": "// ✅ export を削除\r\n  getChapterSummaries(range?: { start: number; end: number",
                  "properties": {
                    "range": {
                      "name": "range",
                      "type": "{ start: number",
                      "optional": true
                    },
                    "end": {
                      "name": "end",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": true,
                  "lineNumber": 302
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "ILongTermMemory",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\interfaces.ts",
                "definition": {
                  "name": "ILongTermMemory",
                  "body": "// ✅ export を削除\r\n  getCharacterDatabase(): Promise<any>;\r\n  getWorldKnowledge(): Promise<any>;\r\n  getSystemKnowledge(): Promise<any>;\r\n  getHistoricalRecords(): Promise<any>;\r\n  addForeshadowing(foreshadowing: any): Promise<any>;\r\n  resolveForeshadowing(id: string, resolution: any): Promise<void>;\r\n  getUnresolvedForeshadowing(): Promise<any[]>;\r\n  performLearningAndImprovement(): Promise<any>;",
                  "properties": {
                    "foreshadowing": {
                      "name": "foreshadowing",
                      "type": "any): Promise<any>",
                      "optional": false
                    },
                    "id": {
                      "name": "id",
                      "type": "string",
                      "optional": false
                    },
                    "resolution": {
                      "name": "resolution",
                      "type": "any): Promise<void>",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": true,
                  "lineNumber": 318
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "IUnifiedMemoryManager",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\interfaces.ts",
                "definition": {
                  "name": "IUnifiedMemoryManager",
                  "body": "// ✅ export を削除\r\n  // 基本操作\r\n  initialize(): Promise<void>;\r\n  addChapter(chapter: Chapter): Promise<OperationResult>;\r\n  save(): Promise<void>;\r\n  cleanup(): Promise<void>;\r\n  \r\n  // 診断・監視\r\n  performComprehensiveDiagnostic(): Promise<ComprehensiveDiagnosticResult>;\r\n  getSystemStatus(): Promise<{\r\n    shortTerm: StatusResult;\r\n    midTerm: StatusResult;\r\n    longTerm: StatusResult;\r\n    integration: StatusResult;",
                  "properties": {
                    "chapter": {
                      "name": "chapter",
                      "type": "Chapter): Promise<OperationResult>",
                      "optional": false
                    },
                    "shortTerm": {
                      "name": "shortTerm",
                      "type": "StatusResult",
                      "optional": false
                    },
                    "midTerm": {
                      "name": "midTerm",
                      "type": "StatusResult",
                      "optional": false
                    },
                    "longTerm": {
                      "name": "longTerm",
                      "type": "StatusResult",
                      "optional": false
                    },
                    "integration": {
                      "name": "integration",
                      "type": "StatusResult",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 337
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "MemoryLevel",
            "system": "memory",
            "definitions": [
              {
                "type": "enum",
                "file": "lib\\memory\\core\\interfaces.ts",
                "definition": {
                  "name": "MemoryLevel",
                  "body": "// ✅ enum は直接エクスポート可能\r\n  SHORT_TERM = 'short-term',\r\n  MID_TERM = 'mid-term',\r\n  LONG_TERM = 'long-term'",
                  "values": [
                    {
                      "name": "// ✅ enum は直接エクスポート可能\r\n  SHORT_TERM",
                      "value": "'short-term'"
                    },
                    {
                      "name": "MID_TERM",
                      "value": "'mid-term'"
                    },
                    {
                      "name": "LONG_TERM",
                      "value": "'long-term'"
                    }
                  ],
                  "lineNumber": 374
                },
                "system": "memory",
                "module": "memory/core"
              },
              {
                "type": "enum",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "MemoryLevel",
                  "body": "SHORT_TERM = 'SHORT_TERM',\n    MID_TERM = 'MID_TERM',\n    LONG_TERM = 'LONG_TERM'",
                  "values": [
                    {
                      "name": "SHORT_TERM",
                      "value": "'SHORT_TERM'"
                    },
                    {
                      "name": "MID_TERM",
                      "value": "'MID_TERM'"
                    },
                    {
                      "name": "LONG_TERM",
                      "value": "'LONG_TERM'"
                    }
                  ],
                  "lineNumber": 49
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "MemoryHierarchyConfig",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "MemoryHierarchyConfig",
                  "body": "shortTerm: {\n        maxChapters: number;\n        retentionTime: number; // milliseconds\n        cacheEnabled: boolean;",
                  "properties": {
                    "shortTerm": {
                      "name": "shortTerm",
                      "type": "{",
                      "optional": false
                    },
                    "maxChapters": {
                      "name": "maxChapters",
                      "type": "number",
                      "optional": false
                    },
                    "retentionTime": {
                      "name": "retentionTime",
                      "type": "number",
                      "optional": false
                    },
                    "cacheEnabled": {
                      "name": "cacheEnabled",
                      "type": "boolean",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 58
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "UnifiedMemoryContext",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "UnifiedMemoryContext",
                  "body": "chapterNumber: number;\n    timestamp: string;\n    \n    // Short Term Context\n    shortTerm: {\n        recentChapters: ChapterContextData[];\n        immediateCharacterStates: Map<string, CharacterState>;\n        keyPhrases: string[];\n        processingBuffers: ProcessingBuffer[];",
                  "properties": {
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": false
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    },
                    "shortTerm": {
                      "name": "shortTerm",
                      "type": "{",
                      "optional": false
                    },
                    "recentChapters": {
                      "name": "recentChapters",
                      "type": "ChapterContextData[]",
                      "optional": false
                    },
                    "immediateCharacterStates": {
                      "name": "immediateCharacterStates",
                      "type": "Map<string",
                      "optional": false
                    },
                    "keyPhrases": {
                      "name": "keyPhrases",
                      "type": "string[]",
                      "optional": false
                    },
                    "processingBuffers": {
                      "name": "processingBuffers",
                      "type": "ProcessingBuffer[]",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 79
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "MemoryAccessRequest",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "MemoryAccessRequest",
                  "body": "chapterNumber: number;\n    requestType: MemoryRequestType;\n    targetLayers: MemoryLevel[];\n    filters?: MemoryAccessFilters;\n    options?: MemoryAccessOptions;",
                  "properties": {
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": false
                    },
                    "requestType": {
                      "name": "requestType",
                      "type": "MemoryRequestType",
                      "optional": false
                    },
                    "targetLayers": {
                      "name": "targetLayers",
                      "type": "MemoryLevel[]",
                      "optional": false
                    },
                    "filters": {
                      "name": "filters",
                      "type": "MemoryAccessFilters",
                      "optional": true
                    },
                    "options": {
                      "name": "options",
                      "type": "MemoryAccessOptions",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 119
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "MemoryAccessResponse",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "MemoryAccessResponse",
                  "body": "success: boolean;\n    context: UnifiedMemoryContext | null;\n    fromCache: boolean;\n    processingTime: number;\n    error?: string;\n    metadata?: {\n        layersAccessed: MemoryLevel[];\n        duplicatesResolved: number;\n        cacheHits: number;",
                  "properties": {
                    "success": {
                      "name": "success",
                      "type": "boolean",
                      "optional": false
                    },
                    "context": {
                      "name": "context",
                      "type": "UnifiedMemoryContext | null",
                      "optional": false
                    },
                    "fromCache": {
                      "name": "fromCache",
                      "type": "boolean",
                      "optional": false
                    },
                    "processingTime": {
                      "name": "processingTime",
                      "type": "number",
                      "optional": false
                    },
                    "error": {
                      "name": "error",
                      "type": "string",
                      "optional": true
                    },
                    "metadata": {
                      "name": "metadata",
                      "type": "{",
                      "optional": true
                    },
                    "layersAccessed": {
                      "name": "layersAccessed",
                      "type": "MemoryLevel[]",
                      "optional": false
                    },
                    "duplicatesResolved": {
                      "name": "duplicatesResolved",
                      "type": "number",
                      "optional": false
                    },
                    "cacheHits": {
                      "name": "cacheHits",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 130
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "MemoryAccessFilters",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "MemoryAccessFilters",
                  "body": "characterIds?: string[];\n    eventTypes?: string[];\n    analysisTypes?: string[];\n    timeRange?: {\n        startChapter: number;\n        endChapter: number;",
                  "properties": {
                    "characterIds": {
                      "name": "characterIds",
                      "type": "string[]",
                      "optional": true
                    },
                    "eventTypes": {
                      "name": "eventTypes",
                      "type": "string[]",
                      "optional": true
                    },
                    "analysisTypes": {
                      "name": "analysisTypes",
                      "type": "string[]",
                      "optional": true
                    },
                    "timeRange": {
                      "name": "timeRange",
                      "type": "{",
                      "optional": true
                    },
                    "startChapter": {
                      "name": "startChapter",
                      "type": "number",
                      "optional": false
                    },
                    "endChapter": {
                      "name": "endChapter",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 158
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "MemoryAccessOptions",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "MemoryAccessOptions",
                  "body": "includeCache?: boolean;\n    resolveDuplicates?: boolean;\n    optimizeAccess?: boolean;\n    deepAnalysis?: boolean;\n    compressionLevel?: number;",
                  "properties": {
                    "includeCache": {
                      "name": "includeCache",
                      "type": "boolean",
                      "optional": true
                    },
                    "resolveDuplicates": {
                      "name": "resolveDuplicates",
                      "type": "boolean",
                      "optional": true
                    },
                    "optimizeAccess": {
                      "name": "optimizeAccess",
                      "type": "boolean",
                      "optional": true
                    },
                    "deepAnalysis": {
                      "name": "deepAnalysis",
                      "type": "boolean",
                      "optional": true
                    },
                    "compressionLevel": {
                      "name": "compressionLevel",
                      "type": "number",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 175
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "MemoryOperationResult",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "MemoryOperationResult",
                  "body": "success: boolean;\n    processingTime: number;\n    shortTermUpdated: boolean;\n    integrationProcessed: boolean;\n    duplicatesResolved: number;\n    error?: string;\n    metadata?: {\n        chapterNumber?: number;\n        dataSize?: number;\n        timestamp: string;",
                  "properties": {
                    "success": {
                      "name": "success",
                      "type": "boolean",
                      "optional": false
                    },
                    "processingTime": {
                      "name": "processingTime",
                      "type": "number",
                      "optional": false
                    },
                    "shortTermUpdated": {
                      "name": "shortTermUpdated",
                      "type": "boolean",
                      "optional": false
                    },
                    "integrationProcessed": {
                      "name": "integrationProcessed",
                      "type": "boolean",
                      "optional": false
                    },
                    "duplicatesResolved": {
                      "name": "duplicatesResolved",
                      "type": "number",
                      "optional": false
                    },
                    "error": {
                      "name": "error",
                      "type": "string",
                      "optional": true
                    },
                    "metadata": {
                      "name": "metadata",
                      "type": "{",
                      "optional": true
                    },
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": true
                    },
                    "dataSize": {
                      "name": "dataSize",
                      "type": "number",
                      "optional": true
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 186
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "MemorySystemStatus",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "MemorySystemStatus",
                  "body": "initialized: boolean;\n    lastUpdateTime: string;\n    memoryLayers: {\n        shortTerm: MemoryLayerStatus;\n        midTerm: MemoryLayerStatus;\n        longTerm: MemoryLayerStatus;",
                  "properties": {
                    "initialized": {
                      "name": "initialized",
                      "type": "boolean",
                      "optional": false
                    },
                    "lastUpdateTime": {
                      "name": "lastUpdateTime",
                      "type": "string",
                      "optional": false
                    },
                    "memoryLayers": {
                      "name": "memoryLayers",
                      "type": "{",
                      "optional": false
                    },
                    "shortTerm": {
                      "name": "shortTerm",
                      "type": "MemoryLayerStatus",
                      "optional": false
                    },
                    "midTerm": {
                      "name": "midTerm",
                      "type": "MemoryLayerStatus",
                      "optional": false
                    },
                    "longTerm": {
                      "name": "longTerm",
                      "type": "MemoryLayerStatus",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 411
                },
                "system": "memory",
                "module": "memory/core"
              },
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "MemorySystemStatus",
                  "body": "initialized: boolean;\r\n    shortTerm: {\r\n        entryCount: number;\r\n        lastUpdateTime: string | null;",
                  "properties": {
                    "initialized": {
                      "name": "initialized",
                      "type": "boolean",
                      "optional": false
                    },
                    "shortTerm": {
                      "name": "shortTerm",
                      "type": "{",
                      "optional": false
                    },
                    "entryCount": {
                      "name": "entryCount",
                      "type": "number",
                      "optional": false
                    },
                    "lastUpdateTime": {
                      "name": "lastUpdateTime",
                      "type": "string | null",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 605
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "MemoryLayerStatus",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "MemoryLayerStatus",
                  "body": "healthy: boolean;\n    dataCount: number;\n    lastUpdate: string;\n    storageSize: number;\n    errorCount: number;",
                  "properties": {
                    "healthy": {
                      "name": "healthy",
                      "type": "boolean",
                      "optional": false
                    },
                    "dataCount": {
                      "name": "dataCount",
                      "type": "number",
                      "optional": false
                    },
                    "lastUpdate": {
                      "name": "lastUpdate",
                      "type": "string",
                      "optional": false
                    },
                    "storageSize": {
                      "name": "storageSize",
                      "type": "number",
                      "optional": false
                    },
                    "errorCount": {
                      "name": "errorCount",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 432
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "MemoryRequestType",
            "system": "memory",
            "definitions": [
              {
                "type": "enum",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "MemoryRequestType",
                  "body": "CHAPTER_CONTEXT = 'CHAPTER_CONTEXT',\n    CHARACTER_ANALYSIS = 'CHARACTER_ANALYSIS',\n    NARRATIVE_STATE = 'NARRATIVE_STATE',\n    WORLD_KNOWLEDGE = 'WORLD_KNOWLEDGE',\n    SYSTEM_DIAGNOSTICS = 'SYSTEM_DIAGNOSTICS',\n    INTEGRATED_CONTEXT = 'INTEGRATED_CONTEXT'",
                  "values": [
                    {
                      "name": "CHAPTER_CONTEXT",
                      "value": "'CHAPTER_CONTEXT'"
                    },
                    {
                      "name": "CHARACTER_ANALYSIS",
                      "value": "'CHARACTER_ANALYSIS'"
                    },
                    {
                      "name": "NARRATIVE_STATE",
                      "value": "'NARRATIVE_STATE'"
                    },
                    {
                      "name": "WORLD_KNOWLEDGE",
                      "value": "'WORLD_KNOWLEDGE'"
                    },
                    {
                      "name": "SYSTEM_DIAGNOSTICS",
                      "value": "'SYSTEM_DIAGNOSTICS'"
                    },
                    {
                      "name": "INTEGRATED_CONTEXT",
                      "value": "'INTEGRATED_CONTEXT'"
                    }
                  ],
                  "lineNumber": 146
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "ChapterMemory",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "ChapterMemory",
                  "body": "chapter: number;\r\n    summary: string;\r\n    key_events?: KeyEvent[];\r\n    character_states?: CharacterState[];\r\n    timestamp: string;\r\n    emotional_impact: number;\r\n    plot_significance: number;\r\n    foreshadowing?: Foreshadowing[];\r\n    resolved_foreshadowing?: {\r\n        id: string;\r\n        description: string;\r\n        resolution: string;",
                  "properties": {
                    "chapter": {
                      "name": "chapter",
                      "type": "number",
                      "optional": false
                    },
                    "summary": {
                      "name": "summary",
                      "type": "string",
                      "optional": false
                    },
                    "key_events": {
                      "name": "key_events",
                      "type": "KeyEvent[]",
                      "optional": true
                    },
                    "character_states": {
                      "name": "character_states",
                      "type": "CharacterState[]",
                      "optional": true
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    },
                    "emotional_impact": {
                      "name": "emotional_impact",
                      "type": "number",
                      "optional": false
                    },
                    "plot_significance": {
                      "name": "plot_significance",
                      "type": "number",
                      "optional": false
                    },
                    "foreshadowing": {
                      "name": "foreshadowing",
                      "type": "Foreshadowing[]",
                      "optional": true
                    },
                    "resolved_foreshadowing": {
                      "name": "resolved_foreshadowing",
                      "type": "{",
                      "optional": true
                    },
                    "id": {
                      "name": "id",
                      "type": "string",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    },
                    "resolution": {
                      "name": "resolution",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 247
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "ArcMemory",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "ArcMemory",
                  "body": "number: number;\r\n    arc_name?: string;\r\n    theme: string;\r\n    themes?: string[];\r\n    chapter_range: { start: number; end: number",
                  "properties": {
                    "number": {
                      "name": "number",
                      "type": "number",
                      "optional": false
                    },
                    "arc_name": {
                      "name": "arc_name",
                      "type": "string",
                      "optional": true
                    },
                    "theme": {
                      "name": "theme",
                      "type": "string",
                      "optional": false
                    },
                    "themes": {
                      "name": "themes",
                      "type": "string[]",
                      "optional": true
                    },
                    "chapter_range": {
                      "name": "chapter_range",
                      "type": "{ start: number",
                      "optional": false
                    },
                    "end": {
                      "name": "end",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 436
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "CompressedMemory",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "CompressedMemory",
                  "body": "timeframe: { start: number; end: number",
                  "properties": {
                    "timeframe": {
                      "name": "timeframe",
                      "type": "{ start: number",
                      "optional": false
                    },
                    "end": {
                      "name": "end",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 456
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "NarrativeMemoryStatus",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "NarrativeMemoryStatus",
                  "body": "initialized: boolean;\r\n    summaryCount: number;\r\n    currentState: NarrativeState;\r\n    lastUpdateTime: string | null;",
                  "properties": {
                    "initialized": {
                      "name": "initialized",
                      "type": "boolean",
                      "optional": false
                    },
                    "summaryCount": {
                      "name": "summaryCount",
                      "type": "number",
                      "optional": false
                    },
                    "currentState": {
                      "name": "currentState",
                      "type": "NarrativeState",
                      "optional": false
                    },
                    "lastUpdateTime": {
                      "name": "lastUpdateTime",
                      "type": "string | null",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 594
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "Memory",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "Memory",
                  "body": "type: MemoryType;\r\n    content: string;\r\n    priority: number;\r\n    metadata?: any;",
                  "properties": {
                    "type": {
                      "name": "type",
                      "type": "MemoryType",
                      "optional": false
                    },
                    "content": {
                      "name": "content",
                      "type": "string",
                      "optional": false
                    },
                    "priority": {
                      "name": "priority",
                      "type": "number",
                      "optional": false
                    },
                    "metadata": {
                      "name": "metadata",
                      "type": "any",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 689
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "MemoryType",
            "system": "memory",
            "definitions": [
              {
                "type": "type",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "MemoryType",
                  "definition": "'SHORT_TERM' | 'MID_TERM' | 'LONG_TERM'",
                  "isUnion": true,
                  "isIntersection": false,
                  "isGeneric": false,
                  "lineNumber": 683
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "StorageProvider",
            "system": "storage",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\storage\\types.ts",
                "definition": {
                  "name": "StorageProvider",
                  "body": "/**\r\n     * ファイルを読み込みます\r\n     * \r\n     * 指定されたパスのファイルを読み込み、その内容を文字列として返します。\r\n     * ファイルが存在しない場合は例外をスローします。\r\n     * \r\n     * @param {string",
                  "properties": {},
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 116
                },
                "system": "storage",
                "module": "storage"
              }
            ]
          },
          {
            "typeName": "GitHubStorageOptions",
            "system": "storage",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\storage\\types.ts",
                "definition": {
                  "name": "GitHubStorageOptions",
                  "body": "/**\r\n     * GitHubパーソナルアクセストークン\r\n     * \r\n     * GitHub APIにアクセスするための認証トークンです。\r\n     * リポジトリの読み書き権限が必要です。\r\n     * \r\n     * @type {string",
                  "properties": {},
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 373
                },
                "system": "storage",
                "module": "storage"
              }
            ]
          },
          {
            "typeName": "LocalStorageOptions",
            "system": "storage",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\storage\\types.ts",
                "definition": {
                  "name": "LocalStorageOptions",
                  "body": "/**\r\n     * ベースディレクトリパス\r\n     * \r\n     * すべてのファイル操作の基準となるディレクトリパスです。\r\n     * すべてのファイルパスはこのディレクトリからの相対パスとして解釈されます。\r\n     * \r\n     * @type {string",
                  "properties": {},
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 441
                },
                "system": "storage",
                "module": "storage"
              }
            ]
          }
        ],
        "plotRelated": [
          {
            "typeName": "StoryEvent",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\enhancement\\tension\\interfaces.ts",
                "definition": {
                  "name": "StoryEvent",
                  "body": "/** イベントタイプ */\r\n  type: string;\r\n  /** 重要度 (0-1) */\r\n  significance: number;\r\n  /** 追加情報 */\r\n  details?: any;",
                  "properties": {
                    "type": {
                      "name": "type",
                      "type": "string",
                      "optional": false
                    },
                    "significance": {
                      "name": "significance",
                      "type": "number",
                      "optional": false
                    },
                    "details": {
                      "name": "details",
                      "type": "any",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 43
                },
                "system": "analysis",
                "module": "analysis/enhancement/tension"
              }
            ]
          },
          {
            "typeName": "NarrativeArcInfo",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\enhancement\\tension\\interfaces.ts",
                "definition": {
                  "name": "NarrativeArcInfo",
                  "body": "/** 現在のアーク番号 */\r\n  currentArcNumber: number;\r\n  /** アークの開始章 */\r\n  arcStartChapter: number;\r\n  /** アークの終了章（予測） */\r\n  arcEndChapter: number;\r\n  /** アーク内での位置 (0-1) */\r\n  positionInArc: number;\r\n  /** アークのテーマ */\r\n  arcTheme?: string;",
                  "properties": {
                    "currentArcNumber": {
                      "name": "currentArcNumber",
                      "type": "number",
                      "optional": false
                    },
                    "arcStartChapter": {
                      "name": "arcStartChapter",
                      "type": "number",
                      "optional": false
                    },
                    "arcEndChapter": {
                      "name": "arcEndChapter",
                      "type": "number",
                      "optional": false
                    },
                    "positionInArc": {
                      "name": "positionInArc",
                      "type": "number",
                      "optional": false
                    },
                    "arcTheme": {
                      "name": "arcTheme",
                      "type": "string",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 67
                },
                "system": "analysis",
                "module": "analysis/enhancement/tension"
              }
            ]
          },
          {
            "typeName": "NarrativeAnalysisOptions",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\services\\narrative\\interfaces.ts",
                "definition": {
                  "name": "NarrativeAnalysisOptions",
                  "body": "/** Gemini APIクライアント */\n  geminiClient?: GeminiClient;\n  /** ジャンル */\n  genre?: string;",
                  "properties": {
                    "geminiClient": {
                      "name": "geminiClient",
                      "type": "GeminiClient",
                      "optional": true
                    },
                    "genre": {
                      "name": "genre",
                      "type": "string",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 46
                },
                "system": "analysis",
                "module": "analysis/services/narrative"
              }
            ]
          },
          {
            "typeName": "INarrativeAnalysisService",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\services\\narrative\\interfaces.ts",
                "definition": {
                  "name": "INarrativeAnalysisService",
                  "body": "/**\n   * シーン構造を分析\n   * @param lastChapters 分析対象の章数\n   * @returns シーン構造分析結果\n   */\n  analyzeSceneStructure(lastChapters?: number): Promise<SceneStructureAnalysis>;\n\n  /**\n   * シーン推奨を生成\n   * @param chapterNumber 章番号\n   * @returns シーン推奨の配列\n   */\n  generateSceneRecommendations(chapterNumber: number): Promise<SceneRecommendation[]>;\n\n  /**\n   * 文学的インスピレーションを生成\n   * @param context コンテキスト情報\n   * @param chapterNumber 章番号\n   * @returns 文学的インスピレーション\n   */\n  generateLiteraryInspirations(\n    context: GenerationContext,\n    chapterNumber: number\n  ): Promise<LiteraryInspiration>;\n\n  /**\n   * すべてのターニングポイントを取得\n   * @returns ターニングポイントの配列\n   */\n  getTurningPoints(): TurningPoint[];\n\n  /**\n   * 特定の章のターニングポイントを取得\n   * @param chapterNumber 章番号\n   * @returns ターニングポイント（存在しない場合はnull）\n   */\n  getTurningPointForChapter(chapterNumber: number): TurningPoint | null;\n\n  /**\n   * ジャンルを設定\n   * @param genre ジャンル\n   */\n  setGenre(genre: string): void;\n\n  /**\n   * 現在のジャンルを取得\n   * @returns ジャンル\n   */\n  getGenre(): string;\n\n  /**\n   * 現在のテンションレベルを取得\n   * @returns テンションレベル（0-10）\n   */\n  getCurrentTensionLevel(): number;\n\n  /**\n   * 章の要約を取得\n   * @param chapterNumber 章番号\n   * @returns 要約テキスト（存在しない場合はnull）\n   */\n  getChapterSummary(chapterNumber: number): string | null;",
                  "properties": {
                    "lastChapters": {
                      "name": "lastChapters",
                      "type": "number): Promise<SceneStructureAnalysis>",
                      "optional": true
                    },
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number): string | null",
                      "optional": false
                    },
                    "context": {
                      "name": "context",
                      "type": "GenerationContext",
                      "optional": false
                    },
                    "genre": {
                      "name": "genre",
                      "type": "string): void",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 60
                },
                "system": "analysis",
                "module": "analysis/services/narrative"
              }
            ]
          },
          {
            "typeName": "INarrativeAnalysisServiceFactory",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\services\\narrative\\interfaces.ts",
                "definition": {
                  "name": "INarrativeAnalysisServiceFactory",
                  "body": "/**\n   * 物語分析サービスのインスタンスを作成\n   * @param options 設定オプション\n   * @returns 物語分析サービスのインスタンス\n   */\n  createNarrativeAnalysisService(options?: NarrativeAnalysisOptions): INarrativeAnalysisService;",
                  "properties": {
                    "options": {
                      "name": "options",
                      "type": "NarrativeAnalysisOptions): INarrativeAnalysisService",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 130
                },
                "system": "analysis",
                "module": "analysis/services/narrative"
              }
            ]
          },
          {
            "typeName": "Backstory",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "Backstory",
                  "body": "/** 背景の概要 */\r\n    summary: string;\r\n\r\n    /** 重要な過去の出来事 */\r\n    significantEvents: string[];\r\n\r\n    /** 過去のトラウマや影響を受けた出来事 */\r\n    trauma?: string[];\r\n\r\n    /** 生い立ちに関する情報 */\r\n    origin?: string;\r\n\r\n    /** 詳細な歴史 (昇格時に生成) */\r\n    detailedHistory?: string;\r\n\r\n    /** 動機 (昇格時に生成) */\r\n    motivations?: string;\r\n\r\n    /** 秘密 (昇格時に生成) */\r\n    secrets?: string;",
                  "properties": {
                    "summary": {
                      "name": "summary",
                      "type": "string",
                      "optional": false
                    },
                    "significantEvents": {
                      "name": "significantEvents",
                      "type": "string[]",
                      "optional": false
                    },
                    "trauma": {
                      "name": "trauma",
                      "type": "string[]",
                      "optional": true
                    },
                    "origin": {
                      "name": "origin",
                      "type": "string",
                      "optional": true
                    },
                    "detailedHistory": {
                      "name": "detailedHistory",
                      "type": "string",
                      "optional": true
                    },
                    "motivations": {
                      "name": "motivations",
                      "type": "string",
                      "optional": true
                    },
                    "secrets": {
                      "name": "secrets",
                      "type": "string",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 70
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "StoryContext",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "StoryContext",
                  "body": "currentChapter: number;\r\n    totalChapters: number;\r\n    plotPoints: any[];\r\n    storyPacing?: string;\r\n    currentArc?: {\r\n        name: string;\r\n        theme: string;\r\n        approximateChapters: [number, number];",
                  "properties": {
                    "currentChapter": {
                      "name": "currentChapter",
                      "type": "number",
                      "optional": false
                    },
                    "totalChapters": {
                      "name": "totalChapters",
                      "type": "number",
                      "optional": false
                    },
                    "plotPoints": {
                      "name": "plotPoints",
                      "type": "any[]",
                      "optional": false
                    },
                    "storyPacing": {
                      "name": "storyPacing",
                      "type": "string",
                      "optional": true
                    },
                    "currentArc": {
                      "name": "currentArc",
                      "type": "{",
                      "optional": true
                    },
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "theme": {
                      "name": "theme",
                      "type": "string",
                      "optional": false
                    },
                    "approximateChapters": {
                      "name": "approximateChapters",
                      "type": "[number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 775
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "PlotContext",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "PlotContext",
                  "body": "/** 最近のチャプター要約 */\r\n    recentSummaries: string;\r\n    /** 重要イベント */\r\n    keyEvents: string[];\r\n    /** 現在のアーク情報 */\r\n    currentArc?: string;\r\n    /** テーマ情報 */\r\n    themes?: string[];",
                  "properties": {
                    "recentSummaries": {
                      "name": "recentSummaries",
                      "type": "string",
                      "optional": false
                    },
                    "keyEvents": {
                      "name": "keyEvents",
                      "type": "string[]",
                      "optional": false
                    },
                    "currentArc": {
                      "name": "currentArc",
                      "type": "string",
                      "optional": true
                    },
                    "themes": {
                      "name": "themes",
                      "type": "string[]",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 903
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "NarrativeState",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "NarrativeState",
                  "body": "theme?: string;\r\n    tone?: string;\r\n    setting?: string;\r\n    arc?: string;\r\n    pacing?: string;",
                  "properties": {
                    "theme": {
                      "name": "theme",
                      "type": "string",
                      "optional": true
                    },
                    "tone": {
                      "name": "tone",
                      "type": "string",
                      "optional": true
                    },
                    "setting": {
                      "name": "setting",
                      "type": "string",
                      "optional": true
                    },
                    "arc": {
                      "name": "arc",
                      "type": "string",
                      "optional": true
                    },
                    "pacing": {
                      "name": "pacing",
                      "type": "string",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 955
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "NarrativeContext",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "NarrativeContext",
                  "body": "/** 物語のペース */\r\n    pacing: string;\r\n    /** 現在のアーク名 */\r\n    arc: string;\r\n    /** 現在のテーマ */\r\n    theme: string;\r\n    /** その他の物語状態情報 */\r\n    [key: string]: any;",
                  "properties": {
                    "pacing": {
                      "name": "pacing",
                      "type": "string",
                      "optional": false
                    },
                    "arc": {
                      "name": "arc",
                      "type": "string",
                      "optional": false
                    },
                    "theme": {
                      "name": "theme",
                      "type": "string",
                      "optional": false
                    },
                    "key": {
                      "name": "key",
                      "type": "string]: any",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 967
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "NarrativeProgressionData",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "NarrativeProgressionData",
                  "body": "storyState: StoryStateSnapshot[];\n    chapterProgression: Map<number, ChapterProgressionRecord>;\n    arcProgression: Map<number, ArcProgressionRecord>;\n    tensionHistory: Map<number, TensionHistoryRecord>;\n    turningPointsHistory: TurningPointRecord[];",
                  "properties": {
                    "storyState": {
                      "name": "storyState",
                      "type": "StoryStateSnapshot[]",
                      "optional": false
                    },
                    "chapterProgression": {
                      "name": "chapterProgression",
                      "type": "Map<number",
                      "optional": false
                    },
                    "arcProgression": {
                      "name": "arcProgression",
                      "type": "Map<number",
                      "optional": false
                    },
                    "tensionHistory": {
                      "name": "tensionHistory",
                      "type": "Map<number",
                      "optional": false
                    },
                    "turningPointsHistory": {
                      "name": "turningPointsHistory",
                      "type": "TurningPointRecord[]",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 237
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "StoryStateSnapshot",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "StoryStateSnapshot",
                  "body": "chapterNumber: number;\n    state: string;\n    timestamp: string;\n    metadata: any;",
                  "properties": {
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": false
                    },
                    "state": {
                      "name": "state",
                      "type": "string",
                      "optional": false
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    },
                    "metadata": {
                      "name": "metadata",
                      "type": "any",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 514
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "TensionHistoryRecord",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "TensionHistoryRecord",
                  "body": "chapterNumber: number;\n    tensionLevel: number;\n    factors: string[];\n    timestamp: string;",
                  "properties": {
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": false
                    },
                    "tensionLevel": {
                      "name": "tensionLevel",
                      "type": "number",
                      "optional": false
                    },
                    "factors": {
                      "name": "factors",
                      "type": "string[]",
                      "optional": false
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 544
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "DiagnosticHistoryRecord",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "DiagnosticHistoryRecord",
                  "body": "diagnosticType: string;\n    results: any;\n    issues: string[];\n    timestamp: string;",
                  "properties": {
                    "diagnosticType": {
                      "name": "diagnosticType",
                      "type": "string",
                      "optional": false
                    },
                    "results": {
                      "name": "results",
                      "type": "any",
                      "optional": false
                    },
                    "issues": {
                      "name": "issues",
                      "type": "string[]",
                      "optional": false
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 726
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "BackstoryEvent",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\character-database-types.ts",
                "definition": {
                  "name": "BackstoryEvent",
                  "body": "eventId: string;\r\n  title: string;\r\n  description: string;\r\n  ageAtEvent?: number;\r\n  impact: number; // 0-10\r\n  eventType: 'trauma' | 'achievement' | 'relationship' | 'loss' | 'discovery' | 'other';\r\n  relatedCharacters: string[];",
                  "properties": {
                    "eventId": {
                      "name": "eventId",
                      "type": "string",
                      "optional": false
                    },
                    "title": {
                      "name": "title",
                      "type": "string",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    },
                    "ageAtEvent": {
                      "name": "ageAtEvent",
                      "type": "number",
                      "optional": true
                    },
                    "impact": {
                      "name": "impact",
                      "type": "number",
                      "optional": false
                    },
                    "eventType": {
                      "name": "eventType",
                      "type": "'trauma' | 'achievement' | 'relationship' | 'loss' | 'discovery' | 'other'",
                      "optional": false
                    },
                    "relatedCharacters": {
                      "name": "relatedCharacters",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 150
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "RelationshipHistoryEntry",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\character-database-types.ts",
                "definition": {
                  "name": "RelationshipHistoryEntry",
                  "body": "entryId: string;\r\n  chapterNumber: number;\r\n  event: string;\r\n  impact: number;\r\n  statusChange: Partial<RelationshipStatus>;\r\n  timestamp: string;",
                  "properties": {
                    "entryId": {
                      "name": "entryId",
                      "type": "string",
                      "optional": false
                    },
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": false
                    },
                    "event": {
                      "name": "event",
                      "type": "string",
                      "optional": false
                    },
                    "impact": {
                      "name": "impact",
                      "type": "number",
                      "optional": false
                    },
                    "statusChange": {
                      "name": "statusChange",
                      "type": "Partial<RelationshipStatus>",
                      "optional": false
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 219
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "NarrativeStateInfo",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "NarrativeStateInfo",
                  "body": "state: NarrativeState;\r\n    tensionLevel: number;\r\n    stagnationDetected: boolean;\r\n    suggestedNextState?: NarrativeState;\r\n    duration: number;\r\n    location: string;\r\n    timeOfDay: string;\r\n    weather: string;\r\n    presentCharacters: string[];\r\n    genre: string;\r\n    \r\n    // 内部状態\r\n    currentArcNumber: number;\r\n    currentTheme: string;\r\n    arcStartChapter: number;\r\n    arcEndChapter: number;\r\n    arcCompleted: boolean;\r\n    turningPoints: TurningPoint[];\r\n    \r\n    // 指標情報\r\n    metrics?: NarrativeMetrics;\r\n    totalChapters?: number;\r\n    \r\n    // 進行情報\r\n    progressionInstruction?: string;",
                  "properties": {
                    "state": {
                      "name": "state",
                      "type": "NarrativeState",
                      "optional": false
                    },
                    "tensionLevel": {
                      "name": "tensionLevel",
                      "type": "number",
                      "optional": false
                    },
                    "stagnationDetected": {
                      "name": "stagnationDetected",
                      "type": "boolean",
                      "optional": false
                    },
                    "suggestedNextState": {
                      "name": "suggestedNextState",
                      "type": "NarrativeState",
                      "optional": true
                    },
                    "duration": {
                      "name": "duration",
                      "type": "number",
                      "optional": false
                    },
                    "location": {
                      "name": "location",
                      "type": "string",
                      "optional": false
                    },
                    "timeOfDay": {
                      "name": "timeOfDay",
                      "type": "string",
                      "optional": false
                    },
                    "weather": {
                      "name": "weather",
                      "type": "string",
                      "optional": false
                    },
                    "presentCharacters": {
                      "name": "presentCharacters",
                      "type": "string[]",
                      "optional": false
                    },
                    "genre": {
                      "name": "genre",
                      "type": "string",
                      "optional": false
                    },
                    "currentArcNumber": {
                      "name": "currentArcNumber",
                      "type": "number",
                      "optional": false
                    },
                    "currentTheme": {
                      "name": "currentTheme",
                      "type": "string",
                      "optional": false
                    },
                    "arcStartChapter": {
                      "name": "arcStartChapter",
                      "type": "number",
                      "optional": false
                    },
                    "arcEndChapter": {
                      "name": "arcEndChapter",
                      "type": "number",
                      "optional": false
                    },
                    "arcCompleted": {
                      "name": "arcCompleted",
                      "type": "boolean",
                      "optional": false
                    },
                    "turningPoints": {
                      "name": "turningPoints",
                      "type": "TurningPoint[]",
                      "optional": false
                    },
                    "metrics": {
                      "name": "metrics",
                      "type": "NarrativeMetrics",
                      "optional": true
                    },
                    "totalChapters": {
                      "name": "totalChapters",
                      "type": "number",
                      "optional": true
                    },
                    "progressionInstruction": {
                      "name": "progressionInstruction",
                      "type": "string",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 129
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "NarrativeMetrics",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "NarrativeMetrics",
                  "body": "pacing: number;\r\n    complexity: number;\r\n    novelty: number;\r\n    coherence: number;\r\n    characterFocus: Record<string, number>;\r\n    emotionalTone: string;",
                  "properties": {
                    "pacing": {
                      "name": "pacing",
                      "type": "number",
                      "optional": false
                    },
                    "complexity": {
                      "name": "complexity",
                      "type": "number",
                      "optional": false
                    },
                    "novelty": {
                      "name": "novelty",
                      "type": "number",
                      "optional": false
                    },
                    "coherence": {
                      "name": "coherence",
                      "type": "number",
                      "optional": false
                    },
                    "characterFocus": {
                      "name": "characterFocus",
                      "type": "Record<string",
                      "optional": false
                    },
                    "emotionalTone": {
                      "name": "emotionalTone",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 477
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "BusinessStoryEvent",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "BusinessStoryEvent",
                  "body": "type: BusinessEventType;\r\n    significance: number;\r\n    details?: any;",
                  "properties": {
                    "type": {
                      "name": "type",
                      "type": "BusinessEventType",
                      "optional": false
                    },
                    "significance": {
                      "name": "significance",
                      "type": "number",
                      "optional": false
                    },
                    "details": {
                      "name": "details",
                      "type": "any",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 562
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "NarrativeState",
            "system": "memory",
            "definitions": [
              {
                "type": "enum",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "NarrativeState",
                  "body": "// 共通状態\r\n    INTRODUCTION = 'INTRODUCTION',\r\n    DAILY_LIFE = 'DAILY_LIFE',\r\n    JOURNEY = 'JOURNEY',\r\n    INVESTIGATION = 'INVESTIGATION',\r\n    PRE_BATTLE = 'PRE_BATTLE',\r\n    BATTLE = 'BATTLE',\r\n    POST_BATTLE = 'POST_BATTLE',\r\n    TRAINING = 'TRAINING',\r\n    REVELATION = 'REVELATION',\r\n    DILEMMA = 'DILEMMA',\r\n    RESOLUTION = 'RESOLUTION',\r\n    CLOSURE = 'CLOSURE',\r\n\r\n    // ビジネスジャンル特有の状態\r\n    BUSINESS_MEETING = 'BUSINESS_MEETING',\r\n    PRODUCT_DEVELOPMENT = 'PRODUCT_DEVELOPMENT',\r\n    PITCH_PRESENTATION = 'PITCH_PRESENTATION',\r\n    MARKET_RESEARCH = 'MARKET_RESEARCH',\r\n    TEAM_BUILDING = 'TEAM_BUILDING',\r\n    FUNDING_ROUND = 'FUNDING_ROUND',\r\n    BUSINESS_PIVOT = 'BUSINESS_PIVOT',\r\n    CUSTOMER_DISCOVERY = 'CUSTOMER_DISCOVERY',\r\n    PRODUCT_LAUNCH = 'PRODUCT_LAUNCH',\r\n    \r\n    // 追加のビジネス特化状態\r\n    MARKET_COMPETITION = 'MARKET_COMPETITION',\r\n    STRATEGIC_PREPARATION = 'STRATEGIC_PREPARATION',\r\n    PERFORMANCE_REVIEW = 'PERFORMANCE_REVIEW',\r\n    BUSINESS_DEVELOPMENT = 'BUSINESS_DEVELOPMENT',\r\n    SKILL_DEVELOPMENT = 'SKILL_DEVELOPMENT',\r\n    FINANCIAL_CHALLENGE = 'FINANCIAL_CHALLENGE',\r\n    EXPANSION_PHASE = 'EXPANSION_PHASE',\r\n    ACQUISITION_NEGOTIATION = 'ACQUISITION_NEGOTIATION',\r\n    CULTURE_BUILDING = 'CULTURE_BUILDING',\r\n    CRISIS_MANAGEMENT = 'CRISIS_MANAGEMENT',\r\n    MARKET_ENTRY = 'MARKET_ENTRY',\r\n    REGULATORY_COMPLIANCE = 'REGULATORY_COMPLIANCE',\r\n    PARTNERSHIP_DEVELOPMENT = 'PARTNERSHIP_DEVELOPMENT',\r\n    MARKET_SCALING = 'MARKET_SCALING',",
                  "values": [
                    {
                      "name": "// 共通状態\r\n    INTRODUCTION",
                      "value": "'INTRODUCTION'"
                    },
                    {
                      "name": "DAILY_LIFE",
                      "value": "'DAILY_LIFE'"
                    },
                    {
                      "name": "JOURNEY",
                      "value": "'JOURNEY'"
                    },
                    {
                      "name": "INVESTIGATION",
                      "value": "'INVESTIGATION'"
                    },
                    {
                      "name": "PRE_BATTLE",
                      "value": "'PRE_BATTLE'"
                    },
                    {
                      "name": "BATTLE",
                      "value": "'BATTLE'"
                    },
                    {
                      "name": "POST_BATTLE",
                      "value": "'POST_BATTLE'"
                    },
                    {
                      "name": "TRAINING",
                      "value": "'TRAINING'"
                    },
                    {
                      "name": "REVELATION",
                      "value": "'REVELATION'"
                    },
                    {
                      "name": "DILEMMA",
                      "value": "'DILEMMA'"
                    },
                    {
                      "name": "RESOLUTION",
                      "value": "'RESOLUTION'"
                    },
                    {
                      "name": "CLOSURE",
                      "value": "'CLOSURE'"
                    },
                    {
                      "name": "// ビジネスジャンル特有の状態\r\n    BUSINESS_MEETING",
                      "value": "'BUSINESS_MEETING'"
                    },
                    {
                      "name": "PRODUCT_DEVELOPMENT",
                      "value": "'PRODUCT_DEVELOPMENT'"
                    },
                    {
                      "name": "PITCH_PRESENTATION",
                      "value": "'PITCH_PRESENTATION'"
                    },
                    {
                      "name": "MARKET_RESEARCH",
                      "value": "'MARKET_RESEARCH'"
                    },
                    {
                      "name": "TEAM_BUILDING",
                      "value": "'TEAM_BUILDING'"
                    },
                    {
                      "name": "FUNDING_ROUND",
                      "value": "'FUNDING_ROUND'"
                    },
                    {
                      "name": "BUSINESS_PIVOT",
                      "value": "'BUSINESS_PIVOT'"
                    },
                    {
                      "name": "CUSTOMER_DISCOVERY",
                      "value": "'CUSTOMER_DISCOVERY'"
                    },
                    {
                      "name": "PRODUCT_LAUNCH",
                      "value": "'PRODUCT_LAUNCH'"
                    },
                    {
                      "name": "// 追加のビジネス特化状態\r\n    MARKET_COMPETITION",
                      "value": "'MARKET_COMPETITION'"
                    },
                    {
                      "name": "STRATEGIC_PREPARATION",
                      "value": "'STRATEGIC_PREPARATION'"
                    },
                    {
                      "name": "PERFORMANCE_REVIEW",
                      "value": "'PERFORMANCE_REVIEW'"
                    },
                    {
                      "name": "BUSINESS_DEVELOPMENT",
                      "value": "'BUSINESS_DEVELOPMENT'"
                    },
                    {
                      "name": "SKILL_DEVELOPMENT",
                      "value": "'SKILL_DEVELOPMENT'"
                    },
                    {
                      "name": "FINANCIAL_CHALLENGE",
                      "value": "'FINANCIAL_CHALLENGE'"
                    },
                    {
                      "name": "EXPANSION_PHASE",
                      "value": "'EXPANSION_PHASE'"
                    },
                    {
                      "name": "ACQUISITION_NEGOTIATION",
                      "value": "'ACQUISITION_NEGOTIATION'"
                    },
                    {
                      "name": "CULTURE_BUILDING",
                      "value": "'CULTURE_BUILDING'"
                    },
                    {
                      "name": "CRISIS_MANAGEMENT",
                      "value": "'CRISIS_MANAGEMENT'"
                    },
                    {
                      "name": "MARKET_ENTRY",
                      "value": "'MARKET_ENTRY'"
                    },
                    {
                      "name": "REGULATORY_COMPLIANCE",
                      "value": "'REGULATORY_COMPLIANCE'"
                    },
                    {
                      "name": "PARTNERSHIP_DEVELOPMENT",
                      "value": "'PARTNERSHIP_DEVELOPMENT'"
                    },
                    {
                      "name": "MARKET_SCALING",
                      "value": "'MARKET_SCALING'"
                    }
                  ],
                  "lineNumber": 18
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "StoryGenerationContext",
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\bridge-types.ts",
                "definition": {
                  "name": "StoryGenerationContext",
                  "body": "chapterNumber: number;            // 章番号\r\n  plotElements: {                   // プロット要素\r\n    concrete: any;                  // 具体的プロット\r\n    abstract: any;                  // 抽象的プロット\r\n    midTerm?: any;                  // 中期プロット",
                  "properties": {
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": false
                    },
                    "plotElements": {
                      "name": "plotElements",
                      "type": "{                   // プロット要素",
                      "optional": false
                    },
                    "concrete": {
                      "name": "concrete",
                      "type": "any",
                      "optional": false
                    },
                    "abstract": {
                      "name": "abstract",
                      "type": "any",
                      "optional": false
                    },
                    "midTerm": {
                      "name": "midTerm",
                      "type": "any",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 63
                },
                "system": "plot",
                "module": "plot"
              }
            ]
          },
          {
            "typeName": "PlotProgressInfo",
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\bridge-types.ts",
                "definition": {
                  "name": "PlotProgressInfo",
                  "body": "completedElements: string[];      // 完了したプロット要素\r\n  pendingElements: string[];        // 未完了のプロット要素\r\n  progressPercentage: number;       // 進行度割合 (0-1)\r\n  currentFocus: string;             // 現在の焦点\r\n  nextMilestone?: string;           // 次のマイルストーン",
                  "properties": {
                    "completedElements": {
                      "name": "completedElements",
                      "type": "string[]",
                      "optional": false
                    },
                    "pendingElements": {
                      "name": "pendingElements",
                      "type": "string[]",
                      "optional": false
                    },
                    "progressPercentage": {
                      "name": "progressPercentage",
                      "type": "number",
                      "optional": false
                    },
                    "currentFocus": {
                      "name": "currentFocus",
                      "type": "string",
                      "optional": false
                    },
                    "nextMilestone": {
                      "name": "nextMilestone",
                      "type": "string",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 122
                },
                "system": "plot",
                "module": "plot"
              }
            ]
          },
          {
            "typeName": "SectionPlot",
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\section\\types.ts",
                "definition": {
                  "name": "SectionPlot",
                  "body": "/** セクションの一意識別子 */\r\n  id: string;\r\n  \r\n  /** 章の範囲 */\r\n  chapterRange: {\r\n    start: number;\r\n    end: number;",
                  "properties": {
                    "id": {
                      "name": "id",
                      "type": "string",
                      "optional": false
                    },
                    "chapterRange": {
                      "name": "chapterRange",
                      "type": "{",
                      "optional": false
                    },
                    "start": {
                      "name": "start",
                      "type": "number",
                      "optional": false
                    },
                    "end": {
                      "name": "end",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 14
                },
                "system": "plot",
                "module": "plot/section"
              }
            ]
          },
          {
            "typeName": "SectionPlotParams",
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\section\\types.ts",
                "definition": {
                  "name": "SectionPlotParams",
                  "body": "/** タイトル */\r\n  title: string;\r\n  \r\n  /** 章の範囲 */\r\n  chapterRange: {\r\n    start: number;\r\n    end: number;",
                  "properties": {
                    "title": {
                      "name": "title",
                      "type": "string",
                      "optional": false
                    },
                    "chapterRange": {
                      "name": "chapterRange",
                      "type": "{",
                      "optional": false
                    },
                    "start": {
                      "name": "start",
                      "type": "number",
                      "optional": false
                    },
                    "end": {
                      "name": "end",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 47
                },
                "system": "plot",
                "module": "plot/section"
              }
            ]
          },
          {
            "typeName": "NarrativeStructureDesign",
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\section\\types.ts",
                "definition": {
                  "name": "NarrativeStructureDesign",
                  "body": "/** 重要シーン */\r\n  keyScenes: Array<{\r\n    /** 説明 */\r\n    description: string;\r\n    \r\n    /** 目的 */\r\n    purpose: string;\r\n    \r\n    /** 相対位置 */\r\n    relativePosition: number;\r\n    \r\n    /** 学習との関連 */\r\n    learningConnection: string;",
                  "properties": {
                    "keyScenes": {
                      "name": "keyScenes",
                      "type": "Array<{",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    },
                    "purpose": {
                      "name": "purpose",
                      "type": "string",
                      "optional": false
                    },
                    "relativePosition": {
                      "name": "relativePosition",
                      "type": "number",
                      "optional": false
                    },
                    "learningConnection": {
                      "name": "learningConnection",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 278
                },
                "system": "plot",
                "module": "plot/section"
              }
            ]
          },
          {
            "typeName": "ConcretePlotPoint",
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\types.ts",
                "definition": {
                  "name": "ConcretePlotPoint",
                  "body": "chapterRange: [number, number];    // 適用チャプター範囲\r\n    title: string;                     // プロットタイトル\r\n    summary: string;                   // 概要\r\n\r\n    // 追加するフィールド\r\n    phase?: string;                    // 物語フェーズ\r\n    storyArc?: string;                 // このプロットが属するストーリーアーク\r\n    storyGoal?: string;                // この範囲での物語目標\r\n    mustHaveOutcome?: string;          // 必ず達成すべき結果\r\n\r\n    keyEvents: string[];               // 重要イベント\r\n    characterFocus: string[];          // 注目キャラクター\r\n    requiredElements: string[];        // 必須要素\r\n    foreshadowing?: string[];          // 伏線（オプション）",
                  "properties": {
                    "chapterRange": {
                      "name": "chapterRange",
                      "type": "[number",
                      "optional": false
                    },
                    "title": {
                      "name": "title",
                      "type": "string",
                      "optional": false
                    },
                    "summary": {
                      "name": "summary",
                      "type": "string",
                      "optional": false
                    },
                    "phase": {
                      "name": "phase",
                      "type": "string",
                      "optional": true
                    },
                    "storyArc": {
                      "name": "storyArc",
                      "type": "string",
                      "optional": true
                    },
                    "storyGoal": {
                      "name": "storyGoal",
                      "type": "string",
                      "optional": true
                    },
                    "mustHaveOutcome": {
                      "name": "mustHaveOutcome",
                      "type": "string",
                      "optional": true
                    },
                    "keyEvents": {
                      "name": "keyEvents",
                      "type": "string[]",
                      "optional": false
                    },
                    "characterFocus": {
                      "name": "characterFocus",
                      "type": "string[]",
                      "optional": false
                    },
                    "requiredElements": {
                      "name": "requiredElements",
                      "type": "string[]",
                      "optional": false
                    },
                    "foreshadowing": {
                      "name": "foreshadowing",
                      "type": "string[]",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 18
                },
                "system": "plot",
                "module": "plot"
              }
            ]
          },
          {
            "typeName": "AbstractPlotGuideline",
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\types.ts",
                "definition": {
                  "name": "AbstractPlotGuideline",
                  "body": "phase: string;                     // 物語のフェーズ\r\n    theme: string;                     // テーマ\r\n    emotionalTone: string;             // 感情的トーン\r\n\r\n    // 追加するフィールド\r\n    thematicMessage?: string;          // このフェーズで伝えたいメッセージ\r\n    phasePurpose?: string;             // このフェーズの目的\r\n\r\n    potentialDirections: string[];     // 可能性のある方向性\r\n    prohibitedElements: string[];      // 避けるべき要素\r\n    chapterRange?: [number, number];   // 適用チャプター範囲（オプション）\r\n    keyCharacters?: string[];          // 焦点を当てるキャラクター（オプション）",
                  "properties": {
                    "phase": {
                      "name": "phase",
                      "type": "string",
                      "optional": false
                    },
                    "theme": {
                      "name": "theme",
                      "type": "string",
                      "optional": false
                    },
                    "emotionalTone": {
                      "name": "emotionalTone",
                      "type": "string",
                      "optional": false
                    },
                    "thematicMessage": {
                      "name": "thematicMessage",
                      "type": "string",
                      "optional": true
                    },
                    "phasePurpose": {
                      "name": "phasePurpose",
                      "type": "string",
                      "optional": true
                    },
                    "potentialDirections": {
                      "name": "potentialDirections",
                      "type": "string[]",
                      "optional": false
                    },
                    "prohibitedElements": {
                      "name": "prohibitedElements",
                      "type": "string[]",
                      "optional": false
                    },
                    "chapterRange": {
                      "name": "chapterRange",
                      "type": "[number",
                      "optional": true
                    },
                    "keyCharacters": {
                      "name": "keyCharacters",
                      "type": "string[]",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 38
                },
                "system": "plot",
                "module": "plot"
              }
            ]
          },
          {
            "typeName": "MediumPlot",
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\types.ts",
                "definition": {
                  "name": "MediumPlot",
                  "body": "title: string;\r\n    description: string;\r\n    version: number;\r\n    sections: any[];\r\n    learning_elements: {\r\n      name: string;\r\n      description: string;\r\n      section: number;",
                  "properties": {
                    "title": {
                      "name": "title",
                      "type": "string",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    },
                    "version": {
                      "name": "version",
                      "type": "number",
                      "optional": false
                    },
                    "sections": {
                      "name": "sections",
                      "type": "any[]",
                      "optional": false
                    },
                    "learning_elements": {
                      "name": "learning_elements",
                      "type": "{",
                      "optional": false
                    },
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "section": {
                      "name": "section",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 56
                },
                "system": "plot",
                "module": "plot"
              }
            ]
          },
          {
            "typeName": "PlotStrategy",
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\types.ts",
                "definition": {
                  "name": "PlotStrategy",
                  "body": "globalStrategy: {\r\n        preferredMode: \"concrete\" | \"abstract\" | \"mixed\";\r\n        abstractRatio: number;         // 0-1の間の値\r\n        plotComplexity: \"low\" | \"medium\" | \"high\";",
                  "properties": {
                    "globalStrategy": {
                      "name": "globalStrategy",
                      "type": "{",
                      "optional": false
                    },
                    "preferredMode": {
                      "name": "preferredMode",
                      "type": "\"concrete\" | \"abstract\" | \"mixed\"",
                      "optional": false
                    },
                    "abstractRatio": {
                      "name": "abstractRatio",
                      "type": "number",
                      "optional": false
                    },
                    "plotComplexity": {
                      "name": "plotComplexity",
                      "type": "\"low\" | \"medium\" | \"high\"",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 92
                },
                "system": "plot",
                "module": "plot"
              }
            ]
          },
          {
            "typeName": "PlotContext",
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\types.ts",
                "definition": {
                  "name": "PlotContext",
                  "body": "mode: PlotMode;                    // 現在のプロットモード\r\n    modeInstructions: string;          // モードに応じた指示\r\n    currentArc: {                      // 現在のアーク情報\r\n        name: string;\r\n        theme: string;\r\n        approximateChapters: [number, number];",
                  "properties": {
                    "mode": {
                      "name": "mode",
                      "type": "PlotMode",
                      "optional": false
                    },
                    "modeInstructions": {
                      "name": "modeInstructions",
                      "type": "string",
                      "optional": false
                    },
                    "currentArc": {
                      "name": "currentArc",
                      "type": "{                      // 現在のアーク情報",
                      "optional": false
                    },
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "theme": {
                      "name": "theme",
                      "type": "string",
                      "optional": false
                    },
                    "approximateChapters": {
                      "name": "approximateChapters",
                      "type": "[number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 113
                },
                "system": "plot",
                "module": "plot"
              }
            ]
          },
          {
            "typeName": "PlotMode",
            "system": "plot",
            "definitions": [
              {
                "type": "enum",
                "file": "lib\\plot\\types.ts",
                "definition": {
                  "name": "PlotMode",
                  "body": "CONCRETE = \"CONCRETE\",  // 具体的プロット\r\n    MIDTERM = \"MIDTERM\",\r\n    ABSTRACT = \"ABSTRACT\", // 抽象的プロット\r\n    HYBRID = \"HYBRID\",     // ハイブリッド\r\n    TRANSITION_TO_ABSTRACT = \"TRANSITION_TO_ABSTRACT\", // 具体→抽象への移行\r\n    TRANSITION_TO_CONCRETE = \"TRANSITION_TO_CONCRETE\"  // 抽象→具体への移行",
                  "values": [
                    {
                      "name": "CONCRETE",
                      "value": "\"CONCRETE\""
                    },
                    {
                      "name": "// 具体的プロット\r\n    MIDTERM",
                      "value": "\"MIDTERM\""
                    },
                    {
                      "name": "ABSTRACT",
                      "value": "\"ABSTRACT\""
                    },
                    {
                      "name": "// 抽象的プロット\r\n    HYBRID",
                      "value": "\"HYBRID\""
                    },
                    {
                      "name": "// ハイブリッド\r\n    TRANSITION_TO_ABSTRACT",
                      "value": "\"TRANSITION_TO_ABSTRACT\""
                    },
                    {
                      "name": "// 具体→抽象への移行\r\n    TRANSITION_TO_CONCRETE",
                      "value": "\"TRANSITION_TO_CONCRETE\"  // 抽象→具体への移行"
                    }
                  ],
                  "lineNumber": 6
                },
                "system": "plot",
                "module": "plot"
              }
            ]
          }
        ],
        "analysisRelated": [
          {
            "typeName": "AnalysisCoordinatorOptions",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\coordinators\\interfaces.ts",
                "definition": {
                  "name": "AnalysisCoordinatorOptions",
                  "body": "/** 統合最適化を有効にするか */\r\n  optimizeForIntegration?: boolean;",
                  "properties": {
                    "optimizeForIntegration": {
                      "name": "optimizeForIntegration",
                      "type": "boolean",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": true,
                  "lineNumber": 71
                },
                "system": "analysis",
                "module": "analysis/coordinators"
              }
            ]
          },
          {
            "typeName": "IntegratedAnalysisResult",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\coordinators\\interfaces.ts",
                "definition": {
                  "name": "IntegratedAnalysisResult",
                  "body": "// 基本章分析\r\n  chapterAnalysis: ChapterAnalysis;\r\n\r\n  // テーマ分析\r\n  themeAnalysis: ThemeResonanceAnalysis;\r\n  foreshadowingProcessing: {\r\n    resolvedForeshadowing: any[];\r\n    generatedCount: number;\r\n    totalActive: number;",
                  "properties": {
                    "chapterAnalysis": {
                      "name": "chapterAnalysis",
                      "type": "ChapterAnalysis",
                      "optional": false
                    },
                    "themeAnalysis": {
                      "name": "themeAnalysis",
                      "type": "ThemeResonanceAnalysis",
                      "optional": false
                    },
                    "foreshadowingProcessing": {
                      "name": "foreshadowingProcessing",
                      "type": "{",
                      "optional": false
                    },
                    "resolvedForeshadowing": {
                      "name": "resolvedForeshadowing",
                      "type": "any[]",
                      "optional": false
                    },
                    "generatedCount": {
                      "name": "generatedCount",
                      "type": "number",
                      "optional": false
                    },
                    "totalActive": {
                      "name": "totalActive",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 80
                },
                "system": "analysis",
                "module": "analysis/coordinators"
              }
            ]
          },
          {
            "typeName": "AnalysisMetadata",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\coordinators\\interfaces.ts",
                "definition": {
                  "name": "AnalysisMetadata",
                  "body": "/** 分析タイムスタンプ */\r\n  analysisTimestamp: string;",
                  "properties": {
                    "analysisTimestamp": {
                      "name": "analysisTimestamp",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": true,
                  "lineNumber": 121
                },
                "system": "analysis",
                "module": "analysis/coordinators"
              }
            ]
          },
          {
            "typeName": "SceneStructureAnalysis",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\coordinators\\interfaces.ts",
                "definition": {
                  "name": "SceneStructureAnalysis",
                  "body": "typeDistribution: {\r\n    [sceneType: string]: number;",
                  "properties": {
                    "typeDistribution": {
                      "name": "typeDistribution",
                      "type": "{",
                      "optional": false
                    },
                    "sceneType": {
                      "name": "sceneType",
                      "type": "string]: number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 130
                },
                "system": "analysis",
                "module": "analysis/coordinators"
              }
            ]
          },
          {
            "typeName": "IAnalysisCoordinator",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\coordinators\\interfaces.ts",
                "definition": {
                  "name": "IAnalysisCoordinator",
                  "body": "/**\r\n   * 包括的章分析を実行する\r\n   * \r\n   * @param content 章の内容\r\n   * @param chapterNumber 章番号\r\n   * @param context 生成コンテキスト\r\n   * @returns 統合分析結果\r\n   */\r\n  analyzeChapter(\r\n    content: string,\r\n    chapterNumber: number,\r\n    context: GenerationContext\r\n  ): Promise<IntegratedAnalysisResult>;",
                  "properties": {
                    "content": {
                      "name": "content",
                      "type": "string",
                      "optional": false
                    },
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": false
                    },
                    "context": {
                      "name": "context",
                      "type": "GenerationContext",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": true,
                  "lineNumber": 185
                },
                "system": "analysis",
                "module": "analysis/coordinators"
              }
            ]
          },
          {
            "typeName": "ThemeResonanceAnalysis",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\core\\types.ts",
                "definition": {
                  "name": "ThemeResonanceAnalysis",
                  "body": "/**\r\n     * 各テーマの分析情報\r\n     */\r\n    themes?: {\r\n      [themeName: string]: {\r\n        /**\r\n         * 明示的な言及（テキスト内の直接的な表現）\r\n         */\r\n        explicitMentions?: string[];\r\n        \r\n        /**\r\n         * 暗示的な表現（テキスト内の間接的な表現）\r\n         */\r\n        implicitExpressions?: string[];\r\n        \r\n        /**\r\n         * テーマの強度（0-1）\r\n         */\r\n        strength?: number;\r\n        \r\n        /**\r\n         * テーマの表現方法\r\n         */\r\n        expressionMethods?: string[];\r\n        \r\n        /**\r\n         * 関連するテーマ\r\n         */\r\n        relatedThemes?: string[];",
                  "properties": {
                    "themes": {
                      "name": "themes",
                      "type": "{",
                      "optional": true
                    },
                    "themeName": {
                      "name": "themeName",
                      "type": "string]: {",
                      "optional": false
                    },
                    "explicitMentions": {
                      "name": "explicitMentions",
                      "type": "string[]",
                      "optional": true
                    },
                    "implicitExpressions": {
                      "name": "implicitExpressions",
                      "type": "string[]",
                      "optional": true
                    },
                    "strength": {
                      "name": "strength",
                      "type": "number",
                      "optional": true
                    },
                    "expressionMethods": {
                      "name": "expressionMethods",
                      "type": "string[]",
                      "optional": true
                    },
                    "relatedThemes": {
                      "name": "relatedThemes",
                      "type": "string[]",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 63
                },
                "system": "analysis",
                "module": "analysis/core"
              }
            ]
          },
          {
            "typeName": "SymbolismAnalysis",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\core\\types.ts",
                "definition": {
                  "name": "SymbolismAnalysis",
                  "body": "symbols: Array<{\r\n    symbol: string;\r\n    occurrences?: string[];\r\n    meaning?: string;\r\n    thematicConnection?: string;",
                  "properties": {
                    "symbols": {
                      "name": "symbols",
                      "type": "Array<{",
                      "optional": false
                    },
                    "symbol": {
                      "name": "symbol",
                      "type": "string",
                      "optional": false
                    },
                    "occurrences": {
                      "name": "occurrences",
                      "type": "string[]",
                      "optional": true
                    },
                    "meaning": {
                      "name": "meaning",
                      "type": "string",
                      "optional": true
                    },
                    "thematicConnection": {
                      "name": "thematicConnection",
                      "type": "string",
                      "optional": true
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 423
                },
                "system": "analysis",
                "module": "analysis/core"
              }
            ]
          },
          {
            "typeName": "ThemeConsistencyAnalysis",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\core\\types.ts",
                "definition": {
                  "name": "ThemeConsistencyAnalysis",
                  "body": "consistencyScore: number;\r\n  strengthByChapter: number[];\r\n  developmentPattern: string;\r\n  weakPoints: Array<{\r\n    chapter: number;\r\n    issue: string;",
                  "properties": {
                    "consistencyScore": {
                      "name": "consistencyScore",
                      "type": "number",
                      "optional": false
                    },
                    "strengthByChapter": {
                      "name": "strengthByChapter",
                      "type": "number[]",
                      "optional": false
                    },
                    "developmentPattern": {
                      "name": "developmentPattern",
                      "type": "string",
                      "optional": false
                    },
                    "weakPoints": {
                      "name": "weakPoints",
                      "type": "Array<{",
                      "optional": false
                    },
                    "chapter": {
                      "name": "chapter",
                      "type": "number",
                      "optional": false
                    },
                    "issue": {
                      "name": "issue",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 475
                },
                "system": "analysis",
                "module": "analysis/core"
              }
            ]
          },
          {
            "typeName": "ConsistencyAnalysis",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
                "definition": {
                  "name": "ConsistencyAnalysis",
                  "body": "overallConsistency: number; // 全体的な一貫性スコア (0-1)\r\n    issues: Array<{            // 問題点\r\n        aspect: string;        // 問題のある側面\r\n        description: string;   // 問題の説明",
                  "properties": {
                    "overallConsistency": {
                      "name": "overallConsistency",
                      "type": "number",
                      "optional": false
                    },
                    "issues": {
                      "name": "issues",
                      "type": "Array<{            // 問題点",
                      "optional": false
                    },
                    "aspect": {
                      "name": "aspect",
                      "type": "string",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 35
                },
                "system": "analysis",
                "module": "analysis/enhancement/character"
              }
            ]
          },
          {
            "typeName": "IChapterAnalysisService",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\services\\chapter\\interfaces.ts",
                "definition": {
                  "name": "IChapterAnalysisService",
                  "body": "/**\r\n   * 章の内容を総合的に分析\r\n   * \r\n   * キャラクター登場、テーマ出現、伏線要素、品質メトリクスなどを\r\n   * 包括的に分析します。結果はキャッシュされます。\r\n   * \r\n   * @param {string",
                  "properties": {},
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 29
                },
                "system": "analysis",
                "module": "analysis/services/chapter"
              }
            ]
          },
          {
            "typeName": "ReaderExperienceAnalysis",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\services\\reader\\interfaces.ts",
                "definition": {
                  "name": "ReaderExperienceAnalysis",
                  "body": "/** 興味維持度 (1-10) */\r\n  interestRetention: number;\r\n  /** 感情移入度 (1-10) */\r\n  empathy: number;\r\n  /** 理解度 (1-10) */\r\n  clarity: number;\r\n  /** 意外性 (1-10) */\r\n  unexpectedness: number;\r\n  /** 続きへの期待度 (1-10) */\r\n  anticipation: number;\r\n  /** 総合スコア (1-10) */\r\n  overallScore: number;\r\n  /** 弱点 */\r\n  weakPoints: Array<{\r\n    point: string;\r\n    suggestion?: string;",
                  "properties": {
                    "interestRetention": {
                      "name": "interestRetention",
                      "type": "number",
                      "optional": false
                    },
                    "empathy": {
                      "name": "empathy",
                      "type": "number",
                      "optional": false
                    },
                    "clarity": {
                      "name": "clarity",
                      "type": "number",
                      "optional": false
                    },
                    "unexpectedness": {
                      "name": "unexpectedness",
                      "type": "number",
                      "optional": false
                    },
                    "anticipation": {
                      "name": "anticipation",
                      "type": "number",
                      "optional": false
                    },
                    "overallScore": {
                      "name": "overallScore",
                      "type": "number",
                      "optional": false
                    },
                    "weakPoints": {
                      "name": "weakPoints",
                      "type": "Array<{",
                      "optional": false
                    },
                    "point": {
                      "name": "point",
                      "type": "string",
                      "optional": false
                    },
                    "suggestion": {
                      "name": "suggestion",
                      "type": "string",
                      "optional": true
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 25
                },
                "system": "analysis",
                "module": "analysis/services/reader"
              }
            ]
          },
          {
            "typeName": "AnalyzeReaderExperienceRequest",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\services\\reader\\interfaces.ts",
                "definition": {
                  "name": "AnalyzeReaderExperienceRequest",
                  "body": "chapter: Chapter;\r\n  previousChapters?: Chapter[];",
                  "properties": {
                    "chapter": {
                      "name": "chapter",
                      "type": "Chapter",
                      "optional": false
                    },
                    "previousChapters": {
                      "name": "previousChapters",
                      "type": "Chapter[]",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 50
                },
                "system": "analysis",
                "module": "analysis/services/reader"
              }
            ]
          },
          {
            "typeName": "AnalyzeReaderExperienceResponse",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\services\\reader\\interfaces.ts",
                "definition": {
                  "name": "AnalyzeReaderExperienceResponse",
                  "body": "analysis: ReaderExperienceAnalysis;",
                  "properties": {
                    "analysis": {
                      "name": "analysis",
                      "type": "ReaderExperienceAnalysis",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 55
                },
                "system": "analysis",
                "module": "analysis/services/reader"
              }
            ]
          },
          {
            "typeName": "AnalyzeForReaderTypeRequest",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\services\\reader\\interfaces.ts",
                "definition": {
                  "name": "AnalyzeForReaderTypeRequest",
                  "body": "chapter: Chapter;\r\n  readerType: 'casual' | 'critical' | 'genre' | 'emotional';",
                  "properties": {
                    "chapter": {
                      "name": "chapter",
                      "type": "Chapter",
                      "optional": false
                    },
                    "readerType": {
                      "name": "readerType",
                      "type": "'casual' | 'critical' | 'genre' | 'emotional'",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 92
                },
                "system": "analysis",
                "module": "analysis/services/reader"
              }
            ]
          },
          {
            "typeName": "AnalyzeForReaderTypeResponse",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\services\\reader\\interfaces.ts",
                "definition": {
                  "name": "AnalyzeForReaderTypeResponse",
                  "body": "recommendations: string[];",
                  "properties": {
                    "recommendations": {
                      "name": "recommendations",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 97
                },
                "system": "analysis",
                "module": "analysis/services/reader"
              }
            ]
          },
          {
            "typeName": "SubjectPatternAnalysis",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\services\\style\\interfaces.ts",
                "definition": {
                  "name": "SubjectPatternAnalysis",
                  "body": "repeatedSubjects: RepeatedSubjectPattern[];\r\n  subjectDiversityScore: number;\r\n  suggestions: string[];",
                  "properties": {
                    "repeatedSubjects": {
                      "name": "repeatedSubjects",
                      "type": "RepeatedSubjectPattern[]",
                      "optional": false
                    },
                    "subjectDiversityScore": {
                      "name": "subjectDiversityScore",
                      "type": "number",
                      "optional": false
                    },
                    "suggestions": {
                      "name": "suggestions",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 19
                },
                "system": "analysis",
                "module": "analysis/services/style"
              }
            ]
          },
          {
            "typeName": "IStyleAnalysisService",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\services\\style\\interfaces.ts",
                "definition": {
                  "name": "IStyleAnalysisService",
                  "body": "/**\r\n   * 初期化\r\n   * サービスの初期化処理を行います\r\n   */\r\n  initialize(): Promise<void>;\r\n\r\n  /**\r\n   * 文体分析\r\n   * テキストの文体特性を分析します\r\n   * \r\n   * @param content テキスト内容\r\n   * @returns 文体分析結果\r\n   */\r\n  analyzeStyle(content: string): Promise<StyleAnalysis>;\r\n\r\n  /**\r\n   * 表現パターン分析\r\n   * テキストの表現パターンを分析します\r\n   * \r\n   * @param content テキスト内容\r\n   * @returns 表現パターン分析結果\r\n   */\r\n  analyzeExpressionPatterns(content: string): Promise<ExpressionPatterns>;\r\n\r\n  /**\r\n   * 主語パターン分析\r\n   * テキストの主語使用パターンを分析します\r\n   * \r\n   * @param content テキスト内容\r\n   * @returns 主語パターン分析結果\r\n   */\r\n  analyzeSubjectPatterns(content: string): Promise<SubjectPatternAnalysis>;\r\n\r\n  /**\r\n   * 表現分析\r\n   * テキスト内の特徴的な表現パターン、繰り返し使用されている表現などを\r\n   * 検出し分析します。\r\n   * \r\n   * @param content テキスト内容\r\n   * @returns 分析結果\r\n   */\r\n  analyzeExpressions(content: string): Promise<ExpressionUsageResult>;\r\n\r\n  /**\r\n   * スタイル改善提案の生成\r\n   * \r\n   * 章分析結果に基づいてスタイル改善の提案を生成します\r\n   * \r\n   * @param analysis 章分析結果\r\n   * @param chapterNumber 章番号\r\n   * @returns 改善提案の配列\r\n   */\r\n  generateStyleImprovementSuggestions?(analysis: any, chapterNumber: number): Promise<string[]>;",
                  "properties": {
                    "content": {
                      "name": "content",
                      "type": "string): Promise<ExpressionUsageResult>",
                      "optional": false
                    },
                    "analysis": {
                      "name": "analysis",
                      "type": "any",
                      "optional": false
                    },
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number): Promise<string[]>",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 39
                },
                "system": "analysis",
                "module": "analysis/services/style"
              }
            ]
          },
          {
            "typeName": "IThemeAnalysisService",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\services\\theme\\interfaces.ts",
                "definition": {
                  "name": "IThemeAnalysisService",
                  "body": "/**\r\n   * テーマ共鳴分析を実行\r\n   * テキスト内のテーマ表現を分析し、各テーマの強度や表現方法を評価します\r\n   * \r\n   * @param content 分析対象のテキスト\r\n   * @param themes テーマの配列\r\n   * @returns テーマ共鳴分析結果\r\n   */\r\n  analyzeThemeResonance(content: string, themes: string[]): Promise<ThemeResonanceAnalysis>;\r\n\r\n  /**\r\n   * 伏線処理を実行\r\n   * 章の内容から伏線を検出、追跡、生成します\r\n   * \r\n   * @param content 章コンテンツ\r\n   * @param chapterNumber 章番号\r\n   * @returns 処理結果\r\n   */\r\n  processForeshadowing(content: string, chapterNumber: number): Promise<{\r\n    resolvedForeshadowing: ForeshadowingElement[];\r\n    generatedCount: number;\r\n    totalActive: number;",
                  "properties": {
                    "content": {
                      "name": "content",
                      "type": "string",
                      "optional": false
                    },
                    "themes": {
                      "name": "themes",
                      "type": "string[]): Promise<ThemeResonanceAnalysis>",
                      "optional": false
                    },
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number): Promise<{",
                      "optional": false
                    },
                    "resolvedForeshadowing": {
                      "name": "resolvedForeshadowing",
                      "type": "ForeshadowingElement[]",
                      "optional": false
                    },
                    "generatedCount": {
                      "name": "generatedCount",
                      "type": "number",
                      "optional": false
                    },
                    "totalActive": {
                      "name": "totalActive",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 26
                },
                "system": "analysis",
                "module": "analysis/services/theme"
              }
            ]
          },
          {
            "typeName": "IThemeAnalysisServiceFactory",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\services\\theme\\interfaces.ts",
                "definition": {
                  "name": "IThemeAnalysisServiceFactory",
                  "body": "/**\r\n   * テーマ分析サービスのインスタンスを作成\r\n   * @returns テーマ分析サービスのインスタンス\r\n   */\r\n  createThemeAnalysisService(): IThemeAnalysisService;",
                  "properties": {},
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 146
                },
                "system": "analysis",
                "module": "analysis/services/theme"
              }
            ]
          },
          {
            "typeName": "ITimingAnalyzer",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\interfaces.ts",
                "definition": {
                  "name": "ITimingAnalyzer",
                  "body": "/**\r\n     * タイミング推奨取得\r\n     * @param character キャラクター\r\n     * @param storyContext ストーリー文脈\r\n     * @returns タイミング推奨\r\n     */\r\n    getTimingRecommendation(character: Character, storyContext: StoryContext): Promise<TimingRecommendation>;\r\n  \r\n    /**\r\n     * タイミング要因分析\r\n     * @param character キャラクター\r\n     * @param context 文脈\r\n     * @returns タイミング分析結果\r\n     */\r\n    analyzeTimingFactors(character: Character, context: StoryContext): Promise<any>;",
                  "properties": {
                    "character": {
                      "name": "character",
                      "type": "Character",
                      "optional": false
                    },
                    "storyContext": {
                      "name": "storyContext",
                      "type": "StoryContext): Promise<TimingRecommendation>",
                      "optional": false
                    },
                    "context": {
                      "name": "context",
                      "type": "StoryContext): Promise<any>",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 653
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "IRelationshipAnalyzer",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\interfaces.ts",
                "definition": {
                  "name": "IRelationshipAnalyzer",
                  "body": "/**\r\n     * クラスター検出\r\n     * @returns キャラクタークラスターの配列\r\n     */\r\n    detectClusters(): Promise<CharacterCluster[]>;\r\n  \r\n    /**\r\n     * 対立検出\r\n     * @returns 関係性対立の配列\r\n     */\r\n    detectTensions(): Promise<any[]>;\r\n  \r\n    /**\r\n     * 関係性発展追跡\r\n     * @returns 発展情報\r\n     */\r\n    trackRelationshipDevelopments(): Promise<any[]>;\r\n  \r\n    /**\r\n     * 視覚化データ生成\r\n     * @returns 視覚化データ\r\n     */\r\n    generateVisualizationData(): Promise<any>;",
                  "properties": {},
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 675
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "RelationshipNetworkAnalysis",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "RelationshipNetworkAnalysis",
                  "body": "totalRelationships: number;\r\n    networkDensity: number;\r\n    averageConnectivity: number;\r\n    centralCharacters: Array<{\r\n        characterId: string;\r\n        characterName: string;\r\n        connectivityScore: number;\r\n        influenceRank: number;",
                  "properties": {
                    "totalRelationships": {
                      "name": "totalRelationships",
                      "type": "number",
                      "optional": false
                    },
                    "networkDensity": {
                      "name": "networkDensity",
                      "type": "number",
                      "optional": false
                    },
                    "averageConnectivity": {
                      "name": "averageConnectivity",
                      "type": "number",
                      "optional": false
                    },
                    "centralCharacters": {
                      "name": "centralCharacters",
                      "type": "Array<{",
                      "optional": false
                    },
                    "characterId": {
                      "name": "characterId",
                      "type": "string",
                      "optional": false
                    },
                    "characterName": {
                      "name": "characterName",
                      "type": "string",
                      "optional": false
                    },
                    "connectivityScore": {
                      "name": "connectivityScore",
                      "type": "number",
                      "optional": false
                    },
                    "influenceRank": {
                      "name": "influenceRank",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 615
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "RelationshipAnalysis",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "RelationshipAnalysis",
                  "body": "clusters: CharacterCluster[];\r\n    tensions: RelationshipTension[];\r\n    developments: any[];\r\n    visualData: any;\r\n\r\n    // 🆕 記憶階層システム統合情報（新規追加）\r\n    networkAnalysis?: RelationshipNetworkAnalysis;\r\n    analysisTimestamp?: Date;\r\n    confidence?: number;\r\n    memorySystemValidated?: boolean;\r\n    systemHealthScore?: number;\r\n    crossMemoryLevelConsistency?: number;",
                  "properties": {
                    "clusters": {
                      "name": "clusters",
                      "type": "CharacterCluster[]",
                      "optional": false
                    },
                    "tensions": {
                      "name": "tensions",
                      "type": "RelationshipTension[]",
                      "optional": false
                    },
                    "developments": {
                      "name": "developments",
                      "type": "any[]",
                      "optional": false
                    },
                    "visualData": {
                      "name": "visualData",
                      "type": "any",
                      "optional": false
                    },
                    "networkAnalysis": {
                      "name": "networkAnalysis",
                      "type": "RelationshipNetworkAnalysis",
                      "optional": true
                    },
                    "analysisTimestamp": {
                      "name": "analysisTimestamp",
                      "type": "Date",
                      "optional": true
                    },
                    "confidence": {
                      "name": "confidence",
                      "type": "number",
                      "optional": true
                    },
                    "memorySystemValidated": {
                      "name": "memorySystemValidated",
                      "type": "boolean",
                      "optional": true
                    },
                    "systemHealthScore": {
                      "name": "systemHealthScore",
                      "type": "number",
                      "optional": true
                    },
                    "crossMemoryLevelConsistency": {
                      "name": "crossMemoryLevelConsistency",
                      "type": "number",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 639
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "TimingAnalysis",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "TimingAnalysis",
                  "body": "optimalChapter: number;\r\n    significance: 'LOW' | 'MEDIUM' | 'HIGH';\r\n    score: number;\r\n    reason: string;\r\n    factors: TimingFactor[];\r\n    alternatives: number[];\r\n    preparation: string[];",
                  "properties": {
                    "optimalChapter": {
                      "name": "optimalChapter",
                      "type": "number",
                      "optional": false
                    },
                    "significance": {
                      "name": "significance",
                      "type": "'LOW' | 'MEDIUM' | 'HIGH'",
                      "optional": false
                    },
                    "score": {
                      "name": "score",
                      "type": "number",
                      "optional": false
                    },
                    "reason": {
                      "name": "reason",
                      "type": "string",
                      "optional": false
                    },
                    "factors": {
                      "name": "factors",
                      "type": "TimingFactor[]",
                      "optional": false
                    },
                    "alternatives": {
                      "name": "alternatives",
                      "type": "number[]",
                      "optional": false
                    },
                    "preparation": {
                      "name": "preparation",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 751
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "PsychologyAnalysisResult",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "PsychologyAnalysisResult",
                  "body": "success: boolean;\r\n    characterId: string;\r\n    psychology: CharacterPsychology;\r\n    confidence: number;\r\n    processingTime: number;\r\n    memorySystemValidated: boolean;\r\n    learningDataStored: boolean;\r\n    qualityScore: number;\r\n    warnings: string[];\r\n    recommendations: string[];",
                  "properties": {
                    "success": {
                      "name": "success",
                      "type": "boolean",
                      "optional": false
                    },
                    "characterId": {
                      "name": "characterId",
                      "type": "string",
                      "optional": false
                    },
                    "psychology": {
                      "name": "psychology",
                      "type": "CharacterPsychology",
                      "optional": false
                    },
                    "confidence": {
                      "name": "confidence",
                      "type": "number",
                      "optional": false
                    },
                    "processingTime": {
                      "name": "processingTime",
                      "type": "number",
                      "optional": false
                    },
                    "memorySystemValidated": {
                      "name": "memorySystemValidated",
                      "type": "boolean",
                      "optional": false
                    },
                    "learningDataStored": {
                      "name": "learningDataStored",
                      "type": "boolean",
                      "optional": false
                    },
                    "qualityScore": {
                      "name": "qualityScore",
                      "type": "number",
                      "optional": false
                    },
                    "warnings": {
                      "name": "warnings",
                      "type": "string[]",
                      "optional": false
                    },
                    "recommendations": {
                      "name": "recommendations",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 1059
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "ChapterEmotionAnalysis",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "ChapterEmotionAnalysis",
                  "body": "/** 感情的次元の分析 */\r\n    emotionalDimensions: {\r\n        /** 希望と絶望の間の感情的変移 */\r\n        hopeVsDespair: EmotionalProgression;\r\n        /** 安心と緊張の間の感情的変移 */\r\n        comfortVsTension: EmotionalProgression;\r\n        /** 喜びと悲しみの間の感情的変移 */\r\n        joyVsSadness: EmotionalProgression;\r\n        /** 共感と孤立の間の感情的変移 */\r\n        empathyVsIsolation: EmotionalProgression;\r\n        /** 好奇心と無関心の間の感情的変移 */\r\n        curiosityVsIndifference: EmotionalProgression;",
                  "properties": {
                    "emotionalDimensions": {
                      "name": "emotionalDimensions",
                      "type": "{",
                      "optional": false
                    },
                    "hopeVsDespair": {
                      "name": "hopeVsDespair",
                      "type": "EmotionalProgression",
                      "optional": false
                    },
                    "comfortVsTension": {
                      "name": "comfortVsTension",
                      "type": "EmotionalProgression",
                      "optional": false
                    },
                    "joyVsSadness": {
                      "name": "joyVsSadness",
                      "type": "EmotionalProgression",
                      "optional": false
                    },
                    "empathyVsIsolation": {
                      "name": "empathyVsIsolation",
                      "type": "EmotionalProgression",
                      "optional": false
                    },
                    "curiosityVsIndifference": {
                      "name": "curiosityVsIndifference",
                      "type": "EmotionalProgression",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 1114
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "RelationshipAnalyzedEvent",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\events\\event-types.ts",
                "definition": {
                  "name": "RelationshipAnalyzedEvent",
                  "body": "/** 分析タイプ */\r\n    analysisType: string;\r\n    /** 分析結果 */\r\n    result: any;\r\n    /** 対象キャラクターIDs */\r\n    characterIds?: string[];",
                  "properties": {
                    "analysisType": {
                      "name": "analysisType",
                      "type": "string",
                      "optional": false
                    },
                    "result": {
                      "name": "result",
                      "type": "any",
                      "optional": false
                    },
                    "characterIds": {
                      "name": "characterIds",
                      "type": "string[]",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": true,
                  "lineNumber": 403
                },
                "system": "characters",
                "module": "characters/events"
              }
            ]
          },
          {
            "typeName": "AnalysisResultData",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "AnalysisResultData",
                  "body": "emotionalArcDesigns: Map<number, EmotionalArcDesignRecord>;\n    textAnalysisResults: Map<number, TextAnalysisResultRecord>;\n    detectionResults: Map<number, DetectionResultRecord>;\n    preGenerationResults: Map<number, PreGenerationResultRecord>;\n    postGenerationResults: Map<number, PostGenerationResultRecord>;",
                  "properties": {
                    "emotionalArcDesigns": {
                      "name": "emotionalArcDesigns",
                      "type": "Map<number",
                      "optional": false
                    },
                    "textAnalysisResults": {
                      "name": "textAnalysisResults",
                      "type": "Map<number",
                      "optional": false
                    },
                    "detectionResults": {
                      "name": "detectionResults",
                      "type": "Map<number",
                      "optional": false
                    },
                    "preGenerationResults": {
                      "name": "preGenerationResults",
                      "type": "Map<number",
                      "optional": false
                    },
                    "postGenerationResults": {
                      "name": "postGenerationResults",
                      "type": "Map<number",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 248
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "ChapterAnalysisResult",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "ChapterAnalysisResult",
                  "body": "chapterNumber: number;\n    analysisType: string;\n    result: any;\n    confidence: number;\n    timestamp: string;",
                  "properties": {
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": false
                    },
                    "analysisType": {
                      "name": "analysisType",
                      "type": "string",
                      "optional": false
                    },
                    "result": {
                      "name": "result",
                      "type": "any",
                      "optional": false
                    },
                    "confidence": {
                      "name": "confidence",
                      "type": "number",
                      "optional": false
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 503
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "TextAnalysisResultRecord",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "TextAnalysisResultRecord",
                  "body": "chapterNumber: number;\n    analysisResults: any;\n    processingTime: number;\n    timestamp: string;",
                  "properties": {
                    "chapterNumber": {
                      "name": "chapterNumber",
                      "type": "number",
                      "optional": false
                    },
                    "analysisResults": {
                      "name": "analysisResults",
                      "type": "any",
                      "optional": false
                    },
                    "processingTime": {
                      "name": "processingTime",
                      "type": "number",
                      "optional": false
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 574
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "AnalysisPattern",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "AnalysisPattern",
                  "body": "analysisType: string;\n    pattern: any;\n    accuracy: number;\n    applications: string[];",
                  "properties": {
                    "analysisType": {
                      "name": "analysisType",
                      "type": "string",
                      "optional": false
                    },
                    "pattern": {
                      "name": "pattern",
                      "type": "any",
                      "optional": false
                    },
                    "accuracy": {
                      "name": "accuracy",
                      "type": "number",
                      "optional": false
                    },
                    "applications": {
                      "name": "applications",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 838
                },
                "system": "memory",
                "module": "memory/core"
              },
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\system-types.ts",
                "definition": {
                  "name": "AnalysisPattern",
                  "body": "patternId: string;\r\n    patternName: string;\r\n    category: 'emotional' | 'narrative' | 'character' | 'structure' | 'quality';\r\n\r\n    // パターン定義\r\n    analysisType: string;\r\n    methodology: AnalysisMethodology;\r\n    parameters: AnalysisParameter[];\r\n\r\n    // 精度データ\r\n    accuracy: AccuracyMetrics;\r\n    reliability: ReliabilityMetrics;\r\n\r\n    // 適用データ\r\n    applicableGenres: string[];\r\n    inputRequirements: InputRequirement[];\r\n    outputFormat: OutputFormat;\r\n\r\n    // 学習データ\r\n    trainingData: TrainingData[];\r\n    validationResults: ValidationResult[];\r\n\r\n    // 改善履歴\r\n    improvementHistory: ImprovementRecord[];\r\n\r\n    // メタデータ\r\n    createdAt: string;\r\n    lastTrained: string;\r\n    version: string;\r\n    status: 'active' | 'testing' | 'deprecated';",
                  "properties": {
                    "patternId": {
                      "name": "patternId",
                      "type": "string",
                      "optional": false
                    },
                    "patternName": {
                      "name": "patternName",
                      "type": "string",
                      "optional": false
                    },
                    "category": {
                      "name": "category",
                      "type": "'emotional' | 'narrative' | 'character' | 'structure' | 'quality'",
                      "optional": false
                    },
                    "analysisType": {
                      "name": "analysisType",
                      "type": "string",
                      "optional": false
                    },
                    "methodology": {
                      "name": "methodology",
                      "type": "AnalysisMethodology",
                      "optional": false
                    },
                    "parameters": {
                      "name": "parameters",
                      "type": "AnalysisParameter[]",
                      "optional": false
                    },
                    "accuracy": {
                      "name": "accuracy",
                      "type": "AccuracyMetrics",
                      "optional": false
                    },
                    "reliability": {
                      "name": "reliability",
                      "type": "ReliabilityMetrics",
                      "optional": false
                    },
                    "applicableGenres": {
                      "name": "applicableGenres",
                      "type": "string[]",
                      "optional": false
                    },
                    "inputRequirements": {
                      "name": "inputRequirements",
                      "type": "InputRequirement[]",
                      "optional": false
                    },
                    "outputFormat": {
                      "name": "outputFormat",
                      "type": "OutputFormat",
                      "optional": false
                    },
                    "trainingData": {
                      "name": "trainingData",
                      "type": "TrainingData[]",
                      "optional": false
                    },
                    "validationResults": {
                      "name": "validationResults",
                      "type": "ValidationResult[]",
                      "optional": false
                    },
                    "improvementHistory": {
                      "name": "improvementHistory",
                      "type": "ImprovementRecord[]",
                      "optional": false
                    },
                    "createdAt": {
                      "name": "createdAt",
                      "type": "string",
                      "optional": false
                    },
                    "lastTrained": {
                      "name": "lastTrained",
                      "type": "string",
                      "optional": false
                    },
                    "version": {
                      "name": "version",
                      "type": "string",
                      "optional": false
                    },
                    "status": {
                      "name": "status",
                      "type": "'active' | 'testing' | 'deprecated'",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 383
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "AnalysisMethodology",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\system-types.ts",
                "definition": {
                  "name": "AnalysisMethodology",
                  "body": "approach: 'rule_based' | 'ml_based' | 'hybrid' | 'ai_assisted';\r\n    algorithm: string;\r\n    steps: AnalysisStep[];\r\n    dependencies: string[];\r\n    limitations: string[];",
                  "properties": {
                    "approach": {
                      "name": "approach",
                      "type": "'rule_based' | 'ml_based' | 'hybrid' | 'ai_assisted'",
                      "optional": false
                    },
                    "algorithm": {
                      "name": "algorithm",
                      "type": "string",
                      "optional": false
                    },
                    "steps": {
                      "name": "steps",
                      "type": "AnalysisStep[]",
                      "optional": false
                    },
                    "dependencies": {
                      "name": "dependencies",
                      "type": "string[]",
                      "optional": false
                    },
                    "limitations": {
                      "name": "limitations",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 419
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "AnalysisStep",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\system-types.ts",
                "definition": {
                  "name": "AnalysisStep",
                  "body": "stepId: string;\r\n    name: string;\r\n    description: string;\r\n    order: number;\r\n    inputType: string;\r\n    outputType: string;\r\n    processing: ProcessingInstruction[];",
                  "properties": {
                    "stepId": {
                      "name": "stepId",
                      "type": "string",
                      "optional": false
                    },
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    },
                    "order": {
                      "name": "order",
                      "type": "number",
                      "optional": false
                    },
                    "inputType": {
                      "name": "inputType",
                      "type": "string",
                      "optional": false
                    },
                    "outputType": {
                      "name": "outputType",
                      "type": "string",
                      "optional": false
                    },
                    "processing": {
                      "name": "processing",
                      "type": "ProcessingInstruction[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 430
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "AnalysisParameter",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\system-types.ts",
                "definition": {
                  "name": "AnalysisParameter",
                  "body": "parameterId: string;\r\n    name: string;\r\n    type: string;\r\n    description: string;\r\n    defaultValue: any;\r\n    range?: any;\r\n    impact: number; // 0-10",
                  "properties": {
                    "parameterId": {
                      "name": "parameterId",
                      "type": "string",
                      "optional": false
                    },
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "type": {
                      "name": "type",
                      "type": "string",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    },
                    "defaultValue": {
                      "name": "defaultValue",
                      "type": "any",
                      "optional": false
                    },
                    "range": {
                      "name": "range",
                      "type": "any",
                      "optional": true
                    },
                    "impact": {
                      "name": "impact",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 453
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "AnalysisMethod",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\system-types.ts",
                "definition": {
                  "name": "AnalysisMethod",
                  "body": "methodId: string;\r\n    name: string;\r\n    description: string;\r\n    type: 'statistical' | 'trend' | 'comparative' | 'predictive';\r\n    tools: string[];\r\n    outputs: string[];",
                  "properties": {
                    "methodId": {
                      "name": "methodId",
                      "type": "string",
                      "optional": false
                    },
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    },
                    "type": {
                      "name": "type",
                      "type": "'statistical' | 'trend' | 'comparative' | 'predictive'",
                      "optional": false
                    },
                    "tools": {
                      "name": "tools",
                      "type": "string[]",
                      "optional": false
                    },
                    "outputs": {
                      "name": "outputs",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 1343
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "ChapterEmotionAnalysis",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "ChapterEmotionAnalysis",
                  "body": "emotionalDimensions: {\r\n        hopeVsDespair: { start: number, middle: number, end: number",
                  "properties": {
                    "emotionalDimensions": {
                      "name": "emotionalDimensions",
                      "type": "{",
                      "optional": false
                    },
                    "hopeVsDespair": {
                      "name": "hopeVsDespair",
                      "type": "{ start: number",
                      "optional": false
                    },
                    "middle": {
                      "name": "middle",
                      "type": "number",
                      "optional": false
                    },
                    "end": {
                      "name": "end",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 317
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "ThemeResonanceAnalysis",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "ThemeResonanceAnalysis",
                  "body": "strength: number;\r\n    dominantExpressions: string[];\r\n    resonanceHistory?: {\r\n        chapter: number;\r\n        strength: number;\r\n        dominantExpressions: string[];",
                  "properties": {
                    "strength": {
                      "name": "strength",
                      "type": "number",
                      "optional": false
                    },
                    "dominantExpressions": {
                      "name": "dominantExpressions",
                      "type": "string[]",
                      "optional": false
                    },
                    "resonanceHistory": {
                      "name": "resonanceHistory",
                      "type": "{",
                      "optional": true
                    },
                    "chapter": {
                      "name": "chapter",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 490
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "BridgeAnalysisResult",
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\bridge-types.ts",
                "definition": {
                  "name": "BridgeAnalysisResult",
                  "body": "plotProgressAlignment: number;     // プロット進行の一致度 (0-1)\r\n  suggestedAdjustments: string[];    // 提案される調整\r\n  keyElementsForNext: string[];      // 次に重要な要素\r\n  narrativeDirection: string;        // 物語の方向性\r\n  tensionProjection: number;         // 緊張度の予測 (1-10)\r\n  continuityElements?: string[];     // 継続性を保つべき要素\r\n  recommendedPacing?: string;        // 推奨されるペース",
                  "properties": {
                    "plotProgressAlignment": {
                      "name": "plotProgressAlignment",
                      "type": "number",
                      "optional": false
                    },
                    "suggestedAdjustments": {
                      "name": "suggestedAdjustments",
                      "type": "string[]",
                      "optional": false
                    },
                    "keyElementsForNext": {
                      "name": "keyElementsForNext",
                      "type": "string[]",
                      "optional": false
                    },
                    "narrativeDirection": {
                      "name": "narrativeDirection",
                      "type": "string",
                      "optional": false
                    },
                    "tensionProjection": {
                      "name": "tensionProjection",
                      "type": "number",
                      "optional": false
                    },
                    "continuityElements": {
                      "name": "continuityElements",
                      "type": "string[]",
                      "optional": true
                    },
                    "recommendedPacing": {
                      "name": "recommendedPacing",
                      "type": "string",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 93
                },
                "system": "plot",
                "module": "plot"
              }
            ]
          },
          {
            "typeName": "CoherenceAnalysis",
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\section\\types.ts",
                "definition": {
                  "name": "CoherenceAnalysis",
                  "body": "/** 全体的な一貫性スコア (0-10) */\r\n  overallScore: number;\r\n  \r\n  /** 問題のある領域 */\r\n  problematicAreas: Array<{\r\n    /** 問題の種類 */\r\n    type: 'theme' | 'character' | 'plot' | 'setting' | 'tone';\r\n    \r\n    /** 説明 */\r\n    description: string;\r\n    \r\n    /** 深刻度 (0-10) */\r\n    severity: number;",
                  "properties": {
                    "overallScore": {
                      "name": "overallScore",
                      "type": "number",
                      "optional": false
                    },
                    "problematicAreas": {
                      "name": "problematicAreas",
                      "type": "Array<{",
                      "optional": false
                    },
                    "type": {
                      "name": "type",
                      "type": "'theme' | 'character' | 'plot' | 'setting' | 'tone'",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    },
                    "severity": {
                      "name": "severity",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 371
                },
                "system": "plot",
                "module": "plot/section"
              }
            ]
          }
        ],
        "configurationRelated": [
          {
            "typeName": "BaseCoordinatorOptions",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\coordinators\\interfaces.ts",
                "definition": {
                  "name": "BaseCoordinatorOptions",
                  "body": "/** キャッシュを有効にするか */\r\n  enableCache?: boolean;\r\n  /** 並列処理を有効にするか */\r\n  enableParallelProcessing?: boolean;\r\n  /** 詳細ログを有効にするか */\r\n  enableDetailedLogging?: boolean;",
                  "properties": {
                    "enableCache": {
                      "name": "enableCache",
                      "type": "boolean",
                      "optional": true
                    },
                    "enableParallelProcessing": {
                      "name": "enableParallelProcessing",
                      "type": "boolean",
                      "optional": true
                    },
                    "enableDetailedLogging": {
                      "name": "enableDetailedLogging",
                      "type": "boolean",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 30
                },
                "system": "analysis",
                "module": "analysis/coordinators"
              }
            ]
          },
          {
            "typeName": "OptimizationCoordinatorOptions",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\coordinators\\interfaces.ts",
                "definition": {
                  "name": "OptimizationCoordinatorOptions",
                  "body": "/** カテゴリごとの最大推奨数 */\r\n  maxRecommendationsPerCategory?: number;\r\n  /** 優先順位付け戦略 */\r\n  prioritizationStrategy?: 'impact' | 'effort' | 'balanced';\r\n  /** 矛盾解決を有効にするか */\r\n  enableConflictResolution?: boolean;\r\n  /** 相乗効果検出を有効にするか */\r\n  enableSynergyDetection?: boolean;",
                  "properties": {
                    "maxRecommendationsPerCategory": {
                      "name": "maxRecommendationsPerCategory",
                      "type": "number",
                      "optional": true
                    },
                    "prioritizationStrategy": {
                      "name": "prioritizationStrategy",
                      "type": "'impact' | 'effort' | 'balanced'",
                      "optional": true
                    },
                    "enableConflictResolution": {
                      "name": "enableConflictResolution",
                      "type": "boolean",
                      "optional": true
                    },
                    "enableSynergyDetection": {
                      "name": "enableSynergyDetection",
                      "type": "boolean",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": true,
                  "lineNumber": 209
                },
                "system": "analysis",
                "module": "analysis/coordinators"
              }
            ]
          },
          {
            "typeName": "StyleOptimizationOptions",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\enhancement\\style\\interfaces.ts",
                "definition": {
                  "name": "StyleOptimizationOptions",
                  "body": "/** AI分析を使用するかどうか */\r\n  useAIAnalysis?: boolean;\r\n  /** 詳細レベル（1-3、高いほど詳細） */\r\n  detailLevel?: number;\r\n  /** キャッシュを使用するかどうか */\r\n  useCache?: boolean;\r\n  /** 最大提案数 */\r\n  maxSuggestions?: number;\r\n  /** 分析対象となる最小文字数 */\r\n  minContentLength?: number;",
                  "properties": {
                    "useAIAnalysis": {
                      "name": "useAIAnalysis",
                      "type": "boolean",
                      "optional": true
                    },
                    "detailLevel": {
                      "name": "detailLevel",
                      "type": "number",
                      "optional": true
                    },
                    "useCache": {
                      "name": "useCache",
                      "type": "boolean",
                      "optional": true
                    },
                    "maxSuggestions": {
                      "name": "maxSuggestions",
                      "type": "number",
                      "optional": true
                    },
                    "minContentLength": {
                      "name": "minContentLength",
                      "type": "number",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 134
                },
                "system": "analysis",
                "module": "analysis/enhancement/style"
              }
            ]
          },
          {
            "typeName": "UnifiedForeshadowingSystemConfig",
            "system": "foreshadowing",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\foreshadowing\\index.ts",
                "definition": {
                  "name": "UnifiedForeshadowingSystemConfig",
                  "body": "memoryManager: MemoryManager;\n    enableAdvancedResolution?: boolean;\n    enablePerformanceOptimization?: boolean;\n    enableSystemDiagnostics?: boolean;\n    maxConcurrentOperations?: number;\n    cacheOptimizationLevel?: 'low' | 'medium' | 'high';",
                  "properties": {
                    "memoryManager": {
                      "name": "memoryManager",
                      "type": "MemoryManager",
                      "optional": false
                    },
                    "enableAdvancedResolution": {
                      "name": "enableAdvancedResolution",
                      "type": "boolean",
                      "optional": true
                    },
                    "enablePerformanceOptimization": {
                      "name": "enablePerformanceOptimization",
                      "type": "boolean",
                      "optional": true
                    },
                    "enableSystemDiagnostics": {
                      "name": "enableSystemDiagnostics",
                      "type": "boolean",
                      "optional": true
                    },
                    "maxConcurrentOperations": {
                      "name": "maxConcurrentOperations",
                      "type": "number",
                      "optional": true
                    },
                    "cacheOptimizationLevel": {
                      "name": "cacheOptimizationLevel",
                      "type": "'low' | 'medium' | 'high'",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 23
                },
                "system": "foreshadowing",
                "module": "foreshadowing"
              }
            ]
          },
          {
            "typeName": "LearningJourneySystemConfig",
            "system": "learning-journey",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\learning-journey\\index.ts",
                "definition": {
                  "name": "LearningJourneySystemConfig",
                  "body": "// 統合記憶システム設定\n    memorySystemIntegration: {\n        enabled: boolean;\n        maxRetries: number;\n        timeoutMs: number;\n        fallbackEnabled: boolean;",
                  "properties": {
                    "memorySystemIntegration": {
                      "name": "memorySystemIntegration",
                      "type": "{",
                      "optional": false
                    },
                    "enabled": {
                      "name": "enabled",
                      "type": "boolean",
                      "optional": false
                    },
                    "maxRetries": {
                      "name": "maxRetries",
                      "type": "number",
                      "optional": false
                    },
                    "timeoutMs": {
                      "name": "timeoutMs",
                      "type": "number",
                      "optional": false
                    },
                    "fallbackEnabled": {
                      "name": "fallbackEnabled",
                      "type": "boolean",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 78
                },
                "system": "learning-journey",
                "module": "learning-journey"
              }
            ]
          },
          {
            "typeName": "ConsolidatedSettingsData",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "ConsolidatedSettingsData",
                  "body": "worldSettingsMaster: WorldSettingsMasterRecord;\n    genreSettingsMaster: GenreSettingsMasterRecord;\n    templateMaster: TemplateMasterRecord;\n    systemConfigMaster: SystemConfigMasterRecord;",
                  "properties": {
                    "worldSettingsMaster": {
                      "name": "worldSettingsMaster",
                      "type": "WorldSettingsMasterRecord",
                      "optional": false
                    },
                    "genreSettingsMaster": {
                      "name": "genreSettingsMaster",
                      "type": "GenreSettingsMasterRecord",
                      "optional": false
                    },
                    "templateMaster": {
                      "name": "templateMaster",
                      "type": "TemplateMasterRecord",
                      "optional": false
                    },
                    "systemConfigMaster": {
                      "name": "systemConfigMaster",
                      "type": "SystemConfigMasterRecord",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 290
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "WorldSettingsMasterRecord",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "WorldSettingsMasterRecord",
                  "body": "consolidatedSettings: any;\n    sources: string[];\n    lastUpdate: string;",
                  "properties": {
                    "consolidatedSettings": {
                      "name": "consolidatedSettings",
                      "type": "any",
                      "optional": false
                    },
                    "sources": {
                      "name": "sources",
                      "type": "string[]",
                      "optional": false
                    },
                    "lastUpdate": {
                      "name": "lastUpdate",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 745
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "GenreSettingsMasterRecord",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "GenreSettingsMasterRecord",
                  "body": "consolidatedGenre: any;\n    sources: string[];\n    lastUpdate: string;",
                  "properties": {
                    "consolidatedGenre": {
                      "name": "consolidatedGenre",
                      "type": "any",
                      "optional": false
                    },
                    "sources": {
                      "name": "sources",
                      "type": "string[]",
                      "optional": false
                    },
                    "lastUpdate": {
                      "name": "lastUpdate",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 751
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "SystemConfigMasterRecord",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "SystemConfigMasterRecord",
                  "body": "consolidatedConfig: any;\n    sources: string[];\n    lastUpdate: string;",
                  "properties": {
                    "consolidatedConfig": {
                      "name": "consolidatedConfig",
                      "type": "any",
                      "optional": false
                    },
                    "sources": {
                      "name": "sources",
                      "type": "string[]",
                      "optional": false
                    },
                    "lastUpdate": {
                      "name": "lastUpdate",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 763
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "ManagerConstructorOptions",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "ManagerConstructorOptions",
                  "body": "geminiClient?: GeminiClient;",
                  "properties": {
                    "geminiClient": {
                      "name": "geminiClient",
                      "type": "GeminiClient",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 97
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "UpdateOptions",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "UpdateOptions",
                  "body": "genre?: string;\r\n    totalChapters?: number;\r\n    currentArcNumber?: number;",
                  "properties": {
                    "genre": {
                      "name": "genre",
                      "type": "string",
                      "optional": true
                    },
                    "totalChapters": {
                      "name": "totalChapters",
                      "type": "number",
                      "optional": true
                    },
                    "currentArcNumber": {
                      "name": "currentArcNumber",
                      "type": "number",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 105
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "QueryOptions",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "QueryOptions",
                  "body": "limit?: number;\r\n    minSignificance?: number;\r\n    includeResolved?: boolean;\r\n    sortBy?: 'significance' | 'time';\r\n    isPersistent?: boolean;",
                  "properties": {
                    "limit": {
                      "name": "limit",
                      "type": "number",
                      "optional": true
                    },
                    "minSignificance": {
                      "name": "minSignificance",
                      "type": "number",
                      "optional": true
                    },
                    "includeResolved": {
                      "name": "includeResolved",
                      "type": "boolean",
                      "optional": true
                    },
                    "sortBy": {
                      "name": "sortBy",
                      "type": "'significance' | 'time'",
                      "optional": true
                    },
                    "isPersistent": {
                      "name": "isPersistent",
                      "type": "boolean",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 656
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "SearchOptions",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\types.ts",
                "definition": {
                  "name": "SearchOptions",
                  "body": "limit?: number;\r\n    minRelevance?: number;\r\n    memoryTypes?: string[];\r\n    includeMeta?: boolean;",
                  "properties": {
                    "limit": {
                      "name": "limit",
                      "type": "number",
                      "optional": true
                    },
                    "minRelevance": {
                      "name": "minRelevance",
                      "type": "number",
                      "optional": true
                    },
                    "memoryTypes": {
                      "name": "memoryTypes",
                      "type": "string[]",
                      "optional": true
                    },
                    "includeMeta": {
                      "name": "includeMeta",
                      "type": "boolean",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 668
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "SectionSystemConfig",
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\section\\index.ts",
                "definition": {
                  "name": "SectionSystemConfig",
                  "body": "// 記憶システム統合設定\n    memorySystem: {\n        useIntegration: boolean;\n        enableCaching: boolean;\n        enableOptimization: boolean;\n        enableQualityAssurance: boolean;\n        enableAutoBackup: boolean;\n        fallbackToLocalAnalysis: boolean;",
                  "properties": {
                    "memorySystem": {
                      "name": "memorySystem",
                      "type": "{",
                      "optional": false
                    },
                    "useIntegration": {
                      "name": "useIntegration",
                      "type": "boolean",
                      "optional": false
                    },
                    "enableCaching": {
                      "name": "enableCaching",
                      "type": "boolean",
                      "optional": false
                    },
                    "enableOptimization": {
                      "name": "enableOptimization",
                      "type": "boolean",
                      "optional": false
                    },
                    "enableQualityAssurance": {
                      "name": "enableQualityAssurance",
                      "type": "boolean",
                      "optional": false
                    },
                    "enableAutoBackup": {
                      "name": "enableAutoBackup",
                      "type": "boolean",
                      "optional": false
                    },
                    "fallbackToLocalAnalysis": {
                      "name": "fallbackToLocalAnalysis",
                      "type": "boolean",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 61
                },
                "system": "plot",
                "module": "plot/section"
              }
            ]
          },
          {
            "typeName": "WorldSettings",
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\types.ts",
                "definition": {
                  "name": "WorldSettings",
                  "body": "description: string;\r\n    regions?: any[];\r\n    history?: any[];\r\n    rules?: any[];\r\n    genre?: string;\r\n\r\n    magicSystem?: any;\r\n    technology?: any;\r\n    socialSystem?: any;\r\n    supernatural?: any[];\r\n    uniqueElements?: any[];\r\n    \r\n    // ビジネスジャンル向けの追加フィールド\r\n    businessSystem?: {\r\n        description?: string;\r\n        rules?: string[];\r\n        [key: string]: any;",
                  "properties": {
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": true
                    },
                    "regions": {
                      "name": "regions",
                      "type": "any[]",
                      "optional": true
                    },
                    "history": {
                      "name": "history",
                      "type": "any[]",
                      "optional": true
                    },
                    "rules": {
                      "name": "rules",
                      "type": "string[]",
                      "optional": true
                    },
                    "genre": {
                      "name": "genre",
                      "type": "string",
                      "optional": true
                    },
                    "magicSystem": {
                      "name": "magicSystem",
                      "type": "any",
                      "optional": true
                    },
                    "technology": {
                      "name": "technology",
                      "type": "any",
                      "optional": true
                    },
                    "socialSystem": {
                      "name": "socialSystem",
                      "type": "any",
                      "optional": true
                    },
                    "supernatural": {
                      "name": "supernatural",
                      "type": "any[]",
                      "optional": true
                    },
                    "uniqueElements": {
                      "name": "uniqueElements",
                      "type": "any[]",
                      "optional": true
                    },
                    "businessSystem": {
                      "name": "businessSystem",
                      "type": "{",
                      "optional": true
                    },
                    "key": {
                      "name": "key",
                      "type": "string]: any",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 128
                },
                "system": "plot",
                "module": "plot"
              }
            ]
          },
          {
            "typeName": "ThemeSettings",
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\types.ts",
                "definition": {
                  "name": "ThemeSettings",
                  "body": "description: string;\r\n    mainThemes?: string[];\r\n    subThemes?: string[];\r\n    evolution?: any[];\r\n    implementation?: any;\r\n    oppositions?: any[];\r\n    message?: any;\r\n    conclusion?: any;\r\n    customFields?: any;",
                  "properties": {
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    },
                    "mainThemes": {
                      "name": "mainThemes",
                      "type": "string[]",
                      "optional": true
                    },
                    "subThemes": {
                      "name": "subThemes",
                      "type": "string[]",
                      "optional": true
                    },
                    "evolution": {
                      "name": "evolution",
                      "type": "any[]",
                      "optional": true
                    },
                    "implementation": {
                      "name": "implementation",
                      "type": "any",
                      "optional": true
                    },
                    "oppositions": {
                      "name": "oppositions",
                      "type": "any[]",
                      "optional": true
                    },
                    "message": {
                      "name": "message",
                      "type": "any",
                      "optional": true
                    },
                    "conclusion": {
                      "name": "conclusion",
                      "type": "any",
                      "optional": true
                    },
                    "customFields": {
                      "name": "customFields",
                      "type": "any",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 155
                },
                "system": "plot",
                "module": "plot"
              }
            ]
          }
        ],
        "dataModelRelated": [
          {
            "typeName": "BaseMetadata",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\coordinators\\interfaces.ts",
                "definition": {
                  "name": "BaseMetadata",
                  "body": "/** 処理タイムスタンプ */\r\n  timestamp: string;\r\n  /** 使用されたサービス一覧 */\r\n  servicesUsed: string[];\r\n  /** 処理時間（ミリ秒） */\r\n  processingTime: number;\r\n  /** キャッシュヒット率 */\r\n  cacheHitRate: number;",
                  "properties": {
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    },
                    "servicesUsed": {
                      "name": "servicesUsed",
                      "type": "string[]",
                      "optional": false
                    },
                    "processingTime": {
                      "name": "processingTime",
                      "type": "number",
                      "optional": false
                    },
                    "cacheHitRate": {
                      "name": "cacheHitRate",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 43
                },
                "system": "analysis",
                "module": "analysis/coordinators"
              }
            ]
          },
          {
            "typeName": "OptimizationMetadata",
            "system": "analysis",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\analysis\\coordinators\\interfaces.ts",
                "definition": {
                  "name": "OptimizationMetadata",
                  "body": "/** 最適化タイムスタンプ */\r\n  optimizationTimestamp: string;\r\n  /** 総推奨数 */\r\n  totalRecommendations: number;\r\n  /** 高優先度数 */\r\n  highPriorityCount: number;\r\n  /** 中優先度数 */\r\n  mediumPriorityCount: number;\r\n  /** 低優先度数 */\r\n  lowPriorityCount: number;",
                  "properties": {
                    "optimizationTimestamp": {
                      "name": "optimizationTimestamp",
                      "type": "string",
                      "optional": false
                    },
                    "totalRecommendations": {
                      "name": "totalRecommendations",
                      "type": "number",
                      "optional": false
                    },
                    "highPriorityCount": {
                      "name": "highPriorityCount",
                      "type": "number",
                      "optional": false
                    },
                    "mediumPriorityCount": {
                      "name": "mediumPriorityCount",
                      "type": "number",
                      "optional": false
                    },
                    "lowPriorityCount": {
                      "name": "lowPriorityCount",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": true,
                  "lineNumber": 337
                },
                "system": "analysis",
                "module": "analysis/coordinators"
              }
            ]
          },
          {
            "typeName": "EventData",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "EventData",
                  "body": "/** イベント発生タイムスタンプ */\r\n    timestamp: Date;\r\n    /** イベント固有データ */\r\n    [key: string]: any;",
                  "properties": {
                    "timestamp": {
                      "name": "timestamp",
                      "type": "Date",
                      "optional": false
                    },
                    "key": {
                      "name": "key",
                      "type": "string]: any",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 1194
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "RelationshipUpdatedEventData",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "RelationshipUpdatedEventData",
                  "body": "char1Id: string;\r\n    char2Id: string;\r\n    relationship: Relationship;\r\n    previousRelationship?: Relationship;",
                  "properties": {
                    "char1Id": {
                      "name": "char1Id",
                      "type": "string",
                      "optional": false
                    },
                    "char2Id": {
                      "name": "char2Id",
                      "type": "string",
                      "optional": false
                    },
                    "relationship": {
                      "name": "relationship",
                      "type": "Relationship",
                      "optional": false
                    },
                    "previousRelationship": {
                      "name": "previousRelationship",
                      "type": "Relationship",
                      "optional": true
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": true,
                  "lineNumber": 1220
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "ParameterChangedEventData",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "ParameterChangedEventData",
                  "body": "characterId: string;\r\n    parameterId: string;\r\n    oldValue: number;\r\n    newValue: number;",
                  "properties": {
                    "characterId": {
                      "name": "characterId",
                      "type": "string",
                      "optional": false
                    },
                    "parameterId": {
                      "name": "parameterId",
                      "type": "string",
                      "optional": false
                    },
                    "oldValue": {
                      "name": "oldValue",
                      "type": "number",
                      "optional": false
                    },
                    "newValue": {
                      "name": "newValue",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": true,
                  "lineNumber": 1230
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "SkillAcquiredEventData",
            "system": "characters",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\characters\\core\\types.ts",
                "definition": {
                  "name": "SkillAcquiredEventData",
                  "body": "characterId: string;\r\n    skillId: string;\r\n    level: number;",
                  "properties": {
                    "characterId": {
                      "name": "characterId",
                      "type": "string",
                      "optional": false
                    },
                    "skillId": {
                      "name": "skillId",
                      "type": "string",
                      "optional": false
                    },
                    "level": {
                      "name": "level",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": true,
                  "lineNumber": 1240
                },
                "system": "characters",
                "module": "characters/core"
              }
            ]
          },
          {
            "typeName": "AccessStatisticsData",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\interfaces.ts",
                "definition": {
                  "name": "AccessStatisticsData",
                  "body": "// ✅ export を削除\r\n  totalAccesses: number;\r\n  averageAccessTime: number;\r\n  cacheHitRate: number;\r\n  consistencyScore: number;\r\n  optimizationEffectiveness: number;\r\n  performanceGain: number;\r\n  strategyDistribution: Record<string, number>;\r\n  levelDistribution: Record<string, number>;",
                  "properties": {
                    "totalAccesses": {
                      "name": "totalAccesses",
                      "type": "number",
                      "optional": false
                    },
                    "averageAccessTime": {
                      "name": "averageAccessTime",
                      "type": "number",
                      "optional": false
                    },
                    "cacheHitRate": {
                      "name": "cacheHitRate",
                      "type": "number",
                      "optional": false
                    },
                    "consistencyScore": {
                      "name": "consistencyScore",
                      "type": "number",
                      "optional": false
                    },
                    "optimizationEffectiveness": {
                      "name": "optimizationEffectiveness",
                      "type": "number",
                      "optional": false
                    },
                    "performanceGain": {
                      "name": "performanceGain",
                      "type": "number",
                      "optional": false
                    },
                    "strategyDistribution": {
                      "name": "strategyDistribution",
                      "type": "Record<string",
                      "optional": false
                    },
                    "levelDistribution": {
                      "name": "levelDistribution",
                      "type": "Record<string",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 176
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "QualityMetricsData",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\interfaces.ts",
                "definition": {
                  "name": "QualityMetricsData",
                  "body": "// ✅ export を削除\r\n  dataIntegrity: {\r\n    score: number;\r\n    violations: number;\r\n    lastValidation: number;\r\n    criticalIssues: string[];",
                  "properties": {
                    "dataIntegrity": {
                      "name": "dataIntegrity",
                      "type": "{",
                      "optional": false
                    },
                    "score": {
                      "name": "score",
                      "type": "number",
                      "optional": false
                    },
                    "violations": {
                      "name": "violations",
                      "type": "number",
                      "optional": false
                    },
                    "lastValidation": {
                      "name": "lastValidation",
                      "type": "number",
                      "optional": false
                    },
                    "criticalIssues": {
                      "name": "criticalIssues",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 203
                },
                "system": "memory",
                "module": "memory/core"
              },
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "QualityMetricsData",
                  "body": "chapterQualityHistory: ChapterQualityRecord[];\n    systemQualityMetrics: SystemQualityMetricsRecord[];\n    diagnosticHistory: DiagnosticHistoryRecord[];\n    systemHealthMetrics: SystemHealthMetricsRecord[];",
                  "properties": {
                    "chapterQualityHistory": {
                      "name": "chapterQualityHistory",
                      "type": "ChapterQualityRecord[]",
                      "optional": false
                    },
                    "systemQualityMetrics": {
                      "name": "systemQualityMetrics",
                      "type": "SystemQualityMetricsRecord[]",
                      "optional": false
                    },
                    "diagnosticHistory": {
                      "name": "diagnosticHistory",
                      "type": "DiagnosticHistoryRecord[]",
                      "optional": false
                    },
                    "systemHealthMetrics": {
                      "name": "systemHealthMetrics",
                      "type": "SystemHealthMetricsRecord[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 280
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "ChapterContextData",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "ChapterContextData",
                  "body": "chapter: Chapter;\n    characterStates: Map<string, CharacterState>;\n    keyPhrases: string[];\n    analysisResults: ChapterAnalysisResult[];\n    timestamp: string;",
                  "properties": {
                    "chapter": {
                      "name": "chapter",
                      "type": "Chapter",
                      "optional": false
                    },
                    "characterStates": {
                      "name": "characterStates",
                      "type": "Map<string",
                      "optional": false
                    },
                    "keyPhrases": {
                      "name": "keyPhrases",
                      "type": "string[]",
                      "optional": false
                    },
                    "analysisResults": {
                      "name": "analysisResults",
                      "type": "ChapterAnalysisResult[]",
                      "optional": false
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 207
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "SystemStatisticsData",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "SystemStatisticsData",
                  "body": "promptGenerationStats: PromptGenerationStatsRecord[];\n    templateUsageStats: TemplateUsageStatsRecord[];\n    tensionOptimizationStats: TensionOptimizationStatsRecord[];\n    componentPerformanceStats: Map<string, ComponentPerformanceStats>;\n    systemIntegrationStats: SystemIntegrationStatsRecord[];",
                  "properties": {
                    "promptGenerationStats": {
                      "name": "promptGenerationStats",
                      "type": "PromptGenerationStatsRecord[]",
                      "optional": false
                    },
                    "templateUsageStats": {
                      "name": "templateUsageStats",
                      "type": "TemplateUsageStatsRecord[]",
                      "optional": false
                    },
                    "tensionOptimizationStats": {
                      "name": "tensionOptimizationStats",
                      "type": "TensionOptimizationStatsRecord[]",
                      "optional": false
                    },
                    "componentPerformanceStats": {
                      "name": "componentPerformanceStats",
                      "type": "Map<string",
                      "optional": false
                    },
                    "systemIntegrationStats": {
                      "name": "systemIntegrationStats",
                      "type": "SystemIntegrationStatsRecord[]",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 269
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "KnowledgeDatabaseData",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "KnowledgeDatabaseData",
                  "body": "characters: Map<string, CharacterMasterRecord>;\n    worldKnowledge: WorldKnowledgeDatabase;\n    conceptDefinitions: Map<string, ConceptDefinitionRecord>;\n    foreshadowingDatabase: ForeshadowingDatabase;\n    sectionDefinitions: Map<string, SectionDefinitionRecord>;",
                  "properties": {
                    "characters": {
                      "name": "characters",
                      "type": "Map<string",
                      "optional": false
                    },
                    "worldKnowledge": {
                      "name": "worldKnowledge",
                      "type": "WorldKnowledgeDatabase",
                      "optional": false
                    },
                    "conceptDefinitions": {
                      "name": "conceptDefinitions",
                      "type": "Map<string",
                      "optional": false
                    },
                    "foreshadowingDatabase": {
                      "name": "foreshadowingDatabase",
                      "type": "ForeshadowingDatabase",
                      "optional": false
                    },
                    "sectionDefinitions": {
                      "name": "sectionDefinitions",
                      "type": "Map<string",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 300
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "SystemKnowledgeBaseData",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "SystemKnowledgeBaseData",
                  "body": "promptGenerationPatterns: PromptGenerationPattern[];\n    effectiveTemplatePatterns: EffectiveTemplatePattern[];\n    analysisPatterns: AnalysisPattern[];\n    optimizationStrategies: OptimizationStrategy[];\n    errorPatterns: ErrorPattern[];\n    qualityImprovementStrategies: QualityImprovementStrategy[];",
                  "properties": {
                    "promptGenerationPatterns": {
                      "name": "promptGenerationPatterns",
                      "type": "PromptGenerationPattern[]",
                      "optional": false
                    },
                    "effectiveTemplatePatterns": {
                      "name": "effectiveTemplatePatterns",
                      "type": "EffectiveTemplatePattern[]",
                      "optional": false
                    },
                    "analysisPatterns": {
                      "name": "analysisPatterns",
                      "type": "AnalysisPattern[]",
                      "optional": false
                    },
                    "optimizationStrategies": {
                      "name": "optimizationStrategies",
                      "type": "OptimizationStrategy[]",
                      "optional": false
                    },
                    "errorPatterns": {
                      "name": "errorPatterns",
                      "type": "ErrorPattern[]",
                      "optional": false
                    },
                    "qualityImprovementStrategies": {
                      "name": "qualityImprovementStrategies",
                      "type": "QualityImprovementStrategy[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 311
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "CompletedRecordsData",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "CompletedRecordsData",
                  "body": "completedSections: Map<string, CompletedSectionRecord>;\n    completedArcs: Map<number, CompletedArcRecord>;\n    longTermEffectivenessRecords: LongTermEffectivenessRecord[];",
                  "properties": {
                    "completedSections": {
                      "name": "completedSections",
                      "type": "Map<string",
                      "optional": false
                    },
                    "completedArcs": {
                      "name": "completedArcs",
                      "type": "Map<number",
                      "optional": false
                    },
                    "longTermEffectivenessRecords": {
                      "name": "longTermEffectivenessRecords",
                      "type": "LongTermEffectivenessRecord[]",
                      "optional": false
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 323
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "ResolvedDuplicateData",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "ResolvedDuplicateData",
                  "body": "id: string;\n    type: DuplicateType;\n    originalSources: string[];\n    resolvedTo: string;\n    timestamp: string;\n    confidence: number;",
                  "properties": {
                    "id": {
                      "name": "id",
                      "type": "string",
                      "optional": false
                    },
                    "type": {
                      "name": "type",
                      "type": "DuplicateType",
                      "optional": false
                    },
                    "originalSources": {
                      "name": "originalSources",
                      "type": "string[]",
                      "optional": false
                    },
                    "resolvedTo": {
                      "name": "resolvedTo",
                      "type": "string",
                      "optional": false
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    },
                    "confidence": {
                      "name": "confidence",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 332
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "AccessOptimizationData",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "AccessOptimizationData",
                  "body": "optimizationType: OptimizationType;\n    before: PerformanceMetrics;\n    after: PerformanceMetrics;\n    improvement: number;\n    timestamp: string;",
                  "properties": {
                    "optimizationType": {
                      "name": "optimizationType",
                      "type": "OptimizationType",
                      "optional": false
                    },
                    "before": {
                      "name": "before",
                      "type": "PerformanceMetrics",
                      "optional": false
                    },
                    "after": {
                      "name": "after",
                      "type": "PerformanceMetrics",
                      "optional": false
                    },
                    "improvement": {
                      "name": "improvement",
                      "type": "number",
                      "optional": false
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 378
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "WorldKnowledgeDatabase",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "WorldKnowledgeDatabase",
                  "body": "knowledge: any;\n    categories: string[];\n    lastUpdate: string;",
                  "properties": {
                    "knowledge": {
                      "name": "knowledge",
                      "type": "any",
                      "optional": false
                    },
                    "categories": {
                      "name": "categories",
                      "type": "string[]",
                      "optional": false
                    },
                    "lastUpdate": {
                      "name": "lastUpdate",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 775
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "ForeshadowingDatabase",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\core\\types.ts",
                "definition": {
                  "name": "ForeshadowingDatabase",
                  "body": "foreshadowing: any[];\n    categories: string[];\n    lastUpdate: string;",
                  "properties": {
                    "foreshadowing": {
                      "name": "foreshadowing",
                      "type": "any[]",
                      "optional": false
                    },
                    "categories": {
                      "name": "categories",
                      "type": "string[]",
                      "optional": false
                    },
                    "lastUpdate": {
                      "name": "lastUpdate",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 788
                },
                "system": "memory",
                "module": "memory/core"
              }
            ]
          },
          {
            "typeName": "RelationshipMetadata",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\character-database-types.ts",
                "definition": {
                  "name": "RelationshipMetadata",
                  "body": "established: string;\r\n  lastUpdated: string;\r\n  significance: number; // 0-10\r\n  narrativeRole: string;\r\n  tags: string[];",
                  "properties": {
                    "established": {
                      "name": "established",
                      "type": "string",
                      "optional": false
                    },
                    "lastUpdated": {
                      "name": "lastUpdated",
                      "type": "string",
                      "optional": false
                    },
                    "significance": {
                      "name": "significance",
                      "type": "number",
                      "optional": false
                    },
                    "narrativeRole": {
                      "name": "narrativeRole",
                      "type": "string",
                      "optional": false
                    },
                    "tags": {
                      "name": "tags",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 243
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "FeedbackData",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\system-types.ts",
                "definition": {
                  "name": "FeedbackData",
                  "body": "feedbackId: string;\r\n    source: 'user' | 'system' | 'ai' | 'automated';\r\n    type: 'quality' | 'usability' | 'performance' | 'bug' | 'suggestion';\r\n    rating: number; // 0-10\r\n    comment: string;\r\n    context: Record<string, any>;\r\n    timestamp: string;\r\n    actionTaken?: string;",
                  "properties": {
                    "feedbackId": {
                      "name": "feedbackId",
                      "type": "string",
                      "optional": false
                    },
                    "source": {
                      "name": "source",
                      "type": "'user' | 'system' | 'ai' | 'automated'",
                      "optional": false
                    },
                    "type": {
                      "name": "type",
                      "type": "'quality' | 'usability' | 'performance' | 'bug' | 'suggestion'",
                      "optional": false
                    },
                    "rating": {
                      "name": "rating",
                      "type": "number",
                      "optional": false
                    },
                    "comment": {
                      "name": "comment",
                      "type": "string",
                      "optional": false
                    },
                    "context": {
                      "name": "context",
                      "type": "Record<string",
                      "optional": false
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    },
                    "actionTaken": {
                      "name": "actionTaken",
                      "type": "string",
                      "optional": true
                    }
                  },
                  "isGeneric": true,
                  "extendsOther": false,
                  "lineNumber": 344
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "TrainingData",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\system-types.ts",
                "definition": {
                  "name": "TrainingData",
                  "body": "dataId: string;\r\n    input: any;\r\n    expectedOutput: any;\r\n    actualOutput?: any;\r\n    quality: number; // 0-10\r\n    source: string;\r\n    timestamp: string;\r\n    tags: string[];",
                  "properties": {
                    "dataId": {
                      "name": "dataId",
                      "type": "string",
                      "optional": false
                    },
                    "input": {
                      "name": "input",
                      "type": "any",
                      "optional": false
                    },
                    "expectedOutput": {
                      "name": "expectedOutput",
                      "type": "any",
                      "optional": false
                    },
                    "actualOutput": {
                      "name": "actualOutput",
                      "type": "any",
                      "optional": true
                    },
                    "quality": {
                      "name": "quality",
                      "type": "number",
                      "optional": false
                    },
                    "source": {
                      "name": "source",
                      "type": "string",
                      "optional": false
                    },
                    "timestamp": {
                      "name": "timestamp",
                      "type": "string",
                      "optional": false
                    },
                    "tags": {
                      "name": "tags",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 527
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "DataRecoveryPlan",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\system-types.ts",
                "definition": {
                  "name": "DataRecoveryPlan",
                  "body": "planId: string;\r\n    description: string;\r\n    backupStrategy: string;\r\n    recoverySteps: string[];\r\n    timeRequired: string;\r\n    dataIntegrityChecks: string[];",
                  "properties": {
                    "planId": {
                      "name": "planId",
                      "type": "string",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    },
                    "backupStrategy": {
                      "name": "backupStrategy",
                      "type": "string",
                      "optional": false
                    },
                    "recoverySteps": {
                      "name": "recoverySteps",
                      "type": "string[]",
                      "optional": false
                    },
                    "timeRequired": {
                      "name": "timeRequired",
                      "type": "string",
                      "optional": false
                    },
                    "dataIntegrityChecks": {
                      "name": "dataIntegrityChecks",
                      "type": "string[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 845
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "FrequencyData",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\system-types.ts",
                "definition": {
                  "name": "FrequencyData",
                  "body": "occurrencesPerDay: number;\r\n    occurrencesPerWeek: number;\r\n    occurrencesPerMonth: number;\r\n    peakTimes: string[];\r\n    trends: TrendData[];",
                  "properties": {
                    "occurrencesPerDay": {
                      "name": "occurrencesPerDay",
                      "type": "number",
                      "optional": false
                    },
                    "occurrencesPerWeek": {
                      "name": "occurrencesPerWeek",
                      "type": "number",
                      "optional": false
                    },
                    "occurrencesPerMonth": {
                      "name": "occurrencesPerMonth",
                      "type": "number",
                      "optional": false
                    },
                    "peakTimes": {
                      "name": "peakTimes",
                      "type": "string[]",
                      "optional": false
                    },
                    "trends": {
                      "name": "trends",
                      "type": "TrendData[]",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 953
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "TrendData",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\system-types.ts",
                "definition": {
                  "name": "TrendData",
                  "body": "period: string;\r\n    direction: 'increasing' | 'decreasing' | 'stable' | 'volatile';\r\n    changeRate: number; // percentage\r\n    confidence: number; // 0-1",
                  "properties": {
                    "period": {
                      "name": "period",
                      "type": "string",
                      "optional": false
                    },
                    "direction": {
                      "name": "direction",
                      "type": "'increasing' | 'decreasing' | 'stable' | 'volatile'",
                      "optional": false
                    },
                    "changeRate": {
                      "name": "changeRate",
                      "type": "number",
                      "optional": false
                    },
                    "confidence": {
                      "name": "confidence",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 964
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "SeverityData",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\system-types.ts",
                "definition": {
                  "name": "SeverityData",
                  "body": "userImpact: number; // 0-10\r\n    systemImpact: number; // 0-10\r\n    businessImpact: number; // 0-10\r\n    recoveryDifficulty: number; // 0-10\r\n    overallSeverity: number; // 0-10",
                  "properties": {
                    "userImpact": {
                      "name": "userImpact",
                      "type": "number",
                      "optional": false
                    },
                    "systemImpact": {
                      "name": "systemImpact",
                      "type": "number",
                      "optional": false
                    },
                    "businessImpact": {
                      "name": "businessImpact",
                      "type": "number",
                      "optional": false
                    },
                    "recoveryDifficulty": {
                      "name": "recoveryDifficulty",
                      "type": "number",
                      "optional": false
                    },
                    "overallSeverity": {
                      "name": "overallSeverity",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 974
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "DataCollectionMethod",
            "system": "memory",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\memory\\long-term\\system-types.ts",
                "definition": {
                  "name": "DataCollectionMethod",
                  "body": "methodId: string;\r\n    name: string;\r\n    description: string;\r\n    type: 'automated' | 'manual' | 'survey' | 'observation';\r\n    frequency: string;\r\n    dataPoints: string[];\r\n    quality: number; // 0-10",
                  "properties": {
                    "methodId": {
                      "name": "methodId",
                      "type": "string",
                      "optional": false
                    },
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    },
                    "type": {
                      "name": "type",
                      "type": "'automated' | 'manual' | 'survey' | 'observation'",
                      "optional": false
                    },
                    "frequency": {
                      "name": "frequency",
                      "type": "string",
                      "optional": false
                    },
                    "dataPoints": {
                      "name": "dataPoints",
                      "type": "string[]",
                      "optional": false
                    },
                    "quality": {
                      "name": "quality",
                      "type": "number",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 1330
                },
                "system": "memory",
                "module": "memory/long-term"
              }
            ]
          },
          {
            "typeName": "LocationInfo",
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\bridge-types.ts",
                "definition": {
                  "name": "LocationInfo",
                  "body": "name: string;                     // 場所の名前\r\n  description: string;              // 場所の説明\r\n  atmosphere: string;               // 雰囲気\r\n  significance: string;             // 重要性",
                  "properties": {
                    "name": {
                      "name": "name",
                      "type": "string",
                      "optional": false
                    },
                    "description": {
                      "name": "description",
                      "type": "string",
                      "optional": false
                    },
                    "atmosphere": {
                      "name": "atmosphere",
                      "type": "string",
                      "optional": false
                    },
                    "significance": {
                      "name": "significance",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 42
                },
                "system": "plot",
                "module": "plot"
              }
            ]
          },
          {
            "typeName": "MetaInformation",
            "system": "plot",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\plot\\section\\types.ts",
                "definition": {
                  "name": "MetaInformation",
                  "body": "/** 作成日時 */\r\n  created: string;\r\n  \r\n  /** 最終更新日時 */\r\n  lastModified: string;\r\n  \r\n  /** バージョン */\r\n  version: number;\r\n  \r\n  /** 編集者メモ */\r\n  editorNotes: string;\r\n  \r\n  /** 生成に使用したプロンプト */\r\n  generationPrompts: string[];\r\n  \r\n  /** 全体ストーリーとの関係 */\r\n  relationToOverallStory: string;",
                  "properties": {
                    "created": {
                      "name": "created",
                      "type": "string",
                      "optional": false
                    },
                    "lastModified": {
                      "name": "lastModified",
                      "type": "string",
                      "optional": false
                    },
                    "version": {
                      "name": "version",
                      "type": "number",
                      "optional": false
                    },
                    "editorNotes": {
                      "name": "editorNotes",
                      "type": "string",
                      "optional": false
                    },
                    "generationPrompts": {
                      "name": "generationPrompts",
                      "type": "string[]",
                      "optional": false
                    },
                    "relationToOverallStory": {
                      "name": "relationToOverallStory",
                      "type": "string",
                      "optional": false
                    }
                  },
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 341
                },
                "system": "plot",
                "module": "plot/section"
              }
            ]
          },
          {
            "typeName": "FileMetadata",
            "system": "storage",
            "definitions": [
              {
                "type": "interface",
                "file": "lib\\storage\\types.ts",
                "definition": {
                  "name": "FileMetadata",
                  "body": "/**\r\n     * ファイルパス\r\n     * \r\n     * ストレージプロバイダーのベースディレクトリからの相対パスです。\r\n     * \r\n     * @type {string",
                  "properties": {},
                  "isGeneric": false,
                  "extendsOther": false,
                  "lineNumber": 42
                },
                "system": "storage",
                "module": "storage"
              }
            ]
          }
        ]
      }
    },
    "typeUsageAnalysis": {
      "mostUsedTypes": [
        {
          "name": "Character",
          "count": 7
        },
        {
          "name": "Chapter",
          "count": 6
        },
        {
          "name": "CharacterPsychology",
          "count": 5
        },
        {
          "name": "StyleAnalysis",
          "count": 4
        },
        {
          "name": "ExpressionPatterns",
          "count": 4
        },
        {
          "name": "GeminiClient",
          "count": 4
        },
        {
          "name": "CharacterState",
          "count": 4
        },
        {
          "name": "MemoryLevel",
          "count": 4
        },
        {
          "name": "MemoryManager",
          "count": 4
        },
        {
          "name": "logger",
          "count": 4
        },
        {
          "name": "ThemeResonanceAnalysis",
          "count": 3
        },
        {
          "name": "StyleGuidance",
          "count": 3
        },
        {
          "name": "ExpressionAlternatives",
          "count": 3
        },
        {
          "name": "ValidationResult",
          "count": 3
        },
        {
          "name": "storageProvider",
          "count": 3
        },
        {
          "name": "GenerationContext",
          "count": 2
        },
        {
          "name": "ChapterAnalysis",
          "count": 2
        },
        {
          "name": "QualityMetrics",
          "count": 2
        },
        {
          "name": "SubjectPatternOptimization",
          "count": 2
        },
        {
          "name": "StructureRecommendation",
          "count": 2
        }
      ],
      "systemCrossReferences": {
        "analysis_to_characters": [
          {
            "sourceFile": "lib\\analysis\\coordinators\\interfaces.ts",
            "targetSystem": "characters",
            "importedTypes": [
              "Character",
              "CharacterPsychology"
            ]
          },
          {
            "sourceFile": "lib\\analysis\\enhancement\\character\\interfaces.ts",
            "targetSystem": "characters",
            "importedTypes": [
              "Character",
              "CharacterPsychology"
            ]
          },
          {
            "sourceFile": "lib\\analysis\\services\\character\\interfaces.ts",
            "targetSystem": "characters",
            "importedTypes": [
              "Character",
              "CharacterPsychology",
              "ValidationResult",
              "RelationshipResponse",
              "RelationshipAnalysis"
            ]
          }
        ],
        "analysis_to_relative_import": [
          {
            "sourceFile": "lib\\analysis\\enhancement\\theme\\interfaces.ts",
            "targetSystem": "relative_import",
            "importedTypes": [
              "ThemeEnhancement",
              "LiteraryInspiration",
              "ThemeResonanceAnalysis",
              "SymbolicElement",
              "ForeshadowingOpportunity"
            ]
          },
          {
            "sourceFile": "lib\\analysis\\services\\theme\\interfaces.ts",
            "targetSystem": "relative_import",
            "importedTypes": [
              "ThemeResonanceAnalysis",
              "ThemeEnhancement",
              "ForeshadowingElement",
              "SymbolismAnalysis",
              "ThemePresenceVisualization",
              "ThemeElementResonance",
              "ThemeConsistencyAnalysis",
              "ThemeImageryMapping",
              "MotifTrackingResult"
            ]
          }
        ],
        "analysis_to_memory": [
          {
            "sourceFile": "lib\\analysis\\services\\narrative\\interfaces.ts",
            "targetSystem": "memory",
            "importedTypes": [
              "NarrativeState",
              "NarrativeStateInfo",
              "TurningPoint",
              "StateTransition",
              "StagnationDetectionResult",
              "EmotionalCurvePoint"
            ]
          }
        ],
        "analysis_to_generation": [
          {
            "sourceFile": "lib\\analysis\\services\\narrative\\interfaces.ts",
            "targetSystem": "generation",
            "importedTypes": [
              "GeminiClient"
            ]
          }
        ],
        "characters_to_memory": [
          {
            "sourceFile": "lib\\characters\\core\\types.ts",
            "targetSystem": "memory",
            "importedTypes": [
              "MemoryLevel",
              "MemoryRequestType"
            ]
          }
        ],
        "characters_to_relative_import": [
          {
            "sourceFile": "lib\\characters\\events\\event-types.ts",
            "targetSystem": "relative_import",
            "importedTypes": [
              "EVENT_TYPES"
            ]
          },
          {
            "sourceFile": "lib\\characters\\events\\event-types.ts",
            "targetSystem": "relative_import",
            "importedTypes": [
              "EventData",
              "Character",
              "CharacterData",
              "CharacterState",
              "Relationship",
              "CharacterPsychology",
              "TimingRecommendation",
              "ValidationResult",
              "CharacterParameter",
              "Skill",
              "GrowthPlan"
            ]
          }
        ],
        "foreshadowing_to_memory": [
          {
            "sourceFile": "lib\\foreshadowing\\index.ts",
            "targetSystem": "memory",
            "importedTypes": [
              "MemoryManager"
            ]
          },
          {
            "sourceFile": "lib\\foreshadowing\\index.ts",
            "targetSystem": "memory",
            "importedTypes": [
              "MemoryLevel"
            ]
          }
        ],
        "foreshadowing_to_utils": [
          {
            "sourceFile": "lib\\foreshadowing\\index.ts",
            "targetSystem": "utils",
            "importedTypes": [
              "logger"
            ]
          },
          {
            "sourceFile": "lib\\foreshadowing\\index.ts",
            "targetSystem": "utils",
            "importedTypes": [
              "logError"
            ]
          }
        ],
        "learning-journey_to_generation": [
          {
            "sourceFile": "lib\\learning-journey\\index.ts",
            "targetSystem": "generation",
            "importedTypes": [
              "GeminiClient"
            ]
          }
        ],
        "learning-journey_to_memory": [
          {
            "sourceFile": "lib\\learning-journey\\index.ts",
            "targetSystem": "memory",
            "importedTypes": [
              "MemoryManager"
            ]
          },
          {
            "sourceFile": "lib\\learning-journey\\index.ts",
            "targetSystem": "memory",
            "importedTypes": [
              "SystemOperationResult",
              "MemoryLevel",
              "MemorySystemStatus as UnifiedMemorySystemStatus",
              "SystemHealth"
            ]
          }
        ],
        "learning-journey_to_characters": [
          {
            "sourceFile": "lib\\learning-journey\\index.ts",
            "targetSystem": "characters",
            "importedTypes": [
              "CharacterManager"
            ]
          }
        ],
        "learning-journey_to_utils": [
          {
            "sourceFile": "lib\\learning-journey\\index.ts",
            "targetSystem": "utils",
            "importedTypes": [
              "logger"
            ]
          },
          {
            "sourceFile": "lib\\learning-journey\\index.ts",
            "targetSystem": "utils",
            "importedTypes": [
              "withTimeout"
            ]
          }
        ],
        "memory_to_generation": [
          {
            "sourceFile": "lib\\memory\\long-term\\types.ts",
            "targetSystem": "generation",
            "importedTypes": [
              "GeminiClient"
            ]
          }
        ],
        "parameters_to_relative_import": [
          {
            "sourceFile": "lib\\parameters\\types.ts",
            "targetSystem": "relative_import",
            "importedTypes": [
              "SystemParameters",
              "ParameterPreset"
            ]
          }
        ],
        "plot_to_memory": [
          {
            "sourceFile": "lib\\plot\\bridge-types.ts",
            "targetSystem": "memory",
            "importedTypes": [
              "NarrativeStateInfo",
              "EmotionalCurvePoint"
            ]
          },
          {
            "sourceFile": "lib\\plot\\index.ts",
            "targetSystem": "memory",
            "importedTypes": [
              "MemoryManager"
            ]
          },
          {
            "sourceFile": "lib\\plot\\section\\index.ts",
            "targetSystem": "memory",
            "importedTypes": [
              "MemoryManager",
              "MemoryManagerConfig"
            ]
          },
          {
            "sourceFile": "lib\\plot\\section\\index.ts",
            "targetSystem": "memory",
            "importedTypes": [
              "MemoryLevel",
              "SystemOperationResult",
              "MemorySystemStatus"
            ]
          }
        ],
        "plot_to_utils": [
          {
            "sourceFile": "lib\\plot\\section\\index.ts",
            "targetSystem": "utils",
            "importedTypes": [
              "logger"
            ]
          },
          {
            "sourceFile": "lib\\plot\\section\\index.ts",
            "targetSystem": "utils",
            "importedTypes": [
              "logError"
            ]
          }
        ],
        "plot_to_generation": [
          {
            "sourceFile": "lib\\plot\\section\\index.ts",
            "targetSystem": "generation",
            "importedTypes": [
              "GeminiClient"
            ]
          }
        ],
        "plot_to_learning-journey": [
          {
            "sourceFile": "lib\\plot\\section\\index.ts",
            "targetSystem": "learning-journey",
            "importedTypes": []
          },
          {
            "sourceFile": "lib\\plot\\section\\types.ts",
            "targetSystem": "learning-journey",
            "importedTypes": [
              "LearningStage"
            ]
          }
        ],
        "storage_to_relative_import": [
          {
            "sourceFile": "lib\\storage\\index.ts",
            "targetSystem": "relative_import",
            "importedTypes": [
              "logger"
            ]
          }
        ]
      },
      "unusedTypes": [
        "IGeminiAdapter",
        "BaseCoordinatorOptions",
        "BaseMetadata",
        "CacheableCoordinator",
        "AnalysisCoordinatorOptions",
        "IntegratedAnalysisResult",
        "AnalysisMetadata",
        "LiteraryTechnique",
        "IAnalysisCoordinator",
        "OptimizationCoordinatorOptions",
        "PrioritizedSuggestion",
        "ConflictResolution",
        "ImplementationStep",
        "SynergyOpportunity",
        "IntegratedRecommendations",
        "ThemeOptimization",
        "StyleOptimization",
        "CharacterOptimization",
        "TensionOptimization",
        "OptimizationMetadata",
        "IntegratedOptimizationResult",
        "OptimizationInput",
        "IOptimizationCoordinator",
        "DepthRecommendation",
        "CharacterDepthPrompt",
        "TensionPacingRecommendation",
        "TensionCurvePoint",
        "CoordinatorFactory",
        "IntegratedCoordinatorService",
        "CoordinatorHealthCheck",
        "CoordinatorType",
        "ProcessingStrategy",
        "CacheStrategy",
        "SubjectPatternOptimizationRequest",
        "IStyleOptimizationService",
        "ICacheStorage",
        "ThemeEnhancementRequest",
        "LiteraryTechniqueRequest",
        "ExpressionUsage",
        "CharacterArcRecommendation",
        "ConsistencyAnalysis",
        "MotivationEnhancement",
        "RelationshipDynamicRecommendation",
        "ContrastRecommendation",
        "ICharacterDepthService",
        "StyleOptimizationContext",
        "StyleOptimizationOptions",
        "StyleOptimizationResult",
        "BulkOptimizationRequest",
        "IStyleOptimizationServiceExtended",
        "TensionRecommendation",
        "PacingRecommendation",
        "StoryEvent",
        "NarrativeArcInfo",
        "ITensionOptimizationService",
        "IThemeEnhancementService",
        "IChapterAnalysisService",
        "ICharacterAnalysisService",
        "NarrativeAnalysisOptions",
        "INarrativeAnalysisService",
        "INarrativeAnalysisServiceFactory",
        "ISceneStructureOptimizer",
        "ILiteraryComparisonSystem",
        "AnalyzeReaderExperienceRequest",
        "AnalyzeReaderExperienceResponse",
        "GenerateImprovementsRequest",
        "GenerateImprovementsResponse",
        "GenerateSceneImprovementsRequest",
        "GenerateSceneImprovementsResponse",
        "GetGenreExpectationsRequest",
        "GetGenreExpectationsResponse",
        "AnalyzeForReaderTypeRequest",
        "AnalyzeForReaderTypeResponse",
        "ExtractScenesRequest",
        "ExtractScenesResponse",
        "ErrorResponse",
        "NovelAISystemAPI",
        "SubjectPatternAnalysis",
        "RepeatedSubjectPattern",
        "IStyleAnalysisService",
        "IThemeAnalysisService",
        "IThemeAnalysisServiceFactory",
        "IMemoryManager",
        "ICharacterRepository",
        "IRelationshipRepository",
        "IParameterRepository",
        "ISkillRepository",
        "IGrowthPlanRepository",
        "ICharacterService",
        "IDetectionService",
        "IEvolutionService",
        "IPsychologyService",
        "IRelationshipService",
        "IParameterService",
        "ISkillService",
        "ICharacterAnalyzer",
        "ITimingAnalyzer",
        "IRelationshipAnalyzer",
        "ICharacterGenerator",
        "ITemplateProvider",
        "IEventBus",
        "ICharacterManager",
        "PersonalityTraits",
        "Appearance",
        "Backstory",
        "Interaction",
        "DevelopmentMilestone",
        "CharacterHistory",
        "CharacterChangeInfo",
        "PromotionRecord",
        "CharacterMetadata",
        "GrowthPhase",
        "MentalGrowthState",
        "ImmutableCharacterData",
        "MutableCharacterData",
        "CharacterMetrics",
        "PromotionEvaluation",
        "RelationshipTension",
        "RelationshipNetworkAnalysis",
        "DevelopmentImpact",
        "TimingFactor",
        "TimingAnalysis",
        "TransformationArc",
        "GrowthEvent",
        "Milestone",
        "ChangeClassification",
        "CharacterChange",
        "NarrativeContext",
        "CharacterRecommendation",
        "ChapterCharacterRecommendations",
        "RelationshipAttitude",
        "PsychologyAnalysisResult",
        "BehaviorPredictionResult",
        "EmotionalSimulationResult",
        "PsychologyPerformanceMetrics",
        "ChapterEmotionAnalysis",
        "EmotionalProgression",
        "EmotionalArcDesign",
        "CharacterCreatedEventData",
        "CharacterUpdatedEventData",
        "RelationshipUpdatedEventData",
        "ParameterChangedEventData",
        "SkillAcquiredEventData",
        "CharacterIndexItem",
        "CharacterRole",
        "EmotionalState",
        "RelationshipType",
        "ParameterCategory",
        "StabilityTrend",
        "DevelopmentPathPhase",
        "ArcType",
        "ChangeType",
        "ChangeScope",
        "EventHandler",
        "CharacterCreatedEvent",
        "CharacterUpdatedEvent",
        "CharacterDeletedEvent",
        "CharacterPromotedEvent",
        "CharacterDemotedEvent",
        "CharacterStateChangedEvent",
        "CharacterAppearanceEvent",
        "RelationshipCreatedEvent",
        "RelationshipUpdatedEvent",
        "RelationshipDeletedEvent",
        "RelationshipStrengthenedEvent",
        "RelationshipWeakenedEvent",
        "ParameterChangedEvent",
        "SkillAcquiredEvent",
        "SkillLevelUpEvent",
        "SkillProficiencyChangedEvent",
        "DevelopmentStageChangedEvent",
        "GrowthPlanStartedEvent",
        "GrowthPlanCompletedEvent",
        "GrowthPhaseCompletedEvent",
        "MilestoneAchievedEvent",
        "CharacterAnalyzedEvent",
        "RelationshipAnalyzedEvent",
        "ConsistencyViolationEvent",
        "TimingRecommendationEvent",
        "EventTypeToPayloadMap",
        "EventHandlerRegistration",
        "TypedEventHandler",
        "LogLevel",
        "EventPriority",
        "EventCategory",
        "UnifiedForeshadowingSystemConfig",
        "UnifiedProcessingResult",
        "SystemDiagnosticsResult",
        "LearningJourneySystemConfig",
        "SystemStatistics",
        "ComponentStatus",
        "StandardComponentStatus",
        "LocalMemorySystemStatus",
        "OperationResult",
        "DiagnosticsResult",
        "StatusResult",
        "IMemoryLayer",
        "IIntegrationComponent",
        "CacheStatisticsData",
        "ICacheCoordinator",
        "MemoryQuery",
        "MemoryResult",
        "IDuplicateResolver",
        "AccessStatisticsData",
        "IAccessOptimizer",
        "QualityMetricsData",
        "ComprehensiveDiagnosticResult",
        "IQualityAssurance",
        "ShortTermMemoryConfig",
        "IShortTermMemory",
        "IMidTermMemory",
        "ILongTermMemory",
        "IUnifiedMemoryManager",
        "AccessStrategy",
        "UnifiedSearchResult",
        "MemoryHierarchyConfig",
        "UnifiedMemoryContext",
        "MemoryAccessRequest",
        "MemoryAccessResponse",
        "MemoryAccessFilters",
        "MemoryAccessOptions",
        "MemoryOperationResult",
        "ChapterContextData",
        "ProcessingBuffer",
        "NarrativeProgressionData",
        "AnalysisResultData",
        "CharacterEvolutionData",
        "SystemStatisticsData",
        "ConsolidatedSettingsData",
        "KnowledgeDatabaseData",
        "SystemKnowledgeBaseData",
        "CompletedRecordsData",
        "ResolvedDuplicateData",
        "AccessOptimizationData",
        "PerformanceMetrics",
        "MemoryLayerStatus",
        "SystemDiagnostics",
        "LayerDiagnostics",
        "IntegrationDiagnostics",
        "ChapterAnalysisResult",
        "StoryStateSnapshot",
        "ChapterProgressionRecord",
        "ArcProgressionRecord",
        "TensionHistoryRecord",
        "TurningPointRecord",
        "EmotionalArcDesignRecord",
        "TextAnalysisResultRecord",
        "DetectionResultRecord",
        "PreGenerationResultRecord",
        "PostGenerationResultRecord",
        "CharacterDevelopmentRecord",
        "CharacterChangeRecord",
        "RelationshipEvolutionRecord",
        "PsychologyEvolutionRecord",
        "PromptGenerationStatsRecord",
        "TemplateUsageStatsRecord",
        "TensionOptimizationStatsRecord",
        "ComponentPerformanceStats",
        "SystemIntegrationStatsRecord",
        "ChapterQualityRecord",
        "SystemQualityMetricsRecord",
        "DiagnosticHistoryRecord",
        "SystemHealthMetricsRecord",
        "WorldSettingsMasterRecord",
        "GenreSettingsMasterRecord",
        "TemplateMasterRecord",
        "SystemConfigMasterRecord",
        "CharacterMasterRecord",
        "WorldKnowledgeDatabase",
        "ConceptDefinitionRecord",
        "ForeshadowingDatabase",
        "SectionDefinitionRecord",
        "CompletedSectionRecord",
        "CompletedArcRecord",
        "LongTermEffectivenessRecord",
        "PromptGenerationPattern",
        "EffectiveTemplatePattern",
        "AnalysisPattern",
        "OptimizationStrategy",
        "ErrorPattern",
        "QualityImprovementStrategy",
        "ProcessingBufferType",
        "DuplicateType",
        "OptimizationType",
        "ExtendedCharacterState",
        "ConsolidationSource",
        "CharacterConflictResolution",
        "CharacterPersonality",
        "EmotionalRange",
        "SocialBehavior",
        "CharacterBackstory",
        "BackstoryEvent",
        "SignificantRelationship",
        "FormativeExperience",
        "CharacterRelationship",
        "RelationshipStatus",
        "RelationshipHistoryEntry",
        "RelationshipDynamics",
        "RelationshipMetadata",
        "DetailedEmotionalState",
        "EmotionalInfluence",
        "PhysicalCondition",
        "MentalCondition",
        "SocialStatus",
        "SkillRecord",
        "AbilityRecord",
        "KnowledgeRecord",
        "PossessionRecord",
        "ResourceRecord",
        "ObligationRecord",
        "GoalRecord",
        "MotivationRecord",
        "ConflictRecord",
        "CharacterAppearanceRecord",
        "CharacterStatistics",
        "FormattedCharacterData",
        "InjuryRecord",
        "DisabilityRecord",
        "AppearanceRecord",
        "MentalIssueRecord",
        "SocialRole",
        "PromptVariable",
        "PromptCondition",
        "VariableConstraint",
        "EffectivenessMetrics",
        "UsageStatistics",
        "SuccessCase",
        "FailureCase",
        "OptimizationRecord",
        "TemplateStructure",
        "TemplateSection",
        "TemplatePlaceholder",
        "PlaceholderTransformation",
        "BestPractice",
        "CommonMistake",
        "MistakeExample",
        "ApplicableContext",
        "TemplateVariation",
        "TemplateDifference",
        "TemplateEvolution",
        "TemplateChange",
        "FeedbackData",
        "ValidationRule",
        "Evidence",
        "AnalysisMethodology",
        "AnalysisStep",
        "ProcessingInstruction",
        "AnalysisParameter",
        "AccuracyMetrics",
        "ReliabilityMetrics",
        "InputRequirement",
        "OutputFormat",
        "PostProcessingStep",
        "TrainingData",
        "ImprovementRecord",
        "OptimizationApproach",
        "OptimizationPhase",
        "OptimizationTechnique",
        "TechniqueStep",
        "ResourceRequirement",
        "Benefit",
        "ImpactMeasurement",
        "OptimizationScenario",
        "Prerequisite",
        "OptimizationConstraint",
        "ImplementationGuide",
        "Checkpoint",
        "CheckpointAction",
        "TroubleshootingGuide",
        "DiagnosisStep",
        "Solution",
        "RollbackPlan",
        "RollbackTrigger",
        "RollbackStep",
        "DataRecoveryPlan",
        "MonitoringMetric",
        "MetricThreshold",
        "AlertThreshold",
        "ErrorSymptom",
        "RootCause",
        "FrequencyData",
        "TrendData",
        "SeverityData",
        "ErrorImpact",
        "DetectionMethod",
        "EarlyWarning",
        "ErrorSolution",
        "SolutionStep",
        "PreventionMeasure",
        "ErrorOccurrence",
        "ErrorResolution",
        "QualityApproach",
        "QualityPhase",
        "QualityMetric",
        "QualityTarget",
        "QualityTechnique",
        "QualityTool",
        "QualityImplementationPlan",
        "ImplementationPhase",
        "Activity",
        "ResourceAllocation",
        "Timeline",
        "Risk",
        "Dependency",
        "QualityMilestone",
        "MeasurementFramework",
        "DataCollectionMethod",
        "AnalysisMethod",
        "ReportingMethod",
        "MeasurementGovernance",
        "Role",
        "Responsibility",
        "Process",
        "ProcessStep",
        "Standard",
        "ContinuousImprovementPlan",
        "ReviewProcess",
        "ImprovementAction",
        "LearningCapture",
        "ManagerConstructorOptions",
        "UpdateOptions",
        "IManager",
        "CharacterProgress",
        "ChapterSummary",
        "ChapterMemory",
        "ForeshadowingEvaluation",
        "ForeshadowingMethodSuggestion",
        "ArcMemory",
        "CompressedMemory",
        "NarrativeMetrics",
        "BusinessEvent",
        "BusinessStoryEvent",
        "NarrativeMemoryStatus",
        "EmotionLearningSyncMetrics",
        "QueryOptions",
        "SearchOptions",
        "Memory",
        "SearchResult",
        "MemoryType",
        "BusinessGrowthPhase",
        "PersistentEventType",
        "BusinessEventType",
        "IParameterManager",
        "ChapterDirectives",
        "LocationInfo",
        "ThematicElement",
        "StoryGenerationContext",
        "BridgeAnalysisResult",
        "PromptElements",
        "PlotProgressInfo",
        "SectionSystemConfig",
        "SectionSystemDiagnostics",
        "SectionPlot",
        "SectionPlotParams",
        "SectionStructure",
        "LearningJourneyDesign",
        "EmotionalDesign",
        "CharacterDesign",
        "NarrativeStructureDesign",
        "MetaInformation",
        "CoherenceAnalysis",
        "ObjectiveProgress",
        "EmotionalArcProgress",
        "ImprovementSuggestion",
        "ChapterOutline",
        "EmotionalTone",
        "ConcretePlotPoint",
        "AbstractPlotGuideline",
        "MediumPlot",
        "HierarchicalConsistencyResult",
        "PlotStrategy",
        "WorldSettings",
        "ThemeSettings",
        "FormattedWorldAndTheme",
        "PlotMode"
      ],
      "importPatterns": {
        "directImports": 0,
        "relativeImports": 23,
        "absoluteImports": 52,
        "typeOnlyImports": 37
      }
    },
    "dataModelAnalysis": {
      "dataEntities": {
        "NarrativeArcInfo": {
          "system": "analysis",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\analysis\\enhancement\\tension\\interfaces.ts",
              "definition": {
                "name": "NarrativeArcInfo",
                "body": "/** 現在のアーク番号 */\r\n  currentArcNumber: number;\r\n  /** アークの開始章 */\r\n  arcStartChapter: number;\r\n  /** アークの終了章（予測） */\r\n  arcEndChapter: number;\r\n  /** アーク内での位置 (0-1) */\r\n  positionInArc: number;\r\n  /** アークのテーマ */\r\n  arcTheme?: string;",
                "properties": {
                  "currentArcNumber": {
                    "name": "currentArcNumber",
                    "type": "number",
                    "optional": false
                  },
                  "arcStartChapter": {
                    "name": "arcStartChapter",
                    "type": "number",
                    "optional": false
                  },
                  "arcEndChapter": {
                    "name": "arcEndChapter",
                    "type": "number",
                    "optional": false
                  },
                  "positionInArc": {
                    "name": "positionInArc",
                    "type": "number",
                    "optional": false
                  },
                  "arcTheme": {
                    "name": "arcTheme",
                    "type": "string",
                    "optional": true
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 67
              },
              "system": "analysis",
              "module": "analysis/enhancement/tension"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "CharacterState": {
          "system": "plot",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\plot\\bridge-types.ts",
              "definition": {
                "name": "CharacterState",
                "body": "name: string;                     // キャラクター名\r\n  currentState: string;             // 現在の状態\r\n  role: string;                     // 章での役割\r\n  goals?: string[];                 // 目標\r\n  conflicts?: string[];             // 葛藤\r\n  relationshipFocus?: string[];     // 焦点を当てる関係性\r\n  development?: string;             // 発展方向",
                "properties": {
                  "name": {
                    "name": "name",
                    "type": "string",
                    "optional": false
                  },
                  "currentState": {
                    "name": "currentState",
                    "type": "string",
                    "optional": false
                  },
                  "role": {
                    "name": "role",
                    "type": "string",
                    "optional": false
                  },
                  "goals": {
                    "name": "goals",
                    "type": "string[]",
                    "optional": true
                  },
                  "conflicts": {
                    "name": "conflicts",
                    "type": "string[]",
                    "optional": true
                  },
                  "relationshipFocus": {
                    "name": "relationshipFocus",
                    "type": "string[]",
                    "optional": true
                  },
                  "development": {
                    "name": "development",
                    "type": "string",
                    "optional": true
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 28
              },
              "system": "plot",
              "module": "plot"
            }
          ],
          "category": "CHARACTER_DATA",
          "storageRelevance": "MEDIUM"
        },
        "CharacterChangeInfo": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\types.ts",
              "definition": {
                "name": "CharacterChangeInfo",
                "body": "attribute: string;\r\n    previousValue: any;\r\n    currentValue: any;\r\n    classification?: {\r\n        type: string;\r\n        scope: string;\r\n        confidence: number;\r\n        explanation: string;\r\n        narrativeSignificance?: number;",
                "properties": {
                  "attribute": {
                    "name": "attribute",
                    "type": "string",
                    "optional": false
                  },
                  "previousValue": {
                    "name": "previousValue",
                    "type": "any",
                    "optional": false
                  },
                  "currentValue": {
                    "name": "currentValue",
                    "type": "any",
                    "optional": false
                  },
                  "classification": {
                    "name": "classification",
                    "type": "{",
                    "optional": true
                  },
                  "type": {
                    "name": "type",
                    "type": "string",
                    "optional": false
                  },
                  "scope": {
                    "name": "scope",
                    "type": "string",
                    "optional": false
                  },
                  "confidence": {
                    "name": "confidence",
                    "type": "number",
                    "optional": false
                  },
                  "explanation": {
                    "name": "explanation",
                    "type": "string",
                    "optional": false
                  },
                  "narrativeSignificance": {
                    "name": "narrativeSignificance",
                    "type": "number",
                    "optional": true
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 216
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "CHARACTER_DATA",
          "storageRelevance": "MEDIUM"
        },
        "PromotionRecord": {
          "system": "characters",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\characters\\core\\types.ts",
              "definition": {
                "name": "PromotionRecord",
                "body": "fromType: CharacterType;\r\n    toType: CharacterType;\r\n    timestamp: Date;\r\n    reason?: string;",
                "properties": {
                  "fromType": {
                    "name": "fromType",
                    "type": "CharacterType",
                    "optional": false
                  },
                  "toType": {
                    "name": "toType",
                    "type": "CharacterType",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "Date",
                    "optional": false
                  },
                  "reason": {
                    "name": "reason",
                    "type": "string",
                    "optional": true
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 258
              },
              "system": "characters",
              "module": "characters/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "MentalGrowthState": {
          "system": "characters",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\characters\\core\\types.ts",
              "definition": {
                "name": "MentalGrowthState",
                "body": "traumas: Array<{\r\n        id: string;\r\n        description: string;\r\n        resolved: boolean;\r\n        resolutionChapter?: number;",
                "properties": {
                  "traumas": {
                    "name": "traumas",
                    "type": "Array<{",
                    "optional": false
                  },
                  "id": {
                    "name": "id",
                    "type": "string",
                    "optional": false
                  },
                  "description": {
                    "name": "description",
                    "type": "string",
                    "optional": false
                  },
                  "resolved": {
                    "name": "resolved",
                    "type": "boolean",
                    "optional": false
                  },
                  "resolutionChapter": {
                    "name": "resolutionChapter",
                    "type": "number",
                    "optional": true
                  }
                },
                "isGeneric": true,
                "extendsOther": false,
                "lineNumber": 365
              },
              "system": "characters",
              "module": "characters/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "ImmutableCharacterData": {
          "system": "characters",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\characters\\core\\types.ts",
              "definition": {
                "name": "ImmutableCharacterData",
                "body": "name: string;\r\n    shortNames: string[];\r\n    description: string;\r\n    appearance?: Appearance;\r\n    backstory?: Backstory;",
                "properties": {
                  "name": {
                    "name": "name",
                    "type": "string",
                    "optional": false
                  },
                  "shortNames": {
                    "name": "shortNames",
                    "type": "string[]",
                    "optional": false
                  },
                  "description": {
                    "name": "description",
                    "type": "string",
                    "optional": false
                  },
                  "appearance": {
                    "name": "appearance",
                    "type": "Appearance",
                    "optional": true
                  },
                  "backstory": {
                    "name": "backstory",
                    "type": "Backstory",
                    "optional": true
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 462
              },
              "system": "characters",
              "module": "characters/core"
            }
          ],
          "category": "CHARACTER_DATA",
          "storageRelevance": "MEDIUM"
        },
        "MutableCharacterData": {
          "system": "characters",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\characters\\core\\types.ts",
              "definition": {
                "name": "MutableCharacterData",
                "body": "type: CharacterType;\r\n    role?: CharacterRole;\r\n    personality?: PersonalityTraits;\r\n    nicknames?: Record<string, string[]>;\r\n    goals?: string[];\r\n    relationships?: Relationship[];\r\n    state: Partial<CharacterState>;\r\n    currentState?: string;\r\n    emotionalState?: string;",
                "properties": {
                  "type": {
                    "name": "type",
                    "type": "CharacterType",
                    "optional": false
                  },
                  "role": {
                    "name": "role",
                    "type": "CharacterRole",
                    "optional": true
                  },
                  "personality": {
                    "name": "personality",
                    "type": "PersonalityTraits",
                    "optional": true
                  },
                  "nicknames": {
                    "name": "nicknames",
                    "type": "Record<string",
                    "optional": true
                  },
                  "goals": {
                    "name": "goals",
                    "type": "string[]",
                    "optional": true
                  },
                  "relationships": {
                    "name": "relationships",
                    "type": "Relationship[]",
                    "optional": true
                  },
                  "state": {
                    "name": "state",
                    "type": "Partial<CharacterState>",
                    "optional": false
                  },
                  "currentState": {
                    "name": "currentState",
                    "type": "string",
                    "optional": true
                  },
                  "emotionalState": {
                    "name": "emotionalState",
                    "type": "string",
                    "optional": true
                  }
                },
                "isGeneric": true,
                "extendsOther": false,
                "lineNumber": 473
              },
              "system": "characters",
              "module": "characters/core"
            }
          ],
          "category": "CHARACTER_DATA",
          "storageRelevance": "MEDIUM"
        },
        "CharacterData": {
          "system": "characters",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\characters\\core\\types.ts",
              "definition": {
                "name": "CharacterData",
                "body": "metadata?: {\r\n        tags?: string[];",
                "properties": {
                  "metadata": {
                    "name": "metadata",
                    "type": "{",
                    "optional": true
                  },
                  "tags": {
                    "name": "tags",
                    "type": "string[]",
                    "optional": true
                  }
                },
                "isGeneric": false,
                "extendsOther": true,
                "lineNumber": 489
              },
              "system": "characters",
              "module": "characters/core"
            }
          ],
          "category": "CHARACTER_DATA",
          "storageRelevance": "MEDIUM"
        },
        "NarrativeState": {
          "system": "memory",
          "definitions": [
            {
              "type": "enum",
              "file": "lib\\memory\\long-term\\types.ts",
              "definition": {
                "name": "NarrativeState",
                "body": "// 共通状態\r\n    INTRODUCTION = 'INTRODUCTION',\r\n    DAILY_LIFE = 'DAILY_LIFE',\r\n    JOURNEY = 'JOURNEY',\r\n    INVESTIGATION = 'INVESTIGATION',\r\n    PRE_BATTLE = 'PRE_BATTLE',\r\n    BATTLE = 'BATTLE',\r\n    POST_BATTLE = 'POST_BATTLE',\r\n    TRAINING = 'TRAINING',\r\n    REVELATION = 'REVELATION',\r\n    DILEMMA = 'DILEMMA',\r\n    RESOLUTION = 'RESOLUTION',\r\n    CLOSURE = 'CLOSURE',\r\n\r\n    // ビジネスジャンル特有の状態\r\n    BUSINESS_MEETING = 'BUSINESS_MEETING',\r\n    PRODUCT_DEVELOPMENT = 'PRODUCT_DEVELOPMENT',\r\n    PITCH_PRESENTATION = 'PITCH_PRESENTATION',\r\n    MARKET_RESEARCH = 'MARKET_RESEARCH',\r\n    TEAM_BUILDING = 'TEAM_BUILDING',\r\n    FUNDING_ROUND = 'FUNDING_ROUND',\r\n    BUSINESS_PIVOT = 'BUSINESS_PIVOT',\r\n    CUSTOMER_DISCOVERY = 'CUSTOMER_DISCOVERY',\r\n    PRODUCT_LAUNCH = 'PRODUCT_LAUNCH',\r\n    \r\n    // 追加のビジネス特化状態\r\n    MARKET_COMPETITION = 'MARKET_COMPETITION',\r\n    STRATEGIC_PREPARATION = 'STRATEGIC_PREPARATION',\r\n    PERFORMANCE_REVIEW = 'PERFORMANCE_REVIEW',\r\n    BUSINESS_DEVELOPMENT = 'BUSINESS_DEVELOPMENT',\r\n    SKILL_DEVELOPMENT = 'SKILL_DEVELOPMENT',\r\n    FINANCIAL_CHALLENGE = 'FINANCIAL_CHALLENGE',\r\n    EXPANSION_PHASE = 'EXPANSION_PHASE',\r\n    ACQUISITION_NEGOTIATION = 'ACQUISITION_NEGOTIATION',\r\n    CULTURE_BUILDING = 'CULTURE_BUILDING',\r\n    CRISIS_MANAGEMENT = 'CRISIS_MANAGEMENT',\r\n    MARKET_ENTRY = 'MARKET_ENTRY',\r\n    REGULATORY_COMPLIANCE = 'REGULATORY_COMPLIANCE',\r\n    PARTNERSHIP_DEVELOPMENT = 'PARTNERSHIP_DEVELOPMENT',\r\n    MARKET_SCALING = 'MARKET_SCALING',",
                "values": [
                  {
                    "name": "// 共通状態\r\n    INTRODUCTION",
                    "value": "'INTRODUCTION'"
                  },
                  {
                    "name": "DAILY_LIFE",
                    "value": "'DAILY_LIFE'"
                  },
                  {
                    "name": "JOURNEY",
                    "value": "'JOURNEY'"
                  },
                  {
                    "name": "INVESTIGATION",
                    "value": "'INVESTIGATION'"
                  },
                  {
                    "name": "PRE_BATTLE",
                    "value": "'PRE_BATTLE'"
                  },
                  {
                    "name": "BATTLE",
                    "value": "'BATTLE'"
                  },
                  {
                    "name": "POST_BATTLE",
                    "value": "'POST_BATTLE'"
                  },
                  {
                    "name": "TRAINING",
                    "value": "'TRAINING'"
                  },
                  {
                    "name": "REVELATION",
                    "value": "'REVELATION'"
                  },
                  {
                    "name": "DILEMMA",
                    "value": "'DILEMMA'"
                  },
                  {
                    "name": "RESOLUTION",
                    "value": "'RESOLUTION'"
                  },
                  {
                    "name": "CLOSURE",
                    "value": "'CLOSURE'"
                  },
                  {
                    "name": "// ビジネスジャンル特有の状態\r\n    BUSINESS_MEETING",
                    "value": "'BUSINESS_MEETING'"
                  },
                  {
                    "name": "PRODUCT_DEVELOPMENT",
                    "value": "'PRODUCT_DEVELOPMENT'"
                  },
                  {
                    "name": "PITCH_PRESENTATION",
                    "value": "'PITCH_PRESENTATION'"
                  },
                  {
                    "name": "MARKET_RESEARCH",
                    "value": "'MARKET_RESEARCH'"
                  },
                  {
                    "name": "TEAM_BUILDING",
                    "value": "'TEAM_BUILDING'"
                  },
                  {
                    "name": "FUNDING_ROUND",
                    "value": "'FUNDING_ROUND'"
                  },
                  {
                    "name": "BUSINESS_PIVOT",
                    "value": "'BUSINESS_PIVOT'"
                  },
                  {
                    "name": "CUSTOMER_DISCOVERY",
                    "value": "'CUSTOMER_DISCOVERY'"
                  },
                  {
                    "name": "PRODUCT_LAUNCH",
                    "value": "'PRODUCT_LAUNCH'"
                  },
                  {
                    "name": "// 追加のビジネス特化状態\r\n    MARKET_COMPETITION",
                    "value": "'MARKET_COMPETITION'"
                  },
                  {
                    "name": "STRATEGIC_PREPARATION",
                    "value": "'STRATEGIC_PREPARATION'"
                  },
                  {
                    "name": "PERFORMANCE_REVIEW",
                    "value": "'PERFORMANCE_REVIEW'"
                  },
                  {
                    "name": "BUSINESS_DEVELOPMENT",
                    "value": "'BUSINESS_DEVELOPMENT'"
                  },
                  {
                    "name": "SKILL_DEVELOPMENT",
                    "value": "'SKILL_DEVELOPMENT'"
                  },
                  {
                    "name": "FINANCIAL_CHALLENGE",
                    "value": "'FINANCIAL_CHALLENGE'"
                  },
                  {
                    "name": "EXPANSION_PHASE",
                    "value": "'EXPANSION_PHASE'"
                  },
                  {
                    "name": "ACQUISITION_NEGOTIATION",
                    "value": "'ACQUISITION_NEGOTIATION'"
                  },
                  {
                    "name": "CULTURE_BUILDING",
                    "value": "'CULTURE_BUILDING'"
                  },
                  {
                    "name": "CRISIS_MANAGEMENT",
                    "value": "'CRISIS_MANAGEMENT'"
                  },
                  {
                    "name": "MARKET_ENTRY",
                    "value": "'MARKET_ENTRY'"
                  },
                  {
                    "name": "REGULATORY_COMPLIANCE",
                    "value": "'REGULATORY_COMPLIANCE'"
                  },
                  {
                    "name": "PARTNERSHIP_DEVELOPMENT",
                    "value": "'PARTNERSHIP_DEVELOPMENT'"
                  },
                  {
                    "name": "MARKET_SCALING",
                    "value": "'MARKET_SCALING'"
                  }
                ],
                "lineNumber": 18
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "EventData": {
          "system": "characters",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\characters\\core\\types.ts",
              "definition": {
                "name": "EventData",
                "body": "/** イベント発生タイムスタンプ */\r\n    timestamp: Date;\r\n    /** イベント固有データ */\r\n    [key: string]: any;",
                "properties": {
                  "timestamp": {
                    "name": "timestamp",
                    "type": "Date",
                    "optional": false
                  },
                  "key": {
                    "name": "key",
                    "type": "string]: any",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 1194
              },
              "system": "characters",
              "module": "characters/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "CharacterCreatedEventData": {
          "system": "characters",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\characters\\core\\types.ts",
              "definition": {
                "name": "CharacterCreatedEventData",
                "body": "character: Character;",
                "properties": {
                  "character": {
                    "name": "character",
                    "type": "Character",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": true,
                "lineNumber": 1204
              },
              "system": "characters",
              "module": "characters/core"
            }
          ],
          "category": "CHARACTER_DATA",
          "storageRelevance": "MEDIUM"
        },
        "CharacterUpdatedEventData": {
          "system": "characters",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\characters\\core\\types.ts",
              "definition": {
                "name": "CharacterUpdatedEventData",
                "body": "characterId: string;\r\n    changes: Partial<CharacterData>;\r\n    previousState?: Partial<Character>;",
                "properties": {
                  "characterId": {
                    "name": "characterId",
                    "type": "string",
                    "optional": false
                  },
                  "changes": {
                    "name": "changes",
                    "type": "Partial<CharacterData>",
                    "optional": false
                  },
                  "previousState": {
                    "name": "previousState",
                    "type": "Partial<Character>",
                    "optional": true
                  }
                },
                "isGeneric": true,
                "extendsOther": true,
                "lineNumber": 1211
              },
              "system": "characters",
              "module": "characters/core"
            }
          ],
          "category": "CHARACTER_DATA",
          "storageRelevance": "MEDIUM"
        },
        "RelationshipUpdatedEventData": {
          "system": "characters",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\characters\\core\\types.ts",
              "definition": {
                "name": "RelationshipUpdatedEventData",
                "body": "char1Id: string;\r\n    char2Id: string;\r\n    relationship: Relationship;\r\n    previousRelationship?: Relationship;",
                "properties": {
                  "char1Id": {
                    "name": "char1Id",
                    "type": "string",
                    "optional": false
                  },
                  "char2Id": {
                    "name": "char2Id",
                    "type": "string",
                    "optional": false
                  },
                  "relationship": {
                    "name": "relationship",
                    "type": "Relationship",
                    "optional": false
                  },
                  "previousRelationship": {
                    "name": "previousRelationship",
                    "type": "Relationship",
                    "optional": true
                  }
                },
                "isGeneric": false,
                "extendsOther": true,
                "lineNumber": 1220
              },
              "system": "characters",
              "module": "characters/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "ParameterChangedEventData": {
          "system": "characters",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\characters\\core\\types.ts",
              "definition": {
                "name": "ParameterChangedEventData",
                "body": "characterId: string;\r\n    parameterId: string;\r\n    oldValue: number;\r\n    newValue: number;",
                "properties": {
                  "characterId": {
                    "name": "characterId",
                    "type": "string",
                    "optional": false
                  },
                  "parameterId": {
                    "name": "parameterId",
                    "type": "string",
                    "optional": false
                  },
                  "oldValue": {
                    "name": "oldValue",
                    "type": "number",
                    "optional": false
                  },
                  "newValue": {
                    "name": "newValue",
                    "type": "number",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": true,
                "lineNumber": 1230
              },
              "system": "characters",
              "module": "characters/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "SkillAcquiredEventData": {
          "system": "characters",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\characters\\core\\types.ts",
              "definition": {
                "name": "SkillAcquiredEventData",
                "body": "characterId: string;\r\n    skillId: string;\r\n    level: number;",
                "properties": {
                  "characterId": {
                    "name": "characterId",
                    "type": "string",
                    "optional": false
                  },
                  "skillId": {
                    "name": "skillId",
                    "type": "string",
                    "optional": false
                  },
                  "level": {
                    "name": "level",
                    "type": "number",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": true,
                "lineNumber": 1240
              },
              "system": "characters",
              "module": "characters/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "EmotionalState": {
          "system": "characters",
          "definitions": [
            {
              "type": "type",
              "file": "lib\\characters\\core\\types.ts",
              "definition": {
                "name": "EmotionalState",
                "definition": "'HAPPY' | 'SAD' | 'ANGRY' | 'FEARFUL' | 'NEUTRAL' | 'EXCITED' | 'CONFUSED' | 'DETERMINED' | 'CONCERNED'",
                "isUnion": true,
                "isIntersection": false,
                "isGeneric": false,
                "lineNumber": 23
              },
              "system": "characters",
              "module": "characters/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "CharacterStateChangedEvent": {
          "system": "characters",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\characters\\events\\event-types.ts",
              "definition": {
                "name": "CharacterStateChangedEvent",
                "body": "/** キャラクターID */\r\n    characterId: string;\r\n    /** 更新された状態 */\r\n    state: Partial<CharacterState>;\r\n    /** 更新前の状態 */\r\n    previousState?: Partial<CharacterState>;\r\n    /** 変更種別 */\r\n    changeType: string;",
                "properties": {
                  "characterId": {
                    "name": "characterId",
                    "type": "string",
                    "optional": false
                  },
                  "state": {
                    "name": "state",
                    "type": "Partial<CharacterState>",
                    "optional": false
                  },
                  "previousState": {
                    "name": "previousState",
                    "type": "Partial<CharacterState>",
                    "optional": true
                  },
                  "changeType": {
                    "name": "changeType",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": true,
                "extendsOther": true,
                "lineNumber": 125
              },
              "system": "characters",
              "module": "characters/events"
            }
          ],
          "category": "CHARACTER_DATA",
          "storageRelevance": "MEDIUM"
        },
        "CacheStatisticsData": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\interfaces.ts",
              "definition": {
                "name": "CacheStatisticsData",
                "body": "// ✅ export を削除\r\n  hitRatio: number;\r\n  missRatio: number;\r\n  totalRequests: number;\r\n  cacheSize: number;\r\n  lastOptimization: string;\r\n  hitRate?: number; // 互換性のため\r\n  avgAccessTime?: number; // 互換性のため\r\n  memoryUsage?: {\r\n    shortTerm: number;\r\n    midTerm: number;\r\n    longTerm: number;",
                "properties": {
                  "hitRatio": {
                    "name": "hitRatio",
                    "type": "number",
                    "optional": false
                  },
                  "missRatio": {
                    "name": "missRatio",
                    "type": "number",
                    "optional": false
                  },
                  "totalRequests": {
                    "name": "totalRequests",
                    "type": "number",
                    "optional": false
                  },
                  "cacheSize": {
                    "name": "cacheSize",
                    "type": "number",
                    "optional": false
                  },
                  "lastOptimization": {
                    "name": "lastOptimization",
                    "type": "string",
                    "optional": false
                  },
                  "hitRate": {
                    "name": "hitRate",
                    "type": "number",
                    "optional": true
                  },
                  "avgAccessTime": {
                    "name": "avgAccessTime",
                    "type": "number",
                    "optional": true
                  },
                  "memoryUsage": {
                    "name": "memoryUsage",
                    "type": "{",
                    "optional": true
                  },
                  "shortTerm": {
                    "name": "shortTerm",
                    "type": "number",
                    "optional": false
                  },
                  "midTerm": {
                    "name": "midTerm",
                    "type": "number",
                    "optional": false
                  },
                  "longTerm": {
                    "name": "longTerm",
                    "type": "number",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 87
              },
              "system": "memory",
              "module": "memory/core"
            },
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "CacheStatisticsData",
                "body": "// UnifiedAccessAPI 用プロパティ\n    hitRatio: number;\n    missRatio: number;\n    totalRequests: number;\n    cacheSize: number;\n    lastOptimization: string;\n    evictionCount: number;\n    \n    // CacheCoordinator 用プロパティ（互換性のため）\n    totalEntries?: number;\n    hitRate?: number;\n    avgAccessTime?: number;\n    memoryUsage?: {\n        shortTerm: number;\n        midTerm: number;\n        longTerm: number;",
                "properties": {
                  "hitRatio": {
                    "name": "hitRatio",
                    "type": "number",
                    "optional": false
                  },
                  "missRatio": {
                    "name": "missRatio",
                    "type": "number",
                    "optional": false
                  },
                  "totalRequests": {
                    "name": "totalRequests",
                    "type": "number",
                    "optional": false
                  },
                  "cacheSize": {
                    "name": "cacheSize",
                    "type": "number",
                    "optional": false
                  },
                  "lastOptimization": {
                    "name": "lastOptimization",
                    "type": "string",
                    "optional": false
                  },
                  "evictionCount": {
                    "name": "evictionCount",
                    "type": "number",
                    "optional": false
                  },
                  "totalEntries": {
                    "name": "totalEntries",
                    "type": "number",
                    "optional": true
                  },
                  "hitRate": {
                    "name": "hitRate",
                    "type": "number",
                    "optional": true
                  },
                  "avgAccessTime": {
                    "name": "avgAccessTime",
                    "type": "number",
                    "optional": true
                  },
                  "memoryUsage": {
                    "name": "memoryUsage",
                    "type": "{",
                    "optional": true
                  },
                  "shortTerm": {
                    "name": "shortTerm",
                    "type": "number",
                    "optional": false
                  },
                  "midTerm": {
                    "name": "midTerm",
                    "type": "number",
                    "optional": false
                  },
                  "longTerm": {
                    "name": "longTerm",
                    "type": "number",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 352
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "HIGH"
        },
        "AccessStatisticsData": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\interfaces.ts",
              "definition": {
                "name": "AccessStatisticsData",
                "body": "// ✅ export を削除\r\n  totalAccesses: number;\r\n  averageAccessTime: number;\r\n  cacheHitRate: number;\r\n  consistencyScore: number;\r\n  optimizationEffectiveness: number;\r\n  performanceGain: number;\r\n  strategyDistribution: Record<string, number>;\r\n  levelDistribution: Record<string, number>;",
                "properties": {
                  "totalAccesses": {
                    "name": "totalAccesses",
                    "type": "number",
                    "optional": false
                  },
                  "averageAccessTime": {
                    "name": "averageAccessTime",
                    "type": "number",
                    "optional": false
                  },
                  "cacheHitRate": {
                    "name": "cacheHitRate",
                    "type": "number",
                    "optional": false
                  },
                  "consistencyScore": {
                    "name": "consistencyScore",
                    "type": "number",
                    "optional": false
                  },
                  "optimizationEffectiveness": {
                    "name": "optimizationEffectiveness",
                    "type": "number",
                    "optional": false
                  },
                  "performanceGain": {
                    "name": "performanceGain",
                    "type": "number",
                    "optional": false
                  },
                  "strategyDistribution": {
                    "name": "strategyDistribution",
                    "type": "Record<string",
                    "optional": false
                  },
                  "levelDistribution": {
                    "name": "levelDistribution",
                    "type": "Record<string",
                    "optional": false
                  }
                },
                "isGeneric": true,
                "extendsOther": false,
                "lineNumber": 176
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "HIGH"
        },
        "QualityMetricsData": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\interfaces.ts",
              "definition": {
                "name": "QualityMetricsData",
                "body": "// ✅ export を削除\r\n  dataIntegrity: {\r\n    score: number;\r\n    violations: number;\r\n    lastValidation: number;\r\n    criticalIssues: string[];",
                "properties": {
                  "dataIntegrity": {
                    "name": "dataIntegrity",
                    "type": "{",
                    "optional": false
                  },
                  "score": {
                    "name": "score",
                    "type": "number",
                    "optional": false
                  },
                  "violations": {
                    "name": "violations",
                    "type": "number",
                    "optional": false
                  },
                  "lastValidation": {
                    "name": "lastValidation",
                    "type": "number",
                    "optional": false
                  },
                  "criticalIssues": {
                    "name": "criticalIssues",
                    "type": "string[]",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 203
              },
              "system": "memory",
              "module": "memory/core"
            },
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "QualityMetricsData",
                "body": "chapterQualityHistory: ChapterQualityRecord[];\n    systemQualityMetrics: SystemQualityMetricsRecord[];\n    diagnosticHistory: DiagnosticHistoryRecord[];\n    systemHealthMetrics: SystemHealthMetricsRecord[];",
                "properties": {
                  "chapterQualityHistory": {
                    "name": "chapterQualityHistory",
                    "type": "ChapterQualityRecord[]",
                    "optional": false
                  },
                  "systemQualityMetrics": {
                    "name": "systemQualityMetrics",
                    "type": "SystemQualityMetricsRecord[]",
                    "optional": false
                  },
                  "diagnosticHistory": {
                    "name": "diagnosticHistory",
                    "type": "DiagnosticHistoryRecord[]",
                    "optional": false
                  },
                  "systemHealthMetrics": {
                    "name": "systemHealthMetrics",
                    "type": "SystemHealthMetricsRecord[]",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 280
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "ChapterContextData": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "ChapterContextData",
                "body": "chapter: Chapter;\n    characterStates: Map<string, CharacterState>;\n    keyPhrases: string[];\n    analysisResults: ChapterAnalysisResult[];\n    timestamp: string;",
                "properties": {
                  "chapter": {
                    "name": "chapter",
                    "type": "Chapter",
                    "optional": false
                  },
                  "characterStates": {
                    "name": "characterStates",
                    "type": "Map<string",
                    "optional": false
                  },
                  "keyPhrases": {
                    "name": "keyPhrases",
                    "type": "string[]",
                    "optional": false
                  },
                  "analysisResults": {
                    "name": "analysisResults",
                    "type": "ChapterAnalysisResult[]",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": true,
                "extendsOther": false,
                "lineNumber": 207
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "MEMORY_DATA",
          "storageRelevance": "MEDIUM"
        },
        "NarrativeProgressionData": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "NarrativeProgressionData",
                "body": "storyState: StoryStateSnapshot[];\n    chapterProgression: Map<number, ChapterProgressionRecord>;\n    arcProgression: Map<number, ArcProgressionRecord>;\n    tensionHistory: Map<number, TensionHistoryRecord>;\n    turningPointsHistory: TurningPointRecord[];",
                "properties": {
                  "storyState": {
                    "name": "storyState",
                    "type": "StoryStateSnapshot[]",
                    "optional": false
                  },
                  "chapterProgression": {
                    "name": "chapterProgression",
                    "type": "Map<number",
                    "optional": false
                  },
                  "arcProgression": {
                    "name": "arcProgression",
                    "type": "Map<number",
                    "optional": false
                  },
                  "tensionHistory": {
                    "name": "tensionHistory",
                    "type": "Map<number",
                    "optional": false
                  },
                  "turningPointsHistory": {
                    "name": "turningPointsHistory",
                    "type": "TurningPointRecord[]",
                    "optional": false
                  }
                },
                "isGeneric": true,
                "extendsOther": false,
                "lineNumber": 237
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "AnalysisResultData": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "AnalysisResultData",
                "body": "emotionalArcDesigns: Map<number, EmotionalArcDesignRecord>;\n    textAnalysisResults: Map<number, TextAnalysisResultRecord>;\n    detectionResults: Map<number, DetectionResultRecord>;\n    preGenerationResults: Map<number, PreGenerationResultRecord>;\n    postGenerationResults: Map<number, PostGenerationResultRecord>;",
                "properties": {
                  "emotionalArcDesigns": {
                    "name": "emotionalArcDesigns",
                    "type": "Map<number",
                    "optional": false
                  },
                  "textAnalysisResults": {
                    "name": "textAnalysisResults",
                    "type": "Map<number",
                    "optional": false
                  },
                  "detectionResults": {
                    "name": "detectionResults",
                    "type": "Map<number",
                    "optional": false
                  },
                  "preGenerationResults": {
                    "name": "preGenerationResults",
                    "type": "Map<number",
                    "optional": false
                  },
                  "postGenerationResults": {
                    "name": "postGenerationResults",
                    "type": "Map<number",
                    "optional": false
                  }
                },
                "isGeneric": true,
                "extendsOther": false,
                "lineNumber": 248
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "ANALYSIS_DATA",
          "storageRelevance": "MEDIUM"
        },
        "CharacterEvolutionData": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "CharacterEvolutionData",
                "body": "developmentHistory: Map<string, CharacterDevelopmentRecord[]>;\n    changeHistory: Map<string, CharacterChangeRecord[]>;\n    relationshipEvolution: Map<string, RelationshipEvolutionRecord[]>;\n    psychologyEvolution: Map<string, PsychologyEvolutionRecord[]>;",
                "properties": {
                  "developmentHistory": {
                    "name": "developmentHistory",
                    "type": "Map<string",
                    "optional": false
                  },
                  "changeHistory": {
                    "name": "changeHistory",
                    "type": "Map<string",
                    "optional": false
                  },
                  "relationshipEvolution": {
                    "name": "relationshipEvolution",
                    "type": "Map<string",
                    "optional": false
                  },
                  "psychologyEvolution": {
                    "name": "psychologyEvolution",
                    "type": "Map<string",
                    "optional": false
                  }
                },
                "isGeneric": true,
                "extendsOther": false,
                "lineNumber": 259
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "CHARACTER_DATA",
          "storageRelevance": "MEDIUM"
        },
        "SystemStatisticsData": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "SystemStatisticsData",
                "body": "promptGenerationStats: PromptGenerationStatsRecord[];\n    templateUsageStats: TemplateUsageStatsRecord[];\n    tensionOptimizationStats: TensionOptimizationStatsRecord[];\n    componentPerformanceStats: Map<string, ComponentPerformanceStats>;\n    systemIntegrationStats: SystemIntegrationStatsRecord[];",
                "properties": {
                  "promptGenerationStats": {
                    "name": "promptGenerationStats",
                    "type": "PromptGenerationStatsRecord[]",
                    "optional": false
                  },
                  "templateUsageStats": {
                    "name": "templateUsageStats",
                    "type": "TemplateUsageStatsRecord[]",
                    "optional": false
                  },
                  "tensionOptimizationStats": {
                    "name": "tensionOptimizationStats",
                    "type": "TensionOptimizationStatsRecord[]",
                    "optional": false
                  },
                  "componentPerformanceStats": {
                    "name": "componentPerformanceStats",
                    "type": "Map<string",
                    "optional": false
                  },
                  "systemIntegrationStats": {
                    "name": "systemIntegrationStats",
                    "type": "SystemIntegrationStatsRecord[]",
                    "optional": false
                  }
                },
                "isGeneric": true,
                "extendsOther": false,
                "lineNumber": 269
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "ConsolidatedSettingsData": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "ConsolidatedSettingsData",
                "body": "worldSettingsMaster: WorldSettingsMasterRecord;\n    genreSettingsMaster: GenreSettingsMasterRecord;\n    templateMaster: TemplateMasterRecord;\n    systemConfigMaster: SystemConfigMasterRecord;",
                "properties": {
                  "worldSettingsMaster": {
                    "name": "worldSettingsMaster",
                    "type": "WorldSettingsMasterRecord",
                    "optional": false
                  },
                  "genreSettingsMaster": {
                    "name": "genreSettingsMaster",
                    "type": "GenreSettingsMasterRecord",
                    "optional": false
                  },
                  "templateMaster": {
                    "name": "templateMaster",
                    "type": "TemplateMasterRecord",
                    "optional": false
                  },
                  "systemConfigMaster": {
                    "name": "systemConfigMaster",
                    "type": "SystemConfigMasterRecord",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 290
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "CONFIGURATION_DATA",
          "storageRelevance": "MEDIUM"
        },
        "KnowledgeDatabaseData": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "KnowledgeDatabaseData",
                "body": "characters: Map<string, CharacterMasterRecord>;\n    worldKnowledge: WorldKnowledgeDatabase;\n    conceptDefinitions: Map<string, ConceptDefinitionRecord>;\n    foreshadowingDatabase: ForeshadowingDatabase;\n    sectionDefinitions: Map<string, SectionDefinitionRecord>;",
                "properties": {
                  "characters": {
                    "name": "characters",
                    "type": "Map<string",
                    "optional": false
                  },
                  "worldKnowledge": {
                    "name": "worldKnowledge",
                    "type": "WorldKnowledgeDatabase",
                    "optional": false
                  },
                  "conceptDefinitions": {
                    "name": "conceptDefinitions",
                    "type": "Map<string",
                    "optional": false
                  },
                  "foreshadowingDatabase": {
                    "name": "foreshadowingDatabase",
                    "type": "ForeshadowingDatabase",
                    "optional": false
                  },
                  "sectionDefinitions": {
                    "name": "sectionDefinitions",
                    "type": "Map<string",
                    "optional": false
                  }
                },
                "isGeneric": true,
                "extendsOther": false,
                "lineNumber": 300
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "SystemKnowledgeBaseData": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "SystemKnowledgeBaseData",
                "body": "promptGenerationPatterns: PromptGenerationPattern[];\n    effectiveTemplatePatterns: EffectiveTemplatePattern[];\n    analysisPatterns: AnalysisPattern[];\n    optimizationStrategies: OptimizationStrategy[];\n    errorPatterns: ErrorPattern[];\n    qualityImprovementStrategies: QualityImprovementStrategy[];",
                "properties": {
                  "promptGenerationPatterns": {
                    "name": "promptGenerationPatterns",
                    "type": "PromptGenerationPattern[]",
                    "optional": false
                  },
                  "effectiveTemplatePatterns": {
                    "name": "effectiveTemplatePatterns",
                    "type": "EffectiveTemplatePattern[]",
                    "optional": false
                  },
                  "analysisPatterns": {
                    "name": "analysisPatterns",
                    "type": "AnalysisPattern[]",
                    "optional": false
                  },
                  "optimizationStrategies": {
                    "name": "optimizationStrategies",
                    "type": "OptimizationStrategy[]",
                    "optional": false
                  },
                  "errorPatterns": {
                    "name": "errorPatterns",
                    "type": "ErrorPattern[]",
                    "optional": false
                  },
                  "qualityImprovementStrategies": {
                    "name": "qualityImprovementStrategies",
                    "type": "QualityImprovementStrategy[]",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 311
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "CompletedRecordsData": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "CompletedRecordsData",
                "body": "completedSections: Map<string, CompletedSectionRecord>;\n    completedArcs: Map<number, CompletedArcRecord>;\n    longTermEffectivenessRecords: LongTermEffectivenessRecord[];",
                "properties": {
                  "completedSections": {
                    "name": "completedSections",
                    "type": "Map<string",
                    "optional": false
                  },
                  "completedArcs": {
                    "name": "completedArcs",
                    "type": "Map<number",
                    "optional": false
                  },
                  "longTermEffectivenessRecords": {
                    "name": "longTermEffectivenessRecords",
                    "type": "LongTermEffectivenessRecord[]",
                    "optional": false
                  }
                },
                "isGeneric": true,
                "extendsOther": false,
                "lineNumber": 323
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "ResolvedDuplicateData": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "ResolvedDuplicateData",
                "body": "id: string;\n    type: DuplicateType;\n    originalSources: string[];\n    resolvedTo: string;\n    timestamp: string;\n    confidence: number;",
                "properties": {
                  "id": {
                    "name": "id",
                    "type": "string",
                    "optional": false
                  },
                  "type": {
                    "name": "type",
                    "type": "DuplicateType",
                    "optional": false
                  },
                  "originalSources": {
                    "name": "originalSources",
                    "type": "string[]",
                    "optional": false
                  },
                  "resolvedTo": {
                    "name": "resolvedTo",
                    "type": "string",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  },
                  "confidence": {
                    "name": "confidence",
                    "type": "number",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 332
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "AccessOptimizationData": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "AccessOptimizationData",
                "body": "optimizationType: OptimizationType;\n    before: PerformanceMetrics;\n    after: PerformanceMetrics;\n    improvement: number;\n    timestamp: string;",
                "properties": {
                  "optimizationType": {
                    "name": "optimizationType",
                    "type": "OptimizationType",
                    "optional": false
                  },
                  "before": {
                    "name": "before",
                    "type": "PerformanceMetrics",
                    "optional": false
                  },
                  "after": {
                    "name": "after",
                    "type": "PerformanceMetrics",
                    "optional": false
                  },
                  "improvement": {
                    "name": "improvement",
                    "type": "number",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 378
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "StoryStateSnapshot": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "StoryStateSnapshot",
                "body": "chapterNumber: number;\n    state: string;\n    timestamp: string;\n    metadata: any;",
                "properties": {
                  "chapterNumber": {
                    "name": "chapterNumber",
                    "type": "number",
                    "optional": false
                  },
                  "state": {
                    "name": "state",
                    "type": "string",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  },
                  "metadata": {
                    "name": "metadata",
                    "type": "any",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 514
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "PLOT_DATA",
          "storageRelevance": "MEDIUM"
        },
        "ChapterProgressionRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "ChapterProgressionRecord",
                "body": "chapterNumber: number;\n    progressScore: number;\n    milestones: string[];\n    timestamp: string;",
                "properties": {
                  "chapterNumber": {
                    "name": "chapterNumber",
                    "type": "number",
                    "optional": false
                  },
                  "progressScore": {
                    "name": "progressScore",
                    "type": "number",
                    "optional": false
                  },
                  "milestones": {
                    "name": "milestones",
                    "type": "string[]",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 524
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "MEMORY_DATA",
          "storageRelevance": "MEDIUM"
        },
        "ArcProgressionRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "ArcProgressionRecord",
                "body": "arcNumber: number;\n    completionRatio: number;\n    keyEvents: string[];\n    timestamp: string;",
                "properties": {
                  "arcNumber": {
                    "name": "arcNumber",
                    "type": "number",
                    "optional": false
                  },
                  "completionRatio": {
                    "name": "completionRatio",
                    "type": "number",
                    "optional": false
                  },
                  "keyEvents": {
                    "name": "keyEvents",
                    "type": "string[]",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 534
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "TensionHistoryRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "TensionHistoryRecord",
                "body": "chapterNumber: number;\n    tensionLevel: number;\n    factors: string[];\n    timestamp: string;",
                "properties": {
                  "chapterNumber": {
                    "name": "chapterNumber",
                    "type": "number",
                    "optional": false
                  },
                  "tensionLevel": {
                    "name": "tensionLevel",
                    "type": "number",
                    "optional": false
                  },
                  "factors": {
                    "name": "factors",
                    "type": "string[]",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 544
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "PLOT_DATA",
          "storageRelevance": "MEDIUM"
        },
        "TurningPointRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "TurningPointRecord",
                "body": "chapterNumber: number;\n    description: string;\n    significance: number;\n    timestamp: string;",
                "properties": {
                  "chapterNumber": {
                    "name": "chapterNumber",
                    "type": "number",
                    "optional": false
                  },
                  "description": {
                    "name": "description",
                    "type": "string",
                    "optional": false
                  },
                  "significance": {
                    "name": "significance",
                    "type": "number",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 554
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "EmotionalArcDesignRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "EmotionalArcDesignRecord",
                "body": "chapterNumber: number;\n    design: any;\n    effectiveness: number;\n    timestamp: string;",
                "properties": {
                  "chapterNumber": {
                    "name": "chapterNumber",
                    "type": "number",
                    "optional": false
                  },
                  "design": {
                    "name": "design",
                    "type": "any",
                    "optional": false
                  },
                  "effectiveness": {
                    "name": "effectiveness",
                    "type": "number",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 564
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "TextAnalysisResultRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "TextAnalysisResultRecord",
                "body": "chapterNumber: number;\n    analysisResults: any;\n    processingTime: number;\n    timestamp: string;",
                "properties": {
                  "chapterNumber": {
                    "name": "chapterNumber",
                    "type": "number",
                    "optional": false
                  },
                  "analysisResults": {
                    "name": "analysisResults",
                    "type": "any",
                    "optional": false
                  },
                  "processingTime": {
                    "name": "processingTime",
                    "type": "number",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 574
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "ANALYSIS_DATA",
          "storageRelevance": "MEDIUM"
        },
        "DetectionResultRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "DetectionResultRecord",
                "body": "chapterNumber: number;\n    detectedItems: any[];\n    accuracy: number;\n    timestamp: string;",
                "properties": {
                  "chapterNumber": {
                    "name": "chapterNumber",
                    "type": "number",
                    "optional": false
                  },
                  "detectedItems": {
                    "name": "detectedItems",
                    "type": "any[]",
                    "optional": false
                  },
                  "accuracy": {
                    "name": "accuracy",
                    "type": "number",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 584
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "PreGenerationResultRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "PreGenerationResultRecord",
                "body": "chapterNumber: number;\n    preparationData: any;\n    qualityScore: number;\n    timestamp: string;",
                "properties": {
                  "chapterNumber": {
                    "name": "chapterNumber",
                    "type": "number",
                    "optional": false
                  },
                  "preparationData": {
                    "name": "preparationData",
                    "type": "any",
                    "optional": false
                  },
                  "qualityScore": {
                    "name": "qualityScore",
                    "type": "number",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 594
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "PostGenerationResultRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "PostGenerationResultRecord",
                "body": "chapterNumber: number;\n    refinementData: any;\n    improvementScore: number;\n    timestamp: string;",
                "properties": {
                  "chapterNumber": {
                    "name": "chapterNumber",
                    "type": "number",
                    "optional": false
                  },
                  "refinementData": {
                    "name": "refinementData",
                    "type": "any",
                    "optional": false
                  },
                  "improvementScore": {
                    "name": "improvementScore",
                    "type": "number",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 604
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "CharacterDevelopmentRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "CharacterDevelopmentRecord",
                "body": "characterId: string;\n    developmentPhase: string;\n    changes: any[];\n    timestamp: string;",
                "properties": {
                  "characterId": {
                    "name": "characterId",
                    "type": "string",
                    "optional": false
                  },
                  "developmentPhase": {
                    "name": "developmentPhase",
                    "type": "string",
                    "optional": false
                  },
                  "changes": {
                    "name": "changes",
                    "type": "any[]",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 614
              },
              "system": "memory",
              "module": "memory/core"
            },
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\character-database-types.ts",
              "definition": {
                "name": "CharacterDevelopmentRecord",
                "body": "recordId: string;\r\n  chapterNumber: number;\r\n  developmentType: 'personality' | 'skill' | 'relationship' | 'goal' | 'backstory';\r\n  description: string;\r\n  significance: number; // 0-10\r\n  impact: string[];\r\n  timestamp: string;\r\n  relatedEvents: string[];",
                "properties": {
                  "recordId": {
                    "name": "recordId",
                    "type": "string",
                    "optional": false
                  },
                  "chapterNumber": {
                    "name": "chapterNumber",
                    "type": "number",
                    "optional": false
                  },
                  "developmentType": {
                    "name": "developmentType",
                    "type": "'personality' | 'skill' | 'relationship' | 'goal' | 'backstory'",
                    "optional": false
                  },
                  "description": {
                    "name": "description",
                    "type": "string",
                    "optional": false
                  },
                  "significance": {
                    "name": "significance",
                    "type": "number",
                    "optional": false
                  },
                  "impact": {
                    "name": "impact",
                    "type": "string[]",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  },
                  "relatedEvents": {
                    "name": "relatedEvents",
                    "type": "string[]",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 439
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "CHARACTER_DATA",
          "storageRelevance": "MEDIUM"
        },
        "CharacterChangeRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "CharacterChangeRecord",
                "body": "characterId: string;\n    changeType: string;\n    oldValue: any;\n    newValue: any;\n    timestamp: string;",
                "properties": {
                  "characterId": {
                    "name": "characterId",
                    "type": "string",
                    "optional": false
                  },
                  "changeType": {
                    "name": "changeType",
                    "type": "string",
                    "optional": false
                  },
                  "oldValue": {
                    "name": "oldValue",
                    "type": "any",
                    "optional": false
                  },
                  "newValue": {
                    "name": "newValue",
                    "type": "any",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 624
              },
              "system": "memory",
              "module": "memory/core"
            },
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\character-database-types.ts",
              "definition": {
                "name": "CharacterChangeRecord",
                "body": "recordId: string;\r\n  chapterNumber: number;\r\n  changeType: 'state' | 'personality' | 'relationship' | 'backstory' | 'metadata';\r\n  fieldChanged: string;\r\n  previousValue: any;\r\n  newValue: any;\r\n  reason: string;\r\n  source: string;\r\n  timestamp: string;\r\n  significance: number; // 0-10",
                "properties": {
                  "recordId": {
                    "name": "recordId",
                    "type": "string",
                    "optional": false
                  },
                  "chapterNumber": {
                    "name": "chapterNumber",
                    "type": "number",
                    "optional": false
                  },
                  "changeType": {
                    "name": "changeType",
                    "type": "'state' | 'personality' | 'relationship' | 'backstory' | 'metadata'",
                    "optional": false
                  },
                  "fieldChanged": {
                    "name": "fieldChanged",
                    "type": "string",
                    "optional": false
                  },
                  "previousValue": {
                    "name": "previousValue",
                    "type": "any",
                    "optional": false
                  },
                  "newValue": {
                    "name": "newValue",
                    "type": "any",
                    "optional": false
                  },
                  "reason": {
                    "name": "reason",
                    "type": "string",
                    "optional": false
                  },
                  "source": {
                    "name": "source",
                    "type": "string",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  },
                  "significance": {
                    "name": "significance",
                    "type": "number",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 467
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "CHARACTER_DATA",
          "storageRelevance": "MEDIUM"
        },
        "RelationshipEvolutionRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "RelationshipEvolutionRecord",
                "body": "characterIds: string[];\n    relationshipType: string;\n    evolutionStage: string;\n    timestamp: string;",
                "properties": {
                  "characterIds": {
                    "name": "characterIds",
                    "type": "string[]",
                    "optional": false
                  },
                  "relationshipType": {
                    "name": "relationshipType",
                    "type": "string",
                    "optional": false
                  },
                  "evolutionStage": {
                    "name": "evolutionStage",
                    "type": "string",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 635
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "PsychologyEvolutionRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "PsychologyEvolutionRecord",
                "body": "characterId: string;\n    psychologyAspect: string;\n    evolution: any;\n    timestamp: string;",
                "properties": {
                  "characterId": {
                    "name": "characterId",
                    "type": "string",
                    "optional": false
                  },
                  "psychologyAspect": {
                    "name": "psychologyAspect",
                    "type": "string",
                    "optional": false
                  },
                  "evolution": {
                    "name": "evolution",
                    "type": "any",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 645
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "PromptGenerationStatsRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "PromptGenerationStatsRecord",
                "body": "generationType: string;\n    successRate: number;\n    averageTime: number;\n    timestamp: string;",
                "properties": {
                  "generationType": {
                    "name": "generationType",
                    "type": "string",
                    "optional": false
                  },
                  "successRate": {
                    "name": "successRate",
                    "type": "number",
                    "optional": false
                  },
                  "averageTime": {
                    "name": "averageTime",
                    "type": "number",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 655
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "TemplateUsageStatsRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "TemplateUsageStatsRecord",
                "body": "templateId: string;\n    usageCount: number;\n    effectiveness: number;\n    timestamp: string;",
                "properties": {
                  "templateId": {
                    "name": "templateId",
                    "type": "string",
                    "optional": false
                  },
                  "usageCount": {
                    "name": "usageCount",
                    "type": "number",
                    "optional": false
                  },
                  "effectiveness": {
                    "name": "effectiveness",
                    "type": "number",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 665
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "TensionOptimizationStatsRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "TensionOptimizationStatsRecord",
                "body": "optimizationType: string;\n    successRate: number;\n    improvement: number;\n    timestamp: string;",
                "properties": {
                  "optimizationType": {
                    "name": "optimizationType",
                    "type": "string",
                    "optional": false
                  },
                  "successRate": {
                    "name": "successRate",
                    "type": "number",
                    "optional": false
                  },
                  "improvement": {
                    "name": "improvement",
                    "type": "number",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 675
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "SystemIntegrationStatsRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "SystemIntegrationStatsRecord",
                "body": "integrationType: string;\n    efficiency: number;\n    dataVolume: number;\n    timestamp: string;",
                "properties": {
                  "integrationType": {
                    "name": "integrationType",
                    "type": "string",
                    "optional": false
                  },
                  "efficiency": {
                    "name": "efficiency",
                    "type": "number",
                    "optional": false
                  },
                  "dataVolume": {
                    "name": "dataVolume",
                    "type": "number",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 696
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "ChapterQualityRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "ChapterQualityRecord",
                "body": "chapterNumber: number;\n    qualityScore: number;\n    qualityFactors: any;\n    timestamp: string;",
                "properties": {
                  "chapterNumber": {
                    "name": "chapterNumber",
                    "type": "number",
                    "optional": false
                  },
                  "qualityScore": {
                    "name": "qualityScore",
                    "type": "number",
                    "optional": false
                  },
                  "qualityFactors": {
                    "name": "qualityFactors",
                    "type": "any",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 706
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "MEMORY_DATA",
          "storageRelevance": "MEDIUM"
        },
        "SystemQualityMetricsRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "SystemQualityMetricsRecord",
                "body": "metricType: string;\n    value: number;\n    trend: string;\n    timestamp: string;",
                "properties": {
                  "metricType": {
                    "name": "metricType",
                    "type": "string",
                    "optional": false
                  },
                  "value": {
                    "name": "value",
                    "type": "number",
                    "optional": false
                  },
                  "trend": {
                    "name": "trend",
                    "type": "string",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 716
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "DiagnosticHistoryRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "DiagnosticHistoryRecord",
                "body": "diagnosticType: string;\n    results: any;\n    issues: string[];\n    timestamp: string;",
                "properties": {
                  "diagnosticType": {
                    "name": "diagnosticType",
                    "type": "string",
                    "optional": false
                  },
                  "results": {
                    "name": "results",
                    "type": "any",
                    "optional": false
                  },
                  "issues": {
                    "name": "issues",
                    "type": "string[]",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 726
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "PLOT_DATA",
          "storageRelevance": "MEDIUM"
        },
        "SystemHealthMetricsRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "SystemHealthMetricsRecord",
                "body": "healthScore: number;\n    healthFactors: any;\n    recommendations: string[];\n    timestamp: string;",
                "properties": {
                  "healthScore": {
                    "name": "healthScore",
                    "type": "number",
                    "optional": false
                  },
                  "healthFactors": {
                    "name": "healthFactors",
                    "type": "any",
                    "optional": false
                  },
                  "recommendations": {
                    "name": "recommendations",
                    "type": "string[]",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 736
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "WorldSettingsMasterRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "WorldSettingsMasterRecord",
                "body": "consolidatedSettings: any;\n    sources: string[];\n    lastUpdate: string;",
                "properties": {
                  "consolidatedSettings": {
                    "name": "consolidatedSettings",
                    "type": "any",
                    "optional": false
                  },
                  "sources": {
                    "name": "sources",
                    "type": "string[]",
                    "optional": false
                  },
                  "lastUpdate": {
                    "name": "lastUpdate",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 745
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "CONFIGURATION_DATA",
          "storageRelevance": "MEDIUM"
        },
        "GenreSettingsMasterRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "GenreSettingsMasterRecord",
                "body": "consolidatedGenre: any;\n    sources: string[];\n    lastUpdate: string;",
                "properties": {
                  "consolidatedGenre": {
                    "name": "consolidatedGenre",
                    "type": "any",
                    "optional": false
                  },
                  "sources": {
                    "name": "sources",
                    "type": "string[]",
                    "optional": false
                  },
                  "lastUpdate": {
                    "name": "lastUpdate",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 751
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "CONFIGURATION_DATA",
          "storageRelevance": "MEDIUM"
        },
        "TemplateMasterRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "TemplateMasterRecord",
                "body": "consolidatedTemplates: any;\n    sources: string[];\n    lastUpdate: string;",
                "properties": {
                  "consolidatedTemplates": {
                    "name": "consolidatedTemplates",
                    "type": "any",
                    "optional": false
                  },
                  "sources": {
                    "name": "sources",
                    "type": "string[]",
                    "optional": false
                  },
                  "lastUpdate": {
                    "name": "lastUpdate",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 757
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "SystemConfigMasterRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "SystemConfigMasterRecord",
                "body": "consolidatedConfig: any;\n    sources: string[];\n    lastUpdate: string;",
                "properties": {
                  "consolidatedConfig": {
                    "name": "consolidatedConfig",
                    "type": "any",
                    "optional": false
                  },
                  "sources": {
                    "name": "sources",
                    "type": "string[]",
                    "optional": false
                  },
                  "lastUpdate": {
                    "name": "lastUpdate",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 763
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "CONFIGURATION_DATA",
          "storageRelevance": "MEDIUM"
        },
        "CharacterMasterRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "CharacterMasterRecord",
                "body": "consolidatedCharacter: any;\n    sources: string[];\n    lastUpdate: string;",
                "properties": {
                  "consolidatedCharacter": {
                    "name": "consolidatedCharacter",
                    "type": "any",
                    "optional": false
                  },
                  "sources": {
                    "name": "sources",
                    "type": "string[]",
                    "optional": false
                  },
                  "lastUpdate": {
                    "name": "lastUpdate",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 769
              },
              "system": "memory",
              "module": "memory/core"
            },
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\character-database-types.ts",
              "definition": {
                "name": "CharacterMasterRecord",
                "body": "// 基本情報（統合済み）\r\n  id: string;\r\n  name: string;\r\n  type: CharacterType;\r\n  description: string;\r\n  \r\n  // 統合メタデータ\r\n  masterVersion: string;\r\n  consolidatedFrom: ConsolidationSource[];\r\n  lastConsolidated: string;\r\n  conflictResolutions: CharacterConflictResolution[];\r\n  \r\n  // 拡張情報\r\n  personality: CharacterPersonality;\r\n  backstory: CharacterBackstory;\r\n  relationships: CharacterRelationship[];\r\n  state: ExtendedCharacterState;\r\n  \r\n  // 履歴情報\r\n  developmentHistory: CharacterDevelopmentRecord[];\r\n  appearanceHistory: CharacterAppearanceRecord[];\r\n  changeHistory: CharacterChangeRecord[];\r\n  \r\n  // 統計情報\r\n  statistics: CharacterStatistics;\r\n  \r\n  // フォーマット済みデータ\r\n  formattedData: FormattedCharacterData;\r\n  \r\n  // メタデータ\r\n  metadata: CharacterMetadata;",
                "properties": {
                  "id": {
                    "name": "id",
                    "type": "string",
                    "optional": false
                  },
                  "name": {
                    "name": "name",
                    "type": "string",
                    "optional": false
                  },
                  "type": {
                    "name": "type",
                    "type": "CharacterType",
                    "optional": false
                  },
                  "description": {
                    "name": "description",
                    "type": "string",
                    "optional": false
                  },
                  "masterVersion": {
                    "name": "masterVersion",
                    "type": "string",
                    "optional": false
                  },
                  "consolidatedFrom": {
                    "name": "consolidatedFrom",
                    "type": "ConsolidationSource[]",
                    "optional": false
                  },
                  "lastConsolidated": {
                    "name": "lastConsolidated",
                    "type": "string",
                    "optional": false
                  },
                  "conflictResolutions": {
                    "name": "conflictResolutions",
                    "type": "CharacterConflictResolution[]",
                    "optional": false
                  },
                  "personality": {
                    "name": "personality",
                    "type": "CharacterPersonality",
                    "optional": false
                  },
                  "backstory": {
                    "name": "backstory",
                    "type": "CharacterBackstory",
                    "optional": false
                  },
                  "relationships": {
                    "name": "relationships",
                    "type": "CharacterRelationship[]",
                    "optional": false
                  },
                  "state": {
                    "name": "state",
                    "type": "ExtendedCharacterState",
                    "optional": false
                  },
                  "developmentHistory": {
                    "name": "developmentHistory",
                    "type": "CharacterDevelopmentRecord[]",
                    "optional": false
                  },
                  "appearanceHistory": {
                    "name": "appearanceHistory",
                    "type": "CharacterAppearanceRecord[]",
                    "optional": false
                  },
                  "changeHistory": {
                    "name": "changeHistory",
                    "type": "CharacterChangeRecord[]",
                    "optional": false
                  },
                  "statistics": {
                    "name": "statistics",
                    "type": "CharacterStatistics",
                    "optional": false
                  },
                  "formattedData": {
                    "name": "formattedData",
                    "type": "FormattedCharacterData",
                    "optional": false
                  },
                  "metadata": {
                    "name": "metadata",
                    "type": "CharacterMetadata",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 10
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "CHARACTER_DATA",
          "storageRelevance": "MEDIUM"
        },
        "WorldKnowledgeDatabase": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "WorldKnowledgeDatabase",
                "body": "knowledge: any;\n    categories: string[];\n    lastUpdate: string;",
                "properties": {
                  "knowledge": {
                    "name": "knowledge",
                    "type": "any",
                    "optional": false
                  },
                  "categories": {
                    "name": "categories",
                    "type": "string[]",
                    "optional": false
                  },
                  "lastUpdate": {
                    "name": "lastUpdate",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 775
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "ConceptDefinitionRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "ConceptDefinitionRecord",
                "body": "concept: string;\n    definition: any;\n    references: string[];\n    lastUpdate: string;",
                "properties": {
                  "concept": {
                    "name": "concept",
                    "type": "string",
                    "optional": false
                  },
                  "definition": {
                    "name": "definition",
                    "type": "any",
                    "optional": false
                  },
                  "references": {
                    "name": "references",
                    "type": "string[]",
                    "optional": false
                  },
                  "lastUpdate": {
                    "name": "lastUpdate",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 781
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "ForeshadowingDatabase": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "ForeshadowingDatabase",
                "body": "foreshadowing: any[];\n    categories: string[];\n    lastUpdate: string;",
                "properties": {
                  "foreshadowing": {
                    "name": "foreshadowing",
                    "type": "any[]",
                    "optional": false
                  },
                  "categories": {
                    "name": "categories",
                    "type": "string[]",
                    "optional": false
                  },
                  "lastUpdate": {
                    "name": "lastUpdate",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 788
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "SectionDefinitionRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "SectionDefinitionRecord",
                "body": "sectionId: string;\n    definition: any;\n    usage: any;\n    lastUpdate: string;",
                "properties": {
                  "sectionId": {
                    "name": "sectionId",
                    "type": "string",
                    "optional": false
                  },
                  "definition": {
                    "name": "definition",
                    "type": "any",
                    "optional": false
                  },
                  "usage": {
                    "name": "usage",
                    "type": "any",
                    "optional": false
                  },
                  "lastUpdate": {
                    "name": "lastUpdate",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 794
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "CompletedSectionRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "CompletedSectionRecord",
                "body": "sectionId: string;\n    completionData: any;\n    effectiveness: number;\n    timestamp: string;",
                "properties": {
                  "sectionId": {
                    "name": "sectionId",
                    "type": "string",
                    "optional": false
                  },
                  "completionData": {
                    "name": "completionData",
                    "type": "any",
                    "optional": false
                  },
                  "effectiveness": {
                    "name": "effectiveness",
                    "type": "number",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 801
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "CompletedArcRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "CompletedArcRecord",
                "body": "arcNumber: number;\n    completionData: any;\n    effectiveness: number;\n    timestamp: string;",
                "properties": {
                  "arcNumber": {
                    "name": "arcNumber",
                    "type": "number",
                    "optional": false
                  },
                  "completionData": {
                    "name": "completionData",
                    "type": "any",
                    "optional": false
                  },
                  "effectiveness": {
                    "name": "effectiveness",
                    "type": "number",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 808
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "LongTermEffectivenessRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\core\\types.ts",
              "definition": {
                "name": "LongTermEffectivenessRecord",
                "body": "recordType: string;\n    effectivenessData: any;\n    trends: any;\n    timestamp: string;",
                "properties": {
                  "recordType": {
                    "name": "recordType",
                    "type": "string",
                    "optional": false
                  },
                  "effectivenessData": {
                    "name": "effectivenessData",
                    "type": "any",
                    "optional": false
                  },
                  "trends": {
                    "name": "trends",
                    "type": "any",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 815
              },
              "system": "memory",
              "module": "memory/core"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "ExtendedCharacterState": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\character-database-types.ts",
              "definition": {
                "name": "ExtendedCharacterState",
                "body": "// CharacterState から継承したが型を変更するプロパティ\r\n  skills: SkillRecord[]; // string[] から SkillRecord[] に変更\r\n  \r\n  // 詳細状態\r\n  detailedEmotionalState: DetailedEmotionalState;\r\n  physicalCondition: PhysicalCondition;\r\n  mentalCondition: MentalCondition;\r\n  socialStatus: SocialStatus;\r\n  \r\n  // 能力・知識\r\n  abilities: AbilityRecord[];\r\n  knowledge: KnowledgeRecord[];\r\n  \r\n  // 所有・リソース\r\n  possessions: PossessionRecord[];\r\n  resources: ResourceRecord[];\r\n  obligations: ObligationRecord[];\r\n  \r\n  // 目標・動機\r\n  currentGoals: GoalRecord[];\r\n  motivations: MotivationRecord[];\r\n  conflicts: ConflictRecord[];",
                "properties": {
                  "skills": {
                    "name": "skills",
                    "type": "SkillRecord[]",
                    "optional": false
                  },
                  "detailedEmotionalState": {
                    "name": "detailedEmotionalState",
                    "type": "DetailedEmotionalState",
                    "optional": false
                  },
                  "physicalCondition": {
                    "name": "physicalCondition",
                    "type": "PhysicalCondition",
                    "optional": false
                  },
                  "mentalCondition": {
                    "name": "mentalCondition",
                    "type": "MentalCondition",
                    "optional": false
                  },
                  "socialStatus": {
                    "name": "socialStatus",
                    "type": "SocialStatus",
                    "optional": false
                  },
                  "abilities": {
                    "name": "abilities",
                    "type": "AbilityRecord[]",
                    "optional": false
                  },
                  "knowledge": {
                    "name": "knowledge",
                    "type": "KnowledgeRecord[]",
                    "optional": false
                  },
                  "possessions": {
                    "name": "possessions",
                    "type": "PossessionRecord[]",
                    "optional": false
                  },
                  "resources": {
                    "name": "resources",
                    "type": "ResourceRecord[]",
                    "optional": false
                  },
                  "obligations": {
                    "name": "obligations",
                    "type": "ObligationRecord[]",
                    "optional": false
                  },
                  "currentGoals": {
                    "name": "currentGoals",
                    "type": "GoalRecord[]",
                    "optional": false
                  },
                  "motivations": {
                    "name": "motivations",
                    "type": "MotivationRecord[]",
                    "optional": false
                  },
                  "conflicts": {
                    "name": "conflicts",
                    "type": "ConflictRecord[]",
                    "optional": false
                  }
                },
                "isGeneric": true,
                "extendsOther": true,
                "lineNumber": 49
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "CHARACTER_DATA",
          "storageRelevance": "MEDIUM"
        },
        "DetailedEmotionalState": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\character-database-types.ts",
              "definition": {
                "name": "DetailedEmotionalState",
                "body": "primary: string;\r\n  secondary: string[];\r\n  intensity: number; // 0-10\r\n  stability: number; // 0-10\r\n  triggers: string[];\r\n  coping: string[];\r\n  lastChange: string;\r\n  influences: EmotionalInfluence[];",
                "properties": {
                  "primary": {
                    "name": "primary",
                    "type": "string",
                    "optional": false
                  },
                  "secondary": {
                    "name": "secondary",
                    "type": "string[]",
                    "optional": false
                  },
                  "intensity": {
                    "name": "intensity",
                    "type": "number",
                    "optional": false
                  },
                  "stability": {
                    "name": "stability",
                    "type": "number",
                    "optional": false
                  },
                  "triggers": {
                    "name": "triggers",
                    "type": "string[]",
                    "optional": false
                  },
                  "coping": {
                    "name": "coping",
                    "type": "string[]",
                    "optional": false
                  },
                  "lastChange": {
                    "name": "lastChange",
                    "type": "string",
                    "optional": false
                  },
                  "influences": {
                    "name": "influences",
                    "type": "EmotionalInfluence[]",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 254
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "SkillRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\character-database-types.ts",
              "definition": {
                "name": "SkillRecord",
                "body": "skillId: string;\r\n  name: string;\r\n  level: number; // 0-10\r\n  experience: number;\r\n  category: string;\r\n  acquiredDate: string;\r\n  lastUsed: string;\r\n  relevantSituations: string[];",
                "properties": {
                  "skillId": {
                    "name": "skillId",
                    "type": "string",
                    "optional": false
                  },
                  "name": {
                    "name": "name",
                    "type": "string",
                    "optional": false
                  },
                  "level": {
                    "name": "level",
                    "type": "number",
                    "optional": false
                  },
                  "experience": {
                    "name": "experience",
                    "type": "number",
                    "optional": false
                  },
                  "category": {
                    "name": "category",
                    "type": "string",
                    "optional": false
                  },
                  "acquiredDate": {
                    "name": "acquiredDate",
                    "type": "string",
                    "optional": false
                  },
                  "lastUsed": {
                    "name": "lastUsed",
                    "type": "string",
                    "optional": false
                  },
                  "relevantSituations": {
                    "name": "relevantSituations",
                    "type": "string[]",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 314
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "AbilityRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\character-database-types.ts",
              "definition": {
                "name": "AbilityRecord",
                "body": "abilityId: string;\r\n  name: string;\r\n  description: string;\r\n  type: 'innate' | 'learned' | 'granted' | 'magical';\r\n  power: number; // 0-10\r\n  limitations: string[];\r\n  cost: string;\r\n  cooldown?: string;",
                "properties": {
                  "abilityId": {
                    "name": "abilityId",
                    "type": "string",
                    "optional": false
                  },
                  "name": {
                    "name": "name",
                    "type": "string",
                    "optional": false
                  },
                  "description": {
                    "name": "description",
                    "type": "string",
                    "optional": false
                  },
                  "type": {
                    "name": "type",
                    "type": "'innate' | 'learned' | 'granted' | 'magical'",
                    "optional": false
                  },
                  "power": {
                    "name": "power",
                    "type": "number",
                    "optional": false
                  },
                  "limitations": {
                    "name": "limitations",
                    "type": "string[]",
                    "optional": false
                  },
                  "cost": {
                    "name": "cost",
                    "type": "string",
                    "optional": false
                  },
                  "cooldown": {
                    "name": "cooldown",
                    "type": "string",
                    "optional": true
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 328
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "KnowledgeRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\character-database-types.ts",
              "definition": {
                "name": "KnowledgeRecord",
                "body": "knowledgeId: string;\r\n  domain: string;\r\n  description: string;\r\n  depth: number; // 0-10\r\n  breadth: number; // 0-10\r\n  source: string;\r\n  acquiredDate: string;\r\n  relevance: number; // 0-10",
                "properties": {
                  "knowledgeId": {
                    "name": "knowledgeId",
                    "type": "string",
                    "optional": false
                  },
                  "domain": {
                    "name": "domain",
                    "type": "string",
                    "optional": false
                  },
                  "description": {
                    "name": "description",
                    "type": "string",
                    "optional": false
                  },
                  "depth": {
                    "name": "depth",
                    "type": "number",
                    "optional": false
                  },
                  "breadth": {
                    "name": "breadth",
                    "type": "number",
                    "optional": false
                  },
                  "source": {
                    "name": "source",
                    "type": "string",
                    "optional": false
                  },
                  "acquiredDate": {
                    "name": "acquiredDate",
                    "type": "string",
                    "optional": false
                  },
                  "relevance": {
                    "name": "relevance",
                    "type": "number",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 342
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "PossessionRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\character-database-types.ts",
              "definition": {
                "name": "PossessionRecord",
                "body": "itemId: string;\r\n  name: string;\r\n  description: string;\r\n  value: number;\r\n  significance: number; // 0-10\r\n  condition: string;\r\n  location: string;\r\n  acquiredDate: string;",
                "properties": {
                  "itemId": {
                    "name": "itemId",
                    "type": "string",
                    "optional": false
                  },
                  "name": {
                    "name": "name",
                    "type": "string",
                    "optional": false
                  },
                  "description": {
                    "name": "description",
                    "type": "string",
                    "optional": false
                  },
                  "value": {
                    "name": "value",
                    "type": "number",
                    "optional": false
                  },
                  "significance": {
                    "name": "significance",
                    "type": "number",
                    "optional": false
                  },
                  "condition": {
                    "name": "condition",
                    "type": "string",
                    "optional": false
                  },
                  "location": {
                    "name": "location",
                    "type": "string",
                    "optional": false
                  },
                  "acquiredDate": {
                    "name": "acquiredDate",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 356
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "ResourceRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\character-database-types.ts",
              "definition": {
                "name": "ResourceRecord",
                "body": "resourceId: string;\r\n  type: 'financial' | 'social' | 'informational' | 'material' | 'time';\r\n  name: string;\r\n  amount: number;\r\n  unit: string;\r\n  availability: number; // 0-10\r\n  renewability: 'renewable' | 'finite' | 'unknown';",
                "properties": {
                  "resourceId": {
                    "name": "resourceId",
                    "type": "string",
                    "optional": false
                  },
                  "type": {
                    "name": "type",
                    "type": "'financial' | 'social' | 'informational' | 'material' | 'time'",
                    "optional": false
                  },
                  "name": {
                    "name": "name",
                    "type": "string",
                    "optional": false
                  },
                  "amount": {
                    "name": "amount",
                    "type": "number",
                    "optional": false
                  },
                  "unit": {
                    "name": "unit",
                    "type": "string",
                    "optional": false
                  },
                  "availability": {
                    "name": "availability",
                    "type": "number",
                    "optional": false
                  },
                  "renewability": {
                    "name": "renewability",
                    "type": "'renewable' | 'finite' | 'unknown'",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 370
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "ObligationRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\character-database-types.ts",
              "definition": {
                "name": "ObligationRecord",
                "body": "obligationId: string;\r\n  type: 'legal' | 'moral' | 'social' | 'personal' | 'professional';\r\n  description: string;\r\n  priority: number; // 0-10\r\n  deadline?: string;\r\n  consequences: string[];\r\n  progress: number; // 0-10 (completion)",
                "properties": {
                  "obligationId": {
                    "name": "obligationId",
                    "type": "string",
                    "optional": false
                  },
                  "type": {
                    "name": "type",
                    "type": "'legal' | 'moral' | 'social' | 'personal' | 'professional'",
                    "optional": false
                  },
                  "description": {
                    "name": "description",
                    "type": "string",
                    "optional": false
                  },
                  "priority": {
                    "name": "priority",
                    "type": "number",
                    "optional": false
                  },
                  "deadline": {
                    "name": "deadline",
                    "type": "string",
                    "optional": true
                  },
                  "consequences": {
                    "name": "consequences",
                    "type": "string[]",
                    "optional": false
                  },
                  "progress": {
                    "name": "progress",
                    "type": "number",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 383
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "GoalRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\character-database-types.ts",
              "definition": {
                "name": "GoalRecord",
                "body": "goalId: string;\r\n  title: string;\r\n  description: string;\r\n  type: 'short_term' | 'medium_term' | 'long_term' | 'life_goal';\r\n  priority: number; // 0-10\r\n  progress: number; // 0-10\r\n  deadline?: string;\r\n  obstacles: string[];\r\n  resources: string[];\r\n  dependencies: string[];",
                "properties": {
                  "goalId": {
                    "name": "goalId",
                    "type": "string",
                    "optional": false
                  },
                  "title": {
                    "name": "title",
                    "type": "string",
                    "optional": false
                  },
                  "description": {
                    "name": "description",
                    "type": "string",
                    "optional": false
                  },
                  "type": {
                    "name": "type",
                    "type": "'short_term' | 'medium_term' | 'long_term' | 'life_goal'",
                    "optional": false
                  },
                  "priority": {
                    "name": "priority",
                    "type": "number",
                    "optional": false
                  },
                  "progress": {
                    "name": "progress",
                    "type": "number",
                    "optional": false
                  },
                  "deadline": {
                    "name": "deadline",
                    "type": "string",
                    "optional": true
                  },
                  "obstacles": {
                    "name": "obstacles",
                    "type": "string[]",
                    "optional": false
                  },
                  "resources": {
                    "name": "resources",
                    "type": "string[]",
                    "optional": false
                  },
                  "dependencies": {
                    "name": "dependencies",
                    "type": "string[]",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 396
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "MotivationRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\character-database-types.ts",
              "definition": {
                "name": "MotivationRecord",
                "body": "motivationId: string;\r\n  type: 'survival' | 'security' | 'belonging' | 'esteem' | 'self_actualization';\r\n  description: string;\r\n  intensity: number; // 0-10\r\n  source: string;\r\n  satisfactionLevel: number; // 0-10\r\n  related: string[];",
                "properties": {
                  "motivationId": {
                    "name": "motivationId",
                    "type": "string",
                    "optional": false
                  },
                  "type": {
                    "name": "type",
                    "type": "'survival' | 'security' | 'belonging' | 'esteem' | 'self_actualization'",
                    "optional": false
                  },
                  "description": {
                    "name": "description",
                    "type": "string",
                    "optional": false
                  },
                  "intensity": {
                    "name": "intensity",
                    "type": "number",
                    "optional": false
                  },
                  "source": {
                    "name": "source",
                    "type": "string",
                    "optional": false
                  },
                  "satisfactionLevel": {
                    "name": "satisfactionLevel",
                    "type": "number",
                    "optional": false
                  },
                  "related": {
                    "name": "related",
                    "type": "string[]",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 412
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "ConflictRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\character-database-types.ts",
              "definition": {
                "name": "ConflictRecord",
                "body": "conflictId: string;\r\n  type: 'internal' | 'interpersonal' | 'societal' | 'ideological';\r\n  description: string;\r\n  severity: number; // 0-10\r\n  parties: string[];\r\n  stakes: string[];\r\n  possibleResolutions: string[];\r\n  progress: number; // 0-10 toward resolution",
                "properties": {
                  "conflictId": {
                    "name": "conflictId",
                    "type": "string",
                    "optional": false
                  },
                  "type": {
                    "name": "type",
                    "type": "'internal' | 'interpersonal' | 'societal' | 'ideological'",
                    "optional": false
                  },
                  "description": {
                    "name": "description",
                    "type": "string",
                    "optional": false
                  },
                  "severity": {
                    "name": "severity",
                    "type": "number",
                    "optional": false
                  },
                  "parties": {
                    "name": "parties",
                    "type": "string[]",
                    "optional": false
                  },
                  "stakes": {
                    "name": "stakes",
                    "type": "string[]",
                    "optional": false
                  },
                  "possibleResolutions": {
                    "name": "possibleResolutions",
                    "type": "string[]",
                    "optional": false
                  },
                  "progress": {
                    "name": "progress",
                    "type": "number",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 425
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "CharacterAppearanceRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\character-database-types.ts",
              "definition": {
                "name": "CharacterAppearanceRecord",
                "body": "recordId: string;\r\n  chapterNumber: number;\r\n  role: 'protagonist' | 'deuteragonist' | 'supporting' | 'minor' | 'mentioned';\r\n  significance: number; // 0-10\r\n  screenTime: number; // estimated minutes/pages\r\n  interactions: string[];\r\n  impact: string;\r\n  timestamp: string;",
                "properties": {
                  "recordId": {
                    "name": "recordId",
                    "type": "string",
                    "optional": false
                  },
                  "chapterNumber": {
                    "name": "chapterNumber",
                    "type": "number",
                    "optional": false
                  },
                  "role": {
                    "name": "role",
                    "type": "'protagonist' | 'deuteragonist' | 'supporting' | 'minor' | 'mentioned'",
                    "optional": false
                  },
                  "significance": {
                    "name": "significance",
                    "type": "number",
                    "optional": false
                  },
                  "screenTime": {
                    "name": "screenTime",
                    "type": "number",
                    "optional": false
                  },
                  "interactions": {
                    "name": "interactions",
                    "type": "string[]",
                    "optional": false
                  },
                  "impact": {
                    "name": "impact",
                    "type": "string",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 453
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "CHARACTER_DATA",
          "storageRelevance": "MEDIUM"
        },
        "FormattedCharacterData": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\character-database-types.ts",
              "definition": {
                "name": "FormattedCharacterData",
                "body": "shortDescription: string;\r\n  mediumDescription: string;\r\n  longDescription: string;\r\n  personalityProfile: string;\r\n  relationshipSummary: string;\r\n  backgroundSummary: string;\r\n  currentStatusSummary: string;\r\n  developmentArc: string;\r\n  keyQuotes: string[];\r\n  characterTags: string[];\r\n  lastFormatted: string;",
                "properties": {
                  "shortDescription": {
                    "name": "shortDescription",
                    "type": "string",
                    "optional": false
                  },
                  "mediumDescription": {
                    "name": "mediumDescription",
                    "type": "string",
                    "optional": false
                  },
                  "longDescription": {
                    "name": "longDescription",
                    "type": "string",
                    "optional": false
                  },
                  "personalityProfile": {
                    "name": "personalityProfile",
                    "type": "string",
                    "optional": false
                  },
                  "relationshipSummary": {
                    "name": "relationshipSummary",
                    "type": "string",
                    "optional": false
                  },
                  "backgroundSummary": {
                    "name": "backgroundSummary",
                    "type": "string",
                    "optional": false
                  },
                  "currentStatusSummary": {
                    "name": "currentStatusSummary",
                    "type": "string",
                    "optional": false
                  },
                  "developmentArc": {
                    "name": "developmentArc",
                    "type": "string",
                    "optional": false
                  },
                  "keyQuotes": {
                    "name": "keyQuotes",
                    "type": "string[]",
                    "optional": false
                  },
                  "characterTags": {
                    "name": "characterTags",
                    "type": "string[]",
                    "optional": false
                  },
                  "lastFormatted": {
                    "name": "lastFormatted",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 499
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "CHARACTER_DATA",
          "storageRelevance": "MEDIUM"
        },
        "InjuryRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\character-database-types.ts",
              "definition": {
                "name": "InjuryRecord",
                "body": "injuryId: string;\r\n  type: string;\r\n  severity: number; // 0-10\r\n  healingRate: number; // 0-10\r\n  description: string;\r\n  acquiredDate: string;\r\n  expectedHealing?: string;",
                "properties": {
                  "injuryId": {
                    "name": "injuryId",
                    "type": "string",
                    "optional": false
                  },
                  "type": {
                    "name": "type",
                    "type": "string",
                    "optional": false
                  },
                  "severity": {
                    "name": "severity",
                    "type": "number",
                    "optional": false
                  },
                  "healingRate": {
                    "name": "healingRate",
                    "type": "number",
                    "optional": false
                  },
                  "description": {
                    "name": "description",
                    "type": "string",
                    "optional": false
                  },
                  "acquiredDate": {
                    "name": "acquiredDate",
                    "type": "string",
                    "optional": false
                  },
                  "expectedHealing": {
                    "name": "expectedHealing",
                    "type": "string",
                    "optional": true
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 531
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "DisabilityRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\character-database-types.ts",
              "definition": {
                "name": "DisabilityRecord",
                "body": "disabilityId: string;\r\n  type: string;\r\n  severity: number; // 0-10\r\n  description: string;\r\n  adaptations: string[];\r\n  impact: string[];",
                "properties": {
                  "disabilityId": {
                    "name": "disabilityId",
                    "type": "string",
                    "optional": false
                  },
                  "type": {
                    "name": "type",
                    "type": "string",
                    "optional": false
                  },
                  "severity": {
                    "name": "severity",
                    "type": "number",
                    "optional": false
                  },
                  "description": {
                    "name": "description",
                    "type": "string",
                    "optional": false
                  },
                  "adaptations": {
                    "name": "adaptations",
                    "type": "string[]",
                    "optional": false
                  },
                  "impact": {
                    "name": "impact",
                    "type": "string[]",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 541
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "AppearanceRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\character-database-types.ts",
              "definition": {
                "name": "AppearanceRecord",
                "body": "height: string;\r\n  build: string;\r\n  hairColor: string;\r\n  eyeColor: string;\r\n  distinctiveFeatures: string[];\r\n  style: string;\r\n  mannerisms: string[];",
                "properties": {
                  "height": {
                    "name": "height",
                    "type": "string",
                    "optional": false
                  },
                  "build": {
                    "name": "build",
                    "type": "string",
                    "optional": false
                  },
                  "hairColor": {
                    "name": "hairColor",
                    "type": "string",
                    "optional": false
                  },
                  "eyeColor": {
                    "name": "eyeColor",
                    "type": "string",
                    "optional": false
                  },
                  "distinctiveFeatures": {
                    "name": "distinctiveFeatures",
                    "type": "string[]",
                    "optional": false
                  },
                  "style": {
                    "name": "style",
                    "type": "string",
                    "optional": false
                  },
                  "mannerisms": {
                    "name": "mannerisms",
                    "type": "string[]",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 550
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "MentalIssueRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\character-database-types.ts",
              "definition": {
                "name": "MentalIssueRecord",
                "body": "issueId: string;\r\n  type: string;\r\n  severity: number; // 0-10\r\n  description: string;\r\n  triggers: string[];\r\n  coping: string[];\r\n  professional: string[];",
                "properties": {
                  "issueId": {
                    "name": "issueId",
                    "type": "string",
                    "optional": false
                  },
                  "type": {
                    "name": "type",
                    "type": "string",
                    "optional": false
                  },
                  "severity": {
                    "name": "severity",
                    "type": "number",
                    "optional": false
                  },
                  "description": {
                    "name": "description",
                    "type": "string",
                    "optional": false
                  },
                  "triggers": {
                    "name": "triggers",
                    "type": "string[]",
                    "optional": false
                  },
                  "coping": {
                    "name": "coping",
                    "type": "string[]",
                    "optional": false
                  },
                  "professional": {
                    "name": "professional",
                    "type": "string[]",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 560
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "OptimizationRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\system-types.ts",
              "definition": {
                "name": "OptimizationRecord",
                "body": "optimizationId: string;\r\n    optimizationType: 'parameter' | 'structure' | 'logic' | 'performance';\r\n    before: any;\r\n    after: any;\r\n    reason: string;\r\n    expectedImprovement: string;\r\n    actualImprovement?: EffectivenessMetrics;\r\n    timestamp: string;\r\n    optimizedBy: string;",
                "properties": {
                  "optimizationId": {
                    "name": "optimizationId",
                    "type": "string",
                    "optional": false
                  },
                  "optimizationType": {
                    "name": "optimizationType",
                    "type": "'parameter' | 'structure' | 'logic' | 'performance'",
                    "optional": false
                  },
                  "before": {
                    "name": "before",
                    "type": "any",
                    "optional": false
                  },
                  "after": {
                    "name": "after",
                    "type": "any",
                    "optional": false
                  },
                  "reason": {
                    "name": "reason",
                    "type": "string",
                    "optional": false
                  },
                  "expectedImprovement": {
                    "name": "expectedImprovement",
                    "type": "string",
                    "optional": false
                  },
                  "actualImprovement": {
                    "name": "actualImprovement",
                    "type": "EffectivenessMetrics",
                    "optional": true
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  },
                  "optimizedBy": {
                    "name": "optimizedBy",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 150
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "FeedbackData": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\system-types.ts",
              "definition": {
                "name": "FeedbackData",
                "body": "feedbackId: string;\r\n    source: 'user' | 'system' | 'ai' | 'automated';\r\n    type: 'quality' | 'usability' | 'performance' | 'bug' | 'suggestion';\r\n    rating: number; // 0-10\r\n    comment: string;\r\n    context: Record<string, any>;\r\n    timestamp: string;\r\n    actionTaken?: string;",
                "properties": {
                  "feedbackId": {
                    "name": "feedbackId",
                    "type": "string",
                    "optional": false
                  },
                  "source": {
                    "name": "source",
                    "type": "'user' | 'system' | 'ai' | 'automated'",
                    "optional": false
                  },
                  "type": {
                    "name": "type",
                    "type": "'quality' | 'usability' | 'performance' | 'bug' | 'suggestion'",
                    "optional": false
                  },
                  "rating": {
                    "name": "rating",
                    "type": "number",
                    "optional": false
                  },
                  "comment": {
                    "name": "comment",
                    "type": "string",
                    "optional": false
                  },
                  "context": {
                    "name": "context",
                    "type": "Record<string",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  },
                  "actionTaken": {
                    "name": "actionTaken",
                    "type": "string",
                    "optional": true
                  }
                },
                "isGeneric": true,
                "extendsOther": false,
                "lineNumber": 344
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "TrainingData": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\system-types.ts",
              "definition": {
                "name": "TrainingData",
                "body": "dataId: string;\r\n    input: any;\r\n    expectedOutput: any;\r\n    actualOutput?: any;\r\n    quality: number; // 0-10\r\n    source: string;\r\n    timestamp: string;\r\n    tags: string[];",
                "properties": {
                  "dataId": {
                    "name": "dataId",
                    "type": "string",
                    "optional": false
                  },
                  "input": {
                    "name": "input",
                    "type": "any",
                    "optional": false
                  },
                  "expectedOutput": {
                    "name": "expectedOutput",
                    "type": "any",
                    "optional": false
                  },
                  "actualOutput": {
                    "name": "actualOutput",
                    "type": "any",
                    "optional": true
                  },
                  "quality": {
                    "name": "quality",
                    "type": "number",
                    "optional": false
                  },
                  "source": {
                    "name": "source",
                    "type": "string",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  },
                  "tags": {
                    "name": "tags",
                    "type": "string[]",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 527
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "ImprovementRecord": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\system-types.ts",
              "definition": {
                "name": "ImprovementRecord",
                "body": "improvementId: string;\r\n    type: 'algorithm' | 'parameter' | 'data' | 'validation';\r\n    description: string;\r\n    before: any;\r\n    after: any;\r\n    improvement: number; // percentage\r\n    impact: AccuracyMetrics;\r\n    timestamp: string;\r\n    implementedBy: string;",
                "properties": {
                  "improvementId": {
                    "name": "improvementId",
                    "type": "string",
                    "optional": false
                  },
                  "type": {
                    "name": "type",
                    "type": "'algorithm' | 'parameter' | 'data' | 'validation'",
                    "optional": false
                  },
                  "description": {
                    "name": "description",
                    "type": "string",
                    "optional": false
                  },
                  "before": {
                    "name": "before",
                    "type": "any",
                    "optional": false
                  },
                  "after": {
                    "name": "after",
                    "type": "any",
                    "optional": false
                  },
                  "improvement": {
                    "name": "improvement",
                    "type": "number",
                    "optional": false
                  },
                  "impact": {
                    "name": "impact",
                    "type": "AccuracyMetrics",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  },
                  "implementedBy": {
                    "name": "implementedBy",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 556
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "DataRecoveryPlan": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\system-types.ts",
              "definition": {
                "name": "DataRecoveryPlan",
                "body": "planId: string;\r\n    description: string;\r\n    backupStrategy: string;\r\n    recoverySteps: string[];\r\n    timeRequired: string;\r\n    dataIntegrityChecks: string[];",
                "properties": {
                  "planId": {
                    "name": "planId",
                    "type": "string",
                    "optional": false
                  },
                  "description": {
                    "name": "description",
                    "type": "string",
                    "optional": false
                  },
                  "backupStrategy": {
                    "name": "backupStrategy",
                    "type": "string",
                    "optional": false
                  },
                  "recoverySteps": {
                    "name": "recoverySteps",
                    "type": "string[]",
                    "optional": false
                  },
                  "timeRequired": {
                    "name": "timeRequired",
                    "type": "string",
                    "optional": false
                  },
                  "dataIntegrityChecks": {
                    "name": "dataIntegrityChecks",
                    "type": "string[]",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 845
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "FrequencyData": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\system-types.ts",
              "definition": {
                "name": "FrequencyData",
                "body": "occurrencesPerDay: number;\r\n    occurrencesPerWeek: number;\r\n    occurrencesPerMonth: number;\r\n    peakTimes: string[];\r\n    trends: TrendData[];",
                "properties": {
                  "occurrencesPerDay": {
                    "name": "occurrencesPerDay",
                    "type": "number",
                    "optional": false
                  },
                  "occurrencesPerWeek": {
                    "name": "occurrencesPerWeek",
                    "type": "number",
                    "optional": false
                  },
                  "occurrencesPerMonth": {
                    "name": "occurrencesPerMonth",
                    "type": "number",
                    "optional": false
                  },
                  "peakTimes": {
                    "name": "peakTimes",
                    "type": "string[]",
                    "optional": false
                  },
                  "trends": {
                    "name": "trends",
                    "type": "TrendData[]",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 953
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "TrendData": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\system-types.ts",
              "definition": {
                "name": "TrendData",
                "body": "period: string;\r\n    direction: 'increasing' | 'decreasing' | 'stable' | 'volatile';\r\n    changeRate: number; // percentage\r\n    confidence: number; // 0-1",
                "properties": {
                  "period": {
                    "name": "period",
                    "type": "string",
                    "optional": false
                  },
                  "direction": {
                    "name": "direction",
                    "type": "'increasing' | 'decreasing' | 'stable' | 'volatile'",
                    "optional": false
                  },
                  "changeRate": {
                    "name": "changeRate",
                    "type": "number",
                    "optional": false
                  },
                  "confidence": {
                    "name": "confidence",
                    "type": "number",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 964
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "SeverityData": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\system-types.ts",
              "definition": {
                "name": "SeverityData",
                "body": "userImpact: number; // 0-10\r\n    systemImpact: number; // 0-10\r\n    businessImpact: number; // 0-10\r\n    recoveryDifficulty: number; // 0-10\r\n    overallSeverity: number; // 0-10",
                "properties": {
                  "userImpact": {
                    "name": "userImpact",
                    "type": "number",
                    "optional": false
                  },
                  "systemImpact": {
                    "name": "systemImpact",
                    "type": "number",
                    "optional": false
                  },
                  "businessImpact": {
                    "name": "businessImpact",
                    "type": "number",
                    "optional": false
                  },
                  "recoveryDifficulty": {
                    "name": "recoveryDifficulty",
                    "type": "number",
                    "optional": false
                  },
                  "overallSeverity": {
                    "name": "overallSeverity",
                    "type": "number",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 974
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "DataCollectionMethod": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\system-types.ts",
              "definition": {
                "name": "DataCollectionMethod",
                "body": "methodId: string;\r\n    name: string;\r\n    description: string;\r\n    type: 'automated' | 'manual' | 'survey' | 'observation';\r\n    frequency: string;\r\n    dataPoints: string[];\r\n    quality: number; // 0-10",
                "properties": {
                  "methodId": {
                    "name": "methodId",
                    "type": "string",
                    "optional": false
                  },
                  "name": {
                    "name": "name",
                    "type": "string",
                    "optional": false
                  },
                  "description": {
                    "name": "description",
                    "type": "string",
                    "optional": false
                  },
                  "type": {
                    "name": "type",
                    "type": "'automated' | 'manual' | 'survey' | 'observation'",
                    "optional": false
                  },
                  "frequency": {
                    "name": "frequency",
                    "type": "string",
                    "optional": false
                  },
                  "dataPoints": {
                    "name": "dataPoints",
                    "type": "string[]",
                    "optional": false
                  },
                  "quality": {
                    "name": "quality",
                    "type": "number",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 1330
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "NarrativeStateInfo": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\types.ts",
              "definition": {
                "name": "NarrativeStateInfo",
                "body": "state: NarrativeState;\r\n    tensionLevel: number;\r\n    stagnationDetected: boolean;\r\n    suggestedNextState?: NarrativeState;\r\n    duration: number;\r\n    location: string;\r\n    timeOfDay: string;\r\n    weather: string;\r\n    presentCharacters: string[];\r\n    genre: string;\r\n    \r\n    // 内部状態\r\n    currentArcNumber: number;\r\n    currentTheme: string;\r\n    arcStartChapter: number;\r\n    arcEndChapter: number;\r\n    arcCompleted: boolean;\r\n    turningPoints: TurningPoint[];\r\n    \r\n    // 指標情報\r\n    metrics?: NarrativeMetrics;\r\n    totalChapters?: number;\r\n    \r\n    // 進行情報\r\n    progressionInstruction?: string;",
                "properties": {
                  "state": {
                    "name": "state",
                    "type": "NarrativeState",
                    "optional": false
                  },
                  "tensionLevel": {
                    "name": "tensionLevel",
                    "type": "number",
                    "optional": false
                  },
                  "stagnationDetected": {
                    "name": "stagnationDetected",
                    "type": "boolean",
                    "optional": false
                  },
                  "suggestedNextState": {
                    "name": "suggestedNextState",
                    "type": "NarrativeState",
                    "optional": true
                  },
                  "duration": {
                    "name": "duration",
                    "type": "number",
                    "optional": false
                  },
                  "location": {
                    "name": "location",
                    "type": "string",
                    "optional": false
                  },
                  "timeOfDay": {
                    "name": "timeOfDay",
                    "type": "string",
                    "optional": false
                  },
                  "weather": {
                    "name": "weather",
                    "type": "string",
                    "optional": false
                  },
                  "presentCharacters": {
                    "name": "presentCharacters",
                    "type": "string[]",
                    "optional": false
                  },
                  "genre": {
                    "name": "genre",
                    "type": "string",
                    "optional": false
                  },
                  "currentArcNumber": {
                    "name": "currentArcNumber",
                    "type": "number",
                    "optional": false
                  },
                  "currentTheme": {
                    "name": "currentTheme",
                    "type": "string",
                    "optional": false
                  },
                  "arcStartChapter": {
                    "name": "arcStartChapter",
                    "type": "number",
                    "optional": false
                  },
                  "arcEndChapter": {
                    "name": "arcEndChapter",
                    "type": "number",
                    "optional": false
                  },
                  "arcCompleted": {
                    "name": "arcCompleted",
                    "type": "boolean",
                    "optional": false
                  },
                  "turningPoints": {
                    "name": "turningPoints",
                    "type": "TurningPoint[]",
                    "optional": false
                  },
                  "metrics": {
                    "name": "metrics",
                    "type": "NarrativeMetrics",
                    "optional": true
                  },
                  "totalChapters": {
                    "name": "totalChapters",
                    "type": "number",
                    "optional": true
                  },
                  "progressionInstruction": {
                    "name": "progressionInstruction",
                    "type": "string",
                    "optional": true
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 129
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "StateTransition": {
          "system": "memory",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\memory\\long-term\\types.ts",
              "definition": {
                "name": "StateTransition",
                "body": "fromState: NarrativeState;\r\n    toState: NarrativeState;\r\n    chapter: number;\r\n    timestamp: string;\r\n    keyEvent?: string;",
                "properties": {
                  "fromState": {
                    "name": "fromState",
                    "type": "NarrativeState",
                    "optional": false
                  },
                  "toState": {
                    "name": "toState",
                    "type": "NarrativeState",
                    "optional": false
                  },
                  "chapter": {
                    "name": "chapter",
                    "type": "number",
                    "optional": false
                  },
                  "timestamp": {
                    "name": "timestamp",
                    "type": "string",
                    "optional": false
                  },
                  "keyEvent": {
                    "name": "keyEvent",
                    "type": "string",
                    "optional": true
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 161
              },
              "system": "memory",
              "module": "memory/long-term"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "LocationInfo": {
          "system": "plot",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\plot\\bridge-types.ts",
              "definition": {
                "name": "LocationInfo",
                "body": "name: string;                     // 場所の名前\r\n  description: string;              // 場所の説明\r\n  atmosphere: string;               // 雰囲気\r\n  significance: string;             // 重要性",
                "properties": {
                  "name": {
                    "name": "name",
                    "type": "string",
                    "optional": false
                  },
                  "description": {
                    "name": "description",
                    "type": "string",
                    "optional": false
                  },
                  "atmosphere": {
                    "name": "atmosphere",
                    "type": "string",
                    "optional": false
                  },
                  "significance": {
                    "name": "significance",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 42
              },
              "system": "plot",
              "module": "plot"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        },
        "PlotProgressInfo": {
          "system": "plot",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\plot\\bridge-types.ts",
              "definition": {
                "name": "PlotProgressInfo",
                "body": "completedElements: string[];      // 完了したプロット要素\r\n  pendingElements: string[];        // 未完了のプロット要素\r\n  progressPercentage: number;       // 進行度割合 (0-1)\r\n  currentFocus: string;             // 現在の焦点\r\n  nextMilestone?: string;           // 次のマイルストーン",
                "properties": {
                  "completedElements": {
                    "name": "completedElements",
                    "type": "string[]",
                    "optional": false
                  },
                  "pendingElements": {
                    "name": "pendingElements",
                    "type": "string[]",
                    "optional": false
                  },
                  "progressPercentage": {
                    "name": "progressPercentage",
                    "type": "number",
                    "optional": false
                  },
                  "currentFocus": {
                    "name": "currentFocus",
                    "type": "string",
                    "optional": false
                  },
                  "nextMilestone": {
                    "name": "nextMilestone",
                    "type": "string",
                    "optional": true
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 122
              },
              "system": "plot",
              "module": "plot"
            }
          ],
          "category": "PLOT_DATA",
          "storageRelevance": "MEDIUM"
        },
        "MetaInformation": {
          "system": "plot",
          "definitions": [
            {
              "type": "interface",
              "file": "lib\\plot\\section\\types.ts",
              "definition": {
                "name": "MetaInformation",
                "body": "/** 作成日時 */\r\n  created: string;\r\n  \r\n  /** 最終更新日時 */\r\n  lastModified: string;\r\n  \r\n  /** バージョン */\r\n  version: number;\r\n  \r\n  /** 編集者メモ */\r\n  editorNotes: string;\r\n  \r\n  /** 生成に使用したプロンプト */\r\n  generationPrompts: string[];\r\n  \r\n  /** 全体ストーリーとの関係 */\r\n  relationToOverallStory: string;",
                "properties": {
                  "created": {
                    "name": "created",
                    "type": "string",
                    "optional": false
                  },
                  "lastModified": {
                    "name": "lastModified",
                    "type": "string",
                    "optional": false
                  },
                  "version": {
                    "name": "version",
                    "type": "number",
                    "optional": false
                  },
                  "editorNotes": {
                    "name": "editorNotes",
                    "type": "string",
                    "optional": false
                  },
                  "generationPrompts": {
                    "name": "generationPrompts",
                    "type": "string[]",
                    "optional": false
                  },
                  "relationToOverallStory": {
                    "name": "relationToOverallStory",
                    "type": "string",
                    "optional": false
                  }
                },
                "isGeneric": false,
                "extendsOther": false,
                "lineNumber": 341
              },
              "system": "plot",
              "module": "plot/section"
            }
          ],
          "category": "GENERAL_DATA",
          "storageRelevance": "MEDIUM"
        }
      },
      "storageModels": {
        "CacheableCoordinator": {
          "system": "analysis",
          "definition": {
            "name": "CacheableCoordinator",
            "body": "/** キャッシュをクリアする */\r\n  clearCache(): void;",
            "properties": {},
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 58
          },
          "file": "lib\\analysis\\coordinators\\interfaces.ts",
          "category": "STORAGE_RELATED"
        },
        "CacheStrategy": {
          "system": "analysis",
          "definition": {
            "name": "CacheStrategy",
            "definition": "'memory' | 'persistent' | 'distributed' | 'none'",
            "isUnion": true,
            "isIntersection": false,
            "isGeneric": false,
            "lineNumber": 645
          },
          "file": "lib\\analysis\\coordinators\\interfaces.ts",
          "category": "STORAGE_RELATED"
        },
        "ICacheStorage": {
          "system": "analysis",
          "definition": {
            "name": "ICacheStorage",
            "body": "/**\r\n   * キャッシュに値を設定\r\n   * @param key キー\r\n   * @param value 値\r\n   * @param ttl 有効期限（ミリ秒）\r\n   */\r\n  set<T>(key: string | number, value: T, ttl?: number): void;\r\n  \r\n  /**\r\n   * キャッシュから値を取得\r\n   * @param key キー\r\n   * @returns キャッシュ値（存在しないかExpireしている場合はnull）\r\n   */\r\n  get<T>(key: string | number): T | null;\r\n  \r\n  /**\r\n   * キャッシュから項目を削除\r\n   * @param key キー\r\n   * @returns 削除成功時はtrue\r\n   */\r\n  delete(key: string | number): boolean;\r\n  \r\n  /**\r\n   * キャッシュをクリア\r\n   */\r\n  clear(): void;\r\n  \r\n  /**\r\n   * 指定したプレフィックスを持つキーのエントリをすべて削除\r\n   * @param prefix キープレフィックス\r\n   */\r\n  deleteByPrefix(prefix: string): void;\r\n  \r\n  /**\r\n   * 期限切れのエントリを削除\r\n   */\r\n  removeExpired(): void;\r\n  \r\n  /**\r\n   * キャッシュの数を取得\r\n   * @returns キャッシュエントリ数\r\n   */\r\n  size(): number;",
            "properties": {
              "key": {
                "name": "key",
                "type": "string | number): boolean",
                "optional": false
              },
              "value": {
                "name": "value",
                "type": "T",
                "optional": false
              },
              "ttl": {
                "name": "ttl",
                "type": "number): void",
                "optional": true
              },
              "prefix": {
                "name": "prefix",
                "type": "string): void",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 109
          },
          "file": "lib\\analysis\\core\\interfaces.ts",
          "category": "STORAGE_RELATED"
        },
        "UnifiedForeshadowingSystemConfig": {
          "system": "foreshadowing",
          "definition": {
            "name": "UnifiedForeshadowingSystemConfig",
            "body": "memoryManager: MemoryManager;\n    enableAdvancedResolution?: boolean;\n    enablePerformanceOptimization?: boolean;\n    enableSystemDiagnostics?: boolean;\n    maxConcurrentOperations?: number;\n    cacheOptimizationLevel?: 'low' | 'medium' | 'high';",
            "properties": {
              "memoryManager": {
                "name": "memoryManager",
                "type": "MemoryManager",
                "optional": false
              },
              "enableAdvancedResolution": {
                "name": "enableAdvancedResolution",
                "type": "boolean",
                "optional": true
              },
              "enablePerformanceOptimization": {
                "name": "enablePerformanceOptimization",
                "type": "boolean",
                "optional": true
              },
              "enableSystemDiagnostics": {
                "name": "enableSystemDiagnostics",
                "type": "boolean",
                "optional": true
              },
              "maxConcurrentOperations": {
                "name": "maxConcurrentOperations",
                "type": "number",
                "optional": true
              },
              "cacheOptimizationLevel": {
                "name": "cacheOptimizationLevel",
                "type": "'low' | 'medium' | 'high'",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 23
          },
          "file": "lib\\foreshadowing\\index.ts",
          "category": "STORAGE_RELATED"
        },
        "LearningJourneySystemConfig": {
          "system": "learning-journey",
          "definition": {
            "name": "LearningJourneySystemConfig",
            "body": "// 統合記憶システム設定\n    memorySystemIntegration: {\n        enabled: boolean;\n        maxRetries: number;\n        timeoutMs: number;\n        fallbackEnabled: boolean;",
            "properties": {
              "memorySystemIntegration": {
                "name": "memorySystemIntegration",
                "type": "{",
                "optional": false
              },
              "enabled": {
                "name": "enabled",
                "type": "boolean",
                "optional": false
              },
              "maxRetries": {
                "name": "maxRetries",
                "type": "number",
                "optional": false
              },
              "timeoutMs": {
                "name": "timeoutMs",
                "type": "number",
                "optional": false
              },
              "fallbackEnabled": {
                "name": "fallbackEnabled",
                "type": "boolean",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 78
          },
          "file": "lib\\learning-journey\\index.ts",
          "category": "STORAGE_RELATED"
        },
        "CacheStatisticsData": {
          "system": "memory",
          "definition": {
            "name": "CacheStatisticsData",
            "body": "// UnifiedAccessAPI 用プロパティ\n    hitRatio: number;\n    missRatio: number;\n    totalRequests: number;\n    cacheSize: number;\n    lastOptimization: string;\n    evictionCount: number;\n    \n    // CacheCoordinator 用プロパティ（互換性のため）\n    totalEntries?: number;\n    hitRate?: number;\n    avgAccessTime?: number;\n    memoryUsage?: {\n        shortTerm: number;\n        midTerm: number;\n        longTerm: number;",
            "properties": {
              "hitRatio": {
                "name": "hitRatio",
                "type": "number",
                "optional": false
              },
              "missRatio": {
                "name": "missRatio",
                "type": "number",
                "optional": false
              },
              "totalRequests": {
                "name": "totalRequests",
                "type": "number",
                "optional": false
              },
              "cacheSize": {
                "name": "cacheSize",
                "type": "number",
                "optional": false
              },
              "lastOptimization": {
                "name": "lastOptimization",
                "type": "string",
                "optional": false
              },
              "evictionCount": {
                "name": "evictionCount",
                "type": "number",
                "optional": false
              },
              "totalEntries": {
                "name": "totalEntries",
                "type": "number",
                "optional": true
              },
              "hitRate": {
                "name": "hitRate",
                "type": "number",
                "optional": true
              },
              "avgAccessTime": {
                "name": "avgAccessTime",
                "type": "number",
                "optional": true
              },
              "memoryUsage": {
                "name": "memoryUsage",
                "type": "{",
                "optional": true
              },
              "shortTerm": {
                "name": "shortTerm",
                "type": "number",
                "optional": false
              },
              "midTerm": {
                "name": "midTerm",
                "type": "number",
                "optional": false
              },
              "longTerm": {
                "name": "longTerm",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 352
          },
          "file": "lib\\memory\\core\\types.ts",
          "category": "STORAGE_RELATED"
        },
        "ICacheCoordinator": {
          "system": "memory",
          "definition": {
            "name": "ICacheCoordinator",
            "body": "// ✅ export を削除\r\n  invalidateChapterCache(chapterNumber: number): Promise<void>;\r\n  validateCacheHealth(): Promise<{ isHealthy: boolean; issues: string[]",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number): Promise<void>",
                "optional": false
              },
              "isHealthy": {
                "name": "isHealthy",
                "type": "boolean",
                "optional": false
              },
              "issues": {
                "name": "issues",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": true,
            "lineNumber": 106
          },
          "file": "lib\\memory\\core\\interfaces.ts",
          "category": "STORAGE_RELATED"
        },
        "ShortTermMemoryConfig": {
          "system": "memory",
          "definition": {
            "name": "ShortTermMemoryConfig",
            "body": "// ✅ export を削除\r\n  maxChapters: number;\r\n  cacheEnabled: boolean;",
            "properties": {
              "maxChapters": {
                "name": "maxChapters",
                "type": "number",
                "optional": false
              },
              "cacheEnabled": {
                "name": "cacheEnabled",
                "type": "boolean",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 280
          },
          "file": "lib\\memory\\core\\interfaces.ts",
          "category": "STORAGE_RELATED"
        },
        "MemoryHierarchyConfig": {
          "system": "memory",
          "definition": {
            "name": "MemoryHierarchyConfig",
            "body": "shortTerm: {\n        maxChapters: number;\n        retentionTime: number; // milliseconds\n        cacheEnabled: boolean;",
            "properties": {
              "shortTerm": {
                "name": "shortTerm",
                "type": "{",
                "optional": false
              },
              "maxChapters": {
                "name": "maxChapters",
                "type": "number",
                "optional": false
              },
              "retentionTime": {
                "name": "retentionTime",
                "type": "number",
                "optional": false
              },
              "cacheEnabled": {
                "name": "cacheEnabled",
                "type": "boolean",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 58
          },
          "file": "lib\\memory\\core\\types.ts",
          "category": "STORAGE_RELATED"
        },
        "SystemConfigMasterRecord": {
          "system": "memory",
          "definition": {
            "name": "SystemConfigMasterRecord",
            "body": "consolidatedConfig: any;\n    sources: string[];\n    lastUpdate: string;",
            "properties": {
              "consolidatedConfig": {
                "name": "consolidatedConfig",
                "type": "any",
                "optional": false
              },
              "sources": {
                "name": "sources",
                "type": "string[]",
                "optional": false
              },
              "lastUpdate": {
                "name": "lastUpdate",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 763
          },
          "file": "lib\\memory\\core\\types.ts",
          "category": "STORAGE_RELATED"
        },
        "SectionSystemConfig": {
          "system": "plot",
          "definition": {
            "name": "SectionSystemConfig",
            "body": "// 記憶システム統合設定\n    memorySystem: {\n        useIntegration: boolean;\n        enableCaching: boolean;\n        enableOptimization: boolean;\n        enableQualityAssurance: boolean;\n        enableAutoBackup: boolean;\n        fallbackToLocalAnalysis: boolean;",
            "properties": {
              "memorySystem": {
                "name": "memorySystem",
                "type": "{",
                "optional": false
              },
              "useIntegration": {
                "name": "useIntegration",
                "type": "boolean",
                "optional": false
              },
              "enableCaching": {
                "name": "enableCaching",
                "type": "boolean",
                "optional": false
              },
              "enableOptimization": {
                "name": "enableOptimization",
                "type": "boolean",
                "optional": false
              },
              "enableQualityAssurance": {
                "name": "enableQualityAssurance",
                "type": "boolean",
                "optional": false
              },
              "enableAutoBackup": {
                "name": "enableAutoBackup",
                "type": "boolean",
                "optional": false
              },
              "fallbackToLocalAnalysis": {
                "name": "fallbackToLocalAnalysis",
                "type": "boolean",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 61
          },
          "file": "lib\\plot\\section\\index.ts",
          "category": "STORAGE_RELATED"
        },
        "StorageProvider": {
          "system": "storage",
          "definition": {
            "name": "StorageProvider",
            "body": "/**\r\n     * ファイルを読み込みます\r\n     * \r\n     * 指定されたパスのファイルを読み込み、その内容を文字列として返します。\r\n     * ファイルが存在しない場合は例外をスローします。\r\n     * \r\n     * @param {string",
            "properties": {},
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 116
          },
          "file": "lib\\storage\\types.ts",
          "category": "STORAGE_RELATED"
        },
        "GitHubStorageOptions": {
          "system": "storage",
          "definition": {
            "name": "GitHubStorageOptions",
            "body": "/**\r\n     * GitHubパーソナルアクセストークン\r\n     * \r\n     * GitHub APIにアクセスするための認証トークンです。\r\n     * リポジトリの読み書き権限が必要です。\r\n     * \r\n     * @type {string",
            "properties": {},
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 373
          },
          "file": "lib\\storage\\types.ts",
          "category": "STORAGE_RELATED"
        },
        "LocalStorageOptions": {
          "system": "storage",
          "definition": {
            "name": "LocalStorageOptions",
            "body": "/**\r\n     * ベースディレクトリパス\r\n     * \r\n     * すべてのファイル操作の基準となるディレクトリパスです。\r\n     * すべてのファイルパスはこのディレクトリからの相対パスとして解釈されます。\r\n     * \r\n     * @type {string",
            "properties": {},
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 441
          },
          "file": "lib\\storage\\types.ts",
          "category": "STORAGE_RELATED"
        }
      },
      "integrationModels": {
        "BaseCoordinatorOptions": {
          "system": "analysis",
          "definition": {
            "name": "BaseCoordinatorOptions",
            "body": "/** キャッシュを有効にするか */\r\n  enableCache?: boolean;\r\n  /** 並列処理を有効にするか */\r\n  enableParallelProcessing?: boolean;\r\n  /** 詳細ログを有効にするか */\r\n  enableDetailedLogging?: boolean;",
            "properties": {
              "enableCache": {
                "name": "enableCache",
                "type": "boolean",
                "optional": true
              },
              "enableParallelProcessing": {
                "name": "enableParallelProcessing",
                "type": "boolean",
                "optional": true
              },
              "enableDetailedLogging": {
                "name": "enableDetailedLogging",
                "type": "boolean",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 30
          },
          "file": "lib\\analysis\\coordinators\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "CacheableCoordinator": {
          "system": "analysis",
          "definition": {
            "name": "CacheableCoordinator",
            "body": "/** キャッシュをクリアする */\r\n  clearCache(): void;",
            "properties": {},
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 58
          },
          "file": "lib\\analysis\\coordinators\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "AnalysisCoordinatorOptions": {
          "system": "analysis",
          "definition": {
            "name": "AnalysisCoordinatorOptions",
            "body": "/** 統合最適化を有効にするか */\r\n  optimizeForIntegration?: boolean;",
            "properties": {
              "optimizeForIntegration": {
                "name": "optimizeForIntegration",
                "type": "boolean",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 71
          },
          "file": "lib\\analysis\\coordinators\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "IAnalysisCoordinator": {
          "system": "analysis",
          "definition": {
            "name": "IAnalysisCoordinator",
            "body": "/**\r\n   * 包括的章分析を実行する\r\n   * \r\n   * @param content 章の内容\r\n   * @param chapterNumber 章番号\r\n   * @param context 生成コンテキスト\r\n   * @returns 統合分析結果\r\n   */\r\n  analyzeChapter(\r\n    content: string,\r\n    chapterNumber: number,\r\n    context: GenerationContext\r\n  ): Promise<IntegratedAnalysisResult>;",
            "properties": {
              "content": {
                "name": "content",
                "type": "string",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "context": {
                "name": "context",
                "type": "GenerationContext",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": true,
            "lineNumber": 185
          },
          "file": "lib\\analysis\\coordinators\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "OptimizationCoordinatorOptions": {
          "system": "analysis",
          "definition": {
            "name": "OptimizationCoordinatorOptions",
            "body": "/** カテゴリごとの最大推奨数 */\r\n  maxRecommendationsPerCategory?: number;\r\n  /** 優先順位付け戦略 */\r\n  prioritizationStrategy?: 'impact' | 'effort' | 'balanced';\r\n  /** 矛盾解決を有効にするか */\r\n  enableConflictResolution?: boolean;\r\n  /** 相乗効果検出を有効にするか */\r\n  enableSynergyDetection?: boolean;",
            "properties": {
              "maxRecommendationsPerCategory": {
                "name": "maxRecommendationsPerCategory",
                "type": "number",
                "optional": true
              },
              "prioritizationStrategy": {
                "name": "prioritizationStrategy",
                "type": "'impact' | 'effort' | 'balanced'",
                "optional": true
              },
              "enableConflictResolution": {
                "name": "enableConflictResolution",
                "type": "boolean",
                "optional": true
              },
              "enableSynergyDetection": {
                "name": "enableSynergyDetection",
                "type": "boolean",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": true,
            "lineNumber": 209
          },
          "file": "lib\\analysis\\coordinators\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "IOptimizationCoordinator": {
          "system": "analysis",
          "definition": {
            "name": "IOptimizationCoordinator",
            "body": "/**\r\n   * 包括的章最適化を実行する\r\n   * \r\n   * @param content 章の内容\r\n   * @param chapterNumber 章番号\r\n   * @param context 生成コンテキスト\r\n   * @param analysisResults 分析結果\r\n   * @returns 統合最適化結果\r\n   */\r\n  optimizeChapter(\r\n    content: string,\r\n    chapterNumber: number,\r\n    context: GenerationContext,\r\n    analysisResults: OptimizationInput\r\n  ): Promise<IntegratedOptimizationResult>;",
            "properties": {
              "content": {
                "name": "content",
                "type": "string",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "context": {
                "name": "context",
                "type": "GenerationContext",
                "optional": false
              },
              "analysisResults": {
                "name": "analysisResults",
                "type": "OptimizationInput",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": true,
            "lineNumber": 391
          },
          "file": "lib\\analysis\\coordinators\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "CoordinatorFactory": {
          "system": "analysis",
          "definition": {
            "name": "CoordinatorFactory",
            "body": "/**\r\n   * 分析コーディネータを作成する\r\n   * \r\n   * @param options オプション\r\n   * @returns 分析コーディネータ\r\n   */\r\n  createAnalysisCoordinator(options?: AnalysisCoordinatorOptions): IAnalysisCoordinator;\r\n\r\n  /**\r\n   * 最適化コーディネータを作成する\r\n   * \r\n   * @param options オプション\r\n   * @returns 最適化コーディネータ\r\n   */\r\n  createOptimizationCoordinator(options?: OptimizationCoordinatorOptions): IOptimizationCoordinator;",
            "properties": {
              "options": {
                "name": "options",
                "type": "OptimizationCoordinatorOptions): IOptimizationCoordinator",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 555
          },
          "file": "lib\\analysis\\coordinators\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "IntegratedCoordinatorService": {
          "system": "analysis",
          "definition": {
            "name": "IntegratedCoordinatorService",
            "body": "/**\r\n   * 章の分析と最適化を統合実行する\r\n   * \r\n   * @param content 章の内容\r\n   * @param chapterNumber 章番号\r\n   * @param context 生成コンテキスト\r\n   * @returns 分析結果と最適化結果のペア\r\n   */\r\n  analyzeAndOptimizeChapter(\r\n    content: string,\r\n    chapterNumber: number,\r\n    context: GenerationContext\r\n  ): Promise<{\r\n    analysis: IntegratedAnalysisResult;\r\n    optimization: IntegratedOptimizationResult;",
            "properties": {
              "content": {
                "name": "content",
                "type": "string",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "context": {
                "name": "context",
                "type": "GenerationContext",
                "optional": false
              },
              "analysis": {
                "name": "analysis",
                "type": "IntegratedAnalysisResult",
                "optional": false
              },
              "optimization": {
                "name": "optimization",
                "type": "IntegratedOptimizationResult",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 582
          },
          "file": "lib\\analysis\\coordinators\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "CoordinatorHealthCheck": {
          "system": "analysis",
          "definition": {
            "name": "CoordinatorHealthCheck",
            "body": "/**\r\n   * サービスの健全性をチェックする\r\n   * \r\n   * @returns ヘルスステータス\r\n   */\r\n  checkHealth(): Promise<{\r\n    status: 'healthy' | 'degraded' | 'unhealthy';\r\n    services: {\r\n      [serviceName: string]: {\r\n        status: 'up' | 'down';\r\n        responseTime?: number;\r\n        error?: string;",
            "properties": {
              "status": {
                "name": "status",
                "type": "'up' | 'down'",
                "optional": false
              },
              "services": {
                "name": "services",
                "type": "{",
                "optional": false
              },
              "serviceName": {
                "name": "serviceName",
                "type": "string]: {",
                "optional": false
              },
              "responseTime": {
                "name": "responseTime",
                "type": "number",
                "optional": true
              },
              "error": {
                "name": "error",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 610
          },
          "file": "lib\\analysis\\coordinators\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "CoordinatorType": {
          "system": "analysis",
          "definition": {
            "name": "CoordinatorType",
            "definition": "'analysis' | 'optimization' | 'integrated'",
            "isUnion": true,
            "isIntersection": false,
            "isGeneric": false,
            "lineNumber": 633
          },
          "file": "lib\\analysis\\coordinators\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "IStyleOptimizationService": {
          "system": "analysis",
          "definition": {
            "name": "IStyleOptimizationService",
            "body": "/**\r\n   * 文体ガイダンス生成\r\n   * 文体改善のためのガイダンスを生成します\r\n   * \r\n   * @param chapterNumber 章番号\r\n   * @param context コンテキスト情報（ジャンル、テーマなど）\r\n   * @returns 文体ガイダンス\r\n   */\r\n  generateStyleGuidance(\r\n    chapterNumber: number,\r\n    context: any\r\n  ): Promise<StyleGuidance>;\r\n\r\n  /**\r\n   * 代替表現提案\r\n   * 繰り返しを避けるための代替表現を提案します\r\n   * \r\n   * @param expressionPatterns 表現パターン分析結果\r\n   * @param context コンテキスト情報（ジャンル、テーマなど）\r\n   * @returns 代替表現提案\r\n   */\r\n  suggestAlternativeExpressions(\r\n    expressionPatterns: ExpressionPatterns,\r\n    context: any\r\n  ): Promise<ExpressionAlternatives>;\r\n\r\n  /**\r\n   * 主語パターン最適化提案\r\n   * 主語の使用パターンを最適化するための提案を生成します\r\n   * \r\n   * @param subjectPatterns 主語パターン分析結果\r\n   * @param context コンテキスト情報\r\n   * @returns 主語パターン最適化提案\r\n   */\r\n  optimizeSubjectPatterns(\r\n    subjectPatterns: SubjectPatternOptimizationRequest,\r\n    context: any\r\n  ): Promise<SubjectPatternOptimization>;\r\n\r\n  /**\r\n   * 文構造の改善提案を生成\r\n   * 文の構造を改善するための提案を生成します\r\n   * \r\n   * @param styleAnalysis 文体分析結果\r\n   * @param context コンテキスト情報\r\n   * @returns 文構造改善提案\r\n   */\r\n  generateStructureRecommendations(\r\n    styleAnalysis: StyleAnalysis,\r\n    context: any\r\n  ): Promise<StructureRecommendation[]>;\r\n\r\n  /**\r\n   * 繰り返し表現の代替提案を生成\r\n   * 繰り返し使用されている表現の代替案を提案します\r\n   * \r\n   * @param repetitions 繰り返し表現のリスト\r\n   * @param context コンテキスト情報\r\n   * @returns 繰り返し表現の代替提案\r\n   */\r\n  generateRepetitionAlternatives(\r\n    repetitions: string[],\r\n    context: any\r\n  ): Promise<RepetitionAlternative[]>;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "context": {
                "name": "context",
                "type": "any",
                "optional": false
              },
              "expressionPatterns": {
                "name": "expressionPatterns",
                "type": "ExpressionPatterns",
                "optional": false
              },
              "subjectPatterns": {
                "name": "subjectPatterns",
                "type": "SubjectPatternOptimizationRequest",
                "optional": false
              },
              "styleAnalysis": {
                "name": "styleAnalysis",
                "type": "StyleAnalysis",
                "optional": false
              },
              "repetitions": {
                "name": "repetitions",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 44
          },
          "file": "lib\\analysis\\enhancement\\style\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "ICharacterDepthService": {
          "system": "analysis",
          "definition": {
            "name": "ICharacterDepthService",
            "body": "/**\r\n     * キャラクター深化推奨の生成\r\n     * キャラクターの心理分析に基づく深化推奨を生成します\r\n     * \r\n     * @param character キャラクター\r\n     * @param psychology キャラクター心理情報\r\n     * @param chapterNumber 章番号（コンテキスト用）\r\n     * @returns 深化推奨の配列\r\n     */\r\n    generateDepthRecommendations(\r\n        character: Character, \r\n        psychology: CharacterPsychology, \r\n        chapterNumber: number\r\n    ): Promise<DepthRecommendation[]>;\r\n    \r\n    /**\r\n     * キャラクターの一貫性分析\r\n     * 心理プロファイルや履歴に基づいて一貫性を評価します\r\n     * \r\n     * @param character キャラクター\r\n     * @param psychology 心理情報\r\n     * @param chapterNumber 現在の章番号\r\n     * @returns 一貫性分析結果\r\n     */\r\n    analyzeCharacterConsistency(\r\n        character: Character, \r\n        psychology: CharacterPsychology,\r\n        chapterNumber: number\r\n    ): Promise<ConsistencyAnalysis>;\r\n    \r\n    /**\r\n     * キャラクターの動機付け強化推奨\r\n     * キャラクターの動機の深化と説得力向上を図る\r\n     * \r\n     * @param character キャラクター\r\n     * @param psychology 心理情報\r\n     * @returns 動機強化推奨\r\n     */\r\n    enhanceCharacterMotivations(\r\n        character: Character, \r\n        psychology: CharacterPsychology\r\n    ): Promise<MotivationEnhancement[]>;\r\n    \r\n    /**\r\n     * キャラクターアークの最適化推奨\r\n     * 現在のストーリー位置でのキャラクター成長を最適化\r\n     * \r\n     * @param character キャラクター\r\n     * @param psychology 心理情報\r\n     * @param chapterNumber 章番号\r\n     * @returns アーク最適化推奨\r\n     */\r\n    optimizeCharacterArcs(\r\n        character: Character, \r\n        psychology: CharacterPsychology,\r\n        chapterNumber: number\r\n    ): Promise<CharacterArcRecommendation[]>;\r\n    \r\n    /**\r\n     * 関係性ダイナミクス推奨の生成\r\n     * キャラクター間の関係性を深化・最適化する推奨\r\n     * \r\n     * @param character キャラクター\r\n     * @param chapterNumber 章番号\r\n     * @returns 関係性推奨\r\n     */\r\n    suggestRelationshipDynamics(\r\n        character: Character,\r\n        chapterNumber: number\r\n    ): Promise<RelationshipDynamicRecommendation[]>;\r\n    \r\n    /**\r\n     * コントラスト推奨の生成\r\n     * キャラクターの独自性を際立たせる推奨\r\n     * \r\n     * @param character キャラクター\r\n     * @param chapterNumber 章番号\r\n     * @returns コントラスト推奨\r\n     */\r\n    generateContrastRecommendations(\r\n        character: Character,\r\n        chapterNumber: number\r\n    ): Promise<ContrastRecommendation[]>;\r\n    \r\n    /**\r\n     * 複数キャラクターの深化推奨生成\r\n     * 同一章に登場する複数キャラクターの深化推奨\r\n     * \r\n     * @param characters キャラクター配列\r\n     * @param chapterNumber 章番号\r\n     * @param limit 最大推奨数\r\n     * @returns キャラクターIDごとの深化推奨\r\n     */\r\n    generateMultipleCharacterRecommendations(\r\n        characters: Character[],\r\n        chapterNumber: number,\r\n        limit?: number\r\n    ): Promise<{[characterId: string]: DepthRecommendation[]",
            "properties": {
              "character": {
                "name": "character",
                "type": "Character",
                "optional": false
              },
              "psychology": {
                "name": "psychology",
                "type": "CharacterPsychology",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "characters": {
                "name": "characters",
                "type": "Character[]",
                "optional": false
              },
              "limit": {
                "name": "limit",
                "type": "number",
                "optional": true
              },
              "characterId": {
                "name": "characterId",
                "type": "string]: DepthRecommendation[]",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 98
          },
          "file": "lib\\analysis\\enhancement\\character\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "IStyleOptimizationServiceExtended": {
          "system": "analysis",
          "definition": {
            "name": "IStyleOptimizationServiceExtended",
            "body": "/**\r\n   * 一括最適化処理\r\n   * 複数の最適化機能を一度に実行します\r\n   * \r\n   * @param request 一括最適化リクエスト\r\n   * @returns 最適化結果\r\n   */\r\n  bulkOptimize?(request: BulkOptimizationRequest): Promise<StyleOptimizationResult>;\r\n\r\n  /**\r\n   * 最適化履歴の取得\r\n   * 過去の最適化結果を取得します\r\n   * \r\n   * @param chapterNumber 章番号\r\n   * @param limit 取得件数制限\r\n   * @returns 最適化履歴\r\n   */\r\n  getOptimizationHistory?(chapterNumber: number, limit?: number): Promise<StyleOptimizationResult[]>;\r\n\r\n  /**\r\n   * キャッシュのクリア\r\n   * 指定した章または全体のキャッシュを削除します\r\n   * \r\n   * @param chapterNumber 章番号（省略時は全体）\r\n   */\r\n  clearCache?(chapterNumber?: number): Promise<void>;\r\n\r\n  /**\r\n   * サービスの健全性チェック\r\n   * サービスが正常に動作しているかチェックします\r\n   * \r\n   * @returns 健全性チェック結果\r\n   */\r\n  healthCheck?(): Promise<{\r\n    status: 'healthy' | 'degraded' | 'unhealthy';\r\n    details: {\r\n      cacheStatus: string;\r\n      aiServiceStatus: string;\r\n      lastOptimizationTime?: number;",
            "properties": {
              "request": {
                "name": "request",
                "type": "BulkOptimizationRequest): Promise<StyleOptimizationResult>",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number): Promise<void>",
                "optional": true
              },
              "limit": {
                "name": "limit",
                "type": "number): Promise<StyleOptimizationResult[]>",
                "optional": true
              },
              "status": {
                "name": "status",
                "type": "'healthy' | 'degraded' | 'unhealthy'",
                "optional": false
              },
              "details": {
                "name": "details",
                "type": "{",
                "optional": false
              },
              "cacheStatus": {
                "name": "cacheStatus",
                "type": "string",
                "optional": false
              },
              "aiServiceStatus": {
                "name": "aiServiceStatus",
                "type": "string",
                "optional": false
              },
              "lastOptimizationTime": {
                "name": "lastOptimizationTime",
                "type": "number",
                "optional": true
              }
            },
            "isGeneric": true,
            "extendsOther": true,
            "lineNumber": 190
          },
          "file": "lib\\analysis\\enhancement\\style\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "ITensionOptimizationService": {
          "system": "analysis",
          "definition": {
            "name": "ITensionOptimizationService",
            "body": "/**\r\n   * サービスの初期化\r\n   */\r\n  initialize(): Promise<void>;\r\n  \r\n  /**\r\n   * テンション・ペーシング推奨を取得\r\n   * @param chapterNumber 章番号\r\n   * @param genre ジャンル（オプショナル）\r\n   * @param options 追加オプション（オプショナル）\r\n   */\r\n  getTensionPacingRecommendation(\r\n    chapterNumber: number,\r\n    genre?: string,\r\n    options?: any\r\n  ): Promise<TensionPacingRecommendation>;\r\n  \r\n  /**\r\n   * テンション最適化提案を生成\r\n   * @param chapterNumber 章番号\r\n   * @param currentTension 現在のテンション値\r\n   */\r\n  generateTensionOptimizationSuggestions(\r\n    chapterNumber: number,\r\n    currentTension: number\r\n  ): Promise<string[]>;\r\n  \r\n  /**\r\n   * テンション曲線を生成\r\n   * @param totalChapters 総章数\r\n   * @param genre ジャンル（オプショナル）\r\n   */\r\n  generateTensionCurve(\r\n    totalChapters: number,\r\n    genre?: string\r\n  ): Promise<TensionCurvePoint[]>;\r\n  \r\n  /**\r\n   * クライマックス配置の推奨を取得\r\n   * @param totalChapters 総章数\r\n   * @param genre ジャンル（オプショナル）\r\n   */\r\n  recommendClimax(\r\n    totalChapters: number,\r\n    genre?: string\r\n  ): Promise<{\r\n    climaxChapter: number;\r\n    secondaryClimaxChapters: number[];\r\n    reason: string;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "genre": {
                "name": "genre",
                "type": "string",
                "optional": true
              },
              "options": {
                "name": "options",
                "type": "any",
                "optional": true
              },
              "currentTension": {
                "name": "currentTension",
                "type": "number",
                "optional": false
              },
              "totalChapters": {
                "name": "totalChapters",
                "type": "number",
                "optional": false
              },
              "climaxChapter": {
                "name": "climaxChapter",
                "type": "number",
                "optional": false
              },
              "secondaryClimaxChapters": {
                "name": "secondaryClimaxChapters",
                "type": "number[]",
                "optional": false
              },
              "reason": {
                "name": "reason",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 83
          },
          "file": "lib\\analysis\\enhancement\\tension\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "IThemeEnhancementService": {
          "system": "analysis",
          "definition": {
            "name": "IThemeEnhancementService",
            "body": "/**\r\n   * 初期化\r\n   */\r\n  initialize(): Promise<void>;\r\n  \r\n  /**\r\n   * テーマ強化提案の生成\r\n   * テーマ分析結果に基づいて、テーマをより効果的に表現するための提案を生成します。\r\n   * \r\n   * @param themeAnalysis テーマ分析結果\r\n   * @param chapterNumber 章番号\r\n   * @param context コンテキスト情報（任意）\r\n   * @returns テーマ強化提案の配列\r\n   */\r\n  generateThemeEnhancements(\r\n    themeAnalysis: ThemeResonanceAnalysis,\r\n    chapterNumber: number,\r\n    context?: any\r\n  ): Promise<ThemeEnhancement[]>;\r\n  \r\n  /**\r\n   * 文学的技法提案の生成\r\n   * 文学的技法の活用提案を生成します。\r\n   * \r\n   * @param context コンテキスト情報\r\n   * @param chapterNumber 章番号\r\n   * @returns 文学的技法提案\r\n   */\r\n  generateLiteraryInspirations(\r\n    context: any,\r\n    chapterNumber: number\r\n  ): Promise<LiteraryInspiration>;\r\n  \r\n  /**\r\n   * 象徴要素の提案生成\r\n   * テーマを強化するための象徴要素を提案します。\r\n   * \r\n   * @param themes テーマ配列\r\n   * @param chapterNumber 章番号\r\n   * @param genre ジャンル\r\n   * @returns 象徴要素の提案\r\n   */\r\n  suggestSymbolicElements(\r\n    themes: string[],\r\n    chapterNumber: number,\r\n    genre?: string\r\n  ): Promise<SymbolicElement[]>;\r\n  \r\n  /**\r\n   * 伏線機会の検出\r\n   * テキスト内の伏線設置機会を検出します。\r\n   * \r\n   * @param content テキスト内容\r\n   * @param chapterNumber 章番号\r\n   * @param themes テーマ配列\r\n   * @returns 伏線機会の配列\r\n   */\r\n  detectForeshadowingOpportunities(\r\n    content: string,\r\n    chapterNumber: number,\r\n    themes: string[]\r\n  ): Promise<ForeshadowingOpportunity[]>;",
            "properties": {
              "themeAnalysis": {
                "name": "themeAnalysis",
                "type": "ThemeResonanceAnalysis",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "context": {
                "name": "context",
                "type": "any",
                "optional": false
              },
              "themes": {
                "name": "themes",
                "type": "string[]",
                "optional": false
              },
              "genre": {
                "name": "genre",
                "type": "string",
                "optional": true
              },
              "content": {
                "name": "content",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 25
          },
          "file": "lib\\analysis\\enhancement\\theme\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "IChapterAnalysisService": {
          "system": "analysis",
          "definition": {
            "name": "IChapterAnalysisService",
            "body": "/**\r\n   * 章の内容を総合的に分析\r\n   * \r\n   * キャラクター登場、テーマ出現、伏線要素、品質メトリクスなどを\r\n   * 包括的に分析します。結果はキャッシュされます。\r\n   * \r\n   * @param {string",
            "properties": {},
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 29
          },
          "file": "lib\\analysis\\services\\chapter\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "ICharacterAnalysisService": {
          "system": "analysis",
          "definition": {
            "name": "ICharacterAnalysisService",
            "body": "/**\r\n   * キャラクターの総合分析\r\n   * キャラクターの現在の状態、変化、関係性を分析します\r\n   * \r\n   * @param {string",
            "properties": {},
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 16
          },
          "file": "lib\\analysis\\services\\character\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "INarrativeAnalysisService": {
          "system": "analysis",
          "definition": {
            "name": "INarrativeAnalysisService",
            "body": "/**\n   * シーン構造を分析\n   * @param lastChapters 分析対象の章数\n   * @returns シーン構造分析結果\n   */\n  analyzeSceneStructure(lastChapters?: number): Promise<SceneStructureAnalysis>;\n\n  /**\n   * シーン推奨を生成\n   * @param chapterNumber 章番号\n   * @returns シーン推奨の配列\n   */\n  generateSceneRecommendations(chapterNumber: number): Promise<SceneRecommendation[]>;\n\n  /**\n   * 文学的インスピレーションを生成\n   * @param context コンテキスト情報\n   * @param chapterNumber 章番号\n   * @returns 文学的インスピレーション\n   */\n  generateLiteraryInspirations(\n    context: GenerationContext,\n    chapterNumber: number\n  ): Promise<LiteraryInspiration>;\n\n  /**\n   * すべてのターニングポイントを取得\n   * @returns ターニングポイントの配列\n   */\n  getTurningPoints(): TurningPoint[];\n\n  /**\n   * 特定の章のターニングポイントを取得\n   * @param chapterNumber 章番号\n   * @returns ターニングポイント（存在しない場合はnull）\n   */\n  getTurningPointForChapter(chapterNumber: number): TurningPoint | null;\n\n  /**\n   * ジャンルを設定\n   * @param genre ジャンル\n   */\n  setGenre(genre: string): void;\n\n  /**\n   * 現在のジャンルを取得\n   * @returns ジャンル\n   */\n  getGenre(): string;\n\n  /**\n   * 現在のテンションレベルを取得\n   * @returns テンションレベル（0-10）\n   */\n  getCurrentTensionLevel(): number;\n\n  /**\n   * 章の要約を取得\n   * @param chapterNumber 章番号\n   * @returns 要約テキスト（存在しない場合はnull）\n   */\n  getChapterSummary(chapterNumber: number): string | null;",
            "properties": {
              "lastChapters": {
                "name": "lastChapters",
                "type": "number): Promise<SceneStructureAnalysis>",
                "optional": true
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number): string | null",
                "optional": false
              },
              "context": {
                "name": "context",
                "type": "GenerationContext",
                "optional": false
              },
              "genre": {
                "name": "genre",
                "type": "string): void",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 60
          },
          "file": "lib\\analysis\\services\\narrative\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "INarrativeAnalysisServiceFactory": {
          "system": "analysis",
          "definition": {
            "name": "INarrativeAnalysisServiceFactory",
            "body": "/**\n   * 物語分析サービスのインスタンスを作成\n   * @param options 設定オプション\n   * @returns 物語分析サービスのインスタンス\n   */\n  createNarrativeAnalysisService(options?: NarrativeAnalysisOptions): INarrativeAnalysisService;",
            "properties": {
              "options": {
                "name": "options",
                "type": "NarrativeAnalysisOptions): INarrativeAnalysisService",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 130
          },
          "file": "lib\\analysis\\services\\narrative\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "IStyleAnalysisService": {
          "system": "analysis",
          "definition": {
            "name": "IStyleAnalysisService",
            "body": "/**\r\n   * 初期化\r\n   * サービスの初期化処理を行います\r\n   */\r\n  initialize(): Promise<void>;\r\n\r\n  /**\r\n   * 文体分析\r\n   * テキストの文体特性を分析します\r\n   * \r\n   * @param content テキスト内容\r\n   * @returns 文体分析結果\r\n   */\r\n  analyzeStyle(content: string): Promise<StyleAnalysis>;\r\n\r\n  /**\r\n   * 表現パターン分析\r\n   * テキストの表現パターンを分析します\r\n   * \r\n   * @param content テキスト内容\r\n   * @returns 表現パターン分析結果\r\n   */\r\n  analyzeExpressionPatterns(content: string): Promise<ExpressionPatterns>;\r\n\r\n  /**\r\n   * 主語パターン分析\r\n   * テキストの主語使用パターンを分析します\r\n   * \r\n   * @param content テキスト内容\r\n   * @returns 主語パターン分析結果\r\n   */\r\n  analyzeSubjectPatterns(content: string): Promise<SubjectPatternAnalysis>;\r\n\r\n  /**\r\n   * 表現分析\r\n   * テキスト内の特徴的な表現パターン、繰り返し使用されている表現などを\r\n   * 検出し分析します。\r\n   * \r\n   * @param content テキスト内容\r\n   * @returns 分析結果\r\n   */\r\n  analyzeExpressions(content: string): Promise<ExpressionUsageResult>;\r\n\r\n  /**\r\n   * スタイル改善提案の生成\r\n   * \r\n   * 章分析結果に基づいてスタイル改善の提案を生成します\r\n   * \r\n   * @param analysis 章分析結果\r\n   * @param chapterNumber 章番号\r\n   * @returns 改善提案の配列\r\n   */\r\n  generateStyleImprovementSuggestions?(analysis: any, chapterNumber: number): Promise<string[]>;",
            "properties": {
              "content": {
                "name": "content",
                "type": "string): Promise<ExpressionUsageResult>",
                "optional": false
              },
              "analysis": {
                "name": "analysis",
                "type": "any",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number): Promise<string[]>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 39
          },
          "file": "lib\\analysis\\services\\style\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "IThemeAnalysisService": {
          "system": "analysis",
          "definition": {
            "name": "IThemeAnalysisService",
            "body": "/**\r\n   * テーマ共鳴分析を実行\r\n   * テキスト内のテーマ表現を分析し、各テーマの強度や表現方法を評価します\r\n   * \r\n   * @param content 分析対象のテキスト\r\n   * @param themes テーマの配列\r\n   * @returns テーマ共鳴分析結果\r\n   */\r\n  analyzeThemeResonance(content: string, themes: string[]): Promise<ThemeResonanceAnalysis>;\r\n\r\n  /**\r\n   * 伏線処理を実行\r\n   * 章の内容から伏線を検出、追跡、生成します\r\n   * \r\n   * @param content 章コンテンツ\r\n   * @param chapterNumber 章番号\r\n   * @returns 処理結果\r\n   */\r\n  processForeshadowing(content: string, chapterNumber: number): Promise<{\r\n    resolvedForeshadowing: ForeshadowingElement[];\r\n    generatedCount: number;\r\n    totalActive: number;",
            "properties": {
              "content": {
                "name": "content",
                "type": "string",
                "optional": false
              },
              "themes": {
                "name": "themes",
                "type": "string[]): Promise<ThemeResonanceAnalysis>",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number): Promise<{",
                "optional": false
              },
              "resolvedForeshadowing": {
                "name": "resolvedForeshadowing",
                "type": "ForeshadowingElement[]",
                "optional": false
              },
              "generatedCount": {
                "name": "generatedCount",
                "type": "number",
                "optional": false
              },
              "totalActive": {
                "name": "totalActive",
                "type": "number",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 26
          },
          "file": "lib\\analysis\\services\\theme\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "IThemeAnalysisServiceFactory": {
          "system": "analysis",
          "definition": {
            "name": "IThemeAnalysisServiceFactory",
            "body": "/**\r\n   * テーマ分析サービスのインスタンスを作成\r\n   * @returns テーマ分析サービスのインスタンス\r\n   */\r\n  createThemeAnalysisService(): IThemeAnalysisService;",
            "properties": {},
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 146
          },
          "file": "lib\\analysis\\services\\theme\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "IMemoryManager": {
          "system": "analysis",
          "definition": {
            "name": "IMemoryManager",
            "body": "/**\r\n   * 長期記憶を取得\r\n   * @returns 長期記憶へのアクセスオブジェクト\r\n   */\r\n  getLongTermMemory(): any;\r\n\r\n  /**\r\n   * 物語の状態を取得\r\n   * @param chapterNumber 章番号\r\n   * @returns 物語の状態オブジェクト\r\n   */\r\n  getNarrativeState(chapterNumber: number): Promise<any>;\r\n\r\n  /**\r\n   * 最近の章のメモリを取得\r\n   * @param startChapter 開始章番号\r\n   * @param count 取得する章数\r\n   * @returns 章のメモリ配列\r\n   */\r\n  getRecentChapterMemories(startChapter: number, count: number): Promise<any[]>;\r\n\r\n  /**\r\n   * 現在のアークを取得\r\n   * @param chapterNumber 章番号\r\n   * @returns 現在のアーク情報\r\n   */\r\n  getCurrentArc(chapterNumber: number): Promise<any>;\r\n\r\n  /**\r\n   * 伏線状態を更新\r\n   * @param resolvedForeshadowing 解決された伏線の配列\r\n   * @param chapterNumber 章番号\r\n   * @returns 更新完了後に解決するPromise\r\n   */\r\n  updateForeshadowingStatus(resolvedForeshadowing: any[], chapterNumber: number): Promise<void>;",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number): Promise<void>",
                "optional": false
              },
              "startChapter": {
                "name": "startChapter",
                "type": "number",
                "optional": false
              },
              "count": {
                "name": "count",
                "type": "number): Promise<any[]>",
                "optional": false
              },
              "resolvedForeshadowing": {
                "name": "resolvedForeshadowing",
                "type": "any[]",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 158
          },
          "file": "lib\\analysis\\services\\theme\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "ICharacterService": {
          "system": "characters",
          "definition": {
            "name": "ICharacterService",
            "body": "/**\r\n     * キャラクター作成\r\n     * @param data キャラクターデータ\r\n     * @returns 作成されたキャラクター\r\n     */\r\n    createCharacter(data: CharacterData): Promise<Character>;\r\n  \r\n    /**\r\n     * キャラクター取得\r\n     * @param id キャラクターID\r\n     * @returns キャラクターオブジェクトまたはnull\r\n     */\r\n    getCharacter(id: string): Promise<Character | null>;\r\n  \r\n    /**\r\n     * キャラクター更新\r\n     * @param id キャラクターID\r\n     * @param updates 更新データ\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    updateCharacter(id: string, updates: Partial<CharacterData>): Promise<Character>;\r\n  \r\n    /**\r\n     * キャラクター登場記録\r\n     * @param id キャラクターID\r\n     * @param chapterNumber 章番号\r\n     * @param summary 概要\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    recordAppearance(id: string, chapterNumber: number, summary: string): Promise<Character>;\r\n  \r\n    /**\r\n     * インタラクション記録\r\n     * @param id キャラクターID\r\n     * @param targetId 対象キャラクターID\r\n     * @param type インタラクションタイプ\r\n     * @param data 追加データ\r\n     */\r\n    recordInteraction(id: string, targetId: string, type: string, data: any): Promise<void>;\r\n  \r\n    /**\r\n     * キャラクター発展処理\r\n     * @param id キャラクターID\r\n     * @param events 章イベント配列\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    processCharacterDevelopment(id: string, events: ChapterEvent[]): Promise<Character>;\r\n  \r\n    /**\r\n     * キャラクター設定の検証\r\n     * @param character キャラクター\r\n     * @returns 検証結果\r\n     */\r\n    validateCharacter(character: Character): Promise<ValidationResult>;\r\n  \r\n    /**\r\n     * キャラクター状態の更新\r\n     * @param id キャラクターID\r\n     * @param state 新しい状態\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    updateCharacterState(id: string, state: Partial<CharacterState>): Promise<Character>;",
            "properties": {
              "data": {
                "name": "data",
                "type": "any): Promise<void>",
                "optional": false
              },
              "id": {
                "name": "id",
                "type": "string",
                "optional": false
              },
              "updates": {
                "name": "updates",
                "type": "Partial<CharacterData>): Promise<Character>",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number",
                "optional": false
              },
              "summary": {
                "name": "summary",
                "type": "string): Promise<Character>",
                "optional": false
              },
              "targetId": {
                "name": "targetId",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "events": {
                "name": "events",
                "type": "ChapterEvent[]): Promise<Character>",
                "optional": false
              },
              "character": {
                "name": "character",
                "type": "Character): Promise<ValidationResult>",
                "optional": false
              },
              "state": {
                "name": "state",
                "type": "Partial<CharacterState>): Promise<Character>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 277
          },
          "file": "lib\\characters\\core\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "IDetectionService": {
          "system": "characters",
          "definition": {
            "name": "IDetectionService",
            "body": "/**\r\n     * コンテンツ内のキャラクター検出\r\n     * @param content 検索対象のコンテンツ\r\n     * @returns 検出されたキャラクターの配列\r\n     */\r\n    detectCharactersInContent(content: string): Promise<Character[]>;\r\n  \r\n    /**\r\n     * キャラクターの台詞抽出\r\n     * @param character キャラクター\r\n     * @param content 抽出対象のコンテンツ\r\n     * @returns 抽出された台詞の配列\r\n     */\r\n    extractCharacterDialog(character: Character, content: string): Promise<string[]>;\r\n  \r\n    /**\r\n     * キャラクターへの言及検出\r\n     * @param character キャラクター\r\n     * @param content 検出対象のコンテンツ\r\n     * @returns 言及テキストの配列\r\n     */\r\n    detectCharacterMentions(character: Character, content: string): Promise<string[]>;\r\n  \r\n    /**\r\n     * キャラクター登場確認\r\n     * @param characterId キャラクターID\r\n     * @param content 確認対象のコンテンツ\r\n     * @returns 登場しているかどうか\r\n     */\r\n    verifyCharacterAppearance(characterId: string, content: string): Promise<boolean>;\r\n  \r\n    /**\r\n     * コンテンツ内のインタラクション検出\r\n     * @param content 検出対象のコンテンツ\r\n     * @returns 検出されたインタラクション情報\r\n     */\r\n    detectInteractions(content: string): Promise<any[]>;",
            "properties": {
              "content": {
                "name": "content",
                "type": "string): Promise<any[]>",
                "optional": false
              },
              "character": {
                "name": "character",
                "type": "Character",
                "optional": false
              },
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 346
          },
          "file": "lib\\characters\\core\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "IEvolutionService": {
          "system": "characters",
          "definition": {
            "name": "IEvolutionService",
            "body": "/**\r\n     * キャラクター発展処理\r\n     * @param character キャラクター\r\n     * @param events 章イベント配列\r\n     * @returns キャラクター発展情報\r\n     */\r\n    processCharacterDevelopment(character: Character, events: ChapterEvent[]): Promise<CharacterDevelopment>;\r\n  \r\n    /**\r\n     * 発展経路生成\r\n     * @param character キャラクター\r\n     * @returns 発展経路\r\n     */\r\n    generateDevelopmentPath(character: Character): Promise<DevelopmentPath>;\r\n  \r\n    /**\r\n     * 成長計画適用\r\n     * @param characterId キャラクターID\r\n     * @param chapterNumber 章番号\r\n     * @returns 成長結果\r\n     */\r\n    applyGrowthPlan(characterId: string, chapterNumber: number): Promise<GrowthResult>;\r\n  \r\n    /**\r\n     * 発展段階評価\r\n     * @param currentStage 現在の段階\r\n     * @param development 発展情報\r\n     * @param type 評価タイプ\r\n     * @returns 新しい発展段階\r\n     */\r\n    evaluateDevelopmentStage(currentStage: number, development: CharacterDevelopment, type: string): number;\r\n  \r\n    /**\r\n     * 次のマイルストーン推定\r\n     * @param characterId キャラクターID\r\n     * @returns 次のマイルストーン情報\r\n     */\r\n    predictNextMilestone(characterId: string): Promise<any>;",
            "properties": {
              "character": {
                "name": "character",
                "type": "Character): Promise<DevelopmentPath>",
                "optional": false
              },
              "events": {
                "name": "events",
                "type": "ChapterEvent[]): Promise<CharacterDevelopment>",
                "optional": false
              },
              "characterId": {
                "name": "characterId",
                "type": "string): Promise<any>",
                "optional": false
              },
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number): Promise<GrowthResult>",
                "optional": false
              },
              "currentStage": {
                "name": "currentStage",
                "type": "number",
                "optional": false
              },
              "development": {
                "name": "development",
                "type": "CharacterDevelopment",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "string): number",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 390
          },
          "file": "lib\\characters\\core\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "IPsychologyService": {
          "system": "characters",
          "definition": {
            "name": "IPsychologyService",
            "body": "/**\r\n     * キャラクター心理分析\r\n     * @param character キャラクター\r\n     * @param recentEvents 最近のイベント配列\r\n     * @returns キャラクター心理情報\r\n     */\r\n    analyzeCharacterPsychology(character: Character, recentEvents: any[]): Promise<CharacterPsychology>;\r\n  \r\n    /**\r\n     * 関係性心理分析\r\n     * @param characters キャラクター配列\r\n     * @returns キャラクター間の心理的態度マップ\r\n     */\r\n    analyzeRelationshipPsychology(characters: Character[]): Promise<Map<string, Map<string, any>>>;\r\n  \r\n    /**\r\n     * 行動予測\r\n     * @param character キャラクター\r\n     * @param psychology 心理情報\r\n     * @param situations 状況配列\r\n     * @returns 予測される行動情報\r\n     */\r\n    predictBehaviors(character: Character, psychology: CharacterPsychology, situations: string[]): Promise<any>;\r\n  \r\n    /**\r\n     * 感情変化のシミュレーション\r\n     * @param characterId キャラクターID\r\n     * @param event イベント情報\r\n     * @returns 感情変化予測\r\n     */\r\n    simulateEmotionalResponse(characterId: string, event: any): Promise<any>;",
            "properties": {
              "character": {
                "name": "character",
                "type": "Character",
                "optional": false
              },
              "recentEvents": {
                "name": "recentEvents",
                "type": "any[]): Promise<CharacterPsychology>",
                "optional": false
              },
              "characters": {
                "name": "characters",
                "type": "Character[]): Promise<Map<string",
                "optional": false
              },
              "psychology": {
                "name": "psychology",
                "type": "CharacterPsychology",
                "optional": false
              },
              "situations": {
                "name": "situations",
                "type": "string[]): Promise<any>",
                "optional": false
              },
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "event": {
                "name": "event",
                "type": "any): Promise<any>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 435
          },
          "file": "lib\\characters\\core\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "IRelationshipService": {
          "system": "characters",
          "definition": {
            "name": "IRelationshipService",
            "body": "/**\r\n     * 関係性更新\r\n     * @param char1Id 1人目のキャラクターID\r\n     * @param char2Id 2人目のキャラクターID\r\n     * @param type 関係性タイプ\r\n     * @param strength 関係性の強さ\r\n     */\r\n    updateRelationship(char1Id: string, char2Id: string, type: string, strength: number): Promise<void>;\r\n  \r\n    /**\r\n     * 関連キャラクター取得\r\n     * @param characterId キャラクターID\r\n     * @returns 関連するキャラクターIDの配列\r\n     */\r\n    getConnectedCharacters(characterId: string): Promise<string[]>;\r\n  \r\n    /**\r\n     * キャラクター関係性取得\r\n     * @param characterId キャラクターID\r\n     * @returns 関係性の配列\r\n     */\r\n    getCharacterRelationships(characterId: string): Promise<RelationshipResponse>;\r\n  \r\n    /**\r\n     * 関係性動態分析\r\n     * @returns 関係性分析結果\r\n     */\r\n    analyzeRelationshipDynamics(): Promise<RelationshipAnalysis>;\r\n  \r\n    /**\r\n     * 関係性クラスター検出\r\n     * @returns キャラクタークラスターの配列\r\n     */\r\n    detectRelationshipClusters(): Promise<CharacterCluster[]>;\r\n  \r\n    /**\r\n     * 対立関係検出\r\n     * @returns 対立関係情報の配列\r\n     */\r\n    detectTensions(): Promise<any[]>;",
            "properties": {
              "char1Id": {
                "name": "char1Id",
                "type": "string",
                "optional": false
              },
              "char2Id": {
                "name": "char2Id",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "strength": {
                "name": "strength",
                "type": "number): Promise<void>",
                "optional": false
              },
              "characterId": {
                "name": "characterId",
                "type": "string): Promise<RelationshipResponse>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 473
          },
          "file": "lib\\characters\\core\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "IParameterService": {
          "system": "characters",
          "definition": {
            "name": "IParameterService",
            "body": "/**\r\n     * キャラクターパラメータ初期化\r\n     * @param characterId キャラクターID\r\n     * @param defaultValue デフォルト値\r\n     * @returns 初期化されたパラメータ配列\r\n     */\r\n    initializeCharacterParameters(characterId: string, defaultValue: number): Promise<CharacterParameter[]>;\r\n  \r\n    /**\r\n     * キャラクターパラメータ取得\r\n     * @param characterId キャラクターID\r\n     * @returns パラメータの配列\r\n     */\r\n    getCharacterParameters(characterId: string): Promise<CharacterParameter[]>;\r\n  \r\n    /**\r\n     * パラメータ値設定\r\n     * @param characterId キャラクターID\r\n     * @param parameterId パラメータID\r\n     * @param value 新しい値\r\n     * @returns 更新されたパラメータまたはnull\r\n     */\r\n    setParameterValue(characterId: string, parameterId: string, value: number): Promise<CharacterParameter | null>;\r\n  \r\n    /**\r\n     * パラメータ修正\r\n     * @param characterId キャラクターID\r\n     * @param parameterId パラメータID\r\n     * @param delta 変化量\r\n     * @returns 更新されたパラメータまたはnull\r\n     */\r\n    modifyParameter(characterId: string, parameterId: string, delta: number): Promise<CharacterParameter | null>;\r\n  \r\n    /**\r\n     * カテゴリ別パラメータ取得\r\n     * @param characterId キャラクターID\r\n     * @param category カテゴリ\r\n     * @returns パラメータの配列\r\n     */\r\n    getParametersByCategory(characterId: string, category: string): Promise<CharacterParameter[]>;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "defaultValue": {
                "name": "defaultValue",
                "type": "number): Promise<CharacterParameter[]>",
                "optional": false
              },
              "parameterId": {
                "name": "parameterId",
                "type": "string",
                "optional": false
              },
              "value": {
                "name": "value",
                "type": "number): Promise<CharacterParameter | null>",
                "optional": false
              },
              "delta": {
                "name": "delta",
                "type": "number): Promise<CharacterParameter | null>",
                "optional": false
              },
              "category": {
                "name": "category",
                "type": "string): Promise<CharacterParameter[]>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 520
          },
          "file": "lib\\characters\\core\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "ISkillService": {
          "system": "characters",
          "definition": {
            "name": "ISkillService",
            "body": "/**\r\n     * キャラクタースキル取得\r\n     * @param characterId キャラクターID\r\n     * @returns スキルの配列\r\n     */\r\n    getCharacterSkills(characterId: string): Promise<Skill[]>;\r\n  \r\n    /**\r\n     * スキル取得\r\n     * @param characterId キャラクターID\r\n     * @param skillId スキルID\r\n     * @returns スキルまたはnull\r\n     */\r\n    acquireSkill(characterId: string, skillId: string, forced?: boolean): Promise<boolean>;\r\n  \r\n    /**\r\n     * スキルレベル更新\r\n     * @param characterId キャラクターID\r\n     * @param skillId スキルID\r\n     * @param newLevel 新しいレベル\r\n     * @returns 成功したかどうか\r\n     */\r\n    updateSkillLevel(characterId: string, skillId: string, newLevel: number): Promise<boolean>;\r\n  \r\n    /**\r\n     * 習熟度増加\r\n     * @param characterId キャラクターID\r\n     * @param skillId スキルID\r\n     * @param amount 増加量\r\n     * @returns 成功したかどうか\r\n     */\r\n    increaseProficiency(characterId: string, skillId: string, amount: number): Promise<boolean>;\r\n  \r\n    /**\r\n     * スキル習得要件確認\r\n     * @param characterId キャラクターID\r\n     * @param skillId スキルID\r\n     * @returns 要件を満たすかどうか\r\n     */\r\n    checkSkillRequirements(characterId: string, skillId: string): Promise<boolean>;",
            "properties": {
              "characterId": {
                "name": "characterId",
                "type": "string",
                "optional": false
              },
              "skillId": {
                "name": "skillId",
                "type": "string): Promise<boolean>",
                "optional": false
              },
              "forced": {
                "name": "forced",
                "type": "boolean): Promise<boolean>",
                "optional": true
              },
              "newLevel": {
                "name": "newLevel",
                "type": "number): Promise<boolean>",
                "optional": false
              },
              "amount": {
                "name": "amount",
                "type": "number): Promise<boolean>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 567
          },
          "file": "lib\\characters\\core\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "ICharacterManager": {
          "system": "characters",
          "definition": {
            "name": "ICharacterManager",
            "body": "/**\r\n     * キャラクター作成\r\n     * @param data キャラクターデータ\r\n     * @returns 作成されたキャラクター\r\n     */\r\n    createCharacter(data: CharacterData): Promise<Character>;\r\n  \r\n    /**\r\n     * キャラクター取得\r\n     * @param id キャラクターID\r\n     * @returns キャラクター\r\n     */\r\n    getCharacter(id: string): Promise<Character | null>;\r\n  \r\n    /**\r\n     * キャラクター更新\r\n     * @param id キャラクターID\r\n     * @param data 更新データ\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    updateCharacter(id: string, data: Partial<CharacterData>): Promise<Character>;\r\n  \r\n    /**\r\n     * すべてのキャラクター取得\r\n     * @returns キャラクターの配列\r\n     */\r\n    getAllCharacters(): Promise<Character[]>;\r\n  \r\n    /**\r\n     * コンテンツ内のキャラクター検出\r\n     * @param content 検出対象のコンテンツ\r\n     * @returns 検出されたキャラクターの配列\r\n     */\r\n    detectCharactersInContent(content: string): Promise<Character[]>;\r\n  \r\n    /**\r\n     * キャラクター発展処理\r\n     * @param id キャラクターID\r\n     * @param events 章イベント配列\r\n     * @returns 更新されたキャラクター\r\n     */\r\n    processCharacterDevelopment(id: string, events: ChapterEvent[]): Promise<Character>;\r\n  \r\n    /**\r\n     * 関係性更新\r\n     * @param char1Id 1人目のキャラクターID\r\n     * @param char2Id 2人目のキャラクターID\r\n     * @param type 関係性タイプ\r\n     * @param strength 関係性の強さ\r\n     */\r\n    updateRelationship(char1Id: string, char2Id: string, type: string, strength: number): Promise<void>;\r\n  \r\n    // /**\r\n    //  * キャラクター分析\r\n    //  * @param id キャラクターID\r\n    //  * @returns 分析結果\r\n    //  */\r\n    // analyzeCharacter(id: string): Promise<any>;",
            "properties": {
              "data": {
                "name": "data",
                "type": "Partial<CharacterData>): Promise<Character>",
                "optional": false
              },
              "id": {
                "name": "id",
                "type": "string): Promise<any>",
                "optional": false
              },
              "content": {
                "name": "content",
                "type": "string): Promise<Character[]>",
                "optional": false
              },
              "events": {
                "name": "events",
                "type": "ChapterEvent[]): Promise<Character>",
                "optional": false
              },
              "char1Id": {
                "name": "char1Id",
                "type": "string",
                "optional": false
              },
              "char2Id": {
                "name": "char2Id",
                "type": "string",
                "optional": false
              },
              "type": {
                "name": "type",
                "type": "string",
                "optional": false
              },
              "strength": {
                "name": "strength",
                "type": "number): Promise<void>",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 789
          },
          "file": "lib\\characters\\core\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "IIntegrationComponent": {
          "system": "memory",
          "definition": {
            "name": "IIntegrationComponent",
            "body": "// ✅ export を削除\r\n  initialize(): Promise<void>;\r\n  getDiagnostics(): Promise<DiagnosticsResult>;\r\n  cleanup(): Promise<void>;",
            "properties": {},
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 74
          },
          "file": "lib\\memory\\core\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "ICacheCoordinator": {
          "system": "memory",
          "definition": {
            "name": "ICacheCoordinator",
            "body": "// ✅ export を削除\r\n  invalidateChapterCache(chapterNumber: number): Promise<void>;\r\n  validateCacheHealth(): Promise<{ isHealthy: boolean; issues: string[]",
            "properties": {
              "chapterNumber": {
                "name": "chapterNumber",
                "type": "number): Promise<void>",
                "optional": false
              },
              "isHealthy": {
                "name": "isHealthy",
                "type": "boolean",
                "optional": false
              },
              "issues": {
                "name": "issues",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": true,
            "lineNumber": 106
          },
          "file": "lib\\memory\\core\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "IUnifiedMemoryManager": {
          "system": "memory",
          "definition": {
            "name": "IUnifiedMemoryManager",
            "body": "// ✅ export を削除\r\n  // 基本操作\r\n  initialize(): Promise<void>;\r\n  addChapter(chapter: Chapter): Promise<OperationResult>;\r\n  save(): Promise<void>;\r\n  cleanup(): Promise<void>;\r\n  \r\n  // 診断・監視\r\n  performComprehensiveDiagnostic(): Promise<ComprehensiveDiagnosticResult>;\r\n  getSystemStatus(): Promise<{\r\n    shortTerm: StatusResult;\r\n    midTerm: StatusResult;\r\n    longTerm: StatusResult;\r\n    integration: StatusResult;",
            "properties": {
              "chapter": {
                "name": "chapter",
                "type": "Chapter): Promise<OperationResult>",
                "optional": false
              },
              "shortTerm": {
                "name": "shortTerm",
                "type": "StatusResult",
                "optional": false
              },
              "midTerm": {
                "name": "midTerm",
                "type": "StatusResult",
                "optional": false
              },
              "longTerm": {
                "name": "longTerm",
                "type": "StatusResult",
                "optional": false
              },
              "integration": {
                "name": "integration",
                "type": "StatusResult",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 337
          },
          "file": "lib\\memory\\core\\interfaces.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "IntegrationDiagnostics": {
          "system": "memory",
          "definition": {
            "name": "IntegrationDiagnostics",
            "body": "operational: boolean;\n    efficiency: number;\n    errorRate: number;\n    lastOptimization: string;\n    recommendations: string[];",
            "properties": {
              "operational": {
                "name": "operational",
                "type": "boolean",
                "optional": false
              },
              "efficiency": {
                "name": "efficiency",
                "type": "number",
                "optional": false
              },
              "errorRate": {
                "name": "errorRate",
                "type": "number",
                "optional": false
              },
              "lastOptimization": {
                "name": "lastOptimization",
                "type": "string",
                "optional": false
              },
              "recommendations": {
                "name": "recommendations",
                "type": "string[]",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 488
          },
          "file": "lib\\memory\\core\\types.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "SystemIntegrationStatsRecord": {
          "system": "memory",
          "definition": {
            "name": "SystemIntegrationStatsRecord",
            "body": "integrationType: string;\n    efficiency: number;\n    dataVolume: number;\n    timestamp: string;",
            "properties": {
              "integrationType": {
                "name": "integrationType",
                "type": "string",
                "optional": false
              },
              "efficiency": {
                "name": "efficiency",
                "type": "number",
                "optional": false
              },
              "dataVolume": {
                "name": "dataVolume",
                "type": "number",
                "optional": false
              },
              "timestamp": {
                "name": "timestamp",
                "type": "string",
                "optional": false
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 696
          },
          "file": "lib\\memory\\core\\types.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "ManagerConstructorOptions": {
          "system": "memory",
          "definition": {
            "name": "ManagerConstructorOptions",
            "body": "geminiClient?: GeminiClient;",
            "properties": {
              "geminiClient": {
                "name": "geminiClient",
                "type": "GeminiClient",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 97
          },
          "file": "lib\\memory\\long-term\\types.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "IManager": {
          "system": "memory",
          "definition": {
            "name": "IManager",
            "body": "initialize(): Promise<void>;\r\n    updateFromChapter(chapter: Chapter, options?: UpdateOptions): Promise<void>;\r\n    save(): Promise<void>;",
            "properties": {
              "chapter": {
                "name": "chapter",
                "type": "Chapter",
                "optional": false
              },
              "options": {
                "name": "options",
                "type": "UpdateOptions): Promise<void>",
                "optional": true
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 115
          },
          "file": "lib\\memory\\long-term\\types.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "IParameterManager": {
          "system": "parameters",
          "definition": {
            "name": "IParameterManager",
            "body": "/**\r\n   * 初期化処理を実行\r\n   * 各種ファイルの読み込みとデータの準備を行う\r\n   */\r\n  initialize(): Promise<void>;\r\n  \r\n  /**\r\n   * 現在のパラメータを取得\r\n   * @returns 現在のパラメータのコピー\r\n   */\r\n  getParameters(): SystemParameters;\r\n  \r\n  /**\r\n   * 指定されたファイルからパラメータを読み込む\r\n   * @param filePath パラメータファイルのパス\r\n   * @returns 読み込まれたパラメータ\r\n   */\r\n  loadParameters(filePath: string): Promise<SystemParameters>;\r\n  \r\n  /**\r\n   * 現在のパラメータをファイルに保存\r\n   * @param filePath 保存先ファイルパス（省略時はデフォルト）\r\n   * @returns 保存成功時にtrue\r\n   */\r\n  saveParameters(filePath?: string): Promise<boolean>;\r\n  \r\n  /**\r\n   * JSONテキストからパラメータをインポート\r\n   * @param jsonContent JSONテキスト\r\n   * @returns インポート成功時にtrue\r\n   */\r\n  importParameters(jsonContent: string): Promise<boolean>;\r\n  \r\n  /**\r\n   * 現在のパラメータをJSON形式にエクスポート\r\n   * @returns エクスポートされたJSONテキスト\r\n   */\r\n  exportParameters(): string;\r\n  \r\n  /**\r\n   * 単一パラメータの値を更新\r\n   * @param path パラメータのパス（ドット区切り）\r\n   * @param value 新しい値\r\n   */\r\n  updateParameter(path: string, value: any): void;\r\n  \r\n  /**\r\n   * すべてのパラメータをデフォルト値にリセット\r\n   */\r\n  resetToDefaults(): void;\r\n  \r\n  /**\r\n   * 指定されたプリセットを適用\r\n   * @param presetName プリセット名\r\n   * @returns 適用成功時にtrue\r\n   */\r\n  applyPreset(presetName: string): boolean;\r\n  \r\n  /**\r\n   * 現在のパラメータをプリセットとして保存\r\n   * @param name プリセット名\r\n   * @param description プリセットの説明\r\n   * @returns 保存成功時にtrue\r\n   */\r\n  saveAsPreset(name: string, description?: string): Promise<boolean>;\r\n  \r\n  /**\r\n   * 利用可能なプリセット名の一覧を取得\r\n   * @returns プリセット名の配列\r\n   */\r\n  getPresets(): string[];\r\n  \r\n  /**\r\n   * 利用可能なプリセットの詳細情報を取得\r\n   * @returns プリセット情報の配列\r\n   */\r\n  getPresetDetails(): ParameterPreset[];\r\n  \r\n  /**\r\n   * パラメータ変更イベントの購読\r\n   * @param callback 変更通知を受け取るコールバック関数\r\n   */\r\n  onParameterChanged(callback: (path: string, value: any) => void): void;\r\n  \r\n  /**\r\n   * パラメータ変更リスナーの削除\r\n   * @param callback 削除するコールバック関数\r\n   */\r\n  removeParameterChangedListener(callback: (path: string, value: any) => void): void;",
            "properties": {
              "filePath": {
                "name": "filePath",
                "type": "string): Promise<boolean>",
                "optional": true
              },
              "jsonContent": {
                "name": "jsonContent",
                "type": "string): Promise<boolean>",
                "optional": false
              },
              "path": {
                "name": "path",
                "type": "string",
                "optional": false
              },
              "value": {
                "name": "value",
                "type": "any) => void): void",
                "optional": false
              },
              "presetName": {
                "name": "presetName",
                "type": "string): boolean",
                "optional": false
              },
              "name": {
                "name": "name",
                "type": "string",
                "optional": false
              },
              "description": {
                "name": "description",
                "type": "string): Promise<boolean>",
                "optional": true
              },
              "callback": {
                "name": "callback",
                "type": "(path: string",
                "optional": false
              }
            },
            "isGeneric": true,
            "extendsOther": false,
            "lineNumber": 7
          },
          "file": "lib\\parameters\\types.ts",
          "category": "SYSTEM_INTEGRATION"
        },
        "BridgeAnalysisResult": {
          "system": "plot",
          "definition": {
            "name": "BridgeAnalysisResult",
            "body": "plotProgressAlignment: number;     // プロット進行の一致度 (0-1)\r\n  suggestedAdjustments: string[];    // 提案される調整\r\n  keyElementsForNext: string[];      // 次に重要な要素\r\n  narrativeDirection: string;        // 物語の方向性\r\n  tensionProjection: number;         // 緊張度の予測 (1-10)\r\n  continuityElements?: string[];     // 継続性を保つべき要素\r\n  recommendedPacing?: string;        // 推奨されるペース",
            "properties": {
              "plotProgressAlignment": {
                "name": "plotProgressAlignment",
                "type": "number",
                "optional": false
              },
              "suggestedAdjustments": {
                "name": "suggestedAdjustments",
                "type": "string[]",
                "optional": false
              },
              "keyElementsForNext": {
                "name": "keyElementsForNext",
                "type": "string[]",
                "optional": false
              },
              "narrativeDirection": {
                "name": "narrativeDirection",
                "type": "string",
                "optional": false
              },
              "tensionProjection": {
                "name": "tensionProjection",
                "type": "number",
                "optional": false
              },
              "continuityElements": {
                "name": "continuityElements",
                "type": "string[]",
                "optional": true
              },
              "recommendedPacing": {
                "name": "recommendedPacing",
                "type": "string",
                "optional": true
              }
            },
            "isGeneric": false,
            "extendsOther": false,
            "lineNumber": 93
          },
          "file": "lib\\plot\\bridge-types.ts",
          "category": "SYSTEM_INTEGRATION"
        }
      },
      "dataFlowModels": {
        "inputModels": "DATA_INPUT_TYPE_ANALYSIS",
        "processingModels": "DATA_PROCESSING_TYPE_ANALYSIS",
        "outputModels": "DATA_OUTPUT_TYPE_ANALYSIS",
        "transformationModels": "DATA_TRANSFORMATION_TYPE_ANALYSIS"
      }
    },
    "optimizationOpportunities": {
      "typeConsolidation": [
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "ImplementationStep",
          "systems": [
            "analysis",
            "memory"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "TensionPacingRecommendation",
          "systems": [
            "analysis",
            "memory"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "ThemeResonanceAnalysis",
          "systems": [
            "analysis",
            "memory"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "TensionRecommendation",
          "systems": [
            "analysis",
            "memory"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "PacingRecommendation",
          "systems": [
            "analysis",
            "memory"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "Relationship",
          "systems": [
            "characters",
            "memory"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "CharacterState",
          "systems": [
            "characters",
            "memory"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "CharacterState",
          "systems": [
            "characters",
            "plot"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "CharacterChangeInfo",
          "systems": [
            "characters",
            "memory"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "CharacterMetadata",
          "systems": [
            "characters",
            "memory"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "PlotContext",
          "systems": [
            "characters",
            "plot"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "NarrativeState",
          "systems": [
            "characters",
            "memory"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "ChapterEmotionAnalysis",
          "systems": [
            "characters",
            "memory"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "EmotionalArcDesign",
          "systems": [
            "characters",
            "memory"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "ValidationResult",
          "systems": [
            "characters",
            "memory"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "ComponentStatus",
          "systems": [
            "learning-journey",
            "plot"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "PerformanceMetrics",
          "systems": [
            "memory",
            "plot"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "CharacterMetadata",
          "systems": [
            "memory",
            "characters"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "ValidationResult",
          "systems": [
            "memory",
            "characters"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "ImplementationStep",
          "systems": [
            "memory",
            "analysis"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "CharacterChangeInfo",
          "systems": [
            "memory",
            "characters"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "CharacterState",
          "systems": [
            "memory",
            "characters"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "CharacterState",
          "systems": [
            "memory",
            "plot"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "Relationship",
          "systems": [
            "memory",
            "characters"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "EmotionalCurvePoint",
          "systems": [
            "memory",
            "plot"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "ChapterEmotionAnalysis",
          "systems": [
            "memory",
            "characters"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "EmotionalArcDesign",
          "systems": [
            "memory",
            "characters"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "TensionRecommendation",
          "systems": [
            "memory",
            "analysis"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "PacingRecommendation",
          "systems": [
            "memory",
            "analysis"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "TensionPacingRecommendation",
          "systems": [
            "memory",
            "analysis"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "ThemeResonanceAnalysis",
          "systems": [
            "memory",
            "analysis"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "NarrativeState",
          "systems": [
            "memory",
            "characters"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "CharacterState",
          "systems": [
            "plot",
            "characters"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "CharacterState",
          "systems": [
            "plot",
            "memory"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "ComponentStatus",
          "systems": [
            "plot",
            "learning-journey"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "PerformanceMetrics",
          "systems": [
            "plot",
            "memory"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "EmotionalCurvePoint",
          "systems": [
            "plot",
            "memory"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "EXACT_DUPLICATE_CONSOLIDATION",
          "typeName": "PlotContext",
          "systems": [
            "plot",
            "characters"
          ],
          "priority": "HIGH",
          "effort": "MEDIUM",
          "impact": "SIGNIFICANT_IMPROVEMENT"
        },
        {
          "type": "SIMILAR_TYPE_CONSOLIDATION",
          "types": [
            "CoordinatorFactory",
            "INarrativeAnalysisServiceFactory"
          ],
          "similarity": 1,
          "priority": "MEDIUM",
          "effort": "HIGH",
          "impact": "MODERATE_IMPROVEMENT"
        },
        {
          "type": "SIMILAR_TYPE_CONSOLIDATION",
          "types": [
            "MotivationEnhancement",
            "ContrastRecommendation"
          ],
          "similarity": 1,
          "priority": "MEDIUM",
          "effort": "HIGH",
          "impact": "MODERATE_IMPROVEMENT"
        },
        {
          "type": "SIMILAR_TYPE_CONSOLIDATION",
          "types": [
            "StoryEvent",
            "BusinessStoryEvent"
          ],
          "similarity": 1,
          "priority": "MEDIUM",
          "effort": "HIGH",
          "impact": "MODERATE_IMPROVEMENT"
        },
        {
          "type": "SIMILAR_TYPE_CONSOLIDATION",
          "types": [
            "AnalyzeReaderExperienceResponse",
            "GenerateImprovementsRequest"
          ],
          "similarity": 1,
          "priority": "MEDIUM",
          "effort": "HIGH",
          "impact": "MODERATE_IMPROVEMENT"
        },
        {
          "type": "SIMILAR_TYPE_CONSOLIDATION",
          "types": [
            "CharacterCreatedEventData",
            "CharacterCreatedEvent"
          ],
          "similarity": 1,
          "priority": "MEDIUM",
          "effort": "HIGH",
          "impact": "MODERATE_IMPROVEMENT"
        },
        {
          "type": "SIMILAR_TYPE_CONSOLIDATION",
          "types": [
            "RelationshipUpdatedEventData",
            "RelationshipUpdatedEvent"
          ],
          "similarity": 1,
          "priority": "MEDIUM",
          "effort": "HIGH",
          "impact": "MODERATE_IMPROVEMENT"
        },
        {
          "type": "SIMILAR_TYPE_CONSOLIDATION",
          "types": [
            "CharacterPromotedEvent",
            "CharacterDemotedEvent"
          ],
          "similarity": 1,
          "priority": "MEDIUM",
          "effort": "HIGH",
          "impact": "MODERATE_IMPROVEMENT"
        },
        {
          "type": "SIMILAR_TYPE_CONSOLIDATION",
          "types": [
            "RelationshipStrengthenedEvent",
            "RelationshipWeakenedEvent"
          ],
          "similarity": 1,
          "priority": "MEDIUM",
          "effort": "HIGH",
          "impact": "MODERATE_IMPROVEMENT"
        }
      ],
      "namingStandardization": [],
      "structuralOptimization": {
        "baseTypeExtraction": "COMMON_BASE_TYPE_EXTRACTION_OPPORTUNITIES",
        "genericTypeCreation": "GENERIC_TYPE_CREATION_OPPORTUNITIES",
        "unionTypeOptimization": "UNION_TYPE_OPTIMIZATION_OPPORTUNITIES",
        "interfaceComposition": "INTERFACE_COMPOSITION_OPPORTUNITIES"
      },
      "importOptimization": {
        "circularImports": "CIRCULAR_IMPORT_DETECTION",
        "redundantImports": "REDUNDANT_IMPORT_DETECTION",
        "importGrouping": "IMPORT_GROUPING_OPPORTUNITIES",
        "typeOnlyImports": "TYPE_ONLY_IMPORT_OPTIMIZATION"
      }
    },
    "consolidationStrategy": {
      "phaseOneConsolidation": {
        "targetTypes": "IMMEDIATE_CONSOLIDATION_TARGETS",
        "strategy": "EXACT_DUPLICATE_ELIMINATION",
        "expectedImpact": "REDUCED_TYPE_COMPLEXITY",
        "implementation": [
          "IDENTIFY_EXACT_DUPLICATES",
          "CREATE_UNIFIED_TYPE_DEFINITIONS",
          "UPDATE_ALL_REFERENCES",
          "REMOVE_DUPLICATE_DEFINITIONS"
        ]
      },
      "phaseTwoOptimization": {
        "targetTypes": "SIMILAR_TYPE_CONSOLIDATION",
        "strategy": "TYPE_HIERARCHY_OPTIMIZATION",
        "expectedImpact": "IMPROVED_TYPE_SAFETY",
        "implementation": [
          "ANALYZE_SIMILAR_TYPES",
          "DESIGN_TYPE_HIERARCHY",
          "CREATE_BASE_TYPES",
          "MIGRATE_EXISTING_TYPES"
        ]
      },
      "phaseThreeStandardization": {
        "targetTypes": "NAMING_STANDARDIZATION",
        "strategy": "NAMING_CONVENTION_ENFORCEMENT",
        "expectedImpact": "IMPROVED_MAINTAINABILITY",
        "implementation": [
          "DEFINE_NAMING_CONVENTIONS",
          "RENAME_NON_COMPLIANT_TYPES",
          "UPDATE_ALL_REFERENCES",
          "DOCUMENT_CONVENTIONS"
        ]
      },
      "phaseFourIntegration": {
        "targetTypes": "SYSTEM_INTEGRATION_TYPES",
        "strategy": "UNIFIED_TYPE_SYSTEM",
        "expectedImpact": "SEAMLESS_SYSTEM_INTEGRATION",
        "implementation": [
          "CREATE_SHARED_TYPE_LIBRARY",
          "MIGRATE_SYSTEM_SPECIFIC_TYPES",
          "ESTABLISH_TYPE_GOVERNANCE",
          "IMPLEMENT_TYPE_VALIDATION"
        ]
      }
    },
    "holisticTypeSystemDesign": {
      "currentState": {
        "typeSystemMaturity": "FRAGMENTED_TYPE_SYSTEM",
        "integrationLevel": "PARTIALLY_INTEGRATED",
        "consistency": "INCONSISTENT_TYPE_DEFINITIONS",
        "maintainability": "MAINTENANCE_CHALLENGES"
      },
      "transformationPotential": {
        "unifiedTypeSystem": "UNIFIED_TYPE_SYSTEM_CREATION_POTENTIAL",
        "dataModelOptimization": "DATA_MODEL_OPTIMIZATION_POTENTIAL",
        "systemIntegration": "SEAMLESS_SYSTEM_INTEGRATION_POTENTIAL",
        "storageOptimization": "STORAGE_STRATEGY_OPTIMIZATION_POTENTIAL"
      },
      "strategicValue": {
        "dataConsistency": "CRITICAL_FOR_DATA_CONSISTENCY",
        "systemReliability": "ESSENTIAL_FOR_SYSTEM_RELIABILITY",
        "developmentEfficiency": "KEY_TO_DEVELOPMENT_EFFICIENCY",
        "futureScalability": "FOUNDATION_FOR_FUTURE_SCALABILITY"
      },
      "revolutionaryImpact": {
        "typeSystemExcellence": "TYPE_SYSTEM_EXCELLENCE_ACHIEVEMENT",
        "dataModelPerfection": "PERFECT_DATA_MODEL_DESIGN",
        "systemHarmony": "HARMONIOUS_SYSTEM_INTEGRATION",
        "developmentRevolution": "DEVELOPMENT_EFFICIENCY_REVOLUTION"
      }
    }
  }
}
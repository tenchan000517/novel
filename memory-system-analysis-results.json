{
  "systemOverview": {
    "totalLayers": 6,
    "totalComponents": 38,
    "totalMethods": 0,
    "totalInterfaces": 0,
    "systemComplexity": "ENTERPRISE_LEVEL",
    "architectureType": "HIERARCHICAL_MEMORY_SYSTEM"
  },
  "coreSystem": {
    "memoryManager": {
      "path": "src\\lib\\memory\\core\\memory-manager.ts",
      "fileSize": 54835,
      "methods": [
        "initialize",
        "processChapter",
        "unifiedSearch",
        "optimizeSystem",
        "isConsolidationInProgress",
        "performSystemDiagnostics",
        "getSystemStatus",
        "updateConfiguration",
        "shutdown",
        "ensureInitialized",
        "initializeSupportSystems",
        "initializeCoreIntegrationSystems",
        "initializeMemoryHierarchy",
        "initializeSystemIntegration",
        "performInitialSystemValidation",
        "updateOperationResult",
        "shouldProcessLongTerm",
        "getLongTermTriggerReason",
        "extractLongTermData",
        "extractSearchResults",
        "calculateRelevance",
        "mergeOptimizedResults",
        "mergeDuplicateResolverResults",
        "generateSearchSuggestions",
        "generateOptimizationRecommendations",
        "getLayerDiagnostics",
        "getMemoryLayerStatus",
        "updateAverageProcessingTime",
        "waitForOperationQueue",
        "getOperationStatistics",
        "getSystemState"
      ],
      "interfaces": [
        "MemoryManagerConfig",
        "SystemOptimizationResult"
      ],
      "imports": [
        "@/lib/utils/logger",
        "@/types/chapters",
        "@/types/characters",
        "./data-integration-processor",
        "./unified-access-api",
        "../integration/cache-coordinator",
        "../integration/duplicate-resolver",
        "../integration/access-optimizer",
        "../integration/quality-assurance",
        "../short-term/short-term-memory",
        "../mid-term/mid-term-memory",
        "../long-term/long-term-memory",
        "../storage/backup-system",
        "../storage/migration-tools",
        "../storage/persistent-storage",
        "../storage/cache-storage"
      ],
      "exports": [
        "MemoryManagerConfig",
        "SystemOptimizationResult",
        "MemoryManager"
      ],
      "memoryOperations": [
        "CacheCoordinator",
        "cache",
        "CacheStorage",
        "CacheStatisticsData",
        "cacheEnabled",
        "cacheSettings",
        "cacheCoordinator",
        "cacheStorage",
        "cacheKey",
        "cacheOptResult",
        "cacheHits",
        "cacheStats",
        "cacheStatisticsData",
        "cacheSize",
        "cacheStatistics",
        "PersistentStorage",
        "persistent",
        "persistentStorage",
        "BackupSystem",
        "backup",
        "backupSystem",
        "backupError",
        "search",
        "searchRequest",
        "Search",
        "searching"
      ],
      "integrationPoints": [
        "character",
        "learning",
        "evolution",
        "parameter",
        "context",
        "unified",
        "integration",
        "coordinator",
        "resolver"
      ],
      "cacheOperations": [
        "cache",
        "immediate",
        "short-term"
      ],
      "performanceOptimizations": [
        "optimize",
        "performance"
      ]
    },
    "dataIntegrationProcessor": {
      "path": "src\\lib\\memory\\core\\data-integration-processor.ts",
      "fileSize": 36799,
      "methods": [
        "getData",
        "detectDataDuplicates",
        "initialize",
        "processChapterData",
        "validateDataIntegrity",
        "attemptAutoRepair",
        "migrateExistingData",
        "compressShortToMidTerm",
        "compressMidToLongTerm",
        "optimizeIntegration",
        "getDiagnostics",
        "updateMemoryLayers",
        "createMemoryLayerAdapter",
        "getData",
        "setData",
        "removeData",
        "getDataSize",
        "getStatus",
        "compress",
        "validate",
        "cleanup",
        "_initializeIntegrationRules",
        "_initializeMigrationStrategies",
        "_setupPeriodicIntegrityCheck",
        "_preprocessChapterData",
        "_integrateToShortTerm",
        "_generateAnalysisData",
        "_integrateToMidTerm",
        "_detectChapterDuplicates",
        "_resolveDuplicates",
        "_validateDataIntegrity",
        "_handleIntegrityIssues",
        "_checkAndPerformAutoMigration",
        "_checkLayerConsistency",
        "_checkReferenceIntegrity",
        "_checkDataFormatIntegrity",
        "_checkVersionIntegrity",
        "_generateIntegrityRecommendations",
        "_repairIntegrityIssue",
        "_migrateShortTermData",
        "_migrateMidTermData",
        "_migrateLongTermData",
        "_identifyCompressibleData",
        "_compressData",
        "_optimizeIntegrationRules",
        "_optimizeMigrationStrategies",
        "_optimizeDuplicateResolution",
        "_calculateIntegrationEfficiency",
        "_calculateIntegrationErrorRate",
        "_ensureInitialized"
      ],
      "interfaces": [
        "MemoryLayer",
        "DuplicateResolver",
        "DataIntegrationProcessorConfig",
        "DataIntegrationProcessorConfig",
        "ChapterDataProcessingResult",
        "ChapterDataProcessingResult",
        "DataIntegrityResult",
        "DataIntegrityResult",
        "IntegrityIssue",
        "IntegrityIssue",
        "DuplicateDetectionResult",
        "DuplicateDetectionResult",
        "DuplicateInstance",
        "DuplicateResolution",
        "IntegrationRule",
        "MigrationStrategy",
        "DataMigrationResult",
        "IntegrationOptimizationResult"
      ],
      "imports": [
        "@/lib/utils/logger",
        "@/types/chapters"
      ],
      "exports": [
        "DataIntegrationProcessorConfig",
        "DataIntegrationProcessor"
      ],
      "memoryOperations": [
        "consolidate",
        "migrateExistingData",
        "migratedItems",
        "migratedLayers",
        "backup"
      ],
      "integrationPoints": [
        "character",
        "unified",
        "integration",
        "resolver"
      ],
      "cacheOperations": [
        "immediate"
      ],
      "performanceOptimizations": [
        "optimize",
        "performance"
      ]
    },
    "unifiedAccessApi": {
      "path": "src\\lib\\memory\\core\\unified-access-api.ts",
      "fileSize": 32142,
      "methods": [
        "getData",
        "resolveAccess",
        "getFromCache",
        "initialize",
        "processRequest",
        "processBatchRequests",
        "optimizeAccessPatterns",
        "getDiagnostics",
        "getPerformanceMetrics",
        "updateMemoryLayers",
        "_loadAccessPatterns",
        "_initializeOptimization",
        "_resolveDuplicates",
        "_checkCache",
        "_determineAccessStrategy",
        "_executeAccessStrategy",
        "_accessLayer",
        "_integrateAccessResults",
        "_cacheResult",
        "_learnAccessPattern",
        "_optimizeBatchRequests",
        "_processBatch",
        "_analyzeAccessFrequency",
        "_analyzeCachePerformance",
        "_analyzeLayerAccess",
        "_optimizeFrequentPatterns",
        "_optimizeCacheStrategy",
        "_optimizeLayerAccess",
        "_generateCacheKey",
        "_generatePatternKey",
        "_determinePriorityOrder",
        "_determineCacheTTL",
        "_optimizeLayerOrder",
        "_updatePerformanceMetrics",
        "_ensureInitialized"
      ],
      "interfaces": [
        "MemoryLayer",
        "DuplicateResolver",
        "CacheCoordinator",
        "UnifiedAccessAPIConfig",
        "UnifiedAccessAPIConfig",
        "AccessPattern",
        "AccessStrategy",
        "LayerAccessResult"
      ],
      "imports": [
        "@/lib/utils/logger"
      ],
      "exports": [
        "UnifiedAccessAPIConfig",
        "UnifiedAccessAPI"
      ],
      "memoryOperations": [
        "CacheCoordinator",
        "cacheCoordinator",
        "cacheEnabled",
        "cacheHits",
        "cacheResult",
        "cacheAnalysis",
        "cache",
        "cacheHitRatio",
        "cacheKey",
        "cachedData",
        "Cache",
        "cacheStatistics",
        "consolidatedSettings"
      ],
      "integrationPoints": [
        "character",
        "evolution",
        "parameter",
        "context",
        "unified",
        "integration",
        "coordinator",
        "resolver"
      ],
      "cacheOperations": [
        "cache",
        "buffer",
        "immediate",
        "short-term"
      ],
      "performanceOptimizations": [
        "optimize",
        "performance",
        "parallel"
      ]
    },
    "coreInterfaces": {
      "path": "src\\lib\\memory\\core\\interfaces.ts",
      "fileSize": 13397,
      "methods": [
        "initialize",
        "initialize",
        "invalidateChapterCache",
        "optimizeCache",
        "getStatistics",
        "detectChapterDuplicates",
        "getUnifiedMemoryAccess",
        "getStatistics",
        "performComprehensiveDiagnostic",
        "getRecentChapters",
        "getChapterSummaries",
        "getCharacterDatabase",
        "initialize",
        "getUnifiedAccess",
        "getCacheStatistics",
        "isOperationResult",
        "isDiagnosticsResult",
        "isStatusResult"
      ],
      "interfaces": [
        "OperationResult",
        "DiagnosticsResult",
        "StatusResult",
        "IMemoryLayer",
        "IIntegrationComponent",
        "CacheStatisticsData",
        "ICacheCoordinator",
        "MemoryQuery",
        "MemoryResult",
        "IDuplicateResolver",
        "AccessStatisticsData",
        "IAccessOptimizer",
        "QualityMetricsData",
        "ComprehensiveDiagnosticResult",
        "IQualityAssurance",
        "ShortTermMemoryConfig",
        "IShortTermMemory",
        "IMidTermMemory",
        "ILongTermMemory",
        "IUnifiedMemoryManager"
      ],
      "imports": [
        "@/types/chapters",
        "@/types/characters"
      ],
      "exports": [
        "QUALITY_THRESHOLDS",
        "CACHE_TTL",
        "isOperationResult",
        "isDiagnosticsResult",
        "isStatusResult"
      ],
      "memoryOperations": [
        "CacheStatisticsData",
        "cacheSize",
        "cache",
        "cacheHit",
        "cacheHitRate",
        "cacheEnabled",
        "CACHE_FIRST",
        "CACHE_TTL",
        "search"
      ],
      "integrationPoints": [
        "character",
        "learning",
        "evolution",
        "parameter",
        "context",
        "unified",
        "integration",
        "coordinator",
        "resolver"
      ],
      "cacheOperations": [
        "cache",
        "buffer",
        "short-term"
      ],
      "performanceOptimizations": [
        "optimize",
        "performance"
      ]
    },
    "coreTypes": {
      "path": "src\\lib\\memory\\core\\types.ts",
      "fileSize": 18656,
      "methods": [],
      "interfaces": [
        "UnifiedSearchResult",
        "SystemOperationResult",
        "MemoryHierarchyConfig",
        "UnifiedMemoryContext",
        "MemoryAccessRequest",
        "MemoryAccessResponse",
        "MemoryAccessFilters",
        "MemoryAccessOptions",
        "MemoryOperationResult",
        "ChapterContextData",
        "ProcessingBuffer",
        "NarrativeProgressionData",
        "AnalysisResultData",
        "CharacterEvolutionData",
        "SystemStatisticsData",
        "QualityMetricsData",
        "ConsolidatedSettingsData",
        "KnowledgeDatabaseData",
        "SystemKnowledgeBaseData",
        "CompletedRecordsData",
        "ResolvedDuplicateData",
        "CacheStatisticsData",
        "AccessOptimizationData",
        "PerformanceMetrics",
        "MemorySystemStatus",
        "MemoryLayerStatus",
        "SystemDiagnostics",
        "LayerDiagnostics",
        "IntegrationDiagnostics",
        "ChapterAnalysisResult",
        "StoryStateSnapshot",
        "ChapterProgressionRecord",
        "ArcProgressionRecord",
        "TensionHistoryRecord",
        "TurningPointRecord",
        "EmotionalArcDesignRecord",
        "TextAnalysisResultRecord",
        "DetectionResultRecord",
        "PreGenerationResultRecord",
        "PostGenerationResultRecord",
        "CharacterDevelopmentRecord",
        "CharacterChangeRecord",
        "RelationshipEvolutionRecord",
        "PsychologyEvolutionRecord",
        "PromptGenerationStatsRecord",
        "TemplateUsageStatsRecord",
        "TensionOptimizationStatsRecord",
        "ComponentPerformanceStats",
        "SystemIntegrationStatsRecord",
        "ChapterQualityRecord",
        "SystemQualityMetricsRecord",
        "DiagnosticHistoryRecord",
        "SystemHealthMetricsRecord",
        "WorldSettingsMasterRecord",
        "GenreSettingsMasterRecord",
        "TemplateMasterRecord",
        "SystemConfigMasterRecord",
        "CharacterMasterRecord",
        "WorldKnowledgeDatabase",
        "ConceptDefinitionRecord",
        "ForeshadowingDatabase",
        "SectionDefinitionRecord",
        "CompletedSectionRecord",
        "CompletedArcRecord",
        "LongTermEffectivenessRecord",
        "PromptGenerationPattern",
        "EffectiveTemplatePattern",
        "AnalysisPattern",
        "OptimizationStrategy",
        "ErrorPattern",
        "QualityImprovementStrategy"
      ],
      "imports": [
        "@/types/chapters",
        "@/types/memory"
      ],
      "exports": [
        "UnifiedSearchResult",
        "SystemOperationResult",
        "MemoryHierarchyConfig",
        "UnifiedMemoryContext",
        "MemoryAccessRequest",
        "MemoryAccessResponse",
        "MemoryAccessFilters",
        "MemoryAccessOptions",
        "MemoryOperationResult",
        "ChapterContextData",
        "ProcessingBuffer",
        "NarrativeProgressionData",
        "AnalysisResultData",
        "CharacterEvolutionData",
        "SystemStatisticsData",
        "QualityMetricsData",
        "ConsolidatedSettingsData",
        "KnowledgeDatabaseData",
        "SystemKnowledgeBaseData",
        "CompletedRecordsData",
        "ResolvedDuplicateData",
        "CacheStatisticsData",
        "AccessOptimizationData",
        "PerformanceMetrics",
        "MemorySystemStatus",
        "MemoryLayerStatus",
        "SystemDiagnostics",
        "LayerDiagnostics",
        "IntegrationDiagnostics",
        "ChapterAnalysisResult",
        "StoryStateSnapshot",
        "ChapterProgressionRecord",
        "ArcProgressionRecord",
        "TensionHistoryRecord",
        "TurningPointRecord",
        "EmotionalArcDesignRecord",
        "TextAnalysisResultRecord",
        "DetectionResultRecord",
        "PreGenerationResultRecord",
        "PostGenerationResultRecord",
        "CharacterDevelopmentRecord",
        "CharacterChangeRecord",
        "RelationshipEvolutionRecord",
        "PsychologyEvolutionRecord",
        "PromptGenerationStatsRecord",
        "TemplateUsageStatsRecord",
        "TensionOptimizationStatsRecord",
        "ComponentPerformanceStats",
        "SystemIntegrationStatsRecord",
        "ChapterQualityRecord",
        "SystemQualityMetricsRecord",
        "DiagnosticHistoryRecord",
        "SystemHealthMetricsRecord",
        "WorldSettingsMasterRecord",
        "GenreSettingsMasterRecord",
        "TemplateMasterRecord",
        "SystemConfigMasterRecord",
        "CharacterMasterRecord",
        "WorldKnowledgeDatabase",
        "ConceptDefinitionRecord",
        "ForeshadowingDatabase",
        "SectionDefinitionRecord",
        "CompletedSectionRecord",
        "CompletedArcRecord",
        "LongTermEffectivenessRecord",
        "PromptGenerationPattern",
        "EffectiveTemplatePattern",
        "AnalysisPattern",
        "OptimizationStrategy",
        "ErrorPattern",
        "QualityImprovementStrategy"
      ],
      "memoryOperations": [
        "cacheEnabled",
        "cacheStatistics",
        "CacheStatisticsData",
        "cacheHits",
        "cacheSize",
        "CacheCoordinator",
        "CACHE_OPTIMIZATION",
        "cacheHitRatio",
        "cacheCoordinator",
        "consolidatedSettings",
        "ConsolidatedSettingsData",
        "consolidatedGenre",
        "consolidatedTemplates",
        "consolidatedConfig",
        "consolidatedCharacter"
      ],
      "integrationPoints": [
        "character",
        "evolution",
        "psychology",
        "relationship",
        "context",
        "unified",
        "integration",
        "coordinator",
        "resolver"
      ],
      "cacheOperations": [
        "cache",
        "buffer",
        "immediate"
      ],
      "performanceOptimizations": [
        "optimize",
        "performance"
      ]
    }
  },
  "memoryLayers": {
    "shortTermMemory": {
      "layerName": "short-term",
      "componentCount": 5,
      "totalMethods": 151,
      "totalInterfaces": 57,
      "layerCapabilities": [],
      "components": {
        "generation-cache.ts": {
          "path": "src\\lib\\memory\\short-term\\generation-cache.ts",
          "fileSize": 33367,
          "methods": [
            "initialize",
            "startCleanupTimer",
            "startPromptGeneration",
            "updatePromptGeneration",
            "completePromptGeneration",
            "setTemplateProcessingState",
            "setSectionBuildingState",
            "startContextGeneration",
            "updateContextGeneration",
            "setIntegrationProcessingState",
            "savePreGenerationResult",
            "savePostGenerationResult",
            "getIntegratedGenerationData",
            "getGenerationsByTemplate",
            "analyzeQualityMetrics",
            "cleanupExpiredEntries",
            "optimizeCacheSize",
            "performLRUCleanup",
            "getTotalCacheEntries",
            "recordCacheAccess",
            "recordCacheHit",
            "recordCacheMiss",
            "getStatus",
            "calculateMemoryUsage",
            "calculateAverageGenerationTime",
            "loadFromStorage",
            "saveToStorage",
            "cleanup"
          ],
          "interfaces": [
            "ActivePromptGeneration",
            "ActivePromptGeneration",
            "TemplateProcessingState",
            "TemplateProcessingState",
            "SectionBuildingState",
            "SectionBuildingState",
            "ContextGenerationState",
            "ContextGenerationState",
            "IntegrationProcessingState",
            "IntegrationProcessingState",
            "PreGenerationTempResult",
            "PreGenerationTempResult",
            "PostGenerationTempResult",
            "PostGenerationTempResult",
            "GenerationCacheStatus",
            "GenerationCacheStatus"
          ],
          "imports": [
            "@/lib/utils/logger",
            "@/lib/storage",
            "@/types/chapters"
          ],
          "exports": [
            "GenerationCache"
          ],
          "memoryOperations": [
            "retrievedData",
            "cache",
            "cache_coordination",
            "cacheHitRate",
            "cacheEfficiencyRate",
            "CACHE_CLEANUP_INTERVAL",
            "cacheStats",
            "Cache",
            "cacheExists",
            "cacheContent",
            "cacheData"
          ],
          "integrationPoints": [
            "character",
            "context",
            "unified",
            "integration"
          ],
          "cacheOperations": [
            "cache",
            "immediate",
            "short-term"
          ],
          "performanceOptimizations": [
            "optimize",
            "performance"
          ]
        },
        "immediate-context.ts": {
          "path": "src\\lib\\memory\\short-term\\immediate-context.ts",
          "fileSize": 34430,
          "methods": [
            "initialize",
            "initializeCache",
            "loadFromStorage",
            "loadChapterDataEntry",
            "loadCacheEntries",
            "addChapter",
            "createChapterDataEntry",
            "calculateContentHash",
            "manageChapterRetention",
            "updateRealtimeCache",
            "manageCacheSize",
            "getWorldSettingsCache",
            "setWorldSettingsCache",
            "getCharacterInfoCache",
            "setCharacterInfoCache",
            "getFormatResultsCache",
            "setFormatResultsCache",
            "recordCacheAccess",
            "recordCacheHit",
            "recordCacheMiss",
            "getLatestChapter",
            "isValidCacheEntry",
            "getRecentChapters",
            "getChapter",
            "getChapterDataEntry",
            "extractCharacterState",
            "extractKeyPhrases",
            "getAllRegisteredCharacters",
            "isCharacterPresentInContent",
            "detectCharacterMood",
            "getStatus",
            "calculateEstimatedMemoryUsage",
            "getLatestTimestamp",
            "updateCharacterState",
            "updateCharacterStateWithMetadata",
            "getCharacterStateWithMetadata",
            "save",
            "storageExists",
            "readFromStorage",
            "writeToStorage"
          ],
          "interfaces": [
            "ChapterDataEntry",
            "ChapterDataEntry",
            "ChapterMetadata",
            "ChapterMetadata",
            "ProcessingState",
            "ProcessingState",
            "RealtimeCacheEntry",
            "RealtimeCacheEntry",
            "ImmediateContextStatus",
            "ImmediateContextStatus"
          ],
          "imports": [
            "@/types/chapters",
            "@/types/memory",
            "@/lib/utils/logger",
            "../text-analyzer-service",
            "@/lib/storage",
            "@/lib/characters/manager",
            "@/types/characters",
            "@/types/characters"
          ],
          "exports": [
            "ImmediateContext"
          ],
          "memoryOperations": [
            "cacheHitRate",
            "cacheEntries",
            "CACHE_TTL_DEFAULT",
            "cacheHits",
            "cacheMisses",
            "cache",
            "cacheMetadata",
            "cacheKey",
            "cacheEntry"
          ],
          "integrationPoints": [
            "character",
            "context",
            "unified"
          ],
          "cacheOperations": [
            "cache",
            "immediate",
            "short-term"
          ],
          "performanceOptimizations": []
        },
        "processing-buffers.ts": {
          "path": "src\\lib\\memory\\short-term\\processing-buffers.ts",
          "fileSize": 36282,
          "methods": [
            "initialize",
            "startCleanupTimer",
            "startJobProcessingMonitor",
            "createProcessingJob",
            "insertJobInQueue",
            "updateJobProgress",
            "completeJob",
            "failJob",
            "processJobQueue",
            "createAIProcessingBuffer",
            "addAIProcessingStep",
            "completeAIProcessingStep",
            "createMemoryIntegrationBuffer",
            "addIntegrationStep",
            "createChapterProcessingBuffer",
            "updateChapterProcessingComponent",
            "calculateChecksum",
            "performCleanup",
            "getStatus",
            "calculateMemoryUsage",
            "loadFromStorage",
            "saveToStorage",
            "cleanup"
          ],
          "interfaces": [
            "ProcessingJob",
            "ProcessingJob",
            "ProcessingBuffer",
            "ProcessingBuffer",
            "AIProcessingState",
            "AIProcessingState",
            "MemoryIntegrationBuffer",
            "MemoryIntegrationBuffer",
            "ChapterProcessingBuffer",
            "ChapterProcessingBuffer",
            "ProcessingBufferStatus",
            "ProcessingBufferStatus"
          ],
          "imports": [
            "@/lib/utils/logger",
            "@/lib/storage",
            "@/types/chapters"
          ],
          "exports": [
            "ProcessingBuffers"
          ],
          "memoryOperations": [
            "storeInGenericBuffer",
            "Stored",
            "cacheUpdates"
          ],
          "integrationPoints": [
            "character",
            "relationship",
            "context",
            "unified",
            "integration"
          ],
          "cacheOperations": [
            "cache",
            "buffer",
            "short-term"
          ],
          "performanceOptimizations": []
        },
        "short-term-memory.ts": {
          "path": "src\\lib\\memory\\short-term\\short-term-memory.ts",
          "fileSize": 37551,
          "methods": [
            "initialize",
            "initializeComponent",
            "addChapter",
            "updateImmediateContext",
            "cacheGeneration",
            "bufferProcessing",
            "performAnalysis",
            "getDiagnostics",
            "checkGenerationCacheHealth",
            "checkImmediateContextHealth",
            "checkProcessingBuffersHealth",
            "checkTemporaryAnalysisHealth",
            "getStatus",
            "getDataSize",
            "save",
            "cleanup",
            "cleanup",
            "cleanup",
            "getOperationStatistics"
          ],
          "interfaces": [
            "ShortTermMemoryConfig",
            "ShortTermMemoryConfig",
            "ComponentOperationResult",
            "ComponentOperationResult"
          ],
          "imports": [
            "@/lib/utils/logger",
            "@/types/chapters",
            "../core/interfaces",
            "./generation-cache",
            "./immediate-context",
            "./processing-buffers",
            "./temporary-analysis"
          ],
          "exports": [
            "ShortTermMemoryConfig",
            "ShortTermMemory"
          ],
          "memoryOperations": [
            "cache",
            "cacheEnabled",
            "cacheGeneration",
            "cacheHitRate",
            "index"
          ],
          "integrationPoints": [
            "character",
            "context",
            "unified",
            "integration"
          ],
          "cacheOperations": [
            "cache",
            "buffer",
            "temporary",
            "immediate",
            "short-term"
          ],
          "performanceOptimizations": []
        },
        "temporary-analysis.ts": {
          "path": "src\\lib\\memory\\short-term\\temporary-analysis.ts",
          "fileSize": 44375,
          "methods": [
            "initialize",
            "recordActivePromptGeneration",
            "getActivePromptGeneration",
            "recordTemplateProcessing",
            "getTemplateProcessingState",
            "recordSectionBuilding",
            "getSectionBuildingState",
            "recordContextGeneration",
            "getContextGenerationState",
            "recordIntegrationProcessing",
            "getIntegrationProcessingState",
            "recordPreGenerationResult",
            "getPreGenerationResult",
            "recordPostGenerationResult",
            "getPostGenerationResult",
            "recordEmotionalAnalysis",
            "getEmotionalAnalysis",
            "recordTextAnalysisCache",
            "getTextAnalysisCache",
            "recordDetectionResult",
            "getDetectionResult",
            "updateWorldSettingsCache",
            "getWorldSettingsCache",
            "recordCharacterInfoCache",
            "getCharacterInfoCache",
            "recordMemoryAccessCache",
            "getMemoryAccessCache",
            "recordFormatResultsCache",
            "getFormatResultsCache",
            "recordCalculationResultsCache",
            "getCalculationResultsCache",
            "generateCalculationCacheKey",
            "simpleHash",
            "loadFromStorage",
            "saveToStorage",
            "setupAutoCleanup",
            "performCleanup",
            "saveAllToStorage",
            "getSystemStatistics",
            "manualCleanup",
            "destroy"
          ],
          "interfaces": [
            "ActivePromptGeneration",
            "TemplateProcessingState",
            "SectionBuildingState",
            "ContextGenerationState",
            "IntegrationProcessingState",
            "PreGenerationTempResult",
            "PostGenerationTempResult",
            "EmotionalAnalysisTempResult",
            "TextAnalysisCacheEntry",
            "DetectionTempResult",
            "WorldSettingsCacheEntry",
            "CharacterInfoCacheEntry",
            "MemoryAccessCacheEntry",
            "FormatResultsCacheEntry",
            "CalculationResultsCacheEntry"
          ],
          "imports": [
            "@/lib/utils/logger",
            "@/lib/storage",
            "@/types/chapters",
            "@/types/characters",
            "@/types/generation"
          ],
          "exports": [
            "TemporaryAnalysis"
          ],
          "memoryOperations": [
            "cacheHits",
            "cacheMetadata",
            "cache",
            "cacheKey",
            "consolidatedSettings",
            "consolidatedInfo",
            "SEARCH"
          ],
          "integrationPoints": [
            "character",
            "relationship",
            "parameter",
            "context",
            "unified",
            "integration"
          ],
          "cacheOperations": [
            "cache",
            "temporary"
          ],
          "performanceOptimizations": []
        }
      }
    },
    "midTermMemory": {
      "layerName": "mid-term",
      "componentCount": 6,
      "totalMethods": 206,
      "totalInterfaces": 57,
      "layerCapabilities": [],
      "components": {
        "analysis-results.ts": {
          "path": "src\\lib\\memory\\mid-term\\analysis-results.ts",
          "fileSize": 29004,
          "methods": [
            "initialize",
            "loadFromStorage",
            "save",
            "updateFromChapter",
            "performAutomaticAnalysis",
            "performBasicTextAnalysis",
            "performBasicEmotionalAnalysis",
            "performBasicDetection",
            "extractKeyPhrases",
            "calculateReadabilityScore",
            "analyzeEmotionalDimension",
            "calculateDimensionScore",
            "determineOverallTone",
            "calculateEmotionalImpact",
            "recordEmotionalArcDesign",
            "recordTextAnalysisResult",
            "recordDetectionResult",
            "recordPreGenerationResult",
            "recordPostGenerationResult",
            "getEmotionalArcDesigns",
            "getTextAnalysisResults",
            "getDetectionResults",
            "getPreGenerationResults",
            "getPostGenerationResults",
            "getAnalysisStatistics"
          ],
          "interfaces": [
            "EmotionalArcDesignRecord",
            "EmotionalArcDesignRecord",
            "TextAnalysisResultRecord",
            "TextAnalysisResultRecord",
            "DetectionResultRecord",
            "DetectionResultRecord",
            "PreGenerationResultRecord",
            "PreGenerationResultRecord",
            "PostGenerationResultRecord",
            "PostGenerationResultRecord",
            "EmotionalAnalysisHistoryRecord",
            "EmotionalAnalysisHistoryRecord",
            "CharacterDetectionHistoryRecord",
            "CharacterDetectionHistoryRecord"
          ],
          "imports": [
            "@/lib/utils/logger",
            "@/lib/storage",
            "@/types/chapters",
            "@/types/memory"
          ],
          "exports": [
            "EmotionalArcDesignRecord",
            "TextAnalysisResultRecord",
            "DetectionResultRecord",
            "PreGenerationResultRecord",
            "PostGenerationResultRecord",
            "EmotionalAnalysisHistoryRecord",
            "CharacterDetectionHistoryRecord",
            "AnalysisResultsManager"
          ],
          "memoryOperations": [
            "index"
          ],
          "integrationPoints": [
            "character",
            "relationship",
            "context"
          ],
          "cacheOperations": [],
          "performanceOptimizations": []
        },
        "character-evolution.ts": {
          "path": "src\\lib\\memory\\mid-term\\character-evolution.ts",
          "fileSize": 36412,
          "methods": [
            "initialize",
            "loadFromStorage",
            "save",
            "updateFromChapter",
            "analyzeCharacterDevelopment",
            "analyzeRelationshipChanges",
            "analyzePsychologyEvolution",
            "updateCharacterArcs",
            "updateInfluenceNetworks",
            "recordCharacterDevelopment",
            "recordCharacterChange",
            "recordRelationshipEvolution",
            "recordPsychologyEvolution",
            "getCharacterDevelopmentHistory",
            "getCharacterChangeHistory",
            "getRelationshipEvolution",
            "getPsychologyEvolution",
            "getCharacterArc",
            "getAllCharacterArcs",
            "getInfluenceNetwork",
            "getEvolutionStatistics"
          ],
          "interfaces": [
            "StorageData",
            "CharacterDevelopmentRecord",
            "CharacterDevelopmentRecord",
            "CharacterChangeRecord",
            "CharacterChangeRecord",
            "RelationshipEvolutionRecord",
            "RelationshipEvolutionRecord",
            "PsychologyEvolutionRecord",
            "PsychologyEvolutionRecord",
            "CharacterArcProgression",
            "CharacterArcProgression",
            "CharacterInfluenceNetwork",
            "CharacterInfluenceNetwork"
          ],
          "imports": [
            "@/lib/utils/logger",
            "@/lib/storage",
            "@/types/chapters",
            "@/types/characters"
          ],
          "exports": [
            "CharacterDevelopmentRecord",
            "CharacterChangeRecord",
            "RelationshipEvolutionRecord",
            "PsychologyEvolutionRecord",
            "CharacterArcProgression",
            "CharacterInfluenceNetwork",
            "CharacterEvolutionManager"
          ],
          "memoryOperations": [],
          "integrationPoints": [
            "character",
            "evolution",
            "psychology",
            "relationship",
            "skill"
          ],
          "cacheOperations": [],
          "performanceOptimizations": []
        },
        "mid-term-memory.ts": {
          "path": "src\\lib\\memory\\mid-term\\mid-term-memory.ts",
          "fileSize": 37164,
          "methods": [
            "initialize",
            "initializeComponentWithHealth",
            "setupCrossComponentAnalysis",
            "addChapter",
            "analyzeProcessingResults",
            "performCrossComponentAnalysis",
            "calculateQualityEvolutionCorrelation",
            "analyzeNarrativeQualityRelation",
            "performIntegratedQualityCheck",
            "calculateIntegratedQuality",
            "getDiagnostics",
            "getIntegrationHealth",
            "getStatus",
            "getDataSize",
            "save",
            "cleanup",
            "saveComponentIfExists",
            "cleanupComponentIfExists",
            "processAnalysisResults",
            "processCharacterEvolution",
            "processNarrativeProgression",
            "processQualityMetrics",
            "processSystemStatistics",
            "getIntegratedQualityScore",
            "getAnalysisResults",
            "getCharacterEvolution",
            "getNarrativeProgression",
            "getQualityMetrics",
            "getSystemStatistics",
            "getIntegratedStatistics",
            "getAnalysisStatistics",
            "getEvolutionStatistics",
            "getStatistics",
            "getQualitySummary",
            "getStatistics",
            "getOptimizationRecommendations",
            "getSystemHealthReport"
          ],
          "interfaces": [
            "MidTermMemoryConfig",
            "MidTermMemoryConfig",
            "MidTermMemoryStatistics",
            "MidTermMemoryStatistics"
          ],
          "imports": [
            "@/lib/utils/logger",
            "@/types/chapters",
            "../core/interfaces",
            "./analysis-results",
            "./character-evolution",
            "./narrative-progression",
            "./quality-metrics",
            "./system-statistics"
          ],
          "exports": [
            "MidTermMemoryConfig",
            "MidTermMemoryStatistics",
            "MidTermMemory"
          ],
          "memoryOperations": [
            "index"
          ],
          "integrationPoints": [
            "character",
            "evolution",
            "psychology",
            "relationship",
            "integration"
          ],
          "cacheOperations": [],
          "performanceOptimizations": [
            "optimize",
            "performance"
          ]
        },
        "narrative-progression.ts": {
          "path": "src\\lib\\memory\\mid-term\\narrative-progression.ts",
          "fileSize": 22536,
          "methods": [
            "initialize",
            "createDefaultProgressionState",
            "loadFromStorage",
            "save",
            "updateFromChapter",
            "updateNarrativePhase",
            "updateArcProgression",
            "checkArcMilestones",
            "shouldCompleteArc",
            "completeCurrentArc",
            "generateNextArcTheme",
            "detectTurningPoints",
            "calculateImpact",
            "recordNarrativeAnalysis",
            "recordTensionHistory",
            "getProgressionState",
            "getTurningPoints",
            "getArcRecord",
            "getAllArcRecords",
            "getNarrativeAnalysisResults",
            "getTensionHistory",
            "slice",
            "getStatistics"
          ],
          "interfaces": [
            "StoryProgressionState",
            "StoryProgressionState",
            "TurningPointRecord",
            "TurningPointRecord",
            "ArcProgressionRecord",
            "ArcProgressionRecord",
            "NarrativeAnalysisResult",
            "NarrativeAnalysisResult",
            "TensionHistoryRecord",
            "TensionHistoryRecord"
          ],
          "imports": [
            "@/lib/utils/logger",
            "@/lib/storage",
            "@/types/chapters"
          ],
          "exports": [
            "StoryProgressionState",
            "TurningPointRecord",
            "ArcProgressionRecord",
            "NarrativeAnalysisResult",
            "TensionHistoryRecord",
            "NarrativeProgressionManager"
          ],
          "memoryOperations": [],
          "integrationPoints": [
            "character"
          ],
          "cacheOperations": [],
          "performanceOptimizations": []
        },
        "quality-metrics.ts": {
          "path": "src\\lib\\memory\\mid-term\\quality-metrics.ts",
          "fileSize": 39922,
          "methods": [
            "initialize",
            "loadFromStorage",
            "save",
            "updateFromChapter",
            "analyzeChapterQuality",
            "calculateReadabilityScore",
            "calculateComplexWordRatio",
            "calculateConsistencyScore",
            "detectFormalityChanges",
            "detectSentenceFormality",
            "calculateEngagementScore",
            "calculateDialogueRatio",
            "countActionWords",
            "countEmotionalExpressions",
            "calculateCharacterDevelopmentScore",
            "extractCharacterMentions",
            "calculatePlotCoherenceScore",
            "countLogicalConnectors",
            "calculateDialogueQualityScore",
            "calculateDescriptiveQualityScore",
            "calculatePacingScore",
            "calculateVariance",
            "calculateThematicConsistencyScore",
            "calculateEmotionalImpactScore",
            "updateSystemQualityMetrics",
            "calculateQualityTrend",
            "performQualityDiagnostic",
            "updateSystemHealthMetrics",
            "analyzeSystemHealth",
            "generateHealthRecommendations",
            "checkQualityAlerts",
            "cleanupOldData",
            "getQualityLevel",
            "cleanup",
            "getQualityScore",
            "getMetrics",
            "encodeQualityTrend",
            "getChapterQualityHistory",
            "slice",
            "slice",
            "getQualitySummary"
          ],
          "interfaces": [
            "QualityThresholds",
            "QualityThresholds",
            "QualityMetricsConfig",
            "QualityMetricsConfig",
            "ChapterQualityAnalysis",
            "ChapterQualityAnalysis",
            "SystemHealthAnalysis",
            "SystemHealthAnalysis"
          ],
          "imports": [
            "@/lib/utils/logger",
            "@/lib/storage",
            "@/types/chapters"
          ],
          "exports": [
            "QualityThresholds",
            "QualityMetricsConfig",
            "ChapterQualityAnalysis",
            "SystemHealthAnalysis",
            "QualityMetricsManager"
          ],
          "memoryOperations": [
            "index"
          ],
          "integrationPoints": [
            "character"
          ],
          "cacheOperations": [],
          "performanceOptimizations": [
            "optimize",
            "performance",
            "speed"
          ]
        },
        "system-statistics.ts": {
          "path": "src\\lib\\memory\\mid-term\\system-statistics.ts",
          "fileSize": 47213,
          "methods": [
            "initialize",
            "loadFromStorage",
            "Map",
            "save",
            "updateFromChapter",
            "updatePromptGenerationStats",
            "detectPromptGenerationTypes",
            "hasDescriptivePatterns",
            "hasActionPatterns",
            "hasEmotionalPatterns",
            "hasNarrativePatterns",
            "estimateGenerationTime",
            "updateTemplateUsageStats",
            "detectUsedTemplates",
            "hasIntroductionPattern",
            "hasDialoguePattern",
            "hasActionSequencePattern",
            "hasEmotionalScenePattern",
            "hasTransitionPattern",
            "hasCliffhangerPattern",
            "calculateTemplateEffectiveness",
            "updateTensionOptimizationStats",
            "detectTensionOptimizations",
            "hasVariedSentenceLength",
            "calculateTensionOptimizationSuccess",
            "hasTensionBuildingElements",
            "hasTensionReleaseElements",
            "hasGoodPacing",
            "hasClimaxElements",
            "calculateTensionImprovement",
            "updateSystemIntegrationStats",
            "calculateIntegrationEfficiency",
            "calculateMetadataCompleteness",
            "estimateDataVolume",
            "recordComponentPerformance",
            "updateComponentUsageStats",
            "startPerformanceMonitoring",
            "capturePerformanceSnapshot",
            "checkPerformanceAlerts",
            "cleanupOldData",
            "isRecentRecord",
            "calculateSuccessRate",
            "updateAverageTime",
            "cleanup",
            "getStatistics",
            "getPerformanceMetrics",
            "calculateAveragePerformance",
            "calculateAverageSuccessRate",
            "calculateAverageGenerationTime",
            "getMostUsedTemplate",
            "calculateAverageTemplateEffectiveness",
            "calculateAverageOptimizationSuccess",
            "calculateAverageOptimizationImprovement",
            "calculateAverageIntegrationEfficiency",
            "calculateTotalDataVolume",
            "getComponentStatsSummary",
            "getPerformanceHistory",
            "slice",
            "getOptimizationEffects"
          ],
          "interfaces": [
            "SystemStatisticsConfig",
            "SystemStatisticsConfig",
            "PerformanceSnapshot",
            "PerformanceSnapshot",
            "ComponentUsageStats",
            "ComponentUsageStats",
            "OptimizationEffectiveness",
            "OptimizationEffectiveness"
          ],
          "imports": [
            "@/lib/utils/logger",
            "@/lib/storage",
            "@/types/chapters"
          ],
          "exports": [
            "SystemStatisticsConfig",
            "PerformanceSnapshot",
            "ComponentUsageStats",
            "OptimizationEffectiveness",
            "SystemStatisticsManager"
          ],
          "memoryOperations": [],
          "integrationPoints": [
            "character",
            "context",
            "integration"
          ],
          "cacheOperations": [],
          "performanceOptimizations": [
            "performance"
          ]
        }
      }
    },
    "longTermMemory": {
      "layerName": "long-term",
      "componentCount": 12,
      "totalMethods": 347,
      "totalInterfaces": 253,
      "layerCapabilities": [],
      "components": {
        "character-database.ts": {
          "path": "src\\lib\\memory\\long-term\\character-database.ts",
          "fileSize": 46747,
          "methods": [
            "initialize",
            "performInitializationWithRetry",
            "loadMasterRecordsWithFallback",
            "loadCharactersFromStorageWithFallback",
            "saveMasterRecords",
            "performCharacterConsolidationWithRetry",
            "performActualConsolidation",
            "consolidateCharacterSources",
            "generateConsolidationKey",
            "consolidateCharacterData",
            "mergeCharacterBasicData",
            "generateExtendedCharacterData",
            "generateMinimalExtendedData",
            "generatePersonalityData",
            "generateBackstoryData",
            "generateRelationshipData",
            "generateExtendedStateData",
            "generateDevelopmentHistory",
            "generateAppearanceHistory",
            "generateChangeHistory",
            "generateStatistics",
            "generateFormattedCharacterData",
            "generateCharacterMetadata",
            "generateConsolidationSources",
            "buildIndices",
            "getConsolidatedCharacterInfo",
            "getCharacterByName",
            "getAllCharacters",
            "getCharactersByType",
            "getRelatedCharacters",
            "updateCharacter",
            "refreshFormattedData",
            "diagnoseConsolidation",
            "sleep",
            "extractTraitsFromDescription",
            "inferCoreValues",
            "inferMotivations",
            "inferFears",
            "inferLeadership",
            "inferRelationship",
            "generateLongDescription",
            "generatePersonalityProfile",
            "generateRelationshipSummary",
            "generateStatusSummary",
            "generateDevelopmentArc",
            "generateCharacterTags",
            "calculateImportanceScore",
            "inferNarrativeRole",
            "incrementVersion",
            "save",
            "getStatus"
          ],
          "interfaces": [],
          "imports": [
            "@/lib/utils/logger",
            "@/types/characters",
            "@/lib/characters/manager",
            "./consolidation-guard",
            "@/lib/utils/yaml-helper",
            "@/lib/storage"
          ],
          "exports": [
            "CharacterDatabase"
          ],
          "memoryOperations": [
            "consolidateCharacterSources",
            "Consolidated",
            "consolidateCharacterData",
            "consolidate",
            "consolidatedData",
            "consolidatedFrom"
          ],
          "integrationPoints": [
            "character",
            "relationship",
            "skill",
            "parameter"
          ],
          "cacheOperations": [],
          "performanceOptimizations": []
        },
        "character-database copy.ts": {
          "path": "src\\lib\\memory\\long-term\\character-database copy.ts",
          "fileSize": 36450,
          "methods": [
            "initialize",
            "performCharacterConsolidation",
            "consolidateCharacterSources",
            "generateConsolidationKey",
            "consolidateCharacterData",
            "mergeCharacterBasicData",
            "generateExtendedCharacterData",
            "generatePersonalityData",
            "generateBackstoryData",
            "generateRelationshipData",
            "generateExtendedStateData",
            "generateDevelopmentHistory",
            "generateAppearanceHistory",
            "generateChangeHistory",
            "generateStatistics",
            "generateFormattedCharacterData",
            "generateCharacterMetadata",
            "generateConsolidationSources",
            "loadCharactersFromStorage",
            "loadMasterRecords",
            "saveMasterRecords",
            "buildIndices",
            "getConsolidatedCharacterInfo",
            "getCharacterByName",
            "getAllCharacters",
            "getCharactersByType",
            "getRelatedCharacters",
            "updateCharacter",
            "refreshFormattedData",
            "diagnoseConsolidation",
            "extractTraitsFromDescription",
            "inferCoreValues",
            "inferMotivations",
            "inferFears",
            "inferLeadership",
            "inferRelationship",
            "generateLongDescription",
            "generatePersonalityProfile",
            "generateRelationshipSummary",
            "generateStatusSummary",
            "generateDevelopmentArc",
            "generateCharacterTags",
            "calculateImportanceScore",
            "inferNarrativeRole",
            "incrementVersion",
            "save",
            "getStatus"
          ],
          "interfaces": [],
          "imports": [
            "@/lib/utils/logger",
            "@/lib/storage",
            "@/types/characters",
            "@/lib/characters/manager",
            "./consolidation-guard",
            "@/lib/utils/yaml-helper"
          ],
          "exports": [
            "CharacterDatabase"
          ],
          "memoryOperations": [
            "consolidateCharacterSources",
            "consolidateCharacterData",
            "consolidatedData",
            "consolidatedFrom"
          ],
          "integrationPoints": [
            "character",
            "relationship",
            "skill",
            "parameter"
          ],
          "cacheOperations": [],
          "performanceOptimizations": []
        },
        "character-database copy 2.ts": {
          "path": "src\\lib\\memory\\long-term\\character-database copy 2.ts",
          "fileSize": 47251,
          "methods": [
            "initialize",
            "performInitializationWithRetry",
            "loadMasterRecordsWithFallback",
            "performCharacterConsolidationWithRetry",
            "performActualConsolidation",
            "consolidateCharacterSources",
            "generateConsolidationKey",
            "consolidateCharacterData",
            "mergeCharacterBasicData",
            "generateExtendedCharacterData",
            "generateMinimalExtendedData",
            "generatePersonalityData",
            "generateBackstoryData",
            "generateRelationshipData",
            "generateExtendedStateData",
            "generateDevelopmentHistory",
            "generateAppearanceHistory",
            "generateChangeHistory",
            "generateStatistics",
            "generateFormattedCharacterData",
            "generateCharacterMetadata",
            "generateConsolidationSources",
            "loadCharactersFromStorageWithFallback",
            "saveMasterRecords",
            "buildIndices",
            "getConsolidatedCharacterInfo",
            "getCharacterByName",
            "getAllCharacters",
            "getCharactersByType",
            "getRelatedCharacters",
            "updateCharacter",
            "refreshFormattedData",
            "diagnoseConsolidation",
            "sleep",
            "extractTraitsFromDescription",
            "inferCoreValues",
            "inferMotivations",
            "inferFears",
            "inferLeadership",
            "inferRelationship",
            "generateLongDescription",
            "generatePersonalityProfile",
            "generateRelationshipSummary",
            "generateStatusSummary",
            "generateDevelopmentArc",
            "generateCharacterTags",
            "calculateImportanceScore",
            "inferNarrativeRole",
            "incrementVersion",
            "save",
            "getStatus"
          ],
          "interfaces": [],
          "imports": [
            "@/lib/utils/logger",
            "@/types/characters",
            "@/lib/characters/manager",
            "./consolidation-guard",
            "@/lib/utils/yaml-helper",
            "@/lib/storage"
          ],
          "exports": [
            "CharacterDatabase"
          ],
          "memoryOperations": [
            "consolidateCharacterSources",
            "Consolidated",
            "consolidateCharacterData",
            "consolidate",
            "consolidatedData",
            "consolidatedFrom"
          ],
          "integrationPoints": [
            "character",
            "relationship",
            "skill",
            "parameter"
          ],
          "cacheOperations": [],
          "performanceOptimizations": []
        },
        "character-database-types.ts": {
          "path": "src\\lib\\memory\\long-term\\character-database-types.ts",
          "fileSize": 12695,
          "methods": [],
          "interfaces": [
            "CharacterMasterRecord",
            "ExtendedCharacterState",
            "ConsolidationSource",
            "CharacterConflictResolution",
            "CharacterPersonality",
            "EmotionalRange",
            "SocialBehavior",
            "CharacterBackstory",
            "BackstoryEvent",
            "SignificantRelationship",
            "FormativeExperience",
            "CharacterRelationship",
            "RelationshipStatus",
            "RelationshipHistoryEntry",
            "RelationshipDynamics",
            "RelationshipMetadata",
            "DetailedEmotionalState",
            "EmotionalInfluence",
            "PhysicalCondition",
            "MentalCondition",
            "SocialStatus",
            "SkillRecord",
            "AbilityRecord",
            "KnowledgeRecord",
            "PossessionRecord",
            "ResourceRecord",
            "ObligationRecord",
            "GoalRecord",
            "MotivationRecord",
            "ConflictRecord",
            "CharacterDevelopmentRecord",
            "CharacterAppearanceRecord",
            "CharacterChangeRecord",
            "CharacterStatistics",
            "FormattedCharacterData",
            "CharacterMetadata",
            "InjuryRecord",
            "DisabilityRecord",
            "AppearanceRecord",
            "MentalIssueRecord",
            "SocialRole"
          ],
          "imports": [
            "@/types/characters"
          ],
          "exports": [
            "CharacterMasterRecord",
            "ExtendedCharacterState",
            "ConsolidationSource",
            "CharacterConflictResolution",
            "CharacterPersonality",
            "EmotionalRange",
            "SocialBehavior",
            "CharacterBackstory",
            "BackstoryEvent",
            "SignificantRelationship",
            "FormativeExperience",
            "CharacterRelationship",
            "RelationshipStatus",
            "RelationshipHistoryEntry",
            "RelationshipDynamics",
            "RelationshipMetadata",
            "DetailedEmotionalState",
            "EmotionalInfluence",
            "PhysicalCondition",
            "MentalCondition",
            "SocialStatus",
            "SkillRecord",
            "AbilityRecord",
            "KnowledgeRecord",
            "PossessionRecord",
            "ResourceRecord",
            "ObligationRecord",
            "GoalRecord",
            "MotivationRecord",
            "ConflictRecord",
            "CharacterDevelopmentRecord",
            "CharacterAppearanceRecord",
            "CharacterChangeRecord",
            "CharacterStatistics",
            "FormattedCharacterData",
            "CharacterMetadata",
            "InjuryRecord",
            "DisabilityRecord",
            "AppearanceRecord",
            "MentalIssueRecord",
            "SocialRole"
          ],
          "memoryOperations": [
            "consolidatedFrom"
          ],
          "integrationPoints": [
            "character",
            "relationship",
            "skill"
          ],
          "cacheOperations": [
            "temporary"
          ],
          "performanceOptimizations": []
        },
        "consolidation-guard.ts": {
          "path": "src\\lib\\memory\\long-term\\consolidation-guard.ts",
          "fileSize": 28787,
          "methods": [
            "setupProcessExitHandlers",
            "getInstance",
            "canStartConsolidation",
            "startConsolidation",
            "endConsolidation",
            "generateProcessSpecificKey",
            "performSuccessfulCleanup",
            "performTimeoutCleanup",
            "forceRelease",
            "clearProcessSpecificPersistence",
            "clearQueue",
            "optimizeSystem",
            "filter",
            "isTimeout",
            "calculateQueuePosition",
            "insertByPriority",
            "processNextInQueue",
            "startCleanupTimer",
            "performAutomaticCleanup",
            "filter",
            "getStatus",
            "toISOString",
            "debugInfo",
            "reset",
            "shutdown"
          ],
          "interfaces": [
            "ConsolidationProcess",
            "GuardStatus",
            "GuardStatistics",
            "QueuedConsolidation"
          ],
          "imports": [
            "@/lib/utils/logger"
          ],
          "exports": [
            "withConsolidationGuard"
          ],
          "memoryOperations": [
            "persistence"
          ],
          "integrationPoints": [],
          "cacheOperations": [],
          "performanceOptimizations": [
            "optimize",
            "performance"
          ]
        },
        "consolidation-guard copy.ts": {
          "path": "src\\lib\\memory\\long-term\\consolidation-guard copy.ts",
          "fileSize": 21154,
          "methods": [
            "getInstance",
            "canStartConsolidation",
            "startConsolidation",
            "endConsolidation",
            "forceRelease",
            "clearQueue",
            "optimizeSystem",
            "isTimeout",
            "calculateQueuePosition",
            "insertByPriority",
            "processNextInQueue",
            "startCleanupTimer",
            "performAutomaticCleanup",
            "filter",
            "getStatus",
            "toISOString",
            "debugInfo",
            "reset",
            "shutdown"
          ],
          "interfaces": [
            "ConsolidationProcess",
            "GuardStatus",
            "GuardStatistics",
            "QueuedConsolidation"
          ],
          "imports": [
            "@/lib/utils/logger"
          ],
          "exports": [
            "withConsolidationGuard"
          ],
          "memoryOperations": [],
          "integrationPoints": [],
          "cacheOperations": [],
          "performanceOptimizations": [
            "optimize",
            "performance"
          ]
        },
        "duplicate-resolver.ts": {
          "path": "src\\lib\\memory\\long-term\\duplicate-resolver.ts",
          "fileSize": 36651,
          "methods": [
            "initialize",
            "loadFromStorage",
            "loadCompletedSections",
            "loadCompletedArcs",
            "loadEffectivenessRecords",
            "loadSystemKnowledgePatterns",
            "listStorageFiles",
            "storageExists",
            "recordCompletedSection",
            "recordCompletedArc",
            "updateSystemKnowledgeFromSection",
            "updatePromptPattern",
            "updateSuccessPattern",
            "updateProblemSolutionPattern",
            "generatePatternId",
            "generateEffectivenessRecord",
            "analyzeQualityTrends",
            "extractLearnedKnowledge",
            "generateRecommendations",
            "saveEffectivenessRecords",
            "saveSystemKnowledgePatterns",
            "getCompletedSections",
            "getCompletedArcs",
            "getCompletedSection",
            "getCompletedArc",
            "getEffectivenessRecords",
            "getLatestEffectivenessRecord",
            "getSystemKnowledgePatterns",
            "getEffectivePatterns",
            "analyzeOverallQualityTrends",
            "getSystemEffectivenessStats",
            "getStatus",
            "save"
          ],
          "interfaces": [
            "CompletedSectionRecord",
            "CompletedArcRecord",
            "LongTermEffectivenessRecord",
            "SystemKnowledgePattern"
          ],
          "imports": [
            "@/lib/utils/logger",
            "@/lib/storage",
            "@/types/chapters",
            "@/types/characters",
            "./types"
          ],
          "exports": [
            "CompletedSectionRecord",
            "CompletedArcRecord",
            "LongTermEffectivenessRecord",
            "SystemKnowledgePattern",
            "HistoricalRecords"
          ],
          "memoryOperations": [],
          "integrationPoints": [
            "character",
            "learning",
            "context",
            "integration"
          ],
          "cacheOperations": [],
          "performanceOptimizations": [
            "optimize",
            "performance"
          ]
        },
        "long-term-memory.ts": {
          "path": "src\\lib\\memory\\long-term\\long-term-memory.ts",
          "fileSize": 32946,
          "methods": [
            "isConsolidationInProgress",
            "pauseAutoConsolidation",
            "resumeAutoConsolidation",
            "processConsolidationQueue",
            "initialize",
            "startAutoConsolidation",
            "processChapterCompletion",
            "performConsolidation",
            "integrateCharacterData",
            "recordSignificantEvents",
            "updateWorldKnowledge",
            "performSystemLearning",
            "validateDataIntegrity",
            "evaluateOverallQuality",
            "getStatistics",
            "updateConfiguration",
            "save",
            "cleanup",
            "getConsolidationGuardStatus",
            "getConsolidationGuardStatistics",
            "emergencyStop",
            "getCharacter",
            "getWorldSettings",
            "getEffectivePatterns",
            "getHistorySummary"
          ],
          "interfaces": [
            "LongTermMemoryConfig",
            "LongTermMemoryStats"
          ],
          "imports": [
            "@/lib/utils/logger",
            "@/types/chapters",
            "@/types/characters",
            "./consolidation-guard",
            "./character-database",
            "./duplicate-resolver",
            "./system-knowledge",
            "./world-knowledge"
          ],
          "exports": [
            "LongTermMemoryConfig",
            "LongTermMemoryStats",
            "LongTermMemory"
          ],
          "memoryOperations": [],
          "integrationPoints": [
            "character",
            "learning",
            "integration",
            "resolver"
          ],
          "cacheOperations": [],
          "performanceOptimizations": []
        },
        "system-knowledge.ts": {
          "path": "src\\lib\\memory\\long-term\\system-knowledge.ts",
          "fileSize": 53412,
          "methods": [
            "initialize",
            "integrateRescuedComponentData",
            "rescuePromptGeneratorData",
            "rescueDynamicTensionOptimizerData",
            "rescueEmotionalArcDesignerData",
            "rescueTextAnalyzerServiceData",
            "rescueContextGeneratorData",
            "rescueStorageDiagnosticManagerData",
            "rescueNarrativeAnalysisServiceData",
            "rescueDetectionServiceData",
            "rescueCharacterChangeHandlerData",
            "rescueEventBusData",
            "rescuePreGenerationPipelineData",
            "rescuePostGenerationPipelineData",
            "extractEmotionalDesignPatterns",
            "extractTextAnalysisPatterns",
            "extractPromptPatternsFromHistory",
            "forEach",
            "identifyEffectiveTemplates",
            "learnFromQualityMetrics",
            "extractOptimizationPatterns",
            "extractEmotionalAnalysisPatterns",
            "forEach",
            "generatePatternKey",
            "extractVariables",
            "loadComponentData",
            "loadAllKnowledgeData",
            "loadPromptPatterns",
            "loadTemplatePatterns",
            "loadAnalysisPatterns",
            "loadOptimizationStrategies",
            "loadErrorPatterns",
            "loadQualityStrategies",
            "buildAllIndices",
            "addToIndex",
            "addToEffectivenessIndex",
            "addPromptGenerationPattern",
            "addEffectiveTemplatePattern",
            "addAnalysisPattern",
            "addOptimizationStrategy",
            "addErrorPattern",
            "addQualityImprovementStrategy",
            "getPatternsByCategory",
            "getHighEffectivenessPatterns",
            "performLearningAndImprovement",
            "evaluatePatternEffectiveness",
            "generateImprovementRecommendations",
            "savePromptPatterns",
            "saveTemplatePatterns",
            "saveAnalysisPatterns",
            "saveOptimizationStrategies",
            "saveErrorPatterns",
            "saveQualityStrategies",
            "save",
            "getStatus"
          ],
          "interfaces": [],
          "imports": [
            "@/lib/utils/logger",
            "@/lib/storage"
          ],
          "exports": [
            "SystemKnowledge"
          ],
          "memoryOperations": [
            "cache",
            "cacheHitRate",
            "backupStrategy",
            "index",
            "indexType",
            "indexKey"
          ],
          "integrationPoints": [
            "character",
            "learning",
            "evolution",
            "parameter",
            "context"
          ],
          "cacheOperations": [
            "cache",
            "buffer",
            "immediate"
          ],
          "performanceOptimizations": [
            "optimize",
            "performance"
          ]
        },
        "system-types.ts": {
          "path": "src\\lib\\memory\\long-term\\system-types.ts",
          "fileSize": 30262,
          "methods": [],
          "interfaces": [
            "PromptGenerationPattern",
            "PromptVariable",
            "PromptCondition",
            "VariableConstraint",
            "EffectivenessMetrics",
            "UsageStatistics",
            "PerformanceMetrics",
            "SuccessCase",
            "FailureCase",
            "OptimizationRecord",
            "EffectiveTemplatePattern",
            "TemplateStructure",
            "TemplateSection",
            "TemplatePlaceholder",
            "PlaceholderTransformation",
            "BestPractice",
            "CommonMistake",
            "MistakeExample",
            "ApplicableContext",
            "TemplateVariation",
            "TemplateDifference",
            "TemplateEvolution",
            "TemplateChange",
            "FeedbackData",
            "ValidationRule",
            "Evidence",
            "AnalysisPattern",
            "AnalysisMethodology",
            "AnalysisStep",
            "ProcessingInstruction",
            "AnalysisParameter",
            "AccuracyMetrics",
            "ReliabilityMetrics",
            "InputRequirement",
            "OutputFormat",
            "PostProcessingStep",
            "TrainingData",
            "ValidationResult",
            "ImprovementRecord",
            "OptimizationStrategy",
            "OptimizationApproach",
            "OptimizationPhase",
            "OptimizationTechnique",
            "TechniqueStep",
            "ResourceRequirement",
            "Benefit",
            "ImpactMeasurement",
            "OptimizationScenario",
            "Prerequisite",
            "OptimizationConstraint",
            "ImplementationGuide",
            "ImplementationStep",
            "Checkpoint",
            "CheckpointAction",
            "TroubleshootingGuide",
            "DiagnosisStep",
            "Solution",
            "RollbackPlan",
            "RollbackTrigger",
            "RollbackStep",
            "DataRecoveryPlan",
            "MonitoringMetric",
            "MetricThreshold",
            "AlertThreshold",
            "ErrorPattern",
            "ErrorSymptom",
            "RootCause",
            "FrequencyData",
            "TrendData",
            "SeverityData",
            "ErrorImpact",
            "DetectionMethod",
            "EarlyWarning",
            "ErrorSolution",
            "SolutionStep",
            "PreventionMeasure",
            "ErrorOccurrence",
            "ErrorResolution",
            "QualityImprovementStrategy",
            "QualityApproach",
            "QualityPhase",
            "QualityMetric",
            "QualityTarget",
            "QualityTechnique",
            "QualityTool",
            "QualityImplementationPlan",
            "ImplementationPhase",
            "Activity",
            "ResourceAllocation",
            "Timeline",
            "Risk",
            "Dependency",
            "QualityMilestone",
            "MeasurementFramework",
            "DataCollectionMethod",
            "AnalysisMethod",
            "ReportingMethod",
            "MeasurementGovernance",
            "Role",
            "Responsibility",
            "Process",
            "ProcessStep",
            "Standard",
            "ContinuousImprovementPlan",
            "ReviewProcess",
            "ImprovementAction",
            "LearningCapture"
          ],
          "imports": [],
          "exports": [
            "PromptGenerationPattern",
            "PromptVariable",
            "PromptCondition",
            "VariableConstraint",
            "EffectivenessMetrics",
            "UsageStatistics",
            "PerformanceMetrics",
            "SuccessCase",
            "FailureCase",
            "OptimizationRecord",
            "EffectiveTemplatePattern",
            "TemplateStructure",
            "TemplateSection",
            "TemplatePlaceholder",
            "PlaceholderTransformation",
            "BestPractice",
            "CommonMistake",
            "MistakeExample",
            "ApplicableContext",
            "TemplateVariation",
            "TemplateDifference",
            "TemplateEvolution",
            "TemplateChange",
            "FeedbackData",
            "ValidationRule",
            "Evidence",
            "AnalysisPattern",
            "AnalysisMethodology",
            "AnalysisStep",
            "ProcessingInstruction",
            "AnalysisParameter",
            "AccuracyMetrics",
            "ReliabilityMetrics",
            "InputRequirement",
            "OutputFormat",
            "PostProcessingStep",
            "TrainingData",
            "ValidationResult",
            "ImprovementRecord",
            "OptimizationStrategy",
            "OptimizationApproach",
            "OptimizationPhase",
            "OptimizationTechnique",
            "TechniqueStep",
            "ResourceRequirement",
            "Benefit",
            "ImpactMeasurement",
            "OptimizationScenario",
            "Prerequisite",
            "OptimizationConstraint",
            "ImplementationGuide",
            "ImplementationStep",
            "Checkpoint",
            "CheckpointAction",
            "TroubleshootingGuide",
            "DiagnosisStep",
            "Solution",
            "RollbackPlan",
            "RollbackTrigger",
            "RollbackStep",
            "DataRecoveryPlan",
            "MonitoringMetric",
            "MetricThreshold",
            "AlertThreshold",
            "ErrorPattern",
            "ErrorSymptom",
            "RootCause",
            "FrequencyData",
            "TrendData",
            "SeverityData",
            "ErrorImpact",
            "DetectionMethod",
            "EarlyWarning",
            "ErrorSolution",
            "SolutionStep",
            "PreventionMeasure",
            "ErrorOccurrence",
            "ErrorResolution",
            "QualityImprovementStrategy",
            "QualityApproach",
            "QualityPhase",
            "QualityMetric",
            "QualityTarget",
            "QualityTechnique",
            "QualityTool",
            "QualityImplementationPlan",
            "ImplementationPhase",
            "Activity",
            "ResourceAllocation",
            "Timeline",
            "Risk",
            "Dependency",
            "QualityMilestone",
            "MeasurementFramework",
            "DataCollectionMethod",
            "AnalysisMethod",
            "ReportingMethod",
            "MeasurementGovernance",
            "Role",
            "Responsibility",
            "Process",
            "ProcessStep",
            "Standard",
            "ContinuousImprovementPlan",
            "ReviewProcess",
            "ImprovementAction",
            "LearningCapture"
          ],
          "memoryOperations": [
            "cacheHitRate",
            "backupStrategy"
          ],
          "integrationPoints": [
            "character",
            "learning",
            "evolution",
            "parameter",
            "context",
            "integration"
          ],
          "cacheOperations": [
            "cache",
            "buffer",
            "immediate"
          ],
          "performanceOptimizations": [
            "optimize",
            "performance"
          ]
        },
        "types.ts": {
          "path": "src\\lib\\memory\\long-term\\types.ts",
          "fileSize": 17804,
          "methods": [
            "initialize"
          ],
          "interfaces": [
            "ManagerConstructorOptions",
            "ManagerConstructorOptions",
            "UpdateOptions",
            "UpdateOptions",
            "IManager",
            "IManager",
            "NarrativeStateInfo",
            "NarrativeStateInfo",
            "StateTransition",
            "StateTransition",
            "StagnationDetectionResult",
            "StagnationDetectionResult",
            "TurningPoint",
            "TurningPoint",
            "CharacterProgress",
            "CharacterProgress",
            "CharacterChangeInfo",
            "CharacterChangeInfo",
            "ChapterSummary",
            "ChapterSummary",
            "ChapterMemory",
            "ChapterMemory",
            "KeyEvent",
            "KeyEvent",
            "CharacterState",
            "CharacterState",
            "Relationship",
            "Relationship",
            "EmotionalCurvePoint",
            "EmotionalCurvePoint",
            "ChapterEmotionAnalysis",
            "ChapterEmotionAnalysis",
            "EmotionalArcDesign",
            "EmotionalArcDesign",
            "TensionRecommendation",
            "TensionRecommendation",
            "PacingRecommendation",
            "PacingRecommendation",
            "TensionPacingRecommendation",
            "TensionPacingRecommendation",
            "Foreshadowing",
            "Foreshadowing",
            "ForeshadowingEvaluation",
            "ForeshadowingEvaluation",
            "ForeshadowingMethodSuggestion",
            "ForeshadowingMethodSuggestion",
            "ArcMemory",
            "ArcMemory",
            "CompressedMemory",
            "CompressedMemory",
            "NarrativeMetrics",
            "NarrativeMetrics",
            "ThemeResonanceAnalysis",
            "ThemeResonanceAnalysis",
            "SignificantEvent",
            "SignificantEvent",
            "BusinessEvent",
            "BusinessEvent",
            "BusinessStoryEvent",
            "BusinessStoryEvent",
            "NarrativeMemoryStatus",
            "NarrativeMemoryStatus",
            "MemorySystemStatus",
            "MemorySystemStatus",
            "EmotionLearningSyncMetrics",
            "EmotionLearningSyncMetrics",
            "QueryOptions",
            "QueryOptions",
            "SearchOptions",
            "SearchOptions",
            "Memory",
            "Memory",
            "SearchResult",
            "SearchResult"
          ],
          "imports": [
            "@/types/chapters",
            "@/lib/generation/gemini-client"
          ],
          "exports": [
            "ManagerConstructorOptions",
            "UpdateOptions",
            "IManager",
            "NarrativeStateInfo",
            "StateTransition",
            "StagnationDetectionResult",
            "TurningPoint",
            "CharacterProgress",
            "CharacterChangeInfo",
            "ChapterSummary",
            "ChapterMemory",
            "KeyEvent",
            "CharacterState",
            "Relationship",
            "EmotionalCurvePoint",
            "ChapterEmotionAnalysis",
            "EmotionalArcDesign",
            "TensionRecommendation",
            "PacingRecommendation",
            "TensionPacingRecommendation",
            "Foreshadowing",
            "ForeshadowingEvaluation",
            "ForeshadowingMethodSuggestion",
            "ArcMemory",
            "CompressedMemory",
            "NarrativeMetrics",
            "ThemeResonanceAnalysis",
            "SignificantEvent",
            "BusinessEvent",
            "BusinessStoryEvent",
            "NarrativeMemoryStatus",
            "MemorySystemStatus",
            "EmotionLearningSyncMetrics",
            "QueryOptions",
            "SearchOptions",
            "Memory",
            "SearchResult"
          ],
          "memoryOperations": [
            "PersistentEventType",
            "SearchOptions",
            "SearchResult"
          ],
          "integrationPoints": [
            "character",
            "learning",
            "relationship",
            "skill",
            "parameter",
            "context",
            "integration"
          ],
          "cacheOperations": [],
          "performanceOptimizations": [
            "performance"
          ]
        },
        "world-knowledge.ts": {
          "path": "src\\lib\\memory\\long-term\\world-knowledge.ts",
          "fileSize": 41479,
          "methods": [
            "initialize",
            "performInitialConsolidation",
            "consolidateWorldSettingsFromMultipleSources",
            "consolidateGenreSettingsFromMultipleSources",
            "consolidateTemplates",
            "consolidateSystemConfigs",
            "mergeWorldSettingsData",
            "mergeGenreSettingsData",
            "getSourcePriority",
            "getConsolidatedWorldSettings",
            "getConsolidatedGenreSettings",
            "getConsolidatedCharacterInfo",
            "getUnifiedMemoryAccess",
            "searchConcepts",
            "searchForeshadowing",
            "getRelevantKnowledge",
            "getRelevantLocations",
            "getRelevantEvents",
            "getRelevantCultures",
            "addForeshadowing",
            "resolveForeshadowing",
            "getUnresolvedForeshadowing",
            "getResolvedForeshadowing",
            "addConcept",
            "updateConcept",
            "incrementConceptUsage",
            "loadConsolidatedSettings",
            "loadKnowledgeDatabase",
            "loadForeshadowingDatabase",
            "saveConsolidatedSettings",
            "saveConceptDefinitions",
            "saveForeshadowingDatabase",
            "save",
            "createDefaultWorldSettings",
            "createDefaultGenreSettings",
            "createDefaultWorldKnowledgeDatabase",
            "createDefaultForeshadowingDatabase",
            "getStatus",
            "diagnoseConsolidation",
            "forceReconsolidation"
          ],
          "interfaces": [
            "WorldSettingsMasterRecord",
            "GenreSettingsMasterRecord",
            "TemplateMasterRecord",
            "SystemConfigMasterRecord",
            "WorldKnowledgeDatabase",
            "ConceptDefinitionRecord",
            "ForeshadowingDatabase",
            "ForeshadowingPattern",
            "ForeshadowingEffectiveness",
            "SectionDefinitionRecord",
            "ConflictResolution",
            "LocationRecord",
            "HistoricalEventRecord",
            "CultureRecord",
            "TechnologyRecord",
            "MagicSystemRecord",
            "PoliticalSystemRecord"
          ],
          "imports": [
            "@/lib/utils/logger",
            "@/lib/storage",
            "@/types/memory",
            "@/types/characters",
            "./consolidation-guard"
          ],
          "exports": [
            "WorldKnowledge"
          ],
          "memoryOperations": [
            "cache",
            "PersistentEventType",
            "consolidatedFrom",
            "consolidatedSettings",
            "consolidateWorldSettingsFromMultipleSources",
            "consolidateGenreSettingsFromMultipleSources",
            "consolidateTemplates",
            "consolidateSystemConfigs",
            "consolidatedData",
            "Consolidated",
            "consolidatedGenre",
            "consolidate",
            "consolidated",
            "consolidatedSources",
            "index",
            "searchConcepts",
            "searchForeshadowing"
          ],
          "integrationPoints": [
            "character",
            "context",
            "unified"
          ],
          "cacheOperations": [
            "cache"
          ],
          "performanceOptimizations": [
            "optimize"
          ]
        }
      }
    }
  },
  "integrationSystem": {
    "accessOptimizer": {
      "path": "src\\lib\\memory\\integration\\access-optimizer.ts",
      "fileSize": 40843,
      "methods": [
        "initializeStatistics",
        "determineOptimalStrategy",
        "getBaseStrategy",
        "analyzeAccessPattern",
        "evaluateSystemState",
        "optimizeAccessPatterns",
        "selectStrategy",
        "executeCacheFirst",
        "executeConsistencyFirst",
        "executePerformanceFirst",
        "executePredictive",
        "executeBalanced",
        "learnAccessPattern",
        "generatePatternKey",
        "stringify",
        "generateCacheKey",
        "inferOptimalLevel",
        "pruneAccessPatterns",
        "shouldApplyDeduplication",
        "applyDeduplication",
        "removeDuplicates",
        "generateItemKey",
        "shouldApplyPreload",
        "applyPreload",
        "performPredictivePreload",
        "predictRelatedQueries",
        "predictNextAccess",
        "validateConsistency",
        "validateDataConsistency",
        "calculateDataConsistency",
        "invalidateInconsistentCache",
        "monitorPerformance",
        "updatePerformancePattern",
        "updateStatistics",
        "calculateOptimizationEffectiveness",
        "recordAccessHistory",
        "getStatistics",
        "updateConfiguration",
        "calculateSystemLoad",
        "countAlternativesPruned",
        "calculatePerformanceGain",
        "calculateConsistencyScore"
      ],
      "interfaces": [
        "AccessPattern",
        "OptimizationConfig",
        "OptimizedAccessResult",
        "AccessStatistics"
      ],
      "imports": [
        "@/lib/utils/logger",
        "./cache-coordinator",
        "./duplicate-resolver",
        "../core/types"
      ],
      "exports": [
        "AccessPattern",
        "OptimizationConfig",
        "OptimizedAccessResult",
        "AccessStatistics",
        "AccessOptimizer"
      ],
      "memoryOperations": [
        "CacheCoordinator",
        "cache",
        "cacheHitRate",
        "cacheWarmupEnabled",
        "CACHE_FIRST",
        "cacheHit",
        "CACHE_PREFERENCE_THRESHOLD",
        "cacheCoordinator",
        "cacheUtilization",
        "cacheStats",
        "cacheHitRatio",
        "cacheKey",
        "cached",
        "search"
      ],
      "integrationPoints": [
        "character",
        "learning",
        "parameter",
        "unified",
        "coordinator",
        "resolver"
      ],
      "cacheOperations": [
        "cache"
      ],
      "performanceOptimizations": [
        "optimize",
        "performance",
        "parallel"
      ]
    },
    "cacheCoordinator": {
      "path": "src\\lib\\memory\\integration\\cache-coordinator.ts",
      "fileSize": 33665,
      "methods": [
        "initializeCaches",
        "initializeStatistics",
        "startPeriodicCleanup",
        "coordinateCache",
        "predictiveCache",
        "getFromCache",
        "setCache",
        "invalidateCache",
        "getDiagnostics",
        "getStatisticsAsData",
        "invalidate",
        "getStatistics",
        "clear",
        "coordinateHierarchy",
        "propagateToLowerLevels",
        "notifyUpperLevels",
        "generatePreloadItems",
        "executePreload",
        "fetchDataForPreload",
        "calculateDataSize",
        "ensureCacheCapacity",
        "calculateCacheSize",
        "evictLeastRecentlyUsed",
        "analyzeDependencies",
        "findDependentKeys",
        "matchesPattern",
        "calculatePriority",
        "generateTags",
        "updateStatistics",
        "recordHit",
        "recordMiss",
        "processInvalidationEvents",
        "propagateInvalidation",
        "performCleanup"
      ],
      "interfaces": [
        "CacheEntry",
        "CacheStatistics",
        "CacheInvalidationEvent",
        "PreloadConfiguration"
      ],
      "imports": [
        "@/lib/utils/logger"
      ],
      "exports": [
        "CacheEntry",
        "CacheStatistics",
        "CacheInvalidationEvent",
        "PreloadConfiguration",
        "CacheCoordinator"
      ],
      "memoryOperations": [
        "CacheStatisticsData",
        "CacheEntry",
        "CacheStatistics",
        "CacheInvalidationEvent",
        "CacheCoordinator",
        "caches",
        "CACHE_TTL",
        "cacheKey",
        "cache",
        "Cache",
        "cacheSize",
        "cached"
      ],
      "integrationPoints": [
        "character",
        "context",
        "unified",
        "coordinator"
      ],
      "cacheOperations": [
        "cache",
        "immediate"
      ],
      "performanceOptimizations": []
    },
    "duplicateResolver": {
      "path": "src\\lib\\memory\\integration\\duplicate-resolver.ts",
      "fileSize": 37263,
      "methods": [
        "getConsolidatedWorldSettings",
        "getWorldSettings",
        "getCurrentState",
        "getStatus",
        "getConsolidatedCharacterInfo",
        "getCharacter",
        "getCharacter",
        "filter",
        "resolveAccess",
        "detectDataDuplicates",
        "resolveDuplicates",
        "getDiagnostics",
        "getUnifiedMemoryAccess",
        "isCacheValid",
        "resolveStringField",
        "resolveArrayField",
        "resolveCharacterStringField",
        "resolveCharacterArrayField",
        "getNestedValue",
        "generateMemoryAccessCacheKey",
        "stringify",
        "calculateDataFreshness",
        "handleWorldSettingsQuery",
        "handleCharacterInfoQuery",
        "handleChapterMemoriesQuery",
        "handleArcMemoryQuery",
        "handleKeyEventsQuery",
        "handleSearchQuery",
        "push",
        "performKeywordSearch"
      ],
      "interfaces": [
        "MemoryQuery",
        "MemoryResult",
        "ConsolidatedCharacterInfo",
        "ConsolidatedWorldSettings"
      ],
      "imports": [
        "@/lib/utils/logger",
        "@/lib/plot/types",
        "@/types/characters",
        "@/types/memory"
      ],
      "exports": [
        "MemoryQuery",
        "MemoryResult",
        "ConsolidatedCharacterInfo",
        "ConsolidatedWorldSettings",
        "DuplicateResolver"
      ],
      "memoryOperations": [
        "cache",
        "cacheHit",
        "CACHE_TTL",
        "cacheKey",
        "cached",
        "ConsolidatedCharacterInfo",
        "ConsolidatedWorldSettings",
        "consolidatedSettings",
        "consolidated",
        "consolidate",
        "consolidatedCharacter",
        "index",
        "indexOf",
        "SearchResult",
        "search",
        "searchQuery"
      ],
      "integrationPoints": [
        "character",
        "relationship",
        "parameter",
        "context",
        "unified",
        "resolver"
      ],
      "cacheOperations": [
        "cache",
        "immediate",
        "short-term"
      ],
      "performanceOptimizations": []
    },
    "qualityAssurance": {
      "path": "src\\lib\\memory\\integration\\quality-assurance.ts",
      "fileSize": 49368,
      "methods": [
        "initializeMetrics",
        "startMonitoring",
        "performComprehensiveDiagnostic",
        "checkDataIntegrity",
        "checkSystemStability",
        "checkPerformance",
        "checkOperationalEfficiency",
        "calculateAutomationLevel",
        "calculateMaintenanceOverhead",
        "calculateAlertAccuracy",
        "calculateAverageResolutionTime",
        "map",
        "checkComponentHealth",
        "checkIndividualComponentHealth",
        "collectAndAnalyzeIssues",
        "generateRecommendations",
        "analyzeTrends",
        "calculateOverallHealth",
        "addQualityIssue",
        "performPeriodicCheck",
        "cleanupOldData",
        "generateQualityReport",
        "getCurrentMetrics",
        "updateConfiguration",
        "stopMonitoring",
        "getLastDiagnosticResult",
        "getIssueHistory"
      ],
      "interfaces": [
        "QualityMetrics",
        "QualityIssue",
        "DiagnosticResult",
        "MonitoringConfig",
        "QualityAssuranceReport"
      ],
      "imports": [
        "@/lib/utils/logger",
        "./cache-coordinator",
        "./duplicate-resolver",
        "./access-optimizer"
      ],
      "exports": [
        "QualityMetrics",
        "QualityIssue",
        "DiagnosticResult",
        "MonitoringConfig",
        "QualityAssuranceReport",
        "QualityAssurance"
      ],
      "memoryOperations": [
        "CacheCoordinator",
        "cache",
        "cacheCoordinator",
        "cacheStats",
        "Cache",
        "cacheHitRate"
      ],
      "integrationPoints": [
        "character",
        "context",
        "coordinator",
        "resolver"
      ],
      "cacheOperations": [
        "cache",
        "immediate"
      ],
      "performanceOptimizations": [
        "optimize",
        "performance"
      ]
    },
    "integrationCapabilities": {
      "accessOptimization": "ENTERPRISE_LEVEL",
      "cacheCoordination": "ADVANCED",
      "duplicateResolution": "COMPREHENSIVE",
      "qualityAssurance": "RIGOROUS",
      "overallCapability": "SUPERIOR"
    }
  },
  "storageSystem": {
    "backupSystem": {
      "path": "src\\lib\\memory\\storage\\backup-system.ts",
      "fileSize": 40929,
      "methods": [
        "initialize",
        "createFullBackup",
        "createIncrementalBackup",
        "get",
        "restoreData",
        "validateBackup",
        "listBackups",
        "deleteBackup",
        "getScheduleInfo",
        "updateConfig",
        "shutdown",
        "createBackupStructure",
        "loadConfig",
        "saveConfig",
        "loadBackupMetadata",
        "Date",
        "saveBackupMetadata",
        "startScheduler",
        "stopScheduler",
        "cleanupOldBackups",
        "generateBackupId",
        "getSystemVersion",
        "findLatestFullBackup",
        "findLatestBackup",
        "backupSystemMetadata",
        "backupComponent",
        "generateBackupChecksum",
        "simpleHash",
        "findChangedFiles",
        "backupChangedFiles",
        "restoreComponent",
        "validateRestoredData",
        "countBackupFiles",
        "listDirectoryFiles",
        "deleteDirectory",
        "ensureDirectoryExists"
      ],
      "interfaces": [
        "BackupMetadata",
        "BackupConfig",
        "RestoreOptions",
        "RestoreResult",
        "ScheduleInfo"
      ],
      "imports": [
        "@/lib/utils/logger",
        "@/lib/storage",
        "@/lib/utils/promise-utils"
      ],
      "exports": [
        "BackupSystem",
        "backupSystem"
      ],
      "memoryOperations": [
        "BackupType",
        "BackupStatus",
        "BackupMetadata",
        "BackupConfig",
        "backupId",
        "BackupSystem",
        "BACKUP_BASE_PATH",
        "backups",
        "backup",
        "backupMetadata",
        "backupPath",
        "backupComponent",
        "backupSystemMetadata",
        "backupChangedFiles",
        "Backup",
        "backupsToDelete",
        "backupFiles",
        "backupFile",
        "backupSystem",
        "RESTORED",
        "RestoreOptions",
        "RestoreResult",
        "restoredComponents",
        "restoreData",
        "restoredFiles",
        "restoreComponent",
        "restored",
        "restore",
        "Restored"
      ],
      "integrationPoints": [
        "character",
        "context"
      ],
      "cacheOperations": [
        "immediate"
      ],
      "performanceOptimizations": []
    },
    "cacheStorage": {
      "path": "src\\lib\\memory\\storage\\cache-storage.ts",
      "fileSize": 24516,
      "methods": [
        "initialize",
        "delete",
        "has",
        "query",
        "deleteByTags",
        "clear",
        "cleanup",
        "optimizeLRU",
        "getStatistics",
        "optimize",
        "shutdown",
        "startPeriodicCleanup",
        "ensureCapacity",
        "optimizeBySize",
        "calculateSize",
        "updateStatistics",
        "recordAccessTime"
      ],
      "interfaces": [
        "CacheEntry",
        "CacheStatistics",
        "CacheOptions",
        "CacheQueryOptions",
        "OptimizationResult"
      ],
      "imports": [
        "@/lib/utils/logger"
      ],
      "exports": [
        "CacheStorage",
        "cacheStorage"
      ],
      "memoryOperations": [
        "CacheEntry",
        "CacheStatistics",
        "CacheOptions",
        "CacheQueryOptions",
        "CacheStorage",
        "cache",
        "Cache",
        "cacheStorage",
        "persistent"
      ],
      "integrationPoints": [],
      "cacheOperations": [
        "cache"
      ],
      "performanceOptimizations": [
        "optimize"
      ]
    },
    "migrationTools": {
      "path": "src\\lib\\memory\\storage\\migration-tools.ts",
      "fileSize": 44776,
      "methods": [
        "initialize",
        "detectCurrentVersion",
        "executeMigration",
        "validateData",
        "generateValidationSuggestion",
        "rollbackMigration",
        "getMigrationHistory",
        "getAvailableMigrationPlans",
        "convertDataFormat",
        "getSystemMigrationStatus",
        "createMigrationStructure",
        "initializeMigrationPlans",
        "loadMigrationRecords",
        "Date",
        "saveMigrationRecords",
        "validateSystemVersion",
        "performMigration",
        "performDryRun",
        "executeMigrationStep",
        "createRollbackBackup",
        "performRollback",
        "loadComponentData",
        "saveTransformedData",
        "getDataTransformer",
        "getDataValidator",
        "validateComponentStructure",
        "generateValidationSuggestion",
        "validateDependencies",
        "validateMigrationResult",
        "calculateDataSize",
        "generateMigrationChecksum",
        "simpleHash",
        "generateMigrationId"
      ],
      "interfaces": [
        "MigrationRecord",
        "MigrationPlan",
        "MigrationStep",
        "MigrationResult",
        "ValidationResult",
        "MigrationOptions"
      ],
      "imports": [
        "@/lib/utils/logger",
        "@/lib/storage",
        "@/lib/utils/promise-utils"
      ],
      "exports": [
        "MigrationTools",
        "migrationTools"
      ],
      "memoryOperations": [
        "cache",
        "Consolidate",
        "Migrate",
        "migrate",
        "backupPath",
        "backup",
        "backupFiles",
        "backupFile",
        "backupData"
      ],
      "integrationPoints": [
        "character",
        "context",
        "unified"
      ],
      "cacheOperations": [
        "cache",
        "immediate"
      ],
      "performanceOptimizations": []
    },
    "persistentStorage": {
      "path": "src\\lib\\memory\\storage\\persistent-storage.ts",
      "fileSize": 26380,
      "methods": [
        "initialize",
        "createStorageStructure",
        "initializeMetadataCache",
        "initializeStatistics",
        "persistData",
        "deleteData",
        "queryData",
        "checkDataIntegrity",
        "getStatistics",
        "optimizeStorage",
        "saveMetadataCache",
        "buildFullPath",
        "extractRelativePath",
        "updateFileMetadata",
        "createBackup",
        "validateWrittenData",
        "compressData",
        "decompressData",
        "recordAccessTime",
        "updateStatistics"
      ],
      "interfaces": [
        "IntegrityCheckResult",
        "StorageStatistics",
        "PersistOptions",
        "QueryOptions",
        "FileMetadata"
      ],
      "imports": [
        "@/lib/utils/logger",
        "@/lib/storage",
        "@/lib/utils/promise-utils"
      ],
      "exports": [
        "PersistentStorage",
        "persistentStorage"
      ],
      "memoryOperations": [
        "cache",
        "PersistOptions",
        "PersistentStorage",
        "persistData",
        "persistence",
        "persisted",
        "persist",
        "persistentStorage",
        "backup",
        "BACKUP",
        "backupPath",
        "Backup"
      ],
      "integrationPoints": [],
      "cacheOperations": [
        "cache",
        "short-term"
      ],
      "performanceOptimizations": [
        "optimize"
      ]
    },
    "storageCapabilities": {
      "backupReliability": "ENTERPRISE_GRADE",
      "cacheEfficiency": "OPTIMIZED",
      "migrationSupport": "COMPREHENSIVE",
      "persistenceStrategy": "ADVANCED",
      "overallCapability": "PROFESSIONAL"
    }
  },
  "systemIntegration": {
    "characterSystemIntegration": {
      "integrationLevel": "DEEP_NATIVE_INTEGRATION",
      "dataFlowOptimization": "UNIFIED_MEMORY_ACCESS",
      "performanceImpact": "POSITIVE_ACCELERATION",
      "systemSynergy": "MULTIPLICATIVE_ENHANCEMENT"
    },
    "learningJourneyIntegration": {
      "learningDataPersistence": "HIERARCHICAL_MEMORY_STORAGE",
      "adaptiveCaching": "INTELLIGENT_CACHE_MANAGEMENT",
      "contextMemoryIntegration": "SEAMLESS_CONTEXT_FLOW",
      "performanceOptimization": "LEARNING_ENHANCED_EFFICIENCY"
    },
    "crossSystemDataFlow": {
      "dataFlowPattern": "UNIFIED_HIERARCHICAL_FLOW",
      "integrationEfficiency": "OPTIMIZED_CROSS_SYSTEM_ACCESS",
      "consistencyManagement": "AUTOMATIC_CONSISTENCY_ASSURANCE",
      "performanceImpact": "ENHANCED_SYSTEM_THROUGHPUT"
    },
    "unifiedMemoryAccess": {
      "accessPattern": "SINGLE_UNIFIED_API",
      "optimizationLevel": "AUTOMATIC_ACCESS_OPTIMIZATION",
      "cacheStrategy": "INTELLIGENT_HIERARCHICAL_CACHING",
      "performanceGain": "SIGNIFICANT_LATENCY_REDUCTION"
    },
    "systemPerformanceOptimization": {
      "optimizationScope": "SYSTEM_WIDE_OPTIMIZATION",
      "cacheEfficiency": "MULTI_LAYER_CACHE_OPTIMIZATION",
      "accessOptimization": "INTELLIGENT_ACCESS_ROUTING",
      "overallImpact": "DRAMATIC_PERFORMANCE_IMPROVEMENT"
    }
  },
  "performanceAnalysis": {
    "memorySystemOverhead": {
      "initialOverhead": "MODERATE",
      "scalingBehavior": "LOGARITHMIC_SCALING",
      "optimizationPotential": "HIGH",
      "netPerformanceImpact": "POSITIVE_AFTER_OPTIMIZATION"
    },
    "integrationComplexity": {
      "complexityLevel": "HIGH_BUT_MANAGEABLE",
      "managementStrategy": "UNIFIED_API_ABSTRACTION",
      "mitigationApproach": "HIERARCHICAL_ABSTRACTION_LAYERS",
      "developmentImpact": "INITIAL_COMPLEXITY_LONG_TERM_SIMPLICITY"
    },
    "scalabilityImpact": {
      "horizontalScaling": "EXCELLENT",
      "verticalScaling": "OPTIMIZED",
      "dataVolumeScaling": "HIERARCHICAL_SCALING_STRATEGY",
      "futureProofing": "HIGHLY_SCALABLE_ARCHITECTURE"
    },
    "optimizationPotential": {
      "cacheOptimization": "SIGNIFICANT_POTENTIAL",
      "accessOptimization": "AUTOMATED_OPTIMIZATION",
      "integrationOptimization": "UNIFIED_SYSTEM_EFFICIENCY",
      "overallPotential": "EXCEPTIONAL_OPTIMIZATION_OPPORTUNITY"
    },
    "performanceBottlenecks": {
      "identifiedBottlenecks": [
        "INITIAL_CACHE_WARMING",
        "CROSS_LAYER_COORDINATION"
      ],
      "mitigationStrategies": [
        "PREDICTIVE_CACHING",
        "ASYNC_COORDINATION"
      ],
      "severityLevel": "LOW_TO_MODERATE",
      "resolutionComplexity": "MANAGEABLE_WITH_EXISTING_TOOLS"
    }
  },
  "holisticSystemDesign": {
    "trueSystemScale": {
      "estimatedTotalMethods": 800,
      "estimatedTotalInterfaces": 150,
      "systemComplexity": "ENTERPRISE_SCALE",
      "trueScale": "CHARACTER(275) + LEARNING(212) + MEMORY(300+) = 787+ METHODS"
    },
    "unifiedArchitecture": {
      "architectureType": "UNIFIED_HIERARCHICAL_MEMORY_SYSTEM",
      "integrationPattern": "SEAMLESS_CROSS_SYSTEM_INTEGRATION",
      "dataFlowPattern": "INTELLIGENT_HIERARCHICAL_FLOW",
      "optimizationStrategy": "SYSTEM_WIDE_UNIFIED_OPTIMIZATION"
    },
    "emergentCapabilities": {
      "emergentIntelligence": "MEMORY_ENHANCED_AI_CAPABILITIES",
      "adaptiveOptimization": "SELF_OPTIMIZING_MEMORY_SYSTEM",
      "crossSystemSynergy": "MULTIPLICATIVE_SYSTEM_ENHANCEMENT",
      "futureEvolution": "CONTINUOUSLY_EVOLVING_INTELLIGENCE"
    },
    "systemSynergy": {
      "characterMemorySynergy": "DEEP_MEMORY_ENHANCED_CHARACTER_SYSTEM",
      "learningMemorySynergy": "PERSISTENT_ADAPTIVE_LEARNING",
      "holisticSynergy": "UNIFIED_INTELLIGENT_NARRATIVE_SYSTEM",
      "synergyMultiplier": "EXPONENTIAL_CAPABILITY_ENHANCEMENT"
    },
    "evolutionPotential": {
      "selfEvolution": "MEMORY_DRIVEN_SYSTEM_EVOLUTION",
      "adaptiveCapability": "CONTINUOUS_LEARNING_ADAPTATION",
      "scalingPotential": "UNLIMITED_HIERARCHICAL_SCALING",
      "futureVision": "SELF_IMPROVING_NARRATIVE_AI_ECOSYSTEM"
    }
  }
}
{
  "summary": {
    "totalAICalls": 634,
    "uniqueFiles": 234,
    "categories": {
      "promptGeneration": [
        {
          "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
          "line": 23,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "import type { PromptGenerator } from '@/lib/generation/prompt-generator';",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 21,
              "content": "import type { MemoryManager } from '@/lib/memory/core/memory-manager';",
              "isCurrent": false
            },
            {
              "line": 22,
              "content": "import type { NovelGenerationEngine } from '@/lib/generation/engine';",
              "isCurrent": false
            },
            {
              "line": 23,
              "content": "import type { PromptGenerator } from '@/lib/generation/prompt-generator';",
              "isCurrent": true
            },
            {
              "line": 24,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 25,
              "content": "// 拡張型定義（ChapterGeneratorと同じ）",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
          "line": 79,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "* ServiceContainer経由でのPromptGenerator直接取得",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 77,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 78,
              "content": "/**",
              "isCurrent": false
            },
            {
              "line": 79,
              "content": "* ServiceContainer経由でのPromptGenerator直接取得",
              "isCurrent": true
            },
            {
              "line": 80,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 81,
              "content": "async function getPromptGenerator(): Promise<PromptGenerator> {",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
          "line": 81,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "async function getPromptGenerator(): Promise<PromptGenerator> {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 79,
              "content": "* ServiceContainer経由でのPromptGenerator直接取得",
              "isCurrent": false
            },
            {
              "line": 80,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 81,
              "content": "async function getPromptGenerator(): Promise<PromptGenerator> {",
              "isCurrent": true
            },
            {
              "line": 82,
              "content": "await ensureSystemInitialized();",
              "isCurrent": false
            },
            {
              "line": 83,
              "content": "const serviceContainer = applicationLifecycleManager.getServiceContainer();",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
          "line": 81,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "async function getPromptGenerator(): Promise<PromptGenerator> {",
          "method": "getPromptGenerator",
          "class": "unknown",
          "surrounding": [
            {
              "line": 79,
              "content": "* ServiceContainer経由でのPromptGenerator直接取得",
              "isCurrent": false
            },
            {
              "line": 80,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 81,
              "content": "async function getPromptGenerator(): Promise<PromptGenerator> {",
              "isCurrent": true
            },
            {
              "line": 82,
              "content": "await ensureSystemInitialized();",
              "isCurrent": false
            },
            {
              "line": 83,
              "content": "const serviceContainer = applicationLifecycleManager.getServiceContainer();",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
          "line": 85,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "// PromptGeneratorは通常ChapterGeneratorの内部で使用されるため、",
          "method": "getPromptGenerator",
          "class": "unknown",
          "surrounding": [
            {
              "line": 83,
              "content": "const serviceContainer = applicationLifecycleManager.getServiceContainer();",
              "isCurrent": false
            },
            {
              "line": 84,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 85,
              "content": "// PromptGeneratorは通常ChapterGeneratorの内部で使用されるため、",
              "isCurrent": true
            },
            {
              "line": 86,
              "content": "// 同じ依存関係で新規作成する",
              "isCurrent": false
            },
            {
              "line": 87,
              "content": "const memoryManager = await serviceContainer.resolve<MemoryManager>('memoryManager');",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
          "line": 89,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "// PromptGeneratorの動的作成",
          "method": "getServiceContainer",
          "class": "unknown",
          "surrounding": [
            {
              "line": 87,
              "content": "const memoryManager = await serviceContainer.resolve<MemoryManager>('memoryManager');",
              "isCurrent": false
            },
            {
              "line": 88,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 89,
              "content": "// PromptGeneratorの動的作成",
              "isCurrent": true
            },
            {
              "line": 90,
              "content": "const { PromptGenerator } = await import('@/lib/generation/prompt-generator');",
              "isCurrent": false
            },
            {
              "line": 91,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
          "line": 90,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "const { PromptGenerator } = await import('@/lib/generation/prompt-generator');",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 88,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 89,
              "content": "// PromptGeneratorの動的作成",
              "isCurrent": false
            },
            {
              "line": 90,
              "content": "const { PromptGenerator } = await import('@/lib/generation/prompt-generator');",
              "isCurrent": true
            },
            {
              "line": 91,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 92,
              "content": "try {",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
          "line": 119,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "return new PromptGenerator(",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 117,
              "content": "}",
              "isCurrent": false
            },
            {
              "line": 118,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 119,
              "content": "return new PromptGenerator(",
              "isCurrent": true
            },
            {
              "line": 120,
              "content": "memoryManager,",
              "isCurrent": false
            },
            {
              "line": 121,
              "content": "worldSettingsManager,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
          "line": 126,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "logger.warn('Some dependencies not available, creating PromptGenerator with minimal dependencies', { error });",
          "method": "catch",
          "class": "unknown",
          "surrounding": [
            {
              "line": 124,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 125,
              "content": "} catch (error) {",
              "isCurrent": false
            },
            {
              "line": 126,
              "content": "logger.warn('Some dependencies not available, creating PromptGenerator with minimal dependencies', { error });",
              "isCurrent": true
            },
            {
              "line": 127,
              "content": "return new PromptGenerator(memoryManager);",
              "isCurrent": false
            },
            {
              "line": 128,
              "content": "}",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
          "line": 127,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "return new PromptGenerator(memoryManager);",
          "method": "warn",
          "class": "unknown",
          "surrounding": [
            {
              "line": 125,
              "content": "} catch (error) {",
              "isCurrent": false
            },
            {
              "line": 126,
              "content": "logger.warn('Some dependencies not available, creating PromptGenerator with minimal dependencies', { error });",
              "isCurrent": false
            },
            {
              "line": 127,
              "content": "return new PromptGenerator(memoryManager);",
              "isCurrent": true
            },
            {
              "line": 128,
              "content": "}",
              "isCurrent": false
            },
            {
              "line": 129,
              "content": "}",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
          "line": 258,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "const promptGenerator = await getPromptGenerator();",
          "method": "ensureSystemInitialized",
          "class": "unknown",
          "surrounding": [
            {
              "line": 256,
              "content": "const memoryManager = await getMemoryManager();",
              "isCurrent": false
            },
            {
              "line": 257,
              "content": "const generationEngine = await getGenerationEngine();",
              "isCurrent": false
            },
            {
              "line": 258,
              "content": "const promptGenerator = await getPromptGenerator();",
              "isCurrent": true
            },
            {
              "line": 259,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 260,
              "content": "logger.info('[Test Prompt API] All services resolved successfully');",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
          "line": 188,
          "category": "promptGeneration",
          "pattern": "promptTemplate",
          "context": "let promptTemplate = '';",
          "method": "truncateContent",
          "class": "unknown",
          "surrounding": [
            {
              "line": 186,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 187,
              "content": "// 分析タイプに基づくプロンプトテンプレートの選択",
              "isCurrent": false
            },
            {
              "line": 188,
              "content": "let promptTemplate = '';",
              "isCurrent": true
            },
            {
              "line": 189,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 190,
              "content": "switch (analysisType.toLowerCase()) {",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
          "line": 192,
          "category": "promptGeneration",
          "pattern": "promptTemplate",
          "context": "promptTemplate = this.getCharacterAnalysisTemplate();",
          "method": "truncateContent",
          "class": "unknown",
          "surrounding": [
            {
              "line": 190,
              "content": "switch (analysisType.toLowerCase()) {",
              "isCurrent": false
            },
            {
              "line": 191,
              "content": "case 'character':",
              "isCurrent": false
            },
            {
              "line": 192,
              "content": "promptTemplate = this.getCharacterAnalysisTemplate();",
              "isCurrent": true
            },
            {
              "line": 193,
              "content": "break;",
              "isCurrent": false
            },
            {
              "line": 194,
              "content": "case 'theme':",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
          "line": 195,
          "category": "promptGeneration",
          "pattern": "promptTemplate",
          "context": "promptTemplate = this.getThemeAnalysisTemplate();",
          "method": "switch",
          "class": "unknown",
          "surrounding": [
            {
              "line": 193,
              "content": "break;",
              "isCurrent": false
            },
            {
              "line": 194,
              "content": "case 'theme':",
              "isCurrent": false
            },
            {
              "line": 195,
              "content": "promptTemplate = this.getThemeAnalysisTemplate();",
              "isCurrent": true
            },
            {
              "line": 196,
              "content": "break;",
              "isCurrent": false
            },
            {
              "line": 197,
              "content": "case 'structure':",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
          "line": 198,
          "category": "promptGeneration",
          "pattern": "promptTemplate",
          "context": "promptTemplate = this.getStructureAnalysisTemplate();",
          "method": "getCharacterAnalysisTemplate",
          "class": "unknown",
          "surrounding": [
            {
              "line": 196,
              "content": "break;",
              "isCurrent": false
            },
            {
              "line": 197,
              "content": "case 'structure':",
              "isCurrent": false
            },
            {
              "line": 198,
              "content": "promptTemplate = this.getStructureAnalysisTemplate();",
              "isCurrent": true
            },
            {
              "line": 199,
              "content": "break;",
              "isCurrent": false
            },
            {
              "line": 200,
              "content": "case 'quality':",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
          "line": 201,
          "category": "promptGeneration",
          "pattern": "promptTemplate",
          "context": "promptTemplate = this.getQualityAnalysisTemplate();",
          "method": "getThemeAnalysisTemplate",
          "class": "unknown",
          "surrounding": [
            {
              "line": 199,
              "content": "break;",
              "isCurrent": false
            },
            {
              "line": 200,
              "content": "case 'quality':",
              "isCurrent": false
            },
            {
              "line": 201,
              "content": "promptTemplate = this.getQualityAnalysisTemplate();",
              "isCurrent": true
            },
            {
              "line": 202,
              "content": "break;",
              "isCurrent": false
            },
            {
              "line": 203,
              "content": "case 'foreshadowing':",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
          "line": 204,
          "category": "promptGeneration",
          "pattern": "promptTemplate",
          "context": "promptTemplate = this.getForeshadowingAnalysisTemplate();",
          "method": "getStructureAnalysisTemplate",
          "class": "unknown",
          "surrounding": [
            {
              "line": 202,
              "content": "break;",
              "isCurrent": false
            },
            {
              "line": 203,
              "content": "case 'foreshadowing':",
              "isCurrent": false
            },
            {
              "line": 204,
              "content": "promptTemplate = this.getForeshadowingAnalysisTemplate();",
              "isCurrent": true
            },
            {
              "line": 205,
              "content": "break;",
              "isCurrent": false
            },
            {
              "line": 206,
              "content": "default:",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
          "line": 207,
          "category": "promptGeneration",
          "pattern": "promptTemplate",
          "context": "promptTemplate = this.getGeneralAnalysisTemplate();",
          "method": "getQualityAnalysisTemplate",
          "class": "unknown",
          "surrounding": [
            {
              "line": 205,
              "content": "break;",
              "isCurrent": false
            },
            {
              "line": 206,
              "content": "default:",
              "isCurrent": false
            },
            {
              "line": 207,
              "content": "promptTemplate = this.getGeneralAnalysisTemplate();",
              "isCurrent": true
            },
            {
              "line": 208,
              "content": "}",
              "isCurrent": false
            },
            {
              "line": 209,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
          "line": 211,
          "category": "promptGeneration",
          "pattern": "promptTemplate",
          "context": "let prompt = promptTemplate",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 209,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 210,
              "content": "// テンプレート変数の置換",
              "isCurrent": false
            },
            {
              "line": 211,
              "content": "let prompt = promptTemplate",
              "isCurrent": true
            },
            {
              "line": 212,
              "content": ".replace('{{content}}', truncatedContent)",
              "isCurrent": false
            },
            {
              "line": 213,
              "content": ".replace('{{analysisType}}', analysisType);",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine\\chapter-generator copy.ts",
          "line": 4,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "import { PromptGenerator } from '../prompt-generator';",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 2,
              "content": "import { GeminiClient } from '../gemini-client';",
              "isCurrent": false
            },
            {
              "line": 3,
              "content": "import { ContextGenerator } from '../context-generator';",
              "isCurrent": false
            },
            {
              "line": 4,
              "content": "import { PromptGenerator } from '../prompt-generator';",
              "isCurrent": true
            },
            {
              "line": 5,
              "content": "import { TextParser } from './text-parser';",
              "isCurrent": false
            },
            {
              "line": 6,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine\\chapter-generator copy.ts",
          "line": 118,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "private promptGenerator: PromptGenerator;",
          "method": "unknown",
          "class": "ChapterGenerator",
          "surrounding": [
            {
              "line": 116,
              "content": "private geminiClient: GeminiClient;",
              "isCurrent": false
            },
            {
              "line": 117,
              "content": "private contextGenerator: ContextGenerator;",
              "isCurrent": false
            },
            {
              "line": 118,
              "content": "private promptGenerator: PromptGenerator;",
              "isCurrent": true
            },
            {
              "line": 119,
              "content": "private textParser: TextParser;",
              "isCurrent": false
            },
            {
              "line": 120,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine\\chapter-generator copy.ts",
          "line": 139,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "promptGenerator: PromptGenerator,",
          "method": "unknown",
          "class": "ChapterGenerator",
          "surrounding": [
            {
              "line": 137,
              "content": "constructor(",
              "isCurrent": false
            },
            {
              "line": 138,
              "content": "geminiClient: GeminiClient,",
              "isCurrent": false
            },
            {
              "line": 139,
              "content": "promptGenerator: PromptGenerator,",
              "isCurrent": true
            },
            {
              "line": 140,
              "content": "memoryManager: MemoryManager,",
              "isCurrent": false
            },
            {
              "line": 141,
              "content": "contentAnalysisManager?: ContentAnalysisManager",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine\\chapter-generator.ts",
          "line": 4,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "import { PromptGenerator } from '../prompt-generator';",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 2,
              "content": "import { GeminiClient } from '../gemini-client';",
              "isCurrent": false
            },
            {
              "line": 3,
              "content": "import { ContextGenerator } from '../context-generator';",
              "isCurrent": false
            },
            {
              "line": 4,
              "content": "import { PromptGenerator } from '../prompt-generator';",
              "isCurrent": true
            },
            {
              "line": 5,
              "content": "import { TextParser } from './text-parser';",
              "isCurrent": false
            },
            {
              "line": 6,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine\\chapter-generator.ts",
          "line": 108,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "private promptGenerator: PromptGenerator;",
          "method": "unknown",
          "class": "ChapterGenerator",
          "surrounding": [
            {
              "line": 106,
              "content": "private geminiClient: GeminiClient;",
              "isCurrent": false
            },
            {
              "line": 107,
              "content": "private contextGenerator: ContextGenerator;",
              "isCurrent": false
            },
            {
              "line": 108,
              "content": "private promptGenerator: PromptGenerator;",
              "isCurrent": true
            },
            {
              "line": 109,
              "content": "private textParser: TextParser;",
              "isCurrent": false
            },
            {
              "line": 110,
              "content": "private memoryManager: MemoryManager;",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine\\chapter-generator.ts",
          "line": 119,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "promptGenerator: PromptGenerator,",
          "method": "unknown",
          "class": "ChapterGenerator",
          "surrounding": [
            {
              "line": 117,
              "content": "constructor(",
              "isCurrent": false
            },
            {
              "line": 118,
              "content": "geminiClient: GeminiClient,",
              "isCurrent": false
            },
            {
              "line": 119,
              "content": "promptGenerator: PromptGenerator,",
              "isCurrent": true
            },
            {
              "line": 120,
              "content": "memoryManager: MemoryManager,",
              "isCurrent": false
            },
            {
              "line": 121,
              "content": "contentAnalysisManager?: ContentAnalysisManager",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 2.ts",
          "line": 10,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "import { PromptGenerator } from './prompt-generator'",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 8,
              "content": "import { GenerationError } from '@/lib/utils/error-handler';",
              "isCurrent": false
            },
            {
              "line": 9,
              "content": "import { ChapterGenerator } from './engine/chapter-generator';",
              "isCurrent": false
            },
            {
              "line": 10,
              "content": "import { PromptGenerator } from './prompt-generator'",
              "isCurrent": true
            },
            {
              "line": 11,
              "content": "import { MemoryManager, MemoryManagerConfig } from '@/lib/memory/core/memory-manager'; // 追加",
              "isCurrent": false
            },
            {
              "line": 12,
              "content": "import { setGlobalMemoryManager, initializePlotManager, getPlotManagerStatus } from '@/lib/plot';",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 2.ts",
          "line": 26,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "private promptGenerator: PromptGenerator;",
          "method": "unknown",
          "class": "NovelGenerationEngine",
          "surrounding": [
            {
              "line": 24,
              "content": "private chapterGenerator: ChapterGenerator;",
              "isCurrent": false
            },
            {
              "line": 25,
              "content": "private geminiClient: GeminiClient;",
              "isCurrent": false
            },
            {
              "line": 26,
              "content": "private promptGenerator: PromptGenerator;",
              "isCurrent": true
            },
            {
              "line": 27,
              "content": "private memoryManager: MemoryManager; // 追加",
              "isCurrent": false
            },
            {
              "line": 28,
              "content": "// 初期化状態を追跡するためのフラグ",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 2.ts",
          "line": 40,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "this.promptGenerator = new PromptGenerator();",
          "method": "constructor",
          "class": "NovelGenerationEngine",
          "surrounding": [
            {
              "line": 38,
              "content": "constructor() {",
              "isCurrent": false
            },
            {
              "line": 39,
              "content": "this.geminiClient = new GeminiClient();",
              "isCurrent": false
            },
            {
              "line": 40,
              "content": "this.promptGenerator = new PromptGenerator();",
              "isCurrent": true
            },
            {
              "line": 41,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 42,
              "content": "// MemoryManagerの完全なデフォルト設定",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 3.ts",
          "line": 10,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "import { PromptGenerator } from './prompt-generator'",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 8,
              "content": "import { GenerationError } from '@/lib/utils/error-handler';",
              "isCurrent": false
            },
            {
              "line": 9,
              "content": "import { ChapterGenerator } from './engine/chapter-generator';",
              "isCurrent": false
            },
            {
              "line": 10,
              "content": "import { PromptGenerator } from './prompt-generator'",
              "isCurrent": true
            },
            {
              "line": 11,
              "content": "import { MemoryManager, MemoryManagerConfig } from '@/lib/memory/core/memory-manager'; // 追加",
              "isCurrent": false
            },
            {
              "line": 12,
              "content": "import { setGlobalMemoryManager, initializePlotManager, getPlotManagerStatus } from '@/lib/plot';",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 3.ts",
          "line": 26,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "private promptGenerator: PromptGenerator;",
          "method": "unknown",
          "class": "NovelGenerationEngine",
          "surrounding": [
            {
              "line": 24,
              "content": "private chapterGenerator: ChapterGenerator;",
              "isCurrent": false
            },
            {
              "line": 25,
              "content": "private geminiClient: GeminiClient;",
              "isCurrent": false
            },
            {
              "line": 26,
              "content": "private promptGenerator: PromptGenerator;",
              "isCurrent": true
            },
            {
              "line": 27,
              "content": "private memoryManager: MemoryManager; // 追加",
              "isCurrent": false
            },
            {
              "line": 28,
              "content": "// 初期化状態を追跡するためのフラグ",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 3.ts",
          "line": 40,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "this.promptGenerator = new PromptGenerator();",
          "method": "constructor",
          "class": "NovelGenerationEngine",
          "surrounding": [
            {
              "line": 38,
              "content": "constructor() {",
              "isCurrent": false
            },
            {
              "line": 39,
              "content": "this.geminiClient = new GeminiClient();",
              "isCurrent": false
            },
            {
              "line": 40,
              "content": "this.promptGenerator = new PromptGenerator();",
              "isCurrent": true
            },
            {
              "line": 41,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 42,
              "content": "// MemoryManagerの完全なデフォルト設定",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 4.ts",
          "line": 10,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "import { PromptGenerator } from './prompt-generator';",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 8,
              "content": "import { GenerationError } from '@/lib/utils/error-handler';",
              "isCurrent": false
            },
            {
              "line": 9,
              "content": "import { ChapterGenerator } from './engine/chapter-generator';",
              "isCurrent": false
            },
            {
              "line": 10,
              "content": "import { PromptGenerator } from './prompt-generator';",
              "isCurrent": true
            },
            {
              "line": 11,
              "content": "import { MemoryManager } from '@/lib/memory/core/memory-manager';",
              "isCurrent": false
            },
            {
              "line": 12,
              "content": "import { setGlobalMemoryManager, initializePlotManager, getPlotManagerStatus } from '@/lib/plot';",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 4.ts",
          "line": 21,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "private promptGenerator: PromptGenerator;",
          "method": "unknown",
          "class": "NovelGenerationEngine",
          "surrounding": [
            {
              "line": 19,
              "content": "private chapterGenerator: ChapterGenerator;",
              "isCurrent": false
            },
            {
              "line": 20,
              "content": "private geminiClient: GeminiClient;",
              "isCurrent": false
            },
            {
              "line": 21,
              "content": "private promptGenerator: PromptGenerator;",
              "isCurrent": true
            },
            {
              "line": 22,
              "content": "private memoryManager: MemoryManager;",
              "isCurrent": false
            },
            {
              "line": 23,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 4.ts",
          "line": 30,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "promptGenerator: PromptGenerator,",
          "method": "unknown",
          "class": "NovelGenerationEngine",
          "surrounding": [
            {
              "line": 28,
              "content": "memoryManager: MemoryManager,",
              "isCurrent": false
            },
            {
              "line": 29,
              "content": "chapterGenerator: ChapterGenerator,",
              "isCurrent": false
            },
            {
              "line": 30,
              "content": "promptGenerator: PromptGenerator,",
              "isCurrent": true
            },
            {
              "line": 31,
              "content": "geminiClient: GeminiClient",
              "isCurrent": false
            },
            {
              "line": 32,
              "content": ") {",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy.ts",
          "line": 10,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "import { PromptGenerator } from './prompt-generator'",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 8,
              "content": "import { GenerationError } from '@/lib/utils/error-handler';",
              "isCurrent": false
            },
            {
              "line": 9,
              "content": "import { ChapterGenerator } from './engine/chapter-generator';",
              "isCurrent": false
            },
            {
              "line": 10,
              "content": "import { PromptGenerator } from './prompt-generator'",
              "isCurrent": true
            },
            {
              "line": 11,
              "content": "import { MemoryManager, MemoryManagerConfig } from '@/lib/memory/core/memory-manager'; // 追加",
              "isCurrent": false
            },
            {
              "line": 12,
              "content": "import { setGlobalMemoryManager, initializePlotManager, getPlotManagerStatus } from '@/lib/plot';",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy.ts",
          "line": 26,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "private promptGenerator: PromptGenerator;",
          "method": "unknown",
          "class": "NovelGenerationEngine",
          "surrounding": [
            {
              "line": 24,
              "content": "private chapterGenerator: ChapterGenerator;",
              "isCurrent": false
            },
            {
              "line": 25,
              "content": "private geminiClient: GeminiClient;",
              "isCurrent": false
            },
            {
              "line": 26,
              "content": "private promptGenerator: PromptGenerator;",
              "isCurrent": true
            },
            {
              "line": 27,
              "content": "private memoryManager: MemoryManager; // 追加",
              "isCurrent": false
            },
            {
              "line": 28,
              "content": "// 初期化状態を追跡するためのフラグ",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy.ts",
          "line": 40,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "this.promptGenerator = new PromptGenerator();",
          "method": "constructor",
          "class": "NovelGenerationEngine",
          "surrounding": [
            {
              "line": 38,
              "content": "constructor() {",
              "isCurrent": false
            },
            {
              "line": 39,
              "content": "this.geminiClient = new GeminiClient();",
              "isCurrent": false
            },
            {
              "line": 40,
              "content": "this.promptGenerator = new PromptGenerator();",
              "isCurrent": true
            },
            {
              "line": 41,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 42,
              "content": "// MemoryManagerの完全なデフォルト設定",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine.ts",
          "line": 10,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "import { PromptGenerator } from './prompt-generator';",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 8,
              "content": "import { GenerationError } from '@/lib/utils/error-handler';",
              "isCurrent": false
            },
            {
              "line": 9,
              "content": "import { ChapterGenerator } from './engine/chapter-generator';",
              "isCurrent": false
            },
            {
              "line": 10,
              "content": "import { PromptGenerator } from './prompt-generator';",
              "isCurrent": true
            },
            {
              "line": 11,
              "content": "import { MemoryManager } from '@/lib/memory/core/memory-manager';",
              "isCurrent": false
            },
            {
              "line": 12,
              "content": "import { setGlobalMemoryManager, initializePlotManager, getPlotManagerStatus } from '@/lib/plot';",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine.ts",
          "line": 22,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "private promptGenerator: PromptGenerator;",
          "method": "unknown",
          "class": "NovelGenerationEngine",
          "surrounding": [
            {
              "line": 20,
              "content": "private chapterGenerator: ChapterGenerator;",
              "isCurrent": false
            },
            {
              "line": 21,
              "content": "private geminiClient: GeminiClient;",
              "isCurrent": false
            },
            {
              "line": 22,
              "content": "private promptGenerator: PromptGenerator;",
              "isCurrent": true
            },
            {
              "line": 23,
              "content": "private memoryManager: MemoryManager;",
              "isCurrent": false
            },
            {
              "line": 24,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine.ts",
          "line": 31,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "promptGenerator: PromptGenerator,",
          "method": "unknown",
          "class": "NovelGenerationEngine",
          "surrounding": [
            {
              "line": 29,
              "content": "memoryManager: MemoryManager,",
              "isCurrent": false
            },
            {
              "line": 30,
              "content": "chapterGenerator: ChapterGenerator,",
              "isCurrent": false
            },
            {
              "line": 31,
              "content": "promptGenerator: PromptGenerator,",
              "isCurrent": true
            },
            {
              "line": 32,
              "content": "geminiClient: GeminiClient",
              "isCurrent": false
            },
            {
              "line": 33,
              "content": ") {",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\index.ts",
          "line": 4,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "// export { PromptGenerator } from './prompt-generator';",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 2,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 3,
              "content": "// // 既存のエクスポート",
              "isCurrent": false
            },
            {
              "line": 4,
              "content": "// export { PromptGenerator } from './prompt-generator';",
              "isCurrent": true
            },
            {
              "line": 5,
              "content": "// export { ContextGenerator } from './context-generator';",
              "isCurrent": false
            },
            {
              "line": 6,
              "content": "// export { generationEngine } from './engine';",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\prompt\\template-manager.ts",
          "line": 23,
          "category": "promptGeneration",
          "pattern": "promptTemplate",
          "context": "constructor(private templatePath: string = path.join(process.cwd(), 'src/lib/generation/prompt/template/promptTemplates.json')) { }",
          "method": "constructor",
          "class": "TemplateManager",
          "surrounding": [
            {
              "line": 21,
              "content": "* @param templatePath テンプレートファイルのパス（省略時はデフォルトパス）",
              "isCurrent": false
            },
            {
              "line": 22,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 23,
              "content": "constructor(private templatePath: string = path.join(process.cwd(), 'src/lib/generation/prompt/template/promptTemplates.json')) { }",
              "isCurrent": true
            },
            {
              "line": 24,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 25,
              "content": "/**",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\prompt-generator copy 2.ts",
          "line": 207,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "export class PromptGenerator {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 205,
              "content": "* 統合記憶階層システム対応プロンプト生成クラス（最適化完成版）",
              "isCurrent": false
            },
            {
              "line": 206,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 207,
              "content": "export class PromptGenerator {",
              "isCurrent": true
            },
            {
              "line": 208,
              "content": "private templateManager: TemplateManager;",
              "isCurrent": false
            },
            {
              "line": 209,
              "content": "private formatter: PromptFormatter;",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\prompt-generator copy 2.ts",
          "line": 253,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "logger.info('PromptGenerator ready for immediate use with optimized dependencies', {",
          "method": "SectionBuilder",
          "class": "unknown",
          "surrounding": [
            {
              "line": 251,
              "content": "this.loadTemplatesSync();",
              "isCurrent": false
            },
            {
              "line": 252,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 253,
              "content": "logger.info('PromptGenerator ready for immediate use with optimized dependencies', {",
              "isCurrent": true
            },
            {
              "line": 254,
              "content": "hasWorldSettingsManager: !!this.worldSettingsManager,",
              "isCurrent": false
            },
            {
              "line": 255,
              "content": "hasPlotManager: !!this.plotManager,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\prompt-generator copy.ts",
          "line": 214,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "export class PromptGenerator {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 212,
              "content": "* 統合記憶階層システム対応プロンプト生成クラス",
              "isCurrent": false
            },
            {
              "line": 213,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 214,
              "content": "export class PromptGenerator {",
              "isCurrent": true
            },
            {
              "line": 215,
              "content": "private templateManager: TemplateManager;",
              "isCurrent": false
            },
            {
              "line": 216,
              "content": "private formatter: PromptFormatter;",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\prompt-generator copy.ts",
          "line": 263,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "logger.info('PromptGenerator created with unified memory system', {",
          "method": "SectionBuilder",
          "class": "unknown",
          "surrounding": [
            {
              "line": 261,
              "content": "this.initializationPromise = this.initialize();",
              "isCurrent": false
            },
            {
              "line": 262,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 263,
              "content": "logger.info('PromptGenerator created with unified memory system', {",
              "isCurrent": true
            },
            {
              "line": 264,
              "content": "hasMemoryManager: !!this.memoryManager,",
              "isCurrent": false
            },
            {
              "line": 265,
              "content": "hasLearningJourneySystem: !!this.learningJourneySystem",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\prompt-generator copy.ts",
          "line": 278,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "logger.info('PromptGenerator initialization starting with unified memory system');",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 276,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 277,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 278,
              "content": "logger.info('PromptGenerator initialization starting with unified memory system');",
              "isCurrent": true
            },
            {
              "line": 279,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 280,
              "content": "// テンプレートの読み込み",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\prompt-generator copy.ts",
          "line": 299,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "logger.info('PromptGenerator initialized successfully with unified memory system');",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 297,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 298,
              "content": "this.isInitialized = true;",
              "isCurrent": false
            },
            {
              "line": 299,
              "content": "logger.info('PromptGenerator initialized successfully with unified memory system');",
              "isCurrent": true
            },
            {
              "line": 300,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 301,
              "content": "} catch (err) {",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\prompt-generator copy.ts",
          "line": 302,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "logger.error('Failed to initialize PromptGenerator', { error: err });",
          "method": "catch",
          "class": "unknown",
          "surrounding": [
            {
              "line": 300,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 301,
              "content": "} catch (err) {",
              "isCurrent": false
            },
            {
              "line": 302,
              "content": "logger.error('Failed to initialize PromptGenerator', { error: err });",
              "isCurrent": true
            },
            {
              "line": 303,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 304,
              "content": "// フォールバックテンプレートを設定",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\prompt-generator copy.ts",
          "line": 308,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "logger.info('PromptGenerator initialized with fallback templates');",
          "method": "rror",
          "class": "unknown",
          "surrounding": [
            {
              "line": 306,
              "content": "await this.setFallbackTemplates();",
              "isCurrent": false
            },
            {
              "line": 307,
              "content": "this.isInitialized = true;",
              "isCurrent": false
            },
            {
              "line": 308,
              "content": "logger.info('PromptGenerator initialized with fallback templates');",
              "isCurrent": true
            },
            {
              "line": 309,
              "content": "} catch (fallbackErr) {",
              "isCurrent": false
            },
            {
              "line": 310,
              "content": "logger.error('Failed to set fallback templates', { error: fallbackErr });",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\prompt-generator.ts",
          "line": 209,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "export class PromptGenerator {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 207,
              "content": "* 統合記憶階層システム対応プロンプト生成クラス（最適化完成版）",
              "isCurrent": false
            },
            {
              "line": 208,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 209,
              "content": "export class PromptGenerator {",
              "isCurrent": true
            },
            {
              "line": 210,
              "content": "private templateManager: TemplateManager;",
              "isCurrent": false
            },
            {
              "line": 211,
              "content": "private formatter: PromptFormatter;",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\prompt-generator.ts",
          "line": 255,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "logger.info('PromptGenerator ready for immediate use with optimized dependencies', {",
          "method": "SectionBuilder",
          "class": "unknown",
          "surrounding": [
            {
              "line": 253,
              "content": "this.loadTemplatesSync();",
              "isCurrent": false
            },
            {
              "line": 254,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 255,
              "content": "logger.info('PromptGenerator ready for immediate use with optimized dependencies', {",
              "isCurrent": true
            },
            {
              "line": 256,
              "content": "hasWorldSettingsManager: !!this.worldSettingsManager,",
              "isCurrent": false
            },
            {
              "line": 257,
              "content": "hasPlotManager: !!this.plotManager,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\prompt-generator.ts",
          "line": 1189,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "* PromptGeneratorの既存メソッドを置き換え",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 1187,
              "content": "/**",
              "isCurrent": false
            },
            {
              "line": 1188,
              "content": "* 🔧 ENHANCED: 統合検索結果からキャラクター情報を抽出（強化版）",
              "isCurrent": false
            },
            {
              "line": 1189,
              "content": "* PromptGeneratorの既存メソッドを置き換え",
              "isCurrent": true
            },
            {
              "line": 1190,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 1191,
              "content": "private async extractCharactersFromSearchResults(",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\learning-journey\\index.ts",
          "line": 42,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "PromptGenerator,",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 40,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 41,
              "content": "export {",
              "isCurrent": false
            },
            {
              "line": 42,
              "content": "PromptGenerator,",
              "isCurrent": true
            },
            {
              "line": 43,
              "content": "PromptType,",
              "isCurrent": false
            },
            {
              "line": 44,
              "content": "type ChapterGenerationOptions,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\learning-journey\\index.ts",
          "line": 61,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "import { PromptGenerator } from './prompt-generator';",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 59,
              "content": "import { EmotionalLearningIntegrator } from './emotional-learning-integrator';",
              "isCurrent": false
            },
            {
              "line": 60,
              "content": "import { ContextManager } from './context-manager';",
              "isCurrent": false
            },
            {
              "line": 61,
              "content": "import { PromptGenerator } from './prompt-generator';",
              "isCurrent": true
            },
            {
              "line": 62,
              "content": "import { EventBus, eventBus } from './event-bus';",
              "isCurrent": false
            },
            {
              "line": 63,
              "content": "import { MemoryManager } from '@/lib/memory/core/memory-manager';",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\learning-journey\\index.ts",
          "line": 175,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "private promptGenerator!: PromptGenerator;",
          "method": "unknown",
          "class": "LearningJourneySystem",
          "surrounding": [
            {
              "line": 173,
              "content": "private emotionalIntegrator!: EmotionalLearningIntegrator;",
              "isCurrent": false
            },
            {
              "line": 174,
              "content": "private contextManager!: ContextManager;",
              "isCurrent": false
            },
            {
              "line": 175,
              "content": "private promptGenerator!: PromptGenerator;",
              "isCurrent": true
            },
            {
              "line": 176,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 177,
              "content": "// 状態管理",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\learning-journey\\index.ts",
          "line": 428,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "// PromptGenerator",
          "method": "ContextManager",
          "class": "unknown",
          "surrounding": [
            {
              "line": 426,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 427,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 428,
              "content": "// PromptGenerator",
              "isCurrent": true
            },
            {
              "line": 429,
              "content": "this.promptGenerator = new PromptGenerator(eventBus);",
              "isCurrent": false
            },
            {
              "line": 430,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\learning-journey\\index.ts",
          "line": 429,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "this.promptGenerator = new PromptGenerator(eventBus);",
          "method": "ntextManager",
          "class": "unknown",
          "surrounding": [
            {
              "line": 427,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 428,
              "content": "// PromptGenerator",
              "isCurrent": false
            },
            {
              "line": 429,
              "content": "this.promptGenerator = new PromptGenerator(eventBus);",
              "isCurrent": true
            },
            {
              "line": 430,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 431,
              "content": "logger.debug('All components created successfully');",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\learning-journey\\index.ts",
          "line": 1611,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "get prompt(): PromptGenerator {",
          "method": "prompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 1609,
              "content": "}",
              "isCurrent": false
            },
            {
              "line": 1610,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 1611,
              "content": "get prompt(): PromptGenerator {",
              "isCurrent": true
            },
            {
              "line": 1612,
              "content": "this.ensureInitialized();",
              "isCurrent": false
            },
            {
              "line": 1613,
              "content": "if (!this.componentStatus.promptGenerator.functional) {",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\learning-journey\\index.ts",
          "line": 1614,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "throw new Error('PromptGenerator is not functional');",
          "method": "prompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 1612,
              "content": "this.ensureInitialized();",
              "isCurrent": false
            },
            {
              "line": 1613,
              "content": "if (!this.componentStatus.promptGenerator.functional) {",
              "isCurrent": false
            },
            {
              "line": 1614,
              "content": "throw new Error('PromptGenerator is not functional');",
              "isCurrent": true
            },
            {
              "line": 1615,
              "content": "}",
              "isCurrent": false
            },
            {
              "line": 1616,
              "content": "return this.promptGenerator;",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\learning-journey\\prompt-generator.ts",
          "line": 69,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "* @class PromptGenerator",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 67,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 68,
              "content": "/**",
              "isCurrent": false
            },
            {
              "line": 69,
              "content": "* @class PromptGenerator",
              "isCurrent": true
            },
            {
              "line": 70,
              "content": "* @description",
              "isCurrent": false
            },
            {
              "line": 71,
              "content": "* 生成エンジン用のプロンプトを作成するクラス。",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\learning-journey\\prompt-generator.ts",
          "line": 73,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "export class PromptGenerator {",
          "method": "unknown",
          "class": "PromptGenerator",
          "surrounding": [
            {
              "line": 71,
              "content": "* 生成エンジン用のプロンプトを作成するクラス。",
              "isCurrent": false
            },
            {
              "line": 72,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 73,
              "content": "export class PromptGenerator {",
              "isCurrent": true
            },
            {
              "line": 74,
              "content": "private initialized: boolean = false;",
              "isCurrent": false
            },
            {
              "line": 75,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\learning-journey\\prompt-generator.ts",
          "line": 83,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "logger.info('PromptGenerator created');",
          "method": "constructor",
          "class": "PromptGenerator",
          "surrounding": [
            {
              "line": 81,
              "content": "private eventBus: EventBus",
              "isCurrent": false
            },
            {
              "line": 82,
              "content": ") {",
              "isCurrent": false
            },
            {
              "line": 83,
              "content": "logger.info('PromptGenerator created');",
              "isCurrent": true
            },
            {
              "line": 84,
              "content": "}",
              "isCurrent": false
            },
            {
              "line": 85,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\learning-journey\\prompt-generator.ts",
          "line": 91,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "logger.info('PromptGenerator already initialized');",
          "method": "initialize",
          "class": "PromptGenerator",
          "surrounding": [
            {
              "line": 89,
              "content": "initialize(): void {",
              "isCurrent": false
            },
            {
              "line": 90,
              "content": "if (this.initialized) {",
              "isCurrent": false
            },
            {
              "line": 91,
              "content": "logger.info('PromptGenerator already initialized');",
              "isCurrent": true
            },
            {
              "line": 92,
              "content": "return;",
              "isCurrent": false
            },
            {
              "line": 93,
              "content": "}",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\learning-journey\\prompt-generator.ts",
          "line": 96,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "logger.info('PromptGenerator initialized');",
          "method": "unknown",
          "class": "PromptGenerator",
          "surrounding": [
            {
              "line": 94,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 95,
              "content": "this.initialized = true;",
              "isCurrent": false
            },
            {
              "line": 96,
              "content": "logger.info('PromptGenerator initialized');",
              "isCurrent": true
            },
            {
              "line": 97,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 98,
              "content": "// 初期化完了イベント発行",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\lifecycle\\service-container copy 2.ts",
          "line": 250,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "const { PromptGenerator } = await import('@/lib/generation/prompt-generator');",
          "method": "import",
          "class": "unknown",
          "surrounding": [
            {
              "line": 248,
              "content": "const { NovelGenerationEngine } = await import('@/lib/generation/engine');",
              "isCurrent": false
            },
            {
              "line": 249,
              "content": "const { ChapterGenerator } = await import('@/lib/generation/engine/chapter-generator');",
              "isCurrent": false
            },
            {
              "line": 250,
              "content": "const { PromptGenerator } = await import('@/lib/generation/prompt-generator');",
              "isCurrent": true
            },
            {
              "line": 251,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 252,
              "content": "// 型安全な依存関係解決",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\lifecycle\\service-container copy 2.ts",
          "line": 259,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "const promptGenerator = new PromptGenerator(",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 257,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 258,
              "content": "// 🔥 CharacterManagerを含む完全な依存関係注入",
              "isCurrent": false
            },
            {
              "line": 259,
              "content": "const promptGenerator = new PromptGenerator(",
              "isCurrent": true
            },
            {
              "line": 260,
              "content": "memoryManager,",
              "isCurrent": false
            },
            {
              "line": 261,
              "content": "undefined, // worldSettingsManager: PlotManager経由でアクセス",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\lifecycle\\service-container copy 3.ts",
          "line": 247,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "const { PromptGenerator } = await import('@/lib/generation/prompt-generator');",
          "method": "import",
          "class": "unknown",
          "surrounding": [
            {
              "line": 245,
              "content": "const { NovelGenerationEngine } = await import('@/lib/generation/engine');",
              "isCurrent": false
            },
            {
              "line": 246,
              "content": "const { ChapterGenerator } = await import('@/lib/generation/engine/chapter-generator');",
              "isCurrent": false
            },
            {
              "line": 247,
              "content": "const { PromptGenerator } = await import('@/lib/generation/prompt-generator');",
              "isCurrent": true
            },
            {
              "line": 248,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 249,
              "content": "// 型安全な依存関係解決",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\lifecycle\\service-container copy 3.ts",
          "line": 256,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "const promptGenerator = new PromptGenerator(",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 254,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 255,
              "content": "// 🔥 CharacterManagerを含む完全な依存関係注入",
              "isCurrent": false
            },
            {
              "line": 256,
              "content": "const promptGenerator = new PromptGenerator(",
              "isCurrent": true
            },
            {
              "line": 257,
              "content": "memoryManager,",
              "isCurrent": false
            },
            {
              "line": 258,
              "content": "undefined, // worldSettingsManager: PlotManager経由でアクセス",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\lifecycle\\service-container copy.ts",
          "line": 211,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "const { PromptGenerator } = await import('@/lib/generation/prompt-generator');",
          "method": "import",
          "class": "unknown",
          "surrounding": [
            {
              "line": 209,
              "content": "const { NovelGenerationEngine } = await import('@/lib/generation/engine');",
              "isCurrent": false
            },
            {
              "line": 210,
              "content": "const { ChapterGenerator } = await import('@/lib/generation/engine/chapter-generator');",
              "isCurrent": false
            },
            {
              "line": 211,
              "content": "const { PromptGenerator } = await import('@/lib/generation/prompt-generator');",
              "isCurrent": true
            },
            {
              "line": 212,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 213,
              "content": "// 型安全な依存関係解決",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\lifecycle\\service-container copy.ts",
          "line": 219,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "const promptGenerator = new PromptGenerator(memoryManager);",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 217,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 218,
              "content": "// 依存関係を注入してインスタンス作成",
              "isCurrent": false
            },
            {
              "line": 219,
              "content": "const promptGenerator = new PromptGenerator(memoryManager);",
              "isCurrent": true
            },
            {
              "line": 220,
              "content": "const chapterGenerator = new ChapterGenerator(geminiClient, promptGenerator, memoryManager);",
              "isCurrent": false
            },
            {
              "line": 221,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\lifecycle\\service-container.ts",
          "line": 247,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "const { PromptGenerator } = await import('@/lib/generation/prompt-generator');",
          "method": "import",
          "class": "unknown",
          "surrounding": [
            {
              "line": 245,
              "content": "const { NovelGenerationEngine } = await import('@/lib/generation/engine');",
              "isCurrent": false
            },
            {
              "line": 246,
              "content": "const { ChapterGenerator } = await import('@/lib/generation/engine/chapter-generator');",
              "isCurrent": false
            },
            {
              "line": 247,
              "content": "const { PromptGenerator } = await import('@/lib/generation/prompt-generator');",
              "isCurrent": true
            },
            {
              "line": 248,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 249,
              "content": "// 型安全な依存関係解決",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\lifecycle\\service-container.ts",
          "line": 256,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "const promptGenerator = new PromptGenerator(",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 254,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 255,
              "content": "// 🔥 CharacterManagerを含む完全な依存関係注入",
              "isCurrent": false
            },
            {
              "line": 256,
              "content": "const promptGenerator = new PromptGenerator(",
              "isCurrent": true
            },
            {
              "line": 257,
              "content": "memoryManager,",
              "isCurrent": false
            },
            {
              "line": 258,
              "content": "undefined, // worldSettingsManager: PlotManager経由でアクセス",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\memory\\long-term\\duplicate-resolver.ts",
          "line": 150,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "/** PromptGenerator効果性 */",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 148,
              "content": "/** システム効果性分析 */",
              "isCurrent": false
            },
            {
              "line": 149,
              "content": "systemEffectiveness: {",
              "isCurrent": false
            },
            {
              "line": 150,
              "content": "/** PromptGenerator効果性 */",
              "isCurrent": true
            },
            {
              "line": 151,
              "content": "promptGeneration: {",
              "isCurrent": false
            },
            {
              "line": 152,
              "content": "averageQuality: number;",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\memory\\long-term\\system-knowledge.ts",
          "line": 7,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "* 🔧 PromptGenerator、分析パターン、エラーパターンの完全保存",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 5,
              "content": "* 🔧 12コンポーネントのデータ救済による知識蓄積",
              "isCurrent": false
            },
            {
              "line": 6,
              "content": "* 🔧 パターン学習・最適化戦略・品質改善の統合管理",
              "isCurrent": false
            },
            {
              "line": 7,
              "content": "* 🔧 PromptGenerator、分析パターン、エラーパターンの完全保存",
              "isCurrent": true
            },
            {
              "line": 8,
              "content": "* 🔧 システム自動学習・改善サイクルの実現",
              "isCurrent": false
            },
            {
              "line": 9,
              "content": "*/",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\memory\\long-term\\system-knowledge.ts",
          "line": 96,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "// PromptGeneratorデータ救済",
          "method": "integrateRescuedComponentData",
          "class": "unknown",
          "surrounding": [
            {
              "line": 94,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 95,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 96,
              "content": "// PromptGeneratorデータ救済",
              "isCurrent": true
            },
            {
              "line": 97,
              "content": "await this.rescuePromptGeneratorData();",
              "isCurrent": false
            },
            {
              "line": 98,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\memory\\long-term\\system-knowledge.ts",
          "line": 97,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "await this.rescuePromptGeneratorData();",
          "method": "cuedComponentData",
          "class": "unknown",
          "surrounding": [
            {
              "line": 95,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 96,
              "content": "// PromptGeneratorデータ救済",
              "isCurrent": false
            },
            {
              "line": 97,
              "content": "await this.rescuePromptGeneratorData();",
              "isCurrent": true
            },
            {
              "line": 98,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 99,
              "content": "// DynamicTensionOptimizerデータ救済",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\memory\\long-term\\system-knowledge.ts",
          "line": 141,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "* PromptGeneratorデータ救済",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 139,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 140,
              "content": "/**",
              "isCurrent": false
            },
            {
              "line": 141,
              "content": "* PromptGeneratorデータ救済",
              "isCurrent": true
            },
            {
              "line": 142,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 143,
              "content": "private async rescuePromptGeneratorData(): Promise<void> {",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\memory\\long-term\\system-knowledge.ts",
          "line": 143,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "private async rescuePromptGeneratorData(): Promise<void> {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 141,
              "content": "* PromptGeneratorデータ救済",
              "isCurrent": false
            },
            {
              "line": 142,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 143,
              "content": "private async rescuePromptGeneratorData(): Promise<void> {",
              "isCurrent": true
            },
            {
              "line": 144,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 145,
              "content": "// PromptGeneratorの履歴・統計・品質メトリクスを救済",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\memory\\long-term\\system-knowledge.ts",
          "line": 145,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "// PromptGeneratorの履歴・統計・品質メトリクスを救済",
          "method": "rescuePromptGeneratorData",
          "class": "unknown",
          "surrounding": [
            {
              "line": 143,
              "content": "private async rescuePromptGeneratorData(): Promise<void> {",
              "isCurrent": false
            },
            {
              "line": 144,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 145,
              "content": "// PromptGeneratorの履歴・統計・品質メトリクスを救済",
              "isCurrent": true
            },
            {
              "line": 146,
              "content": "const promptData = await this.loadComponentData('prompt-generator');",
              "isCurrent": false
            },
            {
              "line": 147,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\memory\\long-term\\system-knowledge.ts",
          "line": 167,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "logger.info(`Rescued ${patterns.length} prompt patterns and ${effectiveTemplates.length} templates from PromptGenerator`);",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 165,
              "content": "}",
              "isCurrent": false
            },
            {
              "line": 166,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 167,
              "content": "logger.info(`Rescued ${patterns.length} prompt patterns and ${effectiveTemplates.length} templates from PromptGenerator`);",
              "isCurrent": true
            },
            {
              "line": 168,
              "content": "}",
              "isCurrent": false
            },
            {
              "line": 169,
              "content": "} catch (error) {",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\memory\\long-term\\system-knowledge.ts",
          "line": 170,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "logger.warn('Failed to rescue PromptGenerator data', { error });",
          "method": "catch",
          "class": "unknown",
          "surrounding": [
            {
              "line": 168,
              "content": "}",
              "isCurrent": false
            },
            {
              "line": 169,
              "content": "} catch (error) {",
              "isCurrent": false
            },
            {
              "line": 170,
              "content": "logger.warn('Failed to rescue PromptGenerator data', { error });",
              "isCurrent": true
            },
            {
              "line": 171,
              "content": "}",
              "isCurrent": false
            },
            {
              "line": 172,
              "content": "}",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\memory\\long-term\\system-types.ts",
          "line": 7,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "* プロンプト生成パターン（PromptGenerator救済データ）",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 5,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 6,
              "content": "/**",
              "isCurrent": false
            },
            {
              "line": 7,
              "content": "* プロンプト生成パターン（PromptGenerator救済データ）",
              "isCurrent": true
            },
            {
              "line": 8,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 9,
              "content": "export interface PromptGenerationPattern {",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\memory\\short-term\\generation-cache.ts",
          "line": 5,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "* PromptGenerator、ContextGenerator、Pre/PostGenerationの一時処理結果を管理する",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 3,
              "content": "* @fileoverview 統合記憶階層システム - 短期記憶：生成キャッシュ",
              "isCurrent": false
            },
            {
              "line": 4,
              "content": "* @description",
              "isCurrent": false
            },
            {
              "line": 5,
              "content": "* PromptGenerator、ContextGenerator、Pre/PostGenerationの一時処理結果を管理する",
              "isCurrent": true
            },
            {
              "line": 6,
              "content": "* 統合キャッシュシステム。12コンポーネントのデータ救済機能を提供します。",
              "isCurrent": false
            },
            {
              "line": 7,
              "content": "*/",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\memory\\short-term\\generation-cache.ts",
          "line": 15,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "* @description PromptGenerator一時データ",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 13,
              "content": "/**",
              "isCurrent": false
            },
            {
              "line": 14,
              "content": "* @interface ActivePromptGeneration",
              "isCurrent": false
            },
            {
              "line": 15,
              "content": "* @description PromptGenerator一時データ",
              "isCurrent": true
            },
            {
              "line": 16,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 17,
              "content": "interface ActivePromptGeneration {",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\memory\\short-term\\generation-cache.ts",
          "line": 255,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "* PromptGenerator、ContextGenerator、Pre/PostGenerationの一時処理結果を管理し、",
          "method": "unknown",
          "class": "GenerationCache",
          "surrounding": [
            {
              "line": 253,
              "content": "* @description",
              "isCurrent": false
            },
            {
              "line": 254,
              "content": "* 統合記憶階層システムの生成キャッシュクラス。",
              "isCurrent": false
            },
            {
              "line": 255,
              "content": "* PromptGenerator、ContextGenerator、Pre/PostGenerationの一時処理結果を管理し、",
              "isCurrent": true
            },
            {
              "line": 256,
              "content": "* 重複処理の排除と高速化を実現します।",
              "isCurrent": false
            },
            {
              "line": 257,
              "content": "*/",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\memory\\short-term\\generation-cache.ts",
          "line": 263,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "// 🔴 PromptGenerator救済データ",
          "method": "unknown",
          "class": "GenerationCache",
          "surrounding": [
            {
              "line": 261,
              "content": "private static readonly MAX_CACHE_AGE = 4 * 60 * 60 * 1000; // 4時間",
              "isCurrent": false
            },
            {
              "line": 262,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 263,
              "content": "// 🔴 PromptGenerator救済データ",
              "isCurrent": true
            },
            {
              "line": 264,
              "content": "private promptGenerationCache: Map<string, ActivePromptGeneration> = new Map();",
              "isCurrent": false
            },
            {
              "line": 265,
              "content": "private templateProcessingCache: Map<string, TemplateProcessingState> = new Map();",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\memory\\short-term\\generation-cache.ts",
          "line": 327,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "// 🔴 PromptGenerator救済機能",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 325,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 326,
              "content": "// ============================================================================",
              "isCurrent": false
            },
            {
              "line": 327,
              "content": "// 🔴 PromptGenerator救済機能",
              "isCurrent": true
            },
            {
              "line": 328,
              "content": "// ============================================================================",
              "isCurrent": false
            },
            {
              "line": 329,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\memory\\short-term\\temporary-analysis.ts",
          "line": 8,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "* - PromptGenerator一時データ",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 6,
              "content": "*",
              "isCurrent": false
            },
            {
              "line": 7,
              "content": "* 管理対象：",
              "isCurrent": false
            },
            {
              "line": 8,
              "content": "* - PromptGenerator一時データ",
              "isCurrent": true
            },
            {
              "line": 9,
              "content": "* - ContextGenerator一時データ",
              "isCurrent": false
            },
            {
              "line": 10,
              "content": "* - Pre/PostGeneration一時データ",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\memory\\short-term\\temporary-analysis.ts",
          "line": 24,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "// 型定義 - PromptGenerator一時データ",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 22,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 23,
              "content": "// ============================================================================",
              "isCurrent": false
            },
            {
              "line": 24,
              "content": "// 型定義 - PromptGenerator一時データ",
              "isCurrent": true
            },
            {
              "line": 25,
              "content": "// ============================================================================",
              "isCurrent": false
            },
            {
              "line": 26,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\memory\\short-term\\temporary-analysis.ts",
          "line": 435,
          "category": "promptGeneration",
          "pattern": "PromptGenerator",
          "context": "// PromptGenerator一時データ管理",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 433,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 434,
              "content": "// ============================================================================",
              "isCurrent": false
            },
            {
              "line": 435,
              "content": "// PromptGenerator一時データ管理",
              "isCurrent": true
            },
            {
              "line": 436,
              "content": "// ============================================================================",
              "isCurrent": false
            },
            {
              "line": 437,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\manager copy.ts",
          "line": 738,
          "category": "promptGeneration",
          "pattern": "generatePrompt",
          "context": "async generatePromptElements(chapterNumber: number): Promise<PromptElements> {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 736,
              "content": "* 🔧 次章のプロンプト用要素を生成（新記憶階層システム統合版）",
              "isCurrent": false
            },
            {
              "line": 737,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 738,
              "content": "async generatePromptElements(chapterNumber: number): Promise<PromptElements> {",
              "isCurrent": true
            },
            {
              "line": 739,
              "content": "await this.ensureInitialized();",
              "isCurrent": false
            },
            {
              "line": 740,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\manager.ts",
          "line": 864,
          "category": "promptGeneration",
          "pattern": "generatePrompt",
          "context": "async generatePromptElements(chapterNumber: number): Promise<PromptElements> {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 862,
              "content": "* 🔧 次章のプロンプト用要素を生成（新記憶階層システム統合版）",
              "isCurrent": false
            },
            {
              "line": 863,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 864,
              "content": "async generatePromptElements(chapterNumber: number): Promise<PromptElements> {",
              "isCurrent": true
            },
            {
              "line": 865,
              "content": "await this.ensureInitialized();",
              "isCurrent": false
            },
            {
              "line": 866,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\utils\\prompt-storage.ts",
          "line": 129,
          "category": "promptGeneration",
          "pattern": "buildPrompt",
          "context": "const promptSection = this.buildPromptSection(prompt);",
          "method": "wnContent",
          "class": "unknown",
          "surrounding": [
            {
              "line": 127,
              "content": "): string {",
              "isCurrent": false
            },
            {
              "line": 128,
              "content": "const frontMatter = this.buildFrontMatter(metadata);",
              "isCurrent": false
            },
            {
              "line": 129,
              "content": "const promptSection = this.buildPromptSection(prompt);",
              "isCurrent": true
            },
            {
              "line": 130,
              "content": "const contextSection = this.buildContextSection(context);",
              "isCurrent": false
            },
            {
              "line": 131,
              "content": "const metadataSection = this.buildMetadataSection(metadata);",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\utils\\prompt-storage.ts",
          "line": 164,
          "category": "promptGeneration",
          "pattern": "buildPrompt",
          "context": "private buildPromptSection(prompt: string): string {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 162,
              "content": "* プロンプトセクションの構築",
              "isCurrent": false
            },
            {
              "line": 163,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 164,
              "content": "private buildPromptSection(prompt: string): string {",
              "isCurrent": true
            },
            {
              "line": 165,
              "content": "return `# 生成されたプロンプト",
              "isCurrent": false
            },
            {
              "line": 166,
              "content": "",
              "isCurrent": false
            }
          ]
        }
      ],
      "geminiCalls": [
        {
          "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
          "line": 104,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.client.generateText(finalPrompt, apiOptions)",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 102,
              "content": "// スロットリング付きでAPIリクエスト",
              "isCurrent": false
            },
            {
              "line": 103,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 104,
              "content": "this.client.generateText(finalPrompt, apiOptions)",
              "isCurrent": true
            },
            {
              "line": 105,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 106,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
          "line": 166,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "return this.generateText(prompt, options);",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 164,
              "content": "): Promise<string> {",
              "isCurrent": false
            },
            {
              "line": 165,
              "content": "// 基本的にはgenerateTextと同じだが、将来的に拡張可能にする",
              "isCurrent": false
            },
            {
              "line": 166,
              "content": "return this.generateText(prompt, options);",
              "isCurrent": true
            },
            {
              "line": 167,
              "content": "}",
              "isCurrent": false
            },
            {
              "line": 168,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
          "line": 32,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "this.client = client || new GeminiClient();",
          "method": "constructor",
          "class": "GeminiAdapter",
          "surrounding": [
            {
              "line": 30,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 31,
              "content": "constructor(client?: GeminiClient) {",
              "isCurrent": false
            },
            {
              "line": 32,
              "content": "this.client = client || new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 33,
              "content": "logger.info('GeminiAdapter initialized');",
              "isCurrent": false
            },
            {
              "line": 34,
              "content": "}",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
          "line": 382,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "buildGenreAnalysisPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 380,
              "content": "// AI分析を実行",
              "isCurrent": false
            },
            {
              "line": 381,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 382,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 383,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 384,
              "content": "targetLength: 800,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
          "line": 612,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "buildArcOptimizationPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 610,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 611,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 612,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 613,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 614,
              "content": "targetLength: 800,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
          "line": 639,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "buildMotivationEnhancementPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 637,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 638,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 639,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 640,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 641,
              "content": "targetLength: 800,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
          "line": 693,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "buildContrastRecommendationsPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 691,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 692,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 693,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 694,
              "content": "temperature: 0.4,",
              "isCurrent": false
            },
            {
              "line": 695,
              "content": "targetLength: 800,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
          "line": 382,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "buildGenreAnalysisPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 380,
              "content": "// AI分析を実行",
              "isCurrent": false
            },
            {
              "line": 381,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 382,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 383,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 384,
              "content": "targetLength: 800,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
          "line": 612,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "buildArcOptimizationPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 610,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 611,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 612,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 613,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 614,
              "content": "targetLength: 800,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
          "line": 639,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "buildMotivationEnhancementPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 637,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 638,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 639,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 640,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 641,
              "content": "targetLength: 800,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
          "line": 693,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "buildContrastRecommendationsPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 691,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 692,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 693,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 694,
              "content": "temperature: 0.4,",
              "isCurrent": false
            },
            {
              "line": 695,
              "content": "targetLength: 800,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
          "line": 206,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "this.geminiClient = new GeminiClient();",
          "method": "Map",
          "class": "CharacterDepthService",
          "surrounding": [
            {
              "line": 204,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 205,
              "content": "constructor() {",
              "isCurrent": false
            },
            {
              "line": 206,
              "content": "this.geminiClient = new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 207,
              "content": "this.logger = new Logger({ serviceName: 'CharacterDepthService' });",
              "isCurrent": false
            },
            {
              "line": 208,
              "content": "this.logger.info('CharacterDepthService: 最適化版で初期化完了');",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
          "line": 390,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "buildGenreAnalysisPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 388,
              "content": "// AI分析を実行",
              "isCurrent": false
            },
            {
              "line": 389,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 390,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 391,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 392,
              "content": "targetLength: 800,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
          "line": 689,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "buildArcOptimizationPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 687,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 688,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 689,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 690,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 691,
              "content": "targetLength: 800,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
          "line": 716,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "buildMotivationEnhancementPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 714,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 715,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 716,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 717,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 718,
              "content": "targetLength: 800,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
          "line": 750,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "buildContrastRecommendationsPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 748,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 749,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 750,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 751,
              "content": "temperature: 0.4,",
              "isCurrent": false
            },
            {
              "line": 752,
              "content": "targetLength: 800,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
          "line": 390,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "buildGenreAnalysisPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 388,
              "content": "// AI分析を実行",
              "isCurrent": false
            },
            {
              "line": 389,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 390,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 391,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 392,
              "content": "targetLength: 800,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
          "line": 689,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "buildArcOptimizationPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 687,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 688,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 689,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 690,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 691,
              "content": "targetLength: 800,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
          "line": 716,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "buildMotivationEnhancementPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 714,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 715,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 716,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 717,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 718,
              "content": "targetLength: 800,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
          "line": 750,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "buildContrastRecommendationsPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 748,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 749,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 750,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 751,
              "content": "temperature: 0.4,",
              "isCurrent": false
            },
            {
              "line": 752,
              "content": "targetLength: 800,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
          "line": 210,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "this.geminiClient = new GeminiClient();",
          "method": "constructor",
          "class": "CharacterDepthService",
          "surrounding": [
            {
              "line": 208,
              "content": "private memoryManager: MemoryManager",
              "isCurrent": false
            },
            {
              "line": 209,
              "content": ") {",
              "isCurrent": false
            },
            {
              "line": 210,
              "content": "this.geminiClient = new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 211,
              "content": "this.logger = new Logger({ serviceName: 'CharacterDepthService' });",
              "isCurrent": false
            },
            {
              "line": 212,
              "content": "this.logger.info('CharacterDepthService: ファサードパターン対応版で初期化完了');",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
          "line": 259,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 257,
              "content": "// APIスロットリングを使用してAIガイダンスを生成",
              "isCurrent": false
            },
            {
              "line": 258,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 259,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 260,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 261,
              "content": "purpose: 'guidance',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
          "line": 529,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 527,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "isCurrent": false
            },
            {
              "line": 528,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 529,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 530,
              "content": "temperature: 0.4,",
              "isCurrent": false
            },
            {
              "line": 531,
              "content": "purpose: 'suggestion',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
          "line": 719,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 717,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "isCurrent": false
            },
            {
              "line": 718,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 719,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 720,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 721,
              "content": "purpose: 'suggestion',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
          "line": 901,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 899,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "isCurrent": false
            },
            {
              "line": 900,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 901,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 902,
              "content": "temperature: 0.4,",
              "isCurrent": false
            },
            {
              "line": 903,
              "content": "purpose: 'suggestion',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
          "line": 1148,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 1146,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "isCurrent": false
            },
            {
              "line": 1147,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 1148,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 1149,
              "content": "temperature: 0.4,",
              "isCurrent": false
            },
            {
              "line": 1150,
              "content": "purpose: 'suggestion',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
          "line": 1186,
          "category": "geminiCalls",
          "pattern": "\\.generateContent\\s*\\(",
          "context": "this.geminiAdapter.generateContent(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 1184,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 1185,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 1186,
              "content": "this.geminiAdapter.generateContent(prompt, {",
              "isCurrent": true
            },
            {
              "line": 1187,
              "content": "temperature: 0.7,",
              "isCurrent": false
            },
            {
              "line": 1188,
              "content": "purpose: 'analysis'",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
          "line": 1580,
          "category": "geminiCalls",
          "pattern": "\\.generateContent\\s*\\(",
          "context": "this.geminiAdapter.generateContent(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 1578,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 1579,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 1580,
              "content": "this.geminiAdapter.generateContent(prompt, {",
              "isCurrent": true
            },
            {
              "line": 1581,
              "content": "temperature: 0.2,",
              "isCurrent": false
            },
            {
              "line": 1582,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
          "line": 450,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 448,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "isCurrent": false
            },
            {
              "line": 449,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 450,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 451,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 452,
              "content": "purpose: 'suggestion',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
          "line": 551,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 549,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "isCurrent": false
            },
            {
              "line": 550,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 551,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 552,
              "content": "temperature: 0.4,",
              "isCurrent": false
            },
            {
              "line": 553,
              "content": "purpose: 'suggestion',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
          "line": 633,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 631,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "isCurrent": false
            },
            {
              "line": 632,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 633,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 634,
              "content": "temperature: 0.4,",
              "isCurrent": false
            },
            {
              "line": 635,
              "content": "purpose: 'suggestion',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
          "line": 717,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 715,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "isCurrent": false
            },
            {
              "line": 716,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 717,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 718,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 719,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
          "line": 801,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 799,
              "content": "// APIスロットリングを使用してAI生成を実行",
              "isCurrent": false
            },
            {
              "line": 800,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 801,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 802,
              "content": "temperature: 0.4,",
              "isCurrent": false
            },
            {
              "line": 803,
              "content": "purpose: 'suggestion',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
          "line": 182,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(qualityPrompt, {",
          "method": "info",
          "class": "unknown",
          "surrounding": [
            {
              "line": 180,
              "content": "// APIスロットリングを使用して品質分析を実行",
              "isCurrent": false
            },
            {
              "line": 181,
              "content": "const qualityResponse = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 182,
              "content": "this.geminiAdapter.generateText(qualityPrompt, {",
              "isCurrent": true
            },
            {
              "line": 183,
              "content": "temperature: 0.1,",
              "isCurrent": false
            },
            {
              "line": 184,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
          "line": 290,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(characterPrompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 288,
              "content": "// APIスロットリングを使用してキャラクター分析を実行",
              "isCurrent": false
            },
            {
              "line": 289,
              "content": "const characterResponse = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 290,
              "content": "this.geminiAdapter.generateText(characterPrompt, {",
              "isCurrent": true
            },
            {
              "line": 291,
              "content": "temperature: 0.2,",
              "isCurrent": false
            },
            {
              "line": 292,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
          "line": 354,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(keywordPrompt, {",
          "method": "info",
          "class": "unknown",
          "surrounding": [
            {
              "line": 352,
              "content": "// APIスロットリングを使用してキーワード抽出を実行",
              "isCurrent": false
            },
            {
              "line": 353,
              "content": "const keywordResponse = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 354,
              "content": "this.geminiAdapter.generateText(keywordPrompt, {",
              "isCurrent": true
            },
            {
              "line": 355,
              "content": "temperature: 0.2,",
              "isCurrent": false
            },
            {
              "line": 356,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
          "line": 791,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(analysisPrompt, {",
          "method": "createBaseAnalysisPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 789,
              "content": "// APIスロットリングを使用して分析を実行",
              "isCurrent": false
            },
            {
              "line": 790,
              "content": "const analysisResponse = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 791,
              "content": "this.geminiAdapter.generateText(analysisPrompt, {",
              "isCurrent": true
            },
            {
              "line": 792,
              "content": "temperature: 0.1, // 分析タスクのため低温に設定",
              "isCurrent": false
            },
            {
              "line": 793,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
          "line": 881,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(scenePrompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 879,
              "content": "// APIスロットリングを使用してシーン抽出を実行",
              "isCurrent": false
            },
            {
              "line": 880,
              "content": "const sceneResponse = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 881,
              "content": "this.geminiAdapter.generateText(scenePrompt, {",
              "isCurrent": true
            },
            {
              "line": 882,
              "content": "temperature: 0.2,",
              "isCurrent": false
            },
            {
              "line": 883,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
          "line": 264,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 262,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 263,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 264,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 265,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 266,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
          "line": 342,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 340,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 341,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 342,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 343,
              "content": "temperature: 0.2,",
              "isCurrent": false
            },
            {
              "line": 344,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
          "line": 401,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 399,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 400,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 401,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 402,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 403,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
          "line": 464,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 462,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 463,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 464,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 465,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 466,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
          "line": 511,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 509,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 510,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 511,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 512,
              "content": "temperature: 0.2,",
              "isCurrent": false
            },
            {
              "line": 513,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
          "line": 218,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "buildSelectionPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 216,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 217,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 218,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 219,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 220,
              "content": "purpose: 'selection',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
          "line": 218,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "buildSelectionPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 216,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 217,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 218,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 219,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 220,
              "content": "purpose: 'selection',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\narrative\\narrative-analysis-service.ts",
          "line": 131,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "geminiClient: options.geminiClient || new GeminiClient(),",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 129,
              "content": "this.config = {",
              "isCurrent": false
            },
            {
              "line": 130,
              "content": "memoryManager: options.memoryManager,",
              "isCurrent": false
            },
            {
              "line": 131,
              "content": "geminiClient: options.geminiClient || new GeminiClient(),",
              "isCurrent": true
            },
            {
              "line": 132,
              "content": "genre: options.genre || 'classic',",
              "isCurrent": false
            },
            {
              "line": 133,
              "content": "enableMemoryIntegration: options.enableMemoryIntegration ?? true,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
          "line": 452,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "const response = await this.geminiClient.generateText(prompt, {",
          "method": "getParameters",
          "class": "unknown",
          "surrounding": [
            {
              "line": 450,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 451,
              "content": "// AIクライアントでシーン構成の推奨を生成",
              "isCurrent": false
            },
            {
              "line": 452,
              "content": "const response = await this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 453,
              "content": "temperature: 0.7,",
              "isCurrent": false
            },
            {
              "line": 454,
              "content": "targetLength: targetLength",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
          "line": 452,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const response = await this.geminiClient.generateText(prompt, {",
          "method": "getParameters",
          "class": "unknown",
          "surrounding": [
            {
              "line": 450,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 451,
              "content": "// AIクライアントでシーン構成の推奨を生成",
              "isCurrent": false
            },
            {
              "line": 452,
              "content": "const response = await this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 453,
              "content": "temperature: 0.7,",
              "isCurrent": false
            },
            {
              "line": 454,
              "content": "targetLength: targetLength",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts",
          "line": 111,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 109,
              "content": "// API呼び出し（スロットリング対応）",
              "isCurrent": false
            },
            {
              "line": 110,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 111,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 112,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 113,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts",
          "line": 111,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 109,
              "content": "// API呼び出し（スロットリング対応）",
              "isCurrent": false
            },
            {
              "line": 110,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 111,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 112,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 113,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
          "line": 539,
          "category": "geminiCalls",
          "pattern": "\\.generateContent\\s*\\(",
          "context": "this.geminiAdapter.generateContent(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 537,
              "content": "// APIスロットリングを使用して制御されたリクエストを実行",
              "isCurrent": false
            },
            {
              "line": 538,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 539,
              "content": "this.geminiAdapter.generateContent(prompt, {",
              "isCurrent": true
            },
            {
              "line": 540,
              "content": "temperature: 0.1,",
              "isCurrent": false
            },
            {
              "line": 541,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
          "line": 787,
          "category": "geminiCalls",
          "pattern": "\\.generateContent\\s*\\(",
          "context": "this.geminiAdapter.generateContent(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 785,
              "content": "// APIスロットリングを使用してAI分析を実行",
              "isCurrent": false
            },
            {
              "line": 786,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 787,
              "content": "this.geminiAdapter.generateContent(prompt, {",
              "isCurrent": true
            },
            {
              "line": 788,
              "content": "temperature: 0.1,",
              "isCurrent": false
            },
            {
              "line": 789,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
          "line": 863,
          "category": "geminiCalls",
          "pattern": "\\.generateContent\\s*\\(",
          "context": "this.geminiAdapter.generateContent(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 861,
              "content": "// APIスロットリングを使用してAI分析を実行",
              "isCurrent": false
            },
            {
              "line": 862,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 863,
              "content": "this.geminiAdapter.generateContent(prompt, {",
              "isCurrent": true
            },
            {
              "line": 864,
              "content": "temperature: 0.1,",
              "isCurrent": false
            },
            {
              "line": 865,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "line": 167,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "buildThemeAnalysisPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 165,
              "content": "// APIスロットリングを利用してリクエスト",
              "isCurrent": false
            },
            {
              "line": 166,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 167,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 168,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 169,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "line": 395,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "reshadowingResolutionPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 393,
              "content": "// APIスロットリングを使用して分析を実行",
              "isCurrent": false
            },
            {
              "line": 394,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 395,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 396,
              "content": "temperature: 0.2,",
              "isCurrent": false
            },
            {
              "line": 397,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "line": 461,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 459,
              "content": "// APIスロットリングを使用して生成を実行",
              "isCurrent": false
            },
            {
              "line": 460,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 461,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 462,
              "content": "temperature: 0.6,",
              "isCurrent": false
            },
            {
              "line": 463,
              "content": "purpose: 'generation',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "line": 602,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "buildSymbolismAnalysisPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 600,
              "content": "// APIスロットリングを使用して分析を実行",
              "isCurrent": false
            },
            {
              "line": 601,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 602,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 603,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 604,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "line": 688,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "buildChapterSummaryPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 686,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 687,
              "content": "const summary = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 688,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 689,
              "content": "temperature: 0.1,",
              "isCurrent": false
            },
            {
              "line": 690,
              "content": "targetLength: 150",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "line": 710,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "buildConsistencyAnalysisPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 708,
              "content": "// APIスロットリングを使用して分析を実行",
              "isCurrent": false
            },
            {
              "line": 709,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 710,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 711,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 712,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "line": 1811,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 1809,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 1810,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 1811,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 1812,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 1813,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "line": 1897,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 1895,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 1896,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 1897,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 1898,
              "content": "temperature: 0.4,",
              "isCurrent": false
            },
            {
              "line": 1899,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "line": 2064,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 2062,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 2063,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 2064,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 2065,
              "content": "temperature: 0.4,",
              "isCurrent": false
            },
            {
              "line": 2066,
              "content": "purpose: 'suggestion',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "line": 2139,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(prompt, {",
          "method": "buildMotifAnalysisPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 2137,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 2138,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 2139,
              "content": "this.geminiAdapter.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 2140,
              "content": "temperature: 0.2,",
              "isCurrent": false
            },
            {
              "line": 2141,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "line": 2336,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiAdapter.generateText(developmentPrompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 2334,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 2335,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 2336,
              "content": "this.geminiAdapter.generateText(developmentPrompt, {",
              "isCurrent": true
            },
            {
              "line": 2337,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 2338,
              "content": "purpose: 'analysis',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
          "line": 234,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "const result = await this.geminiClient.generateText(prompt, {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 232,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 233,
              "content": "// AIによる一貫性検証",
              "isCurrent": false
            },
            {
              "line": 234,
              "content": "const result = await this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 235,
              "content": "temperature: 0.3",
              "isCurrent": false
            },
            {
              "line": 236,
              "content": "});",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
          "line": 316,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "const result = await this.geminiClient.generateText(prompt, {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 314,
              "content": "`;",
              "isCurrent": false
            },
            {
              "line": 315,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 316,
              "content": "const result = await this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 317,
              "content": "temperature: 0.1,",
              "isCurrent": false
            },
            {
              "line": 318,
              "content": "targetLength: 10",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
          "line": 234,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const result = await this.geminiClient.generateText(prompt, {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 232,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 233,
              "content": "// AIによる一貫性検証",
              "isCurrent": false
            },
            {
              "line": 234,
              "content": "const result = await this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 235,
              "content": "temperature: 0.3",
              "isCurrent": false
            },
            {
              "line": 236,
              "content": "});",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
          "line": 316,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const result = await this.geminiClient.generateText(prompt, {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 314,
              "content": "`;",
              "isCurrent": false
            },
            {
              "line": 315,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 316,
              "content": "const result = await this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 317,
              "content": "temperature: 0.1,",
              "isCurrent": false
            },
            {
              "line": 318,
              "content": "targetLength: 10",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
          "line": 35,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "this.geminiClient = new GeminiClient();",
          "method": "constructor",
          "class": "CharacterAnalyzer",
          "surrounding": [
            {
              "line": 33,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 34,
              "content": "constructor() {",
              "isCurrent": false
            },
            {
              "line": 35,
              "content": "this.geminiClient = new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 36,
              "content": "logger.info('CharacterAnalyzer: 初期化完了');",
              "isCurrent": false
            },
            {
              "line": 37,
              "content": "}",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\generators\\character-generator.ts",
          "line": 292,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "() => this.geminiClient.generateText(prompt, {",
          "method": "retryGenerationRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 290,
              "content": "// リトライロジックを使用してAI生成",
              "isCurrent": false
            },
            {
              "line": 291,
              "content": "const backstory = await this.retryGenerationRequest(",
              "isCurrent": false
            },
            {
              "line": 292,
              "content": "() => this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 293,
              "content": "temperature: 0.7,",
              "isCurrent": false
            },
            {
              "line": 294,
              "content": "targetLength: 1500",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\generators\\character-generator.ts",
          "line": 445,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "const result = await this.geminiClient.generateText(prompt, {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 443,
              "content": "`;",
              "isCurrent": false
            },
            {
              "line": 444,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 445,
              "content": "const result = await this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 446,
              "content": "temperature: 0.7,",
              "isCurrent": false
            },
            {
              "line": 447,
              "content": "targetLength: 50",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\generators\\character-generator.ts",
          "line": 626,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "const result = await this.geminiClient.generateText(prompt, {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 624,
              "content": "`;",
              "isCurrent": false
            },
            {
              "line": 625,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 626,
              "content": "const result = await this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 627,
              "content": "temperature: 0.7,",
              "isCurrent": false
            },
            {
              "line": 628,
              "content": "targetLength: 200",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\generators\\character-generator.ts",
          "line": 292,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "() => this.geminiClient.generateText(prompt, {",
          "method": "retryGenerationRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 290,
              "content": "// リトライロジックを使用してAI生成",
              "isCurrent": false
            },
            {
              "line": 291,
              "content": "const backstory = await this.retryGenerationRequest(",
              "isCurrent": false
            },
            {
              "line": 292,
              "content": "() => this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 293,
              "content": "temperature: 0.7,",
              "isCurrent": false
            },
            {
              "line": 294,
              "content": "targetLength: 1500",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\generators\\character-generator.ts",
          "line": 445,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const result = await this.geminiClient.generateText(prompt, {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 443,
              "content": "`;",
              "isCurrent": false
            },
            {
              "line": 444,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 445,
              "content": "const result = await this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 446,
              "content": "temperature: 0.7,",
              "isCurrent": false
            },
            {
              "line": 447,
              "content": "targetLength: 50",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\generators\\character-generator.ts",
          "line": 626,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const result = await this.geminiClient.generateText(prompt, {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 624,
              "content": "`;",
              "isCurrent": false
            },
            {
              "line": 625,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 626,
              "content": "const result = await this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 627,
              "content": "temperature: 0.7,",
              "isCurrent": false
            },
            {
              "line": 628,
              "content": "targetLength: 200",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\generators\\character-generator.ts",
          "line": 100,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "this.geminiClient = geminiClient || new GeminiClient();",
          "method": "constructor",
          "class": "CharacterGenerator",
          "surrounding": [
            {
              "line": 98,
              "content": "geminiClient?: GeminiClient",
              "isCurrent": false
            },
            {
              "line": 99,
              "content": ") {",
              "isCurrent": false
            },
            {
              "line": 100,
              "content": "this.geminiClient = geminiClient || new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 101,
              "content": "logger.info('CharacterGenerator: 統合記憶階層システム対応版で初期化完了');",
              "isCurrent": false
            },
            {
              "line": 102,
              "content": "}",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\services\\psychology-service copy 2.ts",
          "line": 71,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "AnalysisPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 69,
              "content": "// APIスロットラーを使用して制御されたリクエストを実行",
              "isCurrent": false
            },
            {
              "line": 70,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 71,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 72,
              "content": "temperature: 0.2, // 一貫性重視の低温設定",
              "isCurrent": false
            },
            {
              "line": 73,
              "content": "targetLength: 800,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\services\\psychology-service copy 2.ts",
          "line": 146,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 144,
              "content": "// APIスロットラーを使用して制御されたリクエスト実行",
              "isCurrent": false
            },
            {
              "line": 145,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 146,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 147,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 148,
              "content": "targetLength: 300,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\services\\psychology-service copy 2.ts",
          "line": 71,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "ldPsychologyAnalysisPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 69,
              "content": "// APIスロットラーを使用して制御されたリクエストを実行",
              "isCurrent": false
            },
            {
              "line": 70,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 71,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 72,
              "content": "temperature: 0.2, // 一貫性重視の低温設定",
              "isCurrent": false
            },
            {
              "line": 73,
              "content": "targetLength: 800,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\services\\psychology-service copy 2.ts",
          "line": 146,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 144,
              "content": "// APIスロットラーを使用して制御されたリクエスト実行",
              "isCurrent": false
            },
            {
              "line": 145,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 146,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 147,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 148,
              "content": "targetLength: 300,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\services\\psychology-service copy 2.ts",
          "line": 34,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "geminiClient: GeminiClient = new GeminiClient()",
          "method": "unknown",
          "class": "PsychologyService",
          "surrounding": [
            {
              "line": 32,
              "content": "constructor(",
              "isCurrent": false
            },
            {
              "line": 33,
              "content": "repository: ICharacterRepository = characterRepository,",
              "isCurrent": false
            },
            {
              "line": 34,
              "content": "geminiClient: GeminiClient = new GeminiClient()",
              "isCurrent": true
            },
            {
              "line": 35,
              "content": ") {",
              "isCurrent": false
            },
            {
              "line": 36,
              "content": "this.repository = repository;",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\services\\psychology-service copy.ts",
          "line": 71,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "AnalysisPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 69,
              "content": "// APIスロットラーを使用して制御されたリクエストを実行",
              "isCurrent": false
            },
            {
              "line": 70,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 71,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 72,
              "content": "temperature: 0.2, // 一貫性重視の低温設定",
              "isCurrent": false
            },
            {
              "line": 73,
              "content": "targetLength: 800,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\services\\psychology-service copy.ts",
          "line": 146,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 144,
              "content": "// APIスロットラーを使用して制御されたリクエスト実行",
              "isCurrent": false
            },
            {
              "line": 145,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 146,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 147,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 148,
              "content": "targetLength: 300,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\services\\psychology-service copy.ts",
          "line": 71,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "ldPsychologyAnalysisPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 69,
              "content": "// APIスロットラーを使用して制御されたリクエストを実行",
              "isCurrent": false
            },
            {
              "line": 70,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 71,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 72,
              "content": "temperature: 0.2, // 一貫性重視の低温設定",
              "isCurrent": false
            },
            {
              "line": 73,
              "content": "targetLength: 800,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\services\\psychology-service copy.ts",
          "line": 146,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, {",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 144,
              "content": "// APIスロットラーを使用して制御されたリクエスト実行",
              "isCurrent": false
            },
            {
              "line": 145,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 146,
              "content": "this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 147,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 148,
              "content": "targetLength: 300,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\services\\psychology-service copy.ts",
          "line": 34,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "geminiClient: GeminiClient = new GeminiClient()",
          "method": "unknown",
          "class": "PsychologyService",
          "surrounding": [
            {
              "line": 32,
              "content": "constructor(",
              "isCurrent": false
            },
            {
              "line": 33,
              "content": "repository: ICharacterRepository = characterRepository,",
              "isCurrent": false
            },
            {
              "line": 34,
              "content": "geminiClient: GeminiClient = new GeminiClient()",
              "isCurrent": true
            },
            {
              "line": 35,
              "content": ") {",
              "isCurrent": false
            },
            {
              "line": 36,
              "content": "this.repository = repository;",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\services\\psychology-service.ts",
          "line": 132,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "this.geminiClient = geminiClient || new GeminiClient();",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 130,
              "content": "}",
              "isCurrent": false
            },
            {
              "line": 131,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 132,
              "content": "this.geminiClient = geminiClient || new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 133,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 134,
              "content": "// 🔧 即座使用可能：基本初期化をコンストラクタで完了",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\utils\\character-utils.ts",
          "line": 159,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "const result = await geminiClient.generateText(prompt, {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 157,
              "content": "`;",
              "isCurrent": false
            },
            {
              "line": 158,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 159,
              "content": "const result = await geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 160,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 161,
              "content": "targetLength: 200",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\utils\\character-utils.ts",
          "line": 159,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const result = await geminiClient.generateText(prompt, {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 157,
              "content": "`;",
              "isCurrent": false
            },
            {
              "line": 158,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 159,
              "content": "const result = await geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 160,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 161,
              "content": "targetLength: 200",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\utils\\character-utils.ts",
          "line": 141,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "const geminiClient = new GeminiClient();",
          "method": "extractTraitsFromBackstory",
          "class": "unknown",
          "surrounding": [
            {
              "line": 139,
              "content": "export async function extractTraitsFromBackstory(backstory: string): Promise<string[]> {",
              "isCurrent": false
            },
            {
              "line": 140,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 141,
              "content": "const geminiClient = new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 142,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 143,
              "content": "// プロンプト作成",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\foreshadowing\\auto-generator.ts",
          "line": 183,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "() => this.geminiClient.generateText(prompt, {",
          "method": "retryGenerationRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 181,
              "content": "// リトライロジック付きAI生成",
              "isCurrent": false
            },
            {
              "line": 182,
              "content": "const response = await this.retryGenerationRequest(",
              "isCurrent": false
            },
            {
              "line": 183,
              "content": "() => this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 184,
              "content": "temperature: 0.7,",
              "isCurrent": false
            },
            {
              "line": 185,
              "content": "targetLength: 2000",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\foreshadowing\\auto-generator.ts",
          "line": 183,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "() => this.geminiClient.generateText(prompt, {",
          "method": "retryGenerationRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 181,
              "content": "// リトライロジック付きAI生成",
              "isCurrent": false
            },
            {
              "line": 182,
              "content": "const response = await this.retryGenerationRequest(",
              "isCurrent": false
            },
            {
              "line": 183,
              "content": "() => this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 184,
              "content": "temperature: 0.7,",
              "isCurrent": false
            },
            {
              "line": 185,
              "content": "targetLength: 2000",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\foreshadowing\\auto-generator.ts",
          "line": 112,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "this.geminiClient = geminiClient || new GeminiClient();",
          "method": "unknown",
          "class": "ForeshadowingAutoGenerator",
          "surrounding": [
            {
              "line": 110,
              "content": "}",
              "isCurrent": false
            },
            {
              "line": 111,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 112,
              "content": "this.geminiClient = geminiClient || new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 113,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 114,
              "content": "// 設定の完全検証と初期化",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\foreshadowing\\engine.ts",
          "line": 379,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "const response = await this.geminiClient.generateText(contextualPrompt, {",
          "method": "buildContextualPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 377,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 378,
              "content": "// Gemini APIによる生成",
              "isCurrent": false
            },
            {
              "line": 379,
              "content": "const response = await this.geminiClient.generateText(contextualPrompt, {",
              "isCurrent": true
            },
            {
              "line": 380,
              "content": "temperature: 0.7",
              "isCurrent": false
            },
            {
              "line": 381,
              "content": "});",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\foreshadowing\\engine.ts",
          "line": 1006,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "const response = await this.geminiClient.generateText(prompt, {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 1004,
              "content": "`;",
              "isCurrent": false
            },
            {
              "line": 1005,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 1006,
              "content": "const response = await this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 1007,
              "content": "temperature: 0.3",
              "isCurrent": false
            },
            {
              "line": 1008,
              "content": "});",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\foreshadowing\\engine.ts",
          "line": 379,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const response = await this.geminiClient.generateText(contextualPrompt, {",
          "method": "buildContextualPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 377,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 378,
              "content": "// Gemini APIによる生成",
              "isCurrent": false
            },
            {
              "line": 379,
              "content": "const response = await this.geminiClient.generateText(contextualPrompt, {",
              "isCurrent": true
            },
            {
              "line": 380,
              "content": "temperature: 0.7",
              "isCurrent": false
            },
            {
              "line": 381,
              "content": "});",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\foreshadowing\\engine.ts",
          "line": 1006,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const response = await this.geminiClient.generateText(prompt, {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 1004,
              "content": "`;",
              "isCurrent": false
            },
            {
              "line": 1005,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 1006,
              "content": "const response = await this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 1007,
              "content": "temperature: 0.3",
              "isCurrent": false
            },
            {
              "line": 1008,
              "content": "});",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\foreshadowing\\engine.ts",
          "line": 107,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "this.geminiClient = new GeminiClient();",
          "method": "unknown",
          "class": "ForeshadowingEngine",
          "surrounding": [
            {
              "line": 105,
              "content": "}",
              "isCurrent": false
            },
            {
              "line": 106,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 107,
              "content": "this.geminiClient = new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 108,
              "content": "this.validateConfiguration();",
              "isCurrent": false
            },
            {
              "line": 109,
              "content": "logger.info('ForeshadowingEngine initialized with unified memory system integration');",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\foreshadowing\\manager.ts",
          "line": 435,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "const response = await this.geminiClient.generateText(prompt, {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 433,
              "content": "`;",
              "isCurrent": false
            },
            {
              "line": 434,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 435,
              "content": "const response = await this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 436,
              "content": "temperature: 0.1",
              "isCurrent": false
            },
            {
              "line": 437,
              "content": "});",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\foreshadowing\\manager.ts",
          "line": 435,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const response = await this.geminiClient.generateText(prompt, {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 433,
              "content": "`;",
              "isCurrent": false
            },
            {
              "line": 434,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 435,
              "content": "const response = await this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 436,
              "content": "temperature: 0.1",
              "isCurrent": false
            },
            {
              "line": 437,
              "content": "});",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\foreshadowing\\manager.ts",
          "line": 111,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "this.geminiClient = new GeminiClient();",
          "method": "validateSystemDependencies",
          "class": "ForeshadowingManager",
          "surrounding": [
            {
              "line": 109,
              "content": "this.validateSystemDependencies();",
              "isCurrent": false
            },
            {
              "line": 110,
              "content": "this.engine = createForeshadowingEngine(this.memoryManager);",
              "isCurrent": false
            },
            {
              "line": 111,
              "content": "this.geminiClient = new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 112,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 113,
              "content": "logger.info('ForeshadowingManager initialized with unified memory system integration');",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\foreshadowing\\resolution-advisor.ts",
          "line": 408,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "const aiResponse = await this.geminiClient.generateText(prompt, {",
          "method": "Prompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 406,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 407,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 408,
              "content": "const aiResponse = await this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 409,
              "content": "temperature: 0.1 // 分析タスクは低温で",
              "isCurrent": false
            },
            {
              "line": 410,
              "content": "});",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\foreshadowing\\resolution-advisor.ts",
          "line": 408,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const aiResponse = await this.geminiClient.generateText(prompt, {",
          "method": "uildAnalysisPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 406,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 407,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 408,
              "content": "const aiResponse = await this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 409,
              "content": "temperature: 0.1 // 分析タスクは低温で",
              "isCurrent": false
            },
            {
              "line": 410,
              "content": "});",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\foreshadowing\\resolution-advisor.ts",
          "line": 96,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "this.geminiClient = new GeminiClient();",
          "method": "constructor",
          "class": "ForeshadowingResolutionAdvisor",
          "surrounding": [
            {
              "line": 94,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 95,
              "content": "constructor(private memoryManager: MemoryManager) {",
              "isCurrent": false
            },
            {
              "line": 96,
              "content": "this.geminiClient = new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 97,
              "content": "this.validateConfiguration();",
              "isCurrent": false
            },
            {
              "line": 98,
              "content": "this.initializeInternalState();",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine\\chapter-generator copy.ts",
          "line": 478,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(enhancedPrompt, {",
          "method": "info",
          "class": "unknown",
          "surrounding": [
            {
              "line": 476,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 477,
              "content": "const generatedText = await withTimeout(",
              "isCurrent": false
            },
            {
              "line": 478,
              "content": "this.geminiClient.generateText(enhancedPrompt, {",
              "isCurrent": true
            },
            {
              "line": 479,
              "content": "targetLength: enhancementOptions?.targetLength || params.generation.targetLength,",
              "isCurrent": false
            },
            {
              "line": 480,
              "content": "temperature: params.generation.temperature,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine\\chapter-generator copy.ts",
          "line": 478,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(enhancedPrompt, {",
          "method": "info",
          "class": "unknown",
          "surrounding": [
            {
              "line": 476,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 477,
              "content": "const generatedText = await withTimeout(",
              "isCurrent": false
            },
            {
              "line": 478,
              "content": "this.geminiClient.generateText(enhancedPrompt, {",
              "isCurrent": true
            },
            {
              "line": 479,
              "content": "targetLength: enhancementOptions?.targetLength || params.generation.targetLength,",
              "isCurrent": false
            },
            {
              "line": 480,
              "content": "temperature: params.generation.temperature,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine\\chapter-generator copy.ts",
          "line": 1048,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const apiKeyValid = await this.geminiClient.validateApiKey();",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 1046,
              "content": "}",
              "isCurrent": false
            },
            {
              "line": 1047,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 1048,
              "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
              "isCurrent": true
            },
            {
              "line": 1049,
              "content": "if (!apiKeyValid) {",
              "isCurrent": false
            },
            {
              "line": 1050,
              "content": "return {",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine\\chapter-generator.ts",
          "line": 357,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(enhancedPrompt, {",
          "method": "info",
          "class": "unknown",
          "surrounding": [
            {
              "line": 355,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 356,
              "content": "const generatedText = await withTimeout(",
              "isCurrent": false
            },
            {
              "line": 357,
              "content": "this.geminiClient.generateText(enhancedPrompt, {",
              "isCurrent": true
            },
            {
              "line": 358,
              "content": "targetLength: enhancementOptions?.targetLength || params.generation.targetLength,",
              "isCurrent": false
            },
            {
              "line": 359,
              "content": "temperature: params.generation.temperature,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine\\chapter-generator.ts",
          "line": 357,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(enhancedPrompt, {",
          "method": "info",
          "class": "unknown",
          "surrounding": [
            {
              "line": 355,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 356,
              "content": "const generatedText = await withTimeout(",
              "isCurrent": false
            },
            {
              "line": 357,
              "content": "this.geminiClient.generateText(enhancedPrompt, {",
              "isCurrent": true
            },
            {
              "line": 358,
              "content": "targetLength: enhancementOptions?.targetLength || params.generation.targetLength,",
              "isCurrent": false
            },
            {
              "line": 359,
              "content": "temperature: params.generation.temperature,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine\\chapter-generator.ts",
          "line": 914,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const apiKeyValid = await this.geminiClient.validateApiKey();",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 912,
              "content": "}",
              "isCurrent": false
            },
            {
              "line": 913,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 914,
              "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
              "isCurrent": true
            },
            {
              "line": 915,
              "content": "if (!apiKeyValid) {",
              "isCurrent": false
            },
            {
              "line": 916,
              "content": "return {",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 2.ts",
          "line": 137,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.setModelMap(params.generation.models);",
          "method": "onParameterChanged",
          "class": "unknown",
          "surrounding": [
            {
              "line": 135,
              "content": "const params = parameterManager.getParameters();",
              "isCurrent": false
            },
            {
              "line": 136,
              "content": "if (params.generation.models) {",
              "isCurrent": false
            },
            {
              "line": 137,
              "content": "this.geminiClient.setModelMap(params.generation.models);",
              "isCurrent": true
            },
            {
              "line": 138,
              "content": "logger.info('Model map initialized from parameters', { models: params.generation.models });",
              "isCurrent": false
            },
            {
              "line": 139,
              "content": "}",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 2.ts",
          "line": 163,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.setModelMap(params.generation.models);",
          "method": "if",
          "class": "unknown",
          "surrounding": [
            {
              "line": 161,
              "content": "const params = parameterManager.getParameters();",
              "isCurrent": false
            },
            {
              "line": 162,
              "content": "if (params.generation.models) {",
              "isCurrent": false
            },
            {
              "line": 163,
              "content": "this.geminiClient.setModelMap(params.generation.models);",
              "isCurrent": true
            },
            {
              "line": 164,
              "content": "logger.info('Updated model map in GeminiClient', { models: params.generation.models });",
              "isCurrent": false
            },
            {
              "line": 165,
              "content": "}",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 2.ts",
          "line": 258,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const apiKeyValid = await this.geminiClient.validateApiKey();",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 256,
              "content": "plotManagerStatus?: any;  // 追加",
              "isCurrent": false
            },
            {
              "line": 257,
              "content": "}> {",
              "isCurrent": false
            },
            {
              "line": 258,
              "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
              "isCurrent": true
            },
            {
              "line": 259,
              "content": "const modelInfo = this.geminiClient.getModelInfo();",
              "isCurrent": false
            },
            {
              "line": 260,
              "content": "const parameters = parameterManager.getParameters();",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 2.ts",
          "line": 259,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const modelInfo = this.geminiClient.getModelInfo();",
          "method": "validateApiKey",
          "class": "unknown",
          "surrounding": [
            {
              "line": 257,
              "content": "}> {",
              "isCurrent": false
            },
            {
              "line": 258,
              "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
              "isCurrent": false
            },
            {
              "line": 259,
              "content": "const modelInfo = this.geminiClient.getModelInfo();",
              "isCurrent": true
            },
            {
              "line": 260,
              "content": "const parameters = parameterManager.getParameters();",
              "isCurrent": false
            },
            {
              "line": 261,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 2.ts",
          "line": 338,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const apiKeyValid = await this.geminiClient.validateApiKey();",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 336,
              "content": "parameters: SystemParameters;",
              "isCurrent": false
            },
            {
              "line": 337,
              "content": "}> {",
              "isCurrent": false
            },
            {
              "line": 338,
              "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
              "isCurrent": true
            },
            {
              "line": 339,
              "content": "const modelInfo = this.geminiClient.getModelInfo();",
              "isCurrent": false
            },
            {
              "line": 340,
              "content": "const parameters = parameterManager.getParameters();",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 2.ts",
          "line": 339,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const modelInfo = this.geminiClient.getModelInfo();",
          "method": "validateApiKey",
          "class": "unknown",
          "surrounding": [
            {
              "line": 337,
              "content": "}> {",
              "isCurrent": false
            },
            {
              "line": 338,
              "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
              "isCurrent": false
            },
            {
              "line": 339,
              "content": "const modelInfo = this.geminiClient.getModelInfo();",
              "isCurrent": true
            },
            {
              "line": 340,
              "content": "const parameters = parameterManager.getParameters();",
              "isCurrent": false
            },
            {
              "line": 341,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 2.ts",
          "line": 39,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "this.geminiClient = new GeminiClient();",
          "method": "constructor",
          "class": "NovelGenerationEngine",
          "surrounding": [
            {
              "line": 37,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 38,
              "content": "constructor() {",
              "isCurrent": false
            },
            {
              "line": 39,
              "content": "this.geminiClient = new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 40,
              "content": "this.promptGenerator = new PromptGenerator();",
              "isCurrent": false
            },
            {
              "line": 41,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 3.ts",
          "line": 137,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.setModelMap(params.generation.models);",
          "method": "onParameterChanged",
          "class": "unknown",
          "surrounding": [
            {
              "line": 135,
              "content": "const params = parameterManager.getParameters();",
              "isCurrent": false
            },
            {
              "line": 136,
              "content": "if (params.generation.models) {",
              "isCurrent": false
            },
            {
              "line": 137,
              "content": "this.geminiClient.setModelMap(params.generation.models);",
              "isCurrent": true
            },
            {
              "line": 138,
              "content": "logger.info('Model map initialized from parameters', { models: params.generation.models });",
              "isCurrent": false
            },
            {
              "line": 139,
              "content": "}",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 3.ts",
          "line": 163,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.setModelMap(params.generation.models);",
          "method": "if",
          "class": "unknown",
          "surrounding": [
            {
              "line": 161,
              "content": "const params = parameterManager.getParameters();",
              "isCurrent": false
            },
            {
              "line": 162,
              "content": "if (params.generation.models) {",
              "isCurrent": false
            },
            {
              "line": 163,
              "content": "this.geminiClient.setModelMap(params.generation.models);",
              "isCurrent": true
            },
            {
              "line": 164,
              "content": "logger.info('Updated model map in GeminiClient', { models: params.generation.models });",
              "isCurrent": false
            },
            {
              "line": 165,
              "content": "}",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 3.ts",
          "line": 258,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const apiKeyValid = await this.geminiClient.validateApiKey();",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 256,
              "content": "plotManagerStatus?: any;  // 追加",
              "isCurrent": false
            },
            {
              "line": 257,
              "content": "}> {",
              "isCurrent": false
            },
            {
              "line": 258,
              "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
              "isCurrent": true
            },
            {
              "line": 259,
              "content": "const modelInfo = this.geminiClient.getModelInfo();",
              "isCurrent": false
            },
            {
              "line": 260,
              "content": "const parameters = parameterManager.getParameters();",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 3.ts",
          "line": 259,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const modelInfo = this.geminiClient.getModelInfo();",
          "method": "validateApiKey",
          "class": "unknown",
          "surrounding": [
            {
              "line": 257,
              "content": "}> {",
              "isCurrent": false
            },
            {
              "line": 258,
              "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
              "isCurrent": false
            },
            {
              "line": 259,
              "content": "const modelInfo = this.geminiClient.getModelInfo();",
              "isCurrent": true
            },
            {
              "line": 260,
              "content": "const parameters = parameterManager.getParameters();",
              "isCurrent": false
            },
            {
              "line": 261,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 3.ts",
          "line": 338,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const apiKeyValid = await this.geminiClient.validateApiKey();",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 336,
              "content": "parameters: SystemParameters;",
              "isCurrent": false
            },
            {
              "line": 337,
              "content": "}> {",
              "isCurrent": false
            },
            {
              "line": 338,
              "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
              "isCurrent": true
            },
            {
              "line": 339,
              "content": "const modelInfo = this.geminiClient.getModelInfo();",
              "isCurrent": false
            },
            {
              "line": 340,
              "content": "const parameters = parameterManager.getParameters();",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 3.ts",
          "line": 339,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const modelInfo = this.geminiClient.getModelInfo();",
          "method": "validateApiKey",
          "class": "unknown",
          "surrounding": [
            {
              "line": 337,
              "content": "}> {",
              "isCurrent": false
            },
            {
              "line": 338,
              "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
              "isCurrent": false
            },
            {
              "line": 339,
              "content": "const modelInfo = this.geminiClient.getModelInfo();",
              "isCurrent": true
            },
            {
              "line": 340,
              "content": "const parameters = parameterManager.getParameters();",
              "isCurrent": false
            },
            {
              "line": 341,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 3.ts",
          "line": 39,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "this.geminiClient = new GeminiClient();",
          "method": "constructor",
          "class": "NovelGenerationEngine",
          "surrounding": [
            {
              "line": 37,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 38,
              "content": "constructor() {",
              "isCurrent": false
            },
            {
              "line": 39,
              "content": "this.geminiClient = new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 40,
              "content": "this.promptGenerator = new PromptGenerator();",
              "isCurrent": false
            },
            {
              "line": 41,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 4.ts",
          "line": 71,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.setModelMap(params.generation.models);",
          "method": "onParameterChanged",
          "class": "unknown",
          "surrounding": [
            {
              "line": 69,
              "content": "const params = parameterManager.getParameters();",
              "isCurrent": false
            },
            {
              "line": 70,
              "content": "if (params.generation.models) {",
              "isCurrent": false
            },
            {
              "line": 71,
              "content": "this.geminiClient.setModelMap(params.generation.models);",
              "isCurrent": true
            },
            {
              "line": 72,
              "content": "logger.info('Model map initialized from parameters');",
              "isCurrent": false
            },
            {
              "line": 73,
              "content": "}",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 4.ts",
          "line": 91,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.setModelMap(params.generation.models);",
          "method": "if",
          "class": "unknown",
          "surrounding": [
            {
              "line": 89,
              "content": "const params = parameterManager.getParameters();",
              "isCurrent": false
            },
            {
              "line": 90,
              "content": "if (params.generation.models) {",
              "isCurrent": false
            },
            {
              "line": 91,
              "content": "this.geminiClient.setModelMap(params.generation.models);",
              "isCurrent": true
            },
            {
              "line": 92,
              "content": "logger.info('Updated model map in GeminiClient');",
              "isCurrent": false
            },
            {
              "line": 93,
              "content": "}",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 4.ts",
          "line": 106,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const apiKeyValid = await this.geminiClient.validateApiKey();",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 104,
              "content": "parameters: SystemParameters;",
              "isCurrent": false
            },
            {
              "line": 105,
              "content": "}> {",
              "isCurrent": false
            },
            {
              "line": 106,
              "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
              "isCurrent": true
            },
            {
              "line": 107,
              "content": "const modelInfo = this.geminiClient.getModelInfo();",
              "isCurrent": false
            },
            {
              "line": 108,
              "content": "const parameters = parameterManager.getParameters();",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 4.ts",
          "line": 107,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const modelInfo = this.geminiClient.getModelInfo();",
          "method": "validateApiKey",
          "class": "unknown",
          "surrounding": [
            {
              "line": 105,
              "content": "}> {",
              "isCurrent": false
            },
            {
              "line": 106,
              "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
              "isCurrent": false
            },
            {
              "line": 107,
              "content": "const modelInfo = this.geminiClient.getModelInfo();",
              "isCurrent": true
            },
            {
              "line": 108,
              "content": "const parameters = parameterManager.getParameters();",
              "isCurrent": false
            },
            {
              "line": 109,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 4.ts",
          "line": 126,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const apiKeyValid = await this.geminiClient.validateApiKey();",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 124,
              "content": "plotManagerStatus?: any;",
              "isCurrent": false
            },
            {
              "line": 125,
              "content": "}> {",
              "isCurrent": false
            },
            {
              "line": 126,
              "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
              "isCurrent": true
            },
            {
              "line": 127,
              "content": "const modelInfo = this.geminiClient.getModelInfo();",
              "isCurrent": false
            },
            {
              "line": 128,
              "content": "const parameters = parameterManager.getParameters();",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy 4.ts",
          "line": 127,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const modelInfo = this.geminiClient.getModelInfo();",
          "method": "validateApiKey",
          "class": "unknown",
          "surrounding": [
            {
              "line": 125,
              "content": "}> {",
              "isCurrent": false
            },
            {
              "line": 126,
              "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
              "isCurrent": false
            },
            {
              "line": 127,
              "content": "const modelInfo = this.geminiClient.getModelInfo();",
              "isCurrent": true
            },
            {
              "line": 128,
              "content": "const parameters = parameterManager.getParameters();",
              "isCurrent": false
            },
            {
              "line": 129,
              "content": "const plotManagerStatus = getPlotManagerStatus();",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy.ts",
          "line": 137,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.setModelMap(params.generation.models);",
          "method": "onParameterChanged",
          "class": "unknown",
          "surrounding": [
            {
              "line": 135,
              "content": "const params = parameterManager.getParameters();",
              "isCurrent": false
            },
            {
              "line": 136,
              "content": "if (params.generation.models) {",
              "isCurrent": false
            },
            {
              "line": 137,
              "content": "this.geminiClient.setModelMap(params.generation.models);",
              "isCurrent": true
            },
            {
              "line": 138,
              "content": "logger.info('Model map initialized from parameters', { models: params.generation.models });",
              "isCurrent": false
            },
            {
              "line": 139,
              "content": "}",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy.ts",
          "line": 163,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.setModelMap(params.generation.models);",
          "method": "if",
          "class": "unknown",
          "surrounding": [
            {
              "line": 161,
              "content": "const params = parameterManager.getParameters();",
              "isCurrent": false
            },
            {
              "line": 162,
              "content": "if (params.generation.models) {",
              "isCurrent": false
            },
            {
              "line": 163,
              "content": "this.geminiClient.setModelMap(params.generation.models);",
              "isCurrent": true
            },
            {
              "line": 164,
              "content": "logger.info('Updated model map in GeminiClient', { models: params.generation.models });",
              "isCurrent": false
            },
            {
              "line": 165,
              "content": "}",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy.ts",
          "line": 258,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const apiKeyValid = await this.geminiClient.validateApiKey();",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 256,
              "content": "plotManagerStatus?: any;  // 追加",
              "isCurrent": false
            },
            {
              "line": 257,
              "content": "}> {",
              "isCurrent": false
            },
            {
              "line": 258,
              "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
              "isCurrent": true
            },
            {
              "line": 259,
              "content": "const modelInfo = this.geminiClient.getModelInfo();",
              "isCurrent": false
            },
            {
              "line": 260,
              "content": "const parameters = parameterManager.getParameters();",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy.ts",
          "line": 259,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const modelInfo = this.geminiClient.getModelInfo();",
          "method": "validateApiKey",
          "class": "unknown",
          "surrounding": [
            {
              "line": 257,
              "content": "}> {",
              "isCurrent": false
            },
            {
              "line": 258,
              "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
              "isCurrent": false
            },
            {
              "line": 259,
              "content": "const modelInfo = this.geminiClient.getModelInfo();",
              "isCurrent": true
            },
            {
              "line": 260,
              "content": "const parameters = parameterManager.getParameters();",
              "isCurrent": false
            },
            {
              "line": 261,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy.ts",
          "line": 338,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const apiKeyValid = await this.geminiClient.validateApiKey();",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 336,
              "content": "parameters: SystemParameters;",
              "isCurrent": false
            },
            {
              "line": 337,
              "content": "}> {",
              "isCurrent": false
            },
            {
              "line": 338,
              "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
              "isCurrent": true
            },
            {
              "line": 339,
              "content": "const modelInfo = this.geminiClient.getModelInfo();",
              "isCurrent": false
            },
            {
              "line": 340,
              "content": "const parameters = parameterManager.getParameters();",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy.ts",
          "line": 339,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const modelInfo = this.geminiClient.getModelInfo();",
          "method": "validateApiKey",
          "class": "unknown",
          "surrounding": [
            {
              "line": 337,
              "content": "}> {",
              "isCurrent": false
            },
            {
              "line": 338,
              "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
              "isCurrent": false
            },
            {
              "line": 339,
              "content": "const modelInfo = this.geminiClient.getModelInfo();",
              "isCurrent": true
            },
            {
              "line": 340,
              "content": "const parameters = parameterManager.getParameters();",
              "isCurrent": false
            },
            {
              "line": 341,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine copy.ts",
          "line": 39,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "this.geminiClient = new GeminiClient();",
          "method": "constructor",
          "class": "NovelGenerationEngine",
          "surrounding": [
            {
              "line": 37,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 38,
              "content": "constructor() {",
              "isCurrent": false
            },
            {
              "line": 39,
              "content": "this.geminiClient = new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 40,
              "content": "this.promptGenerator = new PromptGenerator();",
              "isCurrent": false
            },
            {
              "line": 41,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine.ts",
          "line": 72,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.setModelMap(params.generation.models);",
          "method": "onParameterChanged",
          "class": "unknown",
          "surrounding": [
            {
              "line": 70,
              "content": "const params = parameterManager.getParameters();",
              "isCurrent": false
            },
            {
              "line": 71,
              "content": "if (params.generation.models) {",
              "isCurrent": false
            },
            {
              "line": 72,
              "content": "this.geminiClient.setModelMap(params.generation.models);",
              "isCurrent": true
            },
            {
              "line": 73,
              "content": "logger.info('Model map initialized from parameters');",
              "isCurrent": false
            },
            {
              "line": 74,
              "content": "}",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine.ts",
          "line": 92,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.setModelMap(params.generation.models);",
          "method": "if",
          "class": "unknown",
          "surrounding": [
            {
              "line": 90,
              "content": "const params = parameterManager.getParameters();",
              "isCurrent": false
            },
            {
              "line": 91,
              "content": "if (params.generation.models) {",
              "isCurrent": false
            },
            {
              "line": 92,
              "content": "this.geminiClient.setModelMap(params.generation.models);",
              "isCurrent": true
            },
            {
              "line": 93,
              "content": "logger.info('Updated model map in GeminiClient');",
              "isCurrent": false
            },
            {
              "line": 94,
              "content": "}",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine.ts",
          "line": 107,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const apiKeyValid = await this.geminiClient.validateApiKey();",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 105,
              "content": "parameters: SystemParameters;",
              "isCurrent": false
            },
            {
              "line": 106,
              "content": "}> {",
              "isCurrent": false
            },
            {
              "line": 107,
              "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
              "isCurrent": true
            },
            {
              "line": 108,
              "content": "const modelInfo = this.geminiClient.getModelInfo();",
              "isCurrent": false
            },
            {
              "line": 109,
              "content": "const parameters = parameterManager.getParameters();",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine.ts",
          "line": 108,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const modelInfo = this.geminiClient.getModelInfo();",
          "method": "validateApiKey",
          "class": "unknown",
          "surrounding": [
            {
              "line": 106,
              "content": "}> {",
              "isCurrent": false
            },
            {
              "line": 107,
              "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
              "isCurrent": false
            },
            {
              "line": 108,
              "content": "const modelInfo = this.geminiClient.getModelInfo();",
              "isCurrent": true
            },
            {
              "line": 109,
              "content": "const parameters = parameterManager.getParameters();",
              "isCurrent": false
            },
            {
              "line": 110,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine.ts",
          "line": 127,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const apiKeyValid = await this.geminiClient.validateApiKey();",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 125,
              "content": "plotManagerStatus?: any;",
              "isCurrent": false
            },
            {
              "line": 126,
              "content": "}> {",
              "isCurrent": false
            },
            {
              "line": 127,
              "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
              "isCurrent": true
            },
            {
              "line": 128,
              "content": "const modelInfo = this.geminiClient.getModelInfo();",
              "isCurrent": false
            },
            {
              "line": 129,
              "content": "const parameters = parameterManager.getParameters();",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\engine.ts",
          "line": 128,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const modelInfo = this.geminiClient.getModelInfo();",
          "method": "validateApiKey",
          "class": "unknown",
          "surrounding": [
            {
              "line": 126,
              "content": "}> {",
              "isCurrent": false
            },
            {
              "line": 127,
              "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
              "isCurrent": false
            },
            {
              "line": 128,
              "content": "const modelInfo = this.geminiClient.getModelInfo();",
              "isCurrent": true
            },
            {
              "line": 129,
              "content": "const parameters = parameterManager.getParameters();",
              "isCurrent": false
            },
            {
              "line": 130,
              "content": "const plotManagerStatus = getPlotManagerStatus();",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\gemini-client.ts",
          "line": 195,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "* const text = await geminiClient.generateText(\"こんにちは、世界について教えてください\");",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 193,
              "content": "* @usage",
              "isCurrent": false
            },
            {
              "line": 194,
              "content": "* // 基本的な使用方法",
              "isCurrent": false
            },
            {
              "line": 195,
              "content": "* const text = await geminiClient.generateText(\"こんにちは、世界について教えてください\");",
              "isCurrent": true
            },
            {
              "line": 196,
              "content": "*",
              "isCurrent": false
            },
            {
              "line": 197,
              "content": "* // オプション付きの使用方法",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\gemini-client.ts",
          "line": 198,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "* const text = await geminiClient.generateText(\"詳細な分析をしてください\", {",
          "method": "generateText",
          "class": "unknown",
          "surrounding": [
            {
              "line": 196,
              "content": "*",
              "isCurrent": false
            },
            {
              "line": 197,
              "content": "* // オプション付きの使用方法",
              "isCurrent": false
            },
            {
              "line": 198,
              "content": "* const text = await geminiClient.generateText(\"詳細な分析をしてください\", {",
              "isCurrent": true
            },
            {
              "line": 199,
              "content": "*   temperature: 0.5,",
              "isCurrent": false
            },
            {
              "line": 200,
              "content": "*   targetLength: 5000,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\gemini-client.ts",
          "line": 716,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "* const generatedText = await client.generateText(\"プロンプト\", {",
          "method": "setModelMap",
          "class": "unknown",
          "surrounding": [
            {
              "line": 714,
              "content": "*",
              "isCurrent": false
            },
            {
              "line": 715,
              "content": "* // 用途を指定してテキスト生成",
              "isCurrent": false
            },
            {
              "line": 716,
              "content": "* const generatedText = await client.generateText(\"プロンプト\", {",
              "isCurrent": true
            },
            {
              "line": 717,
              "content": "*   temperature: 0.7,",
              "isCurrent": false
            },
            {
              "line": 718,
              "content": "*   targetLength: 5000,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\gemini-client.ts",
          "line": 746,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "*     const story = await client.generateText(prompt, {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 744,
              "content": "*   try {",
              "isCurrent": false
            },
            {
              "line": 745,
              "content": "*     // コンテンツ生成用途を指定",
              "isCurrent": false
            },
            {
              "line": 746,
              "content": "*     const story = await client.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 747,
              "content": "*       temperature: 0.8,",
              "isCurrent": false
            },
            {
              "line": 748,
              "content": "*       targetLength: 3000,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\gemini-client.ts",
          "line": 407,
          "category": "geminiCalls",
          "pattern": "\\.generateContent\\s*\\(",
          "context": "const result = await model.generateContent({",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 405,
              "content": "});",
              "isCurrent": false
            },
            {
              "line": 406,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 407,
              "content": "const result = await model.generateContent({",
              "isCurrent": true
            },
            {
              "line": 408,
              "content": "contents: [{ role: 'user', parts: [{ text: prompt }] }],",
              "isCurrent": false
            },
            {
              "line": 409,
              "content": "});",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\gemini-client.ts",
          "line": 493,
          "category": "geminiCalls",
          "pattern": "\\.generateContent\\s*\\(",
          "context": "const result = await model.generateContent('test');",
          "method": "getGenerativeModel",
          "class": "unknown",
          "surrounding": [
            {
              "line": 491,
              "content": "// デフォルトモデルを使用",
              "isCurrent": false
            },
            {
              "line": 492,
              "content": "const model = this.client.getGenerativeModel({ model: this.defaultModel });",
              "isCurrent": false
            },
            {
              "line": 493,
              "content": "const result = await model.generateContent('test');",
              "isCurrent": true
            },
            {
              "line": 494,
              "content": "logger.info('API key validation successful');",
              "isCurrent": false
            },
            {
              "line": 495,
              "content": "return true;",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\gemini-client.ts",
          "line": 140,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "* geminiClient.setModelMap({",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 138,
              "content": "* @usage",
              "isCurrent": false
            },
            {
              "line": 139,
              "content": "* // 用途別モデルの設定",
              "isCurrent": false
            },
            {
              "line": 140,
              "content": "* geminiClient.setModelMap({",
              "isCurrent": true
            },
            {
              "line": 141,
              "content": "*   default: 'gemini-2.0-flash-lite',",
              "isCurrent": false
            },
            {
              "line": 142,
              "content": "*   summary: 'gemini-2.0-pro',",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\gemini-client.ts",
          "line": 195,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "* const text = await geminiClient.generateText(\"こんにちは、世界について教えてください\");",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 193,
              "content": "* @usage",
              "isCurrent": false
            },
            {
              "line": 194,
              "content": "* // 基本的な使用方法",
              "isCurrent": false
            },
            {
              "line": 195,
              "content": "* const text = await geminiClient.generateText(\"こんにちは、世界について教えてください\");",
              "isCurrent": true
            },
            {
              "line": 196,
              "content": "*",
              "isCurrent": false
            },
            {
              "line": 197,
              "content": "* // オプション付きの使用方法",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\gemini-client.ts",
          "line": 198,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "* const text = await geminiClient.generateText(\"詳細な分析をしてください\", {",
          "method": "generateText",
          "class": "unknown",
          "surrounding": [
            {
              "line": 196,
              "content": "*",
              "isCurrent": false
            },
            {
              "line": 197,
              "content": "* // オプション付きの使用方法",
              "isCurrent": false
            },
            {
              "line": 198,
              "content": "* const text = await geminiClient.generateText(\"詳細な分析をしてください\", {",
              "isCurrent": true
            },
            {
              "line": 199,
              "content": "*   temperature: 0.5,",
              "isCurrent": false
            },
            {
              "line": 200,
              "content": "*   targetLength: 5000,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\gemini-client.ts",
          "line": 467,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "* const isValid = await geminiClient.validateApiKey();",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 465,
              "content": "* @usage",
              "isCurrent": false
            },
            {
              "line": 466,
              "content": "* // APIキーの検証",
              "isCurrent": false
            },
            {
              "line": 467,
              "content": "* const isValid = await geminiClient.validateApiKey();",
              "isCurrent": true
            },
            {
              "line": 468,
              "content": "* if (isValid) {",
              "isCurrent": false
            },
            {
              "line": 469,
              "content": "*   console.log(\"APIキーは有効です\");",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\gemini-client.ts",
          "line": 517,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "* const info = geminiClient.getModelInfo();",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 515,
              "content": "* @usage",
              "isCurrent": false
            },
            {
              "line": 516,
              "content": "* // モデル情報の取得",
              "isCurrent": false
            },
            {
              "line": 517,
              "content": "* const info = geminiClient.getModelInfo();",
              "isCurrent": true
            },
            {
              "line": 518,
              "content": "* console.log(`デフォルトモデル: ${info.defaultModel}`);",
              "isCurrent": false
            },
            {
              "line": 519,
              "content": "* console.log(`最大再試行回数: ${info.maxRetries}`);",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\gemini-client.ts",
          "line": 66,
          "category": "geminiCalls",
          "pattern": "GeminiClient\\.",
          "context": "* アプリケーション → GeminiClient.generateText →",
          "method": "unknown",
          "class": "GeminiClient",
          "surrounding": [
            {
              "line": 64,
              "content": "*",
              "isCurrent": false
            },
            {
              "line": 65,
              "content": "* @example-flow",
              "isCurrent": false
            },
            {
              "line": 66,
              "content": "* アプリケーション → GeminiClient.generateText →",
              "isCurrent": true
            },
            {
              "line": 67,
              "content": "*   内部でのトークン計算 →",
              "isCurrent": false
            },
            {
              "line": 68,
              "content": "*   適切なモデル選択 →",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\gemini-client.ts",
          "line": 90,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "* const geminiClient = new GeminiClient();",
          "method": "unknown",
          "class": "GeminiClient",
          "surrounding": [
            {
              "line": 88,
              "content": "* @usage",
              "isCurrent": false
            },
            {
              "line": 89,
              "content": "* // 初期化方法",
              "isCurrent": false
            },
            {
              "line": 90,
              "content": "* const geminiClient = new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 91,
              "content": "*",
              "isCurrent": false
            },
            {
              "line": 92,
              "content": "* @call-flow",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\gemini-client.ts",
          "line": 706,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "* const client = new GeminiClient();",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 704,
              "content": "* import { GeminiClient } from '@/lib/generation/gemini-client';",
              "isCurrent": false
            },
            {
              "line": 705,
              "content": "*",
              "isCurrent": false
            },
            {
              "line": 706,
              "content": "* const client = new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 707,
              "content": "*",
              "isCurrent": false
            },
            {
              "line": 708,
              "content": "* // 用途別モデルマップの設定",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\gemini-client.ts",
          "line": 727,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "*   const client = new GeminiClient();",
          "method": "generateStory",
          "class": "unknown",
          "surrounding": [
            {
              "line": 725,
              "content": "*",
              "isCurrent": false
            },
            {
              "line": 726,
              "content": "* async function generateStory() {",
              "isCurrent": false
            },
            {
              "line": 727,
              "content": "*   const client = new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 728,
              "content": "*   const isValid = await client.validateApiKey();",
              "isCurrent": false
            },
            {
              "line": 729,
              "content": "*",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\learning-journey\\concept-learning-manager.ts",
          "line": 1102,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "const response = await this.geminiClient.generateText(prompt, { temperature: 0.1 });",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 1100,
              "content": "`;",
              "isCurrent": false
            },
            {
              "line": 1101,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 1102,
              "content": "const response = await this.geminiClient.generateText(prompt, { temperature: 0.1 });",
              "isCurrent": true
            },
            {
              "line": 1103,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 1104,
              "content": "// レスポンスから段階を抽出",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\learning-journey\\concept-learning-manager.ts",
          "line": 1102,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const response = await this.geminiClient.generateText(prompt, { temperature: 0.1 });",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 1100,
              "content": "`;",
              "isCurrent": false
            },
            {
              "line": 1101,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 1102,
              "content": "const response = await this.geminiClient.generateText(prompt, { temperature: 0.1 });",
              "isCurrent": true
            },
            {
              "line": 1103,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 1104,
              "content": "// レスポンスから段階を抽出",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
          "line": 1030,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "return await this.geminiClient.generateText(prompt, options);",
          "method": "executeAIAnalysis",
          "class": "unknown",
          "surrounding": [
            {
              "line": 1028,
              "content": "private async executeAIAnalysis(prompt: string, options: any): Promise<string> {",
              "isCurrent": false
            },
            {
              "line": 1029,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 1030,
              "content": "return await this.geminiClient.generateText(prompt, options);",
              "isCurrent": true
            },
            {
              "line": 1031,
              "content": "} catch (error) {",
              "isCurrent": false
            },
            {
              "line": 1032,
              "content": "logger.error('AI analysis failed', { error });",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
          "line": 1030,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "return await this.geminiClient.generateText(prompt, options);",
          "method": "executeAIAnalysis",
          "class": "unknown",
          "surrounding": [
            {
              "line": 1028,
              "content": "private async executeAIAnalysis(prompt: string, options: any): Promise<string> {",
              "isCurrent": false
            },
            {
              "line": 1029,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 1030,
              "content": "return await this.geminiClient.generateText(prompt, options);",
              "isCurrent": true
            },
            {
              "line": 1031,
              "content": "} catch (error) {",
              "isCurrent": false
            },
            {
              "line": 1032,
              "content": "logger.error('AI analysis failed', { error });",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\learning-journey\\index.ts",
          "line": 1225,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "const summary = await this.geminiClient.generateText(prompt, {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 1223,
              "content": "`;",
              "isCurrent": false
            },
            {
              "line": 1224,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 1225,
              "content": "const summary = await this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 1226,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 1227,
              "content": "targetLength: 300",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\learning-journey\\index.ts",
          "line": 1225,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const summary = await this.geminiClient.generateText(prompt, {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 1223,
              "content": "`;",
              "isCurrent": false
            },
            {
              "line": 1224,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 1225,
              "content": "const summary = await this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 1226,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 1227,
              "content": "targetLength: 300",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\lifecycle\\service-container copy 2.ts",
          "line": 193,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "return new GeminiClient();",
          "method": "import",
          "class": "unknown",
          "surrounding": [
            {
              "line": 191,
              "content": "this.register('geminiClient', async () => {",
              "isCurrent": false
            },
            {
              "line": 192,
              "content": "const { GeminiClient } = await import('@/lib/generation/gemini-client');",
              "isCurrent": false
            },
            {
              "line": 193,
              "content": "return new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 194,
              "content": "}, ServiceLifecycle.SINGLETON);",
              "isCurrent": false
            },
            {
              "line": 195,
              "content": "}",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\lifecycle\\service-container copy 3.ts",
          "line": 193,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "return new GeminiClient();",
          "method": "import",
          "class": "unknown",
          "surrounding": [
            {
              "line": 191,
              "content": "this.register('geminiClient', async () => {",
              "isCurrent": false
            },
            {
              "line": 192,
              "content": "const { GeminiClient } = await import('@/lib/generation/gemini-client');",
              "isCurrent": false
            },
            {
              "line": 193,
              "content": "return new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 194,
              "content": "}, ServiceLifecycle.SINGLETON);",
              "isCurrent": false
            },
            {
              "line": 195,
              "content": "}",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\lifecycle\\service-container copy.ts",
          "line": 184,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "return new GeminiClient();",
          "method": "import",
          "class": "unknown",
          "surrounding": [
            {
              "line": 182,
              "content": "this.register('geminiClient', async () => {",
              "isCurrent": false
            },
            {
              "line": 183,
              "content": "const { GeminiClient } = await import('@/lib/generation/gemini-client');",
              "isCurrent": false
            },
            {
              "line": 184,
              "content": "return new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 185,
              "content": "}, ServiceLifecycle.SINGLETON);",
              "isCurrent": false
            },
            {
              "line": 186,
              "content": "}",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\lifecycle\\service-container.ts",
          "line": 193,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "return new GeminiClient();",
          "method": "import",
          "class": "unknown",
          "surrounding": [
            {
              "line": 191,
              "content": "this.register('geminiClient', async () => {",
              "isCurrent": false
            },
            {
              "line": 192,
              "content": "const { GeminiClient } = await import('@/lib/generation/gemini-client');",
              "isCurrent": false
            },
            {
              "line": 193,
              "content": "return new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 194,
              "content": "}, ServiceLifecycle.SINGLETON);",
              "isCurrent": false
            },
            {
              "line": 195,
              "content": "}",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\memory\\text-analyzer-service.ts",
          "line": 335,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "const response = await this.geminiClient.generateText(prompt, {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 333,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 334,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 335,
              "content": "const response = await this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 336,
              "content": "temperature: 0.1,",
              "isCurrent": false
            },
            {
              "line": 337,
              "content": "targetLength: 500 * characterNames.length",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\memory\\text-analyzer-service.ts",
          "line": 335,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "const response = await this.geminiClient.generateText(prompt, {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 333,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 334,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 335,
              "content": "const response = await this.geminiClient.generateText(prompt, {",
              "isCurrent": true
            },
            {
              "line": 336,
              "content": "temperature: 0.1,",
              "isCurrent": false
            },
            {
              "line": 337,
              "content": "targetLength: 500 * characterNames.length",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\checker.ts",
          "line": 768,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, { temperature: 0.2 })",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 766,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 767,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 768,
              "content": "this.geminiClient.generateText(prompt, { temperature: 0.2 })",
              "isCurrent": true
            },
            {
              "line": 769,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 770,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\checker.ts",
          "line": 768,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, { temperature: 0.2 })",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 766,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 767,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 768,
              "content": "this.geminiClient.generateText(prompt, { temperature: 0.2 })",
              "isCurrent": true
            },
            {
              "line": 769,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 770,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\checker.ts",
          "line": 101,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "this.geminiClient = new GeminiClient();",
          "method": "constructor",
          "class": "PlotChecker",
          "surrounding": [
            {
              "line": 99,
              "content": "private plotManager: PlotManager",
              "isCurrent": false
            },
            {
              "line": 100,
              "content": ") {",
              "isCurrent": false
            },
            {
              "line": 101,
              "content": "this.geminiClient = new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 102,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 103,
              "content": "logger.info('PlotChecker initialized with integrated memory hierarchy system', {",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\manager copy.ts",
          "line": 181,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "this.geminiClient = new GeminiClient();",
          "method": "PlotStorage",
          "class": "unknown",
          "surrounding": [
            {
              "line": 179,
              "content": "this.plotStorage = new PlotStorage();",
              "isCurrent": false
            },
            {
              "line": 180,
              "content": "this.plotContextBuilder = new PlotContextBuilder();",
              "isCurrent": false
            },
            {
              "line": 181,
              "content": "this.geminiClient = new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 182,
              "content": "this.worldSettingsManager = new WorldSettingsManager();",
              "isCurrent": false
            },
            {
              "line": 183,
              "content": "this.phaseManager = new StoryPhaseManager();",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\manager.ts",
          "line": 193,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "this.geminiClient = new GeminiClient();",
          "method": "WorldSettingsManager",
          "class": "unknown",
          "surrounding": [
            {
              "line": 191,
              "content": "// 従来の依存注入パターン（後方互換性）",
              "isCurrent": false
            },
            {
              "line": 192,
              "content": "this.worldSettingsManager = new WorldSettingsManager();",
              "isCurrent": false
            },
            {
              "line": 193,
              "content": "this.geminiClient = new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 194,
              "content": "this.serviceContainer = null;",
              "isCurrent": false
            },
            {
              "line": 195,
              "content": "logger.info('PlotManager created with legacy dependencies');",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\index.ts",
          "line": 397,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "await this.geminiClient.generateText(testPrompt);",
          "method": "GeminiClient",
          "class": "unknown",
          "surrounding": [
            {
              "line": 395,
              "content": "const testPrompt = 'Test connection - respond with \"OK\"';",
              "isCurrent": false
            },
            {
              "line": 396,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 397,
              "content": "await this.geminiClient.generateText(testPrompt);",
              "isCurrent": true
            },
            {
              "line": 398,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 399,
              "content": "this.updateComponentStatus('geminiClient', {",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\index.ts",
          "line": 397,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "await this.geminiClient.generateText(testPrompt);",
          "method": "GeminiClient",
          "class": "unknown",
          "surrounding": [
            {
              "line": 395,
              "content": "const testPrompt = 'Test connection - respond with \"OK\"';",
              "isCurrent": false
            },
            {
              "line": 396,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 397,
              "content": "await this.geminiClient.generateText(testPrompt);",
              "isCurrent": true
            },
            {
              "line": 398,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 399,
              "content": "this.updateComponentStatus('geminiClient', {",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\index.ts",
          "line": 392,
          "category": "geminiCalls",
          "pattern": "new GeminiClient",
          "context": "this.geminiClient = new GeminiClient();",
          "method": "initializeGeminiClient",
          "class": "unknown",
          "surrounding": [
            {
              "line": 390,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 391,
              "content": "// GeminiClientは引数なしで初期化（geminiClientConfigは将来の拡張用）",
              "isCurrent": false
            },
            {
              "line": 392,
              "content": "this.geminiClient = new GeminiClient();",
              "isCurrent": true
            },
            {
              "line": 393,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 394,
              "content": "// 接続テスト（簡易）",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 632,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
          "method": "ceAnalysisPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 630,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 631,
              "content": "response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 632,
              "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "isCurrent": true
            },
            {
              "line": 633,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 634,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 671,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
          "method": "AnalysisPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 669,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 670,
              "content": "response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 671,
              "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "isCurrent": true
            },
            {
              "line": 672,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 673,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 717,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
          "method": "nalysisPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 715,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 716,
              "content": "response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 717,
              "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "isCurrent": true
            },
            {
              "line": 718,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 719,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 773,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 771,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 772,
              "content": "response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 773,
              "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "isCurrent": true
            },
            {
              "line": 774,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 775,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 632,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
          "method": "buildCoherenceAnalysisPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 630,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 631,
              "content": "response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 632,
              "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "isCurrent": true
            },
            {
              "line": 633,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 634,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 671,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
          "method": "ildObjectiveAnalysisPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 669,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 670,
              "content": "response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 671,
              "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "isCurrent": true
            },
            {
              "line": 672,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 673,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 717,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
          "method": "ldEmotionalAnalysisPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 715,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 716,
              "content": "response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 717,
              "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "isCurrent": true
            },
            {
              "line": 718,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 719,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 773,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 771,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 772,
              "content": "response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 773,
              "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "isCurrent": true
            },
            {
              "line": 774,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 775,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-designer.ts",
          "line": 165,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 163,
              "content": "// AIによる生成を実行",
              "isCurrent": false
            },
            {
              "line": 164,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 165,
              "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "isCurrent": true
            },
            {
              "line": 166,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 167,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-designer.ts",
          "line": 264,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 262,
              "content": "// AIによる生成を実行",
              "isCurrent": false
            },
            {
              "line": 263,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 264,
              "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "isCurrent": true
            },
            {
              "line": 265,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 266,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-designer.ts",
          "line": 349,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 347,
              "content": "// AIによる生成を実行",
              "isCurrent": false
            },
            {
              "line": 348,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 349,
              "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "isCurrent": true
            },
            {
              "line": 350,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 351,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-designer.ts",
          "line": 442,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 440,
              "content": "// AIによる生成を実行",
              "isCurrent": false
            },
            {
              "line": 441,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 442,
              "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "isCurrent": true
            },
            {
              "line": 443,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 444,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-designer.ts",
          "line": 685,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 683,
              "content": "// AIによる生成を実行",
              "isCurrent": false
            },
            {
              "line": 684,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 685,
              "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "isCurrent": true
            },
            {
              "line": 686,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 687,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-designer.ts",
          "line": 853,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 851,
              "content": "// AIによる生成を実行",
              "isCurrent": false
            },
            {
              "line": 852,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 853,
              "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "isCurrent": true
            },
            {
              "line": 854,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 855,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-designer.ts",
          "line": 1005,
          "category": "geminiCalls",
          "pattern": "\\.generateText\\s*\\(",
          "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 1003,
              "content": "// AIによる生成を実行",
              "isCurrent": false
            },
            {
              "line": 1004,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 1005,
              "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "isCurrent": true
            },
            {
              "line": 1006,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 1007,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-designer.ts",
          "line": 165,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 163,
              "content": "// AIによる生成を実行",
              "isCurrent": false
            },
            {
              "line": 164,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 165,
              "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "isCurrent": true
            },
            {
              "line": 166,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 167,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-designer.ts",
          "line": 264,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 262,
              "content": "// AIによる生成を実行",
              "isCurrent": false
            },
            {
              "line": 263,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 264,
              "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "isCurrent": true
            },
            {
              "line": 265,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 266,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-designer.ts",
          "line": 349,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 347,
              "content": "// AIによる生成を実行",
              "isCurrent": false
            },
            {
              "line": 348,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 349,
              "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "isCurrent": true
            },
            {
              "line": 350,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 351,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-designer.ts",
          "line": 442,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 440,
              "content": "// AIによる生成を実行",
              "isCurrent": false
            },
            {
              "line": 441,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 442,
              "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "isCurrent": true
            },
            {
              "line": 443,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 444,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-designer.ts",
          "line": 685,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 683,
              "content": "// AIによる生成を実行",
              "isCurrent": false
            },
            {
              "line": 684,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 685,
              "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "isCurrent": true
            },
            {
              "line": 686,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 687,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-designer.ts",
          "line": 853,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 851,
              "content": "// AIによる生成を実行",
              "isCurrent": false
            },
            {
              "line": 852,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 853,
              "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "isCurrent": true
            },
            {
              "line": 854,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 855,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-designer.ts",
          "line": 1005,
          "category": "geminiCalls",
          "pattern": "geminiClient\\.",
          "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
          "method": "throttledRequest",
          "class": "unknown",
          "surrounding": [
            {
              "line": 1003,
              "content": "// AIによる生成を実行",
              "isCurrent": false
            },
            {
              "line": 1004,
              "content": "const response = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 1005,
              "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
              "isCurrent": true
            },
            {
              "line": 1006,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 1007,
              "content": "",
              "isCurrent": false
            }
          ]
        }
      ],
      "templateUsage": [
        {
          "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
          "line": 256,
          "category": "templateUsage",
          "pattern": "getTemplate",
          "context": "getTemplatePrompt(templateName: string): string {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 254,
              "content": "* @returns {string} プロンプトテンプレート",
              "isCurrent": false
            },
            {
              "line": 255,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 256,
              "content": "getTemplatePrompt(templateName: string): string {",
              "isCurrent": true
            },
            {
              "line": 257,
              "content": "// テンプレート名に基づいてプロンプトを返す",
              "isCurrent": false
            },
            {
              "line": 258,
              "content": "switch (templateName) {",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\adapters\\interfaces.ts",
          "line": 83,
          "category": "templateUsage",
          "pattern": "getTemplate",
          "context": "getTemplatePrompt(templateName: string): string;",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 81,
              "content": "* @returns プロンプトテンプレート",
              "isCurrent": false
            },
            {
              "line": 82,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 83,
              "content": "getTemplatePrompt(templateName: string): string;",
              "isCurrent": true
            },
            {
              "line": 84,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 85,
              "content": "/**",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\core\\interfaces.ts",
          "line": 741,
          "category": "templateUsage",
          "pattern": "getTemplate",
          "context": "getTemplateById(id: string): Promise<CharacterTemplate>;",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 739,
              "content": "* @returns キャラクターテンプレート",
              "isCurrent": false
            },
            {
              "line": 740,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 741,
              "content": "getTemplateById(id: string): Promise<CharacterTemplate>;",
              "isCurrent": true
            },
            {
              "line": 742,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 743,
              "content": "/**",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\generators\\template-provider.ts",
          "line": 73,
          "category": "templateUsage",
          "pattern": "getTemplate",
          "context": "async getTemplateById(id: string): Promise<CharacterTemplate> {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 71,
              "content": "* @returns キャラクターテンプレート",
              "isCurrent": false
            },
            {
              "line": 72,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 73,
              "content": "async getTemplateById(id: string): Promise<CharacterTemplate> {",
              "isCurrent": true
            },
            {
              "line": 74,
              "content": "// キャッシュの更新確認",
              "isCurrent": false
            },
            {
              "line": 75,
              "content": "await this.checkCacheRefresh();",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\generators\\template-provider.ts",
          "line": 117,
          "category": "templateUsage",
          "pattern": "getTemplate",
          "context": "const archetype = await this.getTemplateById(archetypeId);",
          "method": "combineTemplates",
          "class": "unknown",
          "surrounding": [
            {
              "line": 115,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 116,
              "content": "async combineTemplates(archetypeId: string, roleId: string): Promise<CharacterTemplate> {",
              "isCurrent": false
            },
            {
              "line": 117,
              "content": "const archetype = await this.getTemplateById(archetypeId);",
              "isCurrent": true
            },
            {
              "line": 118,
              "content": "const role = await this.getTemplateById(roleId);",
              "isCurrent": false
            },
            {
              "line": 119,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\generators\\template-provider.ts",
          "line": 118,
          "category": "templateUsage",
          "pattern": "getTemplate",
          "context": "const role = await this.getTemplateById(roleId);",
          "method": "combineTemplates",
          "class": "unknown",
          "surrounding": [
            {
              "line": 116,
              "content": "async combineTemplates(archetypeId: string, roleId: string): Promise<CharacterTemplate> {",
              "isCurrent": false
            },
            {
              "line": 117,
              "content": "const archetype = await this.getTemplateById(archetypeId);",
              "isCurrent": false
            },
            {
              "line": 118,
              "content": "const role = await this.getTemplateById(roleId);",
              "isCurrent": true
            },
            {
              "line": 119,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 120,
              "content": "// テンプレートを組み合わせる",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\generators\\template-provider.ts",
          "line": 170,
          "category": "templateUsage",
          "pattern": "getTemplate",
          "context": "return this.getTemplatesFromDirectory(this.TEMPLATE_DIRS.archetypes);",
          "method": "getArchetypeTemplates",
          "class": "unknown",
          "surrounding": [
            {
              "line": 168,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 169,
              "content": "async getArchetypeTemplates(): Promise<CharacterTemplate[]> {",
              "isCurrent": false
            },
            {
              "line": 170,
              "content": "return this.getTemplatesFromDirectory(this.TEMPLATE_DIRS.archetypes);",
              "isCurrent": true
            },
            {
              "line": 171,
              "content": "}",
              "isCurrent": false
            },
            {
              "line": 172,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\generators\\template-provider.ts",
          "line": 178,
          "category": "templateUsage",
          "pattern": "getTemplate",
          "context": "return this.getTemplatesFromDirectory(this.TEMPLATE_DIRS.roles);",
          "method": "getRoleTemplates",
          "class": "unknown",
          "surrounding": [
            {
              "line": 176,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 177,
              "content": "async getRoleTemplates(): Promise<CharacterTemplate[]> {",
              "isCurrent": false
            },
            {
              "line": 178,
              "content": "return this.getTemplatesFromDirectory(this.TEMPLATE_DIRS.roles);",
              "isCurrent": true
            },
            {
              "line": 179,
              "content": "}",
              "isCurrent": false
            },
            {
              "line": 180,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\generators\\template-provider.ts",
          "line": 203,
          "category": "templateUsage",
          "pattern": "getTemplate",
          "context": "const archetypes = await this.getTemplatesFromDirectory(this.TEMPLATE_DIRS.archetypes);",
          "method": "updateTemplateCache",
          "class": "unknown",
          "surrounding": [
            {
              "line": 201,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 202,
              "content": "// キャッシュに追加（アーキタイプとロール）",
              "isCurrent": false
            },
            {
              "line": 203,
              "content": "const archetypes = await this.getTemplatesFromDirectory(this.TEMPLATE_DIRS.archetypes);",
              "isCurrent": true
            },
            {
              "line": 204,
              "content": "const roles = await this.getTemplatesFromDirectory(this.TEMPLATE_DIRS.roles);",
              "isCurrent": false
            },
            {
              "line": 205,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\generators\\template-provider.ts",
          "line": 204,
          "category": "templateUsage",
          "pattern": "getTemplate",
          "context": "const roles = await this.getTemplatesFromDirectory(this.TEMPLATE_DIRS.roles);",
          "method": "debug",
          "class": "unknown",
          "surrounding": [
            {
              "line": 202,
              "content": "// キャッシュに追加（アーキタイプとロール）",
              "isCurrent": false
            },
            {
              "line": 203,
              "content": "const archetypes = await this.getTemplatesFromDirectory(this.TEMPLATE_DIRS.archetypes);",
              "isCurrent": false
            },
            {
              "line": 204,
              "content": "const roles = await this.getTemplatesFromDirectory(this.TEMPLATE_DIRS.roles);",
              "isCurrent": true
            },
            {
              "line": 205,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 206,
              "content": "// キャッシュを更新",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\characters\\generators\\template-provider.ts",
          "line": 224,
          "category": "templateUsage",
          "pattern": "getTemplate",
          "context": "private async getTemplatesFromDirectory(directory: string): Promise<CharacterTemplate[]> {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 222,
              "content": "* @returns テンプレートの配列",
              "isCurrent": false
            },
            {
              "line": 223,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 224,
              "content": "private async getTemplatesFromDirectory(directory: string): Promise<CharacterTemplate[]> {",
              "isCurrent": true
            },
            {
              "line": 225,
              "content": "const templates: CharacterTemplate[] = [];",
              "isCurrent": false
            },
            {
              "line": 226,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\prompt\\template-manager.ts",
          "line": 51,
          "category": "templateUsage",
          "pattern": "getTemplate",
          "context": "public getTemplate(key: string, subKey?: string): string {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 49,
              "content": "* @returns {string} テンプレート文字列",
              "isCurrent": false
            },
            {
              "line": 50,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 51,
              "content": "public getTemplate(key: string, subKey?: string): string {",
              "isCurrent": true
            },
            {
              "line": 52,
              "content": "if (!this.isLoaded) {",
              "isCurrent": false
            },
            {
              "line": 53,
              "content": "logger.warn('Templates are not loaded yet. Returning empty string.');",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\prompt\\template-manager.ts",
          "line": 270,
          "category": "templateUsage",
          "pattern": "getTemplate",
          "context": "return this.getTemplate('businessChapterTypes', chapterType) ||",
          "method": "getChapterTypeInstructions",
          "class": "unknown",
          "surrounding": [
            {
              "line": 268,
              "content": "// ビジネスジャンルの場合",
              "isCurrent": false
            },
            {
              "line": 269,
              "content": "if (genre.toLowerCase() === 'business') {",
              "isCurrent": false
            },
            {
              "line": 270,
              "content": "return this.getTemplate('businessChapterTypes', chapterType) ||",
              "isCurrent": true
            },
            {
              "line": 271,
              "content": "this.getTemplate('businessChapterTypes', 'BUSINESS_CHALLENGE');",
              "isCurrent": false
            },
            {
              "line": 272,
              "content": "}",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\prompt\\template-manager.ts",
          "line": 271,
          "category": "templateUsage",
          "pattern": "getTemplate",
          "context": "this.getTemplate('businessChapterTypes', 'BUSINESS_CHALLENGE');",
          "method": "s",
          "class": "unknown",
          "surrounding": [
            {
              "line": 269,
              "content": "if (genre.toLowerCase() === 'business') {",
              "isCurrent": false
            },
            {
              "line": 270,
              "content": "return this.getTemplate('businessChapterTypes', chapterType) ||",
              "isCurrent": false
            },
            {
              "line": 271,
              "content": "this.getTemplate('businessChapterTypes', 'BUSINESS_CHALLENGE');",
              "isCurrent": true
            },
            {
              "line": 272,
              "content": "}",
              "isCurrent": false
            },
            {
              "line": 273,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\prompt\\template-manager.ts",
          "line": 275,
          "category": "templateUsage",
          "pattern": "getTemplate",
          "context": "return this.getTemplate('chapterTypes', chapterType) ||",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 273,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 274,
              "content": "// 一般的な章タイプ",
              "isCurrent": false
            },
            {
              "line": 275,
              "content": "return this.getTemplate('chapterTypes', chapterType) ||",
              "isCurrent": true
            },
            {
              "line": 276,
              "content": "this.getTemplate('chapterTypes', 'STANDARD');",
              "isCurrent": false
            },
            {
              "line": 277,
              "content": "}",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\prompt\\template-manager.ts",
          "line": 276,
          "category": "templateUsage",
          "pattern": "getTemplate",
          "context": "this.getTemplate('chapterTypes', 'STANDARD');",
          "method": "getTemplate",
          "class": "unknown",
          "surrounding": [
            {
              "line": 274,
              "content": "// 一般的な章タイプ",
              "isCurrent": false
            },
            {
              "line": 275,
              "content": "return this.getTemplate('chapterTypes', chapterType) ||",
              "isCurrent": false
            },
            {
              "line": 276,
              "content": "this.getTemplate('chapterTypes', 'STANDARD');",
              "isCurrent": true
            },
            {
              "line": 277,
              "content": "}",
              "isCurrent": false
            },
            {
              "line": 278,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\prompt\\template-manager.ts",
          "line": 285,
          "category": "templateUsage",
          "pattern": "getTemplate",
          "context": "return this.getTemplate('genreGuidance', genre.toLowerCase()) || '';",
          "method": "getGenreGuidance",
          "class": "unknown",
          "surrounding": [
            {
              "line": 283,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 284,
              "content": "public getGenreGuidance(genre: string): string {",
              "isCurrent": false
            },
            {
              "line": 285,
              "content": "return this.getTemplate('genreGuidance', genre.toLowerCase()) || '';",
              "isCurrent": true
            },
            {
              "line": 286,
              "content": "}",
              "isCurrent": false
            },
            {
              "line": 287,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\prompt\\template-manager.ts",
          "line": 294,
          "category": "templateUsage",
          "pattern": "getTemplate",
          "context": "return this.getTemplate('businessSpecificSections', sectionType) || '';",
          "method": "getBusinessSpecificSection",
          "class": "unknown",
          "surrounding": [
            {
              "line": 292,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 293,
              "content": "public getBusinessSpecificSection(sectionType: string): string {",
              "isCurrent": false
            },
            {
              "line": 294,
              "content": "return this.getTemplate('businessSpecificSections', sectionType) || '';",
              "isCurrent": true
            },
            {
              "line": 295,
              "content": "}",
              "isCurrent": false
            },
            {
              "line": 296,
              "content": "",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\prompt\\template-manager.ts",
          "line": 309,
          "category": "templateUsage",
          "pattern": "getTemplate",
          "context": "const stateTemplates = this.getTemplate('narrativeStates', state);",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 307,
              "content": ": (lowerGenre === 'business' ? 'business' : 'default');",
              "isCurrent": false
            },
            {
              "line": 308,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 309,
              "content": "const stateTemplates = this.getTemplate('narrativeStates', state);",
              "isCurrent": true
            },
            {
              "line": 310,
              "content": "if (stateTemplates && typeof stateTemplates === 'object' && genreKey in stateTemplates) {",
              "isCurrent": false
            },
            {
              "line": 311,
              "content": "return stateTemplates[genreKey as keyof typeof stateTemplates] as string;",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\generation\\prompt\\template-manager.ts",
          "line": 314,
          "category": "templateUsage",
          "pattern": "getTemplate",
          "context": "const defaultTemplates = this.getTemplate('narrativeStates', 'DEFAULT');",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 312,
              "content": "}",
              "isCurrent": false
            },
            {
              "line": 313,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 314,
              "content": "const defaultTemplates = this.getTemplate('narrativeStates', 'DEFAULT');",
              "isCurrent": true
            },
            {
              "line": 315,
              "content": "if (defaultTemplates && typeof defaultTemplates === 'object') {",
              "isCurrent": false
            },
            {
              "line": 316,
              "content": "return defaultTemplates[genreKey as keyof typeof defaultTemplates] as string || '';",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\memory\\short-term\\temporary-analysis.ts",
          "line": 480,
          "category": "templateUsage",
          "pattern": "getTemplate",
          "context": "getTemplateProcessingState(templateId: string): TemplateProcessingState | null {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 478,
              "content": "* テンプレート処理状態を取得",
              "isCurrent": false
            },
            {
              "line": 479,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 480,
              "content": "getTemplateProcessingState(templateId: string): TemplateProcessingState | null {",
              "isCurrent": true
            },
            {
              "line": 481,
              "content": "return this.templateProcessing.get(templateId) || null;",
              "isCurrent": false
            },
            {
              "line": 482,
              "content": "}",
              "isCurrent": false
            }
          ]
        }
      ],
      "aiAnalysis": [
        {
          "file": "src\\lib\\analysis\\enhancement\\style\\interfaces.ts",
          "line": 136,
          "category": "aiAnalysis",
          "pattern": "AI.*Analysis",
          "context": "useAIAnalysis?: boolean;",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 134,
              "content": "export interface StyleOptimizationOptions {",
              "isCurrent": false
            },
            {
              "line": 135,
              "content": "/** AI分析を使用するかどうか */",
              "isCurrent": false
            },
            {
              "line": 136,
              "content": "useAIAnalysis?: boolean;",
              "isCurrent": true
            },
            {
              "line": 137,
              "content": "/** 詳細レベル（1-3、高いほど詳細） */",
              "isCurrent": false
            },
            {
              "line": 138,
              "content": "detailLevel?: number;",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
          "line": 149,
          "category": "aiAnalysis",
          "pattern": "AI.*Analysis",
          "context": "this.generateStyleGuidanceWithAI(styleAnalysis, context, chapterNumber)",
          "method": "analyzeStyle",
          "class": "unknown",
          "surrounding": [
            {
              "line": 147,
              "content": "// 正しい引数で AI ガイダンスを生成",
              "isCurrent": false
            },
            {
              "line": 148,
              "content": "guidance = await apiThrottler.throttledRequest(() =>",
              "isCurrent": false
            },
            {
              "line": 149,
              "content": "this.generateStyleGuidanceWithAI(styleAnalysis, context, chapterNumber)",
              "isCurrent": true
            },
            {
              "line": 150,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 151,
              "content": "} else {",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
          "line": 818,
          "category": "aiAnalysis",
          "pattern": "AI.*Analysis",
          "context": "const recommendations = await this.generateStructureRecommendationsWithAI(styleAnalysis, context);",
          "method": "info",
          "class": "unknown",
          "surrounding": [
            {
              "line": 816,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 817,
              "content": "// AIを使用した改善提案生成",
              "isCurrent": false
            },
            {
              "line": 818,
              "content": "const recommendations = await this.generateStructureRecommendationsWithAI(styleAnalysis, context);",
              "isCurrent": true
            },
            {
              "line": 819,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 820,
              "content": "// キャッシュに保存",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts",
          "line": 131,
          "category": "aiAnalysis",
          "pattern": "AI.*Analysis",
          "context": "const parsedResponse = JsonParser.parseFromAIResponse(response, defaultAnalysis);",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 129,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 130,
              "content": "// JsonParserを使用して安全にパース",
              "isCurrent": false
            },
            {
              "line": 131,
              "content": "const parsedResponse = JsonParser.parseFromAIResponse(response, defaultAnalysis);",
              "isCurrent": true
            },
            {
              "line": 132,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 133,
              "content": "// レスポンスの検証と正規化",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
          "line": 754,
          "category": "aiAnalysis",
          "pattern": "AI.*Analysis",
          "context": "private async analyzeStyleWithAI(content: string): Promise<Partial<StyleAnalysis>> {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 752,
              "content": "* @returns AIによる文体分析結果",
              "isCurrent": false
            },
            {
              "line": 753,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 754,
              "content": "private async analyzeStyleWithAI(content: string): Promise<Partial<StyleAnalysis>> {",
              "isCurrent": true
            },
            {
              "line": 755,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 756,
              "content": "// テキストが長すぎる場合は適切な長さに切り詰める",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
          "line": 801,
          "category": "aiAnalysis",
          "pattern": "AI.*Analysis",
          "context": "return JsonParser.parseFromAIResponse<Partial<StyleAnalysis>>(response, defaultResponse);",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 799,
              "content": "};",
              "isCurrent": false
            },
            {
              "line": 800,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 801,
              "content": "return JsonParser.parseFromAIResponse<Partial<StyleAnalysis>>(response, defaultResponse);",
              "isCurrent": true
            },
            {
              "line": 802,
              "content": "} catch (error) {",
              "isCurrent": false
            },
            {
              "line": 803,
              "content": "logger.warn('StyleAnalysisService: AI文体分析中にエラーが発生', {",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "line": 176,
          "category": "aiAnalysis",
          "pattern": "AI.*Analysis",
          "context": "const analysis = JsonParser.parseFromAIResponse<ThemeResonanceAnalysis>(",
          "method": "createFallbackAnalysis",
          "class": "unknown",
          "surrounding": [
            {
              "line": 174,
              "content": "// JSONパース",
              "isCurrent": false
            },
            {
              "line": 175,
              "content": "const defaultAnalysis = this.createFallbackAnalysis(effectiveThemes);",
              "isCurrent": false
            },
            {
              "line": 176,
              "content": "const analysis = JsonParser.parseFromAIResponse<ThemeResonanceAnalysis>(",
              "isCurrent": true
            },
            {
              "line": 177,
              "content": "response,",
              "isCurrent": false
            },
            {
              "line": 178,
              "content": "defaultAnalysis",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "line": 619,
          "category": "aiAnalysis",
          "pattern": "AI.*Analysis",
          "context": "const analysis = JsonParser.parseFromAIResponse<SymbolismAnalysis>(response, defaultAnalysis);",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 617,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 618,
              "content": "// レスポンスを解析",
              "isCurrent": false
            },
            {
              "line": 619,
              "content": "const analysis = JsonParser.parseFromAIResponse<SymbolismAnalysis>(response, defaultAnalysis);",
              "isCurrent": true
            },
            {
              "line": 620,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 621,
              "content": "// 結果の検証と修正",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "line": 731,
          "category": "aiAnalysis",
          "pattern": "AI.*Analysis",
          "context": "const analysis = JsonParser.parseFromAIResponse<ThemeConsistencyAnalysis>(response, defaultAnalysis);",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 729,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 730,
              "content": "// レスポンスを解析",
              "isCurrent": false
            },
            {
              "line": 731,
              "content": "const analysis = JsonParser.parseFromAIResponse<ThemeConsistencyAnalysis>(response, defaultAnalysis);",
              "isCurrent": true
            },
            {
              "line": 732,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 733,
              "content": "// 結果の検証と修正",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
          "line": 461,
          "category": "aiAnalysis",
          "pattern": "AI.*Analysis",
          "context": "const response = await this.executeAIAnalysis(prompt, {",
          "method": "createSynchronizationPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 459,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 460,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 461,
              "content": "const response = await this.executeAIAnalysis(prompt, {",
              "isCurrent": true
            },
            {
              "line": 462,
              "content": "temperature: 0.1,",
              "isCurrent": false
            },
            {
              "line": 463,
              "content": "responseFormat: 'json'",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
          "line": 543,
          "category": "aiAnalysis",
          "pattern": "AI.*Analysis",
          "context": "const response = await this.executeAIAnalysis(prompt, {",
          "method": "createEmpatheticPointsPrompt",
          "class": "unknown",
          "surrounding": [
            {
              "line": 541,
              "content": ");",
              "isCurrent": false
            },
            {
              "line": 542,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 543,
              "content": "const response = await this.executeAIAnalysis(prompt, {",
              "isCurrent": true
            },
            {
              "line": 544,
              "content": "temperature: 0.3,",
              "isCurrent": false
            },
            {
              "line": 545,
              "content": "responseFormat: 'json'",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
          "line": 605,
          "category": "aiAnalysis",
          "pattern": "AI.*Analysis",
          "context": "const response = await this.executeAIAnalysis(prompt, {",
          "method": "safeContentTruncation",
          "class": "unknown",
          "surrounding": [
            {
              "line": 603,
              "content": "const prompt = this.createEmotionAnalysisPrompt(truncatedContent, genre);",
              "isCurrent": false
            },
            {
              "line": 604,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 605,
              "content": "const response = await this.executeAIAnalysis(prompt, {",
              "isCurrent": true
            },
            {
              "line": 606,
              "content": "temperature: 0.1,",
              "isCurrent": false
            },
            {
              "line": 607,
              "content": "responseFormat: 'json'",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
          "line": 1028,
          "category": "aiAnalysis",
          "pattern": "AI.*Analysis",
          "context": "private async executeAIAnalysis(prompt: string, options: any): Promise<string> {",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 1026,
              "content": "* @private",
              "isCurrent": false
            },
            {
              "line": 1027,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 1028,
              "content": "private async executeAIAnalysis(prompt: string, options: any): Promise<string> {",
              "isCurrent": true
            },
            {
              "line": 1029,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 1030,
              "content": "return await this.geminiClient.generateText(prompt, options);",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 138,
          "category": "aiAnalysis",
          "pattern": "AI.*Analysis",
          "context": "const aiAnalysisResult = await this.performAICoherenceAnalysis(",
          "method": "getUnifiedMemoryContext",
          "class": "unknown",
          "surrounding": [
            {
              "line": 136,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 137,
              "content": "// AIによる一貫性分析",
              "isCurrent": false
            },
            {
              "line": 138,
              "content": "const aiAnalysisResult = await this.performAICoherenceAnalysis(",
              "isCurrent": true
            },
            {
              "line": 139,
              "content": "section,",
              "isCurrent": false
            },
            {
              "line": 140,
              "content": "chapters,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 201,
          "category": "aiAnalysis",
          "pattern": "AI.*Analysis",
          "context": "const aiAnalysisResult = await this.performAIObjectiveAnalysis(",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 199,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 200,
              "content": "// AIによる学習目標達成度分析",
              "isCurrent": false
            },
            {
              "line": 201,
              "content": "const aiAnalysisResult = await this.performAIObjectiveAnalysis(",
              "isCurrent": true
            },
            {
              "line": 202,
              "content": "section,",
              "isCurrent": false
            },
            {
              "line": 203,
              "content": "chapters,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 276,
          "category": "aiAnalysis",
          "pattern": "AI.*Analysis",
          "context": "const aiAnalysisResult = await this.performAIEmotionalAnalysis(",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 274,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 275,
              "content": "// AIによる感情アーク実現度分析",
              "isCurrent": false
            },
            {
              "line": 276,
              "content": "const aiAnalysisResult = await this.performAIEmotionalAnalysis(",
              "isCurrent": true
            },
            {
              "line": 277,
              "content": "section,",
              "isCurrent": false
            },
            {
              "line": 278,
              "content": "chapters,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 354,
          "category": "aiAnalysis",
          "pattern": "AI.*Analysis",
          "context": "const aiSuggestions = await this.performAIImprovementAnalysis(",
          "method": "getImprovementContextFromMemory",
          "class": "unknown",
          "surrounding": [
            {
              "line": 352,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 353,
              "content": "// AIによる改善提案の生成",
              "isCurrent": false
            },
            {
              "line": 354,
              "content": "const aiSuggestions = await this.performAIImprovementAnalysis(",
              "isCurrent": true
            },
            {
              "line": 355,
              "content": "section,",
              "isCurrent": false
            },
            {
              "line": 356,
              "content": "coherenceAnalysis,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 622,
          "category": "aiAnalysis",
          "pattern": "AI.*Analysis",
          "context": "private async performAICoherenceAnalysis(",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 620,
              "content": "* AI一貫性分析を実行",
              "isCurrent": false
            },
            {
              "line": 621,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 622,
              "content": "private async performAICoherenceAnalysis(",
              "isCurrent": true
            },
            {
              "line": 623,
              "content": "section: SectionPlot,",
              "isCurrent": false
            },
            {
              "line": 624,
              "content": "chapters: Array<{ chapterNumber: number; title: string; content: string }>,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 661,
          "category": "aiAnalysis",
          "pattern": "AI.*Analysis",
          "context": "private async performAIObjectiveAnalysis(",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 659,
              "content": "* AI目標分析を実行",
              "isCurrent": false
            },
            {
              "line": 660,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 661,
              "content": "private async performAIObjectiveAnalysis(",
              "isCurrent": true
            },
            {
              "line": 662,
              "content": "section: SectionPlot,",
              "isCurrent": false
            },
            {
              "line": 663,
              "content": "chapters: Array<{ chapterNumber: number; title: string; content: string }>,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 707,
          "category": "aiAnalysis",
          "pattern": "AI.*Analysis",
          "context": "private async performAIEmotionalAnalysis(",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 705,
              "content": "* AI感情分析を実行",
              "isCurrent": false
            },
            {
              "line": 706,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 707,
              "content": "private async performAIEmotionalAnalysis(",
              "isCurrent": true
            },
            {
              "line": 708,
              "content": "section: SectionPlot,",
              "isCurrent": false
            },
            {
              "line": 709,
              "content": "chapters: Array<{ chapterNumber: number; title: string; content: string }>,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 755,
          "category": "aiAnalysis",
          "pattern": "AI.*Analysis",
          "context": "private async performAIImprovementAnalysis(",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 753,
              "content": "* AI改善分析を実行",
              "isCurrent": false
            },
            {
              "line": 754,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 755,
              "content": "private async performAIImprovementAnalysis(",
              "isCurrent": true
            },
            {
              "line": 756,
              "content": "section: SectionPlot,",
              "isCurrent": false
            },
            {
              "line": 757,
              "content": "coherenceAnalysis: CoherenceAnalysis,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 138,
          "category": "aiAnalysis",
          "pattern": "performAI.*Analysis",
          "context": "const aiAnalysisResult = await this.performAICoherenceAnalysis(",
          "method": "getUnifiedMemoryContext",
          "class": "unknown",
          "surrounding": [
            {
              "line": 136,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 137,
              "content": "// AIによる一貫性分析",
              "isCurrent": false
            },
            {
              "line": 138,
              "content": "const aiAnalysisResult = await this.performAICoherenceAnalysis(",
              "isCurrent": true
            },
            {
              "line": 139,
              "content": "section,",
              "isCurrent": false
            },
            {
              "line": 140,
              "content": "chapters,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 201,
          "category": "aiAnalysis",
          "pattern": "performAI.*Analysis",
          "context": "const aiAnalysisResult = await this.performAIObjectiveAnalysis(",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 199,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 200,
              "content": "// AIによる学習目標達成度分析",
              "isCurrent": false
            },
            {
              "line": 201,
              "content": "const aiAnalysisResult = await this.performAIObjectiveAnalysis(",
              "isCurrent": true
            },
            {
              "line": 202,
              "content": "section,",
              "isCurrent": false
            },
            {
              "line": 203,
              "content": "chapters,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 276,
          "category": "aiAnalysis",
          "pattern": "performAI.*Analysis",
          "context": "const aiAnalysisResult = await this.performAIEmotionalAnalysis(",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 274,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 275,
              "content": "// AIによる感情アーク実現度分析",
              "isCurrent": false
            },
            {
              "line": 276,
              "content": "const aiAnalysisResult = await this.performAIEmotionalAnalysis(",
              "isCurrent": true
            },
            {
              "line": 277,
              "content": "section,",
              "isCurrent": false
            },
            {
              "line": 278,
              "content": "chapters,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 354,
          "category": "aiAnalysis",
          "pattern": "performAI.*Analysis",
          "context": "const aiSuggestions = await this.performAIImprovementAnalysis(",
          "method": "getImprovementContextFromMemory",
          "class": "unknown",
          "surrounding": [
            {
              "line": 352,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 353,
              "content": "// AIによる改善提案の生成",
              "isCurrent": false
            },
            {
              "line": 354,
              "content": "const aiSuggestions = await this.performAIImprovementAnalysis(",
              "isCurrent": true
            },
            {
              "line": 355,
              "content": "section,",
              "isCurrent": false
            },
            {
              "line": 356,
              "content": "coherenceAnalysis,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 622,
          "category": "aiAnalysis",
          "pattern": "performAI.*Analysis",
          "context": "private async performAICoherenceAnalysis(",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 620,
              "content": "* AI一貫性分析を実行",
              "isCurrent": false
            },
            {
              "line": 621,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 622,
              "content": "private async performAICoherenceAnalysis(",
              "isCurrent": true
            },
            {
              "line": 623,
              "content": "section: SectionPlot,",
              "isCurrent": false
            },
            {
              "line": 624,
              "content": "chapters: Array<{ chapterNumber: number; title: string; content: string }>,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 661,
          "category": "aiAnalysis",
          "pattern": "performAI.*Analysis",
          "context": "private async performAIObjectiveAnalysis(",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 659,
              "content": "* AI目標分析を実行",
              "isCurrent": false
            },
            {
              "line": 660,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 661,
              "content": "private async performAIObjectiveAnalysis(",
              "isCurrent": true
            },
            {
              "line": 662,
              "content": "section: SectionPlot,",
              "isCurrent": false
            },
            {
              "line": 663,
              "content": "chapters: Array<{ chapterNumber: number; title: string; content: string }>,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 707,
          "category": "aiAnalysis",
          "pattern": "performAI.*Analysis",
          "context": "private async performAIEmotionalAnalysis(",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 705,
              "content": "* AI感情分析を実行",
              "isCurrent": false
            },
            {
              "line": 706,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 707,
              "content": "private async performAIEmotionalAnalysis(",
              "isCurrent": true
            },
            {
              "line": 708,
              "content": "section: SectionPlot,",
              "isCurrent": false
            },
            {
              "line": 709,
              "content": "chapters: Array<{ chapterNumber: number; title: string; content: string }>,",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "line": 755,
          "category": "aiAnalysis",
          "pattern": "performAI.*Analysis",
          "context": "private async performAIImprovementAnalysis(",
          "method": "unknown",
          "class": "unknown",
          "surrounding": [
            {
              "line": 753,
              "content": "* AI改善分析を実行",
              "isCurrent": false
            },
            {
              "line": 754,
              "content": "*/",
              "isCurrent": false
            },
            {
              "line": 755,
              "content": "private async performAIImprovementAnalysis(",
              "isCurrent": true
            },
            {
              "line": 756,
              "content": "section: SectionPlot,",
              "isCurrent": false
            },
            {
              "line": 757,
              "content": "coherenceAnalysis: CoherenceAnalysis,",
              "isCurrent": false
            }
          ]
        }
      ],
      "apiCalls": [
        {
          "file": "src\\lib\\utils\\api-throttle.ts",
          "line": 174,
          "category": "apiCalls",
          "pattern": "request\\s*\\(",
          "context": "logger.debug(`Processing queued request (${nextRequest.priority}). Remaining queue: ${this.waitingRequests.length}`);",
          "method": "shift",
          "class": "unknown",
          "surrounding": [
            {
              "line": 172,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 173,
              "content": "try {",
              "isCurrent": false
            },
            {
              "line": 174,
              "content": "logger.debug(`Processing queued request (${nextRequest.priority}). Remaining queue: ${this.waitingRequests.length}`);",
              "isCurrent": true
            },
            {
              "line": 175,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 176,
              "content": "// リクエスト数をカウント",
              "isCurrent": false
            }
          ]
        },
        {
          "file": "src\\lib\\utils\\request-queue.ts",
          "line": 162,
          "category": "apiCalls",
          "pattern": "request\\s*\\(",
          "context": "logger.info(`Retrying request (attempt ${request.retryCount}/${request.maxRetries}) after ${backoffTime}ms`);",
          "method": "pow",
          "class": "unknown",
          "surrounding": [
            {
              "line": 160,
              "content": "(Math.random() * 1000);",
              "isCurrent": false
            },
            {
              "line": 161,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 162,
              "content": "logger.info(`Retrying request (attempt ${request.retryCount}/${request.maxRetries}) after ${backoffTime}ms`);",
              "isCurrent": true
            },
            {
              "line": 163,
              "content": "",
              "isCurrent": false
            },
            {
              "line": 164,
              "content": "// 待機後にキューの先頭に戻す",
              "isCurrent": false
            }
          ]
        }
      ]
    },
    "duplicateCount": 36,
    "highPerformanceImpactFiles": 145
  },
  "detailedAnalysis": {
    "callsByCategory": {
      "promptGeneration": {
        "totalCalls": 95,
        "uniqueFiles": 28,
        "mostActiveFiles": [
          {
            "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
            "count": 11
          },
          {
            "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
            "count": 8
          },
          {
            "file": "src\\lib\\memory\\long-term\\system-knowledge.ts",
            "count": 8
          },
          {
            "file": "src\\lib\\learning-journey\\index.ts",
            "count": 7
          },
          {
            "file": "src\\lib\\generation\\prompt-generator copy.ts",
            "count": 6
          }
        ],
        "averageCallsPerFile": 3.392857142857143
      },
      "geminiCalls": {
        "totalCalls": 200,
        "uniqueFiles": 46,
        "mostActiveFiles": [
          {
            "file": "src\\lib\\generation\\gemini-client.ts",
            "count": 15
          },
          {
            "file": "src\\lib\\plot\\section\\section-designer.ts",
            "count": 14
          },
          {
            "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "count": 11
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
            "count": 9
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
            "count": 9
          }
        ],
        "averageCallsPerFile": 4.3478260869565215
      },
      "templateUsage": {
        "totalCalls": 21,
        "uniqueFiles": 6,
        "mostActiveFiles": [
          {
            "file": "src\\lib\\generation\\prompt\\template-manager.ts",
            "count": 9
          },
          {
            "file": "src\\lib\\characters\\generators\\template-provider.ts",
            "count": 8
          },
          {
            "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
            "count": 1
          },
          {
            "file": "src\\lib\\analysis\\adapters\\interfaces.ts",
            "count": 1
          },
          {
            "file": "src\\lib\\characters\\core\\interfaces.ts",
            "count": 1
          }
        ],
        "averageCallsPerFile": 3.5
      },
      "aiAnalysis": {
        "totalCalls": 29,
        "uniqueFiles": 7,
        "mostActiveFiles": [
          {
            "file": "src\\lib\\plot\\section\\section-analyzer.ts",
            "count": 16
          },
          {
            "file": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
            "count": 4
          },
          {
            "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "count": 3
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
            "count": 2
          },
          {
            "file": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
            "count": 2
          }
        ],
        "averageCallsPerFile": 4.142857142857143
      },
      "apiCalls": {
        "totalCalls": 2,
        "uniqueFiles": 2,
        "mostActiveFiles": [
          {
            "file": "src\\lib\\utils\\api-throttle.ts",
            "count": 1
          },
          {
            "file": "src\\lib\\utils\\request-queue.ts",
            "count": 1
          }
        ],
        "averageCallsPerFile": 1
      }
    },
    "promptAnalysis": {
      "totalPrompts": 221,
      "averageLength": 352.33031674208144,
      "purposeDistribution": [
        [
          "character_analysis",
          129
        ],
        [
          "unknown",
          35
        ],
        [
          "story_generation",
          32
        ],
        [
          "content_analysis",
          13
        ],
        [
          "theme_analysis",
          5
        ],
        [
          "content_improvement",
          4
        ],
        [
          "emotional_analysis",
          2
        ],
        [
          "tension_pacing",
          1
        ]
      ],
      "mostUsedVariables": [
        [
          "{chapterNumber}",
          35
        ],
        [
          "${character.name}",
          32
        ],
        [
          "{character.name}",
          32
        ],
        [
          "${chapterNumber}",
          31
        ],
        [
          "{genre}",
          17
        ],
        [
          "${genre}",
          13
        ],
        [
          "{theme}",
          12
        ],
        [
          "${skill.name}",
          12
        ],
        [
          "{skill.name}",
          12
        ],
        [
          "${character.type}",
          11
        ]
      ],
      "largestPrompts": [
        {
          "file": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
          "purpose": "character_analysis",
          "length": 1360
        },
        {
          "file": "src\\app\\(public)\\chapters\\[id]\\page.tsx",
          "purpose": "story_generation",
          "length": 1351
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
          "purpose": "character_analysis",
          "length": 1022
        },
        {
          "file": "src\\lib\\generation\\prompt-generator copy 2.ts",
          "purpose": "character_analysis",
          "length": 1004
        },
        {
          "file": "src\\lib\\generation\\prompt-generator copy.ts",
          "purpose": "character_analysis",
          "length": 1004
        }
      ]
    },
    "duplicationAnalysis": {
      "promptSimilarities": [
        {
          "files": [
            "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
            "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts"
          ],
          "similarity": 1,
          "type": "prompt_similarity"
        },
        {
          "files": [
            "src\\lib\\characters\\manager copy 3.ts",
            "src\\lib\\characters\\manager copy 4.ts"
          ],
          "similarity": 1,
          "type": "prompt_similarity"
        },
        {
          "files": [
            "src\\lib\\characters\\services\\psychology-service copy 2.ts",
            "src\\lib\\characters\\services\\psychology-service copy.ts"
          ],
          "similarity": 1,
          "type": "prompt_similarity"
        },
        {
          "files": [
            "src\\lib\\characters\\services\\skill-service copy 2.ts",
            "src\\lib\\characters\\services\\skill-service.ts"
          ],
          "similarity": 1,
          "type": "prompt_similarity"
        },
        {
          "files": [
            "src\\lib\\generation\\engine\\chapter-generator copy.ts",
            "src\\lib\\generation\\engine\\chapter-generator.ts"
          ],
          "similarity": 1,
          "type": "prompt_similarity"
        },
        {
          "files": [
            "src\\lib\\generation\\engine\\chapter-generator copy.ts",
            "src\\lib\\generation\\engine copy 2.ts"
          ],
          "similarity": 1,
          "type": "prompt_similarity"
        },
        {
          "files": [
            "src\\lib\\generation\\engine\\chapter-generator copy.ts",
            "src\\lib\\generation\\engine copy 3.ts"
          ],
          "similarity": 1,
          "type": "prompt_similarity"
        },
        {
          "files": [
            "src\\lib\\generation\\engine\\chapter-generator copy.ts",
            "src\\lib\\generation\\engine copy 4.ts"
          ],
          "similarity": 1,
          "type": "prompt_similarity"
        },
        {
          "files": [
            "src\\lib\\generation\\engine\\chapter-generator copy.ts",
            "src\\lib\\generation\\engine copy.ts"
          ],
          "similarity": 1,
          "type": "prompt_similarity"
        },
        {
          "files": [
            "src\\lib\\generation\\engine\\chapter-generator copy.ts",
            "src\\lib\\generation\\engine.ts"
          ],
          "similarity": 1,
          "type": "prompt_similarity"
        }
      ],
      "purposeDuplications": [
        {
          "purpose": "character_analysis",
          "files": [
            "src\\components\\admin\\analytics\\character-analysis.tsx",
            "src\\components\\admin\\editor\\dashboard.tsx",
            "src\\components\\public\\character-spotlight.tsx",
            "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
            "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
            "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
            "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
            "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
            "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
            "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
            "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
            "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
            "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
            "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
            "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
            "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
            "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
            "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
            "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
            "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
            "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
            "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
            "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
            "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
            "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
            "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
            "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts",
            "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "src\\lib\\characters\\analyzers\\character-analyzer.ts",
            "src\\lib\\characters\\analyzers\\character-analyzer.ts",
            "src\\lib\\characters\\events\\handlers\\character-change-handler.ts",
            "src\\lib\\characters\\generators\\character-generator.ts",
            "src\\lib\\characters\\generators\\character-generator.ts",
            "src\\lib\\characters\\generators\\character-generator.ts",
            "src\\lib\\characters\\generators\\character-generator.ts",
            "src\\lib\\characters\\manager copy 3.ts",
            "src\\lib\\characters\\manager copy 4.ts",
            "src\\lib\\characters\\services\\character-service copy 2.ts",
            "src\\lib\\characters\\services\\character-service copy 2.ts",
            "src\\lib\\characters\\services\\character-service copy 2.ts",
            "src\\lib\\characters\\services\\evolution-service copy 2.ts",
            "src\\lib\\characters\\services\\evolution-service copy.ts",
            "src\\lib\\characters\\services\\evolution-service copy.ts",
            "src\\lib\\characters\\services\\evolution-service.ts",
            "src\\lib\\characters\\services\\parameter-service copy.ts",
            "src\\lib\\characters\\services\\psychology-service copy 2.ts",
            "src\\lib\\characters\\services\\psychology-service copy 2.ts",
            "src\\lib\\characters\\services\\psychology-service copy.ts",
            "src\\lib\\characters\\services\\psychology-service copy.ts",
            "src\\lib\\characters\\services\\relationship-service.ts",
            "src\\lib\\characters\\services\\skill-service copy 2.ts",
            "src\\lib\\characters\\services\\skill-service copy 2.ts",
            "src\\lib\\characters\\services\\skill-service copy 2.ts",
            "src\\lib\\characters\\services\\skill-service copy.ts",
            "src\\lib\\characters\\services\\skill-service.ts",
            "src\\lib\\characters\\services\\skill-service.ts",
            "src\\lib\\characters\\services\\skill-service.ts",
            "src\\lib\\characters\\utils\\character-utils.ts",
            "src\\lib\\characters\\utils\\character-utils.ts",
            "src\\lib\\characters\\utils\\character-utils.ts",
            "src\\lib\\characters\\utils\\character-utils.ts",
            "src\\lib\\characters\\utils\\character-utils.ts",
            "src\\lib\\characters\\utils\\character-utils.ts",
            "src\\lib\\characters\\utils\\character-utils.ts",
            "src\\lib\\foreshadowing\\auto-generator.ts",
            "src\\lib\\foreshadowing\\auto-generator.ts",
            "src\\lib\\foreshadowing\\engine.ts",
            "src\\lib\\generation\\prompt\\prompt-formatter.ts",
            "src\\lib\\generation\\prompt\\prompt-formatter.ts",
            "src\\lib\\generation\\prompt\\prompt-formatter.ts",
            "src\\lib\\generation\\prompt\\section-builder.ts",
            "src\\lib\\generation\\prompt\\template-manager.ts",
            "src\\lib\\generation\\prompt\\template-manager.ts",
            "src\\lib\\generation\\prompt-generator copy 2.ts",
            "src\\lib\\generation\\prompt-generator copy 2.ts",
            "src\\lib\\generation\\prompt-generator copy 2.ts",
            "src\\lib\\generation\\prompt-generator copy 2.ts",
            "src\\lib\\generation\\prompt-generator copy 2.ts",
            "src\\lib\\generation\\prompt-generator copy 2.ts",
            "src\\lib\\generation\\prompt-generator copy 2.ts",
            "src\\lib\\generation\\prompt-generator copy.ts",
            "src\\lib\\generation\\prompt-generator copy.ts",
            "src\\lib\\generation\\prompt-generator copy.ts",
            "src\\lib\\generation\\prompt-generator copy.ts",
            "src\\lib\\generation\\prompt-generator copy.ts",
            "src\\lib\\generation\\prompt-generator copy.ts",
            "src\\lib\\generation\\prompt-generator copy.ts",
            "src\\lib\\generation\\prompt-generator.ts",
            "src\\lib\\generation\\prompt-generator.ts",
            "src\\lib\\generation\\prompt-generator.ts",
            "src\\lib\\generation\\prompt-generator.ts",
            "src\\lib\\generation\\prompt-generator.ts",
            "src\\lib\\generation\\prompt-generator.ts",
            "src\\lib\\generation\\prompt-generator.ts",
            "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
            "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
            "src\\lib\\learning-journey\\index.ts",
            "src\\lib\\learning-journey\\index.ts",
            "src\\lib\\learning-journey\\prompt-generator.ts",
            "src\\lib\\learning-journey\\prompt-generator.ts",
            "src\\lib\\learning-journey\\prompt-generator.ts",
            "src\\lib\\learning-journey\\prompt-generator.ts",
            "src\\lib\\learning-journey\\prompt-generator.ts",
            "src\\lib\\learning-journey\\prompt-generator.ts",
            "src\\lib\\learning-journey\\prompt-generator.ts",
            "src\\lib\\learning-journey\\prompt-generator.ts",
            "src\\lib\\memory\\integration\\duplicate-resolver.ts",
            "src\\lib\\memory\\short-term\\immediate-context.ts",
            "src\\lib\\memory\\text-analyzer-service.ts",
            "src\\lib\\plot\\checker.ts",
            "src\\lib\\plot\\context-builder.ts",
            "src\\lib\\plot\\context-builder.ts",
            "src\\lib\\plot\\context-builder.ts",
            "src\\lib\\plot\\context-builder.ts",
            "src\\lib\\plot\\section\\section-analyzer.ts",
            "src\\lib\\plot\\section\\section-analyzer.ts",
            "src\\lib\\plot\\section\\section-designer.ts",
            "src\\lib\\plot\\section\\section-designer.ts",
            "src\\lib\\plot\\section\\section-designer.ts",
            "src\\lib\\plot\\section\\section-designer.ts"
          ],
          "count": 129,
          "type": "purpose_duplication"
        },
        {
          "purpose": "unknown",
          "files": [
            "src\\app\\api\\generation\\chapter\\route.ts",
            "src\\components\\admin\\editor\\dashboard.tsx",
            "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
            "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "src\\lib\\concept\\business-concept-library.ts",
            "src\\lib\\foreshadowing\\engine.ts",
            "src\\lib\\foreshadowing\\manager.ts",
            "src\\lib\\foreshadowing\\resolution-advisor.ts",
            "src\\lib\\generation\\engine\\chapter-generator copy.ts",
            "src\\lib\\generation\\engine\\chapter-generator.ts",
            "src\\lib\\generation\\engine copy 2.ts",
            "src\\lib\\generation\\engine copy 3.ts",
            "src\\lib\\generation\\engine copy 4.ts",
            "src\\lib\\generation\\engine copy.ts",
            "src\\lib\\generation\\engine.ts",
            "src\\lib\\generation\\prompt\\prompt-formatter.ts",
            "src\\lib\\generation\\prompt\\prompt-formatter.ts",
            "src\\lib\\generation\\prompt\\prompt-formatter.ts",
            "src\\lib\\generation\\prompt\\prompt-formatter.ts",
            "src\\lib\\generation\\prompt\\prompt-formatter.ts",
            "src\\lib\\generation\\prompt\\prompt-formatter.ts",
            "src\\lib\\generation\\prompt\\prompt-formatter.ts",
            "src\\lib\\generation\\prompt\\prompt-formatter.ts",
            "src\\lib\\learning-journey\\concept-learning-manager.ts",
            "src\\lib\\learning-journey\\concept-learning-manager.ts",
            "src\\lib\\memory\\core\\memory-manager copy.ts",
            "src\\lib\\memory\\core\\memory-manager.ts",
            "src\\lib\\memory\\integration\\cache-coordinator.ts",
            "src\\lib\\memory\\long-term\\duplicate-resolver.ts",
            "src\\lib\\memory\\mid-term\\quality-metrics.ts",
            "src\\lib\\memory\\mid-term\\quality-metrics.ts",
            "src\\lib\\plot\\context-builder.ts",
            "src\\lib\\plot\\section\\section-analyzer.ts",
            "src\\lib\\plot\\section\\section-plot-manager.ts",
            "src\\lib\\validation\\consistency-checker.ts"
          ],
          "count": 35,
          "type": "purpose_duplication"
        },
        {
          "purpose": "story_generation",
          "files": [
            "src\\app\\(public)\\chapters\\[id]\\page.tsx",
            "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
            "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
            "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
            "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
            "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
            "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
            "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
            "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
            "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "src\\lib\\generation\\engine\\chapter-generator copy.ts",
            "src\\lib\\generation\\engine\\chapter-generator.ts",
            "src\\lib\\generation\\prompt\\memory-service.ts",
            "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
            "src\\lib\\plot\\context-builder.ts",
            "src\\lib\\plot\\context-builder.ts",
            "src\\lib\\plot\\section\\section-analyzer.ts",
            "src\\lib\\plot\\section\\section-analyzer.ts",
            "src\\lib\\plot\\section\\section-analyzer.ts",
            "src\\lib\\plot\\section\\section-designer.ts",
            "src\\lib\\plot\\section\\section-designer.ts",
            "src\\lib\\plot\\section\\section-designer.ts",
            "src\\lib\\plot\\section\\section-designer.ts",
            "src\\lib\\plot\\section\\section-designer.ts"
          ],
          "count": 32,
          "type": "purpose_duplication"
        },
        {
          "purpose": "content_analysis",
          "files": [
            "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
            "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
            "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
            "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
            "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
            "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "src\\lib\\foreshadowing\\resolution-advisor.ts",
            "src\\lib\\plot\\section\\section-analyzer.ts",
            "src\\lib\\plot\\section\\section-analyzer.ts",
            "src\\lib\\plot\\section\\section-analyzer.ts"
          ],
          "count": 13,
          "type": "purpose_duplication"
        },
        {
          "purpose": "theme_analysis",
          "files": [
            "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
            "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
            "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "src\\lib\\utils\\prompt-storage.ts"
          ],
          "count": 5,
          "type": "purpose_duplication"
        },
        {
          "purpose": "content_improvement",
          "files": [
            "src\\components\\admin\\editor\\learning-insights-panel.tsx",
            "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
            "src\\lib\\plot\\section\\section-analyzer.ts",
            "src\\lib\\validation\\system.ts"
          ],
          "count": 4,
          "type": "purpose_duplication"
        },
        {
          "purpose": "emotional_analysis",
          "files": [
            "src\\lib\\learning-journey\\prompt-generator.ts",
            "src\\lib\\plot\\section\\section-designer.ts"
          ],
          "count": 2,
          "type": "purpose_duplication"
        }
      ],
      "totalPotentialSavings": {
        "eliminatableCalls": 242,
        "estimatedPerformanceGain": "3630%",
        "estimatedCostReduction": "12.10$"
      }
    },
    "performanceAnalysis": {
      "highImpactFiles": [
        {
          "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "score": 175,
          "factors": [
            "High AI call frequency: 11",
            "Large prompts: 51"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\plot\\manager.ts",
          "score": 130,
          "factors": [
            "Large prompts: 42",
            "Synchronous calls: 4"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\plot\\manager copy.ts",
          "score": 121,
          "factors": [
            "Large prompts: 39",
            "Synchronous calls: 4"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\manager copy 3.ts",
          "score": 105,
          "factors": [
            "Large prompts: 35"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\manager copy 4.ts",
          "score": 105,
          "factors": [
            "Large prompts: 35"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
          "score": 99,
          "factors": [
            "Large prompts: 33"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\services\\skill-service copy 2.ts",
          "score": 99,
          "factors": [
            "Large prompts: 33"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\services\\skill-service.ts",
          "score": 99,
          "factors": [
            "Large prompts: 33"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\storage\\migration-tools.ts",
          "score": 96,
          "factors": [
            "Large prompts: 32"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\generation\\prompt-generator.ts",
          "score": 93,
          "factors": [
            "Large prompts: 31"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\storage\\backup-system.ts",
          "score": 93,
          "factors": [
            "Large prompts: 31"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\generation\\prompt\\prompt-formatter.ts",
          "score": 90,
          "factors": [
            "Large prompts: 30"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\plot\\story-generation-bridge.ts",
          "score": 90,
          "factors": [
            "Large prompts: 30"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\generation\\engine\\chapter-generator copy.ts",
          "score": 88,
          "factors": [
            "Large prompts: 28",
            "Synchronous calls: 4"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\generation\\context-generator copy.ts",
          "score": 87,
          "factors": [
            "Large prompts: 29"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\plot\\section\\section-analyzer.ts",
          "score": 87,
          "factors": [
            "Large prompts: 29"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\generation\\engine\\chapter-generator.ts",
          "score": 85,
          "factors": [
            "Large prompts: 27",
            "Synchronous calls: 4"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\learning-journey\\concept-learning-manager.ts",
          "score": 84,
          "factors": [
            "Large prompts: 28"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
          "score": 84,
          "factors": [
            "Large prompts: 28"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\plot\\section\\section-designer.ts",
          "score": 82,
          "factors": [
            "High AI call frequency: 7",
            "Large prompts: 21",
            "Synchronous calls: 5"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\generation\\prompt\\section-builder.ts",
          "score": 81,
          "factors": [
            "Large prompts: 27"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\long-term\\system-knowledge.ts",
          "score": 81,
          "factors": [
            "Large prompts: 27"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
          "score": 78,
          "factors": [
            "Large prompts: 26"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\generation\\prompt-generator copy 2.ts",
          "score": 75,
          "factors": [
            "Large prompts: 25"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
          "score": 72,
          "factors": [
            "Large prompts: 24"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\generation\\prompt-generator copy.ts",
          "score": 72,
          "factors": [
            "Large prompts: 24"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
          "score": 70,
          "factors": [
            "Large prompts: 22",
            "Synchronous calls: 4"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\services\\evolution-service copy.ts",
          "score": 69,
          "factors": [
            "Large prompts: 23"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\learning-journey\\context-manager.ts",
          "score": 69,
          "factors": [
            "Large prompts: 23"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
          "score": 66,
          "factors": [
            "Large prompts: 22"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\generation\\context-generator.ts",
          "score": 66,
          "factors": [
            "Large prompts: 22"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\storage\\enhanced-storage.ts",
          "score": 66,
          "factors": [
            "Large prompts: 22"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\analysis\\adapters\\storage-adapter.ts",
          "score": 63,
          "factors": [
            "Large prompts: 21"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\validation\\system.ts",
          "score": 63,
          "factors": [
            "Large prompts: 21"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\services\\detection-service copy 2.ts",
          "score": 60,
          "factors": [
            "Large prompts: 20"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\services\\detection-service.ts",
          "score": 60,
          "factors": [
            "Large prompts: 20"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\integration\\cache-coordinator.ts",
          "score": 60,
          "factors": [
            "Large prompts: 20"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\long-term\\character-database copy 2.ts",
          "score": 60,
          "factors": [
            "Large prompts: 17",
            "Synchronous calls: 9"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\long-term\\character-database.ts",
          "score": 60,
          "factors": [
            "Large prompts: 17",
            "Synchronous calls: 9"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\short-term\\processing-buffers.ts",
          "score": 60,
          "factors": [
            "Large prompts: 20"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\services\\character-service.ts",
          "score": 57,
          "factors": [
            "Large prompts: 19"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\learning-journey\\story-transformation-designer.ts",
          "score": 57,
          "factors": [
            "Large prompts: 19"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\plot\\section\\section-plot-manager.ts",
          "score": 57,
          "factors": [
            "Large prompts: 19"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\learning-journey\\index.ts",
          "score": 55,
          "factors": [
            "Large prompts: 17",
            "Synchronous calls: 4"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\app\\api\\generation\\chapter\\route.ts",
          "score": 54,
          "factors": [
            "Large prompts: 18"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\events\\handlers\\relationship-change-handler.ts",
          "score": 54,
          "factors": [
            "Large prompts: 18"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\manager copy.ts",
          "score": 54,
          "factors": [
            "Large prompts: 18"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\services\\parameter-service copy 2.ts",
          "score": 54,
          "factors": [
            "Large prompts: 18"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\services\\parameter-service.ts",
          "score": 54,
          "factors": [
            "Large prompts: 18"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\long-term\\duplicate-resolver.ts",
          "score": 51,
          "factors": [
            "Large prompts: 17"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\short-term\\immediate-context.ts",
          "score": 51,
          "factors": [
            "Large prompts: 17"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\short-term\\short-term-memory.ts",
          "score": 51,
          "factors": [
            "Large prompts: 17"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\short-term\\temporary-analysis.ts",
          "score": 51,
          "factors": [
            "Large prompts: 17"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\storage\\persistent-storage.ts",
          "score": 51,
          "factors": [
            "Large prompts: 17"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\app\\api\\generation\\chapter\\route copy.ts",
          "score": 48,
          "factors": [
            "Large prompts: 16"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\services\\psychology-service.ts",
          "score": 48,
          "factors": [
            "Large prompts: 16"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\mid-term\\mid-term-memory.ts",
          "score": 48,
          "factors": [
            "Large prompts: 16"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
          "score": 46,
          "factors": [
            "Large prompts: 14",
            "Synchronous calls: 4"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
          "score": 45,
          "factors": [
            "Large prompts: 15"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\services\\character-service copy 2.ts",
          "score": 45,
          "factors": [
            "Large prompts: 15"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\foreshadowing\\manager.ts",
          "score": 45,
          "factors": [
            "Large prompts: 15"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\mid-term\\character-evolution.ts",
          "score": 45,
          "factors": [
            "Large prompts: 15"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\events\\handlers\\character-change-handler.ts",
          "score": 42,
          "factors": [
            "Large prompts: 14"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\services\\skill-service copy.ts",
          "score": 42,
          "factors": [
            "Large prompts: 14"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\learning-journey\\prompt-generator.ts",
          "score": 42,
          "factors": [
            "Large prompts: 14"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\integration\\duplicate-resolver.ts",
          "score": 42,
          "factors": [
            "Large prompts: 14"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\integration\\quality-assurance.ts",
          "score": 42,
          "factors": [
            "Large prompts: 14"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\parameters\\manager.ts",
          "score": 42,
          "factors": [
            "Large prompts: 14"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\manager copy 2.ts",
          "score": 39,
          "factors": [
            "Large prompts: 13"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\services\\relationship-service.ts",
          "score": 39,
          "factors": [
            "Large prompts: 13"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\generation\\gemini-client.ts",
          "score": 39,
          "factors": [
            "High AI call frequency: 9",
            "Large prompts: 5",
            "Synchronous calls: 6"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\long-term\\character-database copy.ts",
          "score": 39,
          "factors": [
            "Large prompts: 10",
            "Synchronous calls: 9"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
          "score": 38,
          "factors": [
            "High AI call frequency: 7",
            "Large prompts: 8"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\analyzers\\relationship-analyzer.ts",
          "score": 36,
          "factors": [
            "Large prompts: 12"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\services\\character-service copy.ts",
          "score": 36,
          "factors": [
            "Large prompts: 12"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\services\\psychology-service copy 2.ts",
          "score": 36,
          "factors": [
            "Large prompts: 12"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\services\\psychology-service copy.ts",
          "score": 36,
          "factors": [
            "Large prompts: 12"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\foreshadowing\\engine.ts",
          "score": 36,
          "factors": [
            "Large prompts: 12"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\foreshadowing\\planned-foreshadowing-manager.ts",
          "score": 36,
          "factors": [
            "Large prompts: 12"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\core\\data-integration-processor.ts",
          "score": 36,
          "factors": [
            "Large prompts: 12"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\plot\\section\\section-bridge.ts",
          "score": 36,
          "factors": [
            "Large prompts: 12"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\validation\\consistency-checker.ts",
          "score": 36,
          "factors": [
            "Large prompts: 12"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\generators\\character-generator.ts",
          "score": 35,
          "factors": [
            "Large prompts: 10",
            "Synchronous calls: 5"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
          "score": 33,
          "factors": [
            "Large prompts: 11"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\analysis\\services\\narrative\\narrative-analysis-service.ts",
          "score": 33,
          "factors": [
            "Large prompts: 11"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\services\\evolution-service copy 2.ts",
          "score": 33,
          "factors": [
            "Large prompts: 11"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\services\\evolution-service.ts",
          "score": 33,
          "factors": [
            "Large prompts: 11"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\services\\parameter-service copy.ts",
          "score": 33,
          "factors": [
            "Large prompts: 11"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\long-term\\world-knowledge.ts",
          "score": 33,
          "factors": [
            "Large prompts: 11"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\short-term\\generation-cache.ts",
          "score": 33,
          "factors": [
            "Large prompts: 11"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\analysis\\coordinators\\optimization-coordinator.ts",
          "score": 30,
          "factors": [
            "Large prompts: 10"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
          "score": 30,
          "factors": [
            "Large prompts: 10"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\services\\detection-service copy.ts",
          "score": 30,
          "factors": [
            "Large prompts: 10"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\utils\\character-utils.ts",
          "score": 30,
          "factors": [
            "Large prompts: 10"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\foreshadowing\\auto-generator.ts",
          "score": 30,
          "factors": [
            "Large prompts: 10"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\generation\\engine\\text-parser.ts",
          "score": 30,
          "factors": [
            "Large prompts: 10"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\core\\memory-manager copy.ts",
          "score": 30,
          "factors": [
            "Large prompts: 10"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\core\\memory-manager.ts",
          "score": 30,
          "factors": [
            "Large prompts: 10"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\long-term\\long-term-memory.ts",
          "score": 30,
          "factors": [
            "Large prompts: 10"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\storage\\chapter-storage.ts",
          "score": 30,
          "factors": [
            "Large prompts: 10"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
          "score": 27,
          "factors": [
            "Large prompts: 9"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\foreshadowing\\index.ts",
          "score": 27,
          "factors": [
            "Large prompts: 9"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\mid-term\\analysis-results.ts",
          "score": 27,
          "factors": [
            "Large prompts: 9"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\plot\\section\\section-storage.ts",
          "score": 27,
          "factors": [
            "Large prompts: 9"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\storage\\github-storage.ts",
          "score": 27,
          "factors": [
            "Large prompts: 9"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\utils\\prompt-storage.ts",
          "score": 27,
          "factors": [
            "Large prompts: 9"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
          "score": 24,
          "factors": [
            "Large prompts: 8"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\analysis\\pipelines\\post-generation-pipeline.ts",
          "score": 24,
          "factors": [
            "Large prompts: 8"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\concept\\business-concept-library.ts",
          "score": 24,
          "factors": [
            "Large prompts: 8"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\foreshadowing\\resolution-advisor.ts",
          "score": 24,
          "factors": [
            "Large prompts: 8"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\core\\unified-access-api.ts",
          "score": 24,
          "factors": [
            "Large prompts: 8"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\storage\\cache-storage.ts",
          "score": 24,
          "factors": [
            "Large prompts: 8"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\analyzers\\timing-analyzer.ts",
          "score": 21,
          "factors": [
            "Large prompts: 7"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\services\\relationship-service copy 2.ts",
          "score": 21,
          "factors": [
            "Large prompts: 7"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\services\\relationship-service copy.ts",
          "score": 21,
          "factors": [
            "Large prompts: 7"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\generation\\prompt\\memory-service.ts",
          "score": 21,
          "factors": [
            "Large prompts: 7"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\long-term\\consolidation-guard.ts",
          "score": 21,
          "factors": [
            "Large prompts: 7"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\mid-term\\narrative-progression.ts",
          "score": 21,
          "factors": [
            "Large prompts: 7"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\plot\\checker.ts",
          "score": 21,
          "factors": [
            "Large prompts: 7"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\analysis\\utils\\serialization-utils.ts",
          "score": 18,
          "factors": [
            "Large prompts: 6"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\analyzers\\relationship-analyzer copy.ts",
          "score": 18,
          "factors": [
            "Large prompts: 6"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\generators\\template-provider.ts",
          "score": 18,
          "factors": [
            "Large prompts: 6"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\utils\\serialization-utils.ts",
          "score": 18,
          "factors": [
            "Large prompts: 6"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\integration\\access-optimizer.ts",
          "score": 18,
          "factors": [
            "Large prompts: 6"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\plot\\storage.ts",
          "score": 18,
          "factors": [
            "Large prompts: 6"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\analysis\\content-analysis-manager.ts",
          "score": 15,
          "factors": [
            "Large prompts: 5"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\analysis\\pipelines\\pre-generation-pipeline.ts",
          "score": 15,
          "factors": [
            "Large prompts: 5"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\characters\\events\\character-event-bus.ts",
          "score": 15,
          "factors": [
            "Large prompts: 5"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\generation\\integrated-system-factory.ts",
          "score": 15,
          "factors": [
            "Large prompts: 5"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\long-term\\consolidation-guard copy.ts",
          "score": 15,
          "factors": [
            "Large prompts: 5"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\plot\\context-builder.ts",
          "score": 15,
          "factors": [
            "Large prompts: 5"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\plot\\world-settings-manager.ts",
          "score": 15,
          "factors": [
            "Large prompts: 5"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\utils\\api-throttle.ts",
          "score": 15,
          "factors": [
            "Large prompts: 5"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\utils\\debug\\learning-journey-diagnostics.ts",
          "score": 15,
          "factors": [
            "Large prompts: 5"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\components\\admin\\character-management\\character-list.tsx",
          "score": 12,
          "factors": [
            "Large prompts: 4"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
          "score": 12,
          "factors": [
            "Large prompts: 4"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
          "score": 12,
          "factors": [
            "Large prompts: 4"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\analysis\\utils\\analysis-formatter.ts",
          "score": 12,
          "factors": [
            "Large prompts: 4"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\analysis\\utils\\arc-ttils.ts",
          "score": 12,
          "factors": [
            "Large prompts: 4"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\generation\\prompt\\template-manager.ts",
          "score": 12,
          "factors": [
            "Large prompts: 4"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\learning-journey\\event-bus.ts",
          "score": 12,
          "factors": [
            "Large prompts: 4"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\memory\\mid-term\\quality-metrics.ts",
          "score": 12,
          "factors": [
            "Large prompts: 4"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\storage\\local-storage.ts",
          "score": 12,
          "factors": [
            "Large prompts: 4"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\storage\\storage-initializer.ts",
          "score": 12,
          "factors": [
            "Large prompts: 4"
          ],
          "severity": "HIGH"
        },
        {
          "file": "src\\lib\\utils\\request-queue.ts",
          "score": 12,
          "factors": [
            "Large prompts: 4"
          ],
          "severity": "HIGH"
        }
      ],
      "mediumImpactFiles": [
        {
          "file": "src\\components\\admin\\character-management\\character-editor.tsx",
          "score": 6,
          "factors": [
            "Large prompts: 2"
          ],
          "severity": "MEDIUM"
        },
        {
          "file": "src\\components\\admin\\editor\\quality-indicators.tsx",
          "score": 6,
          "factors": [
            "Large prompts: 2"
          ],
          "severity": "MEDIUM"
        },
        {
          "file": "src\\components\\public\\navigation.tsx",
          "score": 9,
          "factors": [
            "Large prompts: 3"
          ],
          "severity": "MEDIUM"
        },
        {
          "file": "src\\components\\shared\\header.tsx",
          "score": 9,
          "factors": [
            "Large prompts: 3"
          ],
          "severity": "MEDIUM"
        },
        {
          "file": "src\\components\\ui\\card.tsx",
          "score": 9,
          "factors": [
            "Large prompts: 3"
          ],
          "severity": "MEDIUM"
        },
        {
          "file": "src\\components\\ui\\charts.tsx",
          "score": 9,
          "factors": [
            "Large prompts: 3"
          ],
          "severity": "MEDIUM"
        },
        {
          "file": "src\\components\\ui\\table.tsx",
          "score": 9,
          "factors": [
            "Large prompts: 3"
          ],
          "severity": "MEDIUM"
        },
        {
          "file": "src\\lib\\analysis\\core\\errors.ts",
          "score": 9,
          "factors": [
            "Large prompts: 3"
          ],
          "severity": "MEDIUM"
        },
        {
          "file": "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts",
          "score": 6,
          "factors": [
            "Large prompts: 2"
          ],
          "severity": "MEDIUM"
        },
        {
          "file": "src\\lib\\characters\\core\\errors.ts",
          "score": 9,
          "factors": [
            "Large prompts: 3"
          ],
          "severity": "MEDIUM"
        },
        {
          "file": "src\\lib\\characters\\manager copy 5.ts",
          "score": 9,
          "factors": [
            "Large prompts: 3"
          ],
          "severity": "MEDIUM"
        },
        {
          "file": "src\\lib\\characters\\manager.ts",
          "score": 9,
          "factors": [
            "Large prompts: 3"
          ],
          "severity": "MEDIUM"
        },
        {
          "file": "src\\lib\\lifecycle\\service-container copy 2.ts",
          "score": 9,
          "factors": [
            "Large prompts: 3"
          ],
          "severity": "MEDIUM"
        },
        {
          "file": "src\\lib\\lifecycle\\service-container copy.ts",
          "score": 6,
          "factors": [
            "Large prompts: 2"
          ],
          "severity": "MEDIUM"
        },
        {
          "file": "src\\lib\\memory\\mid-term\\system-statistics.ts",
          "score": 9,
          "factors": [
            "Large prompts: 3"
          ],
          "severity": "MEDIUM"
        },
        {
          "file": "src\\lib\\memory\\text-analyzer-service.ts",
          "score": 9,
          "factors": [
            "Large prompts: 3"
          ],
          "severity": "MEDIUM"
        },
        {
          "file": "src\\lib\\plot\\index.ts",
          "score": 6,
          "factors": [
            "Large prompts: 2"
          ],
          "severity": "MEDIUM"
        },
        {
          "file": "src\\lib\\utils\\error-handler.ts",
          "score": 6,
          "factors": [
            "Large prompts: 2"
          ],
          "severity": "MEDIUM"
        }
      ],
      "totalPerformanceScore": 6871,
      "commonIssues": [
        {
          "issue": "Large prompts",
          "count": 196
        },
        {
          "issue": "Synchronous calls",
          "count": 13
        },
        {
          "issue": "High AI call frequency",
          "count": 4
        }
      ]
    },
    "optimizationRecommendations": [
      {
        "type": "ELIMINATE_DUPLICATES",
        "priority": "HIGH",
        "description": "36個の重複AI呼び出しを統合",
        "estimatedImpact": "パフォーマンス20-40%向上"
      },
      {
        "type": "OPTIMIZE_HIGH_IMPACT_FILES",
        "priority": "HIGH",
        "description": "145個の高負荷ファイルを最適化",
        "files": [
          "src\\app\\api\\generation\\chapter\\route copy.ts",
          "src\\app\\api\\generation\\chapter\\route.ts",
          "src\\app\\api\\generation\\test-prompt\\route.ts",
          "src\\components\\admin\\character-management\\character-list.tsx",
          "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
          "src\\lib\\analysis\\adapters\\storage-adapter.ts",
          "src\\lib\\analysis\\content-analysis-manager.ts",
          "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
          "src\\lib\\analysis\\coordinators\\optimization-coordinator.ts",
          "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
          "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
          "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
          "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
          "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
          "src\\lib\\analysis\\pipelines\\post-generation-pipeline.ts",
          "src\\lib\\analysis\\pipelines\\pre-generation-pipeline.ts",
          "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
          "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
          "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
          "src\\lib\\analysis\\services\\narrative\\narrative-analysis-service.ts",
          "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
          "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
          "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "src\\lib\\analysis\\utils\\analysis-formatter.ts",
          "src\\lib\\analysis\\utils\\arc-ttils.ts",
          "src\\lib\\analysis\\utils\\serialization-utils.ts",
          "src\\lib\\characters\\analyzers\\character-analyzer.ts",
          "src\\lib\\characters\\analyzers\\relationship-analyzer copy.ts",
          "src\\lib\\characters\\analyzers\\relationship-analyzer.ts",
          "src\\lib\\characters\\analyzers\\timing-analyzer.ts",
          "src\\lib\\characters\\events\\character-event-bus.ts",
          "src\\lib\\characters\\events\\handlers\\character-change-handler.ts",
          "src\\lib\\characters\\events\\handlers\\relationship-change-handler.ts",
          "src\\lib\\characters\\generators\\character-generator.ts",
          "src\\lib\\characters\\generators\\template-provider.ts",
          "src\\lib\\characters\\manager copy 2.ts",
          "src\\lib\\characters\\manager copy 3.ts",
          "src\\lib\\characters\\manager copy 4.ts",
          "src\\lib\\characters\\manager copy.ts",
          "src\\lib\\characters\\services\\character-service copy 2.ts",
          "src\\lib\\characters\\services\\character-service copy.ts",
          "src\\lib\\characters\\services\\character-service.ts",
          "src\\lib\\characters\\services\\detection-service copy 2.ts",
          "src\\lib\\characters\\services\\detection-service copy.ts",
          "src\\lib\\characters\\services\\detection-service.ts",
          "src\\lib\\characters\\services\\evolution-service copy 2.ts",
          "src\\lib\\characters\\services\\evolution-service copy.ts",
          "src\\lib\\characters\\services\\evolution-service.ts",
          "src\\lib\\characters\\services\\parameter-service copy 2.ts",
          "src\\lib\\characters\\services\\parameter-service copy.ts",
          "src\\lib\\characters\\services\\parameter-service.ts",
          "src\\lib\\characters\\services\\psychology-service copy 2.ts",
          "src\\lib\\characters\\services\\psychology-service copy.ts",
          "src\\lib\\characters\\services\\psychology-service.ts",
          "src\\lib\\characters\\services\\relationship-service copy 2.ts",
          "src\\lib\\characters\\services\\relationship-service copy.ts",
          "src\\lib\\characters\\services\\relationship-service.ts",
          "src\\lib\\characters\\services\\skill-service copy 2.ts",
          "src\\lib\\characters\\services\\skill-service copy.ts",
          "src\\lib\\characters\\services\\skill-service.ts",
          "src\\lib\\characters\\utils\\character-utils.ts",
          "src\\lib\\characters\\utils\\serialization-utils.ts",
          "src\\lib\\concept\\business-concept-library.ts",
          "src\\lib\\foreshadowing\\auto-generator.ts",
          "src\\lib\\foreshadowing\\engine.ts",
          "src\\lib\\foreshadowing\\index.ts",
          "src\\lib\\foreshadowing\\manager.ts",
          "src\\lib\\foreshadowing\\planned-foreshadowing-manager.ts",
          "src\\lib\\foreshadowing\\resolution-advisor.ts",
          "src\\lib\\generation\\context-generator copy.ts",
          "src\\lib\\generation\\context-generator.ts",
          "src\\lib\\generation\\engine\\chapter-generator copy.ts",
          "src\\lib\\generation\\engine\\chapter-generator.ts",
          "src\\lib\\generation\\engine\\text-parser.ts",
          "src\\lib\\generation\\gemini-client.ts",
          "src\\lib\\generation\\integrated-system-factory.ts",
          "src\\lib\\generation\\prompt\\memory-service.ts",
          "src\\lib\\generation\\prompt\\prompt-formatter.ts",
          "src\\lib\\generation\\prompt\\section-builder.ts",
          "src\\lib\\generation\\prompt\\template-manager.ts",
          "src\\lib\\generation\\prompt-generator copy 2.ts",
          "src\\lib\\generation\\prompt-generator copy.ts",
          "src\\lib\\generation\\prompt-generator.ts",
          "src\\lib\\learning-journey\\concept-learning-manager.ts",
          "src\\lib\\learning-journey\\context-manager.ts",
          "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
          "src\\lib\\learning-journey\\event-bus.ts",
          "src\\lib\\learning-journey\\index.ts",
          "src\\lib\\learning-journey\\prompt-generator.ts",
          "src\\lib\\learning-journey\\story-transformation-designer.ts",
          "src\\lib\\memory\\core\\data-integration-processor.ts",
          "src\\lib\\memory\\core\\memory-manager copy.ts",
          "src\\lib\\memory\\core\\memory-manager.ts",
          "src\\lib\\memory\\core\\unified-access-api.ts",
          "src\\lib\\memory\\integration\\access-optimizer.ts",
          "src\\lib\\memory\\integration\\cache-coordinator.ts",
          "src\\lib\\memory\\integration\\duplicate-resolver.ts",
          "src\\lib\\memory\\integration\\quality-assurance.ts",
          "src\\lib\\memory\\long-term\\character-database copy 2.ts",
          "src\\lib\\memory\\long-term\\character-database copy.ts",
          "src\\lib\\memory\\long-term\\character-database.ts",
          "src\\lib\\memory\\long-term\\consolidation-guard copy.ts",
          "src\\lib\\memory\\long-term\\consolidation-guard.ts",
          "src\\lib\\memory\\long-term\\duplicate-resolver.ts",
          "src\\lib\\memory\\long-term\\long-term-memory.ts",
          "src\\lib\\memory\\long-term\\system-knowledge.ts",
          "src\\lib\\memory\\long-term\\world-knowledge.ts",
          "src\\lib\\memory\\mid-term\\analysis-results.ts",
          "src\\lib\\memory\\mid-term\\character-evolution.ts",
          "src\\lib\\memory\\mid-term\\mid-term-memory.ts",
          "src\\lib\\memory\\mid-term\\narrative-progression.ts",
          "src\\lib\\memory\\mid-term\\quality-metrics.ts",
          "src\\lib\\memory\\short-term\\generation-cache.ts",
          "src\\lib\\memory\\short-term\\immediate-context.ts",
          "src\\lib\\memory\\short-term\\processing-buffers.ts",
          "src\\lib\\memory\\short-term\\short-term-memory.ts",
          "src\\lib\\memory\\short-term\\temporary-analysis.ts",
          "src\\lib\\memory\\storage\\backup-system.ts",
          "src\\lib\\memory\\storage\\cache-storage.ts",
          "src\\lib\\memory\\storage\\migration-tools.ts",
          "src\\lib\\memory\\storage\\persistent-storage.ts",
          "src\\lib\\parameters\\manager.ts",
          "src\\lib\\plot\\checker.ts",
          "src\\lib\\plot\\context-builder.ts",
          "src\\lib\\plot\\manager copy.ts",
          "src\\lib\\plot\\manager.ts",
          "src\\lib\\plot\\section\\section-analyzer.ts",
          "src\\lib\\plot\\section\\section-bridge.ts",
          "src\\lib\\plot\\section\\section-designer.ts",
          "src\\lib\\plot\\section\\section-plot-manager.ts",
          "src\\lib\\plot\\section\\section-storage.ts",
          "src\\lib\\plot\\storage.ts",
          "src\\lib\\plot\\story-generation-bridge.ts",
          "src\\lib\\plot\\world-settings-manager.ts",
          "src\\lib\\storage\\chapter-storage.ts",
          "src\\lib\\storage\\enhanced-storage.ts",
          "src\\lib\\storage\\github-storage.ts",
          "src\\lib\\storage\\local-storage.ts",
          "src\\lib\\storage\\storage-initializer.ts",
          "src\\lib\\utils\\api-throttle.ts",
          "src\\lib\\utils\\debug\\learning-journey-diagnostics.ts",
          "src\\lib\\utils\\prompt-storage.ts",
          "src\\lib\\utils\\request-queue.ts",
          "src\\lib\\validation\\consistency-checker.ts",
          "src\\lib\\validation\\system.ts"
        ],
        "estimatedImpact": "パフォーマンス30-50%向上"
      },
      {
        "type": "CONSOLIDATE_PROMPTS",
        "priority": "MEDIUM",
        "description": "story_generation用のプロンプト32個を統合",
        "purpose": "story_generation",
        "count": 32,
        "estimatedImpact": "AI呼び出し31回削減"
      },
      {
        "type": "CONSOLIDATE_PROMPTS",
        "priority": "MEDIUM",
        "description": "unknown用のプロンプト35個を統合",
        "purpose": "unknown",
        "count": 35,
        "estimatedImpact": "AI呼び出し34回削減"
      },
      {
        "type": "CONSOLIDATE_PROMPTS",
        "priority": "MEDIUM",
        "description": "character_analysis用のプロンプト129個を統合",
        "purpose": "character_analysis",
        "count": 129,
        "estimatedImpact": "AI呼び出し128回削減"
      },
      {
        "type": "CONSOLIDATE_PROMPTS",
        "priority": "MEDIUM",
        "description": "content_improvement用のプロンプト4個を統合",
        "purpose": "content_improvement",
        "count": 4,
        "estimatedImpact": "AI呼び出し3回削減"
      },
      {
        "type": "CONSOLIDATE_PROMPTS",
        "priority": "MEDIUM",
        "description": "content_analysis用のプロンプト13個を統合",
        "purpose": "content_analysis",
        "count": 13,
        "estimatedImpact": "AI呼び出し12回削減"
      },
      {
        "type": "CONSOLIDATE_PROMPTS",
        "priority": "MEDIUM",
        "description": "theme_analysis用のプロンプト5個を統合",
        "purpose": "theme_analysis",
        "count": 5,
        "estimatedImpact": "AI呼び出し4回削減"
      }
    ]
  },
  "rawData": {
    "allCalls": [
      {
        "file": "src\\app\\(public)\\chapters\\[id]\\page.tsx",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\app\\(public)\\chapters\\[id]\\page.tsx",
            "type": "template_literal",
            "content": "`\r\n# 第10章: 遥かなる旅路の始まり\r\n\r\n朝日が山の稜線から昇り始めた頃、遥人は既に目を覚ましていた。昨晩の出来事が夢ではなかったことを確かめるように、彼は自分の手のひらを見つめた。かすかに残る傷跡が現実を物語っていた。\r\n\r\n「起きてるんだね」\r\n\r\n静かな声に振り向くと、美咲が小さな焚き火の傍らで朝食の準備をしていた。彼女の表情は昨日よりも柔らかくなっていたが、それでも警戒心は完全には解けていないようだった。\r\n\r\n「ああ、少し考え事をしていた」\r\n\r\n遥人は立ち上がり、背伸びをしながら周囲を見回した。彼らが一夜を過ごした場所は小さな森の中の開けた空間で、頭上では木々の葉がそよ風に揺れていた。\r\n\r\n「今日から本格的な旅が始まるんだな」\r\n\r\n美咲はうなずき、手元の地図を広げた。\r\n「昨日話したように、まずは北にある古都ミレニアを目指すわ。そこで『鍵』についての手がかりが見つかるはず」\r\n\r\n「鍵」——その言葉を聞くだけで、遥人の左手にある不思議な紋章がうずくような感覚があった。二週間前、彼の人生は平凡な高校生のものだった。それが今では、何者かに追われ、理解できない力を宿し...",
            "fullLength": 1351,
            "variables": [],
            "purpose": "story_generation"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\app\\api\\generation\\chapter\\route.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\app\\api\\generation\\chapter\\route.ts",
            "type": "template_literal",
            "content": "`[ServiceContainer統合API] Validating chapter ${chapterNumber} quality with ServiceContainer ValidationSystem`",
            "fullLength": 108,
            "variables": [
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              }
            ],
            "purpose": "unknown"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
        "line": 23,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "import type { PromptGenerator } from '@/lib/generation/prompt-generator';",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 21,
            "content": "import type { MemoryManager } from '@/lib/memory/core/memory-manager';",
            "isCurrent": false
          },
          {
            "line": 22,
            "content": "import type { NovelGenerationEngine } from '@/lib/generation/engine';",
            "isCurrent": false
          },
          {
            "line": 23,
            "content": "import type { PromptGenerator } from '@/lib/generation/prompt-generator';",
            "isCurrent": true
          },
          {
            "line": 24,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 25,
            "content": "// 拡張型定義（ChapterGeneratorと同じ）",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
        "line": 79,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "* ServiceContainer経由でのPromptGenerator直接取得",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 77,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 78,
            "content": "/**",
            "isCurrent": false
          },
          {
            "line": 79,
            "content": "* ServiceContainer経由でのPromptGenerator直接取得",
            "isCurrent": true
          },
          {
            "line": 80,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 81,
            "content": "async function getPromptGenerator(): Promise<PromptGenerator> {",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
        "line": 81,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "async function getPromptGenerator(): Promise<PromptGenerator> {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 79,
            "content": "* ServiceContainer経由でのPromptGenerator直接取得",
            "isCurrent": false
          },
          {
            "line": 80,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 81,
            "content": "async function getPromptGenerator(): Promise<PromptGenerator> {",
            "isCurrent": true
          },
          {
            "line": 82,
            "content": "await ensureSystemInitialized();",
            "isCurrent": false
          },
          {
            "line": 83,
            "content": "const serviceContainer = applicationLifecycleManager.getServiceContainer();",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
        "line": 81,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "async function getPromptGenerator(): Promise<PromptGenerator> {",
        "method": "getPromptGenerator",
        "class": "unknown",
        "surrounding": [
          {
            "line": 79,
            "content": "* ServiceContainer経由でのPromptGenerator直接取得",
            "isCurrent": false
          },
          {
            "line": 80,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 81,
            "content": "async function getPromptGenerator(): Promise<PromptGenerator> {",
            "isCurrent": true
          },
          {
            "line": 82,
            "content": "await ensureSystemInitialized();",
            "isCurrent": false
          },
          {
            "line": 83,
            "content": "const serviceContainer = applicationLifecycleManager.getServiceContainer();",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
        "line": 85,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "// PromptGeneratorは通常ChapterGeneratorの内部で使用されるため、",
        "method": "getPromptGenerator",
        "class": "unknown",
        "surrounding": [
          {
            "line": 83,
            "content": "const serviceContainer = applicationLifecycleManager.getServiceContainer();",
            "isCurrent": false
          },
          {
            "line": 84,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 85,
            "content": "// PromptGeneratorは通常ChapterGeneratorの内部で使用されるため、",
            "isCurrent": true
          },
          {
            "line": 86,
            "content": "// 同じ依存関係で新規作成する",
            "isCurrent": false
          },
          {
            "line": 87,
            "content": "const memoryManager = await serviceContainer.resolve<MemoryManager>('memoryManager');",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
        "line": 89,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "// PromptGeneratorの動的作成",
        "method": "getServiceContainer",
        "class": "unknown",
        "surrounding": [
          {
            "line": 87,
            "content": "const memoryManager = await serviceContainer.resolve<MemoryManager>('memoryManager');",
            "isCurrent": false
          },
          {
            "line": 88,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 89,
            "content": "// PromptGeneratorの動的作成",
            "isCurrent": true
          },
          {
            "line": 90,
            "content": "const { PromptGenerator } = await import('@/lib/generation/prompt-generator');",
            "isCurrent": false
          },
          {
            "line": 91,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
        "line": 90,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "const { PromptGenerator } = await import('@/lib/generation/prompt-generator');",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 88,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 89,
            "content": "// PromptGeneratorの動的作成",
            "isCurrent": false
          },
          {
            "line": 90,
            "content": "const { PromptGenerator } = await import('@/lib/generation/prompt-generator');",
            "isCurrent": true
          },
          {
            "line": 91,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 92,
            "content": "try {",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
        "line": 119,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "return new PromptGenerator(",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 117,
            "content": "}",
            "isCurrent": false
          },
          {
            "line": 118,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 119,
            "content": "return new PromptGenerator(",
            "isCurrent": true
          },
          {
            "line": 120,
            "content": "memoryManager,",
            "isCurrent": false
          },
          {
            "line": 121,
            "content": "worldSettingsManager,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
        "line": 126,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "logger.warn('Some dependencies not available, creating PromptGenerator with minimal dependencies', { error });",
        "method": "catch",
        "class": "unknown",
        "surrounding": [
          {
            "line": 124,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 125,
            "content": "} catch (error) {",
            "isCurrent": false
          },
          {
            "line": 126,
            "content": "logger.warn('Some dependencies not available, creating PromptGenerator with minimal dependencies', { error });",
            "isCurrent": true
          },
          {
            "line": 127,
            "content": "return new PromptGenerator(memoryManager);",
            "isCurrent": false
          },
          {
            "line": 128,
            "content": "}",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
        "line": 127,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "return new PromptGenerator(memoryManager);",
        "method": "warn",
        "class": "unknown",
        "surrounding": [
          {
            "line": 125,
            "content": "} catch (error) {",
            "isCurrent": false
          },
          {
            "line": 126,
            "content": "logger.warn('Some dependencies not available, creating PromptGenerator with minimal dependencies', { error });",
            "isCurrent": false
          },
          {
            "line": 127,
            "content": "return new PromptGenerator(memoryManager);",
            "isCurrent": true
          },
          {
            "line": 128,
            "content": "}",
            "isCurrent": false
          },
          {
            "line": 129,
            "content": "}",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
        "line": 258,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "const promptGenerator = await getPromptGenerator();",
        "method": "ensureSystemInitialized",
        "class": "unknown",
        "surrounding": [
          {
            "line": 256,
            "content": "const memoryManager = await getMemoryManager();",
            "isCurrent": false
          },
          {
            "line": 257,
            "content": "const generationEngine = await getGenerationEngine();",
            "isCurrent": false
          },
          {
            "line": 258,
            "content": "const promptGenerator = await getPromptGenerator();",
            "isCurrent": true
          },
          {
            "line": 259,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 260,
            "content": "logger.info('[Test Prompt API] All services resolved successfully');",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\app\\api\\generation\\test-prompt\\route.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\components\\admin\\analytics\\character-analysis.tsx",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\components\\admin\\analytics\\character-analysis.tsx",
            "type": "template_literal",
            "content": "`px-3 py-1 text-xs rounded-full ${\r\n                      selectedCharacter === character.id\r\n                        ? 'bg-blue-600 text-white'\r\n                        : 'bg-gray-100 text-gray-800 hover:bg-gray-200'\r\n                    }`",
            "fullLength": 241,
            "variables": [
              {
                "type": "template_literal",
                "name": "${\r\n                      selectedCharacter === character.id\r\n                        ? 'bg-blue-600 text-white'\r\n                        : 'bg-gray-100 text-gray-800 hover:bg-gray-200'\r\n                    }"
              },
              {
                "type": "handlebars",
                "name": "{\r\n                      selectedCharacter === character.id\r\n                        ? 'bg-blue-600 text-white'\r\n                        : 'bg-gray-100 text-gray-800 hover:bg-gray-200'\r\n                    }"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\components\\admin\\analytics\\foreshadowing-tracker.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\components\\admin\\character-management\\character-editor.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\components\\admin\\editor\\#\\collaboration-panel copy.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\components\\admin\\editor\\#\\quality-indicators copy 2.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\components\\admin\\editor\\#\\quality-indicators copy.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\components\\admin\\editor\\collaboration-panel.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\components\\admin\\editor\\dashboard.tsx",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\components\\admin\\editor\\dashboard.tsx",
            "type": "template_literal",
            "content": "`ml-1 font-medium ${\r\n                    currentChapter.metadata.qualityScore && currentChapter.metadata.qualityScore > 0.8 \r\n                      ? 'text-green-600' \r\n                      : currentChapter.metadata.qualityScore && currentChapter.metadata.qualityScore > 0.6 \r\n                        ? 'text-yellow-600' \r\n                        : 'text-red-600'\r\n                  }`",
            "fullLength": 387,
            "variables": [
              {
                "type": "template_literal",
                "name": "${\r\n                    currentChapter.metadata.qualityScore && currentChapter.metadata.qualityScore > 0.8 \r\n                      ? 'text-green-600' \r\n                      : currentChapter.metadata.qualityScore && currentChapter.metadata.qualityScore > 0.6 \r\n                        ? 'text-yellow-600' \r\n                        : 'text-red-600'\r\n                  }"
              },
              {
                "type": "handlebars",
                "name": "{\r\n                    currentChapter.metadata.qualityScore && currentChapter.metadata.qualityScore > 0.8 \r\n                      ? 'text-green-600' \r\n                      : currentChapter.metadata.qualityScore && currentChapter.metadata.qualityScore > 0.6 \r\n                        ? 'text-yellow-600' \r\n                        : 'text-red-600'\r\n                  }"
              }
            ],
            "purpose": "unknown"
          },
          {
            "file": "src\\components\\admin\\editor\\dashboard.tsx",
            "type": "template_literal",
            "content": "`font-medium ${\r\n                    character.type === 'MAIN' \r\n                      ? 'text-indigo-600' \r\n                      : character.type === 'SUB' \r\n                        ? 'text-blue-600' \r\n                        : 'text-gray-600'\r\n                  }`",
            "fullLength": 267,
            "variables": [
              {
                "type": "template_literal",
                "name": "${\r\n                    character.type === 'MAIN' \r\n                      ? 'text-indigo-600' \r\n                      : character.type === 'SUB' \r\n                        ? 'text-blue-600' \r\n                        : 'text-gray-600'\r\n                  }"
              },
              {
                "type": "handlebars",
                "name": "{\r\n                    character.type === 'MAIN' \r\n                      ? 'text-indigo-600' \r\n                      : character.type === 'SUB' \r\n                        ? 'text-blue-600' \r\n                        : 'text-gray-600'\r\n                  }"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 2
      },
      {
        "file": "src\\components\\admin\\editor\\dashboard.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\components\\admin\\editor\\diff-viewer.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\components\\admin\\editor\\feedback-panel.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\components\\admin\\editor\\intervention-form.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\components\\admin\\editor\\intervention-history.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\components\\admin\\editor\\learning-insights-panel.tsx",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\components\\admin\\editor\\learning-insights-panel.tsx",
            "type": "template_literal",
            "content": "`text-xs px-2 py-0.5 rounded-full ${\r\n                        improvement.priority === 'HIGH' \r\n                          ? 'bg-red-100 text-red-800' \r\n                          : improvement.priority === 'MEDIUM' \r\n                            ? 'bg-yellow-100 text-yellow-800' \r\n                            : 'bg-blue-100 text-blue-800'\r\n                      }`",
            "fullLength": 363,
            "variables": [
              {
                "type": "template_literal",
                "name": "${\r\n                        improvement.priority === 'HIGH' \r\n                          ? 'bg-red-100 text-red-800' \r\n                          : improvement.priority === 'MEDIUM' \r\n                            ? 'bg-yellow-100 text-yellow-800' \r\n                            : 'bg-blue-100 text-blue-800'\r\n                      }"
              },
              {
                "type": "handlebars",
                "name": "{\r\n                        improvement.priority === 'HIGH' \r\n                          ? 'bg-red-100 text-red-800' \r\n                          : improvement.priority === 'MEDIUM' \r\n                            ? 'bg-yellow-100 text-yellow-800' \r\n                            : 'bg-blue-100 text-blue-800'\r\n                      }"
              }
            ],
            "purpose": "content_improvement"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\components\\admin\\editor\\preview-panel.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\components\\admin\\editor\\quality-indicators.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\components\\admin\\editor\\quick-actions.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\components\\admin\\memory-management\\memory-hierarchy.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\components\\admin\\memory-management\\memory-management.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\components\\public\\chapter-navigation.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\components\\public\\character-spotlight.tsx",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\components\\public\\character-spotlight.tsx",
            "type": "template_literal",
            "content": "`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\r\n                  character.type === 'MAIN' \r\n                    ? 'bg-purple-100 text-purple-800' \r\n                    : character.type === 'SUB' \r\n                    ? 'bg-blue-100 text-blue-800' \r\n                    : 'bg-gray-100 text-gray-800'\r\n                }`",
            "fullLength": 349,
            "variables": [
              {
                "type": "template_literal",
                "name": "${\r\n                  character.type === 'MAIN' \r\n                    ? 'bg-purple-100 text-purple-800' \r\n                    : character.type === 'SUB' \r\n                    ? 'bg-blue-100 text-blue-800' \r\n                    : 'bg-gray-100 text-gray-800'\r\n                }"
              },
              {
                "type": "handlebars",
                "name": "{\r\n                  character.type === 'MAIN' \r\n                    ? 'bg-purple-100 text-purple-800' \r\n                    : character.type === 'SUB' \r\n                    ? 'bg-blue-100 text-blue-800' \r\n                    : 'bg-gray-100 text-gray-800'\r\n                }"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\components\\public\\comment-section.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\components\\public\\progress-tracker.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\components\\public\\reading-controls.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\components\\shared\\alert.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\components\\shared\\breadcrumbs.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\components\\shared\\error-boundary.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\components\\shared\\header.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\components\\shared\\navigation.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 3
          }
        ]
      },
      {
        "file": "src\\components\\shared\\page-title.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\components\\ui\\badge.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\components\\ui\\button.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\components\\ui\\card.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\components\\ui\\charts.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 5
          }
        ]
      },
      {
        "file": "src\\components\\ui\\dialog.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\components\\ui\\input.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\components\\ui\\select.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\components\\ui\\spinner.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\components\\ui\\textarea.tsx",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
        "line": 104,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.client.generateText(finalPrompt, apiOptions)",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 102,
            "content": "// スロットリング付きでAPIリクエスト",
            "isCurrent": false
          },
          {
            "line": 103,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 104,
            "content": "this.client.generateText(finalPrompt, apiOptions)",
            "isCurrent": true
          },
          {
            "line": 105,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 106,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
        "line": 166,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "return this.generateText(prompt, options);",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 164,
            "content": "): Promise<string> {",
            "isCurrent": false
          },
          {
            "line": 165,
            "content": "// 基本的にはgenerateTextと同じだが、将来的に拡張可能にする",
            "isCurrent": false
          },
          {
            "line": 166,
            "content": "return this.generateText(prompt, options);",
            "isCurrent": true
          },
          {
            "line": 167,
            "content": "}",
            "isCurrent": false
          },
          {
            "line": 168,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
        "line": 32,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "this.client = client || new GeminiClient();",
        "method": "constructor",
        "class": "GeminiAdapter",
        "surrounding": [
          {
            "line": 30,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 31,
            "content": "constructor(client?: GeminiClient) {",
            "isCurrent": false
          },
          {
            "line": 32,
            "content": "this.client = client || new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 33,
            "content": "logger.info('GeminiAdapter initialized');",
            "isCurrent": false
          },
          {
            "line": 34,
            "content": "}",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
        "line": 188,
        "category": "promptGeneration",
        "pattern": "promptTemplate",
        "context": "let promptTemplate = '';",
        "method": "truncateContent",
        "class": "unknown",
        "surrounding": [
          {
            "line": 186,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 187,
            "content": "// 分析タイプに基づくプロンプトテンプレートの選択",
            "isCurrent": false
          },
          {
            "line": 188,
            "content": "let promptTemplate = '';",
            "isCurrent": true
          },
          {
            "line": 189,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 190,
            "content": "switch (analysisType.toLowerCase()) {",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
        "line": 192,
        "category": "promptGeneration",
        "pattern": "promptTemplate",
        "context": "promptTemplate = this.getCharacterAnalysisTemplate();",
        "method": "truncateContent",
        "class": "unknown",
        "surrounding": [
          {
            "line": 190,
            "content": "switch (analysisType.toLowerCase()) {",
            "isCurrent": false
          },
          {
            "line": 191,
            "content": "case 'character':",
            "isCurrent": false
          },
          {
            "line": 192,
            "content": "promptTemplate = this.getCharacterAnalysisTemplate();",
            "isCurrent": true
          },
          {
            "line": 193,
            "content": "break;",
            "isCurrent": false
          },
          {
            "line": 194,
            "content": "case 'theme':",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
        "line": 195,
        "category": "promptGeneration",
        "pattern": "promptTemplate",
        "context": "promptTemplate = this.getThemeAnalysisTemplate();",
        "method": "switch",
        "class": "unknown",
        "surrounding": [
          {
            "line": 193,
            "content": "break;",
            "isCurrent": false
          },
          {
            "line": 194,
            "content": "case 'theme':",
            "isCurrent": false
          },
          {
            "line": 195,
            "content": "promptTemplate = this.getThemeAnalysisTemplate();",
            "isCurrent": true
          },
          {
            "line": 196,
            "content": "break;",
            "isCurrent": false
          },
          {
            "line": 197,
            "content": "case 'structure':",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
        "line": 198,
        "category": "promptGeneration",
        "pattern": "promptTemplate",
        "context": "promptTemplate = this.getStructureAnalysisTemplate();",
        "method": "getCharacterAnalysisTemplate",
        "class": "unknown",
        "surrounding": [
          {
            "line": 196,
            "content": "break;",
            "isCurrent": false
          },
          {
            "line": 197,
            "content": "case 'structure':",
            "isCurrent": false
          },
          {
            "line": 198,
            "content": "promptTemplate = this.getStructureAnalysisTemplate();",
            "isCurrent": true
          },
          {
            "line": 199,
            "content": "break;",
            "isCurrent": false
          },
          {
            "line": 200,
            "content": "case 'quality':",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
        "line": 201,
        "category": "promptGeneration",
        "pattern": "promptTemplate",
        "context": "promptTemplate = this.getQualityAnalysisTemplate();",
        "method": "getThemeAnalysisTemplate",
        "class": "unknown",
        "surrounding": [
          {
            "line": 199,
            "content": "break;",
            "isCurrent": false
          },
          {
            "line": 200,
            "content": "case 'quality':",
            "isCurrent": false
          },
          {
            "line": 201,
            "content": "promptTemplate = this.getQualityAnalysisTemplate();",
            "isCurrent": true
          },
          {
            "line": 202,
            "content": "break;",
            "isCurrent": false
          },
          {
            "line": 203,
            "content": "case 'foreshadowing':",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
        "line": 204,
        "category": "promptGeneration",
        "pattern": "promptTemplate",
        "context": "promptTemplate = this.getForeshadowingAnalysisTemplate();",
        "method": "getStructureAnalysisTemplate",
        "class": "unknown",
        "surrounding": [
          {
            "line": 202,
            "content": "break;",
            "isCurrent": false
          },
          {
            "line": 203,
            "content": "case 'foreshadowing':",
            "isCurrent": false
          },
          {
            "line": 204,
            "content": "promptTemplate = this.getForeshadowingAnalysisTemplate();",
            "isCurrent": true
          },
          {
            "line": 205,
            "content": "break;",
            "isCurrent": false
          },
          {
            "line": 206,
            "content": "default:",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
        "line": 207,
        "category": "promptGeneration",
        "pattern": "promptTemplate",
        "context": "promptTemplate = this.getGeneralAnalysisTemplate();",
        "method": "getQualityAnalysisTemplate",
        "class": "unknown",
        "surrounding": [
          {
            "line": 205,
            "content": "break;",
            "isCurrent": false
          },
          {
            "line": 206,
            "content": "default:",
            "isCurrent": false
          },
          {
            "line": 207,
            "content": "promptTemplate = this.getGeneralAnalysisTemplate();",
            "isCurrent": true
          },
          {
            "line": 208,
            "content": "}",
            "isCurrent": false
          },
          {
            "line": 209,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
        "line": 211,
        "category": "promptGeneration",
        "pattern": "promptTemplate",
        "context": "let prompt = promptTemplate",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 209,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 210,
            "content": "// テンプレート変数の置換",
            "isCurrent": false
          },
          {
            "line": 211,
            "content": "let prompt = promptTemplate",
            "isCurrent": true
          },
          {
            "line": 212,
            "content": ".replace('{{content}}', truncatedContent)",
            "isCurrent": false
          },
          {
            "line": 213,
            "content": ".replace('{{analysisType}}', analysisType);",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
        "line": 256,
        "category": "templateUsage",
        "pattern": "getTemplate",
        "context": "getTemplatePrompt(templateName: string): string {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 254,
            "content": "* @returns {string} プロンプトテンプレート",
            "isCurrent": false
          },
          {
            "line": 255,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 256,
            "content": "getTemplatePrompt(templateName: string): string {",
            "isCurrent": true
          },
          {
            "line": 257,
            "content": "// テンプレート名に基づいてプロンプトを返す",
            "isCurrent": false
          },
          {
            "line": 258,
            "content": "switch (templateName) {",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
            "type": "template_literal",
            "content": "`\r\n以下の小説の章に登場するキャラクターを分析してください：\r\n\r\n{{content}}\r\n\r\n{{context}}\r\n\r\n各キャラクターについて以下の情報を含めてJSONで出力してください：\r\n- characterName: キャラクター名\r\n- dialogueCount: 対話の回数（概算）\r\n- significance: 重要度（0〜1の値）\r\n- actions: 主な行動（配列形式）\r\n- emotions: 表現された感情（配列形式）\r\n\r\nJSON形式:\r\n[\r\n  {\r\n    \"characterName\": \"キャラクター名\",\r\n    \"dialogueCount\": 10,\r\n    \"significance\": 0.8,\r\n    \"actions\": [\"行動1\", \"行動2\"],\r\n    \"emotions\": [\"感情1\", \"感情2\"]\r\n  }\r\n]`",
            "fullLength": 408,
            "variables": [
              {
                "type": "handlebars",
                "name": "{{content}"
              },
              {
                "type": "handlebars",
                "name": "{{context}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"characterName\": \"キャラクター名\",\r\n    \"dialogueCount\": 10,\r\n    \"significance\": 0.8,\r\n    \"actions\": [\"行動1\", \"行動2\"],\r\n    \"emotions\": [\"感情1\", \"感情2\"]\r\n  }"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
            "type": "template_literal",
            "content": "`\r\n以下の小説の章に現れるテーマを分析してください：\r\n\r\n{{content}}\r\n\r\n{{context}}\r\n\r\n各テーマについて以下の情報を含めてJSONで出力してください：\r\n- themeName: テーマ名\r\n- expressions: テーマが表現されている例（配列形式）\r\n- strength: 強度（0〜1の値）\r\n- contexts: テーマが現れるコンテキスト（配列形式）\r\n\r\nJSON形式:\r\n[\r\n  {\r\n    \"themeId\": \"テーマID\",\r\n    \"themeName\": \"テーマ名\",\r\n    \"expressions\": [\"表現1\", \"表現2\"],\r\n    \"strength\": 0.8,\r\n    \"contexts\": [\"コンテキスト1\", \"コンテキスト2\"]\r\n  }\r\n]`",
            "fullLength": 379,
            "variables": [
              {
                "type": "handlebars",
                "name": "{{content}"
              },
              {
                "type": "handlebars",
                "name": "{{context}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"themeId\": \"テーマID\",\r\n    \"themeName\": \"テーマ名\",\r\n    \"expressions\": [\"表現1\", \"表現2\"],\r\n    \"strength\": 0.8,\r\n    \"contexts\": [\"コンテキスト1\", \"コンテキスト2\"]\r\n  }"
              }
            ],
            "purpose": "story_generation"
          },
          {
            "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
            "type": "template_literal",
            "content": "`\r\n以下の小説の章の構造を分析してください：\r\n\r\n{{content}}\r\n\r\n{{context}}\r\n\r\n章の構造について以下の情報を含めてJSONで出力してください：\r\n- scenes: シーンの配列\r\n- pacing: ペーシング（0〜1の値）\r\n- tension: 緊張感の推移（配列形式）\r\n- narrative_voice: 語りの声\r\n- transitions: シーン間の遷移の効果\r\n\r\nJSON形式:\r\n{\r\n  \"scenes\": [\r\n    {\r\n      \"type\": \"シーンタイプ\",\r\n      \"title\": \"シーンタイトル\",\r\n      \"characters\": [\"キャラクター1\", \"キャラクター2\"],\r\n      \"location\": \"場所\",\r\n      \"summary\": \"要約\"\r\n    }\r\n  ],\r\n  \"pacing\": 0.7,\r\n  \"tension\": [0.3, 0.5, 0.8, 0.6],\r\n  \"narrative_voice\": \"一人称/三人称/全知視点\",\r\n  \"tr...",
            "fullLength": 540,
            "variables": [
              {
                "type": "handlebars",
                "name": "{{content}"
              },
              {
                "type": "handlebars",
                "name": "{{context}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"scenes\": [\r\n    {\r\n      \"type\": \"シーンタイプ\",\r\n      \"title\": \"シーンタイトル\",\r\n      \"characters\": [\"キャラクター1\", \"キャラクター2\"],\r\n      \"location\": \"場所\",\r\n      \"summary\": \"要約\"\r\n    }"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
            "type": "template_literal",
            "content": "`\r\n以下の小説の章を読んで、品質メトリクスを評価してください：\r\n\r\n{{content}}\r\n\r\n{{context}}\r\n\r\n以下のメトリクスを0〜1の範囲で評価し、JSON形式で出力してください：\r\n- readability: 読みやすさ（文章の明瞭さ、流れのスムーズさ）\r\n- consistency: 整合性（設定や描写の一貫性）\r\n- engagement: 引き込み度（読者の関心を引きつける度合い）\r\n- characterDepiction: キャラクター描写の質\r\n- originality: オリジナリティ、独自性\r\n- coherence: 物語の一貫性\r\n- characterConsistency: キャラクターの一貫性\r\n\r\nJSON形式:\r\n{\r\n  \"readability\": 0.7,\r\n  \"consistency\": 0.8,\r\n  \"engagement\": 0.75,\r\n  \"characterDepiction\": 0.8,\r\n  \"originality\": 0.65,\r\n  \"coherence\": 0.75,\r\n  \"characte...",
            "fullLength": 542,
            "variables": [
              {
                "type": "handlebars",
                "name": "{{content}"
              },
              {
                "type": "handlebars",
                "name": "{{context}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"readability\": 0.7,\r\n  \"consistency\": 0.8,\r\n  \"engagement\": 0.75,\r\n  \"characterDepiction\": 0.8,\r\n  \"originality\": 0.65,\r\n  \"coherence\": 0.75,\r\n  \"characterConsistency\": 0.8,\r\n  \"overall\": 0.75\r\n}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
            "type": "template_literal",
            "content": "`\r\n以下の小説の章に含まれる伏線・予兆を分析してください：\r\n\r\n{{content}}\r\n\r\n{{context}}\r\n\r\n各伏線要素について以下の情報を含めてJSONで出力してください：\r\n- description: 伏線の説明\r\n- text: 伏線が含まれるテキスト\r\n- relatedCharacters: 関連するキャラクター（配列形式）\r\n- plannedResolutionChapter: 推定される伏線回収章（最小値と最大値の配列）\r\n\r\nJSON形式:\r\n[\r\n  {\r\n    \"id\": \"伏線ID\",\r\n    \"description\": \"伏線の説明\",\r\n    \"text\": \"伏線テキスト\",\r\n    \"relatedCharacters\": [\"キャラクター1\", \"キャラクター2\"],\r\n    \"plannedResolutionChapter\": [5, 10]\r\n  }\r\n]`",
            "fullLength": 420,
            "variables": [
              {
                "type": "handlebars",
                "name": "{{content}"
              },
              {
                "type": "handlebars",
                "name": "{{context}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"id\": \"伏線ID\",\r\n    \"description\": \"伏線の説明\",\r\n    \"text\": \"伏線テキスト\",\r\n    \"relatedCharacters\": [\"キャラクター1\", \"キャラクター2\"],\r\n    \"plannedResolutionChapter\": [5, 10]\r\n  }"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 5
      },
      {
        "file": "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\adapters\\interfaces.ts",
        "line": 83,
        "category": "templateUsage",
        "pattern": "getTemplate",
        "context": "getTemplatePrompt(templateName: string): string;",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 81,
            "content": "* @returns プロンプトテンプレート",
            "isCurrent": false
          },
          {
            "line": 82,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 83,
            "content": "getTemplatePrompt(templateName: string): string;",
            "isCurrent": true
          },
          {
            "line": 84,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 85,
            "content": "/**",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\adapters\\interfaces.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\adapters\\storage-adapter.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 3
          },
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\content-analysis-manager.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
            "type": "template_literal",
            "content": "`scene structure narrative progression chapter ${Math.max(1, chapterNumber - 5)} to ${chapterNumber}`",
            "fullLength": 101,
            "variables": [
              {
                "type": "template_literal",
                "name": "${Math.max(1, chapterNumber - 5)}"
              },
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{Math.max(1, chapterNumber - 5)}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              }
            ],
            "purpose": "story_generation"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 6
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\coordinators\\interfaces.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 83
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\coordinators\\optimization-coordinator.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 14
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\core\\interfaces.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 5
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\core\\types.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 23
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
        "line": 382,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "buildGenreAnalysisPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 380,
            "content": "// AI分析を実行",
            "isCurrent": false
          },
          {
            "line": 381,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 382,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 383,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 384,
            "content": "targetLength: 800,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
        "line": 612,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "buildArcOptimizationPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 610,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 611,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 612,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 613,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 614,
            "content": "targetLength: 800,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
        "line": 639,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "buildMotivationEnhancementPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 637,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 638,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 639,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 640,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 641,
            "content": "targetLength: 800,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
        "line": 693,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "buildContrastRecommendationsPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 691,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 692,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 693,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 694,
            "content": "temperature: 0.4,",
            "isCurrent": false
          },
          {
            "line": 695,
            "content": "targetLength: 800,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
        "line": 382,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "buildGenreAnalysisPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 380,
            "content": "// AI分析を実行",
            "isCurrent": false
          },
          {
            "line": 381,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 382,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 383,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 384,
            "content": "targetLength: 800,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
        "line": 612,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "buildArcOptimizationPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 610,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 611,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 612,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 613,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 614,
            "content": "targetLength: 800,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
        "line": 639,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "buildMotivationEnhancementPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 637,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 638,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 639,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 640,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 641,
            "content": "targetLength: 800,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
        "line": 693,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "buildContrastRecommendationsPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 691,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 692,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 693,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 694,
            "content": "temperature: 0.4,",
            "isCurrent": false
          },
          {
            "line": 695,
            "content": "targetLength: 800,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
        "line": 206,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "this.geminiClient = new GeminiClient();",
        "method": "Map",
        "class": "CharacterDepthService",
        "surrounding": [
          {
            "line": 204,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 205,
            "content": "constructor() {",
            "isCurrent": false
          },
          {
            "line": 206,
            "content": "this.geminiClient = new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 207,
            "content": "this.logger = new Logger({ serviceName: 'CharacterDepthService' });",
            "isCurrent": false
          },
          {
            "line": 208,
            "content": "this.logger.info('CharacterDepthService: 最適化版で初期化完了');",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
            "type": "template_literal",
            "content": "`\r\n# キャラクター「${character.name}」の${genre}ジャンル適合性分析\r\n\r\n## キャラクター情報\r\n名前: ${character.name}\r\nタイプ: ${character.type}\r\n説明: ${character.description || 'なし'}\r\n性格特性: ${character.personality?.traits?.join(', ') || 'なし'}\r\n\r\n## ジャンル\r\n${genre}\r\n\r\n## 分析指示\r\nこのキャラクターが${genre}ジャンルの作品により適合するための特性強化推奨を生成してください。\r\n\r\nJSON形式で出力:\r\n{\r\n  \"recommendations\": [\r\n    {\r\n      \"title\": \"推奨タイトル\",\r\n      \"description\": \"詳細説明\",\r\n      \"implementation\": \"実装方法\",\r\n      \"priority\": 0.X\r\n    }\r\n  ]\r\n}\r\n`",
            "fullLength": 470,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${genre}"
              },
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${character.type}"
              },
              {
                "type": "template_literal",
                "name": "${character.description || 'なし'}"
              },
              {
                "type": "template_literal",
                "name": "${character.personality?.traits?.join(', ') || 'なし'}"
              },
              {
                "type": "template_literal",
                "name": "${genre}"
              },
              {
                "type": "template_literal",
                "name": "${genre}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{genre}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{character.type}"
              },
              {
                "type": "handlebars",
                "name": "{character.description || 'なし'}"
              },
              {
                "type": "handlebars",
                "name": "{character.personality?.traits?.join(', ') || 'なし'}"
              },
              {
                "type": "handlebars",
                "name": "{genre}"
              },
              {
                "type": "handlebars",
                "name": "{genre}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"recommendations\": [\r\n    {\r\n      \"title\": \"推奨タイトル\",\r\n      \"description\": \"詳細説明\",\r\n      \"implementation\": \"実装方法\",\r\n      \"priority\": 0.X\r\n    }"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
            "type": "template_literal",
            "content": "`\r\n# キャラクター「${character.name}」のアーク最適化推奨\r\n\r\n## 現在の状況\r\n章番号: ${chapterNumber}\r\n発展段階: ${character.state?.developmentStage || 0}/5\r\n\r\n## 推奨生成指示\r\nキャラクターの成長アークを最適化するための具体的な推奨を生成してください。\r\n\r\nJSON形式で出力:\r\n{\r\n  \"arcRecommendations\": [\r\n    {\r\n      \"title\": \"推奨タイトル\",\r\n      \"description\": \"詳細説明\",\r\n      \"suggestion\": \"実装提案\",\r\n      \"arcPhase\": \"development\",\r\n      \"importance\": 0.X\r\n    }\r\n  ]\r\n}\r\n`",
            "fullLength": 390,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${character.state?.developmentStage || 0}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{character.state?.developmentStage || 0}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"arcRecommendations\": [\r\n    {\r\n      \"title\": \"推奨タイトル\",\r\n      \"description\": \"詳細説明\",\r\n      \"suggestion\": \"実装提案\",\r\n      \"arcPhase\": \"development\",\r\n      \"importance\": 0.X\r\n    }"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
            "type": "template_literal",
            "content": "`\r\n# キャラクター「${character.name}」の動機強化推奨\r\n\r\n## 現在の心理状態\r\n欲求: ${psychology.currentDesires.join(', ')}\r\n恐れ: ${psychology.currentFears.join(', ')}\r\n内的葛藤: ${psychology.internalConflicts?.join(', ') || 'なし'}\r\n\r\n## 推奨生成指示\r\nキャラクターの動機をより深く、複雑にするための推奨を生成してください。\r\n\r\nJSON形式で出力:\r\n{\r\n  \"motivationEnhancements\": [\r\n    {\r\n      \"title\": \"推奨タイトル\",\r\n      \"description\": \"詳細説明\",\r\n      \"implementation\": \"実装方法\",\r\n      \"priority\": 0.X\r\n    }\r\n  ]\r\n}\r\n`",
            "fullLength": 433,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${psychology.currentDesires.join(', ')}"
              },
              {
                "type": "template_literal",
                "name": "${psychology.currentFears.join(', ')}"
              },
              {
                "type": "template_literal",
                "name": "${psychology.internalConflicts?.join(', ') || 'なし'}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{psychology.currentDesires.join(', ')}"
              },
              {
                "type": "handlebars",
                "name": "{psychology.currentFears.join(', ')}"
              },
              {
                "type": "handlebars",
                "name": "{psychology.internalConflicts?.join(', ') || 'なし'}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"motivationEnhancements\": [\r\n    {\r\n      \"title\": \"推奨タイトル\",\r\n      \"description\": \"詳細説明\",\r\n      \"implementation\": \"実装方法\",\r\n      \"priority\": 0.X\r\n    }"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
            "type": "template_literal",
            "content": "`\r\n# キャラクター「${character.name}」のコントラスト推奨\r\n\r\n## 対象キャラクター\r\n${character.name}: ${character.description || 'なし'}\r\n\r\n## 同タイプの他キャラクター\r\n${otherCharacters}\r\n\r\n## 推奨生成指示\r\nこのキャラクターを他の同タイプキャラクターと差別化するための推奨を生成してください。\r\n\r\nJSON形式で出力:\r\n{\r\n  \"contrastRecommendations\": [\r\n    {\r\n      \"title\": \"推奨タイトル\",\r\n      \"description\": \"差別化ポイント\",\r\n      \"implementation\": \"実装方法\",\r\n      \"priority\": 0.X\r\n    }\r\n  ]\r\n}\r\n`",
            "fullLength": 392,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${character.description || 'なし'}"
              },
              {
                "type": "template_literal",
                "name": "${otherCharacters}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{character.description || 'なし'}"
              },
              {
                "type": "handlebars",
                "name": "{otherCharacters}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"contrastRecommendations\": [\r\n    {\r\n      \"title\": \"推奨タイトル\",\r\n      \"description\": \"差別化ポイント\",\r\n      \"implementation\": \"実装方法\",\r\n      \"priority\": 0.X\r\n    }"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 4
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 8
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "line": 390,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "buildGenreAnalysisPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 388,
            "content": "// AI分析を実行",
            "isCurrent": false
          },
          {
            "line": 389,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 390,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 391,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 392,
            "content": "targetLength: 800,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "line": 689,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "buildArcOptimizationPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 687,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 688,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 689,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 690,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 691,
            "content": "targetLength: 800,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "line": 716,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "buildMotivationEnhancementPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 714,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 715,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 716,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 717,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 718,
            "content": "targetLength: 800,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "line": 750,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "buildContrastRecommendationsPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 748,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 749,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 750,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 751,
            "content": "temperature: 0.4,",
            "isCurrent": false
          },
          {
            "line": 752,
            "content": "targetLength: 800,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "line": 390,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "buildGenreAnalysisPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 388,
            "content": "// AI分析を実行",
            "isCurrent": false
          },
          {
            "line": 389,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 390,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 391,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 392,
            "content": "targetLength: 800,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "line": 689,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "buildArcOptimizationPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 687,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 688,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 689,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 690,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 691,
            "content": "targetLength: 800,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "line": 716,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "buildMotivationEnhancementPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 714,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 715,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 716,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 717,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 718,
            "content": "targetLength: 800,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "line": 750,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "buildContrastRecommendationsPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 748,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 749,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 750,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 751,
            "content": "temperature: 0.4,",
            "isCurrent": false
          },
          {
            "line": 752,
            "content": "targetLength: 800,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "line": 210,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "this.geminiClient = new GeminiClient();",
        "method": "constructor",
        "class": "CharacterDepthService",
        "surrounding": [
          {
            "line": 208,
            "content": "private memoryManager: MemoryManager",
            "isCurrent": false
          },
          {
            "line": 209,
            "content": ") {",
            "isCurrent": false
          },
          {
            "line": 210,
            "content": "this.geminiClient = new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 211,
            "content": "this.logger = new Logger({ serviceName: 'CharacterDepthService' });",
            "isCurrent": false
          },
          {
            "line": 212,
            "content": "this.logger.info('CharacterDepthService: ファサードパターン対応版で初期化完了');",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
            "type": "template_literal",
            "content": "`\r\n# キャラクター「${character.name}」の${genre}ジャンル適合性分析\r\n\r\n## キャラクター情報\r\n名前: ${character.name}\r\nタイプ: ${character.type}\r\n説明: ${character.description || 'なし'}\r\n性格特性: ${character.personality?.traits?.join(', ') || 'なし'}\r\n\r\n## ジャンル\r\n${genre}\r\n\r\n## 分析指示\r\nこのキャラクターが${genre}ジャンルの作品により適合するための特性強化推奨を生成してください。\r\n\r\nJSON形式で出力:\r\n{\r\n  \"recommendations\": [\r\n    {\r\n      \"title\": \"推奨タイトル\",\r\n      \"description\": \"詳細説明\",\r\n      \"implementation\": \"実装方法\",\r\n      \"priority\": 0.X\r\n    }\r\n  ]\r\n}\r\n`",
            "fullLength": 470,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${genre}"
              },
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${character.type}"
              },
              {
                "type": "template_literal",
                "name": "${character.description || 'なし'}"
              },
              {
                "type": "template_literal",
                "name": "${character.personality?.traits?.join(', ') || 'なし'}"
              },
              {
                "type": "template_literal",
                "name": "${genre}"
              },
              {
                "type": "template_literal",
                "name": "${genre}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{genre}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{character.type}"
              },
              {
                "type": "handlebars",
                "name": "{character.description || 'なし'}"
              },
              {
                "type": "handlebars",
                "name": "{character.personality?.traits?.join(', ') || 'なし'}"
              },
              {
                "type": "handlebars",
                "name": "{genre}"
              },
              {
                "type": "handlebars",
                "name": "{genre}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"recommendations\": [\r\n    {\r\n      \"title\": \"推奨タイトル\",\r\n      \"description\": \"詳細説明\",\r\n      \"implementation\": \"実装方法\",\r\n      \"priority\": 0.X\r\n    }"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
            "type": "template_literal",
            "content": "`\r\n# キャラクター「${character.name}」のアーク最適化推奨\r\n\r\n## 現在の状況\r\n章番号: ${chapterNumber}\r\n発展段階: ${character.state?.developmentStage || 0}/5\r\n\r\n## 推奨生成指示\r\nキャラクターの成長アークを最適化するための具体的な推奨を生成してください。\r\n\r\nJSON形式で出力:\r\n{\r\n  \"arcRecommendations\": [\r\n    {\r\n      \"title\": \"推奨タイトル\",\r\n      \"description\": \"詳細説明\",\r\n      \"suggestion\": \"実装提案\",\r\n      \"arcPhase\": \"development\",\r\n      \"importance\": 0.X\r\n    }\r\n  ]\r\n}\r\n`",
            "fullLength": 390,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${character.state?.developmentStage || 0}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{character.state?.developmentStage || 0}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"arcRecommendations\": [\r\n    {\r\n      \"title\": \"推奨タイトル\",\r\n      \"description\": \"詳細説明\",\r\n      \"suggestion\": \"実装提案\",\r\n      \"arcPhase\": \"development\",\r\n      \"importance\": 0.X\r\n    }"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
            "type": "template_literal",
            "content": "`\r\n# キャラクター「${character.name}」の動機強化推奨\r\n\r\n## 現在の心理状態\r\n欲求: ${psychology.currentDesires.join(', ')}\r\n恐れ: ${psychology.currentFears.join(', ')}\r\n内的葛藤: ${psychology.internalConflicts?.join(', ') || 'なし'}\r\n\r\n## 推奨生成指示\r\nキャラクターの動機をより深く、複雑にするための推奨を生成してください。\r\n\r\nJSON形式で出力:\r\n{\r\n  \"motivationEnhancements\": [\r\n    {\r\n      \"title\": \"推奨タイトル\",\r\n      \"description\": \"詳細説明\",\r\n      \"implementation\": \"実装方法\",\r\n      \"priority\": 0.X\r\n    }\r\n  ]\r\n}\r\n`",
            "fullLength": 433,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${psychology.currentDesires.join(', ')}"
              },
              {
                "type": "template_literal",
                "name": "${psychology.currentFears.join(', ')}"
              },
              {
                "type": "template_literal",
                "name": "${psychology.internalConflicts?.join(', ') || 'なし'}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{psychology.currentDesires.join(', ')}"
              },
              {
                "type": "handlebars",
                "name": "{psychology.currentFears.join(', ')}"
              },
              {
                "type": "handlebars",
                "name": "{psychology.internalConflicts?.join(', ') || 'なし'}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"motivationEnhancements\": [\r\n    {\r\n      \"title\": \"推奨タイトル\",\r\n      \"description\": \"詳細説明\",\r\n      \"implementation\": \"実装方法\",\r\n      \"priority\": 0.X\r\n    }"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
            "type": "template_literal",
            "content": "`\r\n# キャラクター「${character.name}」のコントラスト推奨\r\n\r\n## 対象キャラクター\r\n${character.name}: ${character.description || 'なし'}\r\n\r\n## 同タイプの他キャラクター\r\n${otherCharacters}\r\n\r\n## 推奨生成指示\r\nこのキャラクターを他の同タイプキャラクターと差別化するための推奨を生成してください。\r\n\r\nJSON形式で出力:\r\n{\r\n  \"contrastRecommendations\": [\r\n    {\r\n      \"title\": \"推奨タイトル\",\r\n      \"description\": \"差別化ポイント\",\r\n      \"implementation\": \"実装方法\",\r\n      \"priority\": 0.X\r\n    }\r\n  ]\r\n}\r\n`",
            "fullLength": 392,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${character.description || 'なし'}"
              },
              {
                "type": "template_literal",
                "name": "${otherCharacters}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{character.description || 'なし'}"
              },
              {
                "type": "handlebars",
                "name": "{otherCharacters}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"contrastRecommendations\": [\r\n    {\r\n      \"title\": \"推奨タイトル\",\r\n      \"description\": \"差別化ポイント\",\r\n      \"implementation\": \"実装方法\",\r\n      \"priority\": 0.X\r\n    }"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 4
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 8
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\character\\interfaces.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 8
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\style\\interfaces.ts",
        "line": 136,
        "category": "aiAnalysis",
        "pattern": "AI.*Analysis",
        "context": "useAIAnalysis?: boolean;",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 134,
            "content": "export interface StyleOptimizationOptions {",
            "isCurrent": false
          },
          {
            "line": 135,
            "content": "/** AI分析を使用するかどうか */",
            "isCurrent": false
          },
          {
            "line": 136,
            "content": "useAIAnalysis?: boolean;",
            "isCurrent": true
          },
          {
            "line": 137,
            "content": "/** 詳細レベル（1-3、高いほど詳細） */",
            "isCurrent": false
          },
          {
            "line": 138,
            "content": "detailLevel?: number;",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\style\\interfaces.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 8
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
        "line": 259,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 257,
            "content": "// APIスロットリングを使用してAIガイダンスを生成",
            "isCurrent": false
          },
          {
            "line": 258,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 259,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 260,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 261,
            "content": "purpose: 'guidance',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
        "line": 529,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 527,
            "content": "// APIスロットリングを使用してAI生成を実行",
            "isCurrent": false
          },
          {
            "line": 528,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 529,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 530,
            "content": "temperature: 0.4,",
            "isCurrent": false
          },
          {
            "line": 531,
            "content": "purpose: 'suggestion',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
        "line": 719,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 717,
            "content": "// APIスロットリングを使用してAI生成を実行",
            "isCurrent": false
          },
          {
            "line": 718,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 719,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 720,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 721,
            "content": "purpose: 'suggestion',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
        "line": 901,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 899,
            "content": "// APIスロットリングを使用してAI生成を実行",
            "isCurrent": false
          },
          {
            "line": 900,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 901,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 902,
            "content": "temperature: 0.4,",
            "isCurrent": false
          },
          {
            "line": 903,
            "content": "purpose: 'suggestion',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
        "line": 1148,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 1146,
            "content": "// APIスロットリングを使用してAI生成を実行",
            "isCurrent": false
          },
          {
            "line": 1147,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 1148,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 1149,
            "content": "temperature: 0.4,",
            "isCurrent": false
          },
          {
            "line": 1150,
            "content": "purpose: 'suggestion',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
        "line": 149,
        "category": "aiAnalysis",
        "pattern": "AI.*Analysis",
        "context": "this.generateStyleGuidanceWithAI(styleAnalysis, context, chapterNumber)",
        "method": "analyzeStyle",
        "class": "unknown",
        "surrounding": [
          {
            "line": 147,
            "content": "// 正しい引数で AI ガイダンスを生成",
            "isCurrent": false
          },
          {
            "line": 148,
            "content": "guidance = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 149,
            "content": "this.generateStyleGuidanceWithAI(styleAnalysis, context, chapterNumber)",
            "isCurrent": true
          },
          {
            "line": 150,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 151,
            "content": "} else {",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
        "line": 818,
        "category": "aiAnalysis",
        "pattern": "AI.*Analysis",
        "context": "const recommendations = await this.generateStructureRecommendationsWithAI(styleAnalysis, context);",
        "method": "info",
        "class": "unknown",
        "surrounding": [
          {
            "line": 816,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 817,
            "content": "// AIを使用した改善提案生成",
            "isCurrent": false
          },
          {
            "line": 818,
            "content": "const recommendations = await this.generateStructureRecommendationsWithAI(styleAnalysis, context);",
            "isCurrent": true
          },
          {
            "line": 819,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 820,
            "content": "// キャッシュに保存",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
            "type": "template_literal",
            "content": "`\r\nあなたは文体最適化の専門家です。以下の情報に基づいて、章${chapterNumber}で使用する最適な文体に関するガイダンスを提供してください。\r\n\r\n## 前章の文体分析結果\r\n${analysisStr}\r\n\r\n${prevChapterSummary ? `",
            "fullLength": 136,
            "variables": [
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${analysisStr}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{analysisStr}"
              }
            ],
            "purpose": "content_analysis"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
            "type": "template_literal",
            "content": "` : ''}\r\n\r\n## 作品情報\r\n- ジャンル: ${genre}\r\n- テーマ: ${theme}\r\n- テンション値: ${tension}\r\n- 章番号: ${chapterNumber}\r\n\r\n## 必要なガイダンス\r\n以下のカテゴリ別に、実用的かつ具体的なガイダンスを提供してください：\r\n1. general: 全般的な文体ガイダンス\r\n2. sentenceStructure: 文構造に関するガイダンス\r\n3. vocabulary: 語彙選択に関するガイダンス \r\n4. rhythm: リズムと文の流れに関するガイダンス\r\n\r\n各カテゴリは配列形式で、少なくとも2つの提案を含めてください。\r\n提案は70〜100文字程度の具体的なアドバイスであるべきです。\r\n\r\nガイダンスを作成する際は以下の点を考慮してください：\r\n- ジャンルに適した文体（例：ミステリーなら簡潔な描写、ファンタジーなら豊かな描写）\r\n- 現在のテンション値に合わせた文体（緊張感の高低）\r\n- 前章の文体分析結果から改善できる点\r\n- 文体の一貫性を保ちながら変化をつける方法\r\n- 単調にならない工...",
            "fullLength": 731,
            "variables": [
              {
                "type": "template_literal",
                "name": "${genre}"
              },
              {
                "type": "template_literal",
                "name": "${theme}"
              },
              {
                "type": "template_literal",
                "name": "${tension}"
              },
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{genre}"
              },
              {
                "type": "handlebars",
                "name": "{theme}"
              },
              {
                "type": "handlebars",
                "name": "{tension}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"general\": [\"ガイダンス1\", \"ガイダンス2\", ...],\r\n  \"sentenceStructure\": [\"ガイダンス1\", \"ガイダンス2\", ...],\r\n  \"vocabulary\": [\"ガイダンス1\", \"ガイダンス2\", ...],\r\n  \"rhythm\": [\"ガイダンス1\", \"ガイダンス2\", ...]\r\n}"
              }
            ],
            "purpose": "content_analysis"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
            "type": "template_literal",
            "content": "`\r\nあなは表現の多様化を専門とするエディターです。以下に示す繰り返し使用されている表現パターンに対して、多様な代替表現を提案してください。\r\n\r\n## 作品情報\r\n- ジャンル: ${genre}\r\n- テーマ: ${theme}\r\n\r\n## 現在のパターン\r\n${JSON.stringify(topPatterns, null, 2)}\r\n\r\n## 指示\r\n各表現に対して2〜3の多様な代替案を提供してください。以下の点を考慮してください：\r\n- ジャンルの雰囲気に合った表現選択\r\n- テーマを効果的に表現する言葉選び\r\n- 日本語の自然さと読みやすさ\r\n- 原文のニュアンスを維持しつつ表現を多様化\r\n\r\n## 出力形式\r\n以下のJSONフォーマットで代替表現を提案してください：\r\n{\r\n  \"verbAlternatives\": {\r\n    \"表現1\": [\"代替1\", \"代替2\", \"代替3\"],\r\n    \"表現2\": [\"代替1\", \"代替2\", \"代替3\"]\r\n  },\r\n  \"adjectiveAlternatives\": {\r\n    \"表現1\": [\"代替1\", \"...",
            "fullLength": 874,
            "variables": [
              {
                "type": "template_literal",
                "name": "${genre}"
              },
              {
                "type": "template_literal",
                "name": "${theme}"
              },
              {
                "type": "template_literal",
                "name": "${JSON.stringify(topPatterns, null, 2)}"
              },
              {
                "type": "handlebars",
                "name": "{genre}"
              },
              {
                "type": "handlebars",
                "name": "{theme}"
              },
              {
                "type": "handlebars",
                "name": "{JSON.stringify(topPatterns, null, 2)}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"verbAlternatives\": {\r\n    \"表現1\": [\"代替1\", \"代替2\", \"代替3\"],\r\n    \"表現2\": [\"代替1\", \"代替2\", \"代替3\"]\r\n  }"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"表現1\": [\"代替1\", \"代替2\", \"代替3\"],\r\n    \"表現2\": [\"代替1\", \"代替2\", \"代替3\"]\r\n  }"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"表現1\": [\"代替1\", \"代替2\", \"代替3\"],\r\n    \"表現2\": [\"代替1\", \"代替2\", \"代替3\"]\r\n  }"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"表現1\": [\"代替1\", \"代替2\", \"代替3\"],\r\n    \"表現2\": [\"代替1\", \"代替2\", \"代替3\"]\r\n  }"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"表現1\": [\"代替1\", \"代替2\", \"代替3\"],\r\n    \"表現2\": [\"代替1\", \"代替2\", \"代替3\"]\r\n  }"
              }
            ],
            "purpose": "theme_analysis"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
            "type": "template_literal",
            "content": "`\r\nあなたは日本語文章の構造に詳しい編集者です。以下の主語パターン分析結果をもとに、文章の改善提案を行ってください。\r\n\r\n## 主語パターン分析\r\n- 主語多様性スコア: ${subjectPatterns.subjectDiversityScore}（0〜1、高いほど多様）\r\n- 繰り返されている主語:\r\n${subjectPatterns.repeatedSubjects.map(s => `",
            "fullLength": 202,
            "variables": [
              {
                "type": "template_literal",
                "name": "${subjectPatterns.subjectDiversityScore}"
              },
              {
                "type": "handlebars",
                "name": "{subjectPatterns.subjectDiversityScore}"
              }
            ],
            "purpose": "content_analysis"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
            "type": "template_literal",
            "content": "`).join('\\n')}\r\n\r\n## 作品情報\r\n- ジャンル: ${context?.genre || '不明'}\r\n- テーマ: ${context?.theme || '不明'}\r\n\r\n## 指示\r\n1. 主語パターンの問題点を特定してください（繰り返しの主語以外にも問題があれば）\r\n2. 具体的な改善提案を5つ提示してください（例を含む具体的なものにしてください）\r\n\r\n## 出力形式\r\n以下のJSON形式で出力してください：\r\n{\r\n  \"score\": 主語多様性スコア,\r\n  \"problems\": [\"問題点1\", \"問題点2\", ...],\r\n  \"suggestions\": [\"改善提案1\", \"改善提案2\", ...]\r\n}\r\n`",
            "fullLength": 332,
            "variables": [
              {
                "type": "template_literal",
                "name": "${context?.genre || '不明'}"
              },
              {
                "type": "template_literal",
                "name": "${context?.theme || '不明'}"
              },
              {
                "type": "handlebars",
                "name": "{context?.genre || '不明'}"
              },
              {
                "type": "handlebars",
                "name": "{context?.theme || '不明'}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"score\": 主語多様性スコア,\r\n  \"problems\": [\"問題点1\", \"問題点2\", ...],\r\n  \"suggestions\": [\"改善提案1\", \"改善提案2\", ...]\r\n}"
              }
            ],
            "purpose": "content_improvement"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
            "type": "template_literal",
            "content": "`\r\nあなたは小説の文構造の専門家です。以下の文体分析結果とコンテキスト情報に基づいて、文構造の改善提案を行ってください。\r\n\r\n## 文体分析結果\r\n${analysisStr}\r\n\r\n## 作品情報\r\n- ジャンル: ${genre}\r\n- テーマ: ${theme}\r\n- テンション値: ${tension}\r\n\r\n## 指示\r\n文構造の改善に焦点を当てた具体的な提案を5つ生成してください。各提案には以下の内容を含めてください：\r\n- タイプ: 改善の種類（バリエーション、リズム、修飾語、主述関係など）\r\n- 問題: 現在の文体における問題や改善点\r\n- 提案: 具体的な改善アイデア\r\n- 例: 改善前と改善後の具体例\r\n\r\n## 出力形式\r\n以下のJSON形式で出力してください：\r\n[\r\n  {\r\n    \"type\": \"改善タイプ\",\r\n    \"issue\": \"問題点の説明\",\r\n    \"suggestion\": \"具体的な改善提案\",\r\n    \"example\": {\r\n      \"before\": \"改善前の例\",\r\n      \"after\": \"改善後の例...",
            "fullLength": 527,
            "variables": [
              {
                "type": "template_literal",
                "name": "${analysisStr}"
              },
              {
                "type": "template_literal",
                "name": "${genre}"
              },
              {
                "type": "template_literal",
                "name": "${theme}"
              },
              {
                "type": "template_literal",
                "name": "${tension}"
              },
              {
                "type": "handlebars",
                "name": "{analysisStr}"
              },
              {
                "type": "handlebars",
                "name": "{genre}"
              },
              {
                "type": "handlebars",
                "name": "{theme}"
              },
              {
                "type": "handlebars",
                "name": "{tension}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"type\": \"改善タイプ\",\r\n    \"issue\": \"問題点の説明\",\r\n    \"suggestion\": \"具体的な改善提案\",\r\n    \"example\": {\r\n      \"before\": \"改善前の例\",\r\n      \"after\": \"改善後の例\"\r\n    }"
              }
            ],
            "purpose": "story_generation"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
            "type": "template_literal",
            "content": "`\r\nあなは表現の多様化を専門とするエディターです。以下の繰り返し使用されている表現に対して、代替表現を提案してください。\r\n\r\n## 作品情報\r\n- ジャンル: ${genre}\r\n- テーマ: ${theme}\r\n\r\n## 繰り返し表現\r\n${limitedRepetitions.map((rep, idx) => `",
            "fullLength": 162,
            "variables": [
              {
                "type": "template_literal",
                "name": "${genre}"
              },
              {
                "type": "template_literal",
                "name": "${theme}"
              },
              {
                "type": "handlebars",
                "name": "{genre}"
              },
              {
                "type": "handlebars",
                "name": "{theme}"
              }
            ],
            "purpose": "theme_analysis"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
            "type": "template_literal",
            "content": "`).join('\\n')}\r\n\r\n## 指示\r\n各表現に対して3〜5の多様な代替案を提供してください。以下の点を考慮してください：\r\n- ジャンルの雰囲気に合った表現選択\r\n- 日本語の自然さと読みやすさ\r\n- 原文のニュアンスを維持しつつ表現を多様化\r\n- それぞれの代替案は異なる表現であること\r\n\r\n## 出力形式\r\n以下のJSON配列形式で代替表現を提案してください：\r\n[\r\n  {\r\n    \"original\": \"元の表現\",\r\n    \"alternatives\": [\"代替1\", \"代替2\", \"代替3\", ...],\r\n    \"context\": \"この表現が使われる一般的な文脈\"\r\n  },\r\n  ...\r\n]\r\n`",
            "fullLength": 324,
            "variables": [
              {
                "type": "handlebars",
                "name": "{\r\n    \"original\": \"元の表現\",\r\n    \"alternatives\": [\"代替1\", \"代替2\", \"代替3\", ...],\r\n    \"context\": \"この表現が使われる一般的な文脈\"\r\n  }"
              }
            ],
            "purpose": "unknown"
          }
        ],
        "count": 8
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\tension\\interfaces.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 7
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
        "line": 1186,
        "category": "geminiCalls",
        "pattern": "\\.generateContent\\s*\\(",
        "context": "this.geminiAdapter.generateContent(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 1184,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 1185,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 1186,
            "content": "this.geminiAdapter.generateContent(prompt, {",
            "isCurrent": true
          },
          {
            "line": 1187,
            "content": "temperature: 0.7,",
            "isCurrent": false
          },
          {
            "line": 1188,
            "content": "purpose: 'analysis'",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
        "line": 1580,
        "category": "geminiCalls",
        "pattern": "\\.generateContent\\s*\\(",
        "context": "this.geminiAdapter.generateContent(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 1578,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 1579,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 1580,
            "content": "this.geminiAdapter.generateContent(prompt, {",
            "isCurrent": true
          },
          {
            "line": 1581,
            "content": "temperature: 0.2,",
            "isCurrent": false
          },
          {
            "line": 1582,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
            "type": "template_literal",
            "content": "`\r\nあなたは物語テンションとペーシングの専門家です。以下の情報に基づいて、具体的なテンション最適化の提案を3つ生成してください。\r\n\r\n章番号: ${chapterNumber}\r\n現在のテンション値: ${currentTension} (0～1の範囲)\r\n推奨テンション値: ${recommendation.tension.recommendedTension} (0～1の範囲)\r\n推奨理由: ${recommendation.tension.reason}\r\n方向性: ${recommendation.tension.direction}\r\n推奨ペーシング: ${recommendation.pacing.recommendedPacing} (0～1の範囲)\r\nペーシング説明: ${recommendation.pacing.description}\r\n\r\n提案では以下の点に注意してください:\r\n- テンション値を ${direction === \"increase\" ? \"上げる\" : direction === \"decrease\" ? \"下げる\" : \"維持する\"} 具...",
            "fullLength": 686,
            "variables": [
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${currentTension}"
              },
              {
                "type": "template_literal",
                "name": "${recommendation.tension.recommendedTension}"
              },
              {
                "type": "template_literal",
                "name": "${recommendation.tension.reason}"
              },
              {
                "type": "template_literal",
                "name": "${recommendation.tension.direction}"
              },
              {
                "type": "template_literal",
                "name": "${recommendation.pacing.recommendedPacing}"
              },
              {
                "type": "template_literal",
                "name": "${recommendation.pacing.description}"
              },
              {
                "type": "template_literal",
                "name": "${direction === \"increase\" ? \"上げる\" : direction === \"decrease\" ? \"下げる\" : \"維持する\"}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{currentTension}"
              },
              {
                "type": "handlebars",
                "name": "{recommendation.tension.recommendedTension}"
              },
              {
                "type": "handlebars",
                "name": "{recommendation.tension.reason}"
              },
              {
                "type": "handlebars",
                "name": "{recommendation.tension.direction}"
              },
              {
                "type": "handlebars",
                "name": "{recommendation.pacing.recommendedPacing}"
              },
              {
                "type": "handlebars",
                "name": "{recommendation.pacing.description}"
              },
              {
                "type": "handlebars",
                "name": "{direction === \"increase\" ? \"上げる\" : direction === \"decrease\" ? \"下げる\" : \"維持する\"}"
              }
            ],
            "purpose": "story_generation"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
            "type": "template_literal",
            "content": "`\r\nあなは物語のテンション設計に関する専門家です。次の章のテンション値に対する調整を提案してください。\r\n\r\n章番号: ${chapterNumber}\r\nジャンル: ${genre}\r\n基本テンション値: ${baseTension}\r\n\r\n物語テンションの調整において考慮すべき点:\r\n1. ジャンル「${genre}」の特性\r\n2. 物語のリズムとバリエーション\r\n3. 読者の期待と心理的効果\r\n4. 芸術的なテンション設計\r\n\r\n提案する調整値（-0.2～+0.2の範囲内）と、その調整理由、および方向性（increase/decrease/maintain）を簡潔に説明してください。\r\n回答は下記のJSON形式で提供してください:\r\n\r\n{\r\n  \"adjustment\": 数値（-0.2～0.2の範囲内）,\r\n  \"reason\": \"調整理由の簡潔な説明\",\r\n  \"direction\": \"increase/decrease/maintain\"\r\n}\r\n`",
            "fullLength": 441,
            "variables": [
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${genre}"
              },
              {
                "type": "template_literal",
                "name": "${baseTension}"
              },
              {
                "type": "template_literal",
                "name": "${genre}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{genre}"
              },
              {
                "type": "handlebars",
                "name": "{baseTension}"
              },
              {
                "type": "handlebars",
                "name": "{genre}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"adjustment\": 数値（-0.2～0.2の範囲内）,\r\n  \"reason\": \"調整理由の簡潔な説明\",\r\n  \"direction\": \"increase/decrease/maintain\"\r\n}"
              }
            ],
            "purpose": "story_generation"
          }
        ],
        "count": 2
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 1
          },
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\theme\\interfaces.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
        "line": 450,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 448,
            "content": "// APIスロットリングを使用してAI生成を実行",
            "isCurrent": false
          },
          {
            "line": 449,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 450,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 451,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 452,
            "content": "purpose: 'suggestion',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
        "line": 551,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 549,
            "content": "// APIスロットリングを使用してAI生成を実行",
            "isCurrent": false
          },
          {
            "line": 550,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 551,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 552,
            "content": "temperature: 0.4,",
            "isCurrent": false
          },
          {
            "line": 553,
            "content": "purpose: 'suggestion',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
        "line": 633,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 631,
            "content": "// APIスロットリングを使用してAI生成を実行",
            "isCurrent": false
          },
          {
            "line": 632,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 633,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 634,
            "content": "temperature: 0.4,",
            "isCurrent": false
          },
          {
            "line": 635,
            "content": "purpose: 'suggestion',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
        "line": 717,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 715,
            "content": "// APIスロットリングを使用してAI生成を実行",
            "isCurrent": false
          },
          {
            "line": 716,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 717,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 718,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 719,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
        "line": 801,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 799,
            "content": "// APIスロットリングを使用してAI生成を実行",
            "isCurrent": false
          },
          {
            "line": 800,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 801,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 802,
            "content": "temperature: 0.4,",
            "isCurrent": false
          },
          {
            "line": 803,
            "content": "purpose: 'suggestion',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "type": "template_literal",
            "content": "`\r\nあなたは文学のテーマと象徴性の専門家です。以下の情報に基づいて、テーマを効果的に表現・強化するための具体的な提案を生成してください。\r\n\r\n## テーマ分析結果\r\n主要テーマ: ${themes.join(', ')}\r\n${themeStrengths.map(t => `",
            "fullLength": 141,
            "variables": [
              {
                "type": "template_literal",
                "name": "${themes.join(', ')}"
              },
              {
                "type": "handlebars",
                "name": "{themes.join(', ')}"
              }
            ],
            "purpose": "content_analysis"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "type": "template_literal",
            "content": "`).join('\\n')}\r\n\r\n## コンテキスト情報\r\n- 章番号: ${request.chapterNumber}\r\n- ストーリーフェーズ: ${request.storyPhase}\r\n- ジャンル: ${request.genre}\r\n\r\n## 指示\r\nこのストーリーフェーズ（${request.storyPhase}）とジャンルに適した方法で、各テーマをより効果的に表現・強化するための具体的な提案を生成してください。\r\n各テーマについて、${Math.min(themes.length * 2, 5)}つの提案を作成してください。\r\n\r\n提案は以下の要素を含むべきです：\r\n1. 具体的なアプローチ（例：象徴の使用、対比、メタファー、キャラクターの行動/選択を通じた表現など）\r\n2. 具体例の提示\r\n3. 期待される読者への効果\r\n4. この章の文脈での適用方法\r\n\r\n各テーマについて現在の強度を考慮し、弱いテーマにはより多くの強化提案を提供してください。\r\n${phaseStrategy}\r\n${genreStrategy}\r\n\r\n## 出力形式\r\n以下のJSON配列...",
            "fullLength": 720,
            "variables": [
              {
                "type": "template_literal",
                "name": "${request.chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${request.storyPhase}"
              },
              {
                "type": "template_literal",
                "name": "${request.genre}"
              },
              {
                "type": "template_literal",
                "name": "${request.storyPhase}"
              },
              {
                "type": "template_literal",
                "name": "${Math.min(themes.length * 2, 5)}"
              },
              {
                "type": "template_literal",
                "name": "${phaseStrategy}"
              },
              {
                "type": "template_literal",
                "name": "${genreStrategy}"
              },
              {
                "type": "handlebars",
                "name": "{request.chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{request.storyPhase}"
              },
              {
                "type": "handlebars",
                "name": "{request.genre}"
              },
              {
                "type": "handlebars",
                "name": "{request.storyPhase}"
              },
              {
                "type": "handlebars",
                "name": "{Math.min(themes.length * 2, 5)}"
              },
              {
                "type": "handlebars",
                "name": "{phaseStrategy}"
              },
              {
                "type": "handlebars",
                "name": "{genreStrategy}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"theme\": \"テーマ名\",\r\n    \"currentStrength\": 0.7,\r\n    \"suggestion\": \"具体的な改善提案の説明\",\r\n    \"approach\": \"使用するアプローチ（象徴、対比、メタファーなど）\",\r\n    \"example\": \"具体例\",\r\n    \"impact\": \"期待される効果\"\r\n  }"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "type": "template_literal",
            "content": "`\r\nあなたは文学技法の専門家です。以下の情報に基づいて、この章で効果的に使用できる文学技法の提案を生成してください。\r\n\r\n## コンテキスト情報\r\n- 章番号: ${request.chapterNumber}\r\n- 物語の進行度: 約${Math.round(progress * 100)}%\r\n- ストーリーフェーズ: ${request.storyPhase}\r\n- ジャンル: ${request.genre}\r\n- テーマ: ${request.themeSettings || '明確なテーマ情報なし'}\r\n- テンション値: ${request.tension.toFixed(2)}（0〜1、高いほど緊張感が高い）\r\n\r\n## 世界設定\r\n${request.worldSettings ? request.worldSettings.substring(0, 500) + '...' : '世界設定情報なし'}\r\n\r\n## 指示\r\nこの章で効果的に使用できる文学技法を3つのカテゴリに分けて提案してください：\r\n1. プロット技法（物語展開に関する技法）\r\n2. キャラクタ...",
            "fullLength": 1022,
            "variables": [
              {
                "type": "template_literal",
                "name": "${request.chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${Math.round(progress * 100)}"
              },
              {
                "type": "template_literal",
                "name": "${request.storyPhase}"
              },
              {
                "type": "template_literal",
                "name": "${request.genre}"
              },
              {
                "type": "template_literal",
                "name": "${request.themeSettings || '明確なテーマ情報なし'}"
              },
              {
                "type": "template_literal",
                "name": "${request.tension.toFixed(2)}"
              },
              {
                "type": "template_literal",
                "name": "${request.worldSettings ? request.worldSettings.substring(0, 500) + '...' : '世界設定情報なし'}"
              },
              {
                "type": "template_literal",
                "name": "${phaseStrategy}"
              },
              {
                "type": "template_literal",
                "name": "${genreStrategy}"
              },
              {
                "type": "handlebars",
                "name": "{request.chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{Math.round(progress * 100)}"
              },
              {
                "type": "handlebars",
                "name": "{request.storyPhase}"
              },
              {
                "type": "handlebars",
                "name": "{request.genre}"
              },
              {
                "type": "handlebars",
                "name": "{request.themeSettings || '明確なテーマ情報なし'}"
              },
              {
                "type": "handlebars",
                "name": "{request.tension.toFixed(2)}"
              },
              {
                "type": "handlebars",
                "name": "{request.worldSettings ? request.worldSettings.substring(0, 500) + '...' : '世界設定情報なし'}"
              },
              {
                "type": "handlebars",
                "name": "{phaseStrategy}"
              },
              {
                "type": "handlebars",
                "name": "{genreStrategy}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"plotTechniques\": [\r\n    {\r\n      \"technique\": \"技法名\",\r\n      \"description\": \"技法の説明\",\r\n      \"example\": \"この章での適用例\",\r\n      \"reference\": \"参考となる典型的な使用例\"\r\n    }"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "type": "template_literal",
            "content": "`\r\nあなたは文学的象徴と隠喩の専門家です。以下のテーマに対して、物語で使用できる効果的な象徴要素を提案してください。\r\n\r\n## テーマ\r\n${themes.join(', ')}\r\n\r\n## コンテキスト情報\r\n- 章番号: ${chapterNumber}\r\n- ジャンル: ${genre || 'general'}\r\n\r\n## 指示\r\n各テーマについて、2〜3の象徴要素を提案してください。各象徴要素には以下の情報を含めてください：\r\n- 象徴の名前/種類\r\n- 象徴の説明（テーマとの関連性）\r\n- 物語での使用方法\r\n- 期待される効果\r\n- 過度の使用を避けるための注意点\r\n\r\n${genreStrategy}\r\n\r\n## 出力形式\r\n以下のJSON配列形式で出力してください：\r\n[\r\n  {\r\n    \"theme\": \"テーマ名\",\r\n    \"symbolName\": \"象徴名\",\r\n    \"description\": \"象徴の説明\",\r\n    \"usage\": \"物語での使用方法\",\r\n    \"effect\": \"期待される効果\",\r\n    \"caution\"...",
            "fullLength": 530,
            "variables": [
              {
                "type": "template_literal",
                "name": "${themes.join(', ')}"
              },
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${genre || 'general'}"
              },
              {
                "type": "template_literal",
                "name": "${genreStrategy}"
              },
              {
                "type": "handlebars",
                "name": "{themes.join(', ')}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{genre || 'general'}"
              },
              {
                "type": "handlebars",
                "name": "{genreStrategy}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"theme\": \"テーマ名\",\r\n    \"symbolName\": \"象徴名\",\r\n    \"description\": \"象徴の説明\",\r\n    \"usage\": \"物語での使用方法\",\r\n    \"effect\": \"期待される効果\",\r\n    \"caution\": \"使用時の注意点\"\r\n  }"
              }
            ],
            "purpose": "story_generation"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "type": "template_literal",
            "content": "`\r\nあなたは物語の伏線と構造の専門家です。以下のテキストを分析し、将来の伏線展開のために活用できる機会を特定してください。\r\n\r\n## テキスト（章${chapterNumber}）\r\n${truncatedContent}\r\n\r\n## 主要テーマ\r\n${themes.join(', ')}\r\n\r\n## 指示\r\nこのテキスト内で、将来の展開につながる伏線として活用できる要素（会話、描写、オブジェクト、状況など）を最大5つ特定してください。\r\n各機会について以下の情報を提供してください：\r\n- 伏線になり得る要素\r\n- テキスト内の位置（大まかで構いません）\r\n- 将来の展開での活用方法（複数の可能性）\r\n- 推奨される解決章（現在の章から何章後が適切か）\r\n- テーマとの関連性\r\n\r\n## 出力形式\r\n以下のJSON配列形式で出力してください：\r\n[\r\n  {\r\n    \"element\": \"伏線要素\",\r\n    \"textPosition\": \"テキスト内の位置の説明\",\r\n    \"possibleDevelopments\": [\"可能性1\", \"可能性2\", ...],\r\n...",
            "fullLength": 627,
            "variables": [
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${truncatedContent}"
              },
              {
                "type": "template_literal",
                "name": "${themes.join(', ')}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{truncatedContent}"
              },
              {
                "type": "handlebars",
                "name": "{themes.join(', ')}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"element\": \"伏線要素\",\r\n    \"textPosition\": \"テキスト内の位置の説明\",\r\n    \"possibleDevelopments\": [\"可能性1\", \"可能性2\", ...],\r\n    \"suggestedResolutionChapter\": チャプター番号,\r\n    \"relatedTheme\": \"関連するテーマ\",\r\n    \"importance\": 0.8 // 0〜1の重要度\r\n  }"
              }
            ],
            "purpose": "story_generation"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "type": "template_literal",
            "content": "`\r\nあなたは文学的技法の専門家です。以下のテーマに対して、効果的に表現するための文学的技法を提案してください。\r\n\r\n## テーマ\r\n${theme}\r\n\r\n## ジャンル\r\n${genre || 'general'}\r\n\r\n## 指示\r\nこのテーマを効果的に表現するために使用できる5つの文学的技法を提案してください。\r\n各技法について以下の情報を提供してください：\r\n- 技法名\r\n- 技法の説明\r\n- 具体的な使用例\r\n- 期待される効果\r\n- 適切なジャンルと文脈\r\n\r\n${genreStrategy}\r\n\r\n技法はなるべく多様なものを選び、直接的なものと間接的なものをバランスよく提案してください。\r\n\r\n## 出力形式\r\n以下のJSON配列形式で出力してください：\r\n[\r\n  {\r\n    \"techniqueName\": \"技法名\",\r\n    \"description\": \"技法の説明\",\r\n    \"example\": \"具体的な使用例\",\r\n    \"effect\": \"期待される効果\",\r\n    \"suitableGenres\": [\"適切なジャンル1\", \"適切な...",
            "fullLength": 575,
            "variables": [
              {
                "type": "template_literal",
                "name": "${theme}"
              },
              {
                "type": "template_literal",
                "name": "${genre || 'general'}"
              },
              {
                "type": "template_literal",
                "name": "${genreStrategy}"
              },
              {
                "type": "handlebars",
                "name": "{theme}"
              },
              {
                "type": "handlebars",
                "name": "{genre || 'general'}"
              },
              {
                "type": "handlebars",
                "name": "{genreStrategy}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"techniqueName\": \"技法名\",\r\n    \"description\": \"技法の説明\",\r\n    \"example\": \"具体的な使用例\",\r\n    \"effect\": \"期待される効果\",\r\n    \"suitableGenres\": [\"適切なジャンル1\", \"適切なジャンル2\", ...],\r\n    \"themeRelevance\": 0.9 // 0〜1のテーマとの関連性\r\n  }"
              }
            ],
            "purpose": "theme_analysis"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "type": "template_literal",
            "content": "`\r\nこのOPENINGフェーズでは、テーマを巧妙に導入することが重要です。\r\n- テーマの直接的な説明は避け、象徴や状況を通じて暗示してください\r\n- 後の展開のための伏線を自然に配置してください\r\n- キャラクターの初期状態を確立し、成長の余地を示してください`",
            "fullLength": 133,
            "variables": [],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "type": "template_literal",
            "content": "`\r\nこのEARLYフェーズでは、テーマの基盤を確立することが重要です。\r\n- テーマの初期的な探索を始めてください\r\n- キャラクターの行動や選択を通じてテーマを示してください\r\n- テーマに関連する世界観要素をより詳細に導入してください`",
            "fullLength": 121,
            "variables": [],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "type": "template_literal",
            "content": "`\r\nこのLATEフェーズでは、テーマの収束と深化を図ることが重要です。\r\n- テーマの複雑な意味合いを解決に向けて収束させ始めてください\r\n- キャラクターの変化とテーマの関連性をより明確にしてください\r\n- 初期の伏線を回収し始め、テーマとの関連を示してください`",
            "fullLength": 134,
            "variables": [],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "type": "template_literal",
            "content": "`\r\nこのCLIMAXフェーズでは、テーマの劇的な表現と総合を行うことが重要です。\r\n- テーマを劇的な場面や選択の中で頂点に達せしめてください\r\n- それまでの伏線や象徴を有機的に結びつけてください\r\n- キャラクターの最終的な選択をテーマと強く関連づけてください`",
            "fullLength": 134,
            "variables": [],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "type": "template_literal",
            "content": "`\r\nこのフェーズでは、物語の現状に合わせたテーマの表現を心がけてください。\r\n- 物語の流れを妨げない自然な形でテーマを表現してください\r\n- キャラクターの行動や選択を通じてテーマを示してください\r\n- 象徴や隠喩を適切に活用してください`",
            "fullLength": 122,
            "variables": [],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
            "type": "template_literal",
            "content": "`\r\nこのジャンルでは、より直接的なアプローチも効果的です：\r\n- キャラクターの行動や選択を通じてテーマを表現\r\n- 会話や内的独白でテーマに関連する思考を明示\r\n- 状況やプロットの展開を通じてテーマを体現`",
            "fullLength": 106,
            "variables": [],
            "purpose": "character_analysis"
          }
        ],
        "count": 12
      },
      {
        "file": "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\pipelines\\post-generation-pipeline.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\pipelines\\pre-generation-pipeline.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
        "line": 182,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(qualityPrompt, {",
        "method": "info",
        "class": "unknown",
        "surrounding": [
          {
            "line": 180,
            "content": "// APIスロットリングを使用して品質分析を実行",
            "isCurrent": false
          },
          {
            "line": 181,
            "content": "const qualityResponse = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 182,
            "content": "this.geminiAdapter.generateText(qualityPrompt, {",
            "isCurrent": true
          },
          {
            "line": 183,
            "content": "temperature: 0.1,",
            "isCurrent": false
          },
          {
            "line": 184,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
        "line": 290,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(characterPrompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 288,
            "content": "// APIスロットリングを使用してキャラクター分析を実行",
            "isCurrent": false
          },
          {
            "line": 289,
            "content": "const characterResponse = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 290,
            "content": "this.geminiAdapter.generateText(characterPrompt, {",
            "isCurrent": true
          },
          {
            "line": 291,
            "content": "temperature: 0.2,",
            "isCurrent": false
          },
          {
            "line": 292,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
        "line": 354,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(keywordPrompt, {",
        "method": "info",
        "class": "unknown",
        "surrounding": [
          {
            "line": 352,
            "content": "// APIスロットリングを使用してキーワード抽出を実行",
            "isCurrent": false
          },
          {
            "line": 353,
            "content": "const keywordResponse = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 354,
            "content": "this.geminiAdapter.generateText(keywordPrompt, {",
            "isCurrent": true
          },
          {
            "line": 355,
            "content": "temperature: 0.2,",
            "isCurrent": false
          },
          {
            "line": 356,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
        "line": 791,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(analysisPrompt, {",
        "method": "createBaseAnalysisPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 789,
            "content": "// APIスロットリングを使用して分析を実行",
            "isCurrent": false
          },
          {
            "line": 790,
            "content": "const analysisResponse = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 791,
            "content": "this.geminiAdapter.generateText(analysisPrompt, {",
            "isCurrent": true
          },
          {
            "line": 792,
            "content": "temperature: 0.1, // 分析タスクのため低温に設定",
            "isCurrent": false
          },
          {
            "line": 793,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
        "line": 881,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(scenePrompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 879,
            "content": "// APIスロットリングを使用してシーン抽出を実行",
            "isCurrent": false
          },
          {
            "line": 880,
            "content": "const sceneResponse = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 881,
            "content": "this.geminiAdapter.generateText(scenePrompt, {",
            "isCurrent": true
          },
          {
            "line": 882,
            "content": "temperature: 0.2,",
            "isCurrent": false
          },
          {
            "line": 883,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
            "type": "template_literal",
            "content": "`\r\n以下の小説の章を読んで、品質メトリクスを評価してください：\r\n\r\n${content.substring(0, 8000)}\r\n\r\n以下のメトリクスを0〜1の範囲で評価し、JSON形式で出力してください：\r\n- readability: 読みやすさ（文章の明瞭さ、流れのスムーズさ）\r\n- consistency: 整合性（設定や描写の一貫性）\r\n- engagement: 引き込み度（読者の関心を引きつける度合い）\r\n- characterDepiction: キャラクター描写の質\r\n- originality: オリジナリティ、独自性\r\n- coherence: 物語の一貫性\r\n- characterConsistency: キャラクターの一貫性\r\n\r\nJSON形式:\r\n{\r\n  \"readability\": 0.7,\r\n  \"consistency\": 0.8,\r\n  \"engagement\": 0.75,\r\n  \"characterDepiction\": 0.8,\r\n  \"originality\": 0.65,\r\n  \"coherence\": 0.75,\r\n  \"chara...",
            "fullLength": 545,
            "variables": [
              {
                "type": "template_literal",
                "name": "${content.substring(0, 8000)}"
              },
              {
                "type": "handlebars",
                "name": "{content.substring(0, 8000)}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"readability\": 0.7,\r\n  \"consistency\": 0.8,\r\n  \"engagement\": 0.75,\r\n  \"characterDepiction\": 0.8,\r\n  \"originality\": 0.65,\r\n  \"coherence\": 0.75,\r\n  \"characterConsistency\": 0.8,\r\n  \"overall\": 0.75\r\n}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
            "type": "template_literal",
            "content": "`\r\n以下の小説の章に登場するキャラクターとその重要度を分析してください：\r\n\r\n${content.substring(0, 8000)}\r\n\r\n各キャラクターについて以下の情報を含めてJSONで出力してください：\r\n- characterName: キャラクター名\r\n- dialogueCount: 対話の回数（概算）\r\n- significance: 重要度（0〜1の値）\r\n- actions: 主な行動（配列形式）\r\n- emotions: 表現された感情（配列形式）\r\n\r\nJSON形式:\r\n[\r\n  {\r\n    \"characterName\": \"キャラクター名\",\r\n    \"dialogueCount\": 10,\r\n    \"significance\": 0.8,\r\n    \"actions\": [\"行動1\", \"行動2\"],\r\n    \"emotions\": [\"感情1\", \"感情2\"]\r\n  }\r\n]`",
            "fullLength": 417,
            "variables": [
              {
                "type": "template_literal",
                "name": "${content.substring(0, 8000)}"
              },
              {
                "type": "handlebars",
                "name": "{content.substring(0, 8000)}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"characterName\": \"キャラクター名\",\r\n    \"dialogueCount\": 10,\r\n    \"significance\": 0.8,\r\n    \"actions\": [\"行動1\", \"行動2\"],\r\n    \"emotions\": [\"感情1\", \"感情2\"]\r\n  }"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
            "type": "template_literal",
            "content": "`\r\n以下の小説の章から重要なキーワードを抽出してください：\r\n\r\n${content.substring(0, 8000)}\r\n\r\n以下のカテゴリに分類して、JSONで出力してください：\r\n- characters: 登場人物の名前\r\n- locations: 場所\r\n- objects: 重要なオブジェクト\r\n- concepts: 重要な概念\r\n- events: 重要なイベント\r\n\r\nJSON形式:\r\n{\r\n  \"characters\": [\"名前1\", \"名前2\"],\r\n  \"locations\": [\"場所1\", \"場所2\"],\r\n  \"objects\": [\"オブジェクト1\", \"オブジェクト2\"],\r\n  \"concepts\": [\"概念1\", \"概念2\"],\r\n  \"events\": [\"イベント1\", \"イベント2\"]\r\n}`",
            "fullLength": 378,
            "variables": [
              {
                "type": "template_literal",
                "name": "${content.substring(0, 8000)}"
              },
              {
                "type": "handlebars",
                "name": "{content.substring(0, 8000)}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"characters\": [\"名前1\", \"名前2\"],\r\n  \"locations\": [\"場所1\", \"場所2\"],\r\n  \"objects\": [\"オブジェクト1\", \"オブジェクト2\"],\r\n  \"concepts\": [\"概念1\", \"概念2\"],\r\n  \"events\": [\"イベント1\", \"イベント2\"]\r\n}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
            "type": "template_literal",
            "content": "`\r\n以下のチャプター内容を分析し、キャラクターの登場状況、テーマの出現、伏線要素、品質メトリクスを詳細に抽出してください。\r\nJSON形式で出力してください。\r\n\r\n# チャプター内容\r\n${content.substring(0, 10000)}  // 長すぎる場合は一部を切り出す\r\n\r\n# 分析項目\r\n1. characterAppearances: 登場キャラクター分析\r\n2. themeOccurrences: テーマ出現分析\r\n3. foreshadowingElements: 伏線要素分析\r\n4. qualityMetrics: 品質メトリクス分析\r\n\r\n# JSON出力形式\r\n{\r\n  \"characterAppearances\": [\r\n    {\r\n      \"characterId\": \"キャラクターID\",\r\n      \"characterName\": \"キャラクター名\",\r\n      \"scenes\": [\"シーンID\", ...],\r\n      \"dialogueCount\": 会話数,\r\n      \"significance\": 重要度(0-1...",
            "fullLength": 1360,
            "variables": [
              {
                "type": "template_literal",
                "name": "${content.substring(0, 10000)}"
              },
              {
                "type": "handlebars",
                "name": "{content.substring(0, 10000)}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"characterAppearances\": [\r\n    {\r\n      \"characterId\": \"キャラクターID\",\r\n      \"characterName\": \"キャラクター名\",\r\n      \"scenes\": [\"シーンID\", ...],\r\n      \"dialogueCount\": 会話数,\r\n      \"significance\": 重要度(0-1),\r\n      \"actions\": [\"行動1\", \"行動2\", ...],\r\n      \"emotions\": [\"感情1\", \"感情2\", ...]\r\n    }"
              },
              {
                "type": "handlebars",
                "name": "{\r\n      \"themeId\": \"テーマID\",\r\n      \"themeName\": \"テーマ名\",\r\n      \"expressions\": [\"表現1\", \"表現2\", ...],\r\n      \"strength\": 強度(0-1),\r\n      \"contexts\": [\"コンテキスト1\", \"コンテキスト2\", ...]\r\n    }"
              },
              {
                "type": "handlebars",
                "name": "{\r\n      \"id\": \"伏線ID\",\r\n      \"description\": \"伏線の説明\",\r\n      \"position\": テキスト位置,\r\n      \"text\": \"伏線テキスト\",\r\n      \"plannedResolutionChapter\": [最小章, 最大章],\r\n      \"relatedCharacters\": [\"関連キャラクター1\", ...]\r\n    }"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"readability\": 読みやすさ(0-1),\r\n    \"consistency\": 整合性(0-1),\r\n    \"engagement\": 引き込み度(0-1),\r\n    \"characterDepiction\": キャラクター描写(0-1),\r\n    \"originality\": オリジナリティ(0-1),\r\n    \"overall\": 総合スコア(0-1),\r\n    \"coherence\": 一貫性(0-1),\r\n    \"characterConsistency\": キャラクター一貫性(0-1)\r\n  }"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
            "type": "template_literal",
            "content": "`\r\n以下の小説の章からシーン分割してください。\r\n\r\n${content.substring(0, 7000)}\r\n\r\n各シーンには以下の情報を含めてください：\r\n1. タイプ（INTRODUCTION, DEVELOPMENT, CLIMAX, RESOLUTION, TRANSITION）\r\n2. タイトル（内容を端的に表す）\r\n3. 登場キャラクター\r\n4. 場所\r\n5. 簡潔な要約\r\n\r\nJSONフォーマットで出力：\r\n[\r\n  {\r\n    \"type\": \"シーンタイプ\",\r\n    \"title\": \"シーンタイトル\",\r\n    \"characters\": [\"キャラクター1\", \"キャラクター2\"],\r\n    \"location\": \"場所\",\r\n    \"summary\": \"要約\"\r\n  }\r\n]`",
            "fullLength": 367,
            "variables": [
              {
                "type": "template_literal",
                "name": "${content.substring(0, 7000)}"
              },
              {
                "type": "handlebars",
                "name": "{content.substring(0, 7000)}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"type\": \"シーンタイプ\",\r\n    \"title\": \"シーンタイトル\",\r\n    \"characters\": [\"キャラクター1\", \"キャラクター2\"],\r\n    \"location\": \"場所\",\r\n    \"summary\": \"要約\"\r\n  }"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 5
      },
      {
        "file": "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 1
          },
          {
            "format": "yamlOutput",
            "count": 10
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\chapter\\interfaces.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
        "line": 264,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 262,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 263,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 264,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 265,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 266,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
        "line": 342,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 340,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 341,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 342,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 343,
            "content": "temperature: 0.2,",
            "isCurrent": false
          },
          {
            "line": 344,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
        "line": 401,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 399,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 400,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 401,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 402,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 403,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
        "line": 464,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 462,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 463,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 464,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 465,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 466,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
        "line": 511,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 509,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 510,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 511,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 512,
            "content": "temperature: 0.2,",
            "isCurrent": false
          },
          {
            "line": 513,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
            "type": "template_literal",
            "content": "`\r\n以下の小説の章から、各キャラクターの成長要素を詳細に分析してください：\r\n\r\n**登場キャラクター**: ${characterNames}\r\n**章番号**: ${chapterNumber}\r\n\r\n**章の内容**:\r\n${content.substring(0, 8000)}\r\n\r\n各キャラクターについて、以下の成長要素を分析してJSONで出力してください：\r\n- スキルや能力の向上\r\n- 性格の変化や成熟\r\n- 新しい知識や技能の習得\r\n- 人間関係の変化による成長\r\n- 価値観の変化\r\n\r\nJSON形式:\r\n[\r\n  {\r\n    \"id\": \"character-id\",\r\n    \"name\": \"キャラクター名\",\r\n    \"growthPhase\": \"成長フェーズ（初期/発展/成熟など）\",\r\n    \"parameterChanges\": [\r\n      {\"name\": \"パラメータ名\", \"change\": 変化量(数値)}\r\n    ],\r\n    \"skillAcquisitions\": [\r\n      {\"name\": \"習得スキル名\"}\r\n...",
            "fullLength": 583,
            "variables": [
              {
                "type": "template_literal",
                "name": "${characterNames}"
              },
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${content.substring(0, 8000)}"
              },
              {
                "type": "handlebars",
                "name": "{characterNames}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{content.substring(0, 8000)}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"id\": \"character-id\",\r\n    \"name\": \"キャラクター名\",\r\n    \"growthPhase\": \"成長フェーズ（初期/発展/成熟など）\",\r\n    \"parameterChanges\": [\r\n      {\"name\": \"パラメータ名\", \"change\": 変化量(数値)}"
              },
              {
                "type": "handlebars",
                "name": "{\"name\": \"習得スキル名\"}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
            "type": "template_literal",
            "content": "`Growth analysis extracted ${updatedCharacters.length} characters with growth from ${characters.length} total characters`",
            "fullLength": 121,
            "variables": [
              {
                "type": "template_literal",
                "name": "${updatedCharacters.length}"
              },
              {
                "type": "template_literal",
                "name": "${characters.length}"
              },
              {
                "type": "handlebars",
                "name": "{updatedCharacters.length}"
              },
              {
                "type": "handlebars",
                "name": "{characters.length}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
            "type": "template_literal",
            "content": "`\r\n以下の小説の章に登場するキャラクターとその活動を詳細に分析してください：\r\n\r\n${content.substring(0, 8000)}\r\n\r\n各キャラクターについて以下の情報を含めてJSONで出力してください：\r\n- characterName: キャラクター名\r\n- dialogueCount: 対話の回数（概算）\r\n- significance: この章での重要度（0〜1の値）\r\n- actions: 主な行動（配列形式）\r\n- emotions: 表現された感情（配列形式）\r\n- scenes: 登場したシーン（配列形式）\r\n\r\nJSON形式:\r\n[\r\n  {\r\n    \"characterName\": \"キャラクター名\",\r\n    \"dialogueCount\": 10,\r\n    \"significance\": 0.8,\r\n    \"actions\": [\"行動1\", \"行動2\"],\r\n    \"emotions\": [\"感情1\", \"感情2\"],\r\n    \"scenes\": [\"シーン1\", \"シーン2\"]\r\n  }\r\n]`",
            "fullLength": 482,
            "variables": [
              {
                "type": "template_literal",
                "name": "${content.substring(0, 8000)}"
              },
              {
                "type": "handlebars",
                "name": "{content.substring(0, 8000)}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"characterName\": \"キャラクター名\",\r\n    \"dialogueCount\": 10,\r\n    \"significance\": 0.8,\r\n    \"actions\": [\"行動1\", \"行動2\"],\r\n    \"emotions\": [\"感情1\", \"感情2\"],\r\n    \"scenes\": [\"シーン1\", \"シーン2\"]\r\n  }"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
            "type": "template_literal",
            "content": "`\r\n以下の小説の章から、登場キャラクターの心理状態を詳細に分析してください：\r\n\r\n${content.substring(0, 8000)}\r\n\r\n各キャラクターの心理状態について以下の情報を含めてJSONで出力してください：\r\n- characterName: キャラクター名\r\n- emotionalState: 感情状態\r\n- motivations: 動機（配列形式）\r\n- conflicts: 内的葛藤（配列形式）\r\n- growthPoints: 成長ポイント（配列形式）\r\n- psychologicalProfile: 心理プロファイル\r\n\r\nJSON形式:\r\n[\r\n  {\r\n    \"characterName\": \"キャラクター名\",\r\n    \"emotionalState\": \"感情状態の説明\",\r\n    \"motivations\": [\"動機1\", \"動機2\"],\r\n    \"conflicts\": [\"葛藤1\", \"葛藤2\"],\r\n    \"growthPoints\": [\"成長ポイント1\", \"成長ポイント2\"],\r\n    \"psychological...",
            "fullLength": 532,
            "variables": [
              {
                "type": "template_literal",
                "name": "${content.substring(0, 8000)}"
              },
              {
                "type": "handlebars",
                "name": "{content.substring(0, 8000)}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"characterName\": \"キャラクター名\",\r\n    \"emotionalState\": \"感情状態の説明\",\r\n    \"motivations\": [\"動機1\", \"動機2\"],\r\n    \"conflicts\": [\"葛藤1\", \"葛藤2\"],\r\n    \"growthPoints\": [\"成長ポイント1\", \"成長ポイント2\"],\r\n    \"psychologicalProfile\": \"心理プロファイルの説明\"\r\n  }"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
            "type": "template_literal",
            "content": "`\r\n以下の小説の章から、キャラクター間の関係性とその変化を分析してください：\r\n\r\n${content.substring(0, 8000)}\r\n\r\nキャラクター間の関係について以下の情報を含めてJSONで出力してください：\r\n- character1: 1人目のキャラクター名\r\n- character2: 2人目のキャラクター名\r\n- relationshipType: 関係の種類（友情、恋愛、対立、師弟など）\r\n- strength: 関係の強さ（0〜1の値）\r\n- development: この章での関係の発展\r\n\r\nJSON形式:\r\n[\r\n  {\r\n    \"character1\": \"キャラクター1\",\r\n    \"character2\": \"キャラクター2\",\r\n    \"relationshipType\": \"友情\",\r\n    \"strength\": 0.8,\r\n    \"development\": \"関係の発展についての説明\"\r\n  }\r\n]`",
            "fullLength": 438,
            "variables": [
              {
                "type": "template_literal",
                "name": "${content.substring(0, 8000)}"
              },
              {
                "type": "handlebars",
                "name": "{content.substring(0, 8000)}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"character1\": \"キャラクター1\",\r\n    \"character2\": \"キャラクター2\",\r\n    \"relationshipType\": \"友情\",\r\n    \"strength\": 0.8,\r\n    \"development\": \"関係の発展についての説明\"\r\n  }"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
            "type": "template_literal",
            "content": "`\r\n以下の小説の章で、キャラクター「${characterNames}」に起きた重要な成長イベントを特定してください：\r\n\r\n${content.substring(0, 6000)}\r\n\r\n重要な成長イベント（技能習得、性格変化、価値観変化、重要な決断など）を配列形式で出力してください：\r\n\r\n[\"成長イベント1\", \"成長イベント2\", \"成長イベント3\"]`",
            "fullLength": 184,
            "variables": [
              {
                "type": "template_literal",
                "name": "${characterNames}"
              },
              {
                "type": "template_literal",
                "name": "${content.substring(0, 6000)}"
              },
              {
                "type": "handlebars",
                "name": "{characterNames}"
              },
              {
                "type": "handlebars",
                "name": "{content.substring(0, 6000)}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 6
      },
      {
        "file": "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\character\\interfaces.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\narrative\\interfaces.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 12
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
        "line": 218,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "buildSelectionPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 216,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 217,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 218,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 219,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 220,
            "content": "purpose: 'selection',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts",
        "line": 218,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "buildSelectionPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 216,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 217,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 218,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 219,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 220,
            "content": "purpose: 'selection',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\narrative\\narrative-analysis-service.ts",
        "line": 131,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "geminiClient: options.geminiClient || new GeminiClient(),",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 129,
            "content": "this.config = {",
            "isCurrent": false
          },
          {
            "line": 130,
            "content": "memoryManager: options.memoryManager,",
            "isCurrent": false
          },
          {
            "line": 131,
            "content": "geminiClient: options.geminiClient || new GeminiClient(),",
            "isCurrent": true
          },
          {
            "line": 132,
            "content": "genre: options.genre || 'classic',",
            "isCurrent": false
          },
          {
            "line": 133,
            "content": "enableMemoryIntegration: options.enableMemoryIntegration ?? true,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\narrative\\narrative-analysis-service.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 8
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
        "line": 452,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "const response = await this.geminiClient.generateText(prompt, {",
        "method": "getParameters",
        "class": "unknown",
        "surrounding": [
          {
            "line": 450,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 451,
            "content": "// AIクライアントでシーン構成の推奨を生成",
            "isCurrent": false
          },
          {
            "line": 452,
            "content": "const response = await this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 453,
            "content": "temperature: 0.7,",
            "isCurrent": false
          },
          {
            "line": 454,
            "content": "targetLength: targetLength",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
        "line": 452,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const response = await this.geminiClient.generateText(prompt, {",
        "method": "getParameters",
        "class": "unknown",
        "surrounding": [
          {
            "line": 450,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 451,
            "content": "// AIクライアントでシーン構成の推奨を生成",
            "isCurrent": false
          },
          {
            "line": 452,
            "content": "const response = await this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 453,
            "content": "temperature: 0.7,",
            "isCurrent": false
          },
          {
            "line": 454,
            "content": "targetLength: targetLength",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
            "type": "template_literal",
            "content": "`\r\n次のシーン構造分析に基づいて、第${chapterNumber}章に最適なシーン構成を3-4シーンで提案してください。\r\n\r\nシーンタイプ分布:\r\n${Object.entries(analysis.typeDistribution).map(([type, count]) => `",
            "fullLength": 145,
            "variables": [
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              }
            ],
            "purpose": "content_analysis"
          },
          {
            "file": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
            "type": "template_literal",
            "content": "`).join('\\n')}\r\n\r\nシーン長の分布:\r\n- 最小: ${analysis.lengthDistribution.min}\r\n- 最大: ${analysis.lengthDistribution.max}\r\n- 平均: ${analysis.lengthDistribution.avg.toFixed(2)}\r\n- 標準偏差: ${analysis.lengthDistribution.stdDev.toFixed(2)}\r\n\r\nペース変動: ${analysis.paceVariation.toFixed(2)}\r\n\r\n以下の形式で回答してください：\r\n以下の構成が推奨されます：\r\n1. [シーンタイプ] - [簡単な説明] (推定長: [長さ])\r\n2. [シーンタイプ] - [簡単な説明] (推定長: [長さ])\r\n...\r\n`",
            "fullLength": 380,
            "variables": [
              {
                "type": "template_literal",
                "name": "${analysis.lengthDistribution.min}"
              },
              {
                "type": "template_literal",
                "name": "${analysis.lengthDistribution.max}"
              },
              {
                "type": "template_literal",
                "name": "${analysis.lengthDistribution.avg.toFixed(2)}"
              },
              {
                "type": "template_literal",
                "name": "${analysis.lengthDistribution.stdDev.toFixed(2)}"
              },
              {
                "type": "template_literal",
                "name": "${analysis.paceVariation.toFixed(2)}"
              },
              {
                "type": "handlebars",
                "name": "{analysis.lengthDistribution.min}"
              },
              {
                "type": "handlebars",
                "name": "{analysis.lengthDistribution.max}"
              },
              {
                "type": "handlebars",
                "name": "{analysis.lengthDistribution.avg.toFixed(2)}"
              },
              {
                "type": "handlebars",
                "name": "{analysis.lengthDistribution.stdDev.toFixed(2)}"
              },
              {
                "type": "handlebars",
                "name": "{analysis.paceVariation.toFixed(2)}"
              }
            ],
            "purpose": "content_analysis"
          },
          {
            "file": "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
            "type": "template_literal",
            "content": "`以下の構成が推奨されます：\r\n1. 導入 - 前章からの続きを受け、状況を確立\r\n2. 展開 - 主要なアクションや会話で物語を進展\r\n3. クライマックス - 章のハイライトとなる重要な転換点\r\n4. 解決 - 次章への橋渡しとなる締めくくり`",
            "fullLength": 124,
            "variables": [],
            "purpose": "story_generation"
          }
        ],
        "count": 3
      },
      {
        "file": "src\\lib\\analysis\\services\\reader\\interfaces.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 17
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts",
        "line": 111,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 109,
            "content": "// API呼び出し（スロットリング対応）",
            "isCurrent": false
          },
          {
            "line": 110,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 111,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 112,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 113,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts",
        "line": 111,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 109,
            "content": "// API呼び出し（スロットリング対応）",
            "isCurrent": false
          },
          {
            "line": 110,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 111,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 112,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 113,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts",
        "line": 131,
        "category": "aiAnalysis",
        "pattern": "AI.*Analysis",
        "context": "const parsedResponse = JsonParser.parseFromAIResponse(response, defaultAnalysis);",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 129,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 130,
            "content": "// JsonParserを使用して安全にパース",
            "isCurrent": false
          },
          {
            "line": 131,
            "content": "const parsedResponse = JsonParser.parseFromAIResponse(response, defaultAnalysis);",
            "isCurrent": true
          },
          {
            "line": 132,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 133,
            "content": "// レスポンスの検証と正規化",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts",
            "type": "template_literal",
            "content": "`\r\n以下の小説の章を「読者の視点」から分析してください。\r\n\r\n前章：${recentContent.substring(0, 3000)}\r\n\r\n現章：${chapter.content.substring(0, 6000)}\r\n\r\n以下を評価（1-10）：\r\n1. 興味維持：読者の注意をどの程度引きつけ続けるか\r\n2. 感情移入：キャラクターへの共感度\r\n3. 理解度：物語の流れや出来事の理解しやすさ\r\n4. 予想外度：展開の意外性\r\n5. 続きへの期待：次章を読みたいという欲求の強さ\r\n\r\n読者体験を低下させる可能性のある部分を具体的に指摘し、改善案も提供してください。\r\nまた、特に効果的で読者に良い印象を与える強みも挙げてください。\r\n\r\nJSONフォーマットで結果を返してください：\r\n{\r\n  \"interestRetention\": 数値,\r\n  \"empathy\": 数値,\r\n  \"clarity\": 数値,\r\n  \"unexpectedness\": 数値,\r\n  \"anticipation\": 数値,\r\n  \"overallScore\": 数値,\r\n  \"weakPo...",
            "fullLength": 596,
            "variables": [
              {
                "type": "template_literal",
                "name": "${recentContent.substring(0, 3000)}"
              },
              {
                "type": "template_literal",
                "name": "${chapter.content.substring(0, 6000)}"
              },
              {
                "type": "handlebars",
                "name": "{recentContent.substring(0, 3000)}"
              },
              {
                "type": "handlebars",
                "name": "{chapter.content.substring(0, 6000)}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"interestRetention\": 数値,\r\n  \"empathy\": 数値,\r\n  \"clarity\": 数値,\r\n  \"unexpectedness\": 数値,\r\n  \"anticipation\": 数値,\r\n  \"overallScore\": 数値,\r\n  \"weakPoints\": [\r\n    {\"point\": \"問題点の説明\", \"suggestion\": \"改善提案\"}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\style\\interfaces.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
        "line": 539,
        "category": "geminiCalls",
        "pattern": "\\.generateContent\\s*\\(",
        "context": "this.geminiAdapter.generateContent(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 537,
            "content": "// APIスロットリングを使用して制御されたリクエストを実行",
            "isCurrent": false
          },
          {
            "line": 538,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 539,
            "content": "this.geminiAdapter.generateContent(prompt, {",
            "isCurrent": true
          },
          {
            "line": 540,
            "content": "temperature: 0.1,",
            "isCurrent": false
          },
          {
            "line": 541,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
        "line": 787,
        "category": "geminiCalls",
        "pattern": "\\.generateContent\\s*\\(",
        "context": "this.geminiAdapter.generateContent(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 785,
            "content": "// APIスロットリングを使用してAI分析を実行",
            "isCurrent": false
          },
          {
            "line": 786,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 787,
            "content": "this.geminiAdapter.generateContent(prompt, {",
            "isCurrent": true
          },
          {
            "line": 788,
            "content": "temperature: 0.1,",
            "isCurrent": false
          },
          {
            "line": 789,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
        "line": 863,
        "category": "geminiCalls",
        "pattern": "\\.generateContent\\s*\\(",
        "context": "this.geminiAdapter.generateContent(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 861,
            "content": "// APIスロットリングを使用してAI分析を実行",
            "isCurrent": false
          },
          {
            "line": 862,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 863,
            "content": "this.geminiAdapter.generateContent(prompt, {",
            "isCurrent": true
          },
          {
            "line": 864,
            "content": "temperature: 0.1,",
            "isCurrent": false
          },
          {
            "line": 865,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
        "line": 754,
        "category": "aiAnalysis",
        "pattern": "AI.*Analysis",
        "context": "private async analyzeStyleWithAI(content: string): Promise<Partial<StyleAnalysis>> {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 752,
            "content": "* @returns AIによる文体分析結果",
            "isCurrent": false
          },
          {
            "line": 753,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 754,
            "content": "private async analyzeStyleWithAI(content: string): Promise<Partial<StyleAnalysis>> {",
            "isCurrent": true
          },
          {
            "line": 755,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 756,
            "content": "// テキストが長すぎる場合は適切な長さに切り詰める",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
        "line": 801,
        "category": "aiAnalysis",
        "pattern": "AI.*Analysis",
        "context": "return JsonParser.parseFromAIResponse<Partial<StyleAnalysis>>(response, defaultResponse);",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 799,
            "content": "};",
            "isCurrent": false
          },
          {
            "line": 800,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 801,
            "content": "return JsonParser.parseFromAIResponse<Partial<StyleAnalysis>>(response, defaultResponse);",
            "isCurrent": true
          },
          {
            "line": 802,
            "content": "} catch (error) {",
            "isCurrent": false
          },
          {
            "line": 803,
            "content": "logger.warn('StyleAnalysisService: AI文体分析中にエラーが発生', {",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
            "type": "template_literal",
            "content": "`\r\n以下の物語テキストから、特徴的な表現や繰り返し使用されているフレーズを抽出してください。\r\n以下のような表現に注目してください：\r\n1. 比喩表現や独特の形容\r\n2. 特徴的な文末表現や修飾表現\r\n3. 作者の個性が表れる表現パターン\r\n4. 繰り返し使用されている言い回し\r\n\r\n物語テキスト:\r\n${truncatedContent}\r\n\r\n特徴的な表現のみをリストで出力してください。各表現は5-15字程度の短い句や文節で、\r\n物語の中で繰り返し使用されたりスタイルを特徴づけるものを選んでください。\r\n表現だけをシンプルなJSON配列で出力してください：\r\n[\"表現1\", \"表現2\", \"表現3\", ...]\r\n`",
            "fullLength": 315,
            "variables": [
              {
                "type": "template_literal",
                "name": "${truncatedContent}"
              },
              {
                "type": "handlebars",
                "name": "{truncatedContent}"
              }
            ],
            "purpose": "story_generation"
          },
          {
            "file": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
            "type": "template_literal",
            "content": "`\r\n以下の小説テキストの文体を分析し、以下の特性を評価してください：\r\n\r\n1. 平均文長（文字数）\r\n2. 文のバリエーション（0-1の値、高いほど多様）\r\n3. 語彙の豊かさ（0-1の値、高いほど豊か）\r\n4. 語りの視点（一人称・三人称など）\r\n5. 時制の一貫性（0-1の値、高いほど一貫）\r\n6. 感情のバランス（ポジティブ・ネガティブのバランス、0-1で0は完全にネガティブ、1は完全にポジティブ）\r\n\r\nテキスト:\r\n${truncatedContent}\r\n\r\n以下のJSON形式で結果を返してください：\r\n{\r\n  \"avgSentenceLength\": 数値,\r\n  \"sentenceVariety\": 数値(0-1),\r\n  \"vocabularyRichness\": 数値(0-1),\r\n  \"narrativeVoice\": \"一人称\" or \"三人称\" or \"その他\",\r\n  \"tenseConsistency\": 数値(0-1),\r\n  \"sentimentBalance\": 数値(0-1)\r\n}\r\n`",
            "fullLength": 472,
            "variables": [
              {
                "type": "template_literal",
                "name": "${truncatedContent}"
              },
              {
                "type": "handlebars",
                "name": "{truncatedContent}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"avgSentenceLength\": 数値,\r\n  \"sentenceVariety\": 数値(0-1),\r\n  \"vocabularyRichness\": 数値(0-1),\r\n  \"narrativeVoice\": \"一人称\" or \"三人称\" or \"その他\",\r\n  \"tenseConsistency\": 数値(0-1),\r\n  \"sentimentBalance\": 数値(0-1)\r\n}"
              }
            ],
            "purpose": "story_generation"
          }
        ],
        "count": 2
      },
      {
        "file": "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\theme\\interfaces.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "line": 167,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "buildThemeAnalysisPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 165,
            "content": "// APIスロットリングを利用してリクエスト",
            "isCurrent": false
          },
          {
            "line": 166,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 167,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 168,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 169,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "line": 395,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "reshadowingResolutionPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 393,
            "content": "// APIスロットリングを使用して分析を実行",
            "isCurrent": false
          },
          {
            "line": 394,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 395,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 396,
            "content": "temperature: 0.2,",
            "isCurrent": false
          },
          {
            "line": 397,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "line": 461,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 459,
            "content": "// APIスロットリングを使用して生成を実行",
            "isCurrent": false
          },
          {
            "line": 460,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 461,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 462,
            "content": "temperature: 0.6,",
            "isCurrent": false
          },
          {
            "line": 463,
            "content": "purpose: 'generation',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "line": 602,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "buildSymbolismAnalysisPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 600,
            "content": "// APIスロットリングを使用して分析を実行",
            "isCurrent": false
          },
          {
            "line": 601,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 602,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 603,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 604,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "line": 688,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "buildChapterSummaryPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 686,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 687,
            "content": "const summary = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 688,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 689,
            "content": "temperature: 0.1,",
            "isCurrent": false
          },
          {
            "line": 690,
            "content": "targetLength: 150",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "line": 710,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "buildConsistencyAnalysisPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 708,
            "content": "// APIスロットリングを使用して分析を実行",
            "isCurrent": false
          },
          {
            "line": 709,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 710,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 711,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 712,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "line": 1811,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 1809,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 1810,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 1811,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 1812,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 1813,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "line": 1897,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 1895,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 1896,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 1897,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 1898,
            "content": "temperature: 0.4,",
            "isCurrent": false
          },
          {
            "line": 1899,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "line": 2064,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 2062,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 2063,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 2064,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 2065,
            "content": "temperature: 0.4,",
            "isCurrent": false
          },
          {
            "line": 2066,
            "content": "purpose: 'suggestion',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "line": 2139,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(prompt, {",
        "method": "buildMotifAnalysisPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 2137,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 2138,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 2139,
            "content": "this.geminiAdapter.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 2140,
            "content": "temperature: 0.2,",
            "isCurrent": false
          },
          {
            "line": 2141,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "line": 2336,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiAdapter.generateText(developmentPrompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 2334,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 2335,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 2336,
            "content": "this.geminiAdapter.generateText(developmentPrompt, {",
            "isCurrent": true
          },
          {
            "line": 2337,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 2338,
            "content": "purpose: 'analysis',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "line": 176,
        "category": "aiAnalysis",
        "pattern": "AI.*Analysis",
        "context": "const analysis = JsonParser.parseFromAIResponse<ThemeResonanceAnalysis>(",
        "method": "createFallbackAnalysis",
        "class": "unknown",
        "surrounding": [
          {
            "line": 174,
            "content": "// JSONパース",
            "isCurrent": false
          },
          {
            "line": 175,
            "content": "const defaultAnalysis = this.createFallbackAnalysis(effectiveThemes);",
            "isCurrent": false
          },
          {
            "line": 176,
            "content": "const analysis = JsonParser.parseFromAIResponse<ThemeResonanceAnalysis>(",
            "isCurrent": true
          },
          {
            "line": 177,
            "content": "response,",
            "isCurrent": false
          },
          {
            "line": 178,
            "content": "defaultAnalysis",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "line": 619,
        "category": "aiAnalysis",
        "pattern": "AI.*Analysis",
        "context": "const analysis = JsonParser.parseFromAIResponse<SymbolismAnalysis>(response, defaultAnalysis);",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 617,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 618,
            "content": "// レスポンスを解析",
            "isCurrent": false
          },
          {
            "line": 619,
            "content": "const analysis = JsonParser.parseFromAIResponse<SymbolismAnalysis>(response, defaultAnalysis);",
            "isCurrent": true
          },
          {
            "line": 620,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 621,
            "content": "// 結果の検証と修正",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "line": 731,
        "category": "aiAnalysis",
        "pattern": "AI.*Analysis",
        "context": "const analysis = JsonParser.parseFromAIResponse<ThemeConsistencyAnalysis>(response, defaultAnalysis);",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 729,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 730,
            "content": "// レスポンスを解析",
            "isCurrent": false
          },
          {
            "line": 731,
            "content": "const analysis = JsonParser.parseFromAIResponse<ThemeConsistencyAnalysis>(response, defaultAnalysis);",
            "isCurrent": true
          },
          {
            "line": 732,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 733,
            "content": "// 結果の検証と修正",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "type": "template_literal",
            "content": "`\n以下の小説本文を分析し、指定されたテーマがどのように表現されているか評価してください：\n\n本文：${content.substring(0, 6000)}\n\nテーマ：${themes.map(t => `",
            "fullLength": 104,
            "variables": [
              {
                "type": "template_literal",
                "name": "${content.substring(0, 6000)}"
              },
              {
                "type": "handlebars",
                "name": "{content.substring(0, 6000)}"
              }
            ],
            "purpose": "story_generation"
          },
          {
            "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "type": "template_literal",
            "content": "`\n以下の小説テキストを分析し、未解決の伏線が解決（回収）されているか確認してください。\n\n本文：\n${content.substring(0, 6000)}\n\n未解決の伏線リスト：\n${unresolvedForeshadowing.map((fs: any, index: number) =>\n      `",
            "fullLength": 157,
            "variables": [
              {
                "type": "template_literal",
                "name": "${content.substring(0, 6000)}"
              },
              {
                "type": "handlebars",
                "name": "{content.substring(0, 6000)}"
              }
            ],
            "purpose": "story_generation"
          },
          {
            "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "type": "template_literal",
            "content": "`\n以下の小説本文を分析し、今後の展開につながる新しい伏線を抽出または生成してください。\n\n本文：\n${content.substring(0, 6000)}\n\n現在の物語状態：\n- 現在の章: ${chapterNumber}\n- 物語の状態: ${narrativeContext.state || '不明'}\n- 場所: ${narrativeContext.location || '不明'}\n- 現在の登場キャラクター: ${(narrativeContext.characters || []).join(', ') || '不明'}\n\n既存のアクティブな伏線（${activeForeshadowing.length}件）：\n${activeForeshadowing.slice(0, 5).map((fs: any) => `",
            "fullLength": 372,
            "variables": [
              {
                "type": "template_literal",
                "name": "${content.substring(0, 6000)}"
              },
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${narrativeContext.state || '不明'}"
              },
              {
                "type": "template_literal",
                "name": "${narrativeContext.location || '不明'}"
              },
              {
                "type": "template_literal",
                "name": "${(narrativeContext.characters || []).join(', ') || '不明'}"
              },
              {
                "type": "template_literal",
                "name": "${activeForeshadowing.length}"
              },
              {
                "type": "handlebars",
                "name": "{content.substring(0, 6000)}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{narrativeContext.state || '不明'}"
              },
              {
                "type": "handlebars",
                "name": "{narrativeContext.location || '不明'}"
              },
              {
                "type": "handlebars",
                "name": "{(narrativeContext.characters || []).join(', ') || '不明'}"
              },
              {
                "type": "handlebars",
                "name": "{activeForeshadowing.length}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "type": "template_literal",
            "content": "`).join('\\n')}\n\n新しい伏線を最大3つ提案してください。各伏線には以下の情報を含めてください：\n- 伏線の説明（明確かつ具体的に）\n- 伏線の緊急度（low/medium/high）\n- 想定される回収方法\n\nJSONフォーマットで出力してください：\n[\n  {\n    \"description\": \"伏線の説明\",\n    \"urgency\": \"緊急度(low/medium/high)\",\n    \"potentialResolution\": \"想定される回収方法\"\n  }\n]\n\n伏線は物語の流れに自然に溶け込むものを選び、既存の伏線と重複しないようにしてください。\n`",
            "fullLength": 297,
            "variables": [
              {
                "type": "handlebars",
                "name": "{\n    \"description\": \"伏線の説明\",\n    \"urgency\": \"緊急度(low/medium/high)\",\n    \"potentialResolution\": \"想定される回収方法\"\n  }"
              }
            ],
            "purpose": "story_generation"
          },
          {
            "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "type": "template_literal",
            "content": "`\n以下の小説テキストに含まれる象徴、隠喩、比喩などの文学的技法を分析してください。\n\nテキスト：\n${content.substring(0, 6000)}\n${existingSymbols}\n${commonMotifs}\n\n以下の項目について分析を行ってください：\n1. 主要な象徴とその意味\n2. 繰り返されるイメージやモチーフ\n3. 隠喩表現とその効果\n4. 比喩表現とその効果\n5. これらの象徴・イメージがテーマとどのように関連しているか\n\nJSONフォーマットで結果を返してください：\n{\n  \"symbols\": [\n    {\n      \"symbol\": \"象徴の名前\",\n      \"occurrences\": [\"出現箇所1\", \"出現箇所2\"],\n      \"meaning\": \"意味の解釈\",\n      \"thematicConnection\": \"テーマとの関連\"\n    }\n  ],\n  \"motifs\": [\n    {\n      \"motif\": \"モチーフの名前\",\n      \"occurrences\": [\"出現箇所1\", \"出現箇所2\"...",
            "fullLength": 820,
            "variables": [
              {
                "type": "template_literal",
                "name": "${content.substring(0, 6000)}"
              },
              {
                "type": "template_literal",
                "name": "${existingSymbols}"
              },
              {
                "type": "template_literal",
                "name": "${commonMotifs}"
              },
              {
                "type": "handlebars",
                "name": "{content.substring(0, 6000)}"
              },
              {
                "type": "handlebars",
                "name": "{existingSymbols}"
              },
              {
                "type": "handlebars",
                "name": "{commonMotifs}"
              },
              {
                "type": "handlebars",
                "name": "{\n  \"symbols\": [\n    {\n      \"symbol\": \"象徴の名前\",\n      \"occurrences\": [\"出現箇所1\", \"出現箇所2\"],\n      \"meaning\": \"意味の解釈\",\n      \"thematicConnection\": \"テーマとの関連\"\n    }"
              },
              {
                "type": "handlebars",
                "name": "{\n      \"motif\": \"モチーフの名前\",\n      \"occurrences\": [\"出現箇所1\", \"出現箇所2\"],\n      \"significance\": \"重要性の説明\"\n    }"
              },
              {
                "type": "handlebars",
                "name": "{\n      \"expression\": \"隠喩表現\",\n      \"context\": \"文脈\",\n      \"interpretation\": \"解釈\"\n    }"
              },
              {
                "type": "handlebars",
                "name": "{\n      \"expression\": \"比喩表現\",\n      \"context\": \"文脈\",\n      \"effect\": \"効果の説明\"\n    }"
              }
            ],
            "purpose": "story_generation"
          },
          {
            "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "type": "template_literal",
            "content": "`\n以下の章を100-150文字程度に要約してください。特にテーマ「${theme}」に関連する要素に注目してください。\n\n章 ${chapterIndex}:\n${content.substring(0, 3000)}\n\n要約:`",
            "fullLength": 116,
            "variables": [
              {
                "type": "template_literal",
                "name": "${theme}"
              },
              {
                "type": "template_literal",
                "name": "${chapterIndex}"
              },
              {
                "type": "template_literal",
                "name": "${content.substring(0, 3000)}"
              },
              {
                "type": "handlebars",
                "name": "{theme}"
              },
              {
                "type": "handlebars",
                "name": "{chapterIndex}"
              },
              {
                "type": "handlebars",
                "name": "{content.substring(0, 3000)}"
              }
            ],
            "purpose": "theme_analysis"
          },
          {
            "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "type": "template_literal",
            "content": "`).join('\\n\\n')}\n${historyInfo}\n\n以下の項目について分析してください：\n1. テーマの一貫性スコア（0-10）\n2. 章ごとのテーマの強度変化\n3. テーマの発展パターン（螺旋状、直線的、対立解消など）\n4. 不整合や弱い部分\n5. テーマ発展の改善提案\n\nJSONフォーマットで結果を返してください：\n{\n  \"consistencyScore\": 数値,\n  \"strengthByChapter\": [数値, 数値, ...],\n  \"developmentPattern\": \"パターンの説明\",\n  \"weakPoints\": [\n    { \"chapter\": 章番号, \"issue\": \"問題の説明\" }\n  ],\n  \"improvementSuggestions\": [\"提案1\", \"提案2\", \"提案3\"]\n}`",
            "fullLength": 385,
            "variables": [
              {
                "type": "template_literal",
                "name": "${historyInfo}"
              },
              {
                "type": "handlebars",
                "name": "{historyInfo}"
              },
              {
                "type": "handlebars",
                "name": "{\n  \"consistencyScore\": 数値,\n  \"strengthByChapter\": [数値, 数値, ...],\n  \"developmentPattern\": \"パターンの説明\",\n  \"weakPoints\": [\n    { \"chapter\": 章番号, \"issue\": \"問題の説明\" }"
              }
            ],
            "purpose": "story_generation"
          },
          {
            "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "type": "template_literal",
            "content": "`\n以下の章から、物語上重要かつ将来の章でも覚えておくべきイベントを抽出してください。\n特に：\n- キャラクター間の重要な対話、対立、約束\n- 警告やルール違反とその結果\n- 場所に関連する特別な出来事\n- キャラクターが受けた重要な教訓\n- 初めて起きた出来事やキャラクターの重要な決断\n\n章の内容:\n${content.substring(0, 5000)}...\n\nJSON形式で返却してください。各イベントには以下を含めてください：\n- description: イベントの詳細説明\n- involvedCharacters: 関与したキャラクター（配列）\n- location: イベントの場所\n- type: イベントタイプ（WARNING, CONFLICT, PROMISE, DISCOVERY, RULE_VIOLATION など）\n- significance: 重要度（0.0～1.0）\n- consequence: イベントの結果や影響（ある場合）\n`",
            "fullLength": 439,
            "variables": [
              {
                "type": "template_literal",
                "name": "${content.substring(0, 5000)}"
              },
              {
                "type": "handlebars",
                "name": "{content.substring(0, 5000)}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "type": "template_literal",
            "content": "`Extracted and stored ${significantEvents.length} significant events from chapter ${chapterNumber} using unified memory system`",
            "fullLength": 127,
            "variables": [
              {
                "type": "template_literal",
                "name": "${significantEvents.length}"
              },
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{significantEvents.length}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              }
            ],
            "purpose": "unknown"
          },
          {
            "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "type": "template_literal",
            "content": "`\nテーマと物語要素の関連性分析\n\nテーマ: ${theme}\n物語要素: ${elementType}\n文脈: ${context}\n\n以下の項目について分析してください：\n1. このテーマとこの物語要素の関連性（0-10のスケール）\n2. この物語要素を通じてテーマをより強く表現するための具体的な提案（3つ）\n3. この組み合わせから得られる象徴的な意味や可能性\n\nJSONフォーマットで結果を返してください：\n{\n  \"relevance\": 数値,\n  \"suggestions\": [\"提案1\", \"提案2\", \"提案3\"],\n  \"symbolicPotential\": \"象徴的な意味や可能性の説明\"\n}`",
            "fullLength": 311,
            "variables": [
              {
                "type": "template_literal",
                "name": "${theme}"
              },
              {
                "type": "template_literal",
                "name": "${elementType}"
              },
              {
                "type": "template_literal",
                "name": "${context}"
              },
              {
                "type": "handlebars",
                "name": "{theme}"
              },
              {
                "type": "handlebars",
                "name": "{elementType}"
              },
              {
                "type": "handlebars",
                "name": "{context}"
              },
              {
                "type": "handlebars",
                "name": "{\n  \"relevance\": 数値,\n  \"suggestions\": [\"提案1\", \"提案2\", \"提案3\"],\n  \"symbolicPotential\": \"象徴的な意味や可能性の説明\"\n}"
              }
            ],
            "purpose": "story_generation"
          },
          {
            "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "type": "template_literal",
            "content": "`\n以下の小説で使用されている主要な象徴とモチーフに基づいて、イメージの活用と発展に関する提案を行ってください。\n\n主要な象徴: ${topSymbols}\n繰り返されるモチーフ: ${topMotifs}\n\nこれらの象徴とモチーフをより効果的に活用するための提案を3つ示してください。\n各提案は具体的かつ実行可能なものにしてください。\n\n提案を配列形式で出力してください:\n[\"提案1\", \"提案2\", \"提案3\"]`",
            "fullLength": 210,
            "variables": [
              {
                "type": "template_literal",
                "name": "${topSymbols}"
              },
              {
                "type": "template_literal",
                "name": "${topMotifs}"
              },
              {
                "type": "handlebars",
                "name": "{topSymbols}"
              },
              {
                "type": "handlebars",
                "name": "{topMotifs}"
              }
            ],
            "purpose": "story_generation"
          },
          {
            "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "type": "template_literal",
            "content": "`\n以下の章から、モチーフ「${motif}」の出現と使われ方を分析してください。\n\n章 ${chapterIndex}:\n${content.substring(0, 4000)}\n${contextInfo}\n${previousOccurrences}\n\n以下の項目について分析してください：\n1. モチーフの出現回数と重要度（0-10）\n2. モチーフが具体的に現れる箇所（最大3つ）\n3. このモチーフがどのように使われているか（直接的か象徴的か）\n4. モチーフの意味や効果\n5. モチーフの変化や発展（前の章と比較して）\n\nJSONフォーマットで結果を返してください：\n{\n  \"occurrenceCount\": 数値,\n  \"significance\": 数値(0-10),\n  \"examples\": [\"例1\", \"例2\", \"例3\"],\n  \"usage\": \"直接的|象徴的|両方\",\n  \"meaning\": \"モチーフの意味や効果\",\n  \"development\": \"モチーフの変化や発展\"\n}`",
            "fullLength": 465,
            "variables": [
              {
                "type": "template_literal",
                "name": "${motif}"
              },
              {
                "type": "template_literal",
                "name": "${chapterIndex}"
              },
              {
                "type": "template_literal",
                "name": "${content.substring(0, 4000)}"
              },
              {
                "type": "template_literal",
                "name": "${contextInfo}"
              },
              {
                "type": "template_literal",
                "name": "${previousOccurrences}"
              },
              {
                "type": "handlebars",
                "name": "{motif}"
              },
              {
                "type": "handlebars",
                "name": "{chapterIndex}"
              },
              {
                "type": "handlebars",
                "name": "{content.substring(0, 4000)}"
              },
              {
                "type": "handlebars",
                "name": "{contextInfo}"
              },
              {
                "type": "handlebars",
                "name": "{previousOccurrences}"
              },
              {
                "type": "handlebars",
                "name": "{\n  \"occurrenceCount\": 数値,\n  \"significance\": 数値(0-10),\n  \"examples\": [\"例1\", \"例2\", \"例3\"],\n  \"usage\": \"直接的|象徴的|両方\",\n  \"meaning\": \"モチーフの意味や効果\",\n  \"development\": \"モチーフの変化や発展\"\n}"
              }
            ],
            "purpose": "content_analysis"
          },
          {
            "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "type": "template_literal",
            "content": "`章 ${chapterIndex + 1}: 出現回数=${analysis.occurrenceCount}, 重要度=${analysis.significance}, 使用方法=${analysis.usage}`",
            "fullLength": 111,
            "variables": [
              {
                "type": "template_literal",
                "name": "${chapterIndex + 1}"
              },
              {
                "type": "template_literal",
                "name": "${analysis.occurrenceCount}"
              },
              {
                "type": "template_literal",
                "name": "${analysis.significance}"
              },
              {
                "type": "template_literal",
                "name": "${analysis.usage}"
              },
              {
                "type": "handlebars",
                "name": "{chapterIndex + 1}"
              },
              {
                "type": "handlebars",
                "name": "{analysis.occurrenceCount}"
              },
              {
                "type": "handlebars",
                "name": "{analysis.significance}"
              },
              {
                "type": "handlebars",
                "name": "{analysis.usage}"
              }
            ],
            "purpose": "content_analysis"
          },
          {
            "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
            "type": "template_literal",
            "content": "`\nモチーフ「${motif}」の各章での出現パターンを分析し、その発展と全体的なパターンを特定してください。\n\n出現パターン:\n${occurrencesText}\n${contextInfo}\n\n以下の項目について分析してください：\n1. モチーフの発展パターン（上昇、下降、波状、強調など）\n2. モチーフとテーマの関連性\n3. モチーフの効果的な使用方法と改善提案\n\nJSONフォーマットで結果を返してください：\n{\n  \"developmentPattern\": \"発展パターンの説明\",\n  \"thematicConnection\": \"テーマとの関連性\",\n  \"effectiveUses\": [\"効果的な使用例1\", \"効果的な使用例2\"],\n  \"suggestions\": [\"提案1\", \"提案2\", \"提案3\"]\n}`",
            "fullLength": 372,
            "variables": [
              {
                "type": "template_literal",
                "name": "${motif}"
              },
              {
                "type": "template_literal",
                "name": "${occurrencesText}"
              },
              {
                "type": "template_literal",
                "name": "${contextInfo}"
              },
              {
                "type": "handlebars",
                "name": "{motif}"
              },
              {
                "type": "handlebars",
                "name": "{occurrencesText}"
              },
              {
                "type": "handlebars",
                "name": "{contextInfo}"
              },
              {
                "type": "handlebars",
                "name": "{\n  \"developmentPattern\": \"発展パターンの説明\",\n  \"thematicConnection\": \"テーマとの関連性\",\n  \"effectiveUses\": [\"効果的な使用例1\", \"効果的な使用例2\"],\n  \"suggestions\": [\"提案1\", \"提案2\", \"提案3\"]\n}"
              }
            ],
            "purpose": "content_analysis"
          }
        ],
        "count": 14
      },
      {
        "file": "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 1
          },
          {
            "format": "structuredOutput",
            "count": 3
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\utils\\arc-ttils.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\utils\\cache-storage.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\analysis\\utils\\serialization-utils.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 5
          },
          {
            "format": "yamlOutput",
            "count": 3
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
        "line": 234,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "const result = await this.geminiClient.generateText(prompt, {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 232,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 233,
            "content": "// AIによる一貫性検証",
            "isCurrent": false
          },
          {
            "line": 234,
            "content": "const result = await this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 235,
            "content": "temperature: 0.3",
            "isCurrent": false
          },
          {
            "line": 236,
            "content": "});",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
        "line": 316,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "const result = await this.geminiClient.generateText(prompt, {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 314,
            "content": "`;",
            "isCurrent": false
          },
          {
            "line": 315,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 316,
            "content": "const result = await this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 317,
            "content": "temperature: 0.1,",
            "isCurrent": false
          },
          {
            "line": 318,
            "content": "targetLength: 10",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
        "line": 234,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const result = await this.geminiClient.generateText(prompt, {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 232,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 233,
            "content": "// AIによる一貫性検証",
            "isCurrent": false
          },
          {
            "line": 234,
            "content": "const result = await this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 235,
            "content": "temperature: 0.3",
            "isCurrent": false
          },
          {
            "line": 236,
            "content": "});",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
        "line": 316,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const result = await this.geminiClient.generateText(prompt, {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 314,
            "content": "`;",
            "isCurrent": false
          },
          {
            "line": 315,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 316,
            "content": "const result = await this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 317,
            "content": "temperature: 0.1,",
            "isCurrent": false
          },
          {
            "line": 318,
            "content": "targetLength: 10",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
        "line": 35,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "this.geminiClient = new GeminiClient();",
        "method": "constructor",
        "class": "CharacterAnalyzer",
        "surrounding": [
          {
            "line": 33,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 34,
            "content": "constructor() {",
            "isCurrent": false
          },
          {
            "line": 35,
            "content": "this.geminiClient = new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 36,
            "content": "logger.info('CharacterAnalyzer: 初期化完了');",
            "isCurrent": false
          },
          {
            "line": 37,
            "content": "}",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
            "type": "template_literal",
            "content": "`\r\nあなたはキャラクターの一貫性と行動の妥当性を評価する専門家です。\r\n以下のキャラクター情報と提案された行動が、キャラクターの性格や過去の行動と一貫しているかを分析してください。\r\n\r\n## キャラクター情報\r\n名前: ${character.name}\r\nタイプ: ${character.type}\r\n説明: ${character.description}\r\n性格特性: ${character.personality?.traits?.join(', ') || '(特性なし)'}\r\n価値観: ${character.personality?.values?.join(', ') || '(価値観なし)'}\r\n現在の感情状態: ${character.state?.emotionalState || 'NEUTRAL'}\r\n発展段階: ${character.state?.developmentStage || 0}/5\r\n\r\n## 過去の行動パターン\r\n${this.formatCharacterHistory(character)}\r\n\r\n## 状況\r\n${context}...",
            "fullLength": 855,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${character.type}"
              },
              {
                "type": "template_literal",
                "name": "${character.description}"
              },
              {
                "type": "template_literal",
                "name": "${character.personality?.traits?.join(', ') || '(特性なし)'}"
              },
              {
                "type": "template_literal",
                "name": "${character.personality?.values?.join(', ') || '(価値観なし)'}"
              },
              {
                "type": "template_literal",
                "name": "${character.state?.emotionalState || 'NEUTRAL'}"
              },
              {
                "type": "template_literal",
                "name": "${character.state?.developmentStage || 0}"
              },
              {
                "type": "template_literal",
                "name": "${this.formatCharacterHistory(character)}"
              },
              {
                "type": "template_literal",
                "name": "${context}"
              },
              {
                "type": "template_literal",
                "name": "${proposedAction}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{character.type}"
              },
              {
                "type": "handlebars",
                "name": "{character.description}"
              },
              {
                "type": "handlebars",
                "name": "{character.personality?.traits?.join(', ') || '(特性なし)'}"
              },
              {
                "type": "handlebars",
                "name": "{character.personality?.values?.join(', ') || '(価値観なし)'}"
              },
              {
                "type": "handlebars",
                "name": "{character.state?.emotionalState || 'NEUTRAL'}"
              },
              {
                "type": "handlebars",
                "name": "{character.state?.developmentStage || 0}"
              },
              {
                "type": "handlebars",
                "name": "{this.formatCharacterHistory(character)}"
              },
              {
                "type": "handlebars",
                "name": "{context}"
              },
              {
                "type": "handlebars",
                "name": "{proposedAction}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"consistent\": true または false,\r\n  \"confidence\": 0から1の数値（確信度）,\r\n  \"explanation\": \"一貫性の分析理由\",\r\n  \"suggestedAlternatives\": [\"代替行動1\", \"代替行動2\"] // 一貫性がない場合のみ\r\n}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
            "type": "template_literal",
            "content": "`\r\nあなたはキャラクターの行動の一貫性を評価する専門家です。\r\n以下のキャラクターの過去の行動パターンと提案された新しい行動の一貫性を評価してください。\r\n\r\n## キャラクター情報\r\n名前: ${character.name}\r\nタイプ: ${character.type}\r\n説明: ${character.description}\r\n\r\n## 過去の行動パターン\r\n${this.formatCharacterHistory(character)}\r\n\r\n## 提案された新しい行動\r\n${proposedAction}\r\n\r\n## 分析\r\n過去の行動パターンから見て、この新しい行動がどの程度一貫しているかを0から1のスケールで評価してください。\r\n1は完全に一貫しており自然な行動、0は完全に矛盾している行動を意味します。\r\n\r\n数値のみを出力してください。\r\n`",
            "fullLength": 388,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${character.type}"
              },
              {
                "type": "template_literal",
                "name": "${character.description}"
              },
              {
                "type": "template_literal",
                "name": "${this.formatCharacterHistory(character)}"
              },
              {
                "type": "template_literal",
                "name": "${proposedAction}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{character.type}"
              },
              {
                "type": "handlebars",
                "name": "{character.description}"
              },
              {
                "type": "handlebars",
                "name": "{this.formatCharacterHistory(character)}"
              },
              {
                "type": "handlebars",
                "name": "{proposedAction}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 2
      },
      {
        "file": "src\\lib\\characters\\analyzers\\character-analyzer.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\analyzers\\relationship-analyzer.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 3
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\core\\interfaces.ts",
        "line": 741,
        "category": "templateUsage",
        "pattern": "getTemplate",
        "context": "getTemplateById(id: string): Promise<CharacterTemplate>;",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 739,
            "content": "* @returns キャラクターテンプレート",
            "isCurrent": false
          },
          {
            "line": 740,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 741,
            "content": "getTemplateById(id: string): Promise<CharacterTemplate>;",
            "isCurrent": true
          },
          {
            "line": 742,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 743,
            "content": "/**",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\core\\interfaces.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 19
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\core\\types.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 79
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\events\\character-event-bus.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\events\\event-types.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 28
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\events\\handlers\\character-change-handler.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\characters\\events\\handlers\\character-change-handler.ts",
            "type": "template_literal",
            "content": "`Character emotional state changed: ${characterId} (${previousState.emotionalState} -> ${changes.emotionalState})`",
            "fullLength": 114,
            "variables": [
              {
                "type": "template_literal",
                "name": "${characterId}"
              },
              {
                "type": "template_literal",
                "name": "${previousState.emotionalState}"
              },
              {
                "type": "template_literal",
                "name": "${changes.emotionalState}"
              },
              {
                "type": "handlebars",
                "name": "{characterId}"
              },
              {
                "type": "handlebars",
                "name": "{previousState.emotionalState}"
              },
              {
                "type": "handlebars",
                "name": "{changes.emotionalState}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\characters\\events\\handlers\\relationship-change-handler.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\generators\\character-generator.ts",
        "line": 292,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "() => this.geminiClient.generateText(prompt, {",
        "method": "retryGenerationRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 290,
            "content": "// リトライロジックを使用してAI生成",
            "isCurrent": false
          },
          {
            "line": 291,
            "content": "const backstory = await this.retryGenerationRequest(",
            "isCurrent": false
          },
          {
            "line": 292,
            "content": "() => this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 293,
            "content": "temperature: 0.7,",
            "isCurrent": false
          },
          {
            "line": 294,
            "content": "targetLength: 1500",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\generators\\character-generator.ts",
        "line": 445,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "const result = await this.geminiClient.generateText(prompt, {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 443,
            "content": "`;",
            "isCurrent": false
          },
          {
            "line": 444,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 445,
            "content": "const result = await this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 446,
            "content": "temperature: 0.7,",
            "isCurrent": false
          },
          {
            "line": 447,
            "content": "targetLength: 50",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\generators\\character-generator.ts",
        "line": 626,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "const result = await this.geminiClient.generateText(prompt, {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 624,
            "content": "`;",
            "isCurrent": false
          },
          {
            "line": 625,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 626,
            "content": "const result = await this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 627,
            "content": "temperature: 0.7,",
            "isCurrent": false
          },
          {
            "line": 628,
            "content": "targetLength: 200",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\generators\\character-generator.ts",
        "line": 292,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "() => this.geminiClient.generateText(prompt, {",
        "method": "retryGenerationRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 290,
            "content": "// リトライロジックを使用してAI生成",
            "isCurrent": false
          },
          {
            "line": 291,
            "content": "const backstory = await this.retryGenerationRequest(",
            "isCurrent": false
          },
          {
            "line": 292,
            "content": "() => this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 293,
            "content": "temperature: 0.7,",
            "isCurrent": false
          },
          {
            "line": 294,
            "content": "targetLength: 1500",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\generators\\character-generator.ts",
        "line": 445,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const result = await this.geminiClient.generateText(prompt, {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 443,
            "content": "`;",
            "isCurrent": false
          },
          {
            "line": 444,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 445,
            "content": "const result = await this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 446,
            "content": "temperature: 0.7,",
            "isCurrent": false
          },
          {
            "line": 447,
            "content": "targetLength: 50",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\generators\\character-generator.ts",
        "line": 626,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const result = await this.geminiClient.generateText(prompt, {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 624,
            "content": "`;",
            "isCurrent": false
          },
          {
            "line": 625,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 626,
            "content": "const result = await this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 627,
            "content": "temperature: 0.7,",
            "isCurrent": false
          },
          {
            "line": 628,
            "content": "targetLength: 200",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\generators\\character-generator.ts",
        "line": 100,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "this.geminiClient = geminiClient || new GeminiClient();",
        "method": "constructor",
        "class": "CharacterGenerator",
        "surrounding": [
          {
            "line": 98,
            "content": "geminiClient?: GeminiClient",
            "isCurrent": false
          },
          {
            "line": 99,
            "content": ") {",
            "isCurrent": false
          },
          {
            "line": 100,
            "content": "this.geminiClient = geminiClient || new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 101,
            "content": "logger.info('CharacterGenerator: 統合記憶階層システム対応版で初期化完了');",
            "isCurrent": false
          },
          {
            "line": 102,
            "content": "}",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\generators\\character-generator.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\characters\\generators\\character-generator.ts",
            "type": "template_literal",
            "content": "`\nあなたはファンタジー小説のキャラクターの背景設定を作成する専門家です。\n以下の情報に基づいて、キャラクター「${character.name}」のバックストーリーを作成してください。\n本文は250～300単語程度でまとめてください。\n\n## 世界観\n${worldDescription}\n\n## キャラクター情報\n名前: ${character.name}\nタイプ: ${character.type}\n説明: ${character.description}\n性格特性: ${character.personality?.traits?.join(', ') || ''}\n価値観: ${character.personality?.values?.join(', ') || ''}\n癖: ${character.personality?.quirks?.join(', ') || ''}\n出身: ${character.backstory?.origin || ''}\n\n## 重要な出来事\n${character.backstory?.significantEvents?.map(e...",
            "fullLength": 509,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${worldDescription}"
              },
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${character.type}"
              },
              {
                "type": "template_literal",
                "name": "${character.description}"
              },
              {
                "type": "template_literal",
                "name": "${character.personality?.traits?.join(', ') || ''}"
              },
              {
                "type": "template_literal",
                "name": "${character.personality?.values?.join(', ') || ''}"
              },
              {
                "type": "template_literal",
                "name": "${character.personality?.quirks?.join(', ') || ''}"
              },
              {
                "type": "template_literal",
                "name": "${character.backstory?.origin || ''}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{worldDescription}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{character.type}"
              },
              {
                "type": "handlebars",
                "name": "{character.description}"
              },
              {
                "type": "handlebars",
                "name": "{character.personality?.traits?.join(', ') || ''}"
              },
              {
                "type": "handlebars",
                "name": "{character.personality?.values?.join(', ') || ''}"
              },
              {
                "type": "handlebars",
                "name": "{character.personality?.quirks?.join(', ') || ''}"
              },
              {
                "type": "handlebars",
                "name": "{character.backstory?.origin || ''}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\characters\\generators\\character-generator.ts",
            "type": "template_literal",
            "content": "`).join('\\n') || '- (重要な出来事は特になし)'}\n\n## 現在の統合ポイント\n物語内のチャプター${character.state.lastAppearance || '?'}で初登場予定\n\n## 出力形式\n[バックストーリー本文]\n`",
            "fullLength": 129,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.state.lastAppearance || '?'}"
              },
              {
                "type": "handlebars",
                "name": "{character.state.lastAppearance || '?'}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\characters\\generators\\character-generator.ts",
            "type": "template_literal",
            "content": "`\nあなたはファンタジー小説のキャラクター名を生成する専門家です。\n以下の情報に基づいて、一つのキャラクター名を生成してください。\n\n## 世界観\n${worldDescription}\n\n## キャラクタータイプ\n${template.name || 'キャラクター'}\n\n## 特性\n${template.personality?.traits?.join(', ') || ''}\n\n名前だけを出力してください。\n`",
            "fullLength": 211,
            "variables": [
              {
                "type": "template_literal",
                "name": "${worldDescription}"
              },
              {
                "type": "template_literal",
                "name": "${template.name || 'キャラクター'}"
              },
              {
                "type": "template_literal",
                "name": "${template.personality?.traits?.join(', ') || ''}"
              },
              {
                "type": "handlebars",
                "name": "{worldDescription}"
              },
              {
                "type": "handlebars",
                "name": "{template.name || 'キャラクター'}"
              },
              {
                "type": "handlebars",
                "name": "{template.personality?.traits?.join(', ') || ''}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\characters\\generators\\character-generator.ts",
            "type": "template_literal",
            "content": "`\nあなたはファンタジー小説のキャラクター関係性を設計する専門家です。\n以下のキャラクターの情報に基づいて、最も自然で物語的に魅力的な関係性をJSON形式で出力してください。\n\n## 新キャラクター\n名前: ${character.name}\nタイプ: ${character.type}\n説明: ${character.description}\n性格特性: ${character.personality?.traits?.join(', ') || ''}\n\n## 既存キャラクター\n名前: ${targetCharacter.name}\nタイプ: ${targetCharacter.type}\n説明: ${targetCharacter.description}\n性格特性: ${targetCharacter.personality?.traits?.join(', ') || ''}\n\n次の関係タイプから最も適切なものを選んでください:\nFRIEND, ENEMY, RIVAL, MENTOR, STUDENT, PARENT, CHILD, LOVER, PROTECTOR, PR...",
            "fullLength": 632,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${character.type}"
              },
              {
                "type": "template_literal",
                "name": "${character.description}"
              },
              {
                "type": "template_literal",
                "name": "${character.personality?.traits?.join(', ') || ''}"
              },
              {
                "type": "template_literal",
                "name": "${targetCharacter.name}"
              },
              {
                "type": "template_literal",
                "name": "${targetCharacter.type}"
              },
              {
                "type": "template_literal",
                "name": "${targetCharacter.description}"
              },
              {
                "type": "template_literal",
                "name": "${targetCharacter.personality?.traits?.join(', ') || ''}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{character.type}"
              },
              {
                "type": "handlebars",
                "name": "{character.description}"
              },
              {
                "type": "handlebars",
                "name": "{character.personality?.traits?.join(', ') || ''}"
              },
              {
                "type": "handlebars",
                "name": "{targetCharacter.name}"
              },
              {
                "type": "handlebars",
                "name": "{targetCharacter.type}"
              },
              {
                "type": "handlebars",
                "name": "{targetCharacter.description}"
              },
              {
                "type": "handlebars",
                "name": "{targetCharacter.personality?.traits?.join(', ') || ''}"
              },
              {
                "type": "handlebars",
                "name": "{\n  \"type\": \"関係タイプ\",\n  \"strength\": 0から1の数値（関係の強さ）,\n  \"description\": \"関係の簡潔な説明\"\n}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 4
      },
      {
        "file": "src\\lib\\characters\\generators\\character-generator.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 1
          },
          {
            "format": "structuredOutput",
            "count": 3
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\generators\\template-provider.ts",
        "line": 73,
        "category": "templateUsage",
        "pattern": "getTemplate",
        "context": "async getTemplateById(id: string): Promise<CharacterTemplate> {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 71,
            "content": "* @returns キャラクターテンプレート",
            "isCurrent": false
          },
          {
            "line": 72,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 73,
            "content": "async getTemplateById(id: string): Promise<CharacterTemplate> {",
            "isCurrent": true
          },
          {
            "line": 74,
            "content": "// キャッシュの更新確認",
            "isCurrent": false
          },
          {
            "line": 75,
            "content": "await this.checkCacheRefresh();",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\generators\\template-provider.ts",
        "line": 117,
        "category": "templateUsage",
        "pattern": "getTemplate",
        "context": "const archetype = await this.getTemplateById(archetypeId);",
        "method": "combineTemplates",
        "class": "unknown",
        "surrounding": [
          {
            "line": 115,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 116,
            "content": "async combineTemplates(archetypeId: string, roleId: string): Promise<CharacterTemplate> {",
            "isCurrent": false
          },
          {
            "line": 117,
            "content": "const archetype = await this.getTemplateById(archetypeId);",
            "isCurrent": true
          },
          {
            "line": 118,
            "content": "const role = await this.getTemplateById(roleId);",
            "isCurrent": false
          },
          {
            "line": 119,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\generators\\template-provider.ts",
        "line": 118,
        "category": "templateUsage",
        "pattern": "getTemplate",
        "context": "const role = await this.getTemplateById(roleId);",
        "method": "combineTemplates",
        "class": "unknown",
        "surrounding": [
          {
            "line": 116,
            "content": "async combineTemplates(archetypeId: string, roleId: string): Promise<CharacterTemplate> {",
            "isCurrent": false
          },
          {
            "line": 117,
            "content": "const archetype = await this.getTemplateById(archetypeId);",
            "isCurrent": false
          },
          {
            "line": 118,
            "content": "const role = await this.getTemplateById(roleId);",
            "isCurrent": true
          },
          {
            "line": 119,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 120,
            "content": "// テンプレートを組み合わせる",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\generators\\template-provider.ts",
        "line": 170,
        "category": "templateUsage",
        "pattern": "getTemplate",
        "context": "return this.getTemplatesFromDirectory(this.TEMPLATE_DIRS.archetypes);",
        "method": "getArchetypeTemplates",
        "class": "unknown",
        "surrounding": [
          {
            "line": 168,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 169,
            "content": "async getArchetypeTemplates(): Promise<CharacterTemplate[]> {",
            "isCurrent": false
          },
          {
            "line": 170,
            "content": "return this.getTemplatesFromDirectory(this.TEMPLATE_DIRS.archetypes);",
            "isCurrent": true
          },
          {
            "line": 171,
            "content": "}",
            "isCurrent": false
          },
          {
            "line": 172,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\generators\\template-provider.ts",
        "line": 178,
        "category": "templateUsage",
        "pattern": "getTemplate",
        "context": "return this.getTemplatesFromDirectory(this.TEMPLATE_DIRS.roles);",
        "method": "getRoleTemplates",
        "class": "unknown",
        "surrounding": [
          {
            "line": 176,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 177,
            "content": "async getRoleTemplates(): Promise<CharacterTemplate[]> {",
            "isCurrent": false
          },
          {
            "line": 178,
            "content": "return this.getTemplatesFromDirectory(this.TEMPLATE_DIRS.roles);",
            "isCurrent": true
          },
          {
            "line": 179,
            "content": "}",
            "isCurrent": false
          },
          {
            "line": 180,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\generators\\template-provider.ts",
        "line": 203,
        "category": "templateUsage",
        "pattern": "getTemplate",
        "context": "const archetypes = await this.getTemplatesFromDirectory(this.TEMPLATE_DIRS.archetypes);",
        "method": "updateTemplateCache",
        "class": "unknown",
        "surrounding": [
          {
            "line": 201,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 202,
            "content": "// キャッシュに追加（アーキタイプとロール）",
            "isCurrent": false
          },
          {
            "line": 203,
            "content": "const archetypes = await this.getTemplatesFromDirectory(this.TEMPLATE_DIRS.archetypes);",
            "isCurrent": true
          },
          {
            "line": 204,
            "content": "const roles = await this.getTemplatesFromDirectory(this.TEMPLATE_DIRS.roles);",
            "isCurrent": false
          },
          {
            "line": 205,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\generators\\template-provider.ts",
        "line": 204,
        "category": "templateUsage",
        "pattern": "getTemplate",
        "context": "const roles = await this.getTemplatesFromDirectory(this.TEMPLATE_DIRS.roles);",
        "method": "debug",
        "class": "unknown",
        "surrounding": [
          {
            "line": 202,
            "content": "// キャッシュに追加（アーキタイプとロール）",
            "isCurrent": false
          },
          {
            "line": 203,
            "content": "const archetypes = await this.getTemplatesFromDirectory(this.TEMPLATE_DIRS.archetypes);",
            "isCurrent": false
          },
          {
            "line": 204,
            "content": "const roles = await this.getTemplatesFromDirectory(this.TEMPLATE_DIRS.roles);",
            "isCurrent": true
          },
          {
            "line": 205,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 206,
            "content": "// キャッシュを更新",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\generators\\template-provider.ts",
        "line": 224,
        "category": "templateUsage",
        "pattern": "getTemplate",
        "context": "private async getTemplatesFromDirectory(directory: string): Promise<CharacterTemplate[]> {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 222,
            "content": "* @returns テンプレートの配列",
            "isCurrent": false
          },
          {
            "line": 223,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 224,
            "content": "private async getTemplatesFromDirectory(directory: string): Promise<CharacterTemplate[]> {",
            "isCurrent": true
          },
          {
            "line": 225,
            "content": "const templates: CharacterTemplate[] = [];",
            "isCurrent": false
          },
          {
            "line": 226,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\generators\\template-provider.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "yamlOutput",
            "count": 3
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\manager copy 2.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\manager copy 3.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\characters\\manager copy 3.ts",
            "type": "template_literal",
            "content": "`キャラクター「${character.name}」の発展処理が完了しました。\r\n\r\n【発展結果】\r\n- パラメータ変化: ${Object.keys(result.parameterChanges).length}項目\r\n- スキル習得: ${result.skillAcquisitions.length}個\r\n- 性格進化: ${result.personalityEvolution.length}項目\r\n- 関係性変化: ${result.relationshipImpacts.length}個\r\n\r\n【詳細】\r\n${Object.entries(result.parameterChanges).map(([param, change]) =>\r\n            `",
            "fullLength": 344,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${Object.keys(result.parameterChanges).length}"
              },
              {
                "type": "template_literal",
                "name": "${result.skillAcquisitions.length}"
              },
              {
                "type": "template_literal",
                "name": "${result.personalityEvolution.length}"
              },
              {
                "type": "template_literal",
                "name": "${result.relationshipImpacts.length}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{Object.keys(result.parameterChanges).length}"
              },
              {
                "type": "handlebars",
                "name": "{result.skillAcquisitions.length}"
              },
              {
                "type": "handlebars",
                "name": "{result.personalityEvolution.length}"
              },
              {
                "type": "handlebars",
                "name": "{result.relationshipImpacts.length}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\characters\\manager copy 3.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 16
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\manager copy 4.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\characters\\manager copy 4.ts",
            "type": "template_literal",
            "content": "`キャラクター「${character.name}」の発展処理が完了しました。\r\n\r\n【発展結果】\r\n- パラメータ変化: ${Object.keys(result.parameterChanges).length}項目\r\n- スキル習得: ${result.skillAcquisitions.length}個\r\n- 性格進化: ${result.personalityEvolution.length}項目\r\n- 関係性変化: ${result.relationshipImpacts.length}個\r\n\r\n【詳細】\r\n${Object.entries(result.parameterChanges).map(([param, change]) =>\r\n            `",
            "fullLength": 344,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${Object.keys(result.parameterChanges).length}"
              },
              {
                "type": "template_literal",
                "name": "${result.skillAcquisitions.length}"
              },
              {
                "type": "template_literal",
                "name": "${result.personalityEvolution.length}"
              },
              {
                "type": "template_literal",
                "name": "${result.relationshipImpacts.length}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{Object.keys(result.parameterChanges).length}"
              },
              {
                "type": "handlebars",
                "name": "{result.skillAcquisitions.length}"
              },
              {
                "type": "handlebars",
                "name": "{result.personalityEvolution.length}"
              },
              {
                "type": "handlebars",
                "name": "{result.relationshipImpacts.length}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\characters\\manager copy 4.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 16
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\manager copy 5.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\manager copy.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\manager.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\character-service copy 2.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\characters\\services\\character-service copy 2.ts",
            "type": "template_literal",
            "content": "`Character created with memory integration: ${consolidatedCharacter.name} (${consolidatedCharacter.id})`",
            "fullLength": 104,
            "variables": [
              {
                "type": "template_literal",
                "name": "${consolidatedCharacter.name}"
              },
              {
                "type": "template_literal",
                "name": "${consolidatedCharacter.id}"
              },
              {
                "type": "handlebars",
                "name": "{consolidatedCharacter.name}"
              },
              {
                "type": "handlebars",
                "name": "{consolidatedCharacter.id}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\characters\\services\\character-service copy 2.ts",
            "type": "template_literal",
            "content": "`Character appearance recorded with memory integration: ${character.name} (${id}), 章番号: ${chapterNumber}`",
            "fullLength": 105,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${id}"
              },
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{id}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\characters\\services\\character-service copy 2.ts",
            "type": "template_literal",
            "content": "`Interaction recorded with memory integration: ${character.name} -> ${targetCharacter.name}, タイプ: ${type}`",
            "fullLength": 106,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${targetCharacter.name}"
              },
              {
                "type": "template_literal",
                "name": "${type}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{targetCharacter.name}"
              },
              {
                "type": "handlebars",
                "name": "{type}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 3
      },
      {
        "file": "src\\lib\\characters\\services\\character-service copy 2.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\character-service.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "yamlOutput",
            "count": 20
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\detection-service copy 2.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 12
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\detection-service.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 12
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\evolution-service copy 2.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\characters\\services\\evolution-service copy 2.ts",
            "type": "template_literal",
            "content": "`キャラクター「${character.name}」の発展処理が記憶階層システム統合により完了しました。\r\n\r\n【記憶階層システム統合結果】\r\n- システム検証済み: ${development.memorySystemValidated}\r\n- 品質保証スコア: ${development.qualityAssuranceScore.toFixed(2)}\r\n- 横断整合性: ${development.crossLevelConsistency.toFixed(2)}\r\n- システム信頼度: ${development.systemConfidenceScore.toFixed(2)}\r\n\r\n【データ統合メトリクス】\r\n- 統合スコア: ${development.dataIntegrationMetrics.consolidationScore.toFixed(2)}\r\n- 重複解決数: ${development.dataIntegrationMetrics.duplicateResolutionCount}\r\n- アクセス最適化ゲイン: ${development.dataI...",
            "fullLength": 928,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${development.memorySystemValidated}"
              },
              {
                "type": "template_literal",
                "name": "${development.qualityAssuranceScore.toFixed(2)}"
              },
              {
                "type": "template_literal",
                "name": "${development.crossLevelConsistency.toFixed(2)}"
              },
              {
                "type": "template_literal",
                "name": "${development.systemConfidenceScore.toFixed(2)}"
              },
              {
                "type": "template_literal",
                "name": "${development.dataIntegrationMetrics.consolidationScore.toFixed(2)}"
              },
              {
                "type": "template_literal",
                "name": "${development.dataIntegrationMetrics.duplicateResolutionCount}"
              },
              {
                "type": "template_literal",
                "name": "${development.dataIntegrationMetrics.accessOptimizationGain.toFixed(2)}"
              },
              {
                "type": "template_literal",
                "name": "${Object.keys(development.personalityChanges).length}"
              },
              {
                "type": "template_literal",
                "name": "${Object.keys(development.relationshipChanges).length}"
              },
              {
                "type": "template_literal",
                "name": "${Object.keys(development.skillChanges).length}"
              },
              {
                "type": "template_literal",
                "name": "${development.emotionalGrowth.impact.toFixed(2)}"
              },
              {
                "type": "template_literal",
                "name": "${development.narrativeSignificance.toFixed(2)}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{development.memorySystemValidated}"
              },
              {
                "type": "handlebars",
                "name": "{development.qualityAssuranceScore.toFixed(2)}"
              },
              {
                "type": "handlebars",
                "name": "{development.crossLevelConsistency.toFixed(2)}"
              },
              {
                "type": "handlebars",
                "name": "{development.systemConfidenceScore.toFixed(2)}"
              },
              {
                "type": "handlebars",
                "name": "{development.dataIntegrationMetrics.consolidationScore.toFixed(2)}"
              },
              {
                "type": "handlebars",
                "name": "{development.dataIntegrationMetrics.duplicateResolutionCount}"
              },
              {
                "type": "handlebars",
                "name": "{development.dataIntegrationMetrics.accessOptimizationGain.toFixed(2)}"
              },
              {
                "type": "handlebars",
                "name": "{Object.keys(development.personalityChanges).length}"
              },
              {
                "type": "handlebars",
                "name": "{Object.keys(development.relationshipChanges).length}"
              },
              {
                "type": "handlebars",
                "name": "{Object.keys(development.skillChanges).length}"
              },
              {
                "type": "handlebars",
                "name": "{development.emotionalGrowth.impact.toFixed(2)}"
              },
              {
                "type": "handlebars",
                "name": "{development.narrativeSignificance.toFixed(2)}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\characters\\services\\evolution-service copy 2.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 16
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\evolution-service copy.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\characters\\services\\evolution-service copy.ts",
            "type": "template_literal",
            "content": "`キャラクター発展段階更新: ${character.name} - ${character.state.developmentStage || 0} → ${newDevelopmentStage}`",
            "fullLength": 101,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${character.state.developmentStage || 0}"
              },
              {
                "type": "template_literal",
                "name": "${newDevelopmentStage}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{character.state.developmentStage || 0}"
              },
              {
                "type": "handlebars",
                "name": "{newDevelopmentStage}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\characters\\services\\evolution-service copy.ts",
            "type": "template_literal",
            "content": "`発展経路を生成しました: ${character.name} (${character.id}), 現在ステージ: ${currentStage}, 目標ステージ: ${targetStage}, フェーズ: ${pathPhase}`",
            "fullLength": 119,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${character.id}"
              },
              {
                "type": "template_literal",
                "name": "${currentStage}"
              },
              {
                "type": "template_literal",
                "name": "${targetStage}"
              },
              {
                "type": "template_literal",
                "name": "${pathPhase}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{character.id}"
              },
              {
                "type": "handlebars",
                "name": "{currentStage}"
              },
              {
                "type": "handlebars",
                "name": "{targetStage}"
              },
              {
                "type": "handlebars",
                "name": "{pathPhase}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 2
      },
      {
        "file": "src\\lib\\characters\\services\\evolution-service.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\characters\\services\\evolution-service.ts",
            "type": "template_literal",
            "content": "`キャラクター「${character.name}」の発展処理が記憶階層システム統合により完了しました。\r\n\r\n【記憶階層システム統合結果】\r\n- システム検証済み: ${development.memorySystemValidated}\r\n- 品質保証スコア: ${development.qualityAssuranceScore.toFixed(2)}\r\n- 横断整合性: ${development.crossLevelConsistency.toFixed(2)}\r\n- システム信頼度: ${development.systemConfidenceScore.toFixed(2)}\r\n\r\nこの発展記録は記憶階層システムの統合機能により、品質保証、重複解決、アクセス最適化が適用されています。`",
            "fullLength": 354,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${development.memorySystemValidated}"
              },
              {
                "type": "template_literal",
                "name": "${development.qualityAssuranceScore.toFixed(2)}"
              },
              {
                "type": "template_literal",
                "name": "${development.crossLevelConsistency.toFixed(2)}"
              },
              {
                "type": "template_literal",
                "name": "${development.systemConfidenceScore.toFixed(2)}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{development.memorySystemValidated}"
              },
              {
                "type": "handlebars",
                "name": "{development.qualityAssuranceScore.toFixed(2)}"
              },
              {
                "type": "handlebars",
                "name": "{development.crossLevelConsistency.toFixed(2)}"
              },
              {
                "type": "handlebars",
                "name": "{development.systemConfidenceScore.toFixed(2)}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\characters\\services\\evolution-service.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 10
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\parameter-service copy 2.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 8
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\parameter-service copy.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\characters\\services\\parameter-service copy.ts",
            "type": "template_literal",
            "content": "`キャラクター「${characterId}」のパラメータ「${parameter.name}」を${previousValue}から${newValue}に修正しました（変化量: ${delta}）`",
            "fullLength": 101,
            "variables": [
              {
                "type": "template_literal",
                "name": "${characterId}"
              },
              {
                "type": "template_literal",
                "name": "${parameter.name}"
              },
              {
                "type": "template_literal",
                "name": "${previousValue}"
              },
              {
                "type": "template_literal",
                "name": "${newValue}"
              },
              {
                "type": "template_literal",
                "name": "${delta}"
              },
              {
                "type": "handlebars",
                "name": "{characterId}"
              },
              {
                "type": "handlebars",
                "name": "{parameter.name}"
              },
              {
                "type": "handlebars",
                "name": "{previousValue}"
              },
              {
                "type": "handlebars",
                "name": "{newValue}"
              },
              {
                "type": "handlebars",
                "name": "{delta}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\characters\\services\\parameter-service.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 8
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\psychology-service copy 2.ts",
        "line": 71,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "AnalysisPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 69,
            "content": "// APIスロットラーを使用して制御されたリクエストを実行",
            "isCurrent": false
          },
          {
            "line": 70,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 71,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 72,
            "content": "temperature: 0.2, // 一貫性重視の低温設定",
            "isCurrent": false
          },
          {
            "line": 73,
            "content": "targetLength: 800,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\psychology-service copy 2.ts",
        "line": 146,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 144,
            "content": "// APIスロットラーを使用して制御されたリクエスト実行",
            "isCurrent": false
          },
          {
            "line": 145,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 146,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 147,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 148,
            "content": "targetLength: 300,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\psychology-service copy 2.ts",
        "line": 71,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "ldPsychologyAnalysisPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 69,
            "content": "// APIスロットラーを使用して制御されたリクエストを実行",
            "isCurrent": false
          },
          {
            "line": 70,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 71,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 72,
            "content": "temperature: 0.2, // 一貫性重視の低温設定",
            "isCurrent": false
          },
          {
            "line": 73,
            "content": "targetLength: 800,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\psychology-service copy 2.ts",
        "line": 146,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 144,
            "content": "// APIスロットラーを使用して制御されたリクエスト実行",
            "isCurrent": false
          },
          {
            "line": 145,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 146,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 147,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 148,
            "content": "targetLength: 300,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\psychology-service copy 2.ts",
        "line": 34,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "geminiClient: GeminiClient = new GeminiClient()",
        "method": "unknown",
        "class": "PsychologyService",
        "surrounding": [
          {
            "line": 32,
            "content": "constructor(",
            "isCurrent": false
          },
          {
            "line": 33,
            "content": "repository: ICharacterRepository = characterRepository,",
            "isCurrent": false
          },
          {
            "line": 34,
            "content": "geminiClient: GeminiClient = new GeminiClient()",
            "isCurrent": true
          },
          {
            "line": 35,
            "content": ") {",
            "isCurrent": false
          },
          {
            "line": 36,
            "content": "this.repository = repository;",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\psychology-service copy 2.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\characters\\services\\psychology-service copy 2.ts",
            "type": "template_literal",
            "content": "`\r\n# キャラクター心理分析\r\n\r\n以下の情報から、キャラクター「${character.name}」の心理状態を分析してください。\r\n\r\n## キャラクター基本情報\r\n名前: ${character.name}\r\nタイプ: ${character.type}\r\n説明: ${character.description}\r\n性格特性: ${personalityTraits}\r\n背景: ${backstory}\r\n\r\n## 最近のイベント\r\n${recentEventsText}\r\n\r\n## 既存の心理情報（更新前）\r\n${existingPsychologyText}\r\n\r\n## 分析指示\r\n上記の情報を基に、次の要素を特定してください:\r\n1. 現在の欲求（3-5項目）: キャラクターが現在何を望んでいるか\r\n2. 現在の恐れ（2-4項目）: キャラクターが現在何を恐れているか\r\n3. 内的葛藤（1-3項目）: キャラクターが抱える内面的矛盾や葛藤\r\n4. 感情状態: 現在の主要な感情とその強度（0-1のスケール）\r\n\r\n## 出力形式\r\nJSON形式でのみ出力してください:\r\n{...",
            "fullLength": 706,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${character.type}"
              },
              {
                "type": "template_literal",
                "name": "${character.description}"
              },
              {
                "type": "template_literal",
                "name": "${personalityTraits}"
              },
              {
                "type": "template_literal",
                "name": "${backstory}"
              },
              {
                "type": "template_literal",
                "name": "${recentEventsText}"
              },
              {
                "type": "template_literal",
                "name": "${existingPsychologyText}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{character.type}"
              },
              {
                "type": "handlebars",
                "name": "{character.description}"
              },
              {
                "type": "handlebars",
                "name": "{personalityTraits}"
              },
              {
                "type": "handlebars",
                "name": "{backstory}"
              },
              {
                "type": "handlebars",
                "name": "{recentEventsText}"
              },
              {
                "type": "handlebars",
                "name": "{existingPsychologyText}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"currentDesires\": [\"欲求1\", \"欲求2\", ...],\r\n  \"currentFears\": [\"恐れ1\", \"恐れ2\", ...],\r\n  \"internalConflicts\": [\"葛藤1\", \"葛藤2\", ...],\r\n  \"emotionalState\": {\r\n    \"感情名1\": 強度値,\r\n    \"感情名2\": 強度値,\r\n    ...\r\n  }"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\characters\\services\\psychology-service copy 2.ts",
            "type": "template_literal",
            "content": "`\r\n# キャラクター関係性分析\r\n\r\n以下の2人のキャラクターの関係性を分析してください。\r\n\r\n## キャラクター1\r\n名前: ${character1.name}\r\nタイプ: ${character1.type}\r\n説明: ${character1.description}\r\n\r\n## キャラクター2\r\n名前: ${character2.name}\r\nタイプ: ${character2.type}\r\n説明: ${character2.description}\r\n\r\n## 既存の関係性\r\n関係タイプ: ${relationshipType}\r\n関係の強さ: ${relationshipStrength}\r\n説明: ${relationshipDescription}\r\n\r\n## 分析指示\r\n${character1.name}から見た${character2.name}への感情的態度を分析してください。\r\n\r\n## 出力形式\r\nJSON形式でのみ出力してください:\r\n{\r\n  \"attitude\": \"感情的態度（信頼、疑念、愛情、嫉妬など）\",\r\n  \"intensity\": 0...",
            "fullLength": 603,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character1.name}"
              },
              {
                "type": "template_literal",
                "name": "${character1.type}"
              },
              {
                "type": "template_literal",
                "name": "${character1.description}"
              },
              {
                "type": "template_literal",
                "name": "${character2.name}"
              },
              {
                "type": "template_literal",
                "name": "${character2.type}"
              },
              {
                "type": "template_literal",
                "name": "${character2.description}"
              },
              {
                "type": "template_literal",
                "name": "${relationshipType}"
              },
              {
                "type": "template_literal",
                "name": "${relationshipStrength}"
              },
              {
                "type": "template_literal",
                "name": "${relationshipDescription}"
              },
              {
                "type": "template_literal",
                "name": "${character1.name}"
              },
              {
                "type": "template_literal",
                "name": "${character2.name}"
              },
              {
                "type": "handlebars",
                "name": "{character1.name}"
              },
              {
                "type": "handlebars",
                "name": "{character1.type}"
              },
              {
                "type": "handlebars",
                "name": "{character1.description}"
              },
              {
                "type": "handlebars",
                "name": "{character2.name}"
              },
              {
                "type": "handlebars",
                "name": "{character2.type}"
              },
              {
                "type": "handlebars",
                "name": "{character2.description}"
              },
              {
                "type": "handlebars",
                "name": "{relationshipType}"
              },
              {
                "type": "handlebars",
                "name": "{relationshipStrength}"
              },
              {
                "type": "handlebars",
                "name": "{relationshipDescription}"
              },
              {
                "type": "handlebars",
                "name": "{character1.name}"
              },
              {
                "type": "handlebars",
                "name": "{character2.name}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"attitude\": \"感情的態度（信頼、疑念、愛情、嫉妬など）\",\r\n  \"intensity\": 0.X, // 強度（0-1の範囲）\r\n  \"isDynamic\": true/false, // 変化しつつあるか\r\n  \"recentChange\": \"最近の変化の説明（変化している場合）\"\r\n}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 2
      },
      {
        "file": "src\\lib\\characters\\services\\psychology-service copy 2.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\psychology-service copy.ts",
        "line": 71,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "AnalysisPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 69,
            "content": "// APIスロットラーを使用して制御されたリクエストを実行",
            "isCurrent": false
          },
          {
            "line": 70,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 71,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 72,
            "content": "temperature: 0.2, // 一貫性重視の低温設定",
            "isCurrent": false
          },
          {
            "line": 73,
            "content": "targetLength: 800,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\psychology-service copy.ts",
        "line": 146,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 144,
            "content": "// APIスロットラーを使用して制御されたリクエスト実行",
            "isCurrent": false
          },
          {
            "line": 145,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 146,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 147,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 148,
            "content": "targetLength: 300,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\psychology-service copy.ts",
        "line": 71,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "ldPsychologyAnalysisPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 69,
            "content": "// APIスロットラーを使用して制御されたリクエストを実行",
            "isCurrent": false
          },
          {
            "line": 70,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 71,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 72,
            "content": "temperature: 0.2, // 一貫性重視の低温設定",
            "isCurrent": false
          },
          {
            "line": 73,
            "content": "targetLength: 800,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\psychology-service copy.ts",
        "line": 146,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, {",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 144,
            "content": "// APIスロットラーを使用して制御されたリクエスト実行",
            "isCurrent": false
          },
          {
            "line": 145,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 146,
            "content": "this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 147,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 148,
            "content": "targetLength: 300,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\psychology-service copy.ts",
        "line": 34,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "geminiClient: GeminiClient = new GeminiClient()",
        "method": "unknown",
        "class": "PsychologyService",
        "surrounding": [
          {
            "line": 32,
            "content": "constructor(",
            "isCurrent": false
          },
          {
            "line": 33,
            "content": "repository: ICharacterRepository = characterRepository,",
            "isCurrent": false
          },
          {
            "line": 34,
            "content": "geminiClient: GeminiClient = new GeminiClient()",
            "isCurrent": true
          },
          {
            "line": 35,
            "content": ") {",
            "isCurrent": false
          },
          {
            "line": 36,
            "content": "this.repository = repository;",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\psychology-service copy.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\characters\\services\\psychology-service copy.ts",
            "type": "template_literal",
            "content": "`\r\n# キャラクター心理分析\r\n\r\n以下の情報から、キャラクター「${character.name}」の心理状態を分析してください。\r\n\r\n## キャラクター基本情報\r\n名前: ${character.name}\r\nタイプ: ${character.type}\r\n説明: ${character.description}\r\n性格特性: ${personalityTraits}\r\n背景: ${backstory}\r\n\r\n## 最近のイベント\r\n${recentEventsText}\r\n\r\n## 既存の心理情報（更新前）\r\n${existingPsychologyText}\r\n\r\n## 分析指示\r\n上記の情報を基に、次の要素を特定してください:\r\n1. 現在の欲求（3-5項目）: キャラクターが現在何を望んでいるか\r\n2. 現在の恐れ（2-4項目）: キャラクターが現在何を恐れているか\r\n3. 内的葛藤（1-3項目）: キャラクターが抱える内面的矛盾や葛藤\r\n4. 感情状態: 現在の主要な感情とその強度（0-1のスケール）\r\n\r\n## 出力形式\r\nJSON形式でのみ出力してください:\r\n{...",
            "fullLength": 706,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${character.type}"
              },
              {
                "type": "template_literal",
                "name": "${character.description}"
              },
              {
                "type": "template_literal",
                "name": "${personalityTraits}"
              },
              {
                "type": "template_literal",
                "name": "${backstory}"
              },
              {
                "type": "template_literal",
                "name": "${recentEventsText}"
              },
              {
                "type": "template_literal",
                "name": "${existingPsychologyText}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{character.type}"
              },
              {
                "type": "handlebars",
                "name": "{character.description}"
              },
              {
                "type": "handlebars",
                "name": "{personalityTraits}"
              },
              {
                "type": "handlebars",
                "name": "{backstory}"
              },
              {
                "type": "handlebars",
                "name": "{recentEventsText}"
              },
              {
                "type": "handlebars",
                "name": "{existingPsychologyText}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"currentDesires\": [\"欲求1\", \"欲求2\", ...],\r\n  \"currentFears\": [\"恐れ1\", \"恐れ2\", ...],\r\n  \"internalConflicts\": [\"葛藤1\", \"葛藤2\", ...],\r\n  \"emotionalState\": {\r\n    \"感情名1\": 強度値,\r\n    \"感情名2\": 強度値,\r\n    ...\r\n  }"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\characters\\services\\psychology-service copy.ts",
            "type": "template_literal",
            "content": "`\r\n# キャラクター関係性分析\r\n\r\n以下の2人のキャラクターの関係性を分析してください。\r\n\r\n## キャラクター1\r\n名前: ${character1.name}\r\nタイプ: ${character1.type}\r\n説明: ${character1.description}\r\n\r\n## キャラクター2\r\n名前: ${character2.name}\r\nタイプ: ${character2.type}\r\n説明: ${character2.description}\r\n\r\n## 既存の関係性\r\n関係タイプ: ${relationshipType}\r\n関係の強さ: ${relationshipStrength}\r\n説明: ${relationshipDescription}\r\n\r\n## 分析指示\r\n${character1.name}から見た${character2.name}への感情的態度を分析してください。\r\n\r\n## 出力形式\r\nJSON形式でのみ出力してください:\r\n{\r\n  \"attitude\": \"感情的態度（信頼、疑念、愛情、嫉妬など）\",\r\n  \"intensity\": 0...",
            "fullLength": 603,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character1.name}"
              },
              {
                "type": "template_literal",
                "name": "${character1.type}"
              },
              {
                "type": "template_literal",
                "name": "${character1.description}"
              },
              {
                "type": "template_literal",
                "name": "${character2.name}"
              },
              {
                "type": "template_literal",
                "name": "${character2.type}"
              },
              {
                "type": "template_literal",
                "name": "${character2.description}"
              },
              {
                "type": "template_literal",
                "name": "${relationshipType}"
              },
              {
                "type": "template_literal",
                "name": "${relationshipStrength}"
              },
              {
                "type": "template_literal",
                "name": "${relationshipDescription}"
              },
              {
                "type": "template_literal",
                "name": "${character1.name}"
              },
              {
                "type": "template_literal",
                "name": "${character2.name}"
              },
              {
                "type": "handlebars",
                "name": "{character1.name}"
              },
              {
                "type": "handlebars",
                "name": "{character1.type}"
              },
              {
                "type": "handlebars",
                "name": "{character1.description}"
              },
              {
                "type": "handlebars",
                "name": "{character2.name}"
              },
              {
                "type": "handlebars",
                "name": "{character2.type}"
              },
              {
                "type": "handlebars",
                "name": "{character2.description}"
              },
              {
                "type": "handlebars",
                "name": "{relationshipType}"
              },
              {
                "type": "handlebars",
                "name": "{relationshipStrength}"
              },
              {
                "type": "handlebars",
                "name": "{relationshipDescription}"
              },
              {
                "type": "handlebars",
                "name": "{character1.name}"
              },
              {
                "type": "handlebars",
                "name": "{character2.name}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"attitude\": \"感情的態度（信頼、疑念、愛情、嫉妬など）\",\r\n  \"intensity\": 0.X, // 強度（0-1の範囲）\r\n  \"isDynamic\": true/false, // 変化しつつあるか\r\n  \"recentChange\": \"最近の変化の説明（変化している場合）\"\r\n}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 2
      },
      {
        "file": "src\\lib\\characters\\services\\psychology-service copy.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\psychology-service.ts",
        "line": 132,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "this.geminiClient = geminiClient || new GeminiClient();",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 130,
            "content": "}",
            "isCurrent": false
          },
          {
            "line": 131,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 132,
            "content": "this.geminiClient = geminiClient || new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 133,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 134,
            "content": "// 🔧 即座使用可能：基本初期化をコンストラクタで完了",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\psychology-service.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 5
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\relationship-service.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\characters\\services\\relationship-service.ts",
            "type": "template_literal",
            "content": "`キャラクター関係性が${action}されました。\r\n関係者: ${char1Id} → ${char2Id}\r\n関係性タイプ: ${relationship.type}\r\n関係性強度: ${relationship.strength}\r\n最終インタラクション: ${relationship.lastInteraction}\r\n説明: ${relationship.description || '未記載'}`",
            "fullLength": 207,
            "variables": [
              {
                "type": "template_literal",
                "name": "${action}"
              },
              {
                "type": "template_literal",
                "name": "${char1Id}"
              },
              {
                "type": "template_literal",
                "name": "${char2Id}"
              },
              {
                "type": "template_literal",
                "name": "${relationship.type}"
              },
              {
                "type": "template_literal",
                "name": "${relationship.strength}"
              },
              {
                "type": "template_literal",
                "name": "${relationship.lastInteraction}"
              },
              {
                "type": "template_literal",
                "name": "${relationship.description || '未記載'}"
              },
              {
                "type": "handlebars",
                "name": "{action}"
              },
              {
                "type": "handlebars",
                "name": "{char1Id}"
              },
              {
                "type": "handlebars",
                "name": "{char2Id}"
              },
              {
                "type": "handlebars",
                "name": "{relationship.type}"
              },
              {
                "type": "handlebars",
                "name": "{relationship.strength}"
              },
              {
                "type": "handlebars",
                "name": "{relationship.lastInteraction}"
              },
              {
                "type": "handlebars",
                "name": "{relationship.description || '未記載'}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\characters\\services\\relationship-service.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 6
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\skill-service copy 2.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\characters\\services\\skill-service copy 2.ts",
            "type": "template_literal",
            "content": "`キャラクター ${characterId} がスキル「${skill.name}」を習得しました。\r\n\r\n【習得詳細】\r\n- スキル名: ${skill.name}\r\n- 説明: ${skill.description}\r\n- 初期レベル: 1\r\n- 習得方法: ${forced ? '強制習得' : '要件満了による習得'}\r\n\r\n【パラメータ効果】\r\n${parameterEffects.map(effect => \r\n    `",
            "fullLength": 220,
            "variables": [
              {
                "type": "template_literal",
                "name": "${characterId}"
              },
              {
                "type": "template_literal",
                "name": "${skill.name}"
              },
              {
                "type": "template_literal",
                "name": "${skill.name}"
              },
              {
                "type": "template_literal",
                "name": "${skill.description}"
              },
              {
                "type": "template_literal",
                "name": "${forced ? '強制習得' : '要件満了による習得'}"
              },
              {
                "type": "handlebars",
                "name": "{characterId}"
              },
              {
                "type": "handlebars",
                "name": "{skill.name}"
              },
              {
                "type": "handlebars",
                "name": "{skill.name}"
              },
              {
                "type": "handlebars",
                "name": "{skill.description}"
              },
              {
                "type": "handlebars",
                "name": "{forced ? '強制習得' : '要件満了による習得'}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\characters\\services\\skill-service copy 2.ts",
            "type": "template_literal",
            "content": "`キャラクター ${characterId} のスキル「${skill.name}」がレベルアップしました。\r\n\r\n【レベルアップ詳細】\r\n- スキル名: ${skill.name}\r\n- 前レベル: ${previousLevel}\r\n- 新レベル: ${newLevel}\r\n- 上昇レベル: +${newLevel - previousLevel}\r\n\r\n【パラメータ効果】\r\n${parameterEffects.map(effect => \r\n    `",
            "fullLength": 232,
            "variables": [
              {
                "type": "template_literal",
                "name": "${characterId}"
              },
              {
                "type": "template_literal",
                "name": "${skill.name}"
              },
              {
                "type": "template_literal",
                "name": "${skill.name}"
              },
              {
                "type": "template_literal",
                "name": "${previousLevel}"
              },
              {
                "type": "template_literal",
                "name": "${newLevel}"
              },
              {
                "type": "template_literal",
                "name": "${newLevel - previousLevel}"
              },
              {
                "type": "handlebars",
                "name": "{characterId}"
              },
              {
                "type": "handlebars",
                "name": "{skill.name}"
              },
              {
                "type": "handlebars",
                "name": "{skill.name}"
              },
              {
                "type": "handlebars",
                "name": "{previousLevel}"
              },
              {
                "type": "handlebars",
                "name": "{newLevel}"
              },
              {
                "type": "handlebars",
                "name": "{newLevel - previousLevel}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\characters\\services\\skill-service copy 2.ts",
            "type": "template_literal",
            "content": "`キャラクター ${characterId} のスキル「${skill.name}」の習熟度が向上しました。\r\n\r\n【習熟度変化】\r\n- スキル名: ${skill.name}\r\n- 前習熟度: ${previousProficiency}%\r\n- 新習熟度: ${newProficiency}%\r\n- 向上度: +${newProficiency - previousProficiency}%\r\n\r\n${levelUpOccurred ? `",
            "fullLength": 224,
            "variables": [
              {
                "type": "template_literal",
                "name": "${characterId}"
              },
              {
                "type": "template_literal",
                "name": "${skill.name}"
              },
              {
                "type": "template_literal",
                "name": "${skill.name}"
              },
              {
                "type": "template_literal",
                "name": "${previousProficiency}"
              },
              {
                "type": "template_literal",
                "name": "${newProficiency}"
              },
              {
                "type": "template_literal",
                "name": "${newProficiency - previousProficiency}"
              },
              {
                "type": "handlebars",
                "name": "{characterId}"
              },
              {
                "type": "handlebars",
                "name": "{skill.name}"
              },
              {
                "type": "handlebars",
                "name": "{skill.name}"
              },
              {
                "type": "handlebars",
                "name": "{previousProficiency}"
              },
              {
                "type": "handlebars",
                "name": "{newProficiency}"
              },
              {
                "type": "handlebars",
                "name": "{newProficiency - previousProficiency}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 3
      },
      {
        "file": "src\\lib\\characters\\services\\skill-service copy 2.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 3
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\services\\skill-service copy.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\characters\\services\\skill-service copy.ts",
            "type": "template_literal",
            "content": "`キャラクター「${characterId}」のパラメータ「${paramDef?.name || req.parameterId}」が要件を満たしていません（必要:${req.minValue}, 現在:${param?.value || 0}）`",
            "fullLength": 125,
            "variables": [
              {
                "type": "template_literal",
                "name": "${characterId}"
              },
              {
                "type": "template_literal",
                "name": "${paramDef?.name || req.parameterId}"
              },
              {
                "type": "template_literal",
                "name": "${req.minValue}"
              },
              {
                "type": "template_literal",
                "name": "${param?.value || 0}"
              },
              {
                "type": "handlebars",
                "name": "{characterId}"
              },
              {
                "type": "handlebars",
                "name": "{paramDef?.name || req.parameterId}"
              },
              {
                "type": "handlebars",
                "name": "{req.minValue}"
              },
              {
                "type": "handlebars",
                "name": "{param?.value || 0}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\characters\\services\\skill-service.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\characters\\services\\skill-service.ts",
            "type": "template_literal",
            "content": "`キャラクター ${characterId} がスキル「${skill.name}」を習得しました。\r\n\r\n【習得詳細】\r\n- スキル名: ${skill.name}\r\n- 説明: ${skill.description}\r\n- 初期レベル: 1\r\n- 習得方法: ${forced ? '強制習得' : '要件満了による習得'}\r\n\r\n【パラメータ効果】\r\n${parameterEffects.map(effect => \r\n    `",
            "fullLength": 220,
            "variables": [
              {
                "type": "template_literal",
                "name": "${characterId}"
              },
              {
                "type": "template_literal",
                "name": "${skill.name}"
              },
              {
                "type": "template_literal",
                "name": "${skill.name}"
              },
              {
                "type": "template_literal",
                "name": "${skill.description}"
              },
              {
                "type": "template_literal",
                "name": "${forced ? '強制習得' : '要件満了による習得'}"
              },
              {
                "type": "handlebars",
                "name": "{characterId}"
              },
              {
                "type": "handlebars",
                "name": "{skill.name}"
              },
              {
                "type": "handlebars",
                "name": "{skill.name}"
              },
              {
                "type": "handlebars",
                "name": "{skill.description}"
              },
              {
                "type": "handlebars",
                "name": "{forced ? '強制習得' : '要件満了による習得'}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\characters\\services\\skill-service.ts",
            "type": "template_literal",
            "content": "`キャラクター ${characterId} のスキル「${skill.name}」がレベルアップしました。\r\n\r\n【レベルアップ詳細】\r\n- スキル名: ${skill.name}\r\n- 前レベル: ${previousLevel}\r\n- 新レベル: ${newLevel}\r\n- 上昇レベル: +${newLevel - previousLevel}\r\n\r\n【パラメータ効果】\r\n${parameterEffects.map(effect => \r\n    `",
            "fullLength": 232,
            "variables": [
              {
                "type": "template_literal",
                "name": "${characterId}"
              },
              {
                "type": "template_literal",
                "name": "${skill.name}"
              },
              {
                "type": "template_literal",
                "name": "${skill.name}"
              },
              {
                "type": "template_literal",
                "name": "${previousLevel}"
              },
              {
                "type": "template_literal",
                "name": "${newLevel}"
              },
              {
                "type": "template_literal",
                "name": "${newLevel - previousLevel}"
              },
              {
                "type": "handlebars",
                "name": "{characterId}"
              },
              {
                "type": "handlebars",
                "name": "{skill.name}"
              },
              {
                "type": "handlebars",
                "name": "{skill.name}"
              },
              {
                "type": "handlebars",
                "name": "{previousLevel}"
              },
              {
                "type": "handlebars",
                "name": "{newLevel}"
              },
              {
                "type": "handlebars",
                "name": "{newLevel - previousLevel}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\characters\\services\\skill-service.ts",
            "type": "template_literal",
            "content": "`キャラクター ${characterId} のスキル「${skill.name}」の習熟度が向上しました。\r\n\r\n【習熟度変化】\r\n- スキル名: ${skill.name}\r\n- 前習熟度: ${previousProficiency}%\r\n- 新習熟度: ${newProficiency}%\r\n- 向上度: +${newProficiency - previousProficiency}%\r\n\r\n${levelUpOccurred ? `",
            "fullLength": 224,
            "variables": [
              {
                "type": "template_literal",
                "name": "${characterId}"
              },
              {
                "type": "template_literal",
                "name": "${skill.name}"
              },
              {
                "type": "template_literal",
                "name": "${skill.name}"
              },
              {
                "type": "template_literal",
                "name": "${previousProficiency}"
              },
              {
                "type": "template_literal",
                "name": "${newProficiency}"
              },
              {
                "type": "template_literal",
                "name": "${newProficiency - previousProficiency}"
              },
              {
                "type": "handlebars",
                "name": "{characterId}"
              },
              {
                "type": "handlebars",
                "name": "{skill.name}"
              },
              {
                "type": "handlebars",
                "name": "{skill.name}"
              },
              {
                "type": "handlebars",
                "name": "{previousProficiency}"
              },
              {
                "type": "handlebars",
                "name": "{newProficiency}"
              },
              {
                "type": "handlebars",
                "name": "{newProficiency - previousProficiency}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 3
      },
      {
        "file": "src\\lib\\characters\\services\\skill-service.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 3
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\utils\\character-utils.ts",
        "line": 159,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "const result = await geminiClient.generateText(prompt, {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 157,
            "content": "`;",
            "isCurrent": false
          },
          {
            "line": 158,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 159,
            "content": "const result = await geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 160,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 161,
            "content": "targetLength: 200",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\utils\\character-utils.ts",
        "line": 159,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const result = await geminiClient.generateText(prompt, {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 157,
            "content": "`;",
            "isCurrent": false
          },
          {
            "line": 158,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 159,
            "content": "const result = await geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 160,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 161,
            "content": "targetLength: 200",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\utils\\character-utils.ts",
        "line": 141,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "const geminiClient = new GeminiClient();",
        "method": "extractTraitsFromBackstory",
        "class": "unknown",
        "surrounding": [
          {
            "line": 139,
            "content": "export async function extractTraitsFromBackstory(backstory: string): Promise<string[]> {",
            "isCurrent": false
          },
          {
            "line": 140,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 141,
            "content": "const geminiClient = new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 142,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 143,
            "content": "// プロンプト作成",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\utils\\character-utils.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\characters\\utils\\character-utils.ts",
            "type": "template_literal",
            "content": "`# ${character.name}\r\nタイプ: ${character.type}\r\n説明: ${character.description}\r\n\r\n## 性格\r\n${character.personality?.traits?.map(t => `",
            "fullLength": 128,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${character.type}"
              },
              {
                "type": "template_literal",
                "name": "${character.description}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{character.type}"
              },
              {
                "type": "handlebars",
                "name": "{character.description}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\characters\\utils\\character-utils.ts",
            "type": "template_literal",
            "content": "`).join('\\n') || '特性情報なし'}\r\n\r\n## 背景\r\n${character.backstory?.summary || '背景情報なし'}\r\n\r\n## 現在の状態\r\n感情状態: ${character.state?.emotionalState || 'NEUTRAL'}\r\n発展段階: ${character.state?.developmentStage || 0}/5\r\n最終登場: チャプター${character.state?.lastAppearance || '?'}\r\n\r\n## 関係性\r\n${character.relationships?.map(r => `",
            "fullLength": 301,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.backstory?.summary || '背景情報なし'}"
              },
              {
                "type": "template_literal",
                "name": "${character.state?.emotionalState || 'NEUTRAL'}"
              },
              {
                "type": "template_literal",
                "name": "${character.state?.developmentStage || 0}"
              },
              {
                "type": "template_literal",
                "name": "${character.state?.lastAppearance || '?'}"
              },
              {
                "type": "handlebars",
                "name": "{character.backstory?.summary || '背景情報なし'}"
              },
              {
                "type": "handlebars",
                "name": "{character.state?.emotionalState || 'NEUTRAL'}"
              },
              {
                "type": "handlebars",
                "name": "{character.state?.developmentStage || 0}"
              },
              {
                "type": "handlebars",
                "name": "{character.state?.lastAppearance || '?'}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\characters\\utils\\character-utils.ts",
            "type": "template_literal",
            "content": "`\\n心理: ${character.psychology.currentDesires.slice(0, 2).join(', ')} を欲し、${character.psychology.currentFears.slice(0, 1)} を恐れている`",
            "fullLength": 129,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.psychology.currentDesires.slice(0, 2).join(', ')}"
              },
              {
                "type": "template_literal",
                "name": "${character.psychology.currentFears.slice(0, 1)}"
              },
              {
                "type": "handlebars",
                "name": "{character.psychology.currentDesires.slice(0, 2).join(', ')}"
              },
              {
                "type": "handlebars",
                "name": "{character.psychology.currentFears.slice(0, 1)}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\characters\\utils\\character-utils.ts",
            "type": "template_literal",
            "content": "`## ${character.name}\r\nタイプ: ${character.type}\r\n説明: ${character.description}\r\n性格: ${character.personality?.traits?.join(', ') || '特性情報なし'}\r\n状態: ${character.state?.emotionalState || 'NEUTRAL'} (発展段階: ${character.state?.developmentStage || 0}/5)${psychSummary}`",
            "fullLength": 258,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${character.type}"
              },
              {
                "type": "template_literal",
                "name": "${character.description}"
              },
              {
                "type": "template_literal",
                "name": "${character.personality?.traits?.join(', ') || '特性情報なし'}"
              },
              {
                "type": "template_literal",
                "name": "${character.state?.emotionalState || 'NEUTRAL'}"
              },
              {
                "type": "template_literal",
                "name": "${character.state?.developmentStage || 0}"
              },
              {
                "type": "template_literal",
                "name": "${psychSummary}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{character.type}"
              },
              {
                "type": "handlebars",
                "name": "{character.description}"
              },
              {
                "type": "handlebars",
                "name": "{character.personality?.traits?.join(', ') || '特性情報なし'}"
              },
              {
                "type": "handlebars",
                "name": "{character.state?.emotionalState || 'NEUTRAL'}"
              },
              {
                "type": "handlebars",
                "name": "{character.state?.developmentStage || 0}"
              },
              {
                "type": "handlebars",
                "name": "{psychSummary}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\characters\\utils\\character-utils.ts",
            "type": "template_literal",
            "content": "`\r\n以下のキャラクターのバックストーリーから、そのキャラクターの主要な性格特性を5つ抽出してください。\r\n各特性は単語または短いフレーズ（最大3単語）で表現してください。\r\n\r\nバックストーリー:\r\n${backstory}\r\n\r\n出力形式:\r\n- 特性1\r\n- 特性2\r\n- 特性3\r\n- 特性4\r\n- 特性5\r\n`",
            "fullLength": 160,
            "variables": [
              {
                "type": "template_literal",
                "name": "${backstory}"
              },
              {
                "type": "handlebars",
                "name": "{backstory}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\characters\\utils\\character-utils.ts",
            "type": "template_literal",
            "content": "`Character[${character.id}]: ${character.name} (${character.type}), \r\n  state: ${character.state.emotionalState}, \r\n  stage: ${character.state.developmentStage}, \r\n  lastAppearance: Chapter ${character.state.lastAppearance || 'N/A'}`",
            "fullLength": 233,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.id}"
              },
              {
                "type": "template_literal",
                "name": "${character.name}"
              },
              {
                "type": "template_literal",
                "name": "${character.type}"
              },
              {
                "type": "template_literal",
                "name": "${character.state.emotionalState}"
              },
              {
                "type": "template_literal",
                "name": "${character.state.developmentStage}"
              },
              {
                "type": "template_literal",
                "name": "${character.state.lastAppearance || 'N/A'}"
              },
              {
                "type": "handlebars",
                "name": "{character.id}"
              },
              {
                "type": "handlebars",
                "name": "{character.name}"
              },
              {
                "type": "handlebars",
                "name": "{character.type}"
              },
              {
                "type": "handlebars",
                "name": "{character.state.emotionalState}"
              },
              {
                "type": "handlebars",
                "name": "{character.state.developmentStage}"
              },
              {
                "type": "handlebars",
                "name": "{character.state.lastAppearance || 'N/A'}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\characters\\utils\\character-utils.ts",
            "type": "template_literal",
            "content": "`\\n現在の状態:\r\n- 感情: ${character.state.emotionalState}\r\n- 発展段階: ${character.state.developmentStage}/5\r\n- 最終登場: ${character.state.lastAppearance ? `",
            "fullLength": 143,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character.state.emotionalState}"
              },
              {
                "type": "template_literal",
                "name": "${character.state.developmentStage}"
              },
              {
                "type": "handlebars",
                "name": "{character.state.emotionalState}"
              },
              {
                "type": "handlebars",
                "name": "{character.state.developmentStage}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 7
      },
      {
        "file": "src\\lib\\characters\\utils\\character-utils.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "yamlOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\lib\\characters\\utils\\serialization-utils.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 5
          },
          {
            "format": "yamlOutput",
            "count": 3
          }
        ]
      },
      {
        "file": "src\\lib\\concept\\business-concept-library.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\concept\\business-concept-library.ts",
            "type": "template_literal",
            "content": "`Updated concept ${conceptName} with learning record at stage ${learningRecord.stage} in chapter ${learningRecord.chapterNumber}`",
            "fullLength": 129,
            "variables": [
              {
                "type": "template_literal",
                "name": "${conceptName}"
              },
              {
                "type": "template_literal",
                "name": "${learningRecord.stage}"
              },
              {
                "type": "template_literal",
                "name": "${learningRecord.chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{conceptName}"
              },
              {
                "type": "handlebars",
                "name": "{learningRecord.stage}"
              },
              {
                "type": "handlebars",
                "name": "{learningRecord.chapterNumber}"
              }
            ],
            "purpose": "unknown"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\concept\\business-concept-library.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\foreshadowing\\auto-generator.ts",
        "line": 183,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "() => this.geminiClient.generateText(prompt, {",
        "method": "retryGenerationRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 181,
            "content": "// リトライロジック付きAI生成",
            "isCurrent": false
          },
          {
            "line": 182,
            "content": "const response = await this.retryGenerationRequest(",
            "isCurrent": false
          },
          {
            "line": 183,
            "content": "() => this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 184,
            "content": "temperature: 0.7,",
            "isCurrent": false
          },
          {
            "line": 185,
            "content": "targetLength: 2000",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\foreshadowing\\auto-generator.ts",
        "line": 183,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "() => this.geminiClient.generateText(prompt, {",
        "method": "retryGenerationRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 181,
            "content": "// リトライロジック付きAI生成",
            "isCurrent": false
          },
          {
            "line": 182,
            "content": "const response = await this.retryGenerationRequest(",
            "isCurrent": false
          },
          {
            "line": 183,
            "content": "() => this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 184,
            "content": "temperature: 0.7,",
            "isCurrent": false
          },
          {
            "line": 185,
            "content": "targetLength: 2000",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\foreshadowing\\auto-generator.ts",
        "line": 112,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "this.geminiClient = geminiClient || new GeminiClient();",
        "method": "unknown",
        "class": "ForeshadowingAutoGenerator",
        "surrounding": [
          {
            "line": 110,
            "content": "}",
            "isCurrent": false
          },
          {
            "line": 111,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 112,
            "content": "this.geminiClient = geminiClient || new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 113,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 114,
            "content": "// 設定の完全検証と初期化",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\foreshadowing\\auto-generator.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\foreshadowing\\auto-generator.ts",
            "type": "template_literal",
            "content": "`\nあなたはファンタジー小説の伏線設計専門家です。\n以下の詳細な情報に基づいて、今後の展開で効果的に回収可能な伏線を${count}個考えてください。\n\n## 世界観設定\n${worldContext}\n\n## キャラクター情報\n${characterContext}\n\n## 物語のコンテキスト\n${context.substring(0, 3000)}\n\n## 現在の状況\n- 現在のチャプター: ${currentChapter}\n- 伏線導入時期: ${currentChapter}章以降\n- 回収予定時期: ${currentChapter + 2}章以降\n\n## 伏線設計の要件\n- 世界観とキャラクターに深く根ざした内容\n- 読者の興味を引く神秘的・魅力的要素\n- 将来的な回収時に驚きと納得感を提供\n- 物語の主要テーマに関連\n\n以下のJSONフォーマットで出力してください:\n[\n  {\n    \"description\": \"伏線の簡潔で魅力的な説明\",\n    \"context\": \"伏線の詳細コンテキストと導入方法\",\n    \"chapter_introduced\": ...",
            "fullLength": 738,
            "variables": [
              {
                "type": "template_literal",
                "name": "${count}"
              },
              {
                "type": "template_literal",
                "name": "${worldContext}"
              },
              {
                "type": "template_literal",
                "name": "${characterContext}"
              },
              {
                "type": "template_literal",
                "name": "${context.substring(0, 3000)}"
              },
              {
                "type": "template_literal",
                "name": "${currentChapter}"
              },
              {
                "type": "template_literal",
                "name": "${currentChapter}"
              },
              {
                "type": "template_literal",
                "name": "${currentChapter + 2}"
              },
              {
                "type": "template_literal",
                "name": "${currentChapter}"
              },
              {
                "type": "template_literal",
                "name": "${currentChapter + 2}"
              },
              {
                "type": "handlebars",
                "name": "{count}"
              },
              {
                "type": "handlebars",
                "name": "{worldContext}"
              },
              {
                "type": "handlebars",
                "name": "{characterContext}"
              },
              {
                "type": "handlebars",
                "name": "{context.substring(0, 3000)}"
              },
              {
                "type": "handlebars",
                "name": "{currentChapter}"
              },
              {
                "type": "handlebars",
                "name": "{currentChapter}"
              },
              {
                "type": "handlebars",
                "name": "{currentChapter + 2}"
              },
              {
                "type": "handlebars",
                "name": "{currentChapter + 2}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\foreshadowing\\auto-generator.ts",
            "type": "template_literal",
            "content": "`\n伏線統合: ${foreshadowing.description}\n\n【詳細】\n${foreshadowing.context || '詳細なコンテキストは設定されていません'}\n\n【予想される解決方法】\n${foreshadowing.potential_resolution || '解決方法は未定義です'}\n\n【関連キャラクター】\n${foreshadowing.relatedCharacters?.join(', ') || 'なし'}\n\n【重要度】\n${foreshadowing.urgency}\n\n【導入チャプター】\n${foreshadowing.chapter_introduced}\n\n【解決予定チャプター】\n${foreshadowing.plannedResolution || '未定'}\n        `",
            "fullLength": 371,
            "variables": [
              {
                "type": "template_literal",
                "name": "${foreshadowing.description}"
              },
              {
                "type": "template_literal",
                "name": "${foreshadowing.context || '詳細なコンテキストは設定されていません'}"
              },
              {
                "type": "template_literal",
                "name": "${foreshadowing.potential_resolution || '解決方法は未定義です'}"
              },
              {
                "type": "template_literal",
                "name": "${foreshadowing.relatedCharacters?.join(', ') || 'なし'}"
              },
              {
                "type": "template_literal",
                "name": "${foreshadowing.urgency}"
              },
              {
                "type": "template_literal",
                "name": "${foreshadowing.chapter_introduced}"
              },
              {
                "type": "template_literal",
                "name": "${foreshadowing.plannedResolution || '未定'}"
              },
              {
                "type": "handlebars",
                "name": "{foreshadowing.description}"
              },
              {
                "type": "handlebars",
                "name": "{foreshadowing.context || '詳細なコンテキストは設定されていません'}"
              },
              {
                "type": "handlebars",
                "name": "{foreshadowing.potential_resolution || '解決方法は未定義です'}"
              },
              {
                "type": "handlebars",
                "name": "{foreshadowing.relatedCharacters?.join(', ') || 'なし'}"
              },
              {
                "type": "handlebars",
                "name": "{foreshadowing.urgency}"
              },
              {
                "type": "handlebars",
                "name": "{foreshadowing.chapter_introduced}"
              },
              {
                "type": "handlebars",
                "name": "{foreshadowing.plannedResolution || '未定'}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 2
      },
      {
        "file": "src\\lib\\foreshadowing\\auto-generator.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 1
          },
          {
            "format": "structuredOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\foreshadowing\\engine.ts",
        "line": 379,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "const response = await this.geminiClient.generateText(contextualPrompt, {",
        "method": "buildContextualPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 377,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 378,
            "content": "// Gemini APIによる生成",
            "isCurrent": false
          },
          {
            "line": 379,
            "content": "const response = await this.geminiClient.generateText(contextualPrompt, {",
            "isCurrent": true
          },
          {
            "line": 380,
            "content": "temperature: 0.7",
            "isCurrent": false
          },
          {
            "line": 381,
            "content": "});",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\foreshadowing\\engine.ts",
        "line": 1006,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "const response = await this.geminiClient.generateText(prompt, {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 1004,
            "content": "`;",
            "isCurrent": false
          },
          {
            "line": 1005,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 1006,
            "content": "const response = await this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 1007,
            "content": "temperature: 0.3",
            "isCurrent": false
          },
          {
            "line": 1008,
            "content": "});",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\foreshadowing\\engine.ts",
        "line": 379,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const response = await this.geminiClient.generateText(contextualPrompt, {",
        "method": "buildContextualPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 377,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 378,
            "content": "// Gemini APIによる生成",
            "isCurrent": false
          },
          {
            "line": 379,
            "content": "const response = await this.geminiClient.generateText(contextualPrompt, {",
            "isCurrent": true
          },
          {
            "line": 380,
            "content": "temperature: 0.7",
            "isCurrent": false
          },
          {
            "line": 381,
            "content": "});",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\foreshadowing\\engine.ts",
        "line": 1006,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const response = await this.geminiClient.generateText(prompt, {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 1004,
            "content": "`;",
            "isCurrent": false
          },
          {
            "line": 1005,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 1006,
            "content": "const response = await this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 1007,
            "content": "temperature: 0.3",
            "isCurrent": false
          },
          {
            "line": 1008,
            "content": "});",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\foreshadowing\\engine.ts",
        "line": 107,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "this.geminiClient = new GeminiClient();",
        "method": "unknown",
        "class": "ForeshadowingEngine",
        "surrounding": [
          {
            "line": 105,
            "content": "}",
            "isCurrent": false
          },
          {
            "line": 106,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 107,
            "content": "this.geminiClient = new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 108,
            "content": "this.validateConfiguration();",
            "isCurrent": false
          },
          {
            "line": 109,
            "content": "logger.info('ForeshadowingEngine initialized with unified memory system integration');",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\foreshadowing\\engine.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\foreshadowing\\engine.ts",
            "type": "template_literal",
            "content": "`\nあなたは小説のストーリー展開の専門家です。以下の情報を基に、将来的に回収できる自然な伏線を${count}個生成してください。\n\n【現在のチャプター情報】\n- チャプター番号: ${chapterNumber}\n- 内容: ${chapterContent.substring(0, 4000)}\n\n【既存のストーリーコンテキスト】\n${contextSummary}\n\n【伏線生成ガイドライン】\n- 既存の伏線と重複しないユニークな内容\n- 将来の展開で自然に回収できる要素\n- キャラクターや世界設定と一貫性のある内容\n- 読者の興味を引く適度な謎要素\n\n以下の形式で正確に${count}個の伏線を提案してください:\n\n1. 伏線の説明: [簡潔で具体的な説明]\n2. 導入方法: [このチャプターでどのように表現されているか]\n3. 解決予想: [将来どのように回収される可能性があるか]\n4. 重要度: [low/medium/high]\n5. 関連キャラクター: [関わるキャラクター名]\n6. 予想解決チャプター: [おおよそのチャプター番号]\n\n各伏線は独立した内容とし、番号付き...",
            "fullLength": 515,
            "variables": [
              {
                "type": "template_literal",
                "name": "${count}"
              },
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${chapterContent.substring(0, 4000)}"
              },
              {
                "type": "template_literal",
                "name": "${contextSummary}"
              },
              {
                "type": "template_literal",
                "name": "${count}"
              },
              {
                "type": "handlebars",
                "name": "{count}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{chapterContent.substring(0, 4000)}"
              },
              {
                "type": "handlebars",
                "name": "{contextSummary}"
              },
              {
                "type": "handlebars",
                "name": "{count}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\foreshadowing\\engine.ts",
            "type": "template_literal",
            "content": "`\n以下の未解決の伏線候補から、現在のチャプター内容に基づいて解決可能または解決すべき伏線を最大${maxCount}個選んでください。\n\n【未解決伏線候補】\n${candidateInfo}\n\n【現在のチャプター内容】\n${chapterContent.substring(0, 4000)}\n\n各候補について以下を評価してください：\n- このチャプターで解決する適切性\n- チャプター内容との関連性\n- 解決することによるストーリーへの効果\n\n以下の形式で回答してください：\n選択した伏線番号: [番号]\n解決理由: [このチャプターで解決すべき理由]\n解決方法: [どのように解決できるか]\n適切性スコア: [1-10の数値]\n\n複数選択する場合は、それぞれについて上記形式で記述してください。\n適切な候補がない場合は「適切な候補なし」と回答してください。\n`",
            "fullLength": 383,
            "variables": [
              {
                "type": "template_literal",
                "name": "${maxCount}"
              },
              {
                "type": "template_literal",
                "name": "${candidateInfo}"
              },
              {
                "type": "template_literal",
                "name": "${chapterContent.substring(0, 4000)}"
              },
              {
                "type": "handlebars",
                "name": "{maxCount}"
              },
              {
                "type": "handlebars",
                "name": "{candidateInfo}"
              },
              {
                "type": "handlebars",
                "name": "{chapterContent.substring(0, 4000)}"
              }
            ],
            "purpose": "unknown"
          }
        ],
        "count": 2
      },
      {
        "file": "src\\lib\\foreshadowing\\engine.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 1
          },
          {
            "format": "structuredOutput",
            "count": 3
          }
        ]
      },
      {
        "file": "src\\lib\\foreshadowing\\index.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 3
          }
        ]
      },
      {
        "file": "src\\lib\\foreshadowing\\manager.ts",
        "line": 435,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "const response = await this.geminiClient.generateText(prompt, {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 433,
            "content": "`;",
            "isCurrent": false
          },
          {
            "line": 434,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 435,
            "content": "const response = await this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 436,
            "content": "temperature: 0.1",
            "isCurrent": false
          },
          {
            "line": 437,
            "content": "});",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\foreshadowing\\manager.ts",
        "line": 435,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const response = await this.geminiClient.generateText(prompt, {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 433,
            "content": "`;",
            "isCurrent": false
          },
          {
            "line": 434,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 435,
            "content": "const response = await this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 436,
            "content": "temperature: 0.1",
            "isCurrent": false
          },
          {
            "line": 437,
            "content": "});",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\foreshadowing\\manager.ts",
        "line": 111,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "this.geminiClient = new GeminiClient();",
        "method": "validateSystemDependencies",
        "class": "ForeshadowingManager",
        "surrounding": [
          {
            "line": 109,
            "content": "this.validateSystemDependencies();",
            "isCurrent": false
          },
          {
            "line": 110,
            "content": "this.engine = createForeshadowingEngine(this.memoryManager);",
            "isCurrent": false
          },
          {
            "line": 111,
            "content": "this.geminiClient = new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 112,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 113,
            "content": "logger.info('ForeshadowingManager initialized with unified memory system integration');",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\foreshadowing\\manager.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\foreshadowing\\manager.ts",
            "type": "template_literal",
            "content": "`\n以下の伏線について、現在のチャプター内容での解決可能性を評価してください。\n\n【伏線情報】\n- 説明: ${foreshadowing.description}\n- 導入チャプター: ${foreshadowing.chapter_introduced}\n- 想定解決: ${foreshadowing.potential_resolution || 'なし'}\n- 計画解決チャプター: ${foreshadowing.plannedResolution || 'なし'}\n\n【現在のチャプター】\nチャプター番号: ${chapterNumber}\n内容: ${chapterContent.substring(0, 4000)}\n\n以下について評価してください：\n1. 解決可能性: 可能/不可能/ヒントのみ\n2. 信頼度: 0.0-1.0の数値\n3. 理由: 判断の根拠\n4. 関連部分: チャプター内の関連テキスト\n5. 解決方法: 具体的な解決アプローチ\n\nJSON形式で回答してください：\n{\n  \"isPossible\": boolean,\n  \"confidence\": numb...",
            "fullLength": 612,
            "variables": [
              {
                "type": "template_literal",
                "name": "${foreshadowing.description}"
              },
              {
                "type": "template_literal",
                "name": "${foreshadowing.chapter_introduced}"
              },
              {
                "type": "template_literal",
                "name": "${foreshadowing.potential_resolution || 'なし'}"
              },
              {
                "type": "template_literal",
                "name": "${foreshadowing.plannedResolution || 'なし'}"
              },
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${chapterContent.substring(0, 4000)}"
              },
              {
                "type": "handlebars",
                "name": "{foreshadowing.description}"
              },
              {
                "type": "handlebars",
                "name": "{foreshadowing.chapter_introduced}"
              },
              {
                "type": "handlebars",
                "name": "{foreshadowing.potential_resolution || 'なし'}"
              },
              {
                "type": "handlebars",
                "name": "{foreshadowing.plannedResolution || 'なし'}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{chapterContent.substring(0, 4000)}"
              },
              {
                "type": "handlebars",
                "name": "{\n  \"isPossible\": boolean,\n  \"confidence\": number,\n  \"reason\": \"string\",\n  \"relevantContent\": \"string\",\n  \"resolutionMethod\": \"string\",\n  \"isHint\": boolean\n}"
              }
            ],
            "purpose": "unknown"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\foreshadowing\\manager.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 2
          },
          {
            "format": "structuredOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\foreshadowing\\planned-foreshadowing-manager.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\foreshadowing\\resolution-advisor.ts",
        "line": 408,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "const aiResponse = await this.geminiClient.generateText(prompt, {",
        "method": "Prompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 406,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 407,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 408,
            "content": "const aiResponse = await this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 409,
            "content": "temperature: 0.1 // 分析タスクは低温で",
            "isCurrent": false
          },
          {
            "line": 410,
            "content": "});",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\foreshadowing\\resolution-advisor.ts",
        "line": 408,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const aiResponse = await this.geminiClient.generateText(prompt, {",
        "method": "uildAnalysisPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 406,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 407,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 408,
            "content": "const aiResponse = await this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 409,
            "content": "temperature: 0.1 // 分析タスクは低温で",
            "isCurrent": false
          },
          {
            "line": 410,
            "content": "});",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\foreshadowing\\resolution-advisor.ts",
        "line": 96,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "this.geminiClient = new GeminiClient();",
        "method": "constructor",
        "class": "ForeshadowingResolutionAdvisor",
        "surrounding": [
          {
            "line": 94,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 95,
            "content": "constructor(private memoryManager: MemoryManager) {",
            "isCurrent": false
          },
          {
            "line": 96,
            "content": "this.geminiClient = new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 97,
            "content": "this.validateConfiguration();",
            "isCurrent": false
          },
          {
            "line": 98,
            "content": "this.initializeInternalState();",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\foreshadowing\\resolution-advisor.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\foreshadowing\\resolution-advisor.ts",
            "type": "template_literal",
            "content": "`\n統合記憶階層システムによる伏線解決分析\n\n【システム品質指標】\n- データ完全性: ${(qualityMetrics.dataCompleteness * 100).toFixed(1)}%\n- 関連度スコア: ${(qualityMetrics.relevanceScore * 100).toFixed(1)}%\n- 信頼レベル: ${(qualityMetrics.confidenceLevel * 100).toFixed(1)}%\n\n【伏線情報】\n- 説明: ${foreshadowing.description}\n- 導入チャプター: ${foreshadowing.chapter_introduced}\n- 詳細: ${foreshadowing.context || 'なし'}\n- 想定される解決: ${foreshadowing.potential_resolution || 'なし'}\n- 計画解決チャプター: ${foreshadowing.plannedResolution || 'なし'}\n\n【現在のチャプター】\nチャプター番号: ${chapterNum...",
            "fullLength": 769,
            "variables": [
              {
                "type": "template_literal",
                "name": "${(qualityMetrics.dataCompleteness * 100).toFixed(1)}"
              },
              {
                "type": "template_literal",
                "name": "${(qualityMetrics.relevanceScore * 100).toFixed(1)}"
              },
              {
                "type": "template_literal",
                "name": "${(qualityMetrics.confidenceLevel * 100).toFixed(1)}"
              },
              {
                "type": "template_literal",
                "name": "${foreshadowing.description}"
              },
              {
                "type": "template_literal",
                "name": "${foreshadowing.chapter_introduced}"
              },
              {
                "type": "template_literal",
                "name": "${foreshadowing.context || 'なし'}"
              },
              {
                "type": "template_literal",
                "name": "${foreshadowing.potential_resolution || 'なし'}"
              },
              {
                "type": "template_literal",
                "name": "${foreshadowing.plannedResolution || 'なし'}"
              },
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${chapterContent}"
              },
              {
                "type": "handlebars",
                "name": "{(qualityMetrics.dataCompleteness * 100).toFixed(1)}"
              },
              {
                "type": "handlebars",
                "name": "{(qualityMetrics.relevanceScore * 100).toFixed(1)}"
              },
              {
                "type": "handlebars",
                "name": "{(qualityMetrics.confidenceLevel * 100).toFixed(1)}"
              },
              {
                "type": "handlebars",
                "name": "{foreshadowing.description}"
              },
              {
                "type": "handlebars",
                "name": "{foreshadowing.chapter_introduced}"
              },
              {
                "type": "handlebars",
                "name": "{foreshadowing.context || 'なし'}"
              },
              {
                "type": "handlebars",
                "name": "{foreshadowing.potential_resolution || 'なし'}"
              },
              {
                "type": "handlebars",
                "name": "{foreshadowing.plannedResolution || 'なし'}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{chapterContent}"
              }
            ],
            "purpose": "content_analysis"
          },
          {
            "file": "src\\lib\\foreshadowing\\resolution-advisor.ts",
            "type": "template_literal",
            "content": "`Foreshadowing resolution suggestion failed for chapter ${context.chapterNumber}: ${errorDetails.message}`",
            "fullLength": 106,
            "variables": [
              {
                "type": "template_literal",
                "name": "${context.chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${errorDetails.message}"
              },
              {
                "type": "handlebars",
                "name": "{context.chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{errorDetails.message}"
              }
            ],
            "purpose": "unknown"
          }
        ],
        "count": 2
      },
      {
        "file": "src\\lib\\foreshadowing\\resolution-advisor.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\context-generator copy.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\context-generator.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine\\chapter-generator copy.ts",
        "line": 478,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(enhancedPrompt, {",
        "method": "info",
        "class": "unknown",
        "surrounding": [
          {
            "line": 476,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 477,
            "content": "const generatedText = await withTimeout(",
            "isCurrent": false
          },
          {
            "line": 478,
            "content": "this.geminiClient.generateText(enhancedPrompt, {",
            "isCurrent": true
          },
          {
            "line": 479,
            "content": "targetLength: enhancementOptions?.targetLength || params.generation.targetLength,",
            "isCurrent": false
          },
          {
            "line": 480,
            "content": "temperature: params.generation.temperature,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine\\chapter-generator copy.ts",
        "line": 478,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(enhancedPrompt, {",
        "method": "info",
        "class": "unknown",
        "surrounding": [
          {
            "line": 476,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 477,
            "content": "const generatedText = await withTimeout(",
            "isCurrent": false
          },
          {
            "line": 478,
            "content": "this.geminiClient.generateText(enhancedPrompt, {",
            "isCurrent": true
          },
          {
            "line": 479,
            "content": "targetLength: enhancementOptions?.targetLength || params.generation.targetLength,",
            "isCurrent": false
          },
          {
            "line": 480,
            "content": "temperature: params.generation.temperature,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine\\chapter-generator copy.ts",
        "line": 1048,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const apiKeyValid = await this.geminiClient.validateApiKey();",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 1046,
            "content": "}",
            "isCurrent": false
          },
          {
            "line": 1047,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 1048,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "isCurrent": true
          },
          {
            "line": 1049,
            "content": "if (!apiKeyValid) {",
            "isCurrent": false
          },
          {
            "line": 1050,
            "content": "return {",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine\\chapter-generator copy.ts",
        "line": 4,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "import { PromptGenerator } from '../prompt-generator';",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 2,
            "content": "import { GeminiClient } from '../gemini-client';",
            "isCurrent": false
          },
          {
            "line": 3,
            "content": "import { ContextGenerator } from '../context-generator';",
            "isCurrent": false
          },
          {
            "line": 4,
            "content": "import { PromptGenerator } from '../prompt-generator';",
            "isCurrent": true
          },
          {
            "line": 5,
            "content": "import { TextParser } from './text-parser';",
            "isCurrent": false
          },
          {
            "line": 6,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine\\chapter-generator copy.ts",
        "line": 118,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "private promptGenerator: PromptGenerator;",
        "method": "unknown",
        "class": "ChapterGenerator",
        "surrounding": [
          {
            "line": 116,
            "content": "private geminiClient: GeminiClient;",
            "isCurrent": false
          },
          {
            "line": 117,
            "content": "private contextGenerator: ContextGenerator;",
            "isCurrent": false
          },
          {
            "line": 118,
            "content": "private promptGenerator: PromptGenerator;",
            "isCurrent": true
          },
          {
            "line": 119,
            "content": "private textParser: TextParser;",
            "isCurrent": false
          },
          {
            "line": 120,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine\\chapter-generator copy.ts",
        "line": 139,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "promptGenerator: PromptGenerator,",
        "method": "unknown",
        "class": "ChapterGenerator",
        "surrounding": [
          {
            "line": 137,
            "content": "constructor(",
            "isCurrent": false
          },
          {
            "line": 138,
            "content": "geminiClient: GeminiClient,",
            "isCurrent": false
          },
          {
            "line": 139,
            "content": "promptGenerator: PromptGenerator,",
            "isCurrent": true
          },
          {
            "line": 140,
            "content": "memoryManager: MemoryManager,",
            "isCurrent": false
          },
          {
            "line": 141,
            "content": "contentAnalysisManager?: ContentAnalysisManager",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine\\chapter-generator copy.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\generation\\engine\\chapter-generator copy.ts",
            "type": "template_literal",
            "content": "`Chapter ${chapterNumber} generation failed: ${error instanceof Error ? error.message : String(error)}`",
            "fullLength": 103,
            "variables": [
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${error instanceof Error ? error.message : String(error)}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{error instanceof Error ? error.message : String(error)}"
              }
            ],
            "purpose": "unknown"
          },
          {
            "file": "src\\lib\\generation\\engine\\chapter-generator copy.ts",
            "type": "template_literal",
            "content": "`${primaryPrompt}\n\n## 「魂のこもった学びの物語」要素の追加\n以下の要素を物語に組み込み、ビジネス概念の学びと感情的な旅を融合させてください。\n\n${importantSections}\n\n物語を通して、読者が概念を体験的に学べるよう工夫してください。説明ではなく、体験を通じた学びを提供する物語を目指してください。`",
            "fullLength": 169,
            "variables": [
              {
                "type": "template_literal",
                "name": "${primaryPrompt}"
              },
              {
                "type": "template_literal",
                "name": "${importantSections}"
              },
              {
                "type": "handlebars",
                "name": "{primaryPrompt}"
              },
              {
                "type": "handlebars",
                "name": "{importantSections}"
              }
            ],
            "purpose": "story_generation"
          }
        ],
        "count": 2
      },
      {
        "file": "src\\lib\\generation\\engine\\chapter-generator copy.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "yamlOutput",
            "count": 3
          },
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine\\chapter-generator.ts",
        "line": 357,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(enhancedPrompt, {",
        "method": "info",
        "class": "unknown",
        "surrounding": [
          {
            "line": 355,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 356,
            "content": "const generatedText = await withTimeout(",
            "isCurrent": false
          },
          {
            "line": 357,
            "content": "this.geminiClient.generateText(enhancedPrompt, {",
            "isCurrent": true
          },
          {
            "line": 358,
            "content": "targetLength: enhancementOptions?.targetLength || params.generation.targetLength,",
            "isCurrent": false
          },
          {
            "line": 359,
            "content": "temperature: params.generation.temperature,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine\\chapter-generator.ts",
        "line": 357,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(enhancedPrompt, {",
        "method": "info",
        "class": "unknown",
        "surrounding": [
          {
            "line": 355,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 356,
            "content": "const generatedText = await withTimeout(",
            "isCurrent": false
          },
          {
            "line": 357,
            "content": "this.geminiClient.generateText(enhancedPrompt, {",
            "isCurrent": true
          },
          {
            "line": 358,
            "content": "targetLength: enhancementOptions?.targetLength || params.generation.targetLength,",
            "isCurrent": false
          },
          {
            "line": 359,
            "content": "temperature: params.generation.temperature,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine\\chapter-generator.ts",
        "line": 914,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const apiKeyValid = await this.geminiClient.validateApiKey();",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 912,
            "content": "}",
            "isCurrent": false
          },
          {
            "line": 913,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 914,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "isCurrent": true
          },
          {
            "line": 915,
            "content": "if (!apiKeyValid) {",
            "isCurrent": false
          },
          {
            "line": 916,
            "content": "return {",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine\\chapter-generator.ts",
        "line": 4,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "import { PromptGenerator } from '../prompt-generator';",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 2,
            "content": "import { GeminiClient } from '../gemini-client';",
            "isCurrent": false
          },
          {
            "line": 3,
            "content": "import { ContextGenerator } from '../context-generator';",
            "isCurrent": false
          },
          {
            "line": 4,
            "content": "import { PromptGenerator } from '../prompt-generator';",
            "isCurrent": true
          },
          {
            "line": 5,
            "content": "import { TextParser } from './text-parser';",
            "isCurrent": false
          },
          {
            "line": 6,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine\\chapter-generator.ts",
        "line": 108,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "private promptGenerator: PromptGenerator;",
        "method": "unknown",
        "class": "ChapterGenerator",
        "surrounding": [
          {
            "line": 106,
            "content": "private geminiClient: GeminiClient;",
            "isCurrent": false
          },
          {
            "line": 107,
            "content": "private contextGenerator: ContextGenerator;",
            "isCurrent": false
          },
          {
            "line": 108,
            "content": "private promptGenerator: PromptGenerator;",
            "isCurrent": true
          },
          {
            "line": 109,
            "content": "private textParser: TextParser;",
            "isCurrent": false
          },
          {
            "line": 110,
            "content": "private memoryManager: MemoryManager;",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine\\chapter-generator.ts",
        "line": 119,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "promptGenerator: PromptGenerator,",
        "method": "unknown",
        "class": "ChapterGenerator",
        "surrounding": [
          {
            "line": 117,
            "content": "constructor(",
            "isCurrent": false
          },
          {
            "line": 118,
            "content": "geminiClient: GeminiClient,",
            "isCurrent": false
          },
          {
            "line": 119,
            "content": "promptGenerator: PromptGenerator,",
            "isCurrent": true
          },
          {
            "line": 120,
            "content": "memoryManager: MemoryManager,",
            "isCurrent": false
          },
          {
            "line": 121,
            "content": "contentAnalysisManager?: ContentAnalysisManager",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine\\chapter-generator.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\generation\\engine\\chapter-generator.ts",
            "type": "template_literal",
            "content": "`Chapter ${chapterNumber} generation failed: ${error instanceof Error ? error.message : String(error)}`",
            "fullLength": 103,
            "variables": [
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${error instanceof Error ? error.message : String(error)}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{error instanceof Error ? error.message : String(error)}"
              }
            ],
            "purpose": "unknown"
          },
          {
            "file": "src\\lib\\generation\\engine\\chapter-generator.ts",
            "type": "template_literal",
            "content": "`${primaryPrompt}\n\n## 「魂のこもった学びの物語」要素の追加\n以下の要素を物語に組み込み、ビジネス概念の学びと感情的な旅を融合させてください。\n\n${importantSections}\n\n物語を通して、読者が概念を体験的に学べるよう工夫してください。説明ではなく、体験を通じた学びを提供する物語を目指してください。`",
            "fullLength": 169,
            "variables": [
              {
                "type": "template_literal",
                "name": "${primaryPrompt}"
              },
              {
                "type": "template_literal",
                "name": "${importantSections}"
              },
              {
                "type": "handlebars",
                "name": "{primaryPrompt}"
              },
              {
                "type": "handlebars",
                "name": "{importantSections}"
              }
            ],
            "purpose": "story_generation"
          }
        ],
        "count": 2
      },
      {
        "file": "src\\lib\\generation\\engine\\chapter-generator.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "yamlOutput",
            "count": 3
          },
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine\\text-parser.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 1
          },
          {
            "format": "yamlOutput",
            "count": 10
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 2.ts",
        "line": 137,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.setModelMap(params.generation.models);",
        "method": "onParameterChanged",
        "class": "unknown",
        "surrounding": [
          {
            "line": 135,
            "content": "const params = parameterManager.getParameters();",
            "isCurrent": false
          },
          {
            "line": 136,
            "content": "if (params.generation.models) {",
            "isCurrent": false
          },
          {
            "line": 137,
            "content": "this.geminiClient.setModelMap(params.generation.models);",
            "isCurrent": true
          },
          {
            "line": 138,
            "content": "logger.info('Model map initialized from parameters', { models: params.generation.models });",
            "isCurrent": false
          },
          {
            "line": 139,
            "content": "}",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 2.ts",
        "line": 163,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.setModelMap(params.generation.models);",
        "method": "if",
        "class": "unknown",
        "surrounding": [
          {
            "line": 161,
            "content": "const params = parameterManager.getParameters();",
            "isCurrent": false
          },
          {
            "line": 162,
            "content": "if (params.generation.models) {",
            "isCurrent": false
          },
          {
            "line": 163,
            "content": "this.geminiClient.setModelMap(params.generation.models);",
            "isCurrent": true
          },
          {
            "line": 164,
            "content": "logger.info('Updated model map in GeminiClient', { models: params.generation.models });",
            "isCurrent": false
          },
          {
            "line": 165,
            "content": "}",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 2.ts",
        "line": 258,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const apiKeyValid = await this.geminiClient.validateApiKey();",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 256,
            "content": "plotManagerStatus?: any;  // 追加",
            "isCurrent": false
          },
          {
            "line": 257,
            "content": "}> {",
            "isCurrent": false
          },
          {
            "line": 258,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "isCurrent": true
          },
          {
            "line": 259,
            "content": "const modelInfo = this.geminiClient.getModelInfo();",
            "isCurrent": false
          },
          {
            "line": 260,
            "content": "const parameters = parameterManager.getParameters();",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 2.ts",
        "line": 259,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const modelInfo = this.geminiClient.getModelInfo();",
        "method": "validateApiKey",
        "class": "unknown",
        "surrounding": [
          {
            "line": 257,
            "content": "}> {",
            "isCurrent": false
          },
          {
            "line": 258,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "isCurrent": false
          },
          {
            "line": 259,
            "content": "const modelInfo = this.geminiClient.getModelInfo();",
            "isCurrent": true
          },
          {
            "line": 260,
            "content": "const parameters = parameterManager.getParameters();",
            "isCurrent": false
          },
          {
            "line": 261,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 2.ts",
        "line": 338,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const apiKeyValid = await this.geminiClient.validateApiKey();",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 336,
            "content": "parameters: SystemParameters;",
            "isCurrent": false
          },
          {
            "line": 337,
            "content": "}> {",
            "isCurrent": false
          },
          {
            "line": 338,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "isCurrent": true
          },
          {
            "line": 339,
            "content": "const modelInfo = this.geminiClient.getModelInfo();",
            "isCurrent": false
          },
          {
            "line": 340,
            "content": "const parameters = parameterManager.getParameters();",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 2.ts",
        "line": 339,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const modelInfo = this.geminiClient.getModelInfo();",
        "method": "validateApiKey",
        "class": "unknown",
        "surrounding": [
          {
            "line": 337,
            "content": "}> {",
            "isCurrent": false
          },
          {
            "line": 338,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "isCurrent": false
          },
          {
            "line": 339,
            "content": "const modelInfo = this.geminiClient.getModelInfo();",
            "isCurrent": true
          },
          {
            "line": 340,
            "content": "const parameters = parameterManager.getParameters();",
            "isCurrent": false
          },
          {
            "line": 341,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 2.ts",
        "line": 39,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "this.geminiClient = new GeminiClient();",
        "method": "constructor",
        "class": "NovelGenerationEngine",
        "surrounding": [
          {
            "line": 37,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 38,
            "content": "constructor() {",
            "isCurrent": false
          },
          {
            "line": 39,
            "content": "this.geminiClient = new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 40,
            "content": "this.promptGenerator = new PromptGenerator();",
            "isCurrent": false
          },
          {
            "line": 41,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 2.ts",
        "line": 10,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "import { PromptGenerator } from './prompt-generator'",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 8,
            "content": "import { GenerationError } from '@/lib/utils/error-handler';",
            "isCurrent": false
          },
          {
            "line": 9,
            "content": "import { ChapterGenerator } from './engine/chapter-generator';",
            "isCurrent": false
          },
          {
            "line": 10,
            "content": "import { PromptGenerator } from './prompt-generator'",
            "isCurrent": true
          },
          {
            "line": 11,
            "content": "import { MemoryManager, MemoryManagerConfig } from '@/lib/memory/core/memory-manager'; // 追加",
            "isCurrent": false
          },
          {
            "line": 12,
            "content": "import { setGlobalMemoryManager, initializePlotManager, getPlotManagerStatus } from '@/lib/plot';",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 2.ts",
        "line": 26,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "private promptGenerator: PromptGenerator;",
        "method": "unknown",
        "class": "NovelGenerationEngine",
        "surrounding": [
          {
            "line": 24,
            "content": "private chapterGenerator: ChapterGenerator;",
            "isCurrent": false
          },
          {
            "line": 25,
            "content": "private geminiClient: GeminiClient;",
            "isCurrent": false
          },
          {
            "line": 26,
            "content": "private promptGenerator: PromptGenerator;",
            "isCurrent": true
          },
          {
            "line": 27,
            "content": "private memoryManager: MemoryManager; // 追加",
            "isCurrent": false
          },
          {
            "line": 28,
            "content": "// 初期化状態を追跡するためのフラグ",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 2.ts",
        "line": 40,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "this.promptGenerator = new PromptGenerator();",
        "method": "constructor",
        "class": "NovelGenerationEngine",
        "surrounding": [
          {
            "line": 38,
            "content": "constructor() {",
            "isCurrent": false
          },
          {
            "line": 39,
            "content": "this.geminiClient = new GeminiClient();",
            "isCurrent": false
          },
          {
            "line": 40,
            "content": "this.promptGenerator = new PromptGenerator();",
            "isCurrent": true
          },
          {
            "line": 41,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 42,
            "content": "// MemoryManagerの完全なデフォルト設定",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 2.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\generation\\engine copy 2.ts",
            "type": "template_literal",
            "content": "`Chapter ${chapterNumber} generation failed: ${error instanceof Error ? error.message : String(error)}`",
            "fullLength": 103,
            "variables": [
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${error instanceof Error ? error.message : String(error)}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{error instanceof Error ? error.message : String(error)}"
              }
            ],
            "purpose": "unknown"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\generation\\engine copy 3.ts",
        "line": 137,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.setModelMap(params.generation.models);",
        "method": "onParameterChanged",
        "class": "unknown",
        "surrounding": [
          {
            "line": 135,
            "content": "const params = parameterManager.getParameters();",
            "isCurrent": false
          },
          {
            "line": 136,
            "content": "if (params.generation.models) {",
            "isCurrent": false
          },
          {
            "line": 137,
            "content": "this.geminiClient.setModelMap(params.generation.models);",
            "isCurrent": true
          },
          {
            "line": 138,
            "content": "logger.info('Model map initialized from parameters', { models: params.generation.models });",
            "isCurrent": false
          },
          {
            "line": 139,
            "content": "}",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 3.ts",
        "line": 163,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.setModelMap(params.generation.models);",
        "method": "if",
        "class": "unknown",
        "surrounding": [
          {
            "line": 161,
            "content": "const params = parameterManager.getParameters();",
            "isCurrent": false
          },
          {
            "line": 162,
            "content": "if (params.generation.models) {",
            "isCurrent": false
          },
          {
            "line": 163,
            "content": "this.geminiClient.setModelMap(params.generation.models);",
            "isCurrent": true
          },
          {
            "line": 164,
            "content": "logger.info('Updated model map in GeminiClient', { models: params.generation.models });",
            "isCurrent": false
          },
          {
            "line": 165,
            "content": "}",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 3.ts",
        "line": 258,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const apiKeyValid = await this.geminiClient.validateApiKey();",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 256,
            "content": "plotManagerStatus?: any;  // 追加",
            "isCurrent": false
          },
          {
            "line": 257,
            "content": "}> {",
            "isCurrent": false
          },
          {
            "line": 258,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "isCurrent": true
          },
          {
            "line": 259,
            "content": "const modelInfo = this.geminiClient.getModelInfo();",
            "isCurrent": false
          },
          {
            "line": 260,
            "content": "const parameters = parameterManager.getParameters();",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 3.ts",
        "line": 259,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const modelInfo = this.geminiClient.getModelInfo();",
        "method": "validateApiKey",
        "class": "unknown",
        "surrounding": [
          {
            "line": 257,
            "content": "}> {",
            "isCurrent": false
          },
          {
            "line": 258,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "isCurrent": false
          },
          {
            "line": 259,
            "content": "const modelInfo = this.geminiClient.getModelInfo();",
            "isCurrent": true
          },
          {
            "line": 260,
            "content": "const parameters = parameterManager.getParameters();",
            "isCurrent": false
          },
          {
            "line": 261,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 3.ts",
        "line": 338,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const apiKeyValid = await this.geminiClient.validateApiKey();",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 336,
            "content": "parameters: SystemParameters;",
            "isCurrent": false
          },
          {
            "line": 337,
            "content": "}> {",
            "isCurrent": false
          },
          {
            "line": 338,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "isCurrent": true
          },
          {
            "line": 339,
            "content": "const modelInfo = this.geminiClient.getModelInfo();",
            "isCurrent": false
          },
          {
            "line": 340,
            "content": "const parameters = parameterManager.getParameters();",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 3.ts",
        "line": 339,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const modelInfo = this.geminiClient.getModelInfo();",
        "method": "validateApiKey",
        "class": "unknown",
        "surrounding": [
          {
            "line": 337,
            "content": "}> {",
            "isCurrent": false
          },
          {
            "line": 338,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "isCurrent": false
          },
          {
            "line": 339,
            "content": "const modelInfo = this.geminiClient.getModelInfo();",
            "isCurrent": true
          },
          {
            "line": 340,
            "content": "const parameters = parameterManager.getParameters();",
            "isCurrent": false
          },
          {
            "line": 341,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 3.ts",
        "line": 39,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "this.geminiClient = new GeminiClient();",
        "method": "constructor",
        "class": "NovelGenerationEngine",
        "surrounding": [
          {
            "line": 37,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 38,
            "content": "constructor() {",
            "isCurrent": false
          },
          {
            "line": 39,
            "content": "this.geminiClient = new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 40,
            "content": "this.promptGenerator = new PromptGenerator();",
            "isCurrent": false
          },
          {
            "line": 41,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 3.ts",
        "line": 10,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "import { PromptGenerator } from './prompt-generator'",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 8,
            "content": "import { GenerationError } from '@/lib/utils/error-handler';",
            "isCurrent": false
          },
          {
            "line": 9,
            "content": "import { ChapterGenerator } from './engine/chapter-generator';",
            "isCurrent": false
          },
          {
            "line": 10,
            "content": "import { PromptGenerator } from './prompt-generator'",
            "isCurrent": true
          },
          {
            "line": 11,
            "content": "import { MemoryManager, MemoryManagerConfig } from '@/lib/memory/core/memory-manager'; // 追加",
            "isCurrent": false
          },
          {
            "line": 12,
            "content": "import { setGlobalMemoryManager, initializePlotManager, getPlotManagerStatus } from '@/lib/plot';",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 3.ts",
        "line": 26,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "private promptGenerator: PromptGenerator;",
        "method": "unknown",
        "class": "NovelGenerationEngine",
        "surrounding": [
          {
            "line": 24,
            "content": "private chapterGenerator: ChapterGenerator;",
            "isCurrent": false
          },
          {
            "line": 25,
            "content": "private geminiClient: GeminiClient;",
            "isCurrent": false
          },
          {
            "line": 26,
            "content": "private promptGenerator: PromptGenerator;",
            "isCurrent": true
          },
          {
            "line": 27,
            "content": "private memoryManager: MemoryManager; // 追加",
            "isCurrent": false
          },
          {
            "line": 28,
            "content": "// 初期化状態を追跡するためのフラグ",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 3.ts",
        "line": 40,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "this.promptGenerator = new PromptGenerator();",
        "method": "constructor",
        "class": "NovelGenerationEngine",
        "surrounding": [
          {
            "line": 38,
            "content": "constructor() {",
            "isCurrent": false
          },
          {
            "line": 39,
            "content": "this.geminiClient = new GeminiClient();",
            "isCurrent": false
          },
          {
            "line": 40,
            "content": "this.promptGenerator = new PromptGenerator();",
            "isCurrent": true
          },
          {
            "line": 41,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 42,
            "content": "// MemoryManagerの完全なデフォルト設定",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 3.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\generation\\engine copy 3.ts",
            "type": "template_literal",
            "content": "`Chapter ${chapterNumber} generation failed: ${error instanceof Error ? error.message : String(error)}`",
            "fullLength": 103,
            "variables": [
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${error instanceof Error ? error.message : String(error)}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{error instanceof Error ? error.message : String(error)}"
              }
            ],
            "purpose": "unknown"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\generation\\engine copy 4.ts",
        "line": 71,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.setModelMap(params.generation.models);",
        "method": "onParameterChanged",
        "class": "unknown",
        "surrounding": [
          {
            "line": 69,
            "content": "const params = parameterManager.getParameters();",
            "isCurrent": false
          },
          {
            "line": 70,
            "content": "if (params.generation.models) {",
            "isCurrent": false
          },
          {
            "line": 71,
            "content": "this.geminiClient.setModelMap(params.generation.models);",
            "isCurrent": true
          },
          {
            "line": 72,
            "content": "logger.info('Model map initialized from parameters');",
            "isCurrent": false
          },
          {
            "line": 73,
            "content": "}",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 4.ts",
        "line": 91,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.setModelMap(params.generation.models);",
        "method": "if",
        "class": "unknown",
        "surrounding": [
          {
            "line": 89,
            "content": "const params = parameterManager.getParameters();",
            "isCurrent": false
          },
          {
            "line": 90,
            "content": "if (params.generation.models) {",
            "isCurrent": false
          },
          {
            "line": 91,
            "content": "this.geminiClient.setModelMap(params.generation.models);",
            "isCurrent": true
          },
          {
            "line": 92,
            "content": "logger.info('Updated model map in GeminiClient');",
            "isCurrent": false
          },
          {
            "line": 93,
            "content": "}",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 4.ts",
        "line": 106,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const apiKeyValid = await this.geminiClient.validateApiKey();",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 104,
            "content": "parameters: SystemParameters;",
            "isCurrent": false
          },
          {
            "line": 105,
            "content": "}> {",
            "isCurrent": false
          },
          {
            "line": 106,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "isCurrent": true
          },
          {
            "line": 107,
            "content": "const modelInfo = this.geminiClient.getModelInfo();",
            "isCurrent": false
          },
          {
            "line": 108,
            "content": "const parameters = parameterManager.getParameters();",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 4.ts",
        "line": 107,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const modelInfo = this.geminiClient.getModelInfo();",
        "method": "validateApiKey",
        "class": "unknown",
        "surrounding": [
          {
            "line": 105,
            "content": "}> {",
            "isCurrent": false
          },
          {
            "line": 106,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "isCurrent": false
          },
          {
            "line": 107,
            "content": "const modelInfo = this.geminiClient.getModelInfo();",
            "isCurrent": true
          },
          {
            "line": 108,
            "content": "const parameters = parameterManager.getParameters();",
            "isCurrent": false
          },
          {
            "line": 109,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 4.ts",
        "line": 126,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const apiKeyValid = await this.geminiClient.validateApiKey();",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 124,
            "content": "plotManagerStatus?: any;",
            "isCurrent": false
          },
          {
            "line": 125,
            "content": "}> {",
            "isCurrent": false
          },
          {
            "line": 126,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "isCurrent": true
          },
          {
            "line": 127,
            "content": "const modelInfo = this.geminiClient.getModelInfo();",
            "isCurrent": false
          },
          {
            "line": 128,
            "content": "const parameters = parameterManager.getParameters();",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 4.ts",
        "line": 127,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const modelInfo = this.geminiClient.getModelInfo();",
        "method": "validateApiKey",
        "class": "unknown",
        "surrounding": [
          {
            "line": 125,
            "content": "}> {",
            "isCurrent": false
          },
          {
            "line": 126,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "isCurrent": false
          },
          {
            "line": 127,
            "content": "const modelInfo = this.geminiClient.getModelInfo();",
            "isCurrent": true
          },
          {
            "line": 128,
            "content": "const parameters = parameterManager.getParameters();",
            "isCurrent": false
          },
          {
            "line": 129,
            "content": "const plotManagerStatus = getPlotManagerStatus();",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 4.ts",
        "line": 10,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "import { PromptGenerator } from './prompt-generator';",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 8,
            "content": "import { GenerationError } from '@/lib/utils/error-handler';",
            "isCurrent": false
          },
          {
            "line": 9,
            "content": "import { ChapterGenerator } from './engine/chapter-generator';",
            "isCurrent": false
          },
          {
            "line": 10,
            "content": "import { PromptGenerator } from './prompt-generator';",
            "isCurrent": true
          },
          {
            "line": 11,
            "content": "import { MemoryManager } from '@/lib/memory/core/memory-manager';",
            "isCurrent": false
          },
          {
            "line": 12,
            "content": "import { setGlobalMemoryManager, initializePlotManager, getPlotManagerStatus } from '@/lib/plot';",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 4.ts",
        "line": 21,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "private promptGenerator: PromptGenerator;",
        "method": "unknown",
        "class": "NovelGenerationEngine",
        "surrounding": [
          {
            "line": 19,
            "content": "private chapterGenerator: ChapterGenerator;",
            "isCurrent": false
          },
          {
            "line": 20,
            "content": "private geminiClient: GeminiClient;",
            "isCurrent": false
          },
          {
            "line": 21,
            "content": "private promptGenerator: PromptGenerator;",
            "isCurrent": true
          },
          {
            "line": 22,
            "content": "private memoryManager: MemoryManager;",
            "isCurrent": false
          },
          {
            "line": 23,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 4.ts",
        "line": 30,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "promptGenerator: PromptGenerator,",
        "method": "unknown",
        "class": "NovelGenerationEngine",
        "surrounding": [
          {
            "line": 28,
            "content": "memoryManager: MemoryManager,",
            "isCurrent": false
          },
          {
            "line": 29,
            "content": "chapterGenerator: ChapterGenerator,",
            "isCurrent": false
          },
          {
            "line": 30,
            "content": "promptGenerator: PromptGenerator,",
            "isCurrent": true
          },
          {
            "line": 31,
            "content": "geminiClient: GeminiClient",
            "isCurrent": false
          },
          {
            "line": 32,
            "content": ") {",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy 4.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\generation\\engine copy 4.ts",
            "type": "template_literal",
            "content": "`Chapter ${chapterNumber} generation failed: ${error instanceof Error ? error.message : String(error)}`",
            "fullLength": 103,
            "variables": [
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${error instanceof Error ? error.message : String(error)}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{error instanceof Error ? error.message : String(error)}"
              }
            ],
            "purpose": "unknown"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\generation\\engine copy.ts",
        "line": 137,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.setModelMap(params.generation.models);",
        "method": "onParameterChanged",
        "class": "unknown",
        "surrounding": [
          {
            "line": 135,
            "content": "const params = parameterManager.getParameters();",
            "isCurrent": false
          },
          {
            "line": 136,
            "content": "if (params.generation.models) {",
            "isCurrent": false
          },
          {
            "line": 137,
            "content": "this.geminiClient.setModelMap(params.generation.models);",
            "isCurrent": true
          },
          {
            "line": 138,
            "content": "logger.info('Model map initialized from parameters', { models: params.generation.models });",
            "isCurrent": false
          },
          {
            "line": 139,
            "content": "}",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy.ts",
        "line": 163,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.setModelMap(params.generation.models);",
        "method": "if",
        "class": "unknown",
        "surrounding": [
          {
            "line": 161,
            "content": "const params = parameterManager.getParameters();",
            "isCurrent": false
          },
          {
            "line": 162,
            "content": "if (params.generation.models) {",
            "isCurrent": false
          },
          {
            "line": 163,
            "content": "this.geminiClient.setModelMap(params.generation.models);",
            "isCurrent": true
          },
          {
            "line": 164,
            "content": "logger.info('Updated model map in GeminiClient', { models: params.generation.models });",
            "isCurrent": false
          },
          {
            "line": 165,
            "content": "}",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy.ts",
        "line": 258,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const apiKeyValid = await this.geminiClient.validateApiKey();",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 256,
            "content": "plotManagerStatus?: any;  // 追加",
            "isCurrent": false
          },
          {
            "line": 257,
            "content": "}> {",
            "isCurrent": false
          },
          {
            "line": 258,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "isCurrent": true
          },
          {
            "line": 259,
            "content": "const modelInfo = this.geminiClient.getModelInfo();",
            "isCurrent": false
          },
          {
            "line": 260,
            "content": "const parameters = parameterManager.getParameters();",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy.ts",
        "line": 259,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const modelInfo = this.geminiClient.getModelInfo();",
        "method": "validateApiKey",
        "class": "unknown",
        "surrounding": [
          {
            "line": 257,
            "content": "}> {",
            "isCurrent": false
          },
          {
            "line": 258,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "isCurrent": false
          },
          {
            "line": 259,
            "content": "const modelInfo = this.geminiClient.getModelInfo();",
            "isCurrent": true
          },
          {
            "line": 260,
            "content": "const parameters = parameterManager.getParameters();",
            "isCurrent": false
          },
          {
            "line": 261,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy.ts",
        "line": 338,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const apiKeyValid = await this.geminiClient.validateApiKey();",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 336,
            "content": "parameters: SystemParameters;",
            "isCurrent": false
          },
          {
            "line": 337,
            "content": "}> {",
            "isCurrent": false
          },
          {
            "line": 338,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "isCurrent": true
          },
          {
            "line": 339,
            "content": "const modelInfo = this.geminiClient.getModelInfo();",
            "isCurrent": false
          },
          {
            "line": 340,
            "content": "const parameters = parameterManager.getParameters();",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy.ts",
        "line": 339,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const modelInfo = this.geminiClient.getModelInfo();",
        "method": "validateApiKey",
        "class": "unknown",
        "surrounding": [
          {
            "line": 337,
            "content": "}> {",
            "isCurrent": false
          },
          {
            "line": 338,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "isCurrent": false
          },
          {
            "line": 339,
            "content": "const modelInfo = this.geminiClient.getModelInfo();",
            "isCurrent": true
          },
          {
            "line": 340,
            "content": "const parameters = parameterManager.getParameters();",
            "isCurrent": false
          },
          {
            "line": 341,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy.ts",
        "line": 39,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "this.geminiClient = new GeminiClient();",
        "method": "constructor",
        "class": "NovelGenerationEngine",
        "surrounding": [
          {
            "line": 37,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 38,
            "content": "constructor() {",
            "isCurrent": false
          },
          {
            "line": 39,
            "content": "this.geminiClient = new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 40,
            "content": "this.promptGenerator = new PromptGenerator();",
            "isCurrent": false
          },
          {
            "line": 41,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy.ts",
        "line": 10,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "import { PromptGenerator } from './prompt-generator'",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 8,
            "content": "import { GenerationError } from '@/lib/utils/error-handler';",
            "isCurrent": false
          },
          {
            "line": 9,
            "content": "import { ChapterGenerator } from './engine/chapter-generator';",
            "isCurrent": false
          },
          {
            "line": 10,
            "content": "import { PromptGenerator } from './prompt-generator'",
            "isCurrent": true
          },
          {
            "line": 11,
            "content": "import { MemoryManager, MemoryManagerConfig } from '@/lib/memory/core/memory-manager'; // 追加",
            "isCurrent": false
          },
          {
            "line": 12,
            "content": "import { setGlobalMemoryManager, initializePlotManager, getPlotManagerStatus } from '@/lib/plot';",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy.ts",
        "line": 26,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "private promptGenerator: PromptGenerator;",
        "method": "unknown",
        "class": "NovelGenerationEngine",
        "surrounding": [
          {
            "line": 24,
            "content": "private chapterGenerator: ChapterGenerator;",
            "isCurrent": false
          },
          {
            "line": 25,
            "content": "private geminiClient: GeminiClient;",
            "isCurrent": false
          },
          {
            "line": 26,
            "content": "private promptGenerator: PromptGenerator;",
            "isCurrent": true
          },
          {
            "line": 27,
            "content": "private memoryManager: MemoryManager; // 追加",
            "isCurrent": false
          },
          {
            "line": 28,
            "content": "// 初期化状態を追跡するためのフラグ",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy.ts",
        "line": 40,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "this.promptGenerator = new PromptGenerator();",
        "method": "constructor",
        "class": "NovelGenerationEngine",
        "surrounding": [
          {
            "line": 38,
            "content": "constructor() {",
            "isCurrent": false
          },
          {
            "line": 39,
            "content": "this.geminiClient = new GeminiClient();",
            "isCurrent": false
          },
          {
            "line": 40,
            "content": "this.promptGenerator = new PromptGenerator();",
            "isCurrent": true
          },
          {
            "line": 41,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 42,
            "content": "// MemoryManagerの完全なデフォルト設定",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine copy.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\generation\\engine copy.ts",
            "type": "template_literal",
            "content": "`Chapter ${chapterNumber} generation failed: ${error instanceof Error ? error.message : String(error)}`",
            "fullLength": 103,
            "variables": [
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${error instanceof Error ? error.message : String(error)}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{error instanceof Error ? error.message : String(error)}"
              }
            ],
            "purpose": "unknown"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\generation\\engine.ts",
        "line": 72,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.setModelMap(params.generation.models);",
        "method": "onParameterChanged",
        "class": "unknown",
        "surrounding": [
          {
            "line": 70,
            "content": "const params = parameterManager.getParameters();",
            "isCurrent": false
          },
          {
            "line": 71,
            "content": "if (params.generation.models) {",
            "isCurrent": false
          },
          {
            "line": 72,
            "content": "this.geminiClient.setModelMap(params.generation.models);",
            "isCurrent": true
          },
          {
            "line": 73,
            "content": "logger.info('Model map initialized from parameters');",
            "isCurrent": false
          },
          {
            "line": 74,
            "content": "}",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine.ts",
        "line": 92,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.setModelMap(params.generation.models);",
        "method": "if",
        "class": "unknown",
        "surrounding": [
          {
            "line": 90,
            "content": "const params = parameterManager.getParameters();",
            "isCurrent": false
          },
          {
            "line": 91,
            "content": "if (params.generation.models) {",
            "isCurrent": false
          },
          {
            "line": 92,
            "content": "this.geminiClient.setModelMap(params.generation.models);",
            "isCurrent": true
          },
          {
            "line": 93,
            "content": "logger.info('Updated model map in GeminiClient');",
            "isCurrent": false
          },
          {
            "line": 94,
            "content": "}",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine.ts",
        "line": 107,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const apiKeyValid = await this.geminiClient.validateApiKey();",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 105,
            "content": "parameters: SystemParameters;",
            "isCurrent": false
          },
          {
            "line": 106,
            "content": "}> {",
            "isCurrent": false
          },
          {
            "line": 107,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "isCurrent": true
          },
          {
            "line": 108,
            "content": "const modelInfo = this.geminiClient.getModelInfo();",
            "isCurrent": false
          },
          {
            "line": 109,
            "content": "const parameters = parameterManager.getParameters();",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine.ts",
        "line": 108,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const modelInfo = this.geminiClient.getModelInfo();",
        "method": "validateApiKey",
        "class": "unknown",
        "surrounding": [
          {
            "line": 106,
            "content": "}> {",
            "isCurrent": false
          },
          {
            "line": 107,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "isCurrent": false
          },
          {
            "line": 108,
            "content": "const modelInfo = this.geminiClient.getModelInfo();",
            "isCurrent": true
          },
          {
            "line": 109,
            "content": "const parameters = parameterManager.getParameters();",
            "isCurrent": false
          },
          {
            "line": 110,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine.ts",
        "line": 127,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const apiKeyValid = await this.geminiClient.validateApiKey();",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 125,
            "content": "plotManagerStatus?: any;",
            "isCurrent": false
          },
          {
            "line": 126,
            "content": "}> {",
            "isCurrent": false
          },
          {
            "line": 127,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "isCurrent": true
          },
          {
            "line": 128,
            "content": "const modelInfo = this.geminiClient.getModelInfo();",
            "isCurrent": false
          },
          {
            "line": 129,
            "content": "const parameters = parameterManager.getParameters();",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine.ts",
        "line": 128,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const modelInfo = this.geminiClient.getModelInfo();",
        "method": "validateApiKey",
        "class": "unknown",
        "surrounding": [
          {
            "line": 126,
            "content": "}> {",
            "isCurrent": false
          },
          {
            "line": 127,
            "content": "const apiKeyValid = await this.geminiClient.validateApiKey();",
            "isCurrent": false
          },
          {
            "line": 128,
            "content": "const modelInfo = this.geminiClient.getModelInfo();",
            "isCurrent": true
          },
          {
            "line": 129,
            "content": "const parameters = parameterManager.getParameters();",
            "isCurrent": false
          },
          {
            "line": 130,
            "content": "const plotManagerStatus = getPlotManagerStatus();",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine.ts",
        "line": 10,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "import { PromptGenerator } from './prompt-generator';",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 8,
            "content": "import { GenerationError } from '@/lib/utils/error-handler';",
            "isCurrent": false
          },
          {
            "line": 9,
            "content": "import { ChapterGenerator } from './engine/chapter-generator';",
            "isCurrent": false
          },
          {
            "line": 10,
            "content": "import { PromptGenerator } from './prompt-generator';",
            "isCurrent": true
          },
          {
            "line": 11,
            "content": "import { MemoryManager } from '@/lib/memory/core/memory-manager';",
            "isCurrent": false
          },
          {
            "line": 12,
            "content": "import { setGlobalMemoryManager, initializePlotManager, getPlotManagerStatus } from '@/lib/plot';",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine.ts",
        "line": 22,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "private promptGenerator: PromptGenerator;",
        "method": "unknown",
        "class": "NovelGenerationEngine",
        "surrounding": [
          {
            "line": 20,
            "content": "private chapterGenerator: ChapterGenerator;",
            "isCurrent": false
          },
          {
            "line": 21,
            "content": "private geminiClient: GeminiClient;",
            "isCurrent": false
          },
          {
            "line": 22,
            "content": "private promptGenerator: PromptGenerator;",
            "isCurrent": true
          },
          {
            "line": 23,
            "content": "private memoryManager: MemoryManager;",
            "isCurrent": false
          },
          {
            "line": 24,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine.ts",
        "line": 31,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "promptGenerator: PromptGenerator,",
        "method": "unknown",
        "class": "NovelGenerationEngine",
        "surrounding": [
          {
            "line": 29,
            "content": "memoryManager: MemoryManager,",
            "isCurrent": false
          },
          {
            "line": 30,
            "content": "chapterGenerator: ChapterGenerator,",
            "isCurrent": false
          },
          {
            "line": 31,
            "content": "promptGenerator: PromptGenerator,",
            "isCurrent": true
          },
          {
            "line": 32,
            "content": "geminiClient: GeminiClient",
            "isCurrent": false
          },
          {
            "line": 33,
            "content": ") {",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\engine.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\generation\\engine.ts",
            "type": "template_literal",
            "content": "`Chapter ${chapterNumber} generation failed: ${error instanceof Error ? error.message : String(error)}`",
            "fullLength": 103,
            "variables": [
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${error instanceof Error ? error.message : String(error)}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{error instanceof Error ? error.message : String(error)}"
              }
            ],
            "purpose": "unknown"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\generation\\gemini-client.ts",
        "line": 195,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "* const text = await geminiClient.generateText(\"こんにちは、世界について教えてください\");",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 193,
            "content": "* @usage",
            "isCurrent": false
          },
          {
            "line": 194,
            "content": "* // 基本的な使用方法",
            "isCurrent": false
          },
          {
            "line": 195,
            "content": "* const text = await geminiClient.generateText(\"こんにちは、世界について教えてください\");",
            "isCurrent": true
          },
          {
            "line": 196,
            "content": "*",
            "isCurrent": false
          },
          {
            "line": 197,
            "content": "* // オプション付きの使用方法",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\gemini-client.ts",
        "line": 198,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "* const text = await geminiClient.generateText(\"詳細な分析をしてください\", {",
        "method": "generateText",
        "class": "unknown",
        "surrounding": [
          {
            "line": 196,
            "content": "*",
            "isCurrent": false
          },
          {
            "line": 197,
            "content": "* // オプション付きの使用方法",
            "isCurrent": false
          },
          {
            "line": 198,
            "content": "* const text = await geminiClient.generateText(\"詳細な分析をしてください\", {",
            "isCurrent": true
          },
          {
            "line": 199,
            "content": "*   temperature: 0.5,",
            "isCurrent": false
          },
          {
            "line": 200,
            "content": "*   targetLength: 5000,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\gemini-client.ts",
        "line": 716,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "* const generatedText = await client.generateText(\"プロンプト\", {",
        "method": "setModelMap",
        "class": "unknown",
        "surrounding": [
          {
            "line": 714,
            "content": "*",
            "isCurrent": false
          },
          {
            "line": 715,
            "content": "* // 用途を指定してテキスト生成",
            "isCurrent": false
          },
          {
            "line": 716,
            "content": "* const generatedText = await client.generateText(\"プロンプト\", {",
            "isCurrent": true
          },
          {
            "line": 717,
            "content": "*   temperature: 0.7,",
            "isCurrent": false
          },
          {
            "line": 718,
            "content": "*   targetLength: 5000,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\gemini-client.ts",
        "line": 746,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "*     const story = await client.generateText(prompt, {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 744,
            "content": "*   try {",
            "isCurrent": false
          },
          {
            "line": 745,
            "content": "*     // コンテンツ生成用途を指定",
            "isCurrent": false
          },
          {
            "line": 746,
            "content": "*     const story = await client.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 747,
            "content": "*       temperature: 0.8,",
            "isCurrent": false
          },
          {
            "line": 748,
            "content": "*       targetLength: 3000,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\gemini-client.ts",
        "line": 407,
        "category": "geminiCalls",
        "pattern": "\\.generateContent\\s*\\(",
        "context": "const result = await model.generateContent({",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 405,
            "content": "});",
            "isCurrent": false
          },
          {
            "line": 406,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 407,
            "content": "const result = await model.generateContent({",
            "isCurrent": true
          },
          {
            "line": 408,
            "content": "contents: [{ role: 'user', parts: [{ text: prompt }] }],",
            "isCurrent": false
          },
          {
            "line": 409,
            "content": "});",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\gemini-client.ts",
        "line": 493,
        "category": "geminiCalls",
        "pattern": "\\.generateContent\\s*\\(",
        "context": "const result = await model.generateContent('test');",
        "method": "getGenerativeModel",
        "class": "unknown",
        "surrounding": [
          {
            "line": 491,
            "content": "// デフォルトモデルを使用",
            "isCurrent": false
          },
          {
            "line": 492,
            "content": "const model = this.client.getGenerativeModel({ model: this.defaultModel });",
            "isCurrent": false
          },
          {
            "line": 493,
            "content": "const result = await model.generateContent('test');",
            "isCurrent": true
          },
          {
            "line": 494,
            "content": "logger.info('API key validation successful');",
            "isCurrent": false
          },
          {
            "line": 495,
            "content": "return true;",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\gemini-client.ts",
        "line": 140,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "* geminiClient.setModelMap({",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 138,
            "content": "* @usage",
            "isCurrent": false
          },
          {
            "line": 139,
            "content": "* // 用途別モデルの設定",
            "isCurrent": false
          },
          {
            "line": 140,
            "content": "* geminiClient.setModelMap({",
            "isCurrent": true
          },
          {
            "line": 141,
            "content": "*   default: 'gemini-2.0-flash-lite',",
            "isCurrent": false
          },
          {
            "line": 142,
            "content": "*   summary: 'gemini-2.0-pro',",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\gemini-client.ts",
        "line": 195,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "* const text = await geminiClient.generateText(\"こんにちは、世界について教えてください\");",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 193,
            "content": "* @usage",
            "isCurrent": false
          },
          {
            "line": 194,
            "content": "* // 基本的な使用方法",
            "isCurrent": false
          },
          {
            "line": 195,
            "content": "* const text = await geminiClient.generateText(\"こんにちは、世界について教えてください\");",
            "isCurrent": true
          },
          {
            "line": 196,
            "content": "*",
            "isCurrent": false
          },
          {
            "line": 197,
            "content": "* // オプション付きの使用方法",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\gemini-client.ts",
        "line": 198,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "* const text = await geminiClient.generateText(\"詳細な分析をしてください\", {",
        "method": "generateText",
        "class": "unknown",
        "surrounding": [
          {
            "line": 196,
            "content": "*",
            "isCurrent": false
          },
          {
            "line": 197,
            "content": "* // オプション付きの使用方法",
            "isCurrent": false
          },
          {
            "line": 198,
            "content": "* const text = await geminiClient.generateText(\"詳細な分析をしてください\", {",
            "isCurrent": true
          },
          {
            "line": 199,
            "content": "*   temperature: 0.5,",
            "isCurrent": false
          },
          {
            "line": 200,
            "content": "*   targetLength: 5000,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\gemini-client.ts",
        "line": 467,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "* const isValid = await geminiClient.validateApiKey();",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 465,
            "content": "* @usage",
            "isCurrent": false
          },
          {
            "line": 466,
            "content": "* // APIキーの検証",
            "isCurrent": false
          },
          {
            "line": 467,
            "content": "* const isValid = await geminiClient.validateApiKey();",
            "isCurrent": true
          },
          {
            "line": 468,
            "content": "* if (isValid) {",
            "isCurrent": false
          },
          {
            "line": 469,
            "content": "*   console.log(\"APIキーは有効です\");",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\gemini-client.ts",
        "line": 517,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "* const info = geminiClient.getModelInfo();",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 515,
            "content": "* @usage",
            "isCurrent": false
          },
          {
            "line": 516,
            "content": "* // モデル情報の取得",
            "isCurrent": false
          },
          {
            "line": 517,
            "content": "* const info = geminiClient.getModelInfo();",
            "isCurrent": true
          },
          {
            "line": 518,
            "content": "* console.log(`デフォルトモデル: ${info.defaultModel}`);",
            "isCurrent": false
          },
          {
            "line": 519,
            "content": "* console.log(`最大再試行回数: ${info.maxRetries}`);",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\gemini-client.ts",
        "line": 66,
        "category": "geminiCalls",
        "pattern": "GeminiClient\\.",
        "context": "* アプリケーション → GeminiClient.generateText →",
        "method": "unknown",
        "class": "GeminiClient",
        "surrounding": [
          {
            "line": 64,
            "content": "*",
            "isCurrent": false
          },
          {
            "line": 65,
            "content": "* @example-flow",
            "isCurrent": false
          },
          {
            "line": 66,
            "content": "* アプリケーション → GeminiClient.generateText →",
            "isCurrent": true
          },
          {
            "line": 67,
            "content": "*   内部でのトークン計算 →",
            "isCurrent": false
          },
          {
            "line": 68,
            "content": "*   適切なモデル選択 →",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\gemini-client.ts",
        "line": 90,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "* const geminiClient = new GeminiClient();",
        "method": "unknown",
        "class": "GeminiClient",
        "surrounding": [
          {
            "line": 88,
            "content": "* @usage",
            "isCurrent": false
          },
          {
            "line": 89,
            "content": "* // 初期化方法",
            "isCurrent": false
          },
          {
            "line": 90,
            "content": "* const geminiClient = new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 91,
            "content": "*",
            "isCurrent": false
          },
          {
            "line": 92,
            "content": "* @call-flow",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\gemini-client.ts",
        "line": 706,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "* const client = new GeminiClient();",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 704,
            "content": "* import { GeminiClient } from '@/lib/generation/gemini-client';",
            "isCurrent": false
          },
          {
            "line": 705,
            "content": "*",
            "isCurrent": false
          },
          {
            "line": 706,
            "content": "* const client = new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 707,
            "content": "*",
            "isCurrent": false
          },
          {
            "line": 708,
            "content": "* // 用途別モデルマップの設定",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\gemini-client.ts",
        "line": 727,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "*   const client = new GeminiClient();",
        "method": "generateStory",
        "class": "unknown",
        "surrounding": [
          {
            "line": 725,
            "content": "*",
            "isCurrent": false
          },
          {
            "line": 726,
            "content": "* async function generateStory() {",
            "isCurrent": false
          },
          {
            "line": 727,
            "content": "*   const client = new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 728,
            "content": "*   const isValid = await client.validateApiKey();",
            "isCurrent": false
          },
          {
            "line": 729,
            "content": "*",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\gemini-client.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "textOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\index.ts",
        "line": 4,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "// export { PromptGenerator } from './prompt-generator';",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 2,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 3,
            "content": "// // 既存のエクスポート",
            "isCurrent": false
          },
          {
            "line": 4,
            "content": "// export { PromptGenerator } from './prompt-generator';",
            "isCurrent": true
          },
          {
            "line": 5,
            "content": "// export { ContextGenerator } from './context-generator';",
            "isCurrent": false
          },
          {
            "line": 6,
            "content": "// export { generationEngine } from './engine';",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\integrated-system-factory.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\prompt\\memory-service.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\generation\\prompt\\memory-service.ts",
            "type": "template_literal",
            "content": "`第${chapterNumber}章の開始にあたり：\\n\\n${randomTemplate}\\n\\n前章の具体的な内容は参照できませんが、物語全体の流れと一貫性を保った自然な展開を心がけてください。`",
            "fullLength": 102,
            "variables": [
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${randomTemplate}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{randomTemplate}"
              }
            ],
            "purpose": "story_generation"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\generation\\prompt\\memory-service.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 8
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\prompt\\prompt-formatter.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\generation\\prompt\\prompt-formatter.ts",
            "type": "template_literal",
            "content": "`- **${marriage.characters.join('**と**')}**は第${marriage.chapterNumber}章で結婚しました。${marriage.description}\\n`",
            "fullLength": 105,
            "variables": [
              {
                "type": "template_literal",
                "name": "${marriage.characters.join('**と**')}"
              },
              {
                "type": "template_literal",
                "name": "${marriage.chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${marriage.description}"
              },
              {
                "type": "handlebars",
                "name": "{marriage.characters.join('**と**')}"
              },
              {
                "type": "handlebars",
                "name": "{marriage.chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{marriage.description}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\generation\\prompt\\prompt-formatter.ts",
            "type": "template_literal",
            "content": "`- **${transformation.character}**は第${transformation.chapterNumber}章で変化しました。${transformation.description}\\n`",
            "fullLength": 108,
            "variables": [
              {
                "type": "template_literal",
                "name": "${transformation.character}"
              },
              {
                "type": "template_literal",
                "name": "${transformation.chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${transformation.description}"
              },
              {
                "type": "handlebars",
                "name": "{transformation.character}"
              },
              {
                "type": "handlebars",
                "name": "{transformation.chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{transformation.description}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\generation\\prompt\\prompt-formatter.ts",
            "type": "template_literal",
            "content": "`- **${event.company}**は第${event.chapterNumber}章で${event.amount}の資金調達に${event.success ? '成功' : '失敗'}しました。${event.description}\\n`",
            "fullLength": 128,
            "variables": [
              {
                "type": "template_literal",
                "name": "${event.company}"
              },
              {
                "type": "template_literal",
                "name": "${event.chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${event.amount}"
              },
              {
                "type": "template_literal",
                "name": "${event.success ? '成功' : '失敗'}"
              },
              {
                "type": "template_literal",
                "name": "${event.description}"
              },
              {
                "type": "handlebars",
                "name": "{event.company}"
              },
              {
                "type": "handlebars",
                "name": "{event.chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{event.amount}"
              },
              {
                "type": "handlebars",
                "name": "{event.success ? '成功' : '失敗'}"
              },
              {
                "type": "handlebars",
                "name": "{event.description}"
              }
            ],
            "purpose": "unknown"
          },
          {
            "file": "src\\lib\\generation\\prompt\\prompt-formatter.ts",
            "type": "template_literal",
            "content": "`- **${event.acquirer}**は第${event.chapterNumber}章で**${event.target}**を買収/合併しました。${event.description}\\n`",
            "fullLength": 103,
            "variables": [
              {
                "type": "template_literal",
                "name": "${event.acquirer}"
              },
              {
                "type": "template_literal",
                "name": "${event.chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${event.target}"
              },
              {
                "type": "template_literal",
                "name": "${event.description}"
              },
              {
                "type": "handlebars",
                "name": "{event.acquirer}"
              },
              {
                "type": "handlebars",
                "name": "{event.chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{event.target}"
              },
              {
                "type": "handlebars",
                "name": "{event.description}"
              }
            ],
            "purpose": "unknown"
          },
          {
            "file": "src\\lib\\generation\\prompt\\prompt-formatter.ts",
            "type": "template_literal",
            "content": "`- **${event.company}**は第${event.chapterNumber}章で**${event.productName}**をローンチしました。${event.description}\\n`",
            "fullLength": 106,
            "variables": [
              {
                "type": "template_literal",
                "name": "${event.company}"
              },
              {
                "type": "template_literal",
                "name": "${event.chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${event.productName}"
              },
              {
                "type": "template_literal",
                "name": "${event.description}"
              },
              {
                "type": "handlebars",
                "name": "{event.company}"
              },
              {
                "type": "handlebars",
                "name": "{event.chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{event.productName}"
              },
              {
                "type": "handlebars",
                "name": "{event.description}"
              }
            ],
            "purpose": "unknown"
          },
          {
            "file": "src\\lib\\generation\\prompt\\prompt-formatter.ts",
            "type": "template_literal",
            "content": "`- **${event.company}**は第${event.chapterNumber}章で${event.crisisType}危機に直面しました。${event.description}\\n`",
            "fullLength": 101,
            "variables": [
              {
                "type": "template_literal",
                "name": "${event.company}"
              },
              {
                "type": "template_literal",
                "name": "${event.chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${event.crisisType}"
              },
              {
                "type": "template_literal",
                "name": "${event.description}"
              },
              {
                "type": "handlebars",
                "name": "{event.company}"
              },
              {
                "type": "handlebars",
                "name": "{event.chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{event.crisisType}"
              },
              {
                "type": "handlebars",
                "name": "{event.description}"
              }
            ],
            "purpose": "unknown"
          },
          {
            "file": "src\\lib\\generation\\prompt\\prompt-formatter.ts",
            "type": "template_literal",
            "content": "`- **${event.company}**は第${event.chapterNumber}章で**${event.departure}**が退任し、**${event.replacement}**が${event.position}に就任しました。${event.description}\\n`",
            "fullLength": 149,
            "variables": [
              {
                "type": "template_literal",
                "name": "${event.company}"
              },
              {
                "type": "template_literal",
                "name": "${event.chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${event.departure}"
              },
              {
                "type": "template_literal",
                "name": "${event.replacement}"
              },
              {
                "type": "template_literal",
                "name": "${event.position}"
              },
              {
                "type": "template_literal",
                "name": "${event.description}"
              },
              {
                "type": "handlebars",
                "name": "{event.company}"
              },
              {
                "type": "handlebars",
                "name": "{event.chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{event.departure}"
              },
              {
                "type": "handlebars",
                "name": "{event.replacement}"
              },
              {
                "type": "handlebars",
                "name": "{event.position}"
              },
              {
                "type": "handlebars",
                "name": "{event.description}"
              }
            ],
            "purpose": "unknown"
          },
          {
            "file": "src\\lib\\generation\\prompt\\prompt-formatter.ts",
            "type": "template_literal",
            "content": "`- **${event.company}**の**${event.departure}**は第${event.chapterNumber}章で${event.position}を退任しました。${event.description}\\n`",
            "fullLength": 120,
            "variables": [
              {
                "type": "template_literal",
                "name": "${event.company}"
              },
              {
                "type": "template_literal",
                "name": "${event.departure}"
              },
              {
                "type": "template_literal",
                "name": "${event.chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${event.position}"
              },
              {
                "type": "template_literal",
                "name": "${event.description}"
              },
              {
                "type": "handlebars",
                "name": "{event.company}"
              },
              {
                "type": "handlebars",
                "name": "{event.departure}"
              },
              {
                "type": "handlebars",
                "name": "{event.chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{event.position}"
              },
              {
                "type": "handlebars",
                "name": "{event.description}"
              }
            ],
            "purpose": "unknown"
          },
          {
            "file": "src\\lib\\generation\\prompt\\prompt-formatter.ts",
            "type": "template_literal",
            "content": "`- **${event.replacement}**は第${event.chapterNumber}章で**${event.company}**の${event.position}に就任しました。${event.description}\\n`",
            "fullLength": 122,
            "variables": [
              {
                "type": "template_literal",
                "name": "${event.replacement}"
              },
              {
                "type": "template_literal",
                "name": "${event.chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${event.company}"
              },
              {
                "type": "template_literal",
                "name": "${event.position}"
              },
              {
                "type": "template_literal",
                "name": "${event.description}"
              },
              {
                "type": "handlebars",
                "name": "{event.replacement}"
              },
              {
                "type": "handlebars",
                "name": "{event.chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{event.company}"
              },
              {
                "type": "handlebars",
                "name": "{event.position}"
              },
              {
                "type": "handlebars",
                "name": "{event.description}"
              }
            ],
            "purpose": "unknown"
          },
          {
            "file": "src\\lib\\generation\\prompt\\prompt-formatter.ts",
            "type": "template_literal",
            "content": "`- **${event.parties.join('**と**')}**の間で第${event.chapterNumber}章で知的財産紛争が発生しました。${event.description}\\n`",
            "fullLength": 102,
            "variables": [
              {
                "type": "template_literal",
                "name": "${event.parties.join('**と**')}"
              },
              {
                "type": "template_literal",
                "name": "${event.chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${event.description}"
              },
              {
                "type": "handlebars",
                "name": "{event.parties.join('**と**')}"
              },
              {
                "type": "handlebars",
                "name": "{event.chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{event.description}"
              }
            ],
            "purpose": "unknown"
          },
          {
            "file": "src\\lib\\generation\\prompt\\prompt-formatter.ts",
            "type": "template_literal",
            "content": "`\r\n    ### 【永続的イベントの一般ルール】\r\n    1. 上記の永続的イベントは物語全体で一貫して維持されなければなりません\r\n    2. これらのイベントを無視したり、矛盾する展開を導入しないでください\r\n    3. イベントの影響は継続的に物語に反映されます - 発生したイベントは取り消せません\r\n    4. これらのイベントへの言及は自然な形で行い、会話や回想の中で過去の出来事として参照できます\r\n    5. 各イベントがもたらした変化を、キャラクターの心理状態や行動、判断基準に反映させてください\r\n    `",
            "fullLength": 271,
            "variables": [],
            "purpose": "character_analysis"
          }
        ],
        "count": 11
      },
      {
        "file": "src\\lib\\generation\\prompt\\section-builder.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\generation\\prompt\\section-builder.ts",
            "type": "template_literal",
            "content": "`\r\n## 重要な執筆ガイドライン\r\n1. **変容と成長**: キャラクターの内面変化を通して読者に共感体験を提供する\r\n2. **体験的学習**: 概念を説明するのではなく、キャラクターの体験を通して読者が自然と学べるようにする\r\n3. **感情の旅**: 指定された感情アークに沿って読者を感情的な旅に連れていく\r\n4. **共感ポイント**: 指定された共感ポイントを効果的に描写し、読者の感情移入を促す\r\n5. **カタルシス**: 学びと感情が統合された瞬間を印象的に描く\r\n6. **自然な対話**: 教科書的な説明ではなく、自然な対話と内面描写で概念を表現する\r\n7. **具体的な場面**: 抽象的な概念を具体的なビジネスシーンで表現する\r\n`",
            "fullLength": 331,
            "variables": [],
            "purpose": "character_analysis"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\generation\\prompt\\template-manager.ts",
        "line": 23,
        "category": "promptGeneration",
        "pattern": "promptTemplate",
        "context": "constructor(private templatePath: string = path.join(process.cwd(), 'src/lib/generation/prompt/template/promptTemplates.json')) { }",
        "method": "constructor",
        "class": "TemplateManager",
        "surrounding": [
          {
            "line": 21,
            "content": "* @param templatePath テンプレートファイルのパス（省略時はデフォルトパス）",
            "isCurrent": false
          },
          {
            "line": 22,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 23,
            "content": "constructor(private templatePath: string = path.join(process.cwd(), 'src/lib/generation/prompt/template/promptTemplates.json')) { }",
            "isCurrent": true
          },
          {
            "line": 24,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 25,
            "content": "/**",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\prompt\\template-manager.ts",
        "line": 51,
        "category": "templateUsage",
        "pattern": "getTemplate",
        "context": "public getTemplate(key: string, subKey?: string): string {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 49,
            "content": "* @returns {string} テンプレート文字列",
            "isCurrent": false
          },
          {
            "line": 50,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 51,
            "content": "public getTemplate(key: string, subKey?: string): string {",
            "isCurrent": true
          },
          {
            "line": 52,
            "content": "if (!this.isLoaded) {",
            "isCurrent": false
          },
          {
            "line": 53,
            "content": "logger.warn('Templates are not loaded yet. Returning empty string.');",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\prompt\\template-manager.ts",
        "line": 270,
        "category": "templateUsage",
        "pattern": "getTemplate",
        "context": "return this.getTemplate('businessChapterTypes', chapterType) ||",
        "method": "getChapterTypeInstructions",
        "class": "unknown",
        "surrounding": [
          {
            "line": 268,
            "content": "// ビジネスジャンルの場合",
            "isCurrent": false
          },
          {
            "line": 269,
            "content": "if (genre.toLowerCase() === 'business') {",
            "isCurrent": false
          },
          {
            "line": 270,
            "content": "return this.getTemplate('businessChapterTypes', chapterType) ||",
            "isCurrent": true
          },
          {
            "line": 271,
            "content": "this.getTemplate('businessChapterTypes', 'BUSINESS_CHALLENGE');",
            "isCurrent": false
          },
          {
            "line": 272,
            "content": "}",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\prompt\\template-manager.ts",
        "line": 271,
        "category": "templateUsage",
        "pattern": "getTemplate",
        "context": "this.getTemplate('businessChapterTypes', 'BUSINESS_CHALLENGE');",
        "method": "s",
        "class": "unknown",
        "surrounding": [
          {
            "line": 269,
            "content": "if (genre.toLowerCase() === 'business') {",
            "isCurrent": false
          },
          {
            "line": 270,
            "content": "return this.getTemplate('businessChapterTypes', chapterType) ||",
            "isCurrent": false
          },
          {
            "line": 271,
            "content": "this.getTemplate('businessChapterTypes', 'BUSINESS_CHALLENGE');",
            "isCurrent": true
          },
          {
            "line": 272,
            "content": "}",
            "isCurrent": false
          },
          {
            "line": 273,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\prompt\\template-manager.ts",
        "line": 275,
        "category": "templateUsage",
        "pattern": "getTemplate",
        "context": "return this.getTemplate('chapterTypes', chapterType) ||",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 273,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 274,
            "content": "// 一般的な章タイプ",
            "isCurrent": false
          },
          {
            "line": 275,
            "content": "return this.getTemplate('chapterTypes', chapterType) ||",
            "isCurrent": true
          },
          {
            "line": 276,
            "content": "this.getTemplate('chapterTypes', 'STANDARD');",
            "isCurrent": false
          },
          {
            "line": 277,
            "content": "}",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\prompt\\template-manager.ts",
        "line": 276,
        "category": "templateUsage",
        "pattern": "getTemplate",
        "context": "this.getTemplate('chapterTypes', 'STANDARD');",
        "method": "getTemplate",
        "class": "unknown",
        "surrounding": [
          {
            "line": 274,
            "content": "// 一般的な章タイプ",
            "isCurrent": false
          },
          {
            "line": 275,
            "content": "return this.getTemplate('chapterTypes', chapterType) ||",
            "isCurrent": false
          },
          {
            "line": 276,
            "content": "this.getTemplate('chapterTypes', 'STANDARD');",
            "isCurrent": true
          },
          {
            "line": 277,
            "content": "}",
            "isCurrent": false
          },
          {
            "line": 278,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\prompt\\template-manager.ts",
        "line": 285,
        "category": "templateUsage",
        "pattern": "getTemplate",
        "context": "return this.getTemplate('genreGuidance', genre.toLowerCase()) || '';",
        "method": "getGenreGuidance",
        "class": "unknown",
        "surrounding": [
          {
            "line": 283,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 284,
            "content": "public getGenreGuidance(genre: string): string {",
            "isCurrent": false
          },
          {
            "line": 285,
            "content": "return this.getTemplate('genreGuidance', genre.toLowerCase()) || '';",
            "isCurrent": true
          },
          {
            "line": 286,
            "content": "}",
            "isCurrent": false
          },
          {
            "line": 287,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\prompt\\template-manager.ts",
        "line": 294,
        "category": "templateUsage",
        "pattern": "getTemplate",
        "context": "return this.getTemplate('businessSpecificSections', sectionType) || '';",
        "method": "getBusinessSpecificSection",
        "class": "unknown",
        "surrounding": [
          {
            "line": 292,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 293,
            "content": "public getBusinessSpecificSection(sectionType: string): string {",
            "isCurrent": false
          },
          {
            "line": 294,
            "content": "return this.getTemplate('businessSpecificSections', sectionType) || '';",
            "isCurrent": true
          },
          {
            "line": 295,
            "content": "}",
            "isCurrent": false
          },
          {
            "line": 296,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\prompt\\template-manager.ts",
        "line": 309,
        "category": "templateUsage",
        "pattern": "getTemplate",
        "context": "const stateTemplates = this.getTemplate('narrativeStates', state);",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 307,
            "content": ": (lowerGenre === 'business' ? 'business' : 'default');",
            "isCurrent": false
          },
          {
            "line": 308,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 309,
            "content": "const stateTemplates = this.getTemplate('narrativeStates', state);",
            "isCurrent": true
          },
          {
            "line": 310,
            "content": "if (stateTemplates && typeof stateTemplates === 'object' && genreKey in stateTemplates) {",
            "isCurrent": false
          },
          {
            "line": 311,
            "content": "return stateTemplates[genreKey as keyof typeof stateTemplates] as string;",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\prompt\\template-manager.ts",
        "line": 314,
        "category": "templateUsage",
        "pattern": "getTemplate",
        "context": "const defaultTemplates = this.getTemplate('narrativeStates', 'DEFAULT');",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 312,
            "content": "}",
            "isCurrent": false
          },
          {
            "line": 313,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 314,
            "content": "const defaultTemplates = this.getTemplate('narrativeStates', 'DEFAULT');",
            "isCurrent": true
          },
          {
            "line": 315,
            "content": "if (defaultTemplates && typeof defaultTemplates === 'object') {",
            "isCurrent": false
          },
          {
            "line": 316,
            "content": "return defaultTemplates[genreKey as keyof typeof defaultTemplates] as string || '';",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\prompt\\template-manager.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\generation\\prompt\\template-manager.ts",
            "type": "template_literal",
            "content": "`# 小説生成指示\r\n  \r\n  ## 基本情報\r\n  - 章番号: {chapterNumber}\r\n  - 総章数: {totalChapters}\r\n  - 目標文字数: {targetLength}文字\r\n  - 語り手: {narrativeStyle}\r\n  - 文体: {tone}\r\n  - テーマ: {theme}\r\n  - ジャンル: {genre}\r\n  \r\n  ## 世界設定\r\n  {worldSettings}\r\n  \r\n  ## 登場人物\r\n  {characters}\r\n  \r\n  ## 物語の文脈\r\n  {storyContext}\r\n  \r\n  ## 前章の状況\r\n  {previousChapterEnding}\r\n  \r\n  ## 章の目的\r\n  {chapterPurpose}\r\n  \r\n  ## プロット要素\r\n  {requiredPlotPoints}\r\n  \r\n  ## テンション・ペーシング\r\n  - テンションレベル: {tensionLevel}\r\n  - テンション説明: {tensionDescription}\r\n  - ペーシン...",
            "fullLength": 673,
            "variables": [
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{totalChapters}"
              },
              {
                "type": "handlebars",
                "name": "{targetLength}"
              },
              {
                "type": "handlebars",
                "name": "{narrativeStyle}"
              },
              {
                "type": "handlebars",
                "name": "{tone}"
              },
              {
                "type": "handlebars",
                "name": "{theme}"
              },
              {
                "type": "handlebars",
                "name": "{genre}"
              },
              {
                "type": "handlebars",
                "name": "{worldSettings}"
              },
              {
                "type": "handlebars",
                "name": "{characters}"
              },
              {
                "type": "handlebars",
                "name": "{storyContext}"
              },
              {
                "type": "handlebars",
                "name": "{previousChapterEnding}"
              },
              {
                "type": "handlebars",
                "name": "{chapterPurpose}"
              },
              {
                "type": "handlebars",
                "name": "{requiredPlotPoints}"
              },
              {
                "type": "handlebars",
                "name": "{tensionLevel}"
              },
              {
                "type": "handlebars",
                "name": "{tensionDescription}"
              },
              {
                "type": "handlebars",
                "name": "{pacingLevel}"
              },
              {
                "type": "handlebars",
                "name": "{pacingDescription}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\generation\\prompt\\template-manager.ts",
            "type": "template_literal",
            "content": "`\r\n  ## ビジネス小説特有の指示\r\n  - リアルなビジネスシーンを描写する\r\n  - 専門用語は自然に会話に織り込む\r\n  - キャラクターの成長と学びを重視する\r\n  - 実践的な知識を物語に統合する\r\n  `",
            "fullLength": 110,
            "variables": [],
            "purpose": "character_analysis"
          }
        ],
        "count": 2
      },
      {
        "file": "src\\lib\\generation\\prompt\\template-manager.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\prompt-generator copy 2.ts",
        "line": 207,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "export class PromptGenerator {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 205,
            "content": "* 統合記憶階層システム対応プロンプト生成クラス（最適化完成版）",
            "isCurrent": false
          },
          {
            "line": 206,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 207,
            "content": "export class PromptGenerator {",
            "isCurrent": true
          },
          {
            "line": 208,
            "content": "private templateManager: TemplateManager;",
            "isCurrent": false
          },
          {
            "line": 209,
            "content": "private formatter: PromptFormatter;",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\prompt-generator copy 2.ts",
        "line": 253,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "logger.info('PromptGenerator ready for immediate use with optimized dependencies', {",
        "method": "SectionBuilder",
        "class": "unknown",
        "surrounding": [
          {
            "line": 251,
            "content": "this.loadTemplatesSync();",
            "isCurrent": false
          },
          {
            "line": 252,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 253,
            "content": "logger.info('PromptGenerator ready for immediate use with optimized dependencies', {",
            "isCurrent": true
          },
          {
            "line": 254,
            "content": "hasWorldSettingsManager: !!this.worldSettingsManager,",
            "isCurrent": false
          },
          {
            "line": 255,
            "content": "hasPlotManager: !!this.plotManager,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\prompt-generator copy 2.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\generation\\prompt-generator copy 2.ts",
            "type": "template_literal",
            "content": "`# 【小説生成指示】\n## 基本情報\n- 章番号: {chapterNumber}/{totalChapters}\n- 目標文字数: {targetLength}文字程度\n- 語り口調: {narrativeStyle}\n- トーン: {tone}\n- テーマ: {theme}\n- ジャンル: {genre}\n\n## 前章の状況（直接続きを書いてください）\n{previousChapterEnding}\n\n## 展開指示（必ず遵守してください）\n- この章の目的: {chapterPurpose}\n- 達成すべきプロット要素: {requiredPlotPoints}\n- 章の終わり方方針: {chapterEndingGuidance}\n\n## 表現指標\n- テンションレベル: {tensionLevel} ({tensionDescription})\n- ペーシングレベル: {pacingLevel} ({pacingDescription})\n\n## 世界設定\n{worldSettings}\n\n## 登場人物\n{characters}\n\n## 物語の文脈\n{storyConte...",
            "fullLength": 1004,
            "variables": [
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{totalChapters}"
              },
              {
                "type": "handlebars",
                "name": "{targetLength}"
              },
              {
                "type": "handlebars",
                "name": "{narrativeStyle}"
              },
              {
                "type": "handlebars",
                "name": "{tone}"
              },
              {
                "type": "handlebars",
                "name": "{theme}"
              },
              {
                "type": "handlebars",
                "name": "{genre}"
              },
              {
                "type": "handlebars",
                "name": "{previousChapterEnding}"
              },
              {
                "type": "handlebars",
                "name": "{chapterPurpose}"
              },
              {
                "type": "handlebars",
                "name": "{requiredPlotPoints}"
              },
              {
                "type": "handlebars",
                "name": "{chapterEndingGuidance}"
              },
              {
                "type": "handlebars",
                "name": "{tensionLevel}"
              },
              {
                "type": "handlebars",
                "name": "{tensionDescription}"
              },
              {
                "type": "handlebars",
                "name": "{pacingLevel}"
              },
              {
                "type": "handlebars",
                "name": "{pacingDescription}"
              },
              {
                "type": "handlebars",
                "name": "{worldSettings}"
              },
              {
                "type": "handlebars",
                "name": "{characters}"
              },
              {
                "type": "handlebars",
                "name": "{storyContext}"
              },
              {
                "type": "handlebars",
                "name": "{focusCharacters}"
              },
              {
                "type": "handlebars",
                "name": "{foreshadowing}"
              },
              {
                "type": "handlebars",
                "name": "{narrativeStateGuidance}"
              },
              {
                "type": "handlebars",
                "name": "{contradictions}"
              },
              {
                "type": "handlebars",
                "name": "{previousSceneDescription}"
              },
              {
                "type": "handlebars",
                "name": "{characterPositions}"
              },
              {
                "type": "handlebars",
                "name": "{timeElapsed}"
              },
              {
                "type": "handlebars",
                "name": "{currentLocation}"
              },
              {
                "type": "handlebars",
                "name": "{targetLength}"
              },
              {
                "type": "handlebars",
                "name": "{narrativeStyle}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\generation\\prompt-generator copy 2.ts",
            "type": "template_literal",
            "content": "`\n# 小説生成指示\n- 章番号: ${context.chapterNumber || 1}\n- 目標文字数: ${context.targetLength || 8000}文字程度\n- ジャンル: ${context.genre || '指定なし'}\n- テーマ: ${context.theme || '指定なし'}\n\n## 設定\n${context.worldSettings ? (typeof context.worldSettings === 'string' ? context.worldSettings : '世界設定あり') : '特定の設定はありません。自由に創造してください。'}\n\n## 登場人物\n${context.characters && context.characters.length > 0\n        ? context.characters.map(c => `",
            "fullLength": 406,
            "variables": [
              {
                "type": "template_literal",
                "name": "${context.chapterNumber || 1}"
              },
              {
                "type": "template_literal",
                "name": "${context.targetLength || 8000}"
              },
              {
                "type": "template_literal",
                "name": "${context.genre || '指定なし'}"
              },
              {
                "type": "template_literal",
                "name": "${context.theme || '指定なし'}"
              },
              {
                "type": "template_literal",
                "name": "${context.worldSettings ? (typeof context.worldSettings === 'string' ? context.worldSettings : '世界設定あり') : '特定の設定はありません。自由に創造してください。'}"
              },
              {
                "type": "handlebars",
                "name": "{context.chapterNumber || 1}"
              },
              {
                "type": "handlebars",
                "name": "{context.targetLength || 8000}"
              },
              {
                "type": "handlebars",
                "name": "{context.genre || '指定なし'}"
              },
              {
                "type": "handlebars",
                "name": "{context.theme || '指定なし'}"
              },
              {
                "type": "handlebars",
                "name": "{context.worldSettings ? (typeof context.worldSettings === 'string' ? context.worldSettings : '世界設定あり') : '特定の設定はありません。自由に創造してください。'}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\generation\\prompt-generator copy 2.ts",
            "type": "template_literal",
            "content": "`).join('\\n')\n        : '登場人物は自由に創造してください。'}\n\n## ストーリーコンテキスト\n${context.storyContext || '特に指定はありません。自由に展開してください。'}\n\n## プロット要素\n${context.plotPoints && context.plotPoints.length > 0\n        ? context.plotPoints.map(p => `",
            "fullLength": 218,
            "variables": [
              {
                "type": "template_literal",
                "name": "${context.storyContext || '特に指定はありません。自由に展開してください。'}"
              },
              {
                "type": "handlebars",
                "name": "{context.storyContext || '特に指定はありません。自由に展開してください。'}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\generation\\prompt-generator copy 2.ts",
            "type": "template_literal",
            "content": "`\n      ## 保持すべき重要な事前イベント\n      ${this.formatter.formatEventSubsection(significantEvents.locationHistory, '現在の場所で起きた重要な出来事')}\n      ${this.formatter.formatEventSubsection(significantEvents.characterInteractions, '登場キャラクター間の重要な対話・対立歴')}\n      ${this.formatter.formatEventSubsection(significantEvents.warningsAndPromises, '守るべき約束・警告・ルール')}\n\n      ### 重要指示\n      - 上記の重要イベントとの整合性を必ず維持してください\n      - 特に警告や約束に関するイベントは、キャラクターが記憶しているはずです\n      - 同じ場所で類似イベントが起きる場合は、必ず過去の出来事を参照し言及してください\n      - 重要な警告や約束が破られる...",
            "fullLength": 656,
            "variables": [
              {
                "type": "template_literal",
                "name": "${this.formatter.formatEventSubsection(significantEvents.locationHistory, '現在の場所で起きた重要な出来事')}"
              },
              {
                "type": "template_literal",
                "name": "${this.formatter.formatEventSubsection(significantEvents.characterInteractions, '登場キャラクター間の重要な対話・対立歴')}"
              },
              {
                "type": "template_literal",
                "name": "${this.formatter.formatEventSubsection(significantEvents.warningsAndPromises, '守るべき約束・警告・ルール')}"
              },
              {
                "type": "handlebars",
                "name": "{this.formatter.formatEventSubsection(significantEvents.locationHistory, '現在の場所で起きた重要な出来事')}"
              },
              {
                "type": "handlebars",
                "name": "{this.formatter.formatEventSubsection(significantEvents.characterInteractions, '登場キャラクター間の重要な対話・対立歴')}"
              },
              {
                "type": "handlebars",
                "name": "{this.formatter.formatEventSubsection(significantEvents.warningsAndPromises, '守るべき約束・警告・ルール')}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\generation\\prompt-generator copy 2.ts",
            "type": "template_literal",
            "content": "`\n## 重要な執筆ガイドライン\n1. **変容と成長**: キャラクターの内面変化を通して読者に共感体験を提供する\n2. **体験的学習**: 概念を説明するのではなく、キャラクターの体験を通して読者が自然と学べるようにする\n3. **感情の旅**: 指定された感情アークに沿って読者を感情的な旅に連れていく\n4. **共感ポイント**: 指定された共感ポイントを効果的に描写し、読者の感情移入を促す\n5. **カタルシス**: 学びと感情が統合された瞬間を印象的に描く\n6. **自然な対話**: 教科書的な説明ではなく、自然な対話と内面描写で概念を表現する\n7. **具体的な場面**: 抽象的な概念を具体的なビジネスシーンで表現する\n`",
            "fullLength": 322,
            "variables": [],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\generation\\prompt-generator copy 2.ts",
            "type": "template_literal",
            "content": "`\n## 学びの物語ガイダンス\n・概念: ${conceptName}\n・学習段階: ${learningStage}\n\n### 体現化ガイド\n${embodimentGuide}\n\n## 共感ポイント\n${empatheticPoints}\n\n## 重要な執筆ガイドライン\n1. **変容と成長**: キャラクターの内面変化を通して読者に共感体験を提供する\n2. **体験的学習**: 概念を説明するのではなく、キャラクターの体験を通して読者が自然と学べるようにする\n3. **感情の旅**: 指定された感情アークに沿って読者を感情的な旅に連れていく\n4. **共感ポイント**: 指定された共感ポイントを効果的に描写し、読者の感情移入を促す\n5. **カタルシス**: 学びと感情が統合された瞬間を印象的に描く\n6. **自然な対話**: 教科書的な説明ではなく、自然な対話と内面描写で概念を表現する\n7. **具体的な場面**: 抽象的な概念を具体的なビジネスシーンで表現する\n`",
            "fullLength": 443,
            "variables": [
              {
                "type": "template_literal",
                "name": "${conceptName}"
              },
              {
                "type": "template_literal",
                "name": "${learningStage}"
              },
              {
                "type": "template_literal",
                "name": "${embodimentGuide}"
              },
              {
                "type": "template_literal",
                "name": "${empatheticPoints}"
              },
              {
                "type": "handlebars",
                "name": "{conceptName}"
              },
              {
                "type": "handlebars",
                "name": "{learningStage}"
              },
              {
                "type": "handlebars",
                "name": "{embodimentGuide}"
              },
              {
                "type": "handlebars",
                "name": "{empatheticPoints}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\generation\\prompt-generator copy 2.ts",
            "type": "template_literal",
            "content": "`\n\n【出力形式】\n以下の形式で出力してください:\n\n---\ntitle: (章のタイトルをここに記入)\npov: (視点キャラクターをここに記入)\nlocation: (主な舞台をここに記入)\ntimeframe: (時間設定をここに記入)\nemotionalTone: (感情基調をここに記入)\nsummary: (章の要約を100文字程度でここに記入)\n---\n\n(ここから直接本文を書き始めてください。タグや見出しは使わずに、物語の本文を約${targetLength}文字以上書いてください。この本文セクションは次の「---」まで続きます)\n\n---\nscenes:\n  - title: (シーン1タイトル)\n    type: (INTRODUCTION/DEVELOPMENT/CLIMAX/RESOLUTION/TRANSITIONのいずれか)\n    characters: (登場キャラクター、カンマ区切り)\n    location: (場所)\n    summary: (シーンの要約)\n  - title: (シーン2タイトル)\n    type: (シーンタイプ)\n  ...",
            "fullLength": 621,
            "variables": [
              {
                "type": "template_literal",
                "name": "${targetLength}"
              },
              {
                "type": "handlebars",
                "name": "{targetLength}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 7
      },
      {
        "file": "src\\lib\\generation\\prompt-generator copy.ts",
        "line": 214,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "export class PromptGenerator {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 212,
            "content": "* 統合記憶階層システム対応プロンプト生成クラス",
            "isCurrent": false
          },
          {
            "line": 213,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 214,
            "content": "export class PromptGenerator {",
            "isCurrent": true
          },
          {
            "line": 215,
            "content": "private templateManager: TemplateManager;",
            "isCurrent": false
          },
          {
            "line": 216,
            "content": "private formatter: PromptFormatter;",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\prompt-generator copy.ts",
        "line": 263,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "logger.info('PromptGenerator created with unified memory system', {",
        "method": "SectionBuilder",
        "class": "unknown",
        "surrounding": [
          {
            "line": 261,
            "content": "this.initializationPromise = this.initialize();",
            "isCurrent": false
          },
          {
            "line": 262,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 263,
            "content": "logger.info('PromptGenerator created with unified memory system', {",
            "isCurrent": true
          },
          {
            "line": 264,
            "content": "hasMemoryManager: !!this.memoryManager,",
            "isCurrent": false
          },
          {
            "line": 265,
            "content": "hasLearningJourneySystem: !!this.learningJourneySystem",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\prompt-generator copy.ts",
        "line": 278,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "logger.info('PromptGenerator initialization starting with unified memory system');",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 276,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 277,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 278,
            "content": "logger.info('PromptGenerator initialization starting with unified memory system');",
            "isCurrent": true
          },
          {
            "line": 279,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 280,
            "content": "// テンプレートの読み込み",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\prompt-generator copy.ts",
        "line": 299,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "logger.info('PromptGenerator initialized successfully with unified memory system');",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 297,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 298,
            "content": "this.isInitialized = true;",
            "isCurrent": false
          },
          {
            "line": 299,
            "content": "logger.info('PromptGenerator initialized successfully with unified memory system');",
            "isCurrent": true
          },
          {
            "line": 300,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 301,
            "content": "} catch (err) {",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\prompt-generator copy.ts",
        "line": 302,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "logger.error('Failed to initialize PromptGenerator', { error: err });",
        "method": "catch",
        "class": "unknown",
        "surrounding": [
          {
            "line": 300,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 301,
            "content": "} catch (err) {",
            "isCurrent": false
          },
          {
            "line": 302,
            "content": "logger.error('Failed to initialize PromptGenerator', { error: err });",
            "isCurrent": true
          },
          {
            "line": 303,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 304,
            "content": "// フォールバックテンプレートを設定",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\prompt-generator copy.ts",
        "line": 308,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "logger.info('PromptGenerator initialized with fallback templates');",
        "method": "rror",
        "class": "unknown",
        "surrounding": [
          {
            "line": 306,
            "content": "await this.setFallbackTemplates();",
            "isCurrent": false
          },
          {
            "line": 307,
            "content": "this.isInitialized = true;",
            "isCurrent": false
          },
          {
            "line": 308,
            "content": "logger.info('PromptGenerator initialized with fallback templates');",
            "isCurrent": true
          },
          {
            "line": 309,
            "content": "} catch (fallbackErr) {",
            "isCurrent": false
          },
          {
            "line": 310,
            "content": "logger.error('Failed to set fallback templates', { error: fallbackErr });",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\prompt-generator copy.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\generation\\prompt-generator copy.ts",
            "type": "template_literal",
            "content": "`# 【小説生成指示】\n## 基本情報\n- 章番号: {chapterNumber}/{totalChapters}\n- 目標文字数: {targetLength}文字程度\n- 語り口調: {narrativeStyle}\n- トーン: {tone}\n- テーマ: {theme}\n- ジャンル: {genre}\n\n## 前章の状況（直接続きを書いてください）\n{previousChapterEnding}\n\n## 展開指示（必ず遵守してください）\n- この章の目的: {chapterPurpose}\n- 達成すべきプロット要素: {requiredPlotPoints}\n- 章の終わり方方針: {chapterEndingGuidance}\n\n## 表現指標\n- テンションレベル: {tensionLevel} ({tensionDescription})\n- ペーシングレベル: {pacingLevel} ({pacingDescription})\n\n## 世界設定\n{worldSettings}\n\n## 登場人物\n{characters}\n\n## 物語の文脈\n{storyConte...",
            "fullLength": 1004,
            "variables": [
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{totalChapters}"
              },
              {
                "type": "handlebars",
                "name": "{targetLength}"
              },
              {
                "type": "handlebars",
                "name": "{narrativeStyle}"
              },
              {
                "type": "handlebars",
                "name": "{tone}"
              },
              {
                "type": "handlebars",
                "name": "{theme}"
              },
              {
                "type": "handlebars",
                "name": "{genre}"
              },
              {
                "type": "handlebars",
                "name": "{previousChapterEnding}"
              },
              {
                "type": "handlebars",
                "name": "{chapterPurpose}"
              },
              {
                "type": "handlebars",
                "name": "{requiredPlotPoints}"
              },
              {
                "type": "handlebars",
                "name": "{chapterEndingGuidance}"
              },
              {
                "type": "handlebars",
                "name": "{tensionLevel}"
              },
              {
                "type": "handlebars",
                "name": "{tensionDescription}"
              },
              {
                "type": "handlebars",
                "name": "{pacingLevel}"
              },
              {
                "type": "handlebars",
                "name": "{pacingDescription}"
              },
              {
                "type": "handlebars",
                "name": "{worldSettings}"
              },
              {
                "type": "handlebars",
                "name": "{characters}"
              },
              {
                "type": "handlebars",
                "name": "{storyContext}"
              },
              {
                "type": "handlebars",
                "name": "{focusCharacters}"
              },
              {
                "type": "handlebars",
                "name": "{foreshadowing}"
              },
              {
                "type": "handlebars",
                "name": "{narrativeStateGuidance}"
              },
              {
                "type": "handlebars",
                "name": "{contradictions}"
              },
              {
                "type": "handlebars",
                "name": "{previousSceneDescription}"
              },
              {
                "type": "handlebars",
                "name": "{characterPositions}"
              },
              {
                "type": "handlebars",
                "name": "{timeElapsed}"
              },
              {
                "type": "handlebars",
                "name": "{currentLocation}"
              },
              {
                "type": "handlebars",
                "name": "{targetLength}"
              },
              {
                "type": "handlebars",
                "name": "{narrativeStyle}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\generation\\prompt-generator copy.ts",
            "type": "template_literal",
            "content": "`\n# 小説生成指示\n- 章番号: ${context.chapterNumber || 1}\n- 目標文字数: ${context.targetLength || 8000}文字程度\n- ジャンル: ${context.genre || '指定なし'}\n- テーマ: ${context.theme || '指定なし'}\n\n## 設定\n${context.worldSettings ? (typeof context.worldSettings === 'string' ? context.worldSettings : '世界設定あり') : '特定の設定はありません。自由に創造してください。'}\n\n## 登場人物\n${context.characters && context.characters.length > 0\n        ? context.characters.map(c => `",
            "fullLength": 406,
            "variables": [
              {
                "type": "template_literal",
                "name": "${context.chapterNumber || 1}"
              },
              {
                "type": "template_literal",
                "name": "${context.targetLength || 8000}"
              },
              {
                "type": "template_literal",
                "name": "${context.genre || '指定なし'}"
              },
              {
                "type": "template_literal",
                "name": "${context.theme || '指定なし'}"
              },
              {
                "type": "template_literal",
                "name": "${context.worldSettings ? (typeof context.worldSettings === 'string' ? context.worldSettings : '世界設定あり') : '特定の設定はありません。自由に創造してください。'}"
              },
              {
                "type": "handlebars",
                "name": "{context.chapterNumber || 1}"
              },
              {
                "type": "handlebars",
                "name": "{context.targetLength || 8000}"
              },
              {
                "type": "handlebars",
                "name": "{context.genre || '指定なし'}"
              },
              {
                "type": "handlebars",
                "name": "{context.theme || '指定なし'}"
              },
              {
                "type": "handlebars",
                "name": "{context.worldSettings ? (typeof context.worldSettings === 'string' ? context.worldSettings : '世界設定あり') : '特定の設定はありません。自由に創造してください。'}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\generation\\prompt-generator copy.ts",
            "type": "template_literal",
            "content": "`).join('\\n')\n        : '登場人物は自由に創造してください。'}\n\n## ストーリーコンテキスト\n${context.storyContext || '特に指定はありません。自由に展開してください。'}\n\n## プロット要素\n${context.plotPoints && context.plotPoints.length > 0\n        ? context.plotPoints.map(p => `",
            "fullLength": 218,
            "variables": [
              {
                "type": "template_literal",
                "name": "${context.storyContext || '特に指定はありません。自由に展開してください。'}"
              },
              {
                "type": "handlebars",
                "name": "{context.storyContext || '特に指定はありません。自由に展開してください。'}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\generation\\prompt-generator copy.ts",
            "type": "template_literal",
            "content": "`\n      ## 保持すべき重要な事前イベント\n      ${this.formatter.formatEventSubsection(significantEvents.locationHistory, '現在の場所で起きた重要な出来事')}\n      ${this.formatter.formatEventSubsection(significantEvents.characterInteractions, '登場キャラクター間の重要な対話・対立歴')}\n      ${this.formatter.formatEventSubsection(significantEvents.warningsAndPromises, '守るべき約束・警告・ルール')}\n\n      ### 重要指示\n      - 上記の重要イベントとの整合性を必ず維持してください\n      - 特に警告や約束に関するイベントは、キャラクターが記憶しているはずです\n      - 同じ場所で類似イベントが起きる場合は、必ず過去の出来事を参照し言及してください\n      - 重要な警告や約束が破られる...",
            "fullLength": 656,
            "variables": [
              {
                "type": "template_literal",
                "name": "${this.formatter.formatEventSubsection(significantEvents.locationHistory, '現在の場所で起きた重要な出来事')}"
              },
              {
                "type": "template_literal",
                "name": "${this.formatter.formatEventSubsection(significantEvents.characterInteractions, '登場キャラクター間の重要な対話・対立歴')}"
              },
              {
                "type": "template_literal",
                "name": "${this.formatter.formatEventSubsection(significantEvents.warningsAndPromises, '守るべき約束・警告・ルール')}"
              },
              {
                "type": "handlebars",
                "name": "{this.formatter.formatEventSubsection(significantEvents.locationHistory, '現在の場所で起きた重要な出来事')}"
              },
              {
                "type": "handlebars",
                "name": "{this.formatter.formatEventSubsection(significantEvents.characterInteractions, '登場キャラクター間の重要な対話・対立歴')}"
              },
              {
                "type": "handlebars",
                "name": "{this.formatter.formatEventSubsection(significantEvents.warningsAndPromises, '守るべき約束・警告・ルール')}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\generation\\prompt-generator copy.ts",
            "type": "template_literal",
            "content": "`\n## 重要な執筆ガイドライン\n1. **変容と成長**: キャラクターの内面変化を通して読者に共感体験を提供する\n2. **体験的学習**: 概念を説明するのではなく、キャラクターの体験を通して読者が自然と学べるようにする\n3. **感情の旅**: 指定された感情アークに沿って読者を感情的な旅に連れていく\n4. **共感ポイント**: 指定された共感ポイントを効果的に描写し、読者の感情移入を促す\n5. **カタルシス**: 学びと感情が統合された瞬間を印象的に描く\n6. **自然な対話**: 教科書的な説明ではなく、自然な対話と内面描写で概念を表現する\n7. **具体的な場面**: 抽象的な概念を具体的なビジネスシーンで表現する\n`",
            "fullLength": 322,
            "variables": [],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\generation\\prompt-generator copy.ts",
            "type": "template_literal",
            "content": "`\n## 学びの物語ガイダンス\n・概念: ${conceptName}\n・学習段階: ${learningStage}\n\n### 体現化ガイド\n${embodimentGuide}\n\n## 共感ポイント\n${empatheticPoints}\n\n## 重要な執筆ガイドライン\n1. **変容と成長**: キャラクターの内面変化を通して読者に共感体験を提供する\n2. **体験的学習**: 概念を説明するのではなく、キャラクターの体験を通して読者が自然と学べるようにする\n3. **感情の旅**: 指定された感情アークに沿って読者を感情的な旅に連れていく\n4. **共感ポイント**: 指定された共感ポイントを効果的に描写し、読者の感情移入を促す\n5. **カタルシス**: 学びと感情が統合された瞬間を印象的に描く\n6. **自然な対話**: 教科書的な説明ではなく、自然な対話と内面描写で概念を表現する\n7. **具体的な場面**: 抽象的な概念を具体的なビジネスシーンで表現する\n`",
            "fullLength": 443,
            "variables": [
              {
                "type": "template_literal",
                "name": "${conceptName}"
              },
              {
                "type": "template_literal",
                "name": "${learningStage}"
              },
              {
                "type": "template_literal",
                "name": "${embodimentGuide}"
              },
              {
                "type": "template_literal",
                "name": "${empatheticPoints}"
              },
              {
                "type": "handlebars",
                "name": "{conceptName}"
              },
              {
                "type": "handlebars",
                "name": "{learningStage}"
              },
              {
                "type": "handlebars",
                "name": "{embodimentGuide}"
              },
              {
                "type": "handlebars",
                "name": "{empatheticPoints}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\generation\\prompt-generator copy.ts",
            "type": "template_literal",
            "content": "`\n\n【出力形式】\n以下の形式で出力してください:\n\n---\ntitle: (章のタイトルをここに記入)\npov: (視点キャラクターをここに記入)\nlocation: (主な舞台をここに記入)\ntimeframe: (時間設定をここに記入)\nemotionalTone: (感情基調をここに記入)\nsummary: (章の要約を100文字程度でここに記入)\n---\n\n(ここから直接本文を書き始めてください。タグや見出しは使わずに、物語の本文を約${targetLength}文字以上書いてください。この本文セクションは次の「---」まで続きます)\n\n---\nscenes:\n  - title: (シーン1タイトル)\n    type: (INTRODUCTION/DEVELOPMENT/CLIMAX/RESOLUTION/TRANSITIONのいずれか)\n    characters: (登場キャラクター、カンマ区切り)\n    location: (場所)\n    summary: (シーンの要約)\n  - title: (シーン2タイトル)\n    type: (シーンタイプ)\n  ...",
            "fullLength": 621,
            "variables": [
              {
                "type": "template_literal",
                "name": "${targetLength}"
              },
              {
                "type": "handlebars",
                "name": "{targetLength}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 7
      },
      {
        "file": "src\\lib\\generation\\prompt-generator.ts",
        "line": 209,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "export class PromptGenerator {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 207,
            "content": "* 統合記憶階層システム対応プロンプト生成クラス（最適化完成版）",
            "isCurrent": false
          },
          {
            "line": 208,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 209,
            "content": "export class PromptGenerator {",
            "isCurrent": true
          },
          {
            "line": 210,
            "content": "private templateManager: TemplateManager;",
            "isCurrent": false
          },
          {
            "line": 211,
            "content": "private formatter: PromptFormatter;",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\prompt-generator.ts",
        "line": 255,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "logger.info('PromptGenerator ready for immediate use with optimized dependencies', {",
        "method": "SectionBuilder",
        "class": "unknown",
        "surrounding": [
          {
            "line": 253,
            "content": "this.loadTemplatesSync();",
            "isCurrent": false
          },
          {
            "line": 254,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 255,
            "content": "logger.info('PromptGenerator ready for immediate use with optimized dependencies', {",
            "isCurrent": true
          },
          {
            "line": 256,
            "content": "hasWorldSettingsManager: !!this.worldSettingsManager,",
            "isCurrent": false
          },
          {
            "line": 257,
            "content": "hasPlotManager: !!this.plotManager,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\prompt-generator.ts",
        "line": 1189,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "* PromptGeneratorの既存メソッドを置き換え",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 1187,
            "content": "/**",
            "isCurrent": false
          },
          {
            "line": 1188,
            "content": "* 🔧 ENHANCED: 統合検索結果からキャラクター情報を抽出（強化版）",
            "isCurrent": false
          },
          {
            "line": 1189,
            "content": "* PromptGeneratorの既存メソッドを置き換え",
            "isCurrent": true
          },
          {
            "line": 1190,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 1191,
            "content": "private async extractCharactersFromSearchResults(",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\generation\\prompt-generator.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\generation\\prompt-generator.ts",
            "type": "template_literal",
            "content": "`# 【小説生成指示】\n## 基本情報\n- 章番号: {chapterNumber}/{totalChapters}\n- 目標文字数: {targetLength}文字程度\n- 語り口調: {narrativeStyle}\n- トーン: {tone}\n- テーマ: {theme}\n- ジャンル: {genre}\n\n## 前章の状況（直接続きを書いてください）\n{previousChapterEnding}\n\n## 展開指示（必ず遵守してください）\n- この章の目的: {chapterPurpose}\n- 達成すべきプロット要素: {requiredPlotPoints}\n- 章の終わり方方針: {chapterEndingGuidance}\n\n## 表現指標\n- テンションレベル: {tensionLevel} ({tensionDescription})\n- ペーシングレベル: {pacingLevel} ({pacingDescription})\n\n## 世界設定\n{worldSettings}\n\n## 登場人物\n{characters}\n\n## 物語の文脈\n{storyConte...",
            "fullLength": 1004,
            "variables": [
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{totalChapters}"
              },
              {
                "type": "handlebars",
                "name": "{targetLength}"
              },
              {
                "type": "handlebars",
                "name": "{narrativeStyle}"
              },
              {
                "type": "handlebars",
                "name": "{tone}"
              },
              {
                "type": "handlebars",
                "name": "{theme}"
              },
              {
                "type": "handlebars",
                "name": "{genre}"
              },
              {
                "type": "handlebars",
                "name": "{previousChapterEnding}"
              },
              {
                "type": "handlebars",
                "name": "{chapterPurpose}"
              },
              {
                "type": "handlebars",
                "name": "{requiredPlotPoints}"
              },
              {
                "type": "handlebars",
                "name": "{chapterEndingGuidance}"
              },
              {
                "type": "handlebars",
                "name": "{tensionLevel}"
              },
              {
                "type": "handlebars",
                "name": "{tensionDescription}"
              },
              {
                "type": "handlebars",
                "name": "{pacingLevel}"
              },
              {
                "type": "handlebars",
                "name": "{pacingDescription}"
              },
              {
                "type": "handlebars",
                "name": "{worldSettings}"
              },
              {
                "type": "handlebars",
                "name": "{characters}"
              },
              {
                "type": "handlebars",
                "name": "{storyContext}"
              },
              {
                "type": "handlebars",
                "name": "{focusCharacters}"
              },
              {
                "type": "handlebars",
                "name": "{foreshadowing}"
              },
              {
                "type": "handlebars",
                "name": "{narrativeStateGuidance}"
              },
              {
                "type": "handlebars",
                "name": "{contradictions}"
              },
              {
                "type": "handlebars",
                "name": "{previousSceneDescription}"
              },
              {
                "type": "handlebars",
                "name": "{characterPositions}"
              },
              {
                "type": "handlebars",
                "name": "{timeElapsed}"
              },
              {
                "type": "handlebars",
                "name": "{currentLocation}"
              },
              {
                "type": "handlebars",
                "name": "{targetLength}"
              },
              {
                "type": "handlebars",
                "name": "{narrativeStyle}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\generation\\prompt-generator.ts",
            "type": "template_literal",
            "content": "`\n# 小説生成指示\n- 章番号: ${context.chapterNumber || 1}\n- 目標文字数: ${context.targetLength || 8000}文字程度\n- ジャンル: ${context.genre || '指定なし'}\n- テーマ: ${context.theme || '指定なし'}\n\n## 設定\n${context.worldSettings ? (typeof context.worldSettings === 'string' ? context.worldSettings : '世界設定あり') : '特定の設定はありません。自由に創造してください。'}\n\n## 登場人物\n${context.characters && context.characters.length > 0\n        ? context.characters.map(c => `",
            "fullLength": 406,
            "variables": [
              {
                "type": "template_literal",
                "name": "${context.chapterNumber || 1}"
              },
              {
                "type": "template_literal",
                "name": "${context.targetLength || 8000}"
              },
              {
                "type": "template_literal",
                "name": "${context.genre || '指定なし'}"
              },
              {
                "type": "template_literal",
                "name": "${context.theme || '指定なし'}"
              },
              {
                "type": "template_literal",
                "name": "${context.worldSettings ? (typeof context.worldSettings === 'string' ? context.worldSettings : '世界設定あり') : '特定の設定はありません。自由に創造してください。'}"
              },
              {
                "type": "handlebars",
                "name": "{context.chapterNumber || 1}"
              },
              {
                "type": "handlebars",
                "name": "{context.targetLength || 8000}"
              },
              {
                "type": "handlebars",
                "name": "{context.genre || '指定なし'}"
              },
              {
                "type": "handlebars",
                "name": "{context.theme || '指定なし'}"
              },
              {
                "type": "handlebars",
                "name": "{context.worldSettings ? (typeof context.worldSettings === 'string' ? context.worldSettings : '世界設定あり') : '特定の設定はありません。自由に創造してください。'}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\generation\\prompt-generator.ts",
            "type": "template_literal",
            "content": "`).join('\\n')\n        : '登場人物は自由に創造してください。'}\n\n## ストーリーコンテキスト\n${context.storyContext || '特に指定はありません。自由に展開してください。'}\n\n## プロット要素\n${context.plotPoints && context.plotPoints.length > 0\n        ? context.plotPoints.map(p => `",
            "fullLength": 218,
            "variables": [
              {
                "type": "template_literal",
                "name": "${context.storyContext || '特に指定はありません。自由に展開してください。'}"
              },
              {
                "type": "handlebars",
                "name": "{context.storyContext || '特に指定はありません。自由に展開してください。'}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\generation\\prompt-generator.ts",
            "type": "template_literal",
            "content": "`\n      ## 保持すべき重要な事前イベント\n      ${this.formatter.formatEventSubsection(significantEvents.locationHistory, '現在の場所で起きた重要な出来事')}\n      ${this.formatter.formatEventSubsection(significantEvents.characterInteractions, '登場キャラクター間の重要な対話・対立歴')}\n      ${this.formatter.formatEventSubsection(significantEvents.warningsAndPromises, '守るべき約束・警告・ルール')}\n\n      ### 重要指示\n      - 上記の重要イベントとの整合性を必ず維持してください\n      - 特に警告や約束に関するイベントは、キャラクターが記憶しているはずです\n      - 同じ場所で類似イベントが起きる場合は、必ず過去の出来事を参照し言及してください\n      - 重要な警告や約束が破られる...",
            "fullLength": 656,
            "variables": [
              {
                "type": "template_literal",
                "name": "${this.formatter.formatEventSubsection(significantEvents.locationHistory, '現在の場所で起きた重要な出来事')}"
              },
              {
                "type": "template_literal",
                "name": "${this.formatter.formatEventSubsection(significantEvents.characterInteractions, '登場キャラクター間の重要な対話・対立歴')}"
              },
              {
                "type": "template_literal",
                "name": "${this.formatter.formatEventSubsection(significantEvents.warningsAndPromises, '守るべき約束・警告・ルール')}"
              },
              {
                "type": "handlebars",
                "name": "{this.formatter.formatEventSubsection(significantEvents.locationHistory, '現在の場所で起きた重要な出来事')}"
              },
              {
                "type": "handlebars",
                "name": "{this.formatter.formatEventSubsection(significantEvents.characterInteractions, '登場キャラクター間の重要な対話・対立歴')}"
              },
              {
                "type": "handlebars",
                "name": "{this.formatter.formatEventSubsection(significantEvents.warningsAndPromises, '守るべき約束・警告・ルール')}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\generation\\prompt-generator.ts",
            "type": "template_literal",
            "content": "`\n## 重要な執筆ガイドライン\n1. **変容と成長**: キャラクターの内面変化を通して読者に共感体験を提供する\n2. **体験的学習**: 概念を説明するのではなく、キャラクターの体験を通して読者が自然と学べるようにする\n3. **感情の旅**: 指定された感情アークに沿って読者を感情的な旅に連れていく\n4. **共感ポイント**: 指定された共感ポイントを効果的に描写し、読者の感情移入を促す\n5. **カタルシス**: 学びと感情が統合された瞬間を印象的に描く\n6. **自然な対話**: 教科書的な説明ではなく、自然な対話と内面描写で概念を表現する\n7. **具体的な場面**: 抽象的な概念を具体的なビジネスシーンで表現する\n`",
            "fullLength": 322,
            "variables": [],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\generation\\prompt-generator.ts",
            "type": "template_literal",
            "content": "`\n## 学びの物語ガイダンス\n・概念: ${conceptName}\n・学習段階: ${learningStage}\n\n### 体現化ガイド\n${embodimentGuide}\n\n## 共感ポイント\n${empatheticPoints}\n\n## 重要な執筆ガイドライン\n1. **変容と成長**: キャラクターの内面変化を通して読者に共感体験を提供する\n2. **体験的学習**: 概念を説明するのではなく、キャラクターの体験を通して読者が自然と学べるようにする\n3. **感情の旅**: 指定された感情アークに沿って読者を感情的な旅に連れていく\n4. **共感ポイント**: 指定された共感ポイントを効果的に描写し、読者の感情移入を促す\n5. **カタルシス**: 学びと感情が統合された瞬間を印象的に描く\n6. **自然な対話**: 教科書的な説明ではなく、自然な対話と内面描写で概念を表現する\n7. **具体的な場面**: 抽象的な概念を具体的なビジネスシーンで表現する\n`",
            "fullLength": 443,
            "variables": [
              {
                "type": "template_literal",
                "name": "${conceptName}"
              },
              {
                "type": "template_literal",
                "name": "${learningStage}"
              },
              {
                "type": "template_literal",
                "name": "${embodimentGuide}"
              },
              {
                "type": "template_literal",
                "name": "${empatheticPoints}"
              },
              {
                "type": "handlebars",
                "name": "{conceptName}"
              },
              {
                "type": "handlebars",
                "name": "{learningStage}"
              },
              {
                "type": "handlebars",
                "name": "{embodimentGuide}"
              },
              {
                "type": "handlebars",
                "name": "{empatheticPoints}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\generation\\prompt-generator.ts",
            "type": "template_literal",
            "content": "`\n\n【出力形式】\n以下の形式で出力してください:\n\n---\ntitle: (章のタイトルをここに記入)\npov: (視点キャラクターをここに記入)\nlocation: (主な舞台をここに記入)\ntimeframe: (時間設定をここに記入)\nemotionalTone: (感情基調をここに記入)\nsummary: (章の要約を100文字程度でここに記入)\n---\n\n(ここから直接本文を書き始めてください。タグや見出しは使わずに、物語の本文を約${targetLength}文字以上書いてください。この本文セクションは次の「---」まで続きます)\n\n---\nscenes:\n  - title: (シーン1タイトル)\n    type: (INTRODUCTION/DEVELOPMENT/CLIMAX/RESOLUTION/TRANSITIONのいずれか)\n    characters: (登場キャラクター、カンマ区切り)\n    location: (場所)\n    summary: (シーンの要約)\n  - title: (シーン2タイトル)\n    type: (シーンタイプ)\n  ...",
            "fullLength": 621,
            "variables": [
              {
                "type": "template_literal",
                "name": "${targetLength}"
              },
              {
                "type": "handlebars",
                "name": "{targetLength}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 7
      },
      {
        "file": "src\\lib\\learning-journey\\concept-learning-manager.ts",
        "line": 1102,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "const response = await this.geminiClient.generateText(prompt, { temperature: 0.1 });",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 1100,
            "content": "`;",
            "isCurrent": false
          },
          {
            "line": 1101,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 1102,
            "content": "const response = await this.geminiClient.generateText(prompt, { temperature: 0.1 });",
            "isCurrent": true
          },
          {
            "line": 1103,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 1104,
            "content": "// レスポンスから段階を抽出",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\concept-learning-manager.ts",
        "line": 1102,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const response = await this.geminiClient.generateText(prompt, { temperature: 0.1 });",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 1100,
            "content": "`;",
            "isCurrent": false
          },
          {
            "line": 1101,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 1102,
            "content": "const response = await this.geminiClient.generateText(prompt, { temperature: 0.1 });",
            "isCurrent": true
          },
          {
            "line": 1103,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 1104,
            "content": "// レスポンスから段階を抽出",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\concept-learning-manager.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\learning-journey\\concept-learning-manager.ts",
            "type": "template_literal",
            "content": "`Advanced learning stage for ${conceptName}: ${previousStage} -> ${nextStage} at chapter ${chapterNumber}`",
            "fullLength": 106,
            "variables": [
              {
                "type": "template_literal",
                "name": "${conceptName}"
              },
              {
                "type": "template_literal",
                "name": "${previousStage}"
              },
              {
                "type": "template_literal",
                "name": "${nextStage}"
              },
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{conceptName}"
              },
              {
                "type": "handlebars",
                "name": "{previousStage}"
              },
              {
                "type": "handlebars",
                "name": "{nextStage}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              }
            ],
            "purpose": "unknown"
          },
          {
            "file": "src\\lib\\learning-journey\\concept-learning-manager.ts",
            "type": "template_literal",
            "content": "`\nあなたは学習段階検出の専門家です。与えられた章の内容から、概念「${conceptName}」の理解が以下のどの段階にあるかを判断してください。\n\n章の内容:\n${chapterContent.substring(0, 5000)}...\n\n前回の学習段階: ${this.formatLearningStage(previousStage)}\n\n概念情報:\n- 名前: ${concept.name}\n- 説明: ${concept.description}\n- 主要原則: ${concept.keyPrinciples.join(', ')}\n\n${additionalContext}\n\n学習段階の説明:\n- 誤解段階 (MISCONCEPTION): 概念に対する誤解や限定的な理解の段階\n- 探索段階 (EXPLORATION): 新しい視点や可能性を探索し始める段階\n- 葛藤段階 (CONFLICT): 新旧の理解の間で葛藤する段階\n- 気づき段階 (INSIGHT): 概念の本質に気づく段階\n- 応用段階 (APPLICATION): 新しい理解を実践に移す段階\n- 統合段階...",
            "fullLength": 705,
            "variables": [
              {
                "type": "template_literal",
                "name": "${conceptName}"
              },
              {
                "type": "template_literal",
                "name": "${chapterContent.substring(0, 5000)}"
              },
              {
                "type": "template_literal",
                "name": "${this.formatLearningStage(previousStage)}"
              },
              {
                "type": "template_literal",
                "name": "${concept.name}"
              },
              {
                "type": "template_literal",
                "name": "${concept.description}"
              },
              {
                "type": "template_literal",
                "name": "${concept.keyPrinciples.join(', ')}"
              },
              {
                "type": "template_literal",
                "name": "${additionalContext}"
              },
              {
                "type": "handlebars",
                "name": "{conceptName}"
              },
              {
                "type": "handlebars",
                "name": "{chapterContent.substring(0, 5000)}"
              },
              {
                "type": "handlebars",
                "name": "{this.formatLearningStage(previousStage)}"
              },
              {
                "type": "handlebars",
                "name": "{concept.name}"
              },
              {
                "type": "handlebars",
                "name": "{concept.description}"
              },
              {
                "type": "handlebars",
                "name": "{concept.keyPrinciples.join(', ')}"
              },
              {
                "type": "handlebars",
                "name": "{additionalContext}"
              }
            ],
            "purpose": "unknown"
          }
        ],
        "count": 2
      },
      {
        "file": "src\\lib\\learning-journey\\concept-learning-manager.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 5
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\context-manager.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 7
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
        "line": 1030,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "return await this.geminiClient.generateText(prompt, options);",
        "method": "executeAIAnalysis",
        "class": "unknown",
        "surrounding": [
          {
            "line": 1028,
            "content": "private async executeAIAnalysis(prompt: string, options: any): Promise<string> {",
            "isCurrent": false
          },
          {
            "line": 1029,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 1030,
            "content": "return await this.geminiClient.generateText(prompt, options);",
            "isCurrent": true
          },
          {
            "line": 1031,
            "content": "} catch (error) {",
            "isCurrent": false
          },
          {
            "line": 1032,
            "content": "logger.error('AI analysis failed', { error });",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
        "line": 1030,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "return await this.geminiClient.generateText(prompt, options);",
        "method": "executeAIAnalysis",
        "class": "unknown",
        "surrounding": [
          {
            "line": 1028,
            "content": "private async executeAIAnalysis(prompt: string, options: any): Promise<string> {",
            "isCurrent": false
          },
          {
            "line": 1029,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 1030,
            "content": "return await this.geminiClient.generateText(prompt, options);",
            "isCurrent": true
          },
          {
            "line": 1031,
            "content": "} catch (error) {",
            "isCurrent": false
          },
          {
            "line": 1032,
            "content": "logger.error('AI analysis failed', { error });",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
        "line": 461,
        "category": "aiAnalysis",
        "pattern": "AI.*Analysis",
        "context": "const response = await this.executeAIAnalysis(prompt, {",
        "method": "createSynchronizationPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 459,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 460,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 461,
            "content": "const response = await this.executeAIAnalysis(prompt, {",
            "isCurrent": true
          },
          {
            "line": 462,
            "content": "temperature: 0.1,",
            "isCurrent": false
          },
          {
            "line": 463,
            "content": "responseFormat: 'json'",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
        "line": 543,
        "category": "aiAnalysis",
        "pattern": "AI.*Analysis",
        "context": "const response = await this.executeAIAnalysis(prompt, {",
        "method": "createEmpatheticPointsPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 541,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 542,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 543,
            "content": "const response = await this.executeAIAnalysis(prompt, {",
            "isCurrent": true
          },
          {
            "line": 544,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 545,
            "content": "responseFormat: 'json'",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
        "line": 605,
        "category": "aiAnalysis",
        "pattern": "AI.*Analysis",
        "context": "const response = await this.executeAIAnalysis(prompt, {",
        "method": "safeContentTruncation",
        "class": "unknown",
        "surrounding": [
          {
            "line": 603,
            "content": "const prompt = this.createEmotionAnalysisPrompt(truncatedContent, genre);",
            "isCurrent": false
          },
          {
            "line": 604,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 605,
            "content": "const response = await this.executeAIAnalysis(prompt, {",
            "isCurrent": true
          },
          {
            "line": 606,
            "content": "temperature: 0.1,",
            "isCurrent": false
          },
          {
            "line": 607,
            "content": "responseFormat: 'json'",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
        "line": 1028,
        "category": "aiAnalysis",
        "pattern": "AI.*Analysis",
        "context": "private async executeAIAnalysis(prompt: string, options: any): Promise<string> {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 1026,
            "content": "* @private",
            "isCurrent": false
          },
          {
            "line": 1027,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 1028,
            "content": "private async executeAIAnalysis(prompt: string, options: any): Promise<string> {",
            "isCurrent": true
          },
          {
            "line": 1029,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 1030,
            "content": "return await this.geminiClient.generateText(prompt, options);",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
            "type": "template_literal",
            "content": "`\nあなたは感情と学習の同期分析専門家です。\n以下の章内容において、感情的瞬間と学習ポイントの同期度を分析してください。\n\n# 章内容\n${content}\n\n# 概念情報\n・名前: ${conceptName}\n・学習段階: ${this.formatLearningStage(stage)}\n\n# 分析指示\n以下の指標について、0から1の範囲で客観的に評価してください:\n\n1. 感情ピークと学習ポイントの同期度 (peakSynchronization): 感情の高まりと認知的洞察の瞬間がどの程度一致しているか\n2. 感情変化と理解進展の一致度 (progressionAlignment): 感情の変化曲線と概念理解の深まりがどの程度並行しているか\n3. 感情的共鳴強度 (emotionalResonance): 読者がどの程度キャラクターの感情体験に共鳴できるか\n4. テーマと感情の統合度 (themeEmotionIntegration): 概念のテーマと感情表現がどの程度統合されているか\n5. カタルシス瞬間の効果 (catharticMomentEffect): 重要な気づ...",
            "fullLength": 745,
            "variables": [
              {
                "type": "template_literal",
                "name": "${content}"
              },
              {
                "type": "template_literal",
                "name": "${conceptName}"
              },
              {
                "type": "template_literal",
                "name": "${this.formatLearningStage(stage)}"
              },
              {
                "type": "handlebars",
                "name": "{content}"
              },
              {
                "type": "handlebars",
                "name": "{conceptName}"
              },
              {
                "type": "handlebars",
                "name": "{this.formatLearningStage(stage)}"
              },
              {
                "type": "handlebars",
                "name": "{\n  \"peakSynchronization\": 値,\n  \"progressionAlignment\": 値,\n  \"emotionalResonance\": 値,\n  \"themeEmotionIntegration\": 値,\n  \"catharticMomentEffect\": 値,\n  \"measurementConfidence\": 値\n}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
            "type": "template_literal",
            "content": "`\nあなたは物語の共感ポイント分析の専門家です。\n以下の章内容から、読者が強く共感できるポイントを抽出してください。\n\n# 章内容\n${content}\n\n# 概念情報\n・名前: ${conceptName}\n・学習段階: ${this.formatLearningStage(stage)}\n\n# 分析指示\n読者が共感しやすい瞬間を5つ抽出し、以下の情報を提供してください：\n1. タイプ: character（キャラクターの内面）、situation（状況）、decision（決断）、realization（気づき）、transformation（変容）のいずれか\n2. 位置: 章内での相対位置（0-1の数値、冒頭が0、結末が1）\n3. 強度: 共感の強さ（0-1の数値）\n4. 説明: 共感ポイントの簡潔な説明\n\nJSON形式で出力してください：\n{\n  \"points\": [\n    {\n      \"type\": \"タイプ\",\n      \"position\": 位置,\n      \"intensity\": 強度,\n      \"description\": \"説明\"\n    },\n...",
            "fullLength": 515,
            "variables": [
              {
                "type": "template_literal",
                "name": "${content}"
              },
              {
                "type": "template_literal",
                "name": "${conceptName}"
              },
              {
                "type": "template_literal",
                "name": "${this.formatLearningStage(stage)}"
              },
              {
                "type": "handlebars",
                "name": "{content}"
              },
              {
                "type": "handlebars",
                "name": "{conceptName}"
              },
              {
                "type": "handlebars",
                "name": "{this.formatLearningStage(stage)}"
              },
              {
                "type": "handlebars",
                "name": "{\n  \"points\": [\n    {\n      \"type\": \"タイプ\",\n      \"position\": 位置,\n      \"intensity\": 強度,\n      \"description\": \"説明\"\n    }"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
            "type": "template_literal",
            "content": "`\nあなたは物語の感情分析の専門家です。\n以下の章内容を分析し、感情的特徴を抽出してください。\n\n# 章内容\n${content}\n\n# ジャンル\n${genre}\n\n# 分析指示\n以下の情報を提供してください：\n1. 全体のトーン\n2. 感情的影響力 (1-10の数値)\n3. 主要な感情次元の変化\n\nJSON形式で出力してください：\n{\n  \"overallTone\": \"全体のトーン\",\n  \"emotionalImpact\": 感情的影響力,\n  \"emotionalDimensions\": {\n    \"hopeVsDespair\": {\"start\": 値, \"middle\": 値, \"end\": 値},\n    \"comfortVsTension\": {\"start\": 値, \"middle\": 値, \"end\": 値},\n    \"joyVsSadness\": {\"start\": 値, \"middle\": 値, \"end\": 値}\n  }\n}\n`",
            "fullLength": 436,
            "variables": [
              {
                "type": "template_literal",
                "name": "${content}"
              },
              {
                "type": "template_literal",
                "name": "${genre}"
              },
              {
                "type": "handlebars",
                "name": "{content}"
              },
              {
                "type": "handlebars",
                "name": "{genre}"
              },
              {
                "type": "handlebars",
                "name": "{\n  \"overallTone\": \"全体のトーン\",\n  \"emotionalImpact\": 感情的影響力,\n  \"emotionalDimensions\": {\n    \"hopeVsDespair\": {\"start\": 値, \"middle\": 値, \"end\": 値}"
              },
              {
                "type": "handlebars",
                "name": "{\"start\": 値, \"middle\": 値, \"end\": 値}"
              },
              {
                "type": "handlebars",
                "name": "{\"start\": 値, \"middle\": 値, \"end\": 値}"
              }
            ],
            "purpose": "story_generation"
          }
        ],
        "count": 3
      },
      {
        "file": "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 7
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\event-bus.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 3
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\index.ts",
        "line": 1225,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "const summary = await this.geminiClient.generateText(prompt, {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 1223,
            "content": "`;",
            "isCurrent": false
          },
          {
            "line": 1224,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 1225,
            "content": "const summary = await this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 1226,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 1227,
            "content": "targetLength: 300",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\index.ts",
        "line": 1225,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const summary = await this.geminiClient.generateText(prompt, {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 1223,
            "content": "`;",
            "isCurrent": false
          },
          {
            "line": 1224,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 1225,
            "content": "const summary = await this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 1226,
            "content": "temperature: 0.3,",
            "isCurrent": false
          },
          {
            "line": 1227,
            "content": "targetLength: 300",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\index.ts",
        "line": 42,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "PromptGenerator,",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 40,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 41,
            "content": "export {",
            "isCurrent": false
          },
          {
            "line": 42,
            "content": "PromptGenerator,",
            "isCurrent": true
          },
          {
            "line": 43,
            "content": "PromptType,",
            "isCurrent": false
          },
          {
            "line": 44,
            "content": "type ChapterGenerationOptions,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\index.ts",
        "line": 61,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "import { PromptGenerator } from './prompt-generator';",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 59,
            "content": "import { EmotionalLearningIntegrator } from './emotional-learning-integrator';",
            "isCurrent": false
          },
          {
            "line": 60,
            "content": "import { ContextManager } from './context-manager';",
            "isCurrent": false
          },
          {
            "line": 61,
            "content": "import { PromptGenerator } from './prompt-generator';",
            "isCurrent": true
          },
          {
            "line": 62,
            "content": "import { EventBus, eventBus } from './event-bus';",
            "isCurrent": false
          },
          {
            "line": 63,
            "content": "import { MemoryManager } from '@/lib/memory/core/memory-manager';",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\index.ts",
        "line": 175,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "private promptGenerator!: PromptGenerator;",
        "method": "unknown",
        "class": "LearningJourneySystem",
        "surrounding": [
          {
            "line": 173,
            "content": "private emotionalIntegrator!: EmotionalLearningIntegrator;",
            "isCurrent": false
          },
          {
            "line": 174,
            "content": "private contextManager!: ContextManager;",
            "isCurrent": false
          },
          {
            "line": 175,
            "content": "private promptGenerator!: PromptGenerator;",
            "isCurrent": true
          },
          {
            "line": 176,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 177,
            "content": "// 状態管理",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\index.ts",
        "line": 428,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "// PromptGenerator",
        "method": "ContextManager",
        "class": "unknown",
        "surrounding": [
          {
            "line": 426,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 427,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 428,
            "content": "// PromptGenerator",
            "isCurrent": true
          },
          {
            "line": 429,
            "content": "this.promptGenerator = new PromptGenerator(eventBus);",
            "isCurrent": false
          },
          {
            "line": 430,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\index.ts",
        "line": 429,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "this.promptGenerator = new PromptGenerator(eventBus);",
        "method": "ntextManager",
        "class": "unknown",
        "surrounding": [
          {
            "line": 427,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 428,
            "content": "// PromptGenerator",
            "isCurrent": false
          },
          {
            "line": 429,
            "content": "this.promptGenerator = new PromptGenerator(eventBus);",
            "isCurrent": true
          },
          {
            "line": 430,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 431,
            "content": "logger.debug('All components created successfully');",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\index.ts",
        "line": 1611,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "get prompt(): PromptGenerator {",
        "method": "prompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 1609,
            "content": "}",
            "isCurrent": false
          },
          {
            "line": 1610,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 1611,
            "content": "get prompt(): PromptGenerator {",
            "isCurrent": true
          },
          {
            "line": 1612,
            "content": "this.ensureInitialized();",
            "isCurrent": false
          },
          {
            "line": 1613,
            "content": "if (!this.componentStatus.promptGenerator.functional) {",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\index.ts",
        "line": 1614,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "throw new Error('PromptGenerator is not functional');",
        "method": "prompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 1612,
            "content": "this.ensureInitialized();",
            "isCurrent": false
          },
          {
            "line": 1613,
            "content": "if (!this.componentStatus.promptGenerator.functional) {",
            "isCurrent": false
          },
          {
            "line": 1614,
            "content": "throw new Error('PromptGenerator is not functional');",
            "isCurrent": true
          },
          {
            "line": 1615,
            "content": "}",
            "isCurrent": false
          },
          {
            "line": 1616,
            "content": "return this.promptGenerator;",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\index.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\learning-journey\\index.ts",
            "type": "template_literal",
            "content": "`\n以下の章内容を200〜300文字程度で簡潔に要約してください。\nストーリーの流れ、主要な出来事、キャラクターの変化、学びのポイントを含めてください。\n\n章内容:\n${truncatedContent}\n\n要約:\n`",
            "fullLength": 109,
            "variables": [
              {
                "type": "template_literal",
                "name": "${truncatedContent}"
              },
              {
                "type": "handlebars",
                "name": "{truncatedContent}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\learning-journey\\index.ts",
            "type": "template_literal",
            "content": "`\nあなたは「魂のこもった学びの物語」を創作するAI執筆者です。\n\n# 第${chapterNumber}章\n\n## 執筆ガイドライン\n1. キャラクターの内面変化を通して読者に共感体験を提供する\n2. ビジネス概念を説明するのではなく、キャラクターの体験を通して読者が自然と学べるようにする\n3. 感情と学びが融合した物語を創る\n\n第${chapterNumber}章の内容を執筆してください。\n`",
            "fullLength": 200,
            "variables": [
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 2
      },
      {
        "file": "src\\lib\\learning-journey\\index.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 5
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\prompt-generator.ts",
        "line": 69,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "* @class PromptGenerator",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 67,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 68,
            "content": "/**",
            "isCurrent": false
          },
          {
            "line": 69,
            "content": "* @class PromptGenerator",
            "isCurrent": true
          },
          {
            "line": 70,
            "content": "* @description",
            "isCurrent": false
          },
          {
            "line": 71,
            "content": "* 生成エンジン用のプロンプトを作成するクラス。",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\prompt-generator.ts",
        "line": 73,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "export class PromptGenerator {",
        "method": "unknown",
        "class": "PromptGenerator",
        "surrounding": [
          {
            "line": 71,
            "content": "* 生成エンジン用のプロンプトを作成するクラス。",
            "isCurrent": false
          },
          {
            "line": 72,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 73,
            "content": "export class PromptGenerator {",
            "isCurrent": true
          },
          {
            "line": 74,
            "content": "private initialized: boolean = false;",
            "isCurrent": false
          },
          {
            "line": 75,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\prompt-generator.ts",
        "line": 83,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "logger.info('PromptGenerator created');",
        "method": "constructor",
        "class": "PromptGenerator",
        "surrounding": [
          {
            "line": 81,
            "content": "private eventBus: EventBus",
            "isCurrent": false
          },
          {
            "line": 82,
            "content": ") {",
            "isCurrent": false
          },
          {
            "line": 83,
            "content": "logger.info('PromptGenerator created');",
            "isCurrent": true
          },
          {
            "line": 84,
            "content": "}",
            "isCurrent": false
          },
          {
            "line": 85,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\prompt-generator.ts",
        "line": 91,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "logger.info('PromptGenerator already initialized');",
        "method": "initialize",
        "class": "PromptGenerator",
        "surrounding": [
          {
            "line": 89,
            "content": "initialize(): void {",
            "isCurrent": false
          },
          {
            "line": 90,
            "content": "if (this.initialized) {",
            "isCurrent": false
          },
          {
            "line": 91,
            "content": "logger.info('PromptGenerator already initialized');",
            "isCurrent": true
          },
          {
            "line": 92,
            "content": "return;",
            "isCurrent": false
          },
          {
            "line": 93,
            "content": "}",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\prompt-generator.ts",
        "line": 96,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "logger.info('PromptGenerator initialized');",
        "method": "unknown",
        "class": "PromptGenerator",
        "surrounding": [
          {
            "line": 94,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 95,
            "content": "this.initialized = true;",
            "isCurrent": false
          },
          {
            "line": 96,
            "content": "logger.info('PromptGenerator initialized');",
            "isCurrent": true
          },
          {
            "line": 97,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 98,
            "content": "// 初期化完了イベント発行",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\prompt-generator.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\learning-journey\\prompt-generator.ts",
            "type": "template_literal",
            "content": "`## 感情設計\\n・全体トーン: ${options.emotionalArc.recommendedTone}\\n・感情の変化: 始まり（${this.formatEmotionalDimensions(options.emotionalArc.emotionalJourney.opening)}）→ 展開（${this.formatEmotionalDimensions(options.emotionalArc.emotionalJourney.development)}）→ 結末（${this.formatEmotionalDimensions(options.emotionalArc.emotionalJourney.conclusion)}）`",
            "fullLength": 332,
            "variables": [
              {
                "type": "template_literal",
                "name": "${options.emotionalArc.recommendedTone}"
              },
              {
                "type": "template_literal",
                "name": "${this.formatEmotionalDimensions(options.emotionalArc.emotionalJourney.opening)}"
              },
              {
                "type": "template_literal",
                "name": "${this.formatEmotionalDimensions(options.emotionalArc.emotionalJourney.development)}"
              },
              {
                "type": "template_literal",
                "name": "${this.formatEmotionalDimensions(options.emotionalArc.emotionalJourney.conclusion)}"
              },
              {
                "type": "handlebars",
                "name": "{options.emotionalArc.recommendedTone}"
              },
              {
                "type": "handlebars",
                "name": "{this.formatEmotionalDimensions(options.emotionalArc.emotionalJourney.opening)}"
              },
              {
                "type": "handlebars",
                "name": "{this.formatEmotionalDimensions(options.emotionalArc.emotionalJourney.development)}"
              },
              {
                "type": "handlebars",
                "name": "{this.formatEmotionalDimensions(options.emotionalArc.emotionalJourney.conclusion)}"
              }
            ],
            "purpose": "emotional_analysis"
          },
          {
            "file": "src\\lib\\learning-journey\\prompt-generator.ts",
            "type": "template_literal",
            "content": "`\r\nあなたは「魂のこもった学びの物語」を創作するAI執筆者です。\r\nビジネス小説を通して、感動的な体験とビジネス概念の深い理解を同時に提供してください。\r\n\r\n${titlePart}\r\n\r\n## 概念と学習段階\r\n・概念名: ${options.conceptName}\r\n・学習段階: ${learningStageDescription}\r\n\r\n${previousChapterPart}\r\n\r\n${emotionalArcPart}\r\n\r\n${catharticPart}\r\n\r\n${sceneRecommendationsPart}\r\n\r\n${empatheticPointsPart}\r\n\r\n${charactersPart}\r\n\r\n${memoriesPart}\r\n\r\n${lengthPart}\r\n\r\n## 重要な執筆ガイドライン\r\n1. **変容と成長**: キャラクターの内面変化を通して読者に共感体験を提供する\r\n2. **体験的学習**: 概念を説明するのではなく、キャラクターの体験を通して読者が自然と学べるようにする\r\n3. **感情の旅**: 指定された感情アークに...",
            "fullLength": 740,
            "variables": [
              {
                "type": "template_literal",
                "name": "${titlePart}"
              },
              {
                "type": "template_literal",
                "name": "${options.conceptName}"
              },
              {
                "type": "template_literal",
                "name": "${learningStageDescription}"
              },
              {
                "type": "template_literal",
                "name": "${previousChapterPart}"
              },
              {
                "type": "template_literal",
                "name": "${emotionalArcPart}"
              },
              {
                "type": "template_literal",
                "name": "${catharticPart}"
              },
              {
                "type": "template_literal",
                "name": "${sceneRecommendationsPart}"
              },
              {
                "type": "template_literal",
                "name": "${empatheticPointsPart}"
              },
              {
                "type": "template_literal",
                "name": "${charactersPart}"
              },
              {
                "type": "template_literal",
                "name": "${memoriesPart}"
              },
              {
                "type": "template_literal",
                "name": "${lengthPart}"
              },
              {
                "type": "template_literal",
                "name": "${options.chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{titlePart}"
              },
              {
                "type": "handlebars",
                "name": "{options.conceptName}"
              },
              {
                "type": "handlebars",
                "name": "{learningStageDescription}"
              },
              {
                "type": "handlebars",
                "name": "{previousChapterPart}"
              },
              {
                "type": "handlebars",
                "name": "{emotionalArcPart}"
              },
              {
                "type": "handlebars",
                "name": "{catharticPart}"
              },
              {
                "type": "handlebars",
                "name": "{sceneRecommendationsPart}"
              },
              {
                "type": "handlebars",
                "name": "{empatheticPointsPart}"
              },
              {
                "type": "handlebars",
                "name": "{charactersPart}"
              },
              {
                "type": "handlebars",
                "name": "{memoriesPart}"
              },
              {
                "type": "handlebars",
                "name": "{lengthPart}"
              },
              {
                "type": "handlebars",
                "name": "{options.chapterNumber}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\learning-journey\\prompt-generator.ts",
            "type": "template_literal",
            "content": "`\r\nあなたは自然で魅力的な対話を生成するAI執筆者です。\r\n以下の条件に基づいて、リアルで感情豊かな対話を生成してください。\r\n\r\n## 対話文脈\r\n${options.context}\r\n\r\n${charactersPart}\r\n\r\n${emotionalStatesPart}\r\n\r\n${learningPart}\r\n\r\n${goalPart}\r\n\r\n${stylePart}\r\n\r\n## 対話生成のガイドライン\r\n1. **自然な話し方**: 各キャラクターの個性や状況に合った自然な対話にする\r\n2. **感情の表現**: 指定された感情状態を対話に反映させる\r\n3. **内面と表面**: 本音と建前、言葉と行動の微妙なギャップを表現する\r\n4. **学びの要素**: 学習要素が指定されている場合、それを説教的でなく自然に対話に織り込む\r\n5. **対話の流れ**: 一貫性のある流れを持った対話にする\r\n\r\n対話のみを生成してください（地の文は含めないこと）。\r\n`",
            "fullLength": 441,
            "variables": [
              {
                "type": "template_literal",
                "name": "${options.context}"
              },
              {
                "type": "template_literal",
                "name": "${charactersPart}"
              },
              {
                "type": "template_literal",
                "name": "${emotionalStatesPart}"
              },
              {
                "type": "template_literal",
                "name": "${learningPart}"
              },
              {
                "type": "template_literal",
                "name": "${goalPart}"
              },
              {
                "type": "template_literal",
                "name": "${stylePart}"
              },
              {
                "type": "handlebars",
                "name": "{options.context}"
              },
              {
                "type": "handlebars",
                "name": "{charactersPart}"
              },
              {
                "type": "handlebars",
                "name": "{emotionalStatesPart}"
              },
              {
                "type": "handlebars",
                "name": "{learningPart}"
              },
              {
                "type": "handlebars",
                "name": "{goalPart}"
              },
              {
                "type": "handlebars",
                "name": "{stylePart}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\learning-journey\\prompt-generator.ts",
            "type": "template_literal",
            "content": "`\r\nあなたは自然で魅力的な対話を生成するAI執筆者です。\r\n以下の文脈に基づいて、登場人物間の対話を生成してください。\r\n\r\n## 対話文脈\r\n${options.context}\r\n\r\n## 登場キャラクター\r\n${options.characters.join('、')}\r\n\r\n自然で魅力的な対話のみを生成してください。\r\n`",
            "fullLength": 167,
            "variables": [
              {
                "type": "template_literal",
                "name": "${options.context}"
              },
              {
                "type": "template_literal",
                "name": "${options.characters.join('、')}"
              },
              {
                "type": "handlebars",
                "name": "{options.context}"
              },
              {
                "type": "handlebars",
                "name": "{options.characters.join('、')}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\learning-journey\\prompt-generator.ts",
            "type": "template_literal",
            "content": "`\r\nあなたは内面描写の専門家であるAI執筆者です。\r\n以下の条件に基づいて、キャラクターの深い内面モノローグを生成してください。\r\n\r\n## キャラクター\r\n${character}\r\n\r\n## 文脈\r\n${context}\r\n\r\n${emotionalStatePart}\r\n\r\n${conceptPart}\r\n\r\n## 内面描写のガイドライン\r\n1. **思考の流れ**: 論理的な思考の流れだけでなく、感情的な揺れも表現する\r\n2. **矛盾と葛藤**: 内面の矛盾や葛藤を豊かに表現する\r\n3. **感情の機微**: 微妙な感情の機微や変化を丁寧に描く\r\n4. **思考と感情の融合**: 理性的な思考と感情的な反応の絡み合いを表現する\r\n5. **心理描写の深さ**: 表面的な気持ちだけでなく、深層心理も描写する\r\n\r\nキャラクターの内面モノローグのみを生成してください。一人称視点で、心の中の声として表現してください。\r\n`",
            "fullLength": 420,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character}"
              },
              {
                "type": "template_literal",
                "name": "${context}"
              },
              {
                "type": "template_literal",
                "name": "${emotionalStatePart}"
              },
              {
                "type": "template_literal",
                "name": "${conceptPart}"
              },
              {
                "type": "handlebars",
                "name": "{character}"
              },
              {
                "type": "handlebars",
                "name": "{context}"
              },
              {
                "type": "handlebars",
                "name": "{emotionalStatePart}"
              },
              {
                "type": "handlebars",
                "name": "{conceptPart}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\learning-journey\\prompt-generator.ts",
            "type": "template_literal",
            "content": "`\r\nあなたは内面描写の専門家です。\r\nキャラクター「${character}」の以下の文脈における内面モノローグを生成してください。\r\n\r\n## 文脈\r\n${context}\r\n\r\nキャラクターの内面モノローグを一人称視点で生成してください。\r\n`",
            "fullLength": 125,
            "variables": [
              {
                "type": "template_literal",
                "name": "${character}"
              },
              {
                "type": "template_literal",
                "name": "${context}"
              },
              {
                "type": "handlebars",
                "name": "{character}"
              },
              {
                "type": "handlebars",
                "name": "{context}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\learning-journey\\prompt-generator.ts",
            "type": "template_literal",
            "content": "`\r\nあなたは「魂のこもった学びの物語」を創作するAI執筆者です。\r\n以下の条件に基づいて、キャラクターが重要な学びを得る場面を生成してください。\r\n\r\n## 概念と学習段階\r\n・概念名: ${conceptName}\r\n・学習段階: ${learningStageDescription}\r\n\r\n## 状況文脈\r\n${situationContext}\r\n\r\n## キャラクター\r\n${characterName}\r\n\r\n## 洞察生成のガイドライン\r\n1. **自然な気づき**: 概念についての説明ではなく、キャラクターが自然に気づく瞬間を描く\r\n2. **感情との融合**: 学びと感情が融合した体験を表現する\r\n3. **具体から抽象へ**: 具体的な体験から抽象的な概念への理解の橋渡しを表現\r\n4. **内面の変化**: 概念理解によるキャラクターの内面変化を描写する\r\n5. **段階に応じた描写**: 指定された学習段階に適した洞察の深さと表現にする\r\n\r\nシーン全体を300〜500文字程度で生成してください。キャラクターの内面描写と対話（必要な場合）を含めてください。\r\n`",
            "fullLength": 498,
            "variables": [
              {
                "type": "template_literal",
                "name": "${conceptName}"
              },
              {
                "type": "template_literal",
                "name": "${learningStageDescription}"
              },
              {
                "type": "template_literal",
                "name": "${situationContext}"
              },
              {
                "type": "template_literal",
                "name": "${characterName}"
              },
              {
                "type": "handlebars",
                "name": "{conceptName}"
              },
              {
                "type": "handlebars",
                "name": "{learningStageDescription}"
              },
              {
                "type": "handlebars",
                "name": "{situationContext}"
              },
              {
                "type": "handlebars",
                "name": "{characterName}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\learning-journey\\prompt-generator.ts",
            "type": "template_literal",
            "content": "`\r\nキャラクター「${characterName}」が概念「${conceptName}」について重要な気づきを得る場面を生成してください。\r\n学習段階は「${this.formatLearningStage(learningStage)}段階」です。\r\n\r\n## 状況文脈\r\n${situationContext}\r\n\r\n300〜500文字程度のシーンを生成してください。\r\n`",
            "fullLength": 191,
            "variables": [
              {
                "type": "template_literal",
                "name": "${characterName}"
              },
              {
                "type": "template_literal",
                "name": "${conceptName}"
              },
              {
                "type": "template_literal",
                "name": "${this.formatLearningStage(learningStage)}"
              },
              {
                "type": "template_literal",
                "name": "${situationContext}"
              },
              {
                "type": "handlebars",
                "name": "{characterName}"
              },
              {
                "type": "handlebars",
                "name": "{conceptName}"
              },
              {
                "type": "handlebars",
                "name": "{this.formatLearningStage(learningStage)}"
              },
              {
                "type": "handlebars",
                "name": "{situationContext}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\learning-journey\\prompt-generator.ts",
            "type": "template_literal",
            "content": "` : ''}\r\n\r\n## 概念と学習段階\r\n・概念名: ${options.conceptName}\r\n・学習段階: ${this.formatLearningStage(options.learningStage)}段階\r\n\r\n## 執筆ガイドライン\r\n1. キャラクターの内面変化を通して読者に共感体験を提供する\r\n2. 概念を説明するのではなく、キャラクターの体験を通して読者が自然と学べるようにする\r\n3. 感情と学びが融合した物語を創る\r\n\r\n第${options.chapterNumber}章の内容を執筆してください。\r\n`",
            "fullLength": 270,
            "variables": [
              {
                "type": "template_literal",
                "name": "${options.conceptName}"
              },
              {
                "type": "template_literal",
                "name": "${this.formatLearningStage(options.learningStage)}"
              },
              {
                "type": "template_literal",
                "name": "${options.chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{options.conceptName}"
              },
              {
                "type": "handlebars",
                "name": "{this.formatLearningStage(options.learningStage)}"
              },
              {
                "type": "handlebars",
                "name": "{options.chapterNumber}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 9
      },
      {
        "file": "src\\lib\\learning-journey\\prompt-generator.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\lib\\learning-journey\\story-transformation-designer.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\learning-journey\\story-transformation-designer.ts",
            "type": "template_literal",
            "content": "`テンションレベルを${Math.round(tensionRecommendation.recommendedTension * 10)}に設定し、${tensionRecommendation.direction}の方向性を持たせてください`",
            "fullLength": 123,
            "variables": [
              {
                "type": "template_literal",
                "name": "${Math.round(tensionRecommendation.recommendedTension * 10)}"
              },
              {
                "type": "template_literal",
                "name": "${tensionRecommendation.direction}"
              },
              {
                "type": "handlebars",
                "name": "{Math.round(tensionRecommendation.recommendedTension * 10)}"
              },
              {
                "type": "handlebars",
                "name": "{tensionRecommendation.direction}"
              }
            ],
            "purpose": "tension_pacing"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\learning-journey\\story-transformation-designer.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 7
          }
        ]
      },
      {
        "file": "src\\lib\\lifecycle\\application-lifecycle-manager.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\lifecycle\\service-container copy 2.ts",
        "line": 193,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "return new GeminiClient();",
        "method": "import",
        "class": "unknown",
        "surrounding": [
          {
            "line": 191,
            "content": "this.register('geminiClient', async () => {",
            "isCurrent": false
          },
          {
            "line": 192,
            "content": "const { GeminiClient } = await import('@/lib/generation/gemini-client');",
            "isCurrent": false
          },
          {
            "line": 193,
            "content": "return new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 194,
            "content": "}, ServiceLifecycle.SINGLETON);",
            "isCurrent": false
          },
          {
            "line": 195,
            "content": "}",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\lifecycle\\service-container copy 2.ts",
        "line": 250,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "const { PromptGenerator } = await import('@/lib/generation/prompt-generator');",
        "method": "import",
        "class": "unknown",
        "surrounding": [
          {
            "line": 248,
            "content": "const { NovelGenerationEngine } = await import('@/lib/generation/engine');",
            "isCurrent": false
          },
          {
            "line": 249,
            "content": "const { ChapterGenerator } = await import('@/lib/generation/engine/chapter-generator');",
            "isCurrent": false
          },
          {
            "line": 250,
            "content": "const { PromptGenerator } = await import('@/lib/generation/prompt-generator');",
            "isCurrent": true
          },
          {
            "line": 251,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 252,
            "content": "// 型安全な依存関係解決",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\lifecycle\\service-container copy 2.ts",
        "line": 259,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "const promptGenerator = new PromptGenerator(",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 257,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 258,
            "content": "// 🔥 CharacterManagerを含む完全な依存関係注入",
            "isCurrent": false
          },
          {
            "line": 259,
            "content": "const promptGenerator = new PromptGenerator(",
            "isCurrent": true
          },
          {
            "line": 260,
            "content": "memoryManager,",
            "isCurrent": false
          },
          {
            "line": 261,
            "content": "undefined, // worldSettingsManager: PlotManager経由でアクセス",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\lifecycle\\service-container copy 2.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "yamlOutput",
            "count": 3
          }
        ]
      },
      {
        "file": "src\\lib\\lifecycle\\service-container copy 3.ts",
        "line": 193,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "return new GeminiClient();",
        "method": "import",
        "class": "unknown",
        "surrounding": [
          {
            "line": 191,
            "content": "this.register('geminiClient', async () => {",
            "isCurrent": false
          },
          {
            "line": 192,
            "content": "const { GeminiClient } = await import('@/lib/generation/gemini-client');",
            "isCurrent": false
          },
          {
            "line": 193,
            "content": "return new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 194,
            "content": "}, ServiceLifecycle.SINGLETON);",
            "isCurrent": false
          },
          {
            "line": 195,
            "content": "}",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\lifecycle\\service-container copy 3.ts",
        "line": 247,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "const { PromptGenerator } = await import('@/lib/generation/prompt-generator');",
        "method": "import",
        "class": "unknown",
        "surrounding": [
          {
            "line": 245,
            "content": "const { NovelGenerationEngine } = await import('@/lib/generation/engine');",
            "isCurrent": false
          },
          {
            "line": 246,
            "content": "const { ChapterGenerator } = await import('@/lib/generation/engine/chapter-generator');",
            "isCurrent": false
          },
          {
            "line": 247,
            "content": "const { PromptGenerator } = await import('@/lib/generation/prompt-generator');",
            "isCurrent": true
          },
          {
            "line": 248,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 249,
            "content": "// 型安全な依存関係解決",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\lifecycle\\service-container copy 3.ts",
        "line": 256,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "const promptGenerator = new PromptGenerator(",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 254,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 255,
            "content": "// 🔥 CharacterManagerを含む完全な依存関係注入",
            "isCurrent": false
          },
          {
            "line": 256,
            "content": "const promptGenerator = new PromptGenerator(",
            "isCurrent": true
          },
          {
            "line": 257,
            "content": "memoryManager,",
            "isCurrent": false
          },
          {
            "line": 258,
            "content": "undefined, // worldSettingsManager: PlotManager経由でアクセス",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\lifecycle\\service-container copy 3.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "yamlOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\lifecycle\\service-container copy.ts",
        "line": 184,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "return new GeminiClient();",
        "method": "import",
        "class": "unknown",
        "surrounding": [
          {
            "line": 182,
            "content": "this.register('geminiClient', async () => {",
            "isCurrent": false
          },
          {
            "line": 183,
            "content": "const { GeminiClient } = await import('@/lib/generation/gemini-client');",
            "isCurrent": false
          },
          {
            "line": 184,
            "content": "return new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 185,
            "content": "}, ServiceLifecycle.SINGLETON);",
            "isCurrent": false
          },
          {
            "line": 186,
            "content": "}",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\lifecycle\\service-container copy.ts",
        "line": 211,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "const { PromptGenerator } = await import('@/lib/generation/prompt-generator');",
        "method": "import",
        "class": "unknown",
        "surrounding": [
          {
            "line": 209,
            "content": "const { NovelGenerationEngine } = await import('@/lib/generation/engine');",
            "isCurrent": false
          },
          {
            "line": 210,
            "content": "const { ChapterGenerator } = await import('@/lib/generation/engine/chapter-generator');",
            "isCurrent": false
          },
          {
            "line": 211,
            "content": "const { PromptGenerator } = await import('@/lib/generation/prompt-generator');",
            "isCurrent": true
          },
          {
            "line": 212,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 213,
            "content": "// 型安全な依存関係解決",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\lifecycle\\service-container copy.ts",
        "line": 219,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "const promptGenerator = new PromptGenerator(memoryManager);",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 217,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 218,
            "content": "// 依存関係を注入してインスタンス作成",
            "isCurrent": false
          },
          {
            "line": 219,
            "content": "const promptGenerator = new PromptGenerator(memoryManager);",
            "isCurrent": true
          },
          {
            "line": 220,
            "content": "const chapterGenerator = new ChapterGenerator(geminiClient, promptGenerator, memoryManager);",
            "isCurrent": false
          },
          {
            "line": 221,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\lifecycle\\service-container copy.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "yamlOutput",
            "count": 3
          }
        ]
      },
      {
        "file": "src\\lib\\lifecycle\\service-container.ts",
        "line": 193,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "return new GeminiClient();",
        "method": "import",
        "class": "unknown",
        "surrounding": [
          {
            "line": 191,
            "content": "this.register('geminiClient', async () => {",
            "isCurrent": false
          },
          {
            "line": 192,
            "content": "const { GeminiClient } = await import('@/lib/generation/gemini-client');",
            "isCurrent": false
          },
          {
            "line": 193,
            "content": "return new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 194,
            "content": "}, ServiceLifecycle.SINGLETON);",
            "isCurrent": false
          },
          {
            "line": 195,
            "content": "}",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\lifecycle\\service-container.ts",
        "line": 247,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "const { PromptGenerator } = await import('@/lib/generation/prompt-generator');",
        "method": "import",
        "class": "unknown",
        "surrounding": [
          {
            "line": 245,
            "content": "const { NovelGenerationEngine } = await import('@/lib/generation/engine');",
            "isCurrent": false
          },
          {
            "line": 246,
            "content": "const { ChapterGenerator } = await import('@/lib/generation/engine/chapter-generator');",
            "isCurrent": false
          },
          {
            "line": 247,
            "content": "const { PromptGenerator } = await import('@/lib/generation/prompt-generator');",
            "isCurrent": true
          },
          {
            "line": 248,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 249,
            "content": "// 型安全な依存関係解決",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\lifecycle\\service-container.ts",
        "line": 256,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "const promptGenerator = new PromptGenerator(",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 254,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 255,
            "content": "// 🔥 CharacterManagerを含む完全な依存関係注入",
            "isCurrent": false
          },
          {
            "line": 256,
            "content": "const promptGenerator = new PromptGenerator(",
            "isCurrent": true
          },
          {
            "line": 257,
            "content": "memoryManager,",
            "isCurrent": false
          },
          {
            "line": 258,
            "content": "undefined, // worldSettingsManager: PlotManager経由でアクセス",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\lifecycle\\service-container.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "yamlOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\core\\data-integration-processor.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 18
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\core\\interfaces.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 20
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\core\\memory-manager copy.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\memory\\core\\memory-manager copy.ts",
            "type": "template_literal",
            "content": "`Processing chapter ${chapter.chapterNumber} through unified memory system with infinite loop protection`",
            "fullLength": 105,
            "variables": [
              {
                "type": "template_literal",
                "name": "${chapter.chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{chapter.chapterNumber}"
              }
            ],
            "purpose": "unknown"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\memory\\core\\memory-manager copy.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\core\\memory-manager.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\memory\\core\\memory-manager.ts",
            "type": "template_literal",
            "content": "`Processing chapter ${chapter.chapterNumber} through unified memory system with infinite loop protection`",
            "fullLength": 105,
            "variables": [
              {
                "type": "template_literal",
                "name": "${chapter.chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{chapter.chapterNumber}"
              }
            ],
            "purpose": "unknown"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\memory\\core\\memory-manager.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\core\\types.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 71
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\core\\unified-access-api.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 8
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\integration\\access-optimizer.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\integration\\cache-coordinator.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\memory\\integration\\cache-coordinator.ts",
            "type": "template_literal",
            "content": "`Predictive cache completed for chapter ${nextChapterNumber}: ${successful} successful, ${failed} failed (${processingTime}ms)`",
            "fullLength": 127,
            "variables": [
              {
                "type": "template_literal",
                "name": "${nextChapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${successful}"
              },
              {
                "type": "template_literal",
                "name": "${failed}"
              },
              {
                "type": "template_literal",
                "name": "${processingTime}"
              },
              {
                "type": "handlebars",
                "name": "{nextChapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{successful}"
              },
              {
                "type": "handlebars",
                "name": "{failed}"
              },
              {
                "type": "handlebars",
                "name": "{processingTime}"
              }
            ],
            "purpose": "unknown"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\memory\\integration\\cache-coordinator.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\integration\\duplicate-resolver.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\memory\\integration\\duplicate-resolver.ts",
            "type": "template_literal",
            "content": "`Character info consolidated for ${characterId} from ${validSources.length} sources with ${conflictsResolved.length} conflicts resolved`",
            "fullLength": 136,
            "variables": [
              {
                "type": "template_literal",
                "name": "${characterId}"
              },
              {
                "type": "template_literal",
                "name": "${validSources.length}"
              },
              {
                "type": "template_literal",
                "name": "${conflictsResolved.length}"
              },
              {
                "type": "handlebars",
                "name": "{characterId}"
              },
              {
                "type": "handlebars",
                "name": "{validSources.length}"
              },
              {
                "type": "handlebars",
                "name": "{conflictsResolved.length}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\memory\\integration\\duplicate-resolver.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\integration\\quality-assurance.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 5
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\long-term\\character-database copy 2.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 2
          },
          {
            "format": "yamlOutput",
            "count": 3
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\long-term\\character-database copy.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 2
          },
          {
            "format": "yamlOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\long-term\\character-database-types.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 41
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\long-term\\character-database.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 2
          },
          {
            "format": "yamlOutput",
            "count": 3
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\long-term\\consolidation-guard copy.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\long-term\\consolidation-guard.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\long-term\\duplicate-resolver.ts",
        "line": 150,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "/** PromptGenerator効果性 */",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 148,
            "content": "/** システム効果性分析 */",
            "isCurrent": false
          },
          {
            "line": 149,
            "content": "systemEffectiveness: {",
            "isCurrent": false
          },
          {
            "line": 150,
            "content": "/** PromptGenerator効果性 */",
            "isCurrent": true
          },
          {
            "line": 151,
            "content": "promptGeneration: {",
            "isCurrent": false
          },
          {
            "line": 152,
            "content": "averageQuality: number;",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\long-term\\duplicate-resolver.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\memory\\long-term\\duplicate-resolver.ts",
            "type": "template_literal",
            "content": "`伏線「${foreshadowing.resolution}」は${foreshadowing.resolvedChapter - foreshadowing.introducedChapter}章後の解決で高効果`",
            "fullLength": 109,
            "variables": [
              {
                "type": "template_literal",
                "name": "${foreshadowing.resolution}"
              },
              {
                "type": "template_literal",
                "name": "${foreshadowing.resolvedChapter - foreshadowing.introducedChapter}"
              },
              {
                "type": "handlebars",
                "name": "{foreshadowing.resolution}"
              },
              {
                "type": "handlebars",
                "name": "{foreshadowing.resolvedChapter - foreshadowing.introducedChapter}"
              }
            ],
            "purpose": "unknown"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\memory\\long-term\\duplicate-resolver.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 4
          },
          {
            "format": "structuredOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\long-term\\long-term-memory.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\long-term\\system-knowledge.ts",
        "line": 7,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "* 🔧 PromptGenerator、分析パターン、エラーパターンの完全保存",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 5,
            "content": "* 🔧 12コンポーネントのデータ救済による知識蓄積",
            "isCurrent": false
          },
          {
            "line": 6,
            "content": "* 🔧 パターン学習・最適化戦略・品質改善の統合管理",
            "isCurrent": false
          },
          {
            "line": 7,
            "content": "* 🔧 PromptGenerator、分析パターン、エラーパターンの完全保存",
            "isCurrent": true
          },
          {
            "line": 8,
            "content": "* 🔧 システム自動学習・改善サイクルの実現",
            "isCurrent": false
          },
          {
            "line": 9,
            "content": "*/",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\long-term\\system-knowledge.ts",
        "line": 96,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "// PromptGeneratorデータ救済",
        "method": "integrateRescuedComponentData",
        "class": "unknown",
        "surrounding": [
          {
            "line": 94,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 95,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 96,
            "content": "// PromptGeneratorデータ救済",
            "isCurrent": true
          },
          {
            "line": 97,
            "content": "await this.rescuePromptGeneratorData();",
            "isCurrent": false
          },
          {
            "line": 98,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\long-term\\system-knowledge.ts",
        "line": 97,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "await this.rescuePromptGeneratorData();",
        "method": "cuedComponentData",
        "class": "unknown",
        "surrounding": [
          {
            "line": 95,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 96,
            "content": "// PromptGeneratorデータ救済",
            "isCurrent": false
          },
          {
            "line": 97,
            "content": "await this.rescuePromptGeneratorData();",
            "isCurrent": true
          },
          {
            "line": 98,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 99,
            "content": "// DynamicTensionOptimizerデータ救済",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\long-term\\system-knowledge.ts",
        "line": 141,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "* PromptGeneratorデータ救済",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 139,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 140,
            "content": "/**",
            "isCurrent": false
          },
          {
            "line": 141,
            "content": "* PromptGeneratorデータ救済",
            "isCurrent": true
          },
          {
            "line": 142,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 143,
            "content": "private async rescuePromptGeneratorData(): Promise<void> {",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\long-term\\system-knowledge.ts",
        "line": 143,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "private async rescuePromptGeneratorData(): Promise<void> {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 141,
            "content": "* PromptGeneratorデータ救済",
            "isCurrent": false
          },
          {
            "line": 142,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 143,
            "content": "private async rescuePromptGeneratorData(): Promise<void> {",
            "isCurrent": true
          },
          {
            "line": 144,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 145,
            "content": "// PromptGeneratorの履歴・統計・品質メトリクスを救済",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\long-term\\system-knowledge.ts",
        "line": 145,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "// PromptGeneratorの履歴・統計・品質メトリクスを救済",
        "method": "rescuePromptGeneratorData",
        "class": "unknown",
        "surrounding": [
          {
            "line": 143,
            "content": "private async rescuePromptGeneratorData(): Promise<void> {",
            "isCurrent": false
          },
          {
            "line": 144,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 145,
            "content": "// PromptGeneratorの履歴・統計・品質メトリクスを救済",
            "isCurrent": true
          },
          {
            "line": 146,
            "content": "const promptData = await this.loadComponentData('prompt-generator');",
            "isCurrent": false
          },
          {
            "line": 147,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\long-term\\system-knowledge.ts",
        "line": 167,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "logger.info(`Rescued ${patterns.length} prompt patterns and ${effectiveTemplates.length} templates from PromptGenerator`);",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 165,
            "content": "}",
            "isCurrent": false
          },
          {
            "line": 166,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 167,
            "content": "logger.info(`Rescued ${patterns.length} prompt patterns and ${effectiveTemplates.length} templates from PromptGenerator`);",
            "isCurrent": true
          },
          {
            "line": 168,
            "content": "}",
            "isCurrent": false
          },
          {
            "line": 169,
            "content": "} catch (error) {",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\long-term\\system-knowledge.ts",
        "line": 170,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "logger.warn('Failed to rescue PromptGenerator data', { error });",
        "method": "catch",
        "class": "unknown",
        "surrounding": [
          {
            "line": 168,
            "content": "}",
            "isCurrent": false
          },
          {
            "line": 169,
            "content": "} catch (error) {",
            "isCurrent": false
          },
          {
            "line": 170,
            "content": "logger.warn('Failed to rescue PromptGenerator data', { error });",
            "isCurrent": true
          },
          {
            "line": 171,
            "content": "}",
            "isCurrent": false
          },
          {
            "line": 172,
            "content": "}",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\long-term\\system-knowledge.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 7
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\long-term\\system-types.ts",
        "line": 7,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "* プロンプト生成パターン（PromptGenerator救済データ）",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 5,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 6,
            "content": "/**",
            "isCurrent": false
          },
          {
            "line": 7,
            "content": "* プロンプト生成パターン（PromptGenerator救済データ）",
            "isCurrent": true
          },
          {
            "line": 8,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 9,
            "content": "export interface PromptGenerationPattern {",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\long-term\\system-types.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "yamlOutput",
            "count": 1
          },
          {
            "format": "structuredOutput",
            "count": 107
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\long-term\\types.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 75
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\long-term\\world-knowledge.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 7
          },
          {
            "format": "structuredOutput",
            "count": 17
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\mid-term\\analysis-results.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 1
          },
          {
            "format": "structuredOutput",
            "count": 14
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\mid-term\\character-evolution.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 1
          },
          {
            "format": "structuredOutput",
            "count": 13
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\mid-term\\mid-term-memory.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\mid-term\\narrative-progression.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 1
          },
          {
            "format": "structuredOutput",
            "count": 10
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\mid-term\\quality-metrics.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\memory\\mid-term\\quality-metrics.ts",
            "type": "template_literal",
            "content": "`Chapter ${qualityRecord.chapterNumber} quality critically low: ${qualityRecord.qualityScore.toFixed(2)}`",
            "fullLength": 105,
            "variables": [
              {
                "type": "template_literal",
                "name": "${qualityRecord.chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${qualityRecord.qualityScore.toFixed(2)}"
              },
              {
                "type": "handlebars",
                "name": "{qualityRecord.chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{qualityRecord.qualityScore.toFixed(2)}"
              }
            ],
            "purpose": "unknown"
          },
          {
            "file": "src\\lib\\memory\\mid-term\\quality-metrics.ts",
            "type": "template_literal",
            "content": "`Chapter ${qualityRecord.chapterNumber} quality below threshold: ${qualityRecord.qualityScore.toFixed(2)}`",
            "fullLength": 106,
            "variables": [
              {
                "type": "template_literal",
                "name": "${qualityRecord.chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${qualityRecord.qualityScore.toFixed(2)}"
              },
              {
                "type": "handlebars",
                "name": "{qualityRecord.chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{qualityRecord.qualityScore.toFixed(2)}"
              }
            ],
            "purpose": "unknown"
          }
        ],
        "count": 2
      },
      {
        "file": "src\\lib\\memory\\mid-term\\quality-metrics.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 1
          },
          {
            "format": "structuredOutput",
            "count": 8
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\mid-term\\system-statistics.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 1
          },
          {
            "format": "structuredOutput",
            "count": 8
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\short-term\\generation-cache.ts",
        "line": 5,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "* PromptGenerator、ContextGenerator、Pre/PostGenerationの一時処理結果を管理する",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 3,
            "content": "* @fileoverview 統合記憶階層システム - 短期記憶：生成キャッシュ",
            "isCurrent": false
          },
          {
            "line": 4,
            "content": "* @description",
            "isCurrent": false
          },
          {
            "line": 5,
            "content": "* PromptGenerator、ContextGenerator、Pre/PostGenerationの一時処理結果を管理する",
            "isCurrent": true
          },
          {
            "line": 6,
            "content": "* 統合キャッシュシステム。12コンポーネントのデータ救済機能を提供します。",
            "isCurrent": false
          },
          {
            "line": 7,
            "content": "*/",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\short-term\\generation-cache.ts",
        "line": 15,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "* @description PromptGenerator一時データ",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 13,
            "content": "/**",
            "isCurrent": false
          },
          {
            "line": 14,
            "content": "* @interface ActivePromptGeneration",
            "isCurrent": false
          },
          {
            "line": 15,
            "content": "* @description PromptGenerator一時データ",
            "isCurrent": true
          },
          {
            "line": 16,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 17,
            "content": "interface ActivePromptGeneration {",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\short-term\\generation-cache.ts",
        "line": 255,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "* PromptGenerator、ContextGenerator、Pre/PostGenerationの一時処理結果を管理し、",
        "method": "unknown",
        "class": "GenerationCache",
        "surrounding": [
          {
            "line": 253,
            "content": "* @description",
            "isCurrent": false
          },
          {
            "line": 254,
            "content": "* 統合記憶階層システムの生成キャッシュクラス。",
            "isCurrent": false
          },
          {
            "line": 255,
            "content": "* PromptGenerator、ContextGenerator、Pre/PostGenerationの一時処理結果を管理し、",
            "isCurrent": true
          },
          {
            "line": 256,
            "content": "* 重複処理の排除と高速化を実現します।",
            "isCurrent": false
          },
          {
            "line": 257,
            "content": "*/",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\short-term\\generation-cache.ts",
        "line": 263,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "// 🔴 PromptGenerator救済データ",
        "method": "unknown",
        "class": "GenerationCache",
        "surrounding": [
          {
            "line": 261,
            "content": "private static readonly MAX_CACHE_AGE = 4 * 60 * 60 * 1000; // 4時間",
            "isCurrent": false
          },
          {
            "line": 262,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 263,
            "content": "// 🔴 PromptGenerator救済データ",
            "isCurrent": true
          },
          {
            "line": 264,
            "content": "private promptGenerationCache: Map<string, ActivePromptGeneration> = new Map();",
            "isCurrent": false
          },
          {
            "line": 265,
            "content": "private templateProcessingCache: Map<string, TemplateProcessingState> = new Map();",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\short-term\\generation-cache.ts",
        "line": 327,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "// 🔴 PromptGenerator救済機能",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 325,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 326,
            "content": "// ============================================================================",
            "isCurrent": false
          },
          {
            "line": 327,
            "content": "// 🔴 PromptGenerator救済機能",
            "isCurrent": true
          },
          {
            "line": 328,
            "content": "// ============================================================================",
            "isCurrent": false
          },
          {
            "line": 329,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\short-term\\generation-cache.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 1
          },
          {
            "format": "structuredOutput",
            "count": 16
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\short-term\\immediate-context.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\memory\\short-term\\immediate-context.ts",
            "type": "template_literal",
            "content": "`Updated ${filteredStates.length} character states with metadata for chapter ${chapter.chapterNumber}`",
            "fullLength": 102,
            "variables": [
              {
                "type": "template_literal",
                "name": "${filteredStates.length}"
              },
              {
                "type": "template_literal",
                "name": "${chapter.chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{filteredStates.length}"
              },
              {
                "type": "handlebars",
                "name": "{chapter.chapterNumber}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\memory\\short-term\\immediate-context.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 2
          },
          {
            "format": "structuredOutput",
            "count": 10
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\short-term\\processing-buffers.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 1
          },
          {
            "format": "structuredOutput",
            "count": 12
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\short-term\\short-term-memory.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\short-term\\temporary-analysis.ts",
        "line": 8,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "* - PromptGenerator一時データ",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 6,
            "content": "*",
            "isCurrent": false
          },
          {
            "line": 7,
            "content": "* 管理対象：",
            "isCurrent": false
          },
          {
            "line": 8,
            "content": "* - PromptGenerator一時データ",
            "isCurrent": true
          },
          {
            "line": 9,
            "content": "* - ContextGenerator一時データ",
            "isCurrent": false
          },
          {
            "line": 10,
            "content": "* - Pre/PostGeneration一時データ",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\short-term\\temporary-analysis.ts",
        "line": 24,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "// 型定義 - PromptGenerator一時データ",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 22,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 23,
            "content": "// ============================================================================",
            "isCurrent": false
          },
          {
            "line": 24,
            "content": "// 型定義 - PromptGenerator一時データ",
            "isCurrent": true
          },
          {
            "line": 25,
            "content": "// ============================================================================",
            "isCurrent": false
          },
          {
            "line": 26,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\short-term\\temporary-analysis.ts",
        "line": 435,
        "category": "promptGeneration",
        "pattern": "PromptGenerator",
        "context": "// PromptGenerator一時データ管理",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 433,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 434,
            "content": "// ============================================================================",
            "isCurrent": false
          },
          {
            "line": 435,
            "content": "// PromptGenerator一時データ管理",
            "isCurrent": true
          },
          {
            "line": 436,
            "content": "// ============================================================================",
            "isCurrent": false
          },
          {
            "line": 437,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\short-term\\temporary-analysis.ts",
        "line": 480,
        "category": "templateUsage",
        "pattern": "getTemplate",
        "context": "getTemplateProcessingState(templateId: string): TemplateProcessingState | null {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 478,
            "content": "* テンプレート処理状態を取得",
            "isCurrent": false
          },
          {
            "line": 479,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 480,
            "content": "getTemplateProcessingState(templateId: string): TemplateProcessingState | null {",
            "isCurrent": true
          },
          {
            "line": 481,
            "content": "return this.templateProcessing.get(templateId) || null;",
            "isCurrent": false
          },
          {
            "line": 482,
            "content": "}",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\short-term\\temporary-analysis.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 1
          },
          {
            "format": "structuredOutput",
            "count": 15
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\storage\\backup-system.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 3
          },
          {
            "format": "structuredOutput",
            "count": 7
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\storage\\cache-storage.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 5
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\storage\\migration-tools.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 4
          },
          {
            "format": "structuredOutput",
            "count": 9
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\storage\\persistent-storage.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 4
          },
          {
            "format": "structuredOutput",
            "count": 5
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\text-analyzer-service.ts",
        "line": 335,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "const response = await this.geminiClient.generateText(prompt, {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 333,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 334,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 335,
            "content": "const response = await this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 336,
            "content": "temperature: 0.1,",
            "isCurrent": false
          },
          {
            "line": 337,
            "content": "targetLength: 500 * characterNames.length",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\text-analyzer-service.ts",
        "line": 335,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "const response = await this.geminiClient.generateText(prompt, {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 333,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 334,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 335,
            "content": "const response = await this.geminiClient.generateText(prompt, {",
            "isCurrent": true
          },
          {
            "line": 336,
            "content": "temperature: 0.1,",
            "isCurrent": false
          },
          {
            "line": 337,
            "content": "targetLength: 500 * characterNames.length",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\memory\\text-analyzer-service.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\memory\\text-analyzer-service.ts",
            "type": "template_literal",
            "content": "`\r\n以下の物語テキストから、登場する各キャラクターの状態を分析してください。\r\n指定されたキャラクターごとに以下を分析してください:\r\n1. 感情状態（喜び、悲しみ、怒り、恐怖、驚き、平静など）\r\n2. 発展や変化（成長、決意、気づき、変化など）\r\n3. 他のキャラクターとの関係性（可能であれば）\r\n\r\nキャラクター: ${characterNames.join(', ')}\r\n\r\n物語テキスト:\r\n${truncatedText}\r\n\r\n以下の形式でJSONで出力してください:\r\n[\r\n  {\r\n    \"name\": \"キャラクター名\",\r\n    \"mood\": \"感情状態\",\r\n    \"development\": \"発展や変化の説明\",\r\n    \"relationships\": [\r\n      {\r\n        \"character\": \"関係のあるキャラクター名\",\r\n        \"relation\": \"関係性の説明\"\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\n存在しない情報は省略してもかまいません。\r\n`",
            "fullLength": 480,
            "variables": [
              {
                "type": "template_literal",
                "name": "${characterNames.join(', ')}"
              },
              {
                "type": "template_literal",
                "name": "${truncatedText}"
              },
              {
                "type": "handlebars",
                "name": "{characterNames.join(', ')}"
              },
              {
                "type": "handlebars",
                "name": "{truncatedText}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"name\": \"キャラクター名\",\r\n    \"mood\": \"感情状態\",\r\n    \"development\": \"発展や変化の説明\",\r\n    \"relationships\": [\r\n      {\r\n        \"character\": \"関係のあるキャラクター名\",\r\n        \"relation\": \"関係性の説明\"\r\n      }"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\memory\\text-analyzer-service.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\parameters\\manager.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 13
          }
        ]
      },
      {
        "file": "src\\lib\\parameters\\types.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\bridge-types.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 16
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\checker.ts",
        "line": 768,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, { temperature: 0.2 })",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 766,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 767,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 768,
            "content": "this.geminiClient.generateText(prompt, { temperature: 0.2 })",
            "isCurrent": true
          },
          {
            "line": 769,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 770,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\checker.ts",
        "line": 768,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, { temperature: 0.2 })",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 766,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 767,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 768,
            "content": "this.geminiClient.generateText(prompt, { temperature: 0.2 })",
            "isCurrent": true
          },
          {
            "line": 769,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 770,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\checker.ts",
        "line": 101,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "this.geminiClient = new GeminiClient();",
        "method": "constructor",
        "class": "PlotChecker",
        "surrounding": [
          {
            "line": 99,
            "content": "private plotManager: PlotManager",
            "isCurrent": false
          },
          {
            "line": 100,
            "content": ") {",
            "isCurrent": false
          },
          {
            "line": 101,
            "content": "this.geminiClient = new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 102,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 103,
            "content": "logger.info('PlotChecker initialized with integrated memory hierarchy system', {",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\checker.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\plot\\checker.ts",
            "type": "template_literal",
            "content": "`\n次の小説の章と、前章の内容を分析し、継続性と整合性をチェックしてください。\n\n【前章の内容（第${chapterNumber - 1}章）】\n${truncatedPrevious}\n\n【現在の章の内容（第${chapterNumber}章）】\n${truncatedCurrent}\n\n以下の点を特に確認してください：\n1. 前章の最後の状況と現在の章の冒頭が自然につながっているか\n2. 前章で始まったイベントの継続性は保たれているか  \n3. キャラクターの位置や状態が前章から不自然に変化していないか\n4. 前章と矛盾する情報がないか\n\n以下の形式でJSON出力してください：\n{\n  \"continuityIssues\": [\n    {\n      \"description\": \"整合性の問題の説明\",\n      \"severity\": \"HIGH/MEDIUM/LOW\",\n      \"suggestion\": \"修正提案\",\n      \"context\": \"問題が見られる箇所\"\n    }\n  ]\n}\n`",
            "fullLength": 468,
            "variables": [
              {
                "type": "template_literal",
                "name": "${chapterNumber - 1}"
              },
              {
                "type": "template_literal",
                "name": "${truncatedPrevious}"
              },
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${truncatedCurrent}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber - 1}"
              },
              {
                "type": "handlebars",
                "name": "{truncatedPrevious}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{truncatedCurrent}"
              },
              {
                "type": "handlebars",
                "name": "{\n  \"continuityIssues\": [\n    {\n      \"description\": \"整合性の問題の説明\",\n      \"severity\": \"HIGH/MEDIUM/LOW\",\n      \"suggestion\": \"修正提案\",\n      \"context\": \"問題が見られる箇所\"\n    }"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\plot\\checker.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 3
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\context-builder.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\plot\\context-builder.ts",
            "type": "template_literal",
            "content": "`指定された抽象的なテーマ「${abstractGuideline.theme}」と感情的トーン「${abstractGuideline.emotionalTone}」に沿って、キャラクターと物語の自然な発展を描いてください。\r\n提案された方向性を参考にしつつ、創造的に物語を展開させてください。${stagnationDirective}`",
            "fullLength": 171,
            "variables": [
              {
                "type": "template_literal",
                "name": "${abstractGuideline.theme}"
              },
              {
                "type": "template_literal",
                "name": "${abstractGuideline.emotionalTone}"
              },
              {
                "type": "template_literal",
                "name": "${stagnationDirective}"
              },
              {
                "type": "handlebars",
                "name": "{abstractGuideline.theme}"
              },
              {
                "type": "handlebars",
                "name": "{abstractGuideline.emotionalTone}"
              },
              {
                "type": "handlebars",
                "name": "{stagnationDirective}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\plot\\context-builder.ts",
            "type": "template_literal",
            "content": "`具体的な必須要素を含めつつ、テーマ「${abstractGuideline.theme}」の枠組みの中で創造的に物語を展開させてください。\r\n必須要素は守りながらも、その実現方法と周辺の展開については自由度を持たせて描写してください。${stagnationDirective}`",
            "fullLength": 141,
            "variables": [
              {
                "type": "template_literal",
                "name": "${abstractGuideline.theme}"
              },
              {
                "type": "template_literal",
                "name": "${stagnationDirective}"
              },
              {
                "type": "handlebars",
                "name": "{abstractGuideline.theme}"
              },
              {
                "type": "handlebars",
                "name": "{stagnationDirective}"
              }
            ],
            "purpose": "story_generation"
          },
          {
            "file": "src\\lib\\plot\\context-builder.ts",
            "type": "template_literal",
            "content": "`次章から始まる具体的なイベントへの準備となる展開を描いてください。\r\n伏線や期待感を徐々に高め、読者の興味を引きつけながら次の大きな展開への橋渡しをしてください。${stagnationDirective}`",
            "fullLength": 105,
            "variables": [
              {
                "type": "template_literal",
                "name": "${stagnationDirective}"
              },
              {
                "type": "handlebars",
                "name": "{stagnationDirective}"
              }
            ],
            "purpose": "unknown"
          },
          {
            "file": "src\\lib\\plot\\context-builder.ts",
            "type": "template_literal",
            "content": "`直前の具体的イベントの余韻や影響を描きながら、より自由度の高い展開へと移行してください。\r\nキャラクターの内面や関係性の変化、感情の発展に焦点を当てて描写してください。${stagnationDirective}`",
            "fullLength": 108,
            "variables": [
              {
                "type": "template_literal",
                "name": "${stagnationDirective}"
              },
              {
                "type": "handlebars",
                "name": "{stagnationDirective}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\plot\\context-builder.ts",
            "type": "template_literal",
            "content": "`).join('\\n')}\r\n- 注目キャラクター: ${concretePlot.characterFocus.join(', ')}\r\n- 必須要素: ${concretePlot.requiredElements.join(', ')}\r\n${concretePlot.foreshadowing && concretePlot.foreshadowing.length > 0 ? `",
            "fullLength": 197,
            "variables": [
              {
                "type": "template_literal",
                "name": "${concretePlot.characterFocus.join(', ')}"
              },
              {
                "type": "template_literal",
                "name": "${concretePlot.requiredElements.join(', ')}"
              },
              {
                "type": "handlebars",
                "name": "{concretePlot.characterFocus.join(', ')}"
              },
              {
                "type": "handlebars",
                "name": "{concretePlot.requiredElements.join(', ')}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\plot\\context-builder.ts",
            "type": "template_literal",
            "content": "`【物語の方向性】\r\n物語は現在「${abstractGuideline.phase}」の段階にあります。${guidance}：\r\n\r\n- テーマ: ${abstractGuideline.theme}\r\n- 感情的トーン: ${abstractGuideline.emotionalTone}\r\n- 展開の可能性:\r\n${abstractGuideline.potentialDirections.map(d => `",
            "fullLength": 211,
            "variables": [
              {
                "type": "template_literal",
                "name": "${abstractGuideline.phase}"
              },
              {
                "type": "template_literal",
                "name": "${guidance}"
              },
              {
                "type": "template_literal",
                "name": "${abstractGuideline.theme}"
              },
              {
                "type": "template_literal",
                "name": "${abstractGuideline.emotionalTone}"
              },
              {
                "type": "handlebars",
                "name": "{abstractGuideline.phase}"
              },
              {
                "type": "handlebars",
                "name": "{guidance}"
              },
              {
                "type": "handlebars",
                "name": "{abstractGuideline.theme}"
              },
              {
                "type": "handlebars",
                "name": "{abstractGuideline.emotionalTone}"
              }
            ],
            "purpose": "story_generation"
          },
          {
            "file": "src\\lib\\plot\\context-builder.ts",
            "type": "template_literal",
            "content": "`【現在の物語状態】\r\n- 状態: ${narrativeState.state}\r\n- 継続期間: ${narrativeState.duration}章\r\n- 場所: ${narrativeState.location}\r\n- 時間帯: ${narrativeState.timeOfDay}\r\n- 天候: ${narrativeState.weather}\r\n- 緊張度: ${narrativeState.tensionLevel}/10\r\n- 登場中キャラクター: ${narrativeState.presentCharacters.join(', ')}`",
            "fullLength": 285,
            "variables": [
              {
                "type": "template_literal",
                "name": "${narrativeState.state}"
              },
              {
                "type": "template_literal",
                "name": "${narrativeState.duration}"
              },
              {
                "type": "template_literal",
                "name": "${narrativeState.location}"
              },
              {
                "type": "template_literal",
                "name": "${narrativeState.timeOfDay}"
              },
              {
                "type": "template_literal",
                "name": "${narrativeState.weather}"
              },
              {
                "type": "template_literal",
                "name": "${narrativeState.tensionLevel}"
              },
              {
                "type": "template_literal",
                "name": "${narrativeState.presentCharacters.join(', ')}"
              },
              {
                "type": "handlebars",
                "name": "{narrativeState.state}"
              },
              {
                "type": "handlebars",
                "name": "{narrativeState.duration}"
              },
              {
                "type": "handlebars",
                "name": "{narrativeState.location}"
              },
              {
                "type": "handlebars",
                "name": "{narrativeState.timeOfDay}"
              },
              {
                "type": "handlebars",
                "name": "{narrativeState.weather}"
              },
              {
                "type": "handlebars",
                "name": "{narrativeState.tensionLevel}"
              },
              {
                "type": "handlebars",
                "name": "{narrativeState.presentCharacters.join(', ')}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 7
      },
      {
        "file": "src\\lib\\plot\\manager copy.ts",
        "line": 181,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "this.geminiClient = new GeminiClient();",
        "method": "PlotStorage",
        "class": "unknown",
        "surrounding": [
          {
            "line": 179,
            "content": "this.plotStorage = new PlotStorage();",
            "isCurrent": false
          },
          {
            "line": 180,
            "content": "this.plotContextBuilder = new PlotContextBuilder();",
            "isCurrent": false
          },
          {
            "line": 181,
            "content": "this.geminiClient = new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 182,
            "content": "this.worldSettingsManager = new WorldSettingsManager();",
            "isCurrent": false
          },
          {
            "line": 183,
            "content": "this.phaseManager = new StoryPhaseManager();",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\manager copy.ts",
        "line": 738,
        "category": "promptGeneration",
        "pattern": "generatePrompt",
        "context": "async generatePromptElements(chapterNumber: number): Promise<PromptElements> {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 736,
            "content": "* 🔧 次章のプロンプト用要素を生成（新記憶階層システム統合版）",
            "isCurrent": false
          },
          {
            "line": 737,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 738,
            "content": "async generatePromptElements(chapterNumber: number): Promise<PromptElements> {",
            "isCurrent": true
          },
          {
            "line": 739,
            "content": "await this.ensureInitialized();",
            "isCurrent": false
          },
          {
            "line": 740,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\manager copy.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "yamlOutput",
            "count": 1
          },
          {
            "format": "structuredOutput",
            "count": 7
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\manager.ts",
        "line": 193,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "this.geminiClient = new GeminiClient();",
        "method": "WorldSettingsManager",
        "class": "unknown",
        "surrounding": [
          {
            "line": 191,
            "content": "// 従来の依存注入パターン（後方互換性）",
            "isCurrent": false
          },
          {
            "line": 192,
            "content": "this.worldSettingsManager = new WorldSettingsManager();",
            "isCurrent": false
          },
          {
            "line": 193,
            "content": "this.geminiClient = new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 194,
            "content": "this.serviceContainer = null;",
            "isCurrent": false
          },
          {
            "line": 195,
            "content": "logger.info('PlotManager created with legacy dependencies');",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\manager.ts",
        "line": 864,
        "category": "promptGeneration",
        "pattern": "generatePrompt",
        "context": "async generatePromptElements(chapterNumber: number): Promise<PromptElements> {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 862,
            "content": "* 🔧 次章のプロンプト用要素を生成（新記憶階層システム統合版）",
            "isCurrent": false
          },
          {
            "line": 863,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 864,
            "content": "async generatePromptElements(chapterNumber: number): Promise<PromptElements> {",
            "isCurrent": true
          },
          {
            "line": 865,
            "content": "await this.ensureInitialized();",
            "isCurrent": false
          },
          {
            "line": 866,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\manager.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "yamlOutput",
            "count": 1
          },
          {
            "format": "structuredOutput",
            "count": 7
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\index.ts",
        "line": 397,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "await this.geminiClient.generateText(testPrompt);",
        "method": "GeminiClient",
        "class": "unknown",
        "surrounding": [
          {
            "line": 395,
            "content": "const testPrompt = 'Test connection - respond with \"OK\"';",
            "isCurrent": false
          },
          {
            "line": 396,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 397,
            "content": "await this.geminiClient.generateText(testPrompt);",
            "isCurrent": true
          },
          {
            "line": 398,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 399,
            "content": "this.updateComponentStatus('geminiClient', {",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\index.ts",
        "line": 397,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "await this.geminiClient.generateText(testPrompt);",
        "method": "GeminiClient",
        "class": "unknown",
        "surrounding": [
          {
            "line": 395,
            "content": "const testPrompt = 'Test connection - respond with \"OK\"';",
            "isCurrent": false
          },
          {
            "line": 396,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 397,
            "content": "await this.geminiClient.generateText(testPrompt);",
            "isCurrent": true
          },
          {
            "line": 398,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 399,
            "content": "this.updateComponentStatus('geminiClient', {",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\index.ts",
        "line": 392,
        "category": "geminiCalls",
        "pattern": "new GeminiClient",
        "context": "this.geminiClient = new GeminiClient();",
        "method": "initializeGeminiClient",
        "class": "unknown",
        "surrounding": [
          {
            "line": 390,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 391,
            "content": "// GeminiClientは引数なしで初期化（geminiClientConfigは将来の拡張用）",
            "isCurrent": false
          },
          {
            "line": 392,
            "content": "this.geminiClient = new GeminiClient();",
            "isCurrent": true
          },
          {
            "line": 393,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 394,
            "content": "// 接続テスト（簡易）",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\index.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "line": 632,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "method": "ceAnalysisPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 630,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 631,
            "content": "response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 632,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "isCurrent": true
          },
          {
            "line": 633,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 634,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "line": 671,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "method": "AnalysisPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 669,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 670,
            "content": "response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 671,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "isCurrent": true
          },
          {
            "line": 672,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 673,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "line": 717,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "method": "nalysisPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 715,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 716,
            "content": "response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 717,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "isCurrent": true
          },
          {
            "line": 718,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 719,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "line": 773,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 771,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 772,
            "content": "response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 773,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "isCurrent": true
          },
          {
            "line": 774,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 775,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "line": 632,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "method": "buildCoherenceAnalysisPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 630,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 631,
            "content": "response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 632,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "isCurrent": true
          },
          {
            "line": 633,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 634,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "line": 671,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "method": "ildObjectiveAnalysisPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 669,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 670,
            "content": "response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 671,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "isCurrent": true
          },
          {
            "line": 672,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 673,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "line": 717,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "method": "ldEmotionalAnalysisPrompt",
        "class": "unknown",
        "surrounding": [
          {
            "line": 715,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 716,
            "content": "response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 717,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "isCurrent": true
          },
          {
            "line": 718,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 719,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "line": 773,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 771,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 772,
            "content": "response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 773,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "isCurrent": true
          },
          {
            "line": 774,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 775,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "line": 138,
        "category": "aiAnalysis",
        "pattern": "AI.*Analysis",
        "context": "const aiAnalysisResult = await this.performAICoherenceAnalysis(",
        "method": "getUnifiedMemoryContext",
        "class": "unknown",
        "surrounding": [
          {
            "line": 136,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 137,
            "content": "// AIによる一貫性分析",
            "isCurrent": false
          },
          {
            "line": 138,
            "content": "const aiAnalysisResult = await this.performAICoherenceAnalysis(",
            "isCurrent": true
          },
          {
            "line": 139,
            "content": "section,",
            "isCurrent": false
          },
          {
            "line": 140,
            "content": "chapters,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "line": 201,
        "category": "aiAnalysis",
        "pattern": "AI.*Analysis",
        "context": "const aiAnalysisResult = await this.performAIObjectiveAnalysis(",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 199,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 200,
            "content": "// AIによる学習目標達成度分析",
            "isCurrent": false
          },
          {
            "line": 201,
            "content": "const aiAnalysisResult = await this.performAIObjectiveAnalysis(",
            "isCurrent": true
          },
          {
            "line": 202,
            "content": "section,",
            "isCurrent": false
          },
          {
            "line": 203,
            "content": "chapters,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "line": 276,
        "category": "aiAnalysis",
        "pattern": "AI.*Analysis",
        "context": "const aiAnalysisResult = await this.performAIEmotionalAnalysis(",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 274,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 275,
            "content": "// AIによる感情アーク実現度分析",
            "isCurrent": false
          },
          {
            "line": 276,
            "content": "const aiAnalysisResult = await this.performAIEmotionalAnalysis(",
            "isCurrent": true
          },
          {
            "line": 277,
            "content": "section,",
            "isCurrent": false
          },
          {
            "line": 278,
            "content": "chapters,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "line": 354,
        "category": "aiAnalysis",
        "pattern": "AI.*Analysis",
        "context": "const aiSuggestions = await this.performAIImprovementAnalysis(",
        "method": "getImprovementContextFromMemory",
        "class": "unknown",
        "surrounding": [
          {
            "line": 352,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 353,
            "content": "// AIによる改善提案の生成",
            "isCurrent": false
          },
          {
            "line": 354,
            "content": "const aiSuggestions = await this.performAIImprovementAnalysis(",
            "isCurrent": true
          },
          {
            "line": 355,
            "content": "section,",
            "isCurrent": false
          },
          {
            "line": 356,
            "content": "coherenceAnalysis,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "line": 622,
        "category": "aiAnalysis",
        "pattern": "AI.*Analysis",
        "context": "private async performAICoherenceAnalysis(",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 620,
            "content": "* AI一貫性分析を実行",
            "isCurrent": false
          },
          {
            "line": 621,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 622,
            "content": "private async performAICoherenceAnalysis(",
            "isCurrent": true
          },
          {
            "line": 623,
            "content": "section: SectionPlot,",
            "isCurrent": false
          },
          {
            "line": 624,
            "content": "chapters: Array<{ chapterNumber: number; title: string; content: string }>,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "line": 661,
        "category": "aiAnalysis",
        "pattern": "AI.*Analysis",
        "context": "private async performAIObjectiveAnalysis(",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 659,
            "content": "* AI目標分析を実行",
            "isCurrent": false
          },
          {
            "line": 660,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 661,
            "content": "private async performAIObjectiveAnalysis(",
            "isCurrent": true
          },
          {
            "line": 662,
            "content": "section: SectionPlot,",
            "isCurrent": false
          },
          {
            "line": 663,
            "content": "chapters: Array<{ chapterNumber: number; title: string; content: string }>,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "line": 707,
        "category": "aiAnalysis",
        "pattern": "AI.*Analysis",
        "context": "private async performAIEmotionalAnalysis(",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 705,
            "content": "* AI感情分析を実行",
            "isCurrent": false
          },
          {
            "line": 706,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 707,
            "content": "private async performAIEmotionalAnalysis(",
            "isCurrent": true
          },
          {
            "line": 708,
            "content": "section: SectionPlot,",
            "isCurrent": false
          },
          {
            "line": 709,
            "content": "chapters: Array<{ chapterNumber: number; title: string; content: string }>,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "line": 755,
        "category": "aiAnalysis",
        "pattern": "AI.*Analysis",
        "context": "private async performAIImprovementAnalysis(",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 753,
            "content": "* AI改善分析を実行",
            "isCurrent": false
          },
          {
            "line": 754,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 755,
            "content": "private async performAIImprovementAnalysis(",
            "isCurrent": true
          },
          {
            "line": 756,
            "content": "section: SectionPlot,",
            "isCurrent": false
          },
          {
            "line": 757,
            "content": "coherenceAnalysis: CoherenceAnalysis,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "line": 138,
        "category": "aiAnalysis",
        "pattern": "performAI.*Analysis",
        "context": "const aiAnalysisResult = await this.performAICoherenceAnalysis(",
        "method": "getUnifiedMemoryContext",
        "class": "unknown",
        "surrounding": [
          {
            "line": 136,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 137,
            "content": "// AIによる一貫性分析",
            "isCurrent": false
          },
          {
            "line": 138,
            "content": "const aiAnalysisResult = await this.performAICoherenceAnalysis(",
            "isCurrent": true
          },
          {
            "line": 139,
            "content": "section,",
            "isCurrent": false
          },
          {
            "line": 140,
            "content": "chapters,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "line": 201,
        "category": "aiAnalysis",
        "pattern": "performAI.*Analysis",
        "context": "const aiAnalysisResult = await this.performAIObjectiveAnalysis(",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 199,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 200,
            "content": "// AIによる学習目標達成度分析",
            "isCurrent": false
          },
          {
            "line": 201,
            "content": "const aiAnalysisResult = await this.performAIObjectiveAnalysis(",
            "isCurrent": true
          },
          {
            "line": 202,
            "content": "section,",
            "isCurrent": false
          },
          {
            "line": 203,
            "content": "chapters,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "line": 276,
        "category": "aiAnalysis",
        "pattern": "performAI.*Analysis",
        "context": "const aiAnalysisResult = await this.performAIEmotionalAnalysis(",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 274,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 275,
            "content": "// AIによる感情アーク実現度分析",
            "isCurrent": false
          },
          {
            "line": 276,
            "content": "const aiAnalysisResult = await this.performAIEmotionalAnalysis(",
            "isCurrent": true
          },
          {
            "line": 277,
            "content": "section,",
            "isCurrent": false
          },
          {
            "line": 278,
            "content": "chapters,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "line": 354,
        "category": "aiAnalysis",
        "pattern": "performAI.*Analysis",
        "context": "const aiSuggestions = await this.performAIImprovementAnalysis(",
        "method": "getImprovementContextFromMemory",
        "class": "unknown",
        "surrounding": [
          {
            "line": 352,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 353,
            "content": "// AIによる改善提案の生成",
            "isCurrent": false
          },
          {
            "line": 354,
            "content": "const aiSuggestions = await this.performAIImprovementAnalysis(",
            "isCurrent": true
          },
          {
            "line": 355,
            "content": "section,",
            "isCurrent": false
          },
          {
            "line": 356,
            "content": "coherenceAnalysis,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "line": 622,
        "category": "aiAnalysis",
        "pattern": "performAI.*Analysis",
        "context": "private async performAICoherenceAnalysis(",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 620,
            "content": "* AI一貫性分析を実行",
            "isCurrent": false
          },
          {
            "line": 621,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 622,
            "content": "private async performAICoherenceAnalysis(",
            "isCurrent": true
          },
          {
            "line": 623,
            "content": "section: SectionPlot,",
            "isCurrent": false
          },
          {
            "line": 624,
            "content": "chapters: Array<{ chapterNumber: number; title: string; content: string }>,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "line": 661,
        "category": "aiAnalysis",
        "pattern": "performAI.*Analysis",
        "context": "private async performAIObjectiveAnalysis(",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 659,
            "content": "* AI目標分析を実行",
            "isCurrent": false
          },
          {
            "line": 660,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 661,
            "content": "private async performAIObjectiveAnalysis(",
            "isCurrent": true
          },
          {
            "line": 662,
            "content": "section: SectionPlot,",
            "isCurrent": false
          },
          {
            "line": 663,
            "content": "chapters: Array<{ chapterNumber: number; title: string; content: string }>,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "line": 707,
        "category": "aiAnalysis",
        "pattern": "performAI.*Analysis",
        "context": "private async performAIEmotionalAnalysis(",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 705,
            "content": "* AI感情分析を実行",
            "isCurrent": false
          },
          {
            "line": 706,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 707,
            "content": "private async performAIEmotionalAnalysis(",
            "isCurrent": true
          },
          {
            "line": 708,
            "content": "section: SectionPlot,",
            "isCurrent": false
          },
          {
            "line": 709,
            "content": "chapters: Array<{ chapterNumber: number; title: string; content: string }>,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "line": 755,
        "category": "aiAnalysis",
        "pattern": "performAI.*Analysis",
        "context": "private async performAIImprovementAnalysis(",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 753,
            "content": "* AI改善分析を実行",
            "isCurrent": false
          },
          {
            "line": 754,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 755,
            "content": "private async performAIImprovementAnalysis(",
            "isCurrent": true
          },
          {
            "line": 756,
            "content": "section: SectionPlot,",
            "isCurrent": false
          },
          {
            "line": 757,
            "content": "coherenceAnalysis: CoherenceAnalysis,",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\plot\\section\\section-analyzer.ts",
            "type": "template_literal",
            "content": "`Successfully generated ${suggestions.length} improvement suggestions for section ${section.structure.title}`",
            "fullLength": 109,
            "variables": [
              {
                "type": "template_literal",
                "name": "${suggestions.length}"
              },
              {
                "type": "template_literal",
                "name": "${section.structure.title}"
              },
              {
                "type": "handlebars",
                "name": "{suggestions.length}"
              },
              {
                "type": "handlebars",
                "name": "{section.structure.title}"
              }
            ],
            "purpose": "content_improvement"
          },
          {
            "file": "src\\lib\\plot\\section\\section-analyzer.ts",
            "type": "template_literal",
            "content": "`\nあなたは物語の一貫性分析の専門家です。\n以下のセクション「${section.structure.title}」の概要と、含まれる章の内容に基づいて、一貫性を分析してください。\n\n【セクション情報】\n- テーマ: ${section.structure.theme}\n- 主要概念: ${section.learningJourneyDesign.mainConcept}\n- 学習段階: ${section.learningJourneyDesign.primaryLearningStage}\n- 章範囲: ${section.chapterRange.start}〜${section.chapterRange.end}章\n\n【章の内容概要】\n${chapters.map(ch => `",
            "fullLength": 349,
            "variables": [
              {
                "type": "template_literal",
                "name": "${section.structure.title}"
              },
              {
                "type": "template_literal",
                "name": "${section.structure.theme}"
              },
              {
                "type": "template_literal",
                "name": "${section.learningJourneyDesign.mainConcept}"
              },
              {
                "type": "template_literal",
                "name": "${section.learningJourneyDesign.primaryLearningStage}"
              },
              {
                "type": "template_literal",
                "name": "${section.chapterRange.start}"
              },
              {
                "type": "template_literal",
                "name": "${section.chapterRange.end}"
              },
              {
                "type": "handlebars",
                "name": "{section.structure.title}"
              },
              {
                "type": "handlebars",
                "name": "{section.structure.theme}"
              },
              {
                "type": "handlebars",
                "name": "{section.learningJourneyDesign.mainConcept}"
              },
              {
                "type": "handlebars",
                "name": "{section.learningJourneyDesign.primaryLearningStage}"
              },
              {
                "type": "handlebars",
                "name": "{section.chapterRange.start}"
              },
              {
                "type": "handlebars",
                "name": "{section.chapterRange.end}"
              }
            ],
            "purpose": "story_generation"
          },
          {
            "file": "src\\lib\\plot\\section\\section-analyzer.ts",
            "type": "template_literal",
            "content": "`).join('\\n')}\n\n${contextInfo}\n\n以下の観点から一貫性を分析してください:\n1. テーマの一貫性\n2. キャラクターの一貫性\n3. プロット展開の一貫性\n4. 設定の一貫性\n5. トーンや雰囲気の一貫性\n\n結果はJSON形式で、次のフォーマットで出力してください:\n{\n  \"overallScore\": 7,\n  \"problematicAreas\": [\n    {\n      \"type\": \"theme\",\n      \"description\": \"問題の説明\",\n      \"severity\": 5\n    }\n  ],\n  \"improvementSuggestions\": [\n    \"改善提案1\",\n    \"改善提案2\"\n  ]\n}\n\noverallScoreは0〜10の整数で、problematicAreasのtypeは'theme'|'character'|'plot'|'setting'|'tone'のいずれかを使用し、severityは0〜10の整数で表してください。\n`",
            "fullLength": 471,
            "variables": [
              {
                "type": "template_literal",
                "name": "${contextInfo}"
              },
              {
                "type": "handlebars",
                "name": "{contextInfo}"
              },
              {
                "type": "handlebars",
                "name": "{\n  \"overallScore\": 7,\n  \"problematicAreas\": [\n    {\n      \"type\": \"theme\",\n      \"description\": \"問題の説明\",\n      \"severity\": 5\n    }"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\plot\\section\\section-analyzer.ts",
            "type": "template_literal",
            "content": "`\nあなたは教育目標達成度分析の専門家です。\n以下のセクション「${section.structure.title}」の学習目標と、含まれる章の内容に基づいて、目標達成度を分析してください。\n\n【セクション情報】\n- 主要概念: ${mainConcept}\n- 学習段階: ${section.learningJourneyDesign.primaryLearningStage}\n\n【学習目標】\n- 認知的目標: ${objectives.cognitive}\n- 感情的目標: ${objectives.affective}\n- 行動的目標: ${objectives.behavioral}\n\n【章の内容概要】\n${chapters.map(ch => `",
            "fullLength": 332,
            "variables": [
              {
                "type": "template_literal",
                "name": "${section.structure.title}"
              },
              {
                "type": "template_literal",
                "name": "${mainConcept}"
              },
              {
                "type": "template_literal",
                "name": "${section.learningJourneyDesign.primaryLearningStage}"
              },
              {
                "type": "template_literal",
                "name": "${objectives.cognitive}"
              },
              {
                "type": "template_literal",
                "name": "${objectives.affective}"
              },
              {
                "type": "template_literal",
                "name": "${objectives.behavioral}"
              },
              {
                "type": "handlebars",
                "name": "{section.structure.title}"
              },
              {
                "type": "handlebars",
                "name": "{mainConcept}"
              },
              {
                "type": "handlebars",
                "name": "{section.learningJourneyDesign.primaryLearningStage}"
              },
              {
                "type": "handlebars",
                "name": "{objectives.cognitive}"
              },
              {
                "type": "handlebars",
                "name": "{objectives.affective}"
              },
              {
                "type": "handlebars",
                "name": "{objectives.behavioral}"
              }
            ],
            "purpose": "content_analysis"
          },
          {
            "file": "src\\lib\\plot\\section\\section-analyzer.ts",
            "type": "template_literal",
            "content": "`).join('\\n')}\n\n${contextInfo}\n\n以下の観点から学習目標の達成度を分析してください:\n1. 認知的目標の達成度（0.0〜1.0）\n2. 感情的目標の達成度（0.0〜1.0）\n3. 行動的目標の達成度（0.0〜1.0）\n4. 各目標タイプの具体的な例（章番号付き）\n5. 達成のギャップや課題\n\n結果はJSON形式で、次のフォーマットで出力してください:\n{\n  \"cognitiveProgress\": 0.7,\n  \"affectiveProgress\": 0.5,\n  \"behavioralProgress\": 0.3,\n  \"examples\": [\n    {\n      \"objectiveType\": \"cognitive\",\n      \"description\": \"例の説明\",\n      \"chapterNumber\": 5\n    }\n  ],\n  \"gaps\": [\n    \"ギャップ1\",\n    \"ギャップ2\"\n  ]\n}\n`",
            "fullLength": 446,
            "variables": [
              {
                "type": "template_literal",
                "name": "${contextInfo}"
              },
              {
                "type": "handlebars",
                "name": "{contextInfo}"
              },
              {
                "type": "handlebars",
                "name": "{\n  \"cognitiveProgress\": 0.7,\n  \"affectiveProgress\": 0.5,\n  \"behavioralProgress\": 0.3,\n  \"examples\": [\n    {\n      \"objectiveType\": \"cognitive\",\n      \"description\": \"例の説明\",\n      \"chapterNumber\": 5\n    }"
              }
            ],
            "purpose": "content_analysis"
          },
          {
            "file": "src\\lib\\plot\\section\\section-analyzer.ts",
            "type": "template_literal",
            "content": "`\nあなたは物語の感情分析の専門家です。\n以下のセクション「${section.structure.title}」の計画された感情アークと、実際の章の内容に基づいて、感情アークの実現度を分析してください。\n\n【計画された感情アーク】\n- 開始: ${emotionalArc.opening}\n- 中間点: ${emotionalArc.midpoint}\n- 結末: ${emotionalArc.conclusion}\n\n【計画された緊張ポイント】\n${tensionPoints.map((tp, i) => `",
            "fullLength": 259,
            "variables": [
              {
                "type": "template_literal",
                "name": "${section.structure.title}"
              },
              {
                "type": "template_literal",
                "name": "${emotionalArc.opening}"
              },
              {
                "type": "template_literal",
                "name": "${emotionalArc.midpoint}"
              },
              {
                "type": "template_literal",
                "name": "${emotionalArc.conclusion}"
              },
              {
                "type": "handlebars",
                "name": "{section.structure.title}"
              },
              {
                "type": "handlebars",
                "name": "{emotionalArc.opening}"
              },
              {
                "type": "handlebars",
                "name": "{emotionalArc.midpoint}"
              },
              {
                "type": "handlebars",
                "name": "{emotionalArc.conclusion}"
              }
            ],
            "purpose": "story_generation"
          },
          {
            "file": "src\\lib\\plot\\section\\section-analyzer.ts",
            "type": "template_literal",
            "content": "`).join('\\n')}\n\n【計画されたカタルシスの瞬間】\n位置: ${catharticMoment.relativePosition}, タイプ: ${catharticMoment.type}, 説明: ${catharticMoment.description}\n\n【章の内容概要】\n${chapters.map(ch => `",
            "fullLength": 170,
            "variables": [
              {
                "type": "template_literal",
                "name": "${catharticMoment.relativePosition}"
              },
              {
                "type": "template_literal",
                "name": "${catharticMoment.type}"
              },
              {
                "type": "template_literal",
                "name": "${catharticMoment.description}"
              },
              {
                "type": "handlebars",
                "name": "{catharticMoment.relativePosition}"
              },
              {
                "type": "handlebars",
                "name": "{catharticMoment.type}"
              },
              {
                "type": "handlebars",
                "name": "{catharticMoment.description}"
              }
            ],
            "purpose": "unknown"
          },
          {
            "file": "src\\lib\\plot\\section\\section-analyzer.ts",
            "type": "template_literal",
            "content": "`).join('\\n')}\n\n${contextInfo}\n\n以下の観点から感情アークの実現度を分析してください:\n1. 全体的な実現度（0.0〜1.0）\n2. 段階ごとの実現度（開始、中間点、結末）\n3. 緊張ポイントの実現\n4. カタルシスの実現\n\n結果はJSON形式で、次のフォーマットで出力してください:\n{\n  \"overallRealization\": 0.7,\n  \"stageRealization\": {\n    \"opening\": 0.8,\n    \"midpoint\": 0.6,\n    \"conclusion\": 0.7\n  },\n  \"tensionPointsRealization\": [\n    {\n      \"planned\": {\n        \"relativePosition\": 0.3,\n        \"intensity\": 0.7,\n        \"description\": \"緊張ポイントの説明\"\n      },\n      \"actual\": {\n        \"chapter\": 5,\n        \"intensity\"...",
            "fullLength": 671,
            "variables": [
              {
                "type": "template_literal",
                "name": "${contextInfo}"
              },
              {
                "type": "handlebars",
                "name": "{contextInfo}"
              },
              {
                "type": "handlebars",
                "name": "{\n  \"overallRealization\": 0.7,\n  \"stageRealization\": {\n    \"opening\": 0.8,\n    \"midpoint\": 0.6,\n    \"conclusion\": 0.7\n  }"
              },
              {
                "type": "handlebars",
                "name": "{\n      \"planned\": {\n        \"relativePosition\": 0.3,\n        \"intensity\": 0.7,\n        \"description\": \"緊張ポイントの説明\"\n      }"
              },
              {
                "type": "handlebars",
                "name": "{\n        \"chapter\": 5,\n        \"intensity\": 0.6,\n        \"description\": \"実際の描写\"\n      }"
              },
              {
                "type": "handlebars",
                "name": "{\n    \"realized\": true,\n    \"actualChapter\": 8,\n    \"description\": \"実際のカタルシスの描写\"\n  }"
              }
            ],
            "purpose": "content_analysis"
          },
          {
            "file": "src\\lib\\plot\\section\\section-analyzer.ts",
            "type": "template_literal",
            "content": "`\nあなたは物語構造と学習内容の改善アドバイザーです。\n以下のセクション「${section.structure.title}」の分析結果に基づいて、具体的な改善提案を作成してください。\n\n【セクション情報】\n- テーマ: ${section.structure.theme}\n- 主要概念: ${section.learningJourneyDesign.mainConcept}\n- 学習段階: ${section.learningJourneyDesign.primaryLearningStage}\n- 章範囲: ${section.chapterRange.start}〜${section.chapterRange.end}章\n\n【一貫性分析結果】\n全体スコア: ${coherenceAnalysis.overallScore}/10\n問題領域: \n${coherenceAnalysis.problematicAreas.map(area => `",
            "fullLength": 432,
            "variables": [
              {
                "type": "template_literal",
                "name": "${section.structure.title}"
              },
              {
                "type": "template_literal",
                "name": "${section.structure.theme}"
              },
              {
                "type": "template_literal",
                "name": "${section.learningJourneyDesign.mainConcept}"
              },
              {
                "type": "template_literal",
                "name": "${section.learningJourneyDesign.primaryLearningStage}"
              },
              {
                "type": "template_literal",
                "name": "${section.chapterRange.start}"
              },
              {
                "type": "template_literal",
                "name": "${section.chapterRange.end}"
              },
              {
                "type": "template_literal",
                "name": "${coherenceAnalysis.overallScore}"
              },
              {
                "type": "handlebars",
                "name": "{section.structure.title}"
              },
              {
                "type": "handlebars",
                "name": "{section.structure.theme}"
              },
              {
                "type": "handlebars",
                "name": "{section.learningJourneyDesign.mainConcept}"
              },
              {
                "type": "handlebars",
                "name": "{section.learningJourneyDesign.primaryLearningStage}"
              },
              {
                "type": "handlebars",
                "name": "{section.chapterRange.start}"
              },
              {
                "type": "handlebars",
                "name": "{section.chapterRange.end}"
              },
              {
                "type": "handlebars",
                "name": "{coherenceAnalysis.overallScore}"
              }
            ],
            "purpose": "story_generation"
          },
          {
            "file": "src\\lib\\plot\\section\\section-analyzer.ts",
            "type": "template_literal",
            "content": "`).join('\\n')}\n\n【感情アーク実現度】\n全体実現度: ${Math.round(emotionalArcProgress.overallRealization * 100)}%\nカタルシス実現: ${emotionalArcProgress.catharticRealization.realized ? '達成済み' : '未達成'}\n\n${contextInfo}\n\n以下の領域で改善提案を作成してください:\n1. テーマ/一貫性の改善\n2. キャラクター開発の改善\n3. 学習内容の改善\n4. 感情表現の改善\n5. ペース配分の改善\n\n結果はJSONの配列形式で、次のフォーマットで出力してください:\n[\n  {\n    \"area\": \"theme\",\n    \"suggestion\": \"改善提案の詳細\",\n    \"targetChapters\": [5, 6, 7],\n    \"priority\": 4\n  }\n]\n\nareaは'theme'|'character'|'learning'|'emotion'|'plot'|'pacing'のいずれかを使用し、prio...",
            "fullLength": 530,
            "variables": [
              {
                "type": "template_literal",
                "name": "${Math.round(emotionalArcProgress.overallRealization * 100)}"
              },
              {
                "type": "template_literal",
                "name": "${emotionalArcProgress.catharticRealization.realized ? '達成済み' : '未達成'}"
              },
              {
                "type": "template_literal",
                "name": "${contextInfo}"
              },
              {
                "type": "handlebars",
                "name": "{Math.round(emotionalArcProgress.overallRealization * 100)}"
              },
              {
                "type": "handlebars",
                "name": "{emotionalArcProgress.catharticRealization.realized ? '達成済み' : '未達成'}"
              },
              {
                "type": "handlebars",
                "name": "{contextInfo}"
              },
              {
                "type": "handlebars",
                "name": "{\n    \"area\": \"theme\",\n    \"suggestion\": \"改善提案の詳細\",\n    \"targetChapters\": [5, 6, 7],\n    \"priority\": 4\n  }"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 10
      },
      {
        "file": "src\\lib\\plot\\section\\section-analyzer.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 4
          },
          {
            "format": "structuredOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-bridge.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 10
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-designer.ts",
        "line": 165,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 163,
            "content": "// AIによる生成を実行",
            "isCurrent": false
          },
          {
            "line": 164,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 165,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "isCurrent": true
          },
          {
            "line": 166,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 167,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-designer.ts",
        "line": 264,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 262,
            "content": "// AIによる生成を実行",
            "isCurrent": false
          },
          {
            "line": 263,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 264,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "isCurrent": true
          },
          {
            "line": 265,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 266,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-designer.ts",
        "line": 349,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 347,
            "content": "// AIによる生成を実行",
            "isCurrent": false
          },
          {
            "line": 348,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 349,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "isCurrent": true
          },
          {
            "line": 350,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 351,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-designer.ts",
        "line": 442,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 440,
            "content": "// AIによる生成を実行",
            "isCurrent": false
          },
          {
            "line": 441,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 442,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "isCurrent": true
          },
          {
            "line": 443,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 444,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-designer.ts",
        "line": 685,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 683,
            "content": "// AIによる生成を実行",
            "isCurrent": false
          },
          {
            "line": 684,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 685,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "isCurrent": true
          },
          {
            "line": 686,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 687,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-designer.ts",
        "line": 853,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 851,
            "content": "// AIによる生成を実行",
            "isCurrent": false
          },
          {
            "line": 852,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 853,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "isCurrent": true
          },
          {
            "line": 854,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 855,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-designer.ts",
        "line": 1005,
        "category": "geminiCalls",
        "pattern": "\\.generateText\\s*\\(",
        "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 1003,
            "content": "// AIによる生成を実行",
            "isCurrent": false
          },
          {
            "line": 1004,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 1005,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "isCurrent": true
          },
          {
            "line": 1006,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 1007,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-designer.ts",
        "line": 165,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 163,
            "content": "// AIによる生成を実行",
            "isCurrent": false
          },
          {
            "line": 164,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 165,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "isCurrent": true
          },
          {
            "line": 166,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 167,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-designer.ts",
        "line": 264,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 262,
            "content": "// AIによる生成を実行",
            "isCurrent": false
          },
          {
            "line": 263,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 264,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "isCurrent": true
          },
          {
            "line": 265,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 266,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-designer.ts",
        "line": 349,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 347,
            "content": "// AIによる生成を実行",
            "isCurrent": false
          },
          {
            "line": 348,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 349,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "isCurrent": true
          },
          {
            "line": 350,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 351,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-designer.ts",
        "line": 442,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 440,
            "content": "// AIによる生成を実行",
            "isCurrent": false
          },
          {
            "line": 441,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 442,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "isCurrent": true
          },
          {
            "line": 443,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 444,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-designer.ts",
        "line": 685,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 683,
            "content": "// AIによる生成を実行",
            "isCurrent": false
          },
          {
            "line": 684,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 685,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "isCurrent": true
          },
          {
            "line": 686,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 687,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-designer.ts",
        "line": 853,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 851,
            "content": "// AIによる生成を実行",
            "isCurrent": false
          },
          {
            "line": 852,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 853,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "isCurrent": true
          },
          {
            "line": 854,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 855,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-designer.ts",
        "line": 1005,
        "category": "geminiCalls",
        "pattern": "geminiClient\\.",
        "context": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
        "method": "throttledRequest",
        "class": "unknown",
        "surrounding": [
          {
            "line": 1003,
            "content": "// AIによる生成を実行",
            "isCurrent": false
          },
          {
            "line": 1004,
            "content": "const response = await apiThrottler.throttledRequest(() =>",
            "isCurrent": false
          },
          {
            "line": 1005,
            "content": "this.geminiClient.generateText(prompt, { responseFormat: \"json\" })",
            "isCurrent": true
          },
          {
            "line": 1006,
            "content": ");",
            "isCurrent": false
          },
          {
            "line": 1007,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-designer.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\plot\\section\\section-designer.ts",
            "type": "template_literal",
            "content": "`\r\nあなたは物語構造設計の専門家です。\r\n以下の情報に基づいて、${chapterCount}章からなるセクション「${section.structure.title}」の重要シーンを3-5つ設計してください。\r\n\r\n【セクション情報】\r\n- テーマ: ${section.structure.theme}\r\n- 物語フェーズ: ${section.structure.narrativePhase}\r\n- 主要概念: ${learning.mainConcept}\r\n- 学習段階: ${learning.primaryLearningStage}\r\n- 感情アーク: ${emotion.emotionalArc.opening} → ${emotion.emotionalArc.midpoint} → ${emotion.emotionalArc.conclusion}\r\n\r\n各シーンには以下の情報を含めてください:\r\n1. 説明: シーンの内容\r\n2. 目的: シーンが物語に果たす役割\r\n3. 相対位置: 0.0〜1.0の値でセクション内での位置\r\n4. 学習との関連: 主要概念や学...",
            "fullLength": 694,
            "variables": [
              {
                "type": "template_literal",
                "name": "${chapterCount}"
              },
              {
                "type": "template_literal",
                "name": "${section.structure.title}"
              },
              {
                "type": "template_literal",
                "name": "${section.structure.theme}"
              },
              {
                "type": "template_literal",
                "name": "${section.structure.narrativePhase}"
              },
              {
                "type": "template_literal",
                "name": "${learning.mainConcept}"
              },
              {
                "type": "template_literal",
                "name": "${learning.primaryLearningStage}"
              },
              {
                "type": "template_literal",
                "name": "${emotion.emotionalArc.opening}"
              },
              {
                "type": "template_literal",
                "name": "${emotion.emotionalArc.midpoint}"
              },
              {
                "type": "template_literal",
                "name": "${emotion.emotionalArc.conclusion}"
              },
              {
                "type": "handlebars",
                "name": "{chapterCount}"
              },
              {
                "type": "handlebars",
                "name": "{section.structure.title}"
              },
              {
                "type": "handlebars",
                "name": "{section.structure.theme}"
              },
              {
                "type": "handlebars",
                "name": "{section.structure.narrativePhase}"
              },
              {
                "type": "handlebars",
                "name": "{learning.mainConcept}"
              },
              {
                "type": "handlebars",
                "name": "{learning.primaryLearningStage}"
              },
              {
                "type": "handlebars",
                "name": "{emotion.emotionalArc.opening}"
              },
              {
                "type": "handlebars",
                "name": "{emotion.emotionalArc.midpoint}"
              },
              {
                "type": "handlebars",
                "name": "{emotion.emotionalArc.conclusion}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"description\": \"シーンの説明\",\r\n    \"purpose\": \"シーンの目的\",\r\n    \"relativePosition\": 0.2,\r\n    \"learningConnection\": \"学習との関連\"\r\n  }"
              }
            ],
            "purpose": "story_generation"
          },
          {
            "file": "src\\lib\\plot\\section\\section-designer.ts",
            "type": "template_literal",
            "content": "`\r\nあなたは物語構造設計の専門家です。\r\n以下の情報に基づいて、${chapterCount}章からなるセクション「${section.structure.title}」のターニングポイントを2-3つ設計してください。\r\n\r\n【セクション情報】\r\n- テーマ: ${section.structure.theme}\r\n- 物語フェーズ: ${section.structure.narrativePhase}\r\n- 主要概念: ${learning.mainConcept}\r\n- 学習段階: ${learning.primaryLearningStage}\r\n- 感情アーク: ${emotion.emotionalArc.opening} → ${emotion.emotionalArc.midpoint} → ${emotion.emotionalArc.conclusion}\r\n\r\n各ターニングポイントには以下の情報を含めてください:\r\n1. 説明: 何が起こるか\r\n2. 影響: 物語や登場人物への影響\r\n3. 相対位置: 0.0〜1.0の値でセクション内での位置\r\n\r\n結果はJSO...",
            "fullLength": 641,
            "variables": [
              {
                "type": "template_literal",
                "name": "${chapterCount}"
              },
              {
                "type": "template_literal",
                "name": "${section.structure.title}"
              },
              {
                "type": "template_literal",
                "name": "${section.structure.theme}"
              },
              {
                "type": "template_literal",
                "name": "${section.structure.narrativePhase}"
              },
              {
                "type": "template_literal",
                "name": "${learning.mainConcept}"
              },
              {
                "type": "template_literal",
                "name": "${learning.primaryLearningStage}"
              },
              {
                "type": "template_literal",
                "name": "${emotion.emotionalArc.opening}"
              },
              {
                "type": "template_literal",
                "name": "${emotion.emotionalArc.midpoint}"
              },
              {
                "type": "template_literal",
                "name": "${emotion.emotionalArc.conclusion}"
              },
              {
                "type": "handlebars",
                "name": "{chapterCount}"
              },
              {
                "type": "handlebars",
                "name": "{section.structure.title}"
              },
              {
                "type": "handlebars",
                "name": "{section.structure.theme}"
              },
              {
                "type": "handlebars",
                "name": "{section.structure.narrativePhase}"
              },
              {
                "type": "handlebars",
                "name": "{learning.mainConcept}"
              },
              {
                "type": "handlebars",
                "name": "{learning.primaryLearningStage}"
              },
              {
                "type": "handlebars",
                "name": "{emotion.emotionalArc.opening}"
              },
              {
                "type": "handlebars",
                "name": "{emotion.emotionalArc.midpoint}"
              },
              {
                "type": "handlebars",
                "name": "{emotion.emotionalArc.conclusion}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"description\": \"ターニングポイントの説明\",\r\n    \"impact\": \"影響\",\r\n    \"relativePosition\": 0.33\r\n  }"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\plot\\section\\section-designer.ts",
            "type": "template_literal",
            "content": "`\r\nあなたは物語構造設計の専門家です。\r\n以下の情報に基づいて、セクション「${section.structure.title}」の物語スレッド（プロットライン）を2-3つ設計してください。\r\n\r\n【セクション情報】\r\n- テーマ: ${theme}\r\n- 主要概念: ${learning.mainConcept}\r\n- 学習段階: ${learning.primaryLearningStage}\r\n- 変容の弧: ${learning.transformationalArc.startingState} → ${learning.transformationalArc.endState}\r\n\r\n各スレッドには以下の情報を含めてください:\r\n1. スレッド名: スレッドの種類や焦点\r\n2. 発展プロセス: どのように展開するか\r\n\r\n結果はJSONの配列形式で、以下のフォーマットで出力してください:\r\n[\r\n  {\r\n    \"thread\": \"スレッド名\",\r\n    \"development\": \"発展プロセス\"\r\n  },\r\n  ...\r\n]\r\n`",
            "fullLength": 486,
            "variables": [
              {
                "type": "template_literal",
                "name": "${section.structure.title}"
              },
              {
                "type": "template_literal",
                "name": "${theme}"
              },
              {
                "type": "template_literal",
                "name": "${learning.mainConcept}"
              },
              {
                "type": "template_literal",
                "name": "${learning.primaryLearningStage}"
              },
              {
                "type": "template_literal",
                "name": "${learning.transformationalArc.startingState}"
              },
              {
                "type": "template_literal",
                "name": "${learning.transformationalArc.endState}"
              },
              {
                "type": "handlebars",
                "name": "{section.structure.title}"
              },
              {
                "type": "handlebars",
                "name": "{theme}"
              },
              {
                "type": "handlebars",
                "name": "{learning.mainConcept}"
              },
              {
                "type": "handlebars",
                "name": "{learning.primaryLearningStage}"
              },
              {
                "type": "handlebars",
                "name": "{learning.transformationalArc.startingState}"
              },
              {
                "type": "handlebars",
                "name": "{learning.transformationalArc.endState}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"thread\": \"スレッド名\",\r\n    \"development\": \"発展プロセス\"\r\n  }"
              }
            ],
            "purpose": "story_generation"
          },
          {
            "file": "src\\lib\\plot\\section\\section-designer.ts",
            "type": "template_literal",
            "content": "`\r\nあなたは物語構造設計の専門家です。\r\n以下の情報に基づいて、セクション「${structure.title}」の伏線を2-4つ設計してください。\r\n${hasNextSection ? '次のセクションに回収される伏線も含めてください。' : 'このセクション内で回収される伏線を設計してください。'}\r\n\r\n【セクション情報】\r\n- テーマ: ${structure.theme}\r\n- 物語フェーズ: ${narrativePhase}\r\n- 章範囲: ${section.chapterRange.start}〜${section.chapterRange.end}章\r\n\r\n各伏線には以下の情報を含めてください:\r\n1. 要素: 伏線の内容\r\n2. 設置ポイント: どの章に設置するか (章番号)\r\n3. 回収予定セクション: 回収するセクション番号 (オプション)\r\n\r\n結果はJSONの配列形式で、以下のフォーマットで出力してください:\r\n[\r\n  {\r\n    \"element\": \"伏線の要素\",\r\n    \"plantingPoint\": 5,\r\n    \"payoffSe...",
            "fullLength": 528,
            "variables": [
              {
                "type": "template_literal",
                "name": "${structure.title}"
              },
              {
                "type": "template_literal",
                "name": "${hasNextSection ? '次のセクションに回収される伏線も含めてください。' : 'このセクション内で回収される伏線を設計してください。'}"
              },
              {
                "type": "template_literal",
                "name": "${structure.theme}"
              },
              {
                "type": "template_literal",
                "name": "${narrativePhase}"
              },
              {
                "type": "template_literal",
                "name": "${section.chapterRange.start}"
              },
              {
                "type": "template_literal",
                "name": "${section.chapterRange.end}"
              },
              {
                "type": "handlebars",
                "name": "{structure.title}"
              },
              {
                "type": "handlebars",
                "name": "{hasNextSection ? '次のセクションに回収される伏線も含めてください。' : 'このセクション内で回収される伏線を設計してください。'}"
              },
              {
                "type": "handlebars",
                "name": "{structure.theme}"
              },
              {
                "type": "handlebars",
                "name": "{narrativePhase}"
              },
              {
                "type": "handlebars",
                "name": "{section.chapterRange.start}"
              },
              {
                "type": "handlebars",
                "name": "{section.chapterRange.end}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"element\": \"伏線の要素\",\r\n    \"plantingPoint\": 5,\r\n    \"payoffSection\": 2\r\n  }"
              }
            ],
            "purpose": "story_generation"
          },
          {
            "file": "src\\lib\\plot\\section\\section-designer.ts",
            "type": "template_literal",
            "content": "`\r\nあなたは物語の感情設計の専門家です。\r\n以下の情報に基づいて、セクション「${structure.title}」の感情アークと読者体験を設計してください。\r\n\r\n【セクション情報】\r\n- テーマ: ${structure.theme}\r\n- 物語フェーズ: ${structure.narrativePhase}\r\n- 主要概念: ${learning.mainConcept}\r\n- 学習段階: ${learning.primaryLearningStage}\r\n- 変容の弧: ${learning.transformationalArc.startingState} → ${learning.transformationalArc.endState}\r\n\r\n感情設計には以下の要素を含めてください:\r\n1. 感情の弧: 開始・中間・結末の感情トーン\r\n2. 緊張ポイント: 2-3つの感情的緊張のポイント（相対位置と強度）\r\n3. カタルシスの瞬間: 感情的解放や洞察の重要な瞬間\r\n4. 読者感情の旅: 全体を通じた読者の感情体験\r\n5. 感情的リターン: 最終的な感情的満足や学び\r...",
            "fullLength": 1000,
            "variables": [
              {
                "type": "template_literal",
                "name": "${structure.title}"
              },
              {
                "type": "template_literal",
                "name": "${structure.theme}"
              },
              {
                "type": "template_literal",
                "name": "${structure.narrativePhase}"
              },
              {
                "type": "template_literal",
                "name": "${learning.mainConcept}"
              },
              {
                "type": "template_literal",
                "name": "${learning.primaryLearningStage}"
              },
              {
                "type": "template_literal",
                "name": "${learning.transformationalArc.startingState}"
              },
              {
                "type": "template_literal",
                "name": "${learning.transformationalArc.endState}"
              },
              {
                "type": "handlebars",
                "name": "{structure.title}"
              },
              {
                "type": "handlebars",
                "name": "{structure.theme}"
              },
              {
                "type": "handlebars",
                "name": "{structure.narrativePhase}"
              },
              {
                "type": "handlebars",
                "name": "{learning.mainConcept}"
              },
              {
                "type": "handlebars",
                "name": "{learning.primaryLearningStage}"
              },
              {
                "type": "handlebars",
                "name": "{learning.transformationalArc.startingState}"
              },
              {
                "type": "handlebars",
                "name": "{learning.transformationalArc.endState}"
              },
              {
                "type": "handlebars",
                "name": "{\r\n  \"emotionalArc\": {\r\n    \"opening\": \"開始時の感情トーン\",\r\n    \"midpoint\": \"中間点の感情トーン\",\r\n    \"conclusion\": \"結末の感情トーン\"\r\n  }"
              },
              {
                "type": "handlebars",
                "name": "{\r\n      \"relativePosition\": 0.3,\r\n      \"intensity\": 0.7,\r\n      \"description\": \"緊張ポイントの説明\"\r\n    }"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"relativePosition\": 0.85,\r\n    \"type\": \"intellectual\",\r\n    \"description\": \"カタルシスの説明\"\r\n  }"
              }
            ],
            "purpose": "story_generation"
          },
          {
            "file": "src\\lib\\plot\\section\\section-designer.ts",
            "type": "template_literal",
            "content": "`\r\nあなたは物語のキャラクター設計の専門家です。\r\n以下の情報に基づいて、セクション「${structure.title}」の登場人物の変化と関係性を設計してください。\r\n\r\n【セクション情報】\r\n- テーマ: ${structure.theme}\r\n- 主要概念: ${learning.mainConcept}\r\n- 学習段階: ${learning.primaryLearningStage}\r\n- 感情アーク: ${emotion.emotionalArc.opening} → ${emotion.emotionalArc.midpoint} → ${emotion.emotionalArc.conclusion}\r\n\r\n【主要キャラクター】\r\n${mainCharacters.map(char => `",
            "fullLength": 360,
            "variables": [
              {
                "type": "template_literal",
                "name": "${structure.title}"
              },
              {
                "type": "template_literal",
                "name": "${structure.theme}"
              },
              {
                "type": "template_literal",
                "name": "${learning.mainConcept}"
              },
              {
                "type": "template_literal",
                "name": "${learning.primaryLearningStage}"
              },
              {
                "type": "template_literal",
                "name": "${emotion.emotionalArc.opening}"
              },
              {
                "type": "template_literal",
                "name": "${emotion.emotionalArc.midpoint}"
              },
              {
                "type": "template_literal",
                "name": "${emotion.emotionalArc.conclusion}"
              },
              {
                "type": "handlebars",
                "name": "{structure.title}"
              },
              {
                "type": "handlebars",
                "name": "{structure.theme}"
              },
              {
                "type": "handlebars",
                "name": "{learning.mainConcept}"
              },
              {
                "type": "handlebars",
                "name": "{learning.primaryLearningStage}"
              },
              {
                "type": "handlebars",
                "name": "{emotion.emotionalArc.opening}"
              },
              {
                "type": "handlebars",
                "name": "{emotion.emotionalArc.midpoint}"
              },
              {
                "type": "handlebars",
                "name": "{emotion.emotionalArc.conclusion}"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\plot\\section\\section-designer.ts",
            "type": "template_literal",
            "content": "`).join('\\n')}\r\n\r\nキャラクター設計には以下の要素を含めてください:\r\n1. キャラクターの役割: 各キャラクターの学習における役割と物語機能\r\n2. 関係性の発展: 2-3組のキャラクター間の関係性の変化\r\n3. 個別キャラクターの変容: 各キャラクターの内的変化と成長\r\n\r\n結果はJSON形式で、次のフォーマットで出力してください:\r\n{\r\n  \"characterRoles\": {\r\n    \"キャラクター名1\": {\r\n      \"learningRole\": \"mentor\",\r\n      \"narrativeFunction\": \"機能の説明\"\r\n    },\r\n    ...\r\n  },\r\n  \"relationshipDevelopments\": [\r\n    {\r\n      \"characters\": [\"キャラクター名1\", \"キャラクター名2\"],\r\n      \"startingDynamic\": \"初期関係性\",\r\n      \"evolution\": \"発展プロセス\",\r\n      \"endDynamic\": \"最終関係性\"\r\n   ...",
            "fullLength": 746,
            "variables": [
              {
                "type": "handlebars",
                "name": "{\r\n  \"characterRoles\": {\r\n    \"キャラクター名1\": {\r\n      \"learningRole\": \"mentor\",\r\n      \"narrativeFunction\": \"機能の説明\"\r\n    }"
              },
              {
                "type": "handlebars",
                "name": "{\r\n      \"characters\": [\"キャラクター名1\", \"キャラクター名2\"],\r\n      \"startingDynamic\": \"初期関係性\",\r\n      \"evolution\": \"発展プロセス\",\r\n      \"endDynamic\": \"最終関係性\"\r\n    }"
              },
              {
                "type": "handlebars",
                "name": "{\r\n    \"キャラクター名1\": {\r\n      \"startingState\": \"初期状態\",\r\n      \"internalObstacles\": [\"障害1\", \"障害2\"],\r\n      \"growthMoments\": [\"成長の瞬間1\", \"成長の瞬間2\"],\r\n      \"endState\": \"最終状態\"\r\n    }"
              }
            ],
            "purpose": "character_analysis"
          },
          {
            "file": "src\\lib\\plot\\section\\section-designer.ts",
            "type": "template_literal",
            "content": "`\r\nあなたは物語の章構成の専門家です。\r\n以下の情報に基づいて、セクション「${structure.title}」の${chapterCount}章分の概要を作成してください。\r\n\r\n【セクション情報】\r\n- テーマ: ${structure.theme}\r\n- 主要概念: ${learning.mainConcept}\r\n- 感情アーク: ${emotion.emotionalArc.opening} → ${emotion.emotionalArc.midpoint} → ${emotion.emotionalArc.conclusion}\r\n\r\n【重要なシーン】\r\n${narrative.keyScenes.map(scene => `",
            "fullLength": 326,
            "variables": [
              {
                "type": "template_literal",
                "name": "${structure.title}"
              },
              {
                "type": "template_literal",
                "name": "${chapterCount}"
              },
              {
                "type": "template_literal",
                "name": "${structure.theme}"
              },
              {
                "type": "template_literal",
                "name": "${learning.mainConcept}"
              },
              {
                "type": "template_literal",
                "name": "${emotion.emotionalArc.opening}"
              },
              {
                "type": "template_literal",
                "name": "${emotion.emotionalArc.midpoint}"
              },
              {
                "type": "template_literal",
                "name": "${emotion.emotionalArc.conclusion}"
              },
              {
                "type": "handlebars",
                "name": "{structure.title}"
              },
              {
                "type": "handlebars",
                "name": "{chapterCount}"
              },
              {
                "type": "handlebars",
                "name": "{structure.theme}"
              },
              {
                "type": "handlebars",
                "name": "{learning.mainConcept}"
              },
              {
                "type": "handlebars",
                "name": "{emotion.emotionalArc.opening}"
              },
              {
                "type": "handlebars",
                "name": "{emotion.emotionalArc.midpoint}"
              },
              {
                "type": "handlebars",
                "name": "{emotion.emotionalArc.conclusion}"
              }
            ],
            "purpose": "story_generation"
          },
          {
            "file": "src\\lib\\plot\\section\\section-designer.ts",
            "type": "template_literal",
            "content": "`).join('\\n')}\r\n\r\n各章の概要には以下の要素を含めてください:\r\n1. タイトル: 章の内容を反映したタイトル\r\n2. 概要: 100-150文字程度の章の概要\r\n3. 学習段階: その章の主な学習段階\r\n4. 感情トーン: その章の主な感情トーン\r\n5. 重要イベント: その章の重要なイベント（1-2つ）\r\n\r\n結果はJSONの配列形式で、各章に対して以下のフォーマットで出力してください:\r\n[\r\n  {\r\n    \"chapterNumber\": 5,\r\n    \"title\": \"章のタイトル\",\r\n    \"summary\": \"章の概要\",\r\n    \"learningStage\": \"EXPLORATION\",\r\n    \"emotionalTone\": \"好奇心と緊張\",\r\n    \"keyEvents\": [\"イベント1\", \"イベント2\"]\r\n  },\r\n  ...\r\n]\r\n`",
            "fullLength": 411,
            "variables": [
              {
                "type": "handlebars",
                "name": "{\r\n    \"chapterNumber\": 5,\r\n    \"title\": \"章のタイトル\",\r\n    \"summary\": \"章の概要\",\r\n    \"learningStage\": \"EXPLORATION\",\r\n    \"emotionalTone\": \"好奇心と緊張\",\r\n    \"keyEvents\": [\"イベント1\", \"イベント2\"]\r\n  }"
              }
            ],
            "purpose": "emotional_analysis"
          },
          {
            "file": "src\\lib\\plot\\section\\section-designer.ts",
            "type": "template_literal",
            "content": "`${section.structure.theme}についての探求が続く章です。${section.learningJourneyDesign.mainConcept}の概念が進展し、登場人物は新たな課題に直面します。`",
            "fullLength": 111,
            "variables": [
              {
                "type": "template_literal",
                "name": "${section.structure.theme}"
              },
              {
                "type": "template_literal",
                "name": "${section.learningJourneyDesign.mainConcept}"
              },
              {
                "type": "handlebars",
                "name": "{section.structure.theme}"
              },
              {
                "type": "handlebars",
                "name": "{section.learningJourneyDesign.mainConcept}"
              }
            ],
            "purpose": "character_analysis"
          }
        ],
        "count": 10
      },
      {
        "file": "src\\lib\\plot\\section\\section-designer.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 7
          },
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-plot-manager.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\plot\\section\\section-plot-manager.ts",
            "type": "template_literal",
            "content": "`Chapter range ${range.start}-${range.end} overlaps with existing section ${section.structure.title} (${existingRange.start}-${existingRange.end})`",
            "fullLength": 147,
            "variables": [
              {
                "type": "template_literal",
                "name": "${range.start}"
              },
              {
                "type": "template_literal",
                "name": "${range.end}"
              },
              {
                "type": "template_literal",
                "name": "${section.structure.title}"
              },
              {
                "type": "template_literal",
                "name": "${existingRange.start}"
              },
              {
                "type": "template_literal",
                "name": "${existingRange.end}"
              },
              {
                "type": "handlebars",
                "name": "{range.start}"
              },
              {
                "type": "handlebars",
                "name": "{range.end}"
              },
              {
                "type": "handlebars",
                "name": "{section.structure.title}"
              },
              {
                "type": "handlebars",
                "name": "{existingRange.start}"
              },
              {
                "type": "handlebars",
                "name": "{existingRange.end}"
              }
            ],
            "purpose": "unknown"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\plot\\section\\section-plot-manager.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\section-storage.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 3
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\section\\types.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 28
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\storage.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "yamlOutput",
            "count": 8
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\story-generation-bridge.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\types.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 9
          }
        ]
      },
      {
        "file": "src\\lib\\plot\\world-settings-manager.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "yamlOutput",
            "count": 5
          }
        ]
      },
      {
        "file": "src\\lib\\storage\\chapter-storage.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 1
          },
          {
            "format": "yamlOutput",
            "count": 5
          }
        ]
      },
      {
        "file": "src\\lib\\storage\\index copy.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\storage\\index.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\storage\\types.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\utils\\api-throttle.ts",
        "line": 174,
        "category": "apiCalls",
        "pattern": "request\\s*\\(",
        "context": "logger.debug(`Processing queued request (${nextRequest.priority}). Remaining queue: ${this.waitingRequests.length}`);",
        "method": "shift",
        "class": "unknown",
        "surrounding": [
          {
            "line": 172,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 173,
            "content": "try {",
            "isCurrent": false
          },
          {
            "line": 174,
            "content": "logger.debug(`Processing queued request (${nextRequest.priority}). Remaining queue: ${this.waitingRequests.length}`);",
            "isCurrent": true
          },
          {
            "line": 175,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 176,
            "content": "// リクエスト数をカウント",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\utils\\api-throttle.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\utils\\debug\\learning-journey-diagnostics.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\lib\\utils\\error-handler.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\utils\\helpers.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 2
          },
          {
            "format": "yamlOutput",
            "count": 13
          }
        ]
      },
      {
        "file": "src\\lib\\utils\\json-parser.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "jsonOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\lib\\utils\\logger.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 3
          }
        ]
      },
      {
        "file": "src\\lib\\utils\\prompt-storage.ts",
        "line": 129,
        "category": "promptGeneration",
        "pattern": "buildPrompt",
        "context": "const promptSection = this.buildPromptSection(prompt);",
        "method": "wnContent",
        "class": "unknown",
        "surrounding": [
          {
            "line": 127,
            "content": "): string {",
            "isCurrent": false
          },
          {
            "line": 128,
            "content": "const frontMatter = this.buildFrontMatter(metadata);",
            "isCurrent": false
          },
          {
            "line": 129,
            "content": "const promptSection = this.buildPromptSection(prompt);",
            "isCurrent": true
          },
          {
            "line": 130,
            "content": "const contextSection = this.buildContextSection(context);",
            "isCurrent": false
          },
          {
            "line": 131,
            "content": "const metadataSection = this.buildMetadataSection(metadata);",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\utils\\prompt-storage.ts",
        "line": 164,
        "category": "promptGeneration",
        "pattern": "buildPrompt",
        "context": "private buildPromptSection(prompt: string): string {",
        "method": "unknown",
        "class": "unknown",
        "surrounding": [
          {
            "line": 162,
            "content": "* プロンプトセクションの構築",
            "isCurrent": false
          },
          {
            "line": 163,
            "content": "*/",
            "isCurrent": false
          },
          {
            "line": 164,
            "content": "private buildPromptSection(prompt: string): string {",
            "isCurrent": true
          },
          {
            "line": 165,
            "content": "return `# 生成されたプロンプト",
            "isCurrent": false
          },
          {
            "line": 166,
            "content": "",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\utils\\prompt-storage.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\utils\\prompt-storage.ts",
            "type": "template_literal",
            "content": "`---\r\ntitle: \"第${metadata.chapterNumber}章 - プロンプト生成記録\"\r\nchapter: ${metadata.chapterNumber}\r\ntimestamp: \"${metadata.timestamp}\"\r\ntargetLength: ${metadata.targetLength}\r\ngenre: \"${metadata.genre || 'unknown'}\"\r\ntheme: \"${metadata.theme || 'unknown'}\"\r\ntension: ${metadata.tension || 'null'}\r\npacing: ${metadata.pacing || 'null'}\r\nmemorySystemUsed: ${metadata.memorySystemUsed}\r\nlearningJourneyIntegrated: ${metadata.learningJourneyIntegrated}\r\ngeneratedBy: \"ServiceContainer統合版 - ChapterGenerator\"\r\n---...",
            "fullLength": 501,
            "variables": [
              {
                "type": "template_literal",
                "name": "${metadata.chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${metadata.chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${metadata.timestamp}"
              },
              {
                "type": "template_literal",
                "name": "${metadata.targetLength}"
              },
              {
                "type": "template_literal",
                "name": "${metadata.genre || 'unknown'}"
              },
              {
                "type": "template_literal",
                "name": "${metadata.theme || 'unknown'}"
              },
              {
                "type": "template_literal",
                "name": "${metadata.tension || 'null'}"
              },
              {
                "type": "template_literal",
                "name": "${metadata.pacing || 'null'}"
              },
              {
                "type": "template_literal",
                "name": "${metadata.memorySystemUsed}"
              },
              {
                "type": "template_literal",
                "name": "${metadata.learningJourneyIntegrated}"
              },
              {
                "type": "handlebars",
                "name": "{metadata.chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{metadata.chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{metadata.timestamp}"
              },
              {
                "type": "handlebars",
                "name": "{metadata.targetLength}"
              },
              {
                "type": "handlebars",
                "name": "{metadata.genre || 'unknown'}"
              },
              {
                "type": "handlebars",
                "name": "{metadata.theme || 'unknown'}"
              },
              {
                "type": "handlebars",
                "name": "{metadata.tension || 'null'}"
              },
              {
                "type": "handlebars",
                "name": "{metadata.pacing || 'null'}"
              },
              {
                "type": "handlebars",
                "name": "{metadata.memorySystemUsed}"
              },
              {
                "type": "handlebars",
                "name": "{metadata.learningJourneyIntegrated}"
              }
            ],
            "purpose": "theme_analysis"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\utils\\prompt-storage.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "yamlOutput",
            "count": 1
          },
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\utils\\request-queue.ts",
        "line": 162,
        "category": "apiCalls",
        "pattern": "request\\s*\\(",
        "context": "logger.info(`Retrying request (attempt ${request.retryCount}/${request.maxRetries}) after ${backoffTime}ms`);",
        "method": "pow",
        "class": "unknown",
        "surrounding": [
          {
            "line": 160,
            "content": "(Math.random() * 1000);",
            "isCurrent": false
          },
          {
            "line": 161,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 162,
            "content": "logger.info(`Retrying request (attempt ${request.retryCount}/${request.maxRetries}) after ${backoffTime}ms`);",
            "isCurrent": true
          },
          {
            "line": 163,
            "content": "",
            "isCurrent": false
          },
          {
            "line": 164,
            "content": "// 待機後にキューの先頭に戻す",
            "isCurrent": false
          }
        ]
      },
      {
        "file": "src\\lib\\utils\\request-queue.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 1
          }
        ]
      },
      {
        "file": "src\\lib\\utils\\yaml-helper.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "yamlOutput",
            "count": 19
          }
        ]
      },
      {
        "file": "src\\lib\\validation\\consistency-checker.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\validation\\consistency-checker.ts",
            "type": "template_literal",
            "content": "`一貫性チェックシステムエラー (Chapter ${chapterNumber}): ${error instanceof Error ? error.message : String(error)}`",
            "fullLength": 102,
            "variables": [
              {
                "type": "template_literal",
                "name": "${chapterNumber}"
              },
              {
                "type": "template_literal",
                "name": "${error instanceof Error ? error.message : String(error)}"
              },
              {
                "type": "handlebars",
                "name": "{chapterNumber}"
              },
              {
                "type": "handlebars",
                "name": "{error instanceof Error ? error.message : String(error)}"
              }
            ],
            "purpose": "unknown"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\validation\\consistency-checker.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 3
          }
        ]
      },
      {
        "file": "src\\lib\\validation\\system.ts",
        "category": "promptTemplates",
        "templates": [
          {
            "file": "src\\lib\\validation\\system.ts",
            "type": "template_literal",
            "content": "`${improvement.component}: ${improvement.metric} improved by ${improvement.improvementPercent.toFixed(1)}%`",
            "fullLength": 107,
            "variables": [
              {
                "type": "template_literal",
                "name": "${improvement.component}"
              },
              {
                "type": "template_literal",
                "name": "${improvement.metric}"
              },
              {
                "type": "template_literal",
                "name": "${improvement.improvementPercent.toFixed(1)}"
              },
              {
                "type": "handlebars",
                "name": "{improvement.component}"
              },
              {
                "type": "handlebars",
                "name": "{improvement.metric}"
              },
              {
                "type": "handlebars",
                "name": "{improvement.improvementPercent.toFixed(1)}"
              }
            ],
            "purpose": "content_improvement"
          }
        ],
        "count": 1
      },
      {
        "file": "src\\lib\\validation\\system.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\types\\chapters.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\types\\characters.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 56
          }
        ]
      },
      {
        "file": "src\\types\\concepts.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 3
          }
        ]
      },
      {
        "file": "src\\types\\correction.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 13
          }
        ]
      },
      {
        "file": "src\\types\\editor.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 11
          }
        ]
      },
      {
        "file": "src\\types\\generation.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 43
          }
        ]
      },
      {
        "file": "src\\types\\literary.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 6
          }
        ]
      },
      {
        "file": "src\\types\\memory.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 35
          }
        ]
      },
      {
        "file": "src\\types\\parameters.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 4
          }
        ]
      },
      {
        "file": "src\\types\\section.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 2
          }
        ]
      },
      {
        "file": "src\\types\\validation.ts",
        "category": "outputFormats",
        "formats": [
          {
            "format": "structuredOutput",
            "count": 11
          }
        ]
      }
    ],
    "performanceImpacts": {
      "src\\app\\(public)\\chapters\\[id]\\page.tsx": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\app\\api\\generation\\chapter\\route copy.ts": {
        "score": 48,
        "factors": [
          "Large prompts: 16"
        ],
        "severity": "HIGH"
      },
      "src\\app\\api\\generation\\chapter\\route.ts": {
        "score": 54,
        "factors": [
          "Large prompts: 18"
        ],
        "severity": "HIGH"
      },
      "src\\app\\api\\generation\\test-prompt\\route.ts": {
        "score": 24,
        "factors": [
          "Large prompts: 8"
        ],
        "severity": "HIGH"
      },
      "src\\components\\admin\\analytics\\foreshadowing-tracker.tsx": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\components\\admin\\character-management\\character-editor.tsx": {
        "score": 6,
        "factors": [
          "Large prompts: 2"
        ],
        "severity": "MEDIUM"
      },
      "src\\components\\admin\\character-management\\character-list.tsx": {
        "score": 12,
        "factors": [
          "Large prompts: 4"
        ],
        "severity": "HIGH"
      },
      "src\\components\\admin\\dashboard\\dashboard-actions.tsx": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\components\\admin\\editor\\#\\quality-indicators copy 2.tsx": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\components\\admin\\editor\\#\\quality-indicators copy.tsx": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\components\\admin\\editor\\dashboard.tsx": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\components\\admin\\editor\\feedback-panel.tsx": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\components\\admin\\editor\\learning-insights-panel.tsx": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\components\\admin\\editor\\quality-indicators.tsx": {
        "score": 6,
        "factors": [
          "Large prompts: 2"
        ],
        "severity": "MEDIUM"
      },
      "src\\components\\admin\\editor\\quick-actions.tsx": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\components\\admin\\editor\\realtime-monitor.tsx": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\components\\admin\\memory-management\\memory-management.tsx": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\components\\public\\chapter-navigation.tsx": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\components\\public\\character-spotlight.tsx": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\components\\public\\latest-chapters.tsx": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\components\\public\\navigation.tsx": {
        "score": 9,
        "factors": [
          "Large prompts: 3"
        ],
        "severity": "MEDIUM"
      },
      "src\\components\\shared\\header.tsx": {
        "score": 9,
        "factors": [
          "Large prompts: 3"
        ],
        "severity": "MEDIUM"
      },
      "src\\components\\shared\\navigation.tsx": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\components\\ui\\card.tsx": {
        "score": 9,
        "factors": [
          "Large prompts: 3"
        ],
        "severity": "MEDIUM"
      },
      "src\\components\\ui\\charts.tsx": {
        "score": 9,
        "factors": [
          "Large prompts: 3"
        ],
        "severity": "MEDIUM"
      },
      "src\\components\\ui\\input.tsx": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\components\\ui\\select.tsx": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\components\\ui\\table.tsx": {
        "score": 9,
        "factors": [
          "Large prompts: 3"
        ],
        "severity": "MEDIUM"
      },
      "src\\components\\ui\\textarea.tsx": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\lib\\analysis\\adapters\\gemini-adapter.ts": {
        "score": 38,
        "factors": [
          "High AI call frequency: 7",
          "Large prompts: 8"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\analysis\\adapters\\storage-adapter.ts": {
        "score": 63,
        "factors": [
          "Large prompts: 21"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\analysis\\content-analysis-manager.ts": {
        "score": 15,
        "factors": [
          "Large prompts: 5"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts": {
        "score": 66,
        "factors": [
          "Large prompts: 22"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\analysis\\coordinators\\optimization-coordinator.ts": {
        "score": 30,
        "factors": [
          "Large prompts: 10"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\analysis\\core\\errors.ts": {
        "score": 9,
        "factors": [
          "Large prompts: 3"
        ],
        "severity": "MEDIUM"
      },
      "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts": {
        "score": 72,
        "factors": [
          "Large prompts: 24"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts": {
        "score": 78,
        "factors": [
          "Large prompts: 26"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts": {
        "score": 46,
        "factors": [
          "Large prompts: 14",
          "Synchronous calls: 4"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts": {
        "score": 45,
        "factors": [
          "Large prompts: 15"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts": {
        "score": 70,
        "factors": [
          "Large prompts: 22",
          "Synchronous calls: 4"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\analysis\\pipelines\\post-generation-pipeline.ts": {
        "score": 24,
        "factors": [
          "Large prompts: 8"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\analysis\\pipelines\\pre-generation-pipeline.ts": {
        "score": 15,
        "factors": [
          "Large prompts: 5"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts": {
        "score": 99,
        "factors": [
          "Large prompts: 33"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\analysis\\services\\character\\character-analysis-service.ts": {
        "score": 33,
        "factors": [
          "Large prompts: 11"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\analysis\\services\\narrative\\literary-comparison-system.ts": {
        "score": 12,
        "factors": [
          "Large prompts: 4"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\analysis\\services\\narrative\\narrative-analysis-service.ts": {
        "score": 33,
        "factors": [
          "Large prompts: 11"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts": {
        "score": 12,
        "factors": [
          "Large prompts: 4"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts": {
        "score": 6,
        "factors": [
          "Large prompts: 2"
        ],
        "severity": "MEDIUM"
      },
      "src\\lib\\analysis\\services\\style\\style-analysis-service.ts": {
        "score": 27,
        "factors": [
          "Large prompts: 9"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts": {
        "score": 175,
        "factors": [
          "High AI call frequency: 11",
          "Large prompts: 51"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\analysis\\utils\\analysis-formatter.ts": {
        "score": 12,
        "factors": [
          "Large prompts: 4"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\analysis\\utils\\arc-ttils.ts": {
        "score": 12,
        "factors": [
          "Large prompts: 4"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\analysis\\utils\\serialization-utils.ts": {
        "score": 18,
        "factors": [
          "Large prompts: 6"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\analyzers\\character-analyzer.ts": {
        "score": 30,
        "factors": [
          "Large prompts: 10"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\analyzers\\relationship-analyzer copy.ts": {
        "score": 18,
        "factors": [
          "Large prompts: 6"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\analyzers\\relationship-analyzer.ts": {
        "score": 36,
        "factors": [
          "Large prompts: 12"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\analyzers\\timing-analyzer.ts": {
        "score": 21,
        "factors": [
          "Large prompts: 7"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\core\\errors.ts": {
        "score": 9,
        "factors": [
          "Large prompts: 3"
        ],
        "severity": "MEDIUM"
      },
      "src\\lib\\characters\\events\\character-event-bus.ts": {
        "score": 15,
        "factors": [
          "Large prompts: 5"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\events\\handlers\\character-change-handler.ts": {
        "score": 42,
        "factors": [
          "Large prompts: 14"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\events\\handlers\\relationship-change-handler.ts": {
        "score": 54,
        "factors": [
          "Large prompts: 18"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\generators\\character-generator.ts": {
        "score": 35,
        "factors": [
          "Large prompts: 10",
          "Synchronous calls: 5"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\generators\\template-provider.ts": {
        "score": 18,
        "factors": [
          "Large prompts: 6"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\manager copy 2.ts": {
        "score": 39,
        "factors": [
          "Large prompts: 13"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\manager copy 3.ts": {
        "score": 105,
        "factors": [
          "Large prompts: 35"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\manager copy 4.ts": {
        "score": 105,
        "factors": [
          "Large prompts: 35"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\manager copy 5.ts": {
        "score": 9,
        "factors": [
          "Large prompts: 3"
        ],
        "severity": "MEDIUM"
      },
      "src\\lib\\characters\\manager copy.ts": {
        "score": 54,
        "factors": [
          "Large prompts: 18"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\manager.ts": {
        "score": 9,
        "factors": [
          "Large prompts: 3"
        ],
        "severity": "MEDIUM"
      },
      "src\\lib\\characters\\services\\character-service copy 2.ts": {
        "score": 45,
        "factors": [
          "Large prompts: 15"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\services\\character-service copy.ts": {
        "score": 36,
        "factors": [
          "Large prompts: 12"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\services\\character-service.ts": {
        "score": 57,
        "factors": [
          "Large prompts: 19"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\services\\detection-service copy 2.ts": {
        "score": 60,
        "factors": [
          "Large prompts: 20"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\services\\detection-service copy.ts": {
        "score": 30,
        "factors": [
          "Large prompts: 10"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\services\\detection-service.ts": {
        "score": 60,
        "factors": [
          "Large prompts: 20"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\services\\evolution-service copy 2.ts": {
        "score": 33,
        "factors": [
          "Large prompts: 11"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\services\\evolution-service copy.ts": {
        "score": 69,
        "factors": [
          "Large prompts: 23"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\services\\evolution-service.ts": {
        "score": 33,
        "factors": [
          "Large prompts: 11"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\services\\parameter-service copy 2.ts": {
        "score": 54,
        "factors": [
          "Large prompts: 18"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\services\\parameter-service copy.ts": {
        "score": 33,
        "factors": [
          "Large prompts: 11"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\services\\parameter-service.ts": {
        "score": 54,
        "factors": [
          "Large prompts: 18"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\services\\psychology-service copy 2.ts": {
        "score": 36,
        "factors": [
          "Large prompts: 12"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\services\\psychology-service copy.ts": {
        "score": 36,
        "factors": [
          "Large prompts: 12"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\services\\psychology-service.ts": {
        "score": 48,
        "factors": [
          "Large prompts: 16"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\services\\relationship-service copy 2.ts": {
        "score": 21,
        "factors": [
          "Large prompts: 7"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\services\\relationship-service copy.ts": {
        "score": 21,
        "factors": [
          "Large prompts: 7"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\services\\relationship-service.ts": {
        "score": 39,
        "factors": [
          "Large prompts: 13"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\services\\skill-service copy 2.ts": {
        "score": 99,
        "factors": [
          "Large prompts: 33"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\services\\skill-service copy.ts": {
        "score": 42,
        "factors": [
          "Large prompts: 14"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\services\\skill-service.ts": {
        "score": 99,
        "factors": [
          "Large prompts: 33"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\utils\\character-utils.ts": {
        "score": 30,
        "factors": [
          "Large prompts: 10"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\characters\\utils\\serialization-utils.ts": {
        "score": 18,
        "factors": [
          "Large prompts: 6"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\concept\\business-concept-library.ts": {
        "score": 24,
        "factors": [
          "Large prompts: 8"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\foreshadowing\\auto-generator.ts": {
        "score": 30,
        "factors": [
          "Large prompts: 10"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\foreshadowing\\engine.ts": {
        "score": 36,
        "factors": [
          "Large prompts: 12"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\foreshadowing\\index.ts": {
        "score": 27,
        "factors": [
          "Large prompts: 9"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\foreshadowing\\manager.ts": {
        "score": 45,
        "factors": [
          "Large prompts: 15"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\foreshadowing\\planned-foreshadowing-manager.ts": {
        "score": 36,
        "factors": [
          "Large prompts: 12"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\foreshadowing\\resolution-advisor.ts": {
        "score": 24,
        "factors": [
          "Large prompts: 8"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\generation\\context-generator copy.ts": {
        "score": 87,
        "factors": [
          "Large prompts: 29"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\generation\\context-generator.ts": {
        "score": 66,
        "factors": [
          "Large prompts: 22"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\generation\\engine\\chapter-generator copy.ts": {
        "score": 88,
        "factors": [
          "Large prompts: 28",
          "Synchronous calls: 4"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\generation\\engine\\chapter-generator.ts": {
        "score": 85,
        "factors": [
          "Large prompts: 27",
          "Synchronous calls: 4"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\generation\\engine\\text-parser.ts": {
        "score": 30,
        "factors": [
          "Large prompts: 10"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\generation\\engine copy 2.ts": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\lib\\generation\\engine copy 3.ts": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\lib\\generation\\engine copy 4.ts": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\lib\\generation\\engine copy.ts": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\lib\\generation\\engine.ts": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\lib\\generation\\gemini-client.ts": {
        "score": 39,
        "factors": [
          "High AI call frequency: 9",
          "Large prompts: 5",
          "Synchronous calls: 6"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\generation\\integrated-system-factory.ts": {
        "score": 15,
        "factors": [
          "Large prompts: 5"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\generation\\prompt\\memory-service.ts": {
        "score": 21,
        "factors": [
          "Large prompts: 7"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\generation\\prompt\\prompt-formatter.ts": {
        "score": 90,
        "factors": [
          "Large prompts: 30"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\generation\\prompt\\section-builder.ts": {
        "score": 81,
        "factors": [
          "Large prompts: 27"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\generation\\prompt\\template-manager.ts": {
        "score": 12,
        "factors": [
          "Large prompts: 4"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\generation\\prompt-generator copy 2.ts": {
        "score": 75,
        "factors": [
          "Large prompts: 25"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\generation\\prompt-generator copy.ts": {
        "score": 72,
        "factors": [
          "Large prompts: 24"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\generation\\prompt-generator.ts": {
        "score": 93,
        "factors": [
          "Large prompts: 31"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\learning-journey\\concept-learning-manager.ts": {
        "score": 84,
        "factors": [
          "Large prompts: 28"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\learning-journey\\context-manager.ts": {
        "score": 69,
        "factors": [
          "Large prompts: 23"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\learning-journey\\emotional-learning-integrator.ts": {
        "score": 84,
        "factors": [
          "Large prompts: 28"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\learning-journey\\event-bus.ts": {
        "score": 12,
        "factors": [
          "Large prompts: 4"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\learning-journey\\index.ts": {
        "score": 55,
        "factors": [
          "Large prompts: 17",
          "Synchronous calls: 4"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\learning-journey\\prompt-generator.ts": {
        "score": 42,
        "factors": [
          "Large prompts: 14"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\learning-journey\\story-transformation-designer.ts": {
        "score": 57,
        "factors": [
          "Large prompts: 19"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\lifecycle\\application-lifecycle-manager.ts": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\lib\\lifecycle\\service-container copy 2.ts": {
        "score": 9,
        "factors": [
          "Large prompts: 3"
        ],
        "severity": "MEDIUM"
      },
      "src\\lib\\lifecycle\\service-container copy 3.ts": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\lib\\lifecycle\\service-container copy.ts": {
        "score": 6,
        "factors": [
          "Large prompts: 2"
        ],
        "severity": "MEDIUM"
      },
      "src\\lib\\lifecycle\\service-container.ts": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\lib\\memory\\core\\data-integration-processor.ts": {
        "score": 36,
        "factors": [
          "Large prompts: 12"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\core\\memory-manager copy.ts": {
        "score": 30,
        "factors": [
          "Large prompts: 10"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\core\\memory-manager.ts": {
        "score": 30,
        "factors": [
          "Large prompts: 10"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\core\\unified-access-api.ts": {
        "score": 24,
        "factors": [
          "Large prompts: 8"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\integration\\access-optimizer.ts": {
        "score": 18,
        "factors": [
          "Large prompts: 6"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\integration\\cache-coordinator.ts": {
        "score": 60,
        "factors": [
          "Large prompts: 20"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\integration\\duplicate-resolver.ts": {
        "score": 42,
        "factors": [
          "Large prompts: 14"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\integration\\quality-assurance.ts": {
        "score": 42,
        "factors": [
          "Large prompts: 14"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\long-term\\character-database copy 2.ts": {
        "score": 60,
        "factors": [
          "Large prompts: 17",
          "Synchronous calls: 9"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\long-term\\character-database copy.ts": {
        "score": 39,
        "factors": [
          "Large prompts: 10",
          "Synchronous calls: 9"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\long-term\\character-database.ts": {
        "score": 60,
        "factors": [
          "Large prompts: 17",
          "Synchronous calls: 9"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\long-term\\consolidation-guard copy.ts": {
        "score": 15,
        "factors": [
          "Large prompts: 5"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\long-term\\consolidation-guard.ts": {
        "score": 21,
        "factors": [
          "Large prompts: 7"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\long-term\\duplicate-resolver.ts": {
        "score": 51,
        "factors": [
          "Large prompts: 17"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\long-term\\long-term-memory.ts": {
        "score": 30,
        "factors": [
          "Large prompts: 10"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\long-term\\system-knowledge.ts": {
        "score": 81,
        "factors": [
          "Large prompts: 27"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\long-term\\world-knowledge.ts": {
        "score": 33,
        "factors": [
          "Large prompts: 11"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\mid-term\\analysis-results.ts": {
        "score": 27,
        "factors": [
          "Large prompts: 9"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\mid-term\\character-evolution.ts": {
        "score": 45,
        "factors": [
          "Large prompts: 15"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\mid-term\\mid-term-memory.ts": {
        "score": 48,
        "factors": [
          "Large prompts: 16"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\mid-term\\narrative-progression.ts": {
        "score": 21,
        "factors": [
          "Large prompts: 7"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\mid-term\\quality-metrics.ts": {
        "score": 12,
        "factors": [
          "Large prompts: 4"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\mid-term\\system-statistics.ts": {
        "score": 9,
        "factors": [
          "Large prompts: 3"
        ],
        "severity": "MEDIUM"
      },
      "src\\lib\\memory\\short-term\\generation-cache.ts": {
        "score": 33,
        "factors": [
          "Large prompts: 11"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\short-term\\immediate-context.ts": {
        "score": 51,
        "factors": [
          "Large prompts: 17"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\short-term\\processing-buffers.ts": {
        "score": 60,
        "factors": [
          "Large prompts: 20"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\short-term\\short-term-memory.ts": {
        "score": 51,
        "factors": [
          "Large prompts: 17"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\short-term\\temporary-analysis.ts": {
        "score": 51,
        "factors": [
          "Large prompts: 17"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\storage\\backup-system.ts": {
        "score": 93,
        "factors": [
          "Large prompts: 31"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\storage\\cache-storage.ts": {
        "score": 24,
        "factors": [
          "Large prompts: 8"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\storage\\migration-tools.ts": {
        "score": 96,
        "factors": [
          "Large prompts: 32"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\storage\\persistent-storage.ts": {
        "score": 51,
        "factors": [
          "Large prompts: 17"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\memory\\text-analyzer-service.ts": {
        "score": 9,
        "factors": [
          "Large prompts: 3"
        ],
        "severity": "MEDIUM"
      },
      "src\\lib\\parameters\\manager.ts": {
        "score": 42,
        "factors": [
          "Large prompts: 14"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\plot\\checker.ts": {
        "score": 21,
        "factors": [
          "Large prompts: 7"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\plot\\context-builder.ts": {
        "score": 15,
        "factors": [
          "Large prompts: 5"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\plot\\index.ts": {
        "score": 6,
        "factors": [
          "Large prompts: 2"
        ],
        "severity": "MEDIUM"
      },
      "src\\lib\\plot\\manager copy.ts": {
        "score": 121,
        "factors": [
          "Large prompts: 39",
          "Synchronous calls: 4"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\plot\\manager.ts": {
        "score": 130,
        "factors": [
          "Large prompts: 42",
          "Synchronous calls: 4"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\plot\\phase-manager.ts": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\lib\\plot\\section\\index.ts": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\lib\\plot\\section\\section-analyzer.ts": {
        "score": 87,
        "factors": [
          "Large prompts: 29"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\plot\\section\\section-bridge.ts": {
        "score": 36,
        "factors": [
          "Large prompts: 12"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\plot\\section\\section-designer.ts": {
        "score": 82,
        "factors": [
          "High AI call frequency: 7",
          "Large prompts: 21",
          "Synchronous calls: 5"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\plot\\section\\section-plot-manager.ts": {
        "score": 57,
        "factors": [
          "Large prompts: 19"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\plot\\section\\section-storage.ts": {
        "score": 27,
        "factors": [
          "Large prompts: 9"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\plot\\storage.ts": {
        "score": 18,
        "factors": [
          "Large prompts: 6"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\plot\\story-generation-bridge.ts": {
        "score": 90,
        "factors": [
          "Large prompts: 30"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\plot\\world-settings-manager.ts": {
        "score": 15,
        "factors": [
          "Large prompts: 5"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\storage\\chapter-storage.ts": {
        "score": 30,
        "factors": [
          "Large prompts: 10"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\storage\\enhanced-storage.ts": {
        "score": 66,
        "factors": [
          "Large prompts: 22"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\storage\\github-storage.ts": {
        "score": 27,
        "factors": [
          "Large prompts: 9"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\storage\\index copy.ts": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\lib\\storage\\index.ts": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\lib\\storage\\local-storage.ts": {
        "score": 12,
        "factors": [
          "Large prompts: 4"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\storage\\storage-initializer.ts": {
        "score": 12,
        "factors": [
          "Large prompts: 4"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\storage\\types.ts": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\lib\\utils\\api-throttle.ts": {
        "score": 15,
        "factors": [
          "Large prompts: 5"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\utils\\debug\\learning-journey-diagnostics.ts": {
        "score": 15,
        "factors": [
          "Large prompts: 5"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\utils\\error-handler.ts": {
        "score": 6,
        "factors": [
          "Large prompts: 2"
        ],
        "severity": "MEDIUM"
      },
      "src\\lib\\utils\\helpers.ts": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\lib\\utils\\json-parser.ts": {
        "score": 3,
        "factors": [
          "Large prompts: 1"
        ],
        "severity": "LOW"
      },
      "src\\lib\\utils\\prompt-storage.ts": {
        "score": 27,
        "factors": [
          "Large prompts: 9"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\utils\\request-queue.ts": {
        "score": 12,
        "factors": [
          "Large prompts: 4"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\validation\\consistency-checker.ts": {
        "score": 36,
        "factors": [
          "Large prompts: 12"
        ],
        "severity": "HIGH"
      },
      "src\\lib\\validation\\system.ts": {
        "score": 63,
        "factors": [
          "Large prompts: 21"
        ],
        "severity": "HIGH"
      }
    },
    "duplicates": {
      "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts_src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts": {
        "files": [
          "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
          "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\characters\\manager copy 3.ts_src\\lib\\characters\\manager copy 4.ts": {
        "files": [
          "src\\lib\\characters\\manager copy 3.ts",
          "src\\lib\\characters\\manager copy 4.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\characters\\services\\psychology-service copy 2.ts_src\\lib\\characters\\services\\psychology-service copy.ts": {
        "files": [
          "src\\lib\\characters\\services\\psychology-service copy 2.ts",
          "src\\lib\\characters\\services\\psychology-service copy.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\characters\\services\\skill-service copy 2.ts_src\\lib\\characters\\services\\skill-service.ts": {
        "files": [
          "src\\lib\\characters\\services\\skill-service copy 2.ts",
          "src\\lib\\characters\\services\\skill-service.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\generation\\engine\\chapter-generator copy.ts_src\\lib\\generation\\engine\\chapter-generator.ts": {
        "files": [
          "src\\lib\\generation\\engine\\chapter-generator copy.ts",
          "src\\lib\\generation\\engine\\chapter-generator.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\generation\\engine\\chapter-generator copy.ts_src\\lib\\generation\\engine copy 2.ts": {
        "files": [
          "src\\lib\\generation\\engine\\chapter-generator copy.ts",
          "src\\lib\\generation\\engine copy 2.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\generation\\engine\\chapter-generator copy.ts_src\\lib\\generation\\engine copy 3.ts": {
        "files": [
          "src\\lib\\generation\\engine\\chapter-generator copy.ts",
          "src\\lib\\generation\\engine copy 3.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\generation\\engine\\chapter-generator copy.ts_src\\lib\\generation\\engine copy 4.ts": {
        "files": [
          "src\\lib\\generation\\engine\\chapter-generator copy.ts",
          "src\\lib\\generation\\engine copy 4.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\generation\\engine\\chapter-generator copy.ts_src\\lib\\generation\\engine copy.ts": {
        "files": [
          "src\\lib\\generation\\engine\\chapter-generator copy.ts",
          "src\\lib\\generation\\engine copy.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\generation\\engine\\chapter-generator copy.ts_src\\lib\\generation\\engine.ts": {
        "files": [
          "src\\lib\\generation\\engine\\chapter-generator copy.ts",
          "src\\lib\\generation\\engine.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\generation\\engine\\chapter-generator.ts_src\\lib\\generation\\engine copy 2.ts": {
        "files": [
          "src\\lib\\generation\\engine\\chapter-generator.ts",
          "src\\lib\\generation\\engine copy 2.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\generation\\engine\\chapter-generator.ts_src\\lib\\generation\\engine copy 3.ts": {
        "files": [
          "src\\lib\\generation\\engine\\chapter-generator.ts",
          "src\\lib\\generation\\engine copy 3.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\generation\\engine\\chapter-generator.ts_src\\lib\\generation\\engine copy 4.ts": {
        "files": [
          "src\\lib\\generation\\engine\\chapter-generator.ts",
          "src\\lib\\generation\\engine copy 4.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\generation\\engine\\chapter-generator.ts_src\\lib\\generation\\engine copy.ts": {
        "files": [
          "src\\lib\\generation\\engine\\chapter-generator.ts",
          "src\\lib\\generation\\engine copy.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\generation\\engine\\chapter-generator.ts_src\\lib\\generation\\engine.ts": {
        "files": [
          "src\\lib\\generation\\engine\\chapter-generator.ts",
          "src\\lib\\generation\\engine.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\generation\\engine copy 2.ts_src\\lib\\generation\\engine copy 3.ts": {
        "files": [
          "src\\lib\\generation\\engine copy 2.ts",
          "src\\lib\\generation\\engine copy 3.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\generation\\engine copy 2.ts_src\\lib\\generation\\engine copy 4.ts": {
        "files": [
          "src\\lib\\generation\\engine copy 2.ts",
          "src\\lib\\generation\\engine copy 4.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\generation\\engine copy 2.ts_src\\lib\\generation\\engine copy.ts": {
        "files": [
          "src\\lib\\generation\\engine copy 2.ts",
          "src\\lib\\generation\\engine copy.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\generation\\engine copy 2.ts_src\\lib\\generation\\engine.ts": {
        "files": [
          "src\\lib\\generation\\engine copy 2.ts",
          "src\\lib\\generation\\engine.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\generation\\engine copy 3.ts_src\\lib\\generation\\engine copy 4.ts": {
        "files": [
          "src\\lib\\generation\\engine copy 3.ts",
          "src\\lib\\generation\\engine copy 4.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\generation\\engine copy 3.ts_src\\lib\\generation\\engine copy.ts": {
        "files": [
          "src\\lib\\generation\\engine copy 3.ts",
          "src\\lib\\generation\\engine copy.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\generation\\engine copy 3.ts_src\\lib\\generation\\engine.ts": {
        "files": [
          "src\\lib\\generation\\engine copy 3.ts",
          "src\\lib\\generation\\engine.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\generation\\engine copy 4.ts_src\\lib\\generation\\engine copy.ts": {
        "files": [
          "src\\lib\\generation\\engine copy 4.ts",
          "src\\lib\\generation\\engine copy.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\generation\\engine copy 4.ts_src\\lib\\generation\\engine.ts": {
        "files": [
          "src\\lib\\generation\\engine copy 4.ts",
          "src\\lib\\generation\\engine.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\generation\\engine copy.ts_src\\lib\\generation\\engine.ts": {
        "files": [
          "src\\lib\\generation\\engine copy.ts",
          "src\\lib\\generation\\engine.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\generation\\prompt-generator copy 2.ts_src\\lib\\generation\\prompt-generator copy.ts": {
        "files": [
          "src\\lib\\generation\\prompt-generator copy 2.ts",
          "src\\lib\\generation\\prompt-generator copy.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\generation\\prompt-generator copy 2.ts_src\\lib\\generation\\prompt-generator.ts": {
        "files": [
          "src\\lib\\generation\\prompt-generator copy 2.ts",
          "src\\lib\\generation\\prompt-generator.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\generation\\prompt-generator copy.ts_src\\lib\\generation\\prompt-generator.ts": {
        "files": [
          "src\\lib\\generation\\prompt-generator copy.ts",
          "src\\lib\\generation\\prompt-generator.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "src\\lib\\memory\\core\\memory-manager copy.ts_src\\lib\\memory\\core\\memory-manager.ts": {
        "files": [
          "src\\lib\\memory\\core\\memory-manager copy.ts",
          "src\\lib\\memory\\core\\memory-manager.ts"
        ],
        "similarity": 1,
        "type": "prompt_similarity"
      },
      "story_generation": {
        "purpose": "story_generation",
        "files": [
          "src\\app\\(public)\\chapters\\[id]\\page.tsx",
          "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
          "src\\lib\\analysis\\coordinators\\analysis-coordinator.ts",
          "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
          "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
          "src\\lib\\analysis\\enhancement\\tension\\tension-optimization-service.ts",
          "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
          "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
          "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
          "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
          "src\\lib\\analysis\\services\\style\\style-analysis-service.ts",
          "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "src\\lib\\generation\\engine\\chapter-generator copy.ts",
          "src\\lib\\generation\\engine\\chapter-generator.ts",
          "src\\lib\\generation\\prompt\\memory-service.ts",
          "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
          "src\\lib\\plot\\context-builder.ts",
          "src\\lib\\plot\\context-builder.ts",
          "src\\lib\\plot\\section\\section-analyzer.ts",
          "src\\lib\\plot\\section\\section-analyzer.ts",
          "src\\lib\\plot\\section\\section-analyzer.ts",
          "src\\lib\\plot\\section\\section-designer.ts",
          "src\\lib\\plot\\section\\section-designer.ts",
          "src\\lib\\plot\\section\\section-designer.ts",
          "src\\lib\\plot\\section\\section-designer.ts",
          "src\\lib\\plot\\section\\section-designer.ts"
        ],
        "count": 32,
        "type": "purpose_duplication"
      },
      "unknown": {
        "purpose": "unknown",
        "files": [
          "src\\app\\api\\generation\\chapter\\route.ts",
          "src\\components\\admin\\editor\\dashboard.tsx",
          "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
          "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "src\\lib\\concept\\business-concept-library.ts",
          "src\\lib\\foreshadowing\\engine.ts",
          "src\\lib\\foreshadowing\\manager.ts",
          "src\\lib\\foreshadowing\\resolution-advisor.ts",
          "src\\lib\\generation\\engine\\chapter-generator copy.ts",
          "src\\lib\\generation\\engine\\chapter-generator.ts",
          "src\\lib\\generation\\engine copy 2.ts",
          "src\\lib\\generation\\engine copy 3.ts",
          "src\\lib\\generation\\engine copy 4.ts",
          "src\\lib\\generation\\engine copy.ts",
          "src\\lib\\generation\\engine.ts",
          "src\\lib\\generation\\prompt\\prompt-formatter.ts",
          "src\\lib\\generation\\prompt\\prompt-formatter.ts",
          "src\\lib\\generation\\prompt\\prompt-formatter.ts",
          "src\\lib\\generation\\prompt\\prompt-formatter.ts",
          "src\\lib\\generation\\prompt\\prompt-formatter.ts",
          "src\\lib\\generation\\prompt\\prompt-formatter.ts",
          "src\\lib\\generation\\prompt\\prompt-formatter.ts",
          "src\\lib\\generation\\prompt\\prompt-formatter.ts",
          "src\\lib\\learning-journey\\concept-learning-manager.ts",
          "src\\lib\\learning-journey\\concept-learning-manager.ts",
          "src\\lib\\memory\\core\\memory-manager copy.ts",
          "src\\lib\\memory\\core\\memory-manager.ts",
          "src\\lib\\memory\\integration\\cache-coordinator.ts",
          "src\\lib\\memory\\long-term\\duplicate-resolver.ts",
          "src\\lib\\memory\\mid-term\\quality-metrics.ts",
          "src\\lib\\memory\\mid-term\\quality-metrics.ts",
          "src\\lib\\plot\\context-builder.ts",
          "src\\lib\\plot\\section\\section-analyzer.ts",
          "src\\lib\\plot\\section\\section-plot-manager.ts",
          "src\\lib\\validation\\consistency-checker.ts"
        ],
        "count": 35,
        "type": "purpose_duplication"
      },
      "character_analysis": {
        "purpose": "character_analysis",
        "files": [
          "src\\components\\admin\\analytics\\character-analysis.tsx",
          "src\\components\\admin\\editor\\dashboard.tsx",
          "src\\components\\public\\character-spotlight.tsx",
          "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
          "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
          "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
          "src\\lib\\analysis\\adapters\\gemini-adapter.ts",
          "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
          "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
          "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
          "src\\lib\\analysis\\enhancement\\character\\character-depth-service copy.ts",
          "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
          "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
          "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
          "src\\lib\\analysis\\enhancement\\character\\character-depth-service.ts",
          "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
          "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
          "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
          "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
          "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
          "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
          "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
          "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
          "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
          "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
          "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
          "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
          "src\\lib\\analysis\\services\\chapter\\chapter-analysis-service.ts",
          "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
          "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
          "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
          "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
          "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
          "src\\lib\\analysis\\services\\character\\character-analysis-service.ts",
          "src\\lib\\analysis\\services\\reader\\reader-experience-analysis-service.ts",
          "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "src\\lib\\characters\\analyzers\\character-analyzer.ts",
          "src\\lib\\characters\\analyzers\\character-analyzer.ts",
          "src\\lib\\characters\\events\\handlers\\character-change-handler.ts",
          "src\\lib\\characters\\generators\\character-generator.ts",
          "src\\lib\\characters\\generators\\character-generator.ts",
          "src\\lib\\characters\\generators\\character-generator.ts",
          "src\\lib\\characters\\generators\\character-generator.ts",
          "src\\lib\\characters\\manager copy 3.ts",
          "src\\lib\\characters\\manager copy 4.ts",
          "src\\lib\\characters\\services\\character-service copy 2.ts",
          "src\\lib\\characters\\services\\character-service copy 2.ts",
          "src\\lib\\characters\\services\\character-service copy 2.ts",
          "src\\lib\\characters\\services\\evolution-service copy 2.ts",
          "src\\lib\\characters\\services\\evolution-service copy.ts",
          "src\\lib\\characters\\services\\evolution-service copy.ts",
          "src\\lib\\characters\\services\\evolution-service.ts",
          "src\\lib\\characters\\services\\parameter-service copy.ts",
          "src\\lib\\characters\\services\\psychology-service copy 2.ts",
          "src\\lib\\characters\\services\\psychology-service copy 2.ts",
          "src\\lib\\characters\\services\\psychology-service copy.ts",
          "src\\lib\\characters\\services\\psychology-service copy.ts",
          "src\\lib\\characters\\services\\relationship-service.ts",
          "src\\lib\\characters\\services\\skill-service copy 2.ts",
          "src\\lib\\characters\\services\\skill-service copy 2.ts",
          "src\\lib\\characters\\services\\skill-service copy 2.ts",
          "src\\lib\\characters\\services\\skill-service copy.ts",
          "src\\lib\\characters\\services\\skill-service.ts",
          "src\\lib\\characters\\services\\skill-service.ts",
          "src\\lib\\characters\\services\\skill-service.ts",
          "src\\lib\\characters\\utils\\character-utils.ts",
          "src\\lib\\characters\\utils\\character-utils.ts",
          "src\\lib\\characters\\utils\\character-utils.ts",
          "src\\lib\\characters\\utils\\character-utils.ts",
          "src\\lib\\characters\\utils\\character-utils.ts",
          "src\\lib\\characters\\utils\\character-utils.ts",
          "src\\lib\\characters\\utils\\character-utils.ts",
          "src\\lib\\foreshadowing\\auto-generator.ts",
          "src\\lib\\foreshadowing\\auto-generator.ts",
          "src\\lib\\foreshadowing\\engine.ts",
          "src\\lib\\generation\\prompt\\prompt-formatter.ts",
          "src\\lib\\generation\\prompt\\prompt-formatter.ts",
          "src\\lib\\generation\\prompt\\prompt-formatter.ts",
          "src\\lib\\generation\\prompt\\section-builder.ts",
          "src\\lib\\generation\\prompt\\template-manager.ts",
          "src\\lib\\generation\\prompt\\template-manager.ts",
          "src\\lib\\generation\\prompt-generator copy 2.ts",
          "src\\lib\\generation\\prompt-generator copy 2.ts",
          "src\\lib\\generation\\prompt-generator copy 2.ts",
          "src\\lib\\generation\\prompt-generator copy 2.ts",
          "src\\lib\\generation\\prompt-generator copy 2.ts",
          "src\\lib\\generation\\prompt-generator copy 2.ts",
          "src\\lib\\generation\\prompt-generator copy 2.ts",
          "src\\lib\\generation\\prompt-generator copy.ts",
          "src\\lib\\generation\\prompt-generator copy.ts",
          "src\\lib\\generation\\prompt-generator copy.ts",
          "src\\lib\\generation\\prompt-generator copy.ts",
          "src\\lib\\generation\\prompt-generator copy.ts",
          "src\\lib\\generation\\prompt-generator copy.ts",
          "src\\lib\\generation\\prompt-generator copy.ts",
          "src\\lib\\generation\\prompt-generator.ts",
          "src\\lib\\generation\\prompt-generator.ts",
          "src\\lib\\generation\\prompt-generator.ts",
          "src\\lib\\generation\\prompt-generator.ts",
          "src\\lib\\generation\\prompt-generator.ts",
          "src\\lib\\generation\\prompt-generator.ts",
          "src\\lib\\generation\\prompt-generator.ts",
          "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
          "src\\lib\\learning-journey\\emotional-learning-integrator.ts",
          "src\\lib\\learning-journey\\index.ts",
          "src\\lib\\learning-journey\\index.ts",
          "src\\lib\\learning-journey\\prompt-generator.ts",
          "src\\lib\\learning-journey\\prompt-generator.ts",
          "src\\lib\\learning-journey\\prompt-generator.ts",
          "src\\lib\\learning-journey\\prompt-generator.ts",
          "src\\lib\\learning-journey\\prompt-generator.ts",
          "src\\lib\\learning-journey\\prompt-generator.ts",
          "src\\lib\\learning-journey\\prompt-generator.ts",
          "src\\lib\\learning-journey\\prompt-generator.ts",
          "src\\lib\\memory\\integration\\duplicate-resolver.ts",
          "src\\lib\\memory\\short-term\\immediate-context.ts",
          "src\\lib\\memory\\text-analyzer-service.ts",
          "src\\lib\\plot\\checker.ts",
          "src\\lib\\plot\\context-builder.ts",
          "src\\lib\\plot\\context-builder.ts",
          "src\\lib\\plot\\context-builder.ts",
          "src\\lib\\plot\\context-builder.ts",
          "src\\lib\\plot\\section\\section-analyzer.ts",
          "src\\lib\\plot\\section\\section-analyzer.ts",
          "src\\lib\\plot\\section\\section-designer.ts",
          "src\\lib\\plot\\section\\section-designer.ts",
          "src\\lib\\plot\\section\\section-designer.ts",
          "src\\lib\\plot\\section\\section-designer.ts"
        ],
        "count": 129,
        "type": "purpose_duplication"
      },
      "content_improvement": {
        "purpose": "content_improvement",
        "files": [
          "src\\components\\admin\\editor\\learning-insights-panel.tsx",
          "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
          "src\\lib\\plot\\section\\section-analyzer.ts",
          "src\\lib\\validation\\system.ts"
        ],
        "count": 4,
        "type": "purpose_duplication"
      },
      "content_analysis": {
        "purpose": "content_analysis",
        "files": [
          "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
          "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
          "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
          "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
          "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
          "src\\lib\\analysis\\services\\narrative\\scene-structure-optimizer.ts",
          "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "src\\lib\\foreshadowing\\resolution-advisor.ts",
          "src\\lib\\plot\\section\\section-analyzer.ts",
          "src\\lib\\plot\\section\\section-analyzer.ts",
          "src\\lib\\plot\\section\\section-analyzer.ts"
        ],
        "count": 13,
        "type": "purpose_duplication"
      },
      "theme_analysis": {
        "purpose": "theme_analysis",
        "files": [
          "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
          "src\\lib\\analysis\\enhancement\\style\\style-optimization-service.ts",
          "src\\lib\\analysis\\enhancement\\theme\\theme-enhancement-service.ts",
          "src\\lib\\analysis\\services\\theme\\theme-analysis-service.ts",
          "src\\lib\\utils\\prompt-storage.ts"
        ],
        "count": 5,
        "type": "purpose_duplication"
      },
      "emotional_analysis": {
        "purpose": "emotional_analysis",
        "files": [
          "src\\lib\\learning-journey\\prompt-generator.ts",
          "src\\lib\\plot\\section\\section-designer.ts"
        ],
        "count": 2,
        "type": "purpose_duplication"
      }
    }
  }
}